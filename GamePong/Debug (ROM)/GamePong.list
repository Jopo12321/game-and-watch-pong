
GamePong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 ._itcram      00000000  00000100  00000100  0003014c  2**0
                  CONTENTS
  1 ._itcram_hot  00000000  00000100  00000100  0003014c  2**0
                  CONTENTS
  2 ._ram_uc      0004b000  24000000  24000000  00040000  2**4
                  ALLOC
  3 ._ram_exec    00000000  24050000  24050000  0003014c  2**0
                  CONTENTS
  4 ._extflash    00000000  90000000  90000000  0003014c  2**0
                  CONTENTS
  5 ._configflash 00000000  900ff000  900ff000  0003014c  2**0
                  CONTENTS
  6 ._ram         00000000  24050000  24050000  0003014c  2**0
                  CONTENTS
  7 ._ahbram      00005f94  30000000  30000000  00040000  2**4
                  ALLOC
  8 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .text         00015584  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .rodata       000045d4  08015834  08015834  00025834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init_array   00000004  08019e08  08019e08  00029e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .fini_array   00000004  08019e0c  08019e0c  00029e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         0000014c  20000000  08019e10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 ._flash_end   00000000  08019e10  08019e10  0003014c  2**0
                  CONTENTS
 15 .bss          00000684  2000014c  2000014c  0003014c  2**2
                  ALLOC
 16 ._persistent  00000000  200007d0  200007d0  0003014c  2**0
                  CONTENTS
 17 ._user_heap   00008000  200007d0  200007d0  0003014c  2**0
                  ALLOC
 18 ._user_stack  00017830  200087d0  200087d0  0003014c  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY
 20 .comment      00000043  00000000  00000000  0003017a  2**0
                  CONTENTS, READONLY
 21 .debug_info   0002b94e  00000000  00000000  000301bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00005ce8  00000000  00000000  0005bb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00002438  00000000  00000000  000617f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0003b710  00000000  00000000  00063c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   00032a22  00000000  00000000  0009f340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0016ba97  00000000  00000000  000d1d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00001b9f  00000000  00000000  0023d7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_frame  0000a3b0  00000000  00000000  0023f398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000005c  00000000  00000000  00249748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2000014c 	.word	0x2000014c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801581c 	.word	0x0801581c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	20000150 	.word	0x20000150
 80002ec:	0801581c 	.word	0x0801581c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <game_init>:

static int tim = 0;
int in_game = 0;
int in_demo = 0;

void game_init() {
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af04      	add	r7, sp, #16
	if (!in_demo) {
 8000396:	4b91      	ldr	r3, [pc, #580]	; (80005dc <game_init+0x24c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d125      	bne.n	80003ea <game_init+0x5a>
		restart_game = 0;
 800039e:	4b90      	ldr	r3, [pc, #576]	; (80005e0 <game_init+0x250>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
		in_game = 1;
 80003a4:	4b8f      	ldr	r3, [pc, #572]	; (80005e4 <game_init+0x254>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	601a      	str	r2, [r3, #0]
		switch (difficulty) {
 80003aa:	4b8f      	ldr	r3, [pc, #572]	; (80005e8 <game_init+0x258>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d014      	beq.n	80003dc <game_init+0x4c>
 80003b2:	2b02      	cmp	r3, #2
 80003b4:	dc19      	bgt.n	80003ea <game_init+0x5a>
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d002      	beq.n	80003c0 <game_init+0x30>
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d007      	beq.n	80003ce <game_init+0x3e>
 80003be:	e014      	b.n	80003ea <game_init+0x5a>
		case EASY:
			offset_x = 240;
 80003c0:	4b8a      	ldr	r3, [pc, #552]	; (80005ec <game_init+0x25c>)
 80003c2:	22f0      	movs	r2, #240	; 0xf0
 80003c4:	601a      	str	r2, [r3, #0]
			offset_y = 20;
 80003c6:	4b8a      	ldr	r3, [pc, #552]	; (80005f0 <game_init+0x260>)
 80003c8:	2214      	movs	r2, #20
 80003ca:	601a      	str	r2, [r3, #0]
			break;
 80003cc:	e00d      	b.n	80003ea <game_init+0x5a>
		case MEDIUM:
			offset_x = 220;
 80003ce:	4b87      	ldr	r3, [pc, #540]	; (80005ec <game_init+0x25c>)
 80003d0:	22dc      	movs	r2, #220	; 0xdc
 80003d2:	601a      	str	r2, [r3, #0]
			offset_y = 25;
 80003d4:	4b86      	ldr	r3, [pc, #536]	; (80005f0 <game_init+0x260>)
 80003d6:	2219      	movs	r2, #25
 80003d8:	601a      	str	r2, [r3, #0]
			break;
 80003da:	e006      	b.n	80003ea <game_init+0x5a>
		case HARD:
			offset_x = 200;
 80003dc:	4b83      	ldr	r3, [pc, #524]	; (80005ec <game_init+0x25c>)
 80003de:	22c8      	movs	r2, #200	; 0xc8
 80003e0:	601a      	str	r2, [r3, #0]
			offset_y = 35;
 80003e2:	4b83      	ldr	r3, [pc, #524]	; (80005f0 <game_init+0x260>)
 80003e4:	2223      	movs	r2, #35	; 0x23
 80003e6:	601a      	str	r2, [r3, #0]
			break;
 80003e8:	bf00      	nop
		}
	}
	score_p1 = 0;
 80003ea:	4b82      	ldr	r3, [pc, #520]	; (80005f4 <game_init+0x264>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
	score_p2 = 0;
 80003f0:	4b81      	ldr	r3, [pc, #516]	; (80005f8 <game_init+0x268>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
	dir = 0;
 80003f6:	4b81      	ldr	r3, [pc, #516]	; (80005fc <game_init+0x26c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	ball_xspeed = 1;
 80003fc:	4b80      	ldr	r3, [pc, #512]	; (8000600 <game_init+0x270>)
 80003fe:	2201      	movs	r2, #1
 8000400:	601a      	str	r2, [r3, #0]
	ball_yspeed = randsing();
 8000402:	f014 f8b3 	bl	801456c <rand>
 8000406:	4603      	mov	r3, r0
 8000408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800040c:	db02      	blt.n	8000414 <game_init+0x84>
 800040e:	f04f 33ff 	mov.w	r3, #4294967295
 8000412:	e000      	b.n	8000416 <game_init+0x86>
 8000414:	2301      	movs	r3, #1
 8000416:	4a7b      	ldr	r2, [pc, #492]	; (8000604 <game_init+0x274>)
 8000418:	6013      	str	r3, [r2, #0]
	ball_x = randint(30, 50);
 800041a:	f014 f8a7 	bl	801456c <rand>
 800041e:	4601      	mov	r1, r0
 8000420:	4b79      	ldr	r3, [pc, #484]	; (8000608 <game_init+0x278>)
 8000422:	fb83 2301 	smull	r2, r3, r3, r1
 8000426:	109a      	asrs	r2, r3, #2
 8000428:	17cb      	asrs	r3, r1, #31
 800042a:	1ad2      	subs	r2, r2, r3
 800042c:	4613      	mov	r3, r2
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	4413      	add	r3, r2
 8000432:	00da      	lsls	r2, r3, #3
 8000434:	1ad2      	subs	r2, r2, r3
 8000436:	1a8a      	subs	r2, r1, r2
 8000438:	f102 031e 	add.w	r3, r2, #30
 800043c:	4a73      	ldr	r2, [pc, #460]	; (800060c <game_init+0x27c>)
 800043e:	6013      	str	r3, [r2, #0]
	ball_y = randint(100, 140);
 8000440:	f014 f894 	bl	801456c <rand>
 8000444:	4601      	mov	r1, r0
 8000446:	4b72      	ldr	r3, [pc, #456]	; (8000610 <game_init+0x280>)
 8000448:	fb83 2301 	smull	r2, r3, r3, r1
 800044c:	111a      	asrs	r2, r3, #4
 800044e:	17cb      	asrs	r3, r1, #31
 8000450:	1ad2      	subs	r2, r2, r3
 8000452:	4613      	mov	r3, r2
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	00db      	lsls	r3, r3, #3
 800045a:	4413      	add	r3, r2
 800045c:	1aca      	subs	r2, r1, r3
 800045e:	f102 0364 	add.w	r3, r2, #100	; 0x64
 8000462:	4a6c      	ldr	r2, [pc, #432]	; (8000614 <game_init+0x284>)
 8000464:	6013      	str	r3, [r2, #0]

	pallete[1] = paddle_color;
 8000466:	4b6c      	ldr	r3, [pc, #432]	; (8000618 <game_init+0x288>)
 8000468:	881a      	ldrh	r2, [r3, #0]
 800046a:	4b6c      	ldr	r3, [pc, #432]	; (800061c <game_init+0x28c>)
 800046c:	805a      	strh	r2, [r3, #2]
	pallete[2] = ball_color;
 800046e:	4b6c      	ldr	r3, [pc, #432]	; (8000620 <game_init+0x290>)
 8000470:	881a      	ldrh	r2, [r3, #0]
 8000472:	4b6a      	ldr	r3, [pc, #424]	; (800061c <game_init+0x28c>)
 8000474:	809a      	strh	r2, [r3, #4]

	init_sprite(&paddle1, 2, 110, 1, 8, SPRITE_SHOW | 0x05, pallete,
 8000476:	4b6b      	ldr	r3, [pc, #428]	; (8000624 <game_init+0x294>)
 8000478:	9303      	str	r3, [sp, #12]
 800047a:	4b68      	ldr	r3, [pc, #416]	; (800061c <game_init+0x28c>)
 800047c:	9302      	str	r3, [sp, #8]
 800047e:	2315      	movs	r3, #21
 8000480:	9301      	str	r3, [sp, #4]
 8000482:	2308      	movs	r3, #8
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	2301      	movs	r3, #1
 8000488:	226e      	movs	r2, #110	; 0x6e
 800048a:	2102      	movs	r1, #2
 800048c:	4866      	ldr	r0, [pc, #408]	; (8000628 <game_init+0x298>)
 800048e:	f001 fcf3 	bl	8001e78 <init_sprite>
			paddle_data);
	init_sprite(&paddle2, 313, 110, 1, 8, SPRITE_SHOW | 0x05, pallete,
 8000492:	4b64      	ldr	r3, [pc, #400]	; (8000624 <game_init+0x294>)
 8000494:	9303      	str	r3, [sp, #12]
 8000496:	4b61      	ldr	r3, [pc, #388]	; (800061c <game_init+0x28c>)
 8000498:	9302      	str	r3, [sp, #8]
 800049a:	2315      	movs	r3, #21
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2308      	movs	r3, #8
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	2301      	movs	r3, #1
 80004a4:	226e      	movs	r2, #110	; 0x6e
 80004a6:	f240 1139 	movw	r1, #313	; 0x139
 80004aa:	4860      	ldr	r0, [pc, #384]	; (800062c <game_init+0x29c>)
 80004ac:	f001 fce4 	bl	8001e78 <init_sprite>
			paddle_data);

	init_sprite(&ball1, ball_x, ball_y, 8, 8, SPRITE_SHOW | 0x01, pallete,
 80004b0:	4b56      	ldr	r3, [pc, #344]	; (800060c <game_init+0x27c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	b299      	uxth	r1, r3
 80004b6:	4b57      	ldr	r3, [pc, #348]	; (8000614 <game_init+0x284>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b5c      	ldr	r3, [pc, #368]	; (8000630 <game_init+0x2a0>)
 80004be:	9303      	str	r3, [sp, #12]
 80004c0:	4b56      	ldr	r3, [pc, #344]	; (800061c <game_init+0x28c>)
 80004c2:	9302      	str	r3, [sp, #8]
 80004c4:	2311      	movs	r3, #17
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	2308      	movs	r3, #8
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2308      	movs	r3, #8
 80004ce:	4859      	ldr	r0, [pc, #356]	; (8000634 <game_init+0x2a4>)
 80004d0:	f001 fcd2 	bl	8001e78 <init_sprite>
			ball_data);
	init_sprite(&ball2, ball_x + 8, ball_y, 8, 8,
 80004d4:	4b4d      	ldr	r3, [pc, #308]	; (800060c <game_init+0x27c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	b29b      	uxth	r3, r3
 80004da:	3308      	adds	r3, #8
 80004dc:	b299      	uxth	r1, r3
 80004de:	4b4d      	ldr	r3, [pc, #308]	; (8000614 <game_init+0x284>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	4b52      	ldr	r3, [pc, #328]	; (8000630 <game_init+0x2a0>)
 80004e6:	9303      	str	r3, [sp, #12]
 80004e8:	4b4c      	ldr	r3, [pc, #304]	; (800061c <game_init+0x28c>)
 80004ea:	9302      	str	r3, [sp, #8]
 80004ec:	2331      	movs	r3, #49	; 0x31
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	2308      	movs	r3, #8
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2308      	movs	r3, #8
 80004f6:	4850      	ldr	r0, [pc, #320]	; (8000638 <game_init+0x2a8>)
 80004f8:	f001 fcbe 	bl	8001e78 <init_sprite>
	SPRITE_SHOW | SPRITE_FLIP_X | 0x01, pallete, ball_data);
	init_sprite(&ball3, ball_x, ball_y + 8, 8, 8,
 80004fc:	4b43      	ldr	r3, [pc, #268]	; (800060c <game_init+0x27c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	b299      	uxth	r1, r3
 8000502:	4b44      	ldr	r3, [pc, #272]	; (8000614 <game_init+0x284>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	b29b      	uxth	r3, r3
 8000508:	3308      	adds	r3, #8
 800050a:	b29a      	uxth	r2, r3
 800050c:	4b48      	ldr	r3, [pc, #288]	; (8000630 <game_init+0x2a0>)
 800050e:	9303      	str	r3, [sp, #12]
 8000510:	4b42      	ldr	r3, [pc, #264]	; (800061c <game_init+0x28c>)
 8000512:	9302      	str	r3, [sp, #8]
 8000514:	2351      	movs	r3, #81	; 0x51
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2308      	movs	r3, #8
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2308      	movs	r3, #8
 800051e:	4847      	ldr	r0, [pc, #284]	; (800063c <game_init+0x2ac>)
 8000520:	f001 fcaa 	bl	8001e78 <init_sprite>
	SPRITE_SHOW | SPRITE_FLIP_Y | 0x01, pallete, ball_data);
	init_sprite(&ball4, ball_x + 8, ball_y + 8, 8, 8,
 8000524:	4b39      	ldr	r3, [pc, #228]	; (800060c <game_init+0x27c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	b29b      	uxth	r3, r3
 800052a:	3308      	adds	r3, #8
 800052c:	b299      	uxth	r1, r3
 800052e:	4b39      	ldr	r3, [pc, #228]	; (8000614 <game_init+0x284>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	b29b      	uxth	r3, r3
 8000534:	3308      	adds	r3, #8
 8000536:	b29a      	uxth	r2, r3
 8000538:	4b3d      	ldr	r3, [pc, #244]	; (8000630 <game_init+0x2a0>)
 800053a:	9303      	str	r3, [sp, #12]
 800053c:	4b37      	ldr	r3, [pc, #220]	; (800061c <game_init+0x28c>)
 800053e:	9302      	str	r3, [sp, #8]
 8000540:	2371      	movs	r3, #113	; 0x71
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	2308      	movs	r3, #8
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2308      	movs	r3, #8
 800054a:	483d      	ldr	r0, [pc, #244]	; (8000640 <game_init+0x2b0>)
 800054c:	f001 fc94 	bl	8001e78 <init_sprite>
	SPRITE_SHOW | SPRITE_FLIP_X | SPRITE_FLIP_Y | 0x01, pallete, ball_data);

	list = sprites_init_list(&paddle1);
 8000550:	4835      	ldr	r0, [pc, #212]	; (8000628 <game_init+0x298>)
 8000552:	f001 fdf8 	bl	8002146 <sprites_init_list>
 8000556:	4603      	mov	r3, r0
 8000558:	4a3a      	ldr	r2, [pc, #232]	; (8000644 <game_init+0x2b4>)
 800055a:	6013      	str	r3, [r2, #0]
	list = sprites_add_to_list(list, &paddle2);
 800055c:	4b39      	ldr	r3, [pc, #228]	; (8000644 <game_init+0x2b4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4932      	ldr	r1, [pc, #200]	; (800062c <game_init+0x29c>)
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fe04 	bl	8002170 <sprites_add_to_list>
 8000568:	4603      	mov	r3, r0
 800056a:	4a36      	ldr	r2, [pc, #216]	; (8000644 <game_init+0x2b4>)
 800056c:	6013      	str	r3, [r2, #0]
	list = sprites_add_to_list(list, &ball1);
 800056e:	4b35      	ldr	r3, [pc, #212]	; (8000644 <game_init+0x2b4>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4930      	ldr	r1, [pc, #192]	; (8000634 <game_init+0x2a4>)
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fdfb 	bl	8002170 <sprites_add_to_list>
 800057a:	4603      	mov	r3, r0
 800057c:	4a31      	ldr	r2, [pc, #196]	; (8000644 <game_init+0x2b4>)
 800057e:	6013      	str	r3, [r2, #0]
	list = sprites_add_to_list(list, &ball2);
 8000580:	4b30      	ldr	r3, [pc, #192]	; (8000644 <game_init+0x2b4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	492c      	ldr	r1, [pc, #176]	; (8000638 <game_init+0x2a8>)
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fdf2 	bl	8002170 <sprites_add_to_list>
 800058c:	4603      	mov	r3, r0
 800058e:	4a2d      	ldr	r2, [pc, #180]	; (8000644 <game_init+0x2b4>)
 8000590:	6013      	str	r3, [r2, #0]
	list = sprites_add_to_list(list, &ball3);
 8000592:	4b2c      	ldr	r3, [pc, #176]	; (8000644 <game_init+0x2b4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4929      	ldr	r1, [pc, #164]	; (800063c <game_init+0x2ac>)
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fde9 	bl	8002170 <sprites_add_to_list>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a28      	ldr	r2, [pc, #160]	; (8000644 <game_init+0x2b4>)
 80005a2:	6013      	str	r3, [r2, #0]
	list = sprites_add_to_list(list, &ball4);
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <game_init+0x2b4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4925      	ldr	r1, [pc, #148]	; (8000640 <game_init+0x2b0>)
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fde0 	bl	8002170 <sprites_add_to_list>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a24      	ldr	r2, [pc, #144]	; (8000644 <game_init+0x2b4>)
 80005b4:	6013      	str	r3, [r2, #0]

	while (in_game) {
 80005b6:	e001      	b.n	80005bc <game_init+0x22c>
		game_loop();
 80005b8:	f000 f846 	bl	8000648 <game_loop>
	while (in_game) {
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <game_init+0x254>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f9      	bne.n	80005b8 <game_init+0x228>
	}
	while (in_demo) {
 80005c4:	e001      	b.n	80005ca <game_init+0x23a>
		demo_loop();
 80005c6:	f000 f85d 	bl	8000684 <demo_loop>
	while (in_demo) {
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <game_init+0x24c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f9      	bne.n	80005c6 <game_init+0x236>
	}
	//main_menu_init();
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000200 	.word	0x20000200
 80005e0:	20000258 	.word	0x20000258
 80005e4:	200001fc 	.word	0x200001fc
 80005e8:	20000260 	.word	0x20000260
 80005ec:	200001f0 	.word	0x200001f0
 80005f0:	200001f4 	.word	0x200001f4
 80005f4:	20000168 	.word	0x20000168
 80005f8:	2000016c 	.word	0x2000016c
 80005fc:	200001ec 	.word	0x200001ec
 8000600:	200001e4 	.word	0x200001e4
 8000604:	200001e8 	.word	0x200001e8
 8000608:	30c30c31 	.word	0x30c30c31
 800060c:	20000068 	.word	0x20000068
 8000610:	63e7063f 	.word	0x63e7063f
 8000614:	2000006c 	.word	0x2000006c
 8000618:	200000b2 	.word	0x200000b2
 800061c:	20000020 	.word	0x20000020
 8000620:	200000b4 	.word	0x200000b4
 8000624:	20000040 	.word	0x20000040
 8000628:	20000180 	.word	0x20000180
 800062c:	20000190 	.word	0x20000190
 8000630:	20000044 	.word	0x20000044
 8000634:	200001a0 	.word	0x200001a0
 8000638:	200001b0 	.word	0x200001b0
 800063c:	200001c0 	.word	0x200001c0
 8000640:	200001d0 	.word	0x200001d0
 8000644:	200001e0 	.word	0x200001e0

08000648 <game_loop>:

static void game_loop() {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	uint16_t *fb = lcd_get_active_buffer();
 800064e:	f003 fda3 	bl	8004198 <lcd_get_active_buffer>
 8000652:	6078      	str	r0, [r7, #4]
	draw_background(fb);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 f84b 	bl	80006f0 <draw_background>

	render_sprites(fb, list);
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <game_loop+0x38>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f001 fd4a 	bl	80020fa <render_sprites>

	process_input();
 8000666:	f000 f89f 	bl	80007a8 <process_input>
	update();
 800066a:	f000 f8e7 	bl	800083c <update>

	lcd_swap();
 800066e:	f003 fd65 	bl	800413c <lcd_swap>
	lcd_wait_for_vblank();
 8000672:	f003 fdbd 	bl	80041f0 <lcd_wait_for_vblank>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200001e0 	.word	0x200001e0

08000684 <demo_loop>:

static void demo_loop() {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af02      	add	r7, sp, #8
	uint16_t *fb = lcd_get_active_buffer();
 800068a:	f003 fd85 	bl	8004198 <lcd_get_active_buffer>
 800068e:	6078      	str	r0, [r7, #4]
	draw_background(fb);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f82d 	bl	80006f0 <draw_background>

	LCD_SetFont(&Font24);
 8000696:	4813      	ldr	r0, [pc, #76]	; (80006e4 <demo_loop+0x60>)
 8000698:	f000 fefa 	bl	8001490 <LCD_SetFont>
	LCD_SetFontScale(3);
 800069c:	2003      	movs	r0, #3
 800069e:	f000 ff07 	bl	80014b0 <LCD_SetFontScale>
	LCD_SetTextColor(LCD_COLOR_DARKYELLOW);
 80006a2:	f44f 4004 	mov.w	r0, #33792	; 0x8400
 80006a6:	f000 fed3 	bl	8001450 <LCD_SetTextColor>
	LCD_DisplayStringAt(fb, 6, 100, (uint8_t*) "DEMO\0", CENTER_MODE);
 80006aa:	2301      	movs	r3, #1
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <demo_loop+0x64>)
 80006b0:	2264      	movs	r2, #100	; 0x64
 80006b2:	2106      	movs	r1, #6
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f000 ff51 	bl	800155c <LCD_DisplayStringAt>
	LCD_SetFontScale(1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 fef8 	bl	80014b0 <LCD_SetFontScale>

	render_sprites(fb, list);
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <demo_loop+0x68>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f001 fd17 	bl	80020fa <render_sprites>

	process_input_demo();
 80006cc:	f000 f898 	bl	8000800 <process_input_demo>
	update_demo();
 80006d0:	f000 f8dc 	bl	800088c <update_demo>

	lcd_swap();
 80006d4:	f003 fd32 	bl	800413c <lcd_swap>
	lcd_wait_for_vblank();
 80006d8:	f003 fd8a 	bl	80041f0 <lcd_wait_for_vblank>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000018 	.word	0x20000018
 80006e8:	08015834 	.word	0x08015834
 80006ec:	200001e0 	.word	0x200001e0

080006f0 <draw_background>:

static void draw_background(uint16_t *buf) {
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
 80006f8:	2100      	movs	r1, #0
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 ff14 	bl	8001528 <LCD_Clear>
	LCD_DrawRect(buf, 0, 20, LCD_GetXSize() - 1, LCD_GetYSize() - 21,
 8000700:	f000 fe94 	bl	800142c <LCD_GetXSize>
 8000704:	4603      	mov	r3, r0
 8000706:	3b01      	subs	r3, #1
 8000708:	b29c      	uxth	r4, r3
 800070a:	f000 fe98 	bl	800143e <LCD_GetYSize>
 800070e:	4603      	mov	r3, r0
 8000710:	3b15      	subs	r3, #21
 8000712:	b29b      	uxth	r3, r3
 8000714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000718:	9201      	str	r2, [sp, #4]
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	4623      	mov	r3, r4
 800071e:	2214      	movs	r2, #20
 8000720:	2100      	movs	r1, #0
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f001 f904 	bl	8001930 <LCD_DrawRect>
	LCD_COLOR_WHITE);
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000728:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800072c:	f000 fe90 	bl	8001450 <LCD_SetTextColor>
	LCD_SetFont(&Font16);
 8000730:	4816      	ldr	r0, [pc, #88]	; (800078c <draw_background+0x9c>)
 8000732:	f000 fead 	bl	8001490 <LCD_SetFont>
	sprintf(score_p1_buf, "%d", score_p1);
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <draw_background+0xa0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	4915      	ldr	r1, [pc, #84]	; (8000794 <draw_background+0xa4>)
 800073e:	4816      	ldr	r0, [pc, #88]	; (8000798 <draw_background+0xa8>)
 8000740:	f014 f8c4 	bl	80148cc <siprintf>
	LCD_DisplayStringAt(buf, 0, 4, (uint8_t*) score_p1_buf, LEFT_MODE);
 8000744:	2303      	movs	r3, #3
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <draw_background+0xa8>)
 800074a:	2204      	movs	r2, #4
 800074c:	2100      	movs	r1, #0
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 ff04 	bl	800155c <LCD_DisplayStringAt>
	sprintf(score_p2_buf, "%d", score_p2);
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <draw_background+0xac>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	490e      	ldr	r1, [pc, #56]	; (8000794 <draw_background+0xa4>)
 800075c:	4810      	ldr	r0, [pc, #64]	; (80007a0 <draw_background+0xb0>)
 800075e:	f014 f8b5 	bl	80148cc <siprintf>
	LCD_DisplayStringAt(buf, 0, 4, (uint8_t*) score_p2_buf, RIGHT_MODE);
 8000762:	2302      	movs	r3, #2
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <draw_background+0xb0>)
 8000768:	2204      	movs	r2, #4
 800076a:	2100      	movs	r1, #0
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 fef5 	bl	800155c <LCD_DisplayStringAt>
	LCD_DisplayStringAt(buf, 1, 4, (uint8_t*) "SCORE\0", CENTER_MODE);
 8000772:	2301      	movs	r3, #1
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <draw_background+0xb4>)
 8000778:	2204      	movs	r2, #4
 800077a:	2101      	movs	r1, #1
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 feed 	bl	800155c <LCD_DisplayStringAt>
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	20000168 	.word	0x20000168
 8000794:	0801583c 	.word	0x0801583c
 8000798:	20000170 	.word	0x20000170
 800079c:	2000016c 	.word	0x2000016c
 80007a0:	20000178 	.word	0x20000178
 80007a4:	08015840 	.word	0x08015840

080007a8 <process_input>:

static void process_input() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
 80007ae:	f002 fe29 	bl	8003404 <buttons_get>
 80007b2:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <process_input+0x1a>
		HAL_NVIC_SystemReset();
 80007be:	f008 fb0e 	bl	8008dde <HAL_NVIC_SystemReset>
	}
	if (buttons & B_GAME) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d003      	beq.n	80007d4 <process_input+0x2c>
		lcd_sync();
 80007cc:	f003 fccc 	bl	8004168 <lcd_sync>
		in_game_menu_init();
 80007d0:	f000 fc74 	bl	80010bc <in_game_menu_init>
	}
	if (buttons & B_Up) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <process_input+0x3c>
		dir = -1;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <process_input+0x54>)
 80007e0:	22ff      	movs	r2, #255	; 0xff
 80007e2:	701a      	strb	r2, [r3, #0]
	}
	if (buttons & B_Down) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <process_input+0x4c>
		dir = 1;
 80007ee:	4b03      	ldr	r3, [pc, #12]	; (80007fc <process_input+0x54>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
	}
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200001ec 	.word	0x200001ec

08000800 <process_input_demo>:

static void process_input_demo() {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
 8000806:	f002 fdfd 	bl	8003404 <buttons_get>
 800080a:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <process_input_demo+0x1a>
		HAL_NVIC_SystemReset();
 8000816:	f008 fae2 	bl	8008dde <HAL_NVIC_SystemReset>
	}
	if (buttons & ~B_POWER) {
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000820:	2b00      	cmp	r3, #0
 8000822:	d004      	beq.n	800082e <process_input_demo+0x2e>
		lcd_sync();
 8000824:	f003 fca0 	bl	8004168 <lcd_sync>
		in_demo = 0;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <process_input_demo+0x38>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
	}
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000200 	.word	0x20000200

0800083c <update>:

static void update() {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	tim++;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <update+0x44>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	3301      	adds	r3, #1
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <update+0x44>)
 8000848:	6013      	str	r3, [r2, #0]
	if (score_p1 >= 10) {
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <update+0x48>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b09      	cmp	r3, #9
 8000850:	dd04      	ble.n	800085c <update+0x20>
		lcd_sync();
 8000852:	f003 fc89 	bl	8004168 <lcd_sync>
		game_over_init(1);
 8000856:	2001      	movs	r0, #1
 8000858:	f000 faac 	bl	8000db4 <game_over_init>
	}
	if (score_p2 >= 10) {
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <update+0x4c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b09      	cmp	r3, #9
 8000862:	dd04      	ble.n	800086e <update+0x32>
		lcd_sync();
 8000864:	f003 fc80 	bl	8004168 <lcd_sync>
		game_over_init(2);
 8000868:	2002      	movs	r0, #2
 800086a:	f000 faa3 	bl	8000db4 <game_over_init>
	}
	update_player();
 800086e:	f000 f81f 	bl	80008b0 <update_player>
	update_ai();
 8000872:	f000 f955 	bl	8000b20 <update_ai>
	update_ball();
 8000876:	f000 f89f 	bl	80009b8 <update_ball>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001f8 	.word	0x200001f8
 8000884:	20000168 	.word	0x20000168
 8000888:	2000016c 	.word	0x2000016c

0800088c <update_demo>:

static void update_demo() {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	tim++;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <update_demo+0x20>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <update_demo+0x20>)
 8000898:	6013      	str	r3, [r2, #0]
	update_player_demo();
 800089a:	f000 f835 	bl	8000908 <update_player_demo>
	update_ai_demo();
 800089e:	f000 f9c3 	bl	8000c28 <update_ai_demo>
	update_ball();
 80008a2:	f000 f889 	bl	80009b8 <update_ball>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200001f8 	.word	0x200001f8

080008b0 <update_player>:

static void update_player() {
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
	paddle1.y = paddle1.y + dir * p1_speed;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <update_player+0x50>)
 80008b6:	885a      	ldrh	r2, [r3, #2]
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <update_player+0x54>)
 80008ba:	f993 3000 	ldrsb.w	r3, [r3]
 80008be:	b299      	uxth	r1, r3
 80008c0:	2302      	movs	r3, #2
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	fb11 f303 	smulbb	r3, r1, r3
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4413      	add	r3, r2
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <update_player+0x50>)
 80008d0:	805a      	strh	r2, [r3, #2]
	if (paddle1.y < 22) {
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <update_player+0x50>)
 80008d4:	885b      	ldrh	r3, [r3, #2]
 80008d6:	2b15      	cmp	r3, #21
 80008d8:	d802      	bhi.n	80008e0 <update_player+0x30>
		paddle1.y = 22;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <update_player+0x50>)
 80008dc:	2216      	movs	r2, #22
 80008de:	805a      	strh	r2, [r3, #2]
	}
	if (paddle1.y > 198) {
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <update_player+0x50>)
 80008e2:	885b      	ldrh	r3, [r3, #2]
 80008e4:	2bc6      	cmp	r3, #198	; 0xc6
 80008e6:	d902      	bls.n	80008ee <update_player+0x3e>
		paddle1.y = 198;
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <update_player+0x50>)
 80008ea:	22c6      	movs	r2, #198	; 0xc6
 80008ec:	805a      	strh	r2, [r3, #2]
	}
	dir = 0;
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <update_player+0x54>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000180 	.word	0x20000180
 8000904:	200001ec 	.word	0x200001ec

08000908 <update_player_demo>:

static void update_player_demo() {
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	if (ball_xspeed > 0 || ball_x > 100) {
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <update_player_demo+0xa0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	dc03      	bgt.n	800091c <update_player_demo+0x14>
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <update_player_demo+0xa4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b64      	cmp	r3, #100	; 0x64
 800091a:	dd15      	ble.n	8000948 <update_player_demo+0x40>
		if (paddle1.y < 108) {
 800091c:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <update_player_demo+0xa8>)
 800091e:	885b      	ldrh	r3, [r3, #2]
 8000920:	2b6b      	cmp	r3, #107	; 0x6b
 8000922:	d806      	bhi.n	8000932 <update_player_demo+0x2a>
			paddle1.y = paddle1.y + 3;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <update_player_demo+0xa8>)
 8000926:	885b      	ldrh	r3, [r3, #2]
 8000928:	3303      	adds	r3, #3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <update_player_demo+0xa8>)
 800092e:	805a      	strh	r2, [r3, #2]
		} else if (paddle1.y > 112) {
			paddle1.y = paddle1.y - 3;
		}
		return;
 8000930:	e035      	b.n	800099e <update_player_demo+0x96>
		} else if (paddle1.y > 112) {
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <update_player_demo+0xa8>)
 8000934:	885b      	ldrh	r3, [r3, #2]
 8000936:	2b70      	cmp	r3, #112	; 0x70
 8000938:	d931      	bls.n	800099e <update_player_demo+0x96>
			paddle1.y = paddle1.y - 3;
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <update_player_demo+0xa8>)
 800093c:	885b      	ldrh	r3, [r3, #2]
 800093e:	3b03      	subs	r3, #3
 8000940:	b29a      	uxth	r2, r3
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <update_player_demo+0xa8>)
 8000944:	805a      	strh	r2, [r3, #2]
		return;
 8000946:	e02a      	b.n	800099e <update_player_demo+0x96>
	}
	if ((ball_y + 8) < (paddle1.y + 20)) {
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <update_player_demo+0xa8>)
 800094a:	885b      	ldrh	r3, [r3, #2]
 800094c:	f103 020b 	add.w	r2, r3, #11
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <update_player_demo+0xac>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	db0c      	blt.n	8000972 <update_player_demo+0x6a>
		paddle1.y = paddle1.y - 3;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <update_player_demo+0xa8>)
 800095a:	885b      	ldrh	r3, [r3, #2]
 800095c:	3b03      	subs	r3, #3
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <update_player_demo+0xa8>)
 8000962:	805a      	strh	r2, [r3, #2]
		if (paddle1.y < 22) {
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <update_player_demo+0xa8>)
 8000966:	885b      	ldrh	r3, [r3, #2]
 8000968:	2b15      	cmp	r3, #21
 800096a:	d802      	bhi.n	8000972 <update_player_demo+0x6a>
			paddle1.y = 22;
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <update_player_demo+0xa8>)
 800096e:	2216      	movs	r2, #22
 8000970:	805a      	strh	r2, [r3, #2]
		}
	}
	if ((ball_y + 8) > (paddle1.y + 20)) {
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <update_player_demo+0xa8>)
 8000974:	885b      	ldrh	r3, [r3, #2]
 8000976:	f103 020c 	add.w	r2, r3, #12
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <update_player_demo+0xac>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	429a      	cmp	r2, r3
 8000980:	da0e      	bge.n	80009a0 <update_player_demo+0x98>
		paddle1.y = paddle1.y + 3;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <update_player_demo+0xa8>)
 8000984:	885b      	ldrh	r3, [r3, #2]
 8000986:	3303      	adds	r3, #3
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <update_player_demo+0xa8>)
 800098c:	805a      	strh	r2, [r3, #2]
		if (paddle1.y > 198) {
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <update_player_demo+0xa8>)
 8000990:	885b      	ldrh	r3, [r3, #2]
 8000992:	2bc6      	cmp	r3, #198	; 0xc6
 8000994:	d904      	bls.n	80009a0 <update_player_demo+0x98>
			paddle1.y = 198;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <update_player_demo+0xa8>)
 8000998:	22c6      	movs	r2, #198	; 0xc6
 800099a:	805a      	strh	r2, [r3, #2]
 800099c:	e000      	b.n	80009a0 <update_player_demo+0x98>
		return;
 800099e:	bf00      	nop
		}
	}
}
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	200001e4 	.word	0x200001e4
 80009ac:	20000068 	.word	0x20000068
 80009b0:	20000180 	.word	0x20000180
 80009b4:	2000006c 	.word	0x2000006c

080009b8 <update_ball>:

static void update_ball() {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < ball_speed; ++i) {
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	e060      	b.n	8000a86 <update_ball+0xce>

		if (ball_x == 7) {
 80009c4:	4b4c      	ldr	r3, [pc, #304]	; (8000af8 <update_ball+0x140>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b07      	cmp	r3, #7
 80009ca:	d11a      	bne.n	8000a02 <update_ball+0x4a>
			if ((paddle1.y - 12 < ball_y) && (paddle1.y + 40 - 4 > ball_y)) {
 80009cc:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <update_ball+0x144>)
 80009ce:	885b      	ldrh	r3, [r3, #2]
 80009d0:	f1a3 020b 	sub.w	r2, r3, #11
 80009d4:	4b4a      	ldr	r3, [pc, #296]	; (8000b00 <update_ball+0x148>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	dc0b      	bgt.n	80009f4 <update_ball+0x3c>
 80009dc:	4b47      	ldr	r3, [pc, #284]	; (8000afc <update_ball+0x144>)
 80009de:	885b      	ldrh	r3, [r3, #2]
 80009e0:	f103 0223 	add.w	r2, r3, #35	; 0x23
 80009e4:	4b46      	ldr	r3, [pc, #280]	; (8000b00 <update_ball+0x148>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	db03      	blt.n	80009f4 <update_ball+0x3c>
				ball_xspeed = 1;
 80009ec:	4b45      	ldr	r3, [pc, #276]	; (8000b04 <update_ball+0x14c>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	e006      	b.n	8000a02 <update_ball+0x4a>
			} else {
				ball_xspeed = 1;
 80009f4:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <update_ball+0x14c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	601a      	str	r2, [r3, #0]
				update_score(-1);
 80009fa:	f04f 30ff 	mov.w	r0, #4294967295
 80009fe:	f000 f96b 	bl	8000cd8 <update_score>
			}
		}
		if (ball_x == 297) {
 8000a02:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <update_ball+0x140>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f240 1229 	movw	r2, #297	; 0x129
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d11b      	bne.n	8000a46 <update_ball+0x8e>
			if ((paddle2.y - 12 < ball_y) && (paddle2.y + 40 - 4 > ball_y)) {
 8000a0e:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <update_ball+0x150>)
 8000a10:	885b      	ldrh	r3, [r3, #2]
 8000a12:	f1a3 020b 	sub.w	r2, r3, #11
 8000a16:	4b3a      	ldr	r3, [pc, #232]	; (8000b00 <update_ball+0x148>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	dc0c      	bgt.n	8000a38 <update_ball+0x80>
 8000a1e:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <update_ball+0x150>)
 8000a20:	885b      	ldrh	r3, [r3, #2]
 8000a22:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8000a26:	4b36      	ldr	r3, [pc, #216]	; (8000b00 <update_ball+0x148>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	db04      	blt.n	8000a38 <update_ball+0x80>
				ball_xspeed = -1;
 8000a2e:	4b35      	ldr	r3, [pc, #212]	; (8000b04 <update_ball+0x14c>)
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	e006      	b.n	8000a46 <update_ball+0x8e>
			} else {
				ball_xspeed = -1;
 8000a38:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <update_ball+0x14c>)
 8000a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3e:	601a      	str	r2, [r3, #0]
				update_score(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f000 f949 	bl	8000cd8 <update_score>
			}
		}
		if (ball_y == 21) {
 8000a46:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <update_ball+0x148>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b15      	cmp	r3, #21
 8000a4c:	d102      	bne.n	8000a54 <update_ball+0x9c>
			ball_yspeed = 1;
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <update_ball+0x154>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
		}
		if (ball_y == 223) {
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <update_ball+0x148>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2bdf      	cmp	r3, #223	; 0xdf
 8000a5a:	d103      	bne.n	8000a64 <update_ball+0xac>
			ball_yspeed = -1;
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <update_ball+0x154>)
 8000a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a62:	601a      	str	r2, [r3, #0]
		}
		ball_x = ball_x + ball_xspeed;
 8000a64:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <update_ball+0x140>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <update_ball+0x14c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a22      	ldr	r2, [pc, #136]	; (8000af8 <update_ball+0x140>)
 8000a70:	6013      	str	r3, [r2, #0]
		ball_y = ball_y + ball_yspeed;
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <update_ball+0x148>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <update_ball+0x154>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a20      	ldr	r2, [pc, #128]	; (8000b00 <update_ball+0x148>)
 8000a7e:	6013      	str	r3, [r2, #0]
	for (i = 0; i < ball_speed; ++i) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3301      	adds	r3, #1
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	2203      	movs	r2, #3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	db9a      	blt.n	80009c4 <update_ball+0xc>

	}

	ball1.x = ball_x;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <update_ball+0x140>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <update_ball+0x158>)
 8000a96:	801a      	strh	r2, [r3, #0]
	ball1.y = ball_y;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <update_ball+0x148>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <update_ball+0x158>)
 8000aa0:	805a      	strh	r2, [r3, #2]
	ball2.x = ball_x + 8;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <update_ball+0x140>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	3308      	adds	r3, #8
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <update_ball+0x15c>)
 8000aae:	801a      	strh	r2, [r3, #0]
	ball2.y = ball_y;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <update_ball+0x148>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <update_ball+0x15c>)
 8000ab8:	805a      	strh	r2, [r3, #2]
	ball3.x = ball_x;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <update_ball+0x140>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <update_ball+0x160>)
 8000ac2:	801a      	strh	r2, [r3, #0]
	ball3.y = ball_y + 8;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <update_ball+0x148>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	3308      	adds	r3, #8
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <update_ball+0x160>)
 8000ad0:	805a      	strh	r2, [r3, #2]
	ball4.x = ball_x + 8;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <update_ball+0x140>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	3308      	adds	r3, #8
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <update_ball+0x164>)
 8000ade:	801a      	strh	r2, [r3, #0]
	ball4.y = ball_y + 8;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <update_ball+0x148>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	3308      	adds	r3, #8
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <update_ball+0x164>)
 8000aec:	805a      	strh	r2, [r3, #2]
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000068 	.word	0x20000068
 8000afc:	20000180 	.word	0x20000180
 8000b00:	2000006c 	.word	0x2000006c
 8000b04:	200001e4 	.word	0x200001e4
 8000b08:	20000190 	.word	0x20000190
 8000b0c:	200001e8 	.word	0x200001e8
 8000b10:	200001a0 	.word	0x200001a0
 8000b14:	200001b0 	.word	0x200001b0
 8000b18:	200001c0 	.word	0x200001c0
 8000b1c:	200001d0 	.word	0x200001d0

08000b20 <update_ai>:

static void update_ai() {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
	if (ball_xspeed < 0 || ball_x < offset_x) {
 8000b26:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <update_ai+0xe8>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db05      	blt.n	8000b3a <update_ai+0x1a>
 8000b2e:	4b37      	ldr	r3, [pc, #220]	; (8000c0c <update_ai+0xec>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <update_ai+0xf0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	da1b      	bge.n	8000b72 <update_ai+0x52>
		if (paddle2.y < 108) {
 8000b3a:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <update_ai+0xf4>)
 8000b3c:	885b      	ldrh	r3, [r3, #2]
 8000b3e:	2b6b      	cmp	r3, #107	; 0x6b
 8000b40:	d809      	bhi.n	8000b56 <update_ai+0x36>
			paddle2.y = paddle2.y + p2_speed;
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <update_ai+0xf4>)
 8000b44:	885a      	ldrh	r2, [r3, #2]
 8000b46:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <update_ai+0xf8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4413      	add	r3, r2
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <update_ai+0xf4>)
 8000b52:	805a      	strh	r2, [r3, #2]
		} else if (paddle2.y > 112) {
			paddle2.y = paddle2.y - p2_speed;
		}
		return;
 8000b54:	e052      	b.n	8000bfc <update_ai+0xdc>
		} else if (paddle2.y > 112) {
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <update_ai+0xf4>)
 8000b58:	885b      	ldrh	r3, [r3, #2]
 8000b5a:	2b70      	cmp	r3, #112	; 0x70
 8000b5c:	d94e      	bls.n	8000bfc <update_ai+0xdc>
			paddle2.y = paddle2.y - p2_speed;
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <update_ai+0xf4>)
 8000b60:	885a      	ldrh	r2, [r3, #2]
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <update_ai+0xf8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <update_ai+0xf4>)
 8000b6e:	805a      	strh	r2, [r3, #2]
		return;
 8000b70:	e044      	b.n	8000bfc <update_ai+0xdc>
	}
	int offset = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
	if (ball_yspeed > 0) {
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <update_ai+0xfc>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	dd05      	ble.n	8000b8a <update_ai+0x6a>
		//offset = 10;
		offset = 40 - offset_y;
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <update_ai+0x100>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	e002      	b.n	8000b90 <update_ai+0x70>
	} else {
		//offset = 30;
		offset = offset_y;
 8000b8a:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <update_ai+0x100>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	607b      	str	r3, [r7, #4]
	}
	if ((ball_y + 8) < (paddle2.y + offset)) {
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <update_ai+0x104>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f103 0208 	add.w	r2, r3, #8
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <update_ai+0xf4>)
 8000b9a:	885b      	ldrh	r3, [r3, #2]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	440b      	add	r3, r1
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	da0f      	bge.n	8000bc6 <update_ai+0xa6>
		paddle2.y = paddle2.y - p2_speed;
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <update_ai+0xf4>)
 8000ba8:	885a      	ldrh	r2, [r3, #2]
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <update_ai+0xf8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <update_ai+0xf4>)
 8000bb6:	805a      	strh	r2, [r3, #2]
		if (paddle2.y < 22) {
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <update_ai+0xf4>)
 8000bba:	885b      	ldrh	r3, [r3, #2]
 8000bbc:	2b15      	cmp	r3, #21
 8000bbe:	d802      	bhi.n	8000bc6 <update_ai+0xa6>
			paddle2.y = 22;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <update_ai+0xf4>)
 8000bc2:	2216      	movs	r2, #22
 8000bc4:	805a      	strh	r2, [r3, #2]
		}
	}
	if ((ball_y + 8) > (paddle2.y + offset)) {
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <update_ai+0x104>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	1dda      	adds	r2, r3, #7
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <update_ai+0xf4>)
 8000bce:	885b      	ldrh	r3, [r3, #2]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	440b      	add	r3, r1
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	db11      	blt.n	8000bfe <update_ai+0xde>
		paddle2.y = paddle2.y + p2_speed;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <update_ai+0xf4>)
 8000bdc:	885a      	ldrh	r2, [r3, #2]
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <update_ai+0xf8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	4413      	add	r3, r2
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <update_ai+0xf4>)
 8000bea:	805a      	strh	r2, [r3, #2]
		if (paddle2.y > 198) {
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <update_ai+0xf4>)
 8000bee:	885b      	ldrh	r3, [r3, #2]
 8000bf0:	2bc6      	cmp	r3, #198	; 0xc6
 8000bf2:	d904      	bls.n	8000bfe <update_ai+0xde>
			paddle2.y = 198;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <update_ai+0xf4>)
 8000bf6:	22c6      	movs	r2, #198	; 0xc6
 8000bf8:	805a      	strh	r2, [r3, #2]
 8000bfa:	e000      	b.n	8000bfe <update_ai+0xde>
		return;
 8000bfc:	bf00      	nop
		}
	}
}
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	200001e4 	.word	0x200001e4
 8000c0c:	20000068 	.word	0x20000068
 8000c10:	200001f0 	.word	0x200001f0
 8000c14:	20000190 	.word	0x20000190
 8000c18:	20000064 	.word	0x20000064
 8000c1c:	200001e8 	.word	0x200001e8
 8000c20:	200001f4 	.word	0x200001f4
 8000c24:	2000006c 	.word	0x2000006c

08000c28 <update_ai_demo>:

static void update_ai_demo() {
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
	if (ball_xspeed < 0 || ball_x < 220) {
 8000c2c:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <update_ai_demo+0xa0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db03      	blt.n	8000c3c <update_ai_demo+0x14>
 8000c34:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <update_ai_demo+0xa4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2bdb      	cmp	r3, #219	; 0xdb
 8000c3a:	dc15      	bgt.n	8000c68 <update_ai_demo+0x40>
		if (paddle2.y < 108) {
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <update_ai_demo+0xa8>)
 8000c3e:	885b      	ldrh	r3, [r3, #2]
 8000c40:	2b6b      	cmp	r3, #107	; 0x6b
 8000c42:	d806      	bhi.n	8000c52 <update_ai_demo+0x2a>
			paddle2.y = paddle2.y + 3;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <update_ai_demo+0xa8>)
 8000c46:	885b      	ldrh	r3, [r3, #2]
 8000c48:	3303      	adds	r3, #3
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <update_ai_demo+0xa8>)
 8000c4e:	805a      	strh	r2, [r3, #2]
		} else if (paddle2.y > 112) {
			paddle2.y = paddle2.y - 3;
		}
		return;
 8000c50:	e035      	b.n	8000cbe <update_ai_demo+0x96>
		} else if (paddle2.y > 112) {
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <update_ai_demo+0xa8>)
 8000c54:	885b      	ldrh	r3, [r3, #2]
 8000c56:	2b70      	cmp	r3, #112	; 0x70
 8000c58:	d931      	bls.n	8000cbe <update_ai_demo+0x96>
			paddle2.y = paddle2.y - 3;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <update_ai_demo+0xa8>)
 8000c5c:	885b      	ldrh	r3, [r3, #2]
 8000c5e:	3b03      	subs	r3, #3
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <update_ai_demo+0xa8>)
 8000c64:	805a      	strh	r2, [r3, #2]
		return;
 8000c66:	e02a      	b.n	8000cbe <update_ai_demo+0x96>
	}
	if ((ball_y + 8) < (paddle2.y + 20)) {
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <update_ai_demo+0xa8>)
 8000c6a:	885b      	ldrh	r3, [r3, #2]
 8000c6c:	f103 020b 	add.w	r2, r3, #11
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <update_ai_demo+0xac>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	db0c      	blt.n	8000c92 <update_ai_demo+0x6a>
		paddle2.y = paddle2.y - 3;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <update_ai_demo+0xa8>)
 8000c7a:	885b      	ldrh	r3, [r3, #2]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <update_ai_demo+0xa8>)
 8000c82:	805a      	strh	r2, [r3, #2]
		if (paddle2.y < 22) {
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <update_ai_demo+0xa8>)
 8000c86:	885b      	ldrh	r3, [r3, #2]
 8000c88:	2b15      	cmp	r3, #21
 8000c8a:	d802      	bhi.n	8000c92 <update_ai_demo+0x6a>
			paddle2.y = 22;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <update_ai_demo+0xa8>)
 8000c8e:	2216      	movs	r2, #22
 8000c90:	805a      	strh	r2, [r3, #2]
		}
	}
	if ((ball_y + 8) > (paddle2.y + 20)) {
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <update_ai_demo+0xa8>)
 8000c94:	885b      	ldrh	r3, [r3, #2]
 8000c96:	f103 020c 	add.w	r2, r3, #12
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <update_ai_demo+0xac>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	da0e      	bge.n	8000cc0 <update_ai_demo+0x98>
		paddle2.y = paddle2.y + 3;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <update_ai_demo+0xa8>)
 8000ca4:	885b      	ldrh	r3, [r3, #2]
 8000ca6:	3303      	adds	r3, #3
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <update_ai_demo+0xa8>)
 8000cac:	805a      	strh	r2, [r3, #2]
		if (paddle2.y > 198) {
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <update_ai_demo+0xa8>)
 8000cb0:	885b      	ldrh	r3, [r3, #2]
 8000cb2:	2bc6      	cmp	r3, #198	; 0xc6
 8000cb4:	d904      	bls.n	8000cc0 <update_ai_demo+0x98>
			paddle2.y = 198;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <update_ai_demo+0xa8>)
 8000cb8:	22c6      	movs	r2, #198	; 0xc6
 8000cba:	805a      	strh	r2, [r3, #2]
 8000cbc:	e000      	b.n	8000cc0 <update_ai_demo+0x98>
		return;
 8000cbe:	bf00      	nop
		}
	}
}
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	200001e4 	.word	0x200001e4
 8000ccc:	20000068 	.word	0x20000068
 8000cd0:	20000190 	.word	0x20000190
 8000cd4:	2000006c 	.word	0x2000006c

08000cd8 <update_score>:

static void update_score(int score) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	lcd_sync();
 8000ce0:	f003 fa42 	bl	8004168 <lcd_sync>
	if (score == 1) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d104      	bne.n	8000cf4 <update_score+0x1c>
		score_p1++;
 8000cea:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <update_score+0xb4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4a26      	ldr	r2, [pc, #152]	; (8000d8c <update_score+0xb4>)
 8000cf2:	6013      	str	r3, [r2, #0]
	}
	if (score == -1) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfa:	d104      	bne.n	8000d06 <update_score+0x2e>
		score_p2++;
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <update_score+0xb8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a23      	ldr	r2, [pc, #140]	; (8000d90 <update_score+0xb8>)
 8000d04:	6013      	str	r3, [r2, #0]
	}
	HAL_Delay(500);
 8000d06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d0a:	f006 f813 	bl	8006d34 <HAL_Delay>
	dir = 0;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <update_score+0xbc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
	ball_xspeed = 1;
 8000d14:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <update_score+0xc0>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
	ball_yspeed = randsing();
 8000d1a:	f013 fc27 	bl	801456c <rand>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d24:	db02      	blt.n	8000d2c <update_score+0x54>
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	e000      	b.n	8000d2e <update_score+0x56>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <update_score+0xc4>)
 8000d30:	6013      	str	r3, [r2, #0]
	ball_x = randint(30, 50);
 8000d32:	f013 fc1b 	bl	801456c <rand>
 8000d36:	4601      	mov	r1, r0
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <update_score+0xc8>)
 8000d3a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d3e:	109a      	asrs	r2, r3, #2
 8000d40:	17cb      	asrs	r3, r1, #31
 8000d42:	1ad2      	subs	r2, r2, r3
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00da      	lsls	r2, r3, #3
 8000d4c:	1ad2      	subs	r2, r2, r3
 8000d4e:	1a8a      	subs	r2, r1, r2
 8000d50:	f102 031e 	add.w	r3, r2, #30
 8000d54:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <update_score+0xcc>)
 8000d56:	6013      	str	r3, [r2, #0]
	ball_y = randint(100, 140);
 8000d58:	f013 fc08 	bl	801456c <rand>
 8000d5c:	4601      	mov	r1, r0
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <update_score+0xd0>)
 8000d60:	fb83 2301 	smull	r2, r3, r3, r1
 8000d64:	111a      	asrs	r2, r3, #4
 8000d66:	17cb      	asrs	r3, r1, #31
 8000d68:	1ad2      	subs	r2, r2, r3
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	4413      	add	r3, r2
 8000d74:	1aca      	subs	r2, r1, r3
 8000d76:	f102 0364 	add.w	r3, r2, #100	; 0x64
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <update_score+0xd4>)
 8000d7c:	6013      	str	r3, [r2, #0]
	paddle2.y = 115;
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <update_score+0xd8>)
 8000d80:	2273      	movs	r2, #115	; 0x73
 8000d82:	805a      	strh	r2, [r3, #2]
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000168 	.word	0x20000168
 8000d90:	2000016c 	.word	0x2000016c
 8000d94:	200001ec 	.word	0x200001ec
 8000d98:	200001e4 	.word	0x200001e4
 8000d9c:	200001e8 	.word	0x200001e8
 8000da0:	30c30c31 	.word	0x30c30c31
 8000da4:	20000068 	.word	0x20000068
 8000da8:	63e7063f 	.word	0x63e7063f
 8000dac:	2000006c 	.word	0x2000006c
 8000db0:	20000190 	.word	0x20000190

08000db4 <game_over_init>:
static int ticks = 0;
static int action_delay = 0;
static uint8_t selected_item = 0;
int winner;

void game_over_init(int player_won) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	winner = player_won;
 8000dbc:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <game_over_init+0x50>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
	game_over_menu = 1;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <game_over_init+0x54>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
	selected_item = 0;
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <game_over_init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
	action_delay = 15;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <game_over_init+0x5c>)
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	601a      	str	r2, [r3, #0]
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000dd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000dd8:	f000 fb3a 	bl	8001450 <LCD_SetTextColor>
	LCD_SetFont(&Font24);
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <game_over_init+0x60>)
 8000dde:	f000 fb57 	bl	8001490 <LCD_SetFont>
	LCD_SetFontScale(1);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f000 fb64 	bl	80014b0 <LCD_SetFontScale>
	while (game_over_menu) {
 8000de8:	e001      	b.n	8000dee <game_over_init+0x3a>
		game_over_loop();
 8000dea:	f000 f815 	bl	8000e18 <game_over_loop>
	while (game_over_menu) {
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <game_over_init+0x54>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f9      	bne.n	8000dea <game_over_init+0x36>
	}
	menu_select();
 8000df6:	f000 f93d 	bl	8001074 <menu_select>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000210 	.word	0x20000210
 8000e08:	20000070 	.word	0x20000070
 8000e0c:	2000020c 	.word	0x2000020c
 8000e10:	20000208 	.word	0x20000208
 8000e14:	20000018 	.word	0x20000018

08000e18 <game_over_loop>:

static void game_over_loop() {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	uint16_t *fb = lcd_get_active_buffer();
 8000e1e:	f003 f9bb 	bl	8004198 <lcd_get_active_buffer>
 8000e22:	6078      	str	r0, [r7, #4]
	draw_background(fb);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f861 	bl	8000eec <draw_background>

	process_input();
 8000e2a:	f000 f80b 	bl	8000e44 <process_input>
	update();
 8000e2e:	f000 f84f 	bl	8000ed0 <update>

	lcd_swap();
 8000e32:	f003 f983 	bl	800413c <lcd_swap>
	lcd_wait_for_vblank();
 8000e36:	f003 f9db 	bl	80041f0 <lcd_wait_for_vblank>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <process_input>:

static void process_input() {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
 8000e4a:	f002 fadb 	bl	8003404 <buttons_get>
 8000e4e:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <process_input+0x1a>
		HAL_NVIC_SystemReset();
 8000e5a:	f007 ffc0 	bl	8008dde <HAL_NVIC_SystemReset>
	}
	if (action_delay <= 0) {
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <process_input+0x80>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dc24      	bgt.n	8000eb0 <process_input+0x6c>
		if (buttons & B_Up) {
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d008      	beq.n	8000e82 <process_input+0x3e>
			selected_item--;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <process_input+0x84>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <process_input+0x84>)
 8000e7a:	701a      	strb	r2, [r3, #0]
			action_delay = 15;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <process_input+0x80>)
 8000e7e:	220f      	movs	r2, #15
 8000e80:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_Down) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d008      	beq.n	8000e9e <process_input+0x5a>
			selected_item++;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <process_input+0x84>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <process_input+0x84>)
 8000e96:	701a      	strb	r2, [r3, #0]
			action_delay = 15;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <process_input+0x80>)
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_A) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f003 0310 	and.w	r3, r3, #16
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d008      	beq.n	8000eba <process_input+0x76>
			game_over_menu = 0;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <process_input+0x88>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
		}
	} else {
		action_delay--;
	}
}
 8000eae:	e004      	b.n	8000eba <process_input+0x76>
		action_delay--;
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <process_input+0x80>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	4a03      	ldr	r2, [pc, #12]	; (8000ec4 <process_input+0x80>)
 8000eb8:	6013      	str	r3, [r2, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000208 	.word	0x20000208
 8000ec8:	2000020c 	.word	0x2000020c
 8000ecc:	20000070 	.word	0x20000070

08000ed0 <update>:
static void update() {
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
	ticks++;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <update+0x18>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <update+0x18>)
 8000edc:	6013      	str	r3, [r2, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	20000204 	.word	0x20000204

08000eec <draw_background>:

static void draw_background(uint16_t *buf) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	6078      	str	r0, [r7, #4]
	LCD_SetBackColor(LCD_COLOR_GRAY);
 8000ef4:	f248 4010 	movw	r0, #33808	; 0x8410
 8000ef8:	f000 faba 	bl	8001470 <LCD_SetBackColor>
	LCD_FillCircle(buf, 80, 70, 3, LCD_COLOR_WHITE);
 8000efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2303      	movs	r3, #3
 8000f04:	2246      	movs	r2, #70	; 0x46
 8000f06:	2150      	movs	r1, #80	; 0x50
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 fe26 	bl	8001b5a <LCD_FillCircle>
	LCD_FillCircle(buf, 239, 70, 3, LCD_COLOR_WHITE);
 8000f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2303      	movs	r3, #3
 8000f16:	2246      	movs	r2, #70	; 0x46
 8000f18:	21ef      	movs	r1, #239	; 0xef
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 fe1d 	bl	8001b5a <LCD_FillCircle>
	LCD_FillCircle(buf, 80, 169, 3, LCD_COLOR_WHITE);
 8000f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2303      	movs	r3, #3
 8000f28:	22a9      	movs	r2, #169	; 0xa9
 8000f2a:	2150      	movs	r1, #80	; 0x50
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 fe14 	bl	8001b5a <LCD_FillCircle>
	LCD_FillCircle(buf, 239, 169, 3, LCD_COLOR_WHITE);
 8000f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2303      	movs	r3, #3
 8000f3a:	22a9      	movs	r2, #169	; 0xa9
 8000f3c:	21ef      	movs	r1, #239	; 0xef
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 fe0b 	bl	8001b5a <LCD_FillCircle>

	LCD_FillRect(buf, 77, 70, 3, 100, LCD_COLOR_WHITE);
 8000f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	2364      	movs	r3, #100	; 0x64
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2303      	movs	r3, #3
 8000f50:	2246      	movs	r2, #70	; 0x46
 8000f52:	214d      	movs	r1, #77	; 0x4d
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fdcf 	bl	8001af8 <LCD_FillRect>
	LCD_FillRect(buf, 240, 70, 3, 100, LCD_COLOR_WHITE);
 8000f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	2364      	movs	r3, #100	; 0x64
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2303      	movs	r3, #3
 8000f66:	2246      	movs	r2, #70	; 0x46
 8000f68:	21f0      	movs	r1, #240	; 0xf0
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fdc4 	bl	8001af8 <LCD_FillRect>
	LCD_FillRect(buf, 80, 67, 160, 3, LCD_COLOR_WHITE);
 8000f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	2303      	movs	r3, #3
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	23a0      	movs	r3, #160	; 0xa0
 8000f7c:	2243      	movs	r2, #67	; 0x43
 8000f7e:	2150      	movs	r1, #80	; 0x50
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fdb9 	bl	8001af8 <LCD_FillRect>
	LCD_FillRect(buf, 80, 170, 160, 3, LCD_COLOR_WHITE);
 8000f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	23a0      	movs	r3, #160	; 0xa0
 8000f92:	22aa      	movs	r2, #170	; 0xaa
 8000f94:	2150      	movs	r1, #80	; 0x50
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 fdae 	bl	8001af8 <LCD_FillRect>

	LCD_FillRect(buf, 80, 70, 160, 100, LCD_COLOR_GRAY);
 8000f9c:	f248 4310 	movw	r3, #33808	; 0x8410
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	2364      	movs	r3, #100	; 0x64
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	23a0      	movs	r3, #160	; 0xa0
 8000fa8:	2246      	movs	r2, #70	; 0x46
 8000faa:	2150      	movs	r1, #80	; 0x50
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 fda3 	bl	8001af8 <LCD_FillRect>

	LCD_SetTextColor(LCD_COLOR_DARKRED);
 8000fb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000fb6:	f000 fa4b 	bl	8001450 <LCD_SetTextColor>
	if (winner == 1) {
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <draw_background+0x16c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d108      	bne.n	8000fd4 <draw_background+0xe8>
		LCD_DisplayStringAt(buf, 0, 80, (uint8_t*) "You win!\0", CENTER_MODE);
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <draw_background+0x170>)
 8000fc8:	2250      	movs	r2, #80	; 0x50
 8000fca:	2100      	movs	r1, #0
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fac5 	bl	800155c <LCD_DisplayStringAt>
 8000fd2:	e007      	b.n	8000fe4 <draw_background+0xf8>
	} else {
		LCD_DisplayStringAt(buf, 0, 80, (uint8_t*) "You lose!\0", CENTER_MODE);
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <draw_background+0x174>)
 8000fda:	2250      	movs	r2, #80	; 0x50
 8000fdc:	2100      	movs	r1, #0
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fabc 	bl	800155c <LCD_DisplayStringAt>
	}
	if (selected_item % 2 == 0) {
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <draw_background+0x178>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d105      	bne.n	8000ffe <draw_background+0x112>
		LCD_SetTextColor(selected_item_color);
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <draw_background+0x17c>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fa2a 	bl	8001450 <LCD_SetTextColor>
 8000ffc:	e003      	b.n	8001006 <draw_background+0x11a>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ffe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001002:	f000 fa25 	bl	8001450 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Restart\0", CENTER_MODE);
 8001006:	2301      	movs	r3, #1
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <draw_background+0x180>)
 800100c:	226e      	movs	r2, #110	; 0x6e
 800100e:	2100      	movs	r1, #0
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 faa3 	bl	800155c <LCD_DisplayStringAt>
	if (selected_item % 2 == 1) {
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <draw_background+0x178>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <draw_background+0x144>
		LCD_SetTextColor(selected_item_color);
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <draw_background+0x17c>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fa11 	bl	8001450 <LCD_SetTextColor>
 800102e:	e003      	b.n	8001038 <draw_background+0x14c>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 8001030:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001034:	f000 fa0c 	bl	8001450 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 140, (uint8_t*) "Exit\0", CENTER_MODE);
 8001038:	2301      	movs	r3, #1
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <draw_background+0x184>)
 800103e:	228c      	movs	r2, #140	; 0x8c
 8001040:	2100      	movs	r1, #0
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fa8a 	bl	800155c <LCD_DisplayStringAt>
	LCD_SetBackColor(LCD_COLOR_BLACK);
 8001048:	2000      	movs	r0, #0
 800104a:	f000 fa11 	bl	8001470 <LCD_SetBackColor>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000210 	.word	0x20000210
 800105c:	08015848 	.word	0x08015848
 8001060:	08015854 	.word	0x08015854
 8001064:	2000020c 	.word	0x2000020c
 8001068:	20000074 	.word	0x20000074
 800106c:	08015860 	.word	0x08015860
 8001070:	0801586c 	.word	0x0801586c

08001074 <menu_select>:

static void menu_select() {
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	if (selected_item % 2 == 0) {
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <menu_select+0x3c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d105      	bne.n	8001092 <menu_select+0x1e>
		in_game = 0;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <menu_select+0x40>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
		restart_game = 1;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <menu_select+0x44>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
	}
	if (selected_item % 2 == 1) {
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <menu_select+0x3c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <menu_select+0x32>
		in_game = 0;
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <menu_select+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
	}
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	2000020c 	.word	0x2000020c
 80010b4:	200001fc 	.word	0x200001fc
 80010b8:	20000258 	.word	0x20000258

080010bc <in_game_menu_init>:
static uint16_t selected_item_color = LCD_COLOR_DARKBLUE;
static int ticks = 0;
static int action_delay = 0;
static int8_t selected_item = 0;

void in_game_menu_init() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	in_game_menu = 1;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <in_game_menu_init+0x40>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
	selected_item = 0;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <in_game_menu_init+0x44>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
	action_delay = 15;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <in_game_menu_init+0x48>)
 80010ce:	220f      	movs	r2, #15
 80010d0:	601a      	str	r2, [r3, #0]
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80010d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010d6:	f000 f9bb 	bl	8001450 <LCD_SetTextColor>
	LCD_SetFont(&Font24);
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <in_game_menu_init+0x4c>)
 80010dc:	f000 f9d8 	bl	8001490 <LCD_SetFont>
	LCD_SetFontScale(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 f9e5 	bl	80014b0 <LCD_SetFontScale>
	while (in_game_menu) {
 80010e6:	e001      	b.n	80010ec <in_game_menu_init+0x30>
		in_game_menu_loop();
 80010e8:	f000 f810 	bl	800110c <in_game_menu_loop>
	while (in_game_menu) {
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <in_game_menu_init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f9      	bne.n	80010e8 <in_game_menu_init+0x2c>
	}
	menu_select();
 80010f4:	f000 f964 	bl	80013c0 <menu_select>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000078 	.word	0x20000078
 8001100:	2000021c 	.word	0x2000021c
 8001104:	20000218 	.word	0x20000218
 8001108:	20000018 	.word	0x20000018

0800110c <in_game_menu_loop>:

static void in_game_menu_loop() {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	uint16_t *fb = lcd_get_active_buffer();
 8001112:	f003 f841 	bl	8004198 <lcd_get_active_buffer>
 8001116:	6078      	str	r0, [r7, #4]
	draw_background(fb);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f877 	bl	800120c <draw_background>

	process_input();
 800111e:	f000 f80b 	bl	8001138 <process_input>
	update();
 8001122:	f000 f865 	bl	80011f0 <update>

	lcd_swap();
 8001126:	f003 f809 	bl	800413c <lcd_swap>
	lcd_wait_for_vblank();
 800112a:	f003 f861 	bl	80041f0 <lcd_wait_for_vblank>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <process_input>:

static void process_input() {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
 800113e:	f002 f961 	bl	8003404 <buttons_get>
 8001142:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <process_input+0x1a>
		HAL_NVIC_SystemReset();
 800114e:	f007 fe46 	bl	8008dde <HAL_NVIC_SystemReset>
	}
	if (action_delay <= 0) {
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <process_input+0xac>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	dc3a      	bgt.n	80011d0 <process_input+0x98>
		if (buttons & B_Up) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d013      	beq.n	800118c <process_input+0x54>
			if (selected_item == 0) {
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <process_input+0xb0>)
 8001166:	f993 3000 	ldrsb.w	r3, [r3]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <process_input+0x3c>
				selected_item = 3;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <process_input+0xb0>)
 8001170:	2203      	movs	r2, #3
 8001172:	701a      	strb	r2, [r3, #0]
			}
			selected_item--;
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <process_input+0xb0>)
 8001176:	f993 3000 	ldrsb.w	r3, [r3]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	3b01      	subs	r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	b25a      	sxtb	r2, r3
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <process_input+0xb0>)
 8001184:	701a      	strb	r2, [r3, #0]
			action_delay = 15;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <process_input+0xac>)
 8001188:	220f      	movs	r2, #15
 800118a:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_Down) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d013      	beq.n	80011be <process_input+0x86>
			if (selected_item == 2) {
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <process_input+0xb0>)
 8001198:	f993 3000 	ldrsb.w	r3, [r3]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d102      	bne.n	80011a6 <process_input+0x6e>
				selected_item = -1;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <process_input+0xb0>)
 80011a2:	22ff      	movs	r2, #255	; 0xff
 80011a4:	701a      	strb	r2, [r3, #0]
			}
			selected_item++;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <process_input+0xb0>)
 80011a8:	f993 3000 	ldrsb.w	r3, [r3]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <process_input+0xb0>)
 80011b6:	701a      	strb	r2, [r3, #0]
			action_delay = 15;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <process_input+0xac>)
 80011ba:	220f      	movs	r2, #15
 80011bc:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_A) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d008      	beq.n	80011da <process_input+0xa2>
			in_game_menu = 0;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <process_input+0xb4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
		}
	} else {
		action_delay--;
	}
}
 80011ce:	e004      	b.n	80011da <process_input+0xa2>
		action_delay--;
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <process_input+0xac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <process_input+0xac>)
 80011d8:	6013      	str	r3, [r2, #0]
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000218 	.word	0x20000218
 80011e8:	2000021c 	.word	0x2000021c
 80011ec:	20000078 	.word	0x20000078

080011f0 <update>:
static void update() {
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	ticks++;
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <update+0x18>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a03      	ldr	r2, [pc, #12]	; (8001208 <update+0x18>)
 80011fc:	6013      	str	r3, [r2, #0]
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000214 	.word	0x20000214

0800120c <draw_background>:

static void draw_background(uint16_t *buf) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af02      	add	r7, sp, #8
 8001212:	6078      	str	r0, [r7, #4]
	LCD_SetBackColor(LCD_COLOR_GRAY);
 8001214:	f248 4010 	movw	r0, #33808	; 0x8410
 8001218:	f000 f92a 	bl	8001470 <LCD_SetBackColor>
	LCD_FillCircle(buf, 80, 70, 3, LCD_COLOR_WHITE);
 800121c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2303      	movs	r3, #3
 8001224:	2246      	movs	r2, #70	; 0x46
 8001226:	2150      	movs	r1, #80	; 0x50
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fc96 	bl	8001b5a <LCD_FillCircle>
	LCD_FillCircle(buf, 239, 70, 3, LCD_COLOR_WHITE);
 800122e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2303      	movs	r3, #3
 8001236:	2246      	movs	r2, #70	; 0x46
 8001238:	21ef      	movs	r1, #239	; 0xef
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 fc8d 	bl	8001b5a <LCD_FillCircle>
	LCD_FillCircle(buf, 80, 169, 3, LCD_COLOR_WHITE);
 8001240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2303      	movs	r3, #3
 8001248:	22a9      	movs	r2, #169	; 0xa9
 800124a:	2150      	movs	r1, #80	; 0x50
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fc84 	bl	8001b5a <LCD_FillCircle>
	LCD_FillCircle(buf, 239, 169, 3, LCD_COLOR_WHITE);
 8001252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2303      	movs	r3, #3
 800125a:	22a9      	movs	r2, #169	; 0xa9
 800125c:	21ef      	movs	r1, #239	; 0xef
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fc7b 	bl	8001b5a <LCD_FillCircle>

	LCD_FillRect(buf, 77, 70, 3, 100, LCD_COLOR_WHITE);
 8001264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2364      	movs	r3, #100	; 0x64
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2303      	movs	r3, #3
 8001270:	2246      	movs	r2, #70	; 0x46
 8001272:	214d      	movs	r1, #77	; 0x4d
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fc3f 	bl	8001af8 <LCD_FillRect>
	LCD_FillRect(buf, 240, 70, 3, 100, LCD_COLOR_WHITE);
 800127a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	2364      	movs	r3, #100	; 0x64
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2303      	movs	r3, #3
 8001286:	2246      	movs	r2, #70	; 0x46
 8001288:	21f0      	movs	r1, #240	; 0xf0
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 fc34 	bl	8001af8 <LCD_FillRect>
	LCD_FillRect(buf, 80, 67, 160, 3, LCD_COLOR_WHITE);
 8001290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	2303      	movs	r3, #3
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	23a0      	movs	r3, #160	; 0xa0
 800129c:	2243      	movs	r2, #67	; 0x43
 800129e:	2150      	movs	r1, #80	; 0x50
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 fc29 	bl	8001af8 <LCD_FillRect>
	LCD_FillRect(buf, 80, 170, 160, 3, LCD_COLOR_WHITE);
 80012a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	2303      	movs	r3, #3
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	23a0      	movs	r3, #160	; 0xa0
 80012b2:	22aa      	movs	r2, #170	; 0xaa
 80012b4:	2150      	movs	r1, #80	; 0x50
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fc1e 	bl	8001af8 <LCD_FillRect>

	LCD_FillRect(buf, 80, 70, 160, 100, LCD_COLOR_GRAY);
 80012bc:	f248 4310 	movw	r3, #33808	; 0x8410
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	2364      	movs	r3, #100	; 0x64
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	23a0      	movs	r3, #160	; 0xa0
 80012c8:	2246      	movs	r2, #70	; 0x46
 80012ca:	2150      	movs	r1, #80	; 0x50
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 fc13 	bl	8001af8 <LCD_FillRect>

	if (selected_item % 3 == 0) {
 80012d2:	4b35      	ldr	r3, [pc, #212]	; (80013a8 <draw_background+0x19c>)
 80012d4:	f993 2000 	ldrsb.w	r2, [r3]
 80012d8:	4b34      	ldr	r3, [pc, #208]	; (80013ac <draw_background+0x1a0>)
 80012da:	fb83 3102 	smull	r3, r1, r3, r2
 80012de:	17d3      	asrs	r3, r2, #31
 80012e0:	1ac9      	subs	r1, r1, r3
 80012e2:	460b      	mov	r3, r1
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	440b      	add	r3, r1
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d105      	bne.n	80012fc <draw_background+0xf0>
		LCD_SetTextColor(selected_item_color);
 80012f0:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <draw_background+0x1a4>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f8ab 	bl	8001450 <LCD_SetTextColor>
 80012fa:	e003      	b.n	8001304 <draw_background+0xf8>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 80012fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001300:	f000 f8a6 	bl	8001450 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 80, (uint8_t*) "Resume\0", CENTER_MODE);
 8001304:	2301      	movs	r3, #1
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <draw_background+0x1a8>)
 800130a:	2250      	movs	r2, #80	; 0x50
 800130c:	2100      	movs	r1, #0
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f924 	bl	800155c <LCD_DisplayStringAt>
	if (selected_item % 3 == 1) {
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <draw_background+0x19c>)
 8001316:	f993 2000 	ldrsb.w	r2, [r3]
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <draw_background+0x1a0>)
 800131c:	fb83 3102 	smull	r3, r1, r3, r2
 8001320:	17d3      	asrs	r3, r2, #31
 8001322:	1ac9      	subs	r1, r1, r3
 8001324:	460b      	mov	r3, r1
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	440b      	add	r3, r1
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b25b      	sxtb	r3, r3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d105      	bne.n	800133e <draw_background+0x132>
		LCD_SetTextColor(selected_item_color);
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <draw_background+0x1a4>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f88a 	bl	8001450 <LCD_SetTextColor>
 800133c:	e003      	b.n	8001346 <draw_background+0x13a>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 800133e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001342:	f000 f885 	bl	8001450 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Restart\0", CENTER_MODE);
 8001346:	2301      	movs	r3, #1
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <draw_background+0x1ac>)
 800134c:	226e      	movs	r2, #110	; 0x6e
 800134e:	2100      	movs	r1, #0
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 f903 	bl	800155c <LCD_DisplayStringAt>
	if (selected_item % 3 == 2) {
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <draw_background+0x19c>)
 8001358:	f993 2000 	ldrsb.w	r2, [r3]
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <draw_background+0x1a0>)
 800135e:	fb83 3102 	smull	r3, r1, r3, r2
 8001362:	17d3      	asrs	r3, r2, #31
 8001364:	1ac9      	subs	r1, r1, r3
 8001366:	460b      	mov	r3, r1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	440b      	add	r3, r1
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	b25b      	sxtb	r3, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d105      	bne.n	8001380 <draw_background+0x174>
		LCD_SetTextColor(selected_item_color);
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <draw_background+0x1a4>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f869 	bl	8001450 <LCD_SetTextColor>
 800137e:	e003      	b.n	8001388 <draw_background+0x17c>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 8001380:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001384:	f000 f864 	bl	8001450 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 140, (uint8_t*) "Exit\0", CENTER_MODE);
 8001388:	2301      	movs	r3, #1
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <draw_background+0x1b0>)
 800138e:	228c      	movs	r2, #140	; 0x8c
 8001390:	2100      	movs	r1, #0
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f8e2 	bl	800155c <LCD_DisplayStringAt>
	LCD_SetBackColor(LCD_COLOR_BLACK);
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f869 	bl	8001470 <LCD_SetBackColor>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000021c 	.word	0x2000021c
 80013ac:	55555556 	.word	0x55555556
 80013b0:	2000007c 	.word	0x2000007c
 80013b4:	08015874 	.word	0x08015874
 80013b8:	0801587c 	.word	0x0801587c
 80013bc:	08015888 	.word	0x08015888

080013c0 <menu_select>:

static void menu_select() {
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	if (selected_item % 3 == 1) {
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <menu_select+0x5c>)
 80013c6:	f993 2000 	ldrsb.w	r2, [r3]
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <menu_select+0x60>)
 80013cc:	fb83 3102 	smull	r3, r1, r3, r2
 80013d0:	17d3      	asrs	r3, r2, #31
 80013d2:	1ac9      	subs	r1, r1, r3
 80013d4:	460b      	mov	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	440b      	add	r3, r1
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d105      	bne.n	80013ee <menu_select+0x2e>
		in_game = 0;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <menu_select+0x64>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
		restart_game = 1;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <menu_select+0x68>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
	}
	if (selected_item % 3 == 2) {
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <menu_select+0x5c>)
 80013f0:	f993 2000 	ldrsb.w	r2, [r3]
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <menu_select+0x60>)
 80013f6:	fb83 3102 	smull	r3, r1, r3, r2
 80013fa:	17d3      	asrs	r3, r2, #31
 80013fc:	1ac9      	subs	r1, r1, r3
 80013fe:	460b      	mov	r3, r1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	440b      	add	r3, r1
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	b25b      	sxtb	r3, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d102      	bne.n	8001412 <menu_select+0x52>
		in_game = 0;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <menu_select+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
	}
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	2000021c 	.word	0x2000021c
 8001420:	55555556 	.word	0x55555556
 8001424:	200001fc 	.word	0x200001fc
 8001428:	20000258 	.word	0x20000258

0800142c <LCD_GetXSize>:
/**
 * @brief  Gets the LCD X size.
 * @param  None
 * @retval The used LCD X size
 */
uint16_t LCD_GetXSize(void) {
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	return GW_LCD_WIDTH;
 8001430:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <LCD_GetYSize>:
/**
 * @brief  Gets the LCD Y size.
 * @param  None
 * @retval The used LCD Y size
 */
uint16_t LCD_GetYSize(void) {
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
	return GW_LCD_HEIGHT;
 8001442:	23f0      	movs	r3, #240	; 0xf0
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <LCD_SetTextColor>:
/**
 * @brief  Sets the Text color.
 * @param  Color: the Text color code RGB(5-6-5)
 * @retval None
 */
void LCD_SetTextColor(uint16_t Color) {
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
	font_color = Color;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <LCD_SetTextColor+0x1c>)
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	8013      	strh	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	20000084 	.word	0x20000084

08001470 <LCD_SetBackColor>:
/**
 * @brief  Sets the Background color.
 * @param  Color: the layer Background color code RGB(5-6-5)
 * @retval None
 */
void LCD_SetBackColor(uint16_t Color) {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
	font_bcolor = Color;
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <LCD_SetBackColor+0x1c>)
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	8013      	strh	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	2000021e 	.word	0x2000021e

08001490 <LCD_SetFont>:
/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *pFonts) {
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	font = pFonts;
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <LCD_SetFont+0x1c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000080 	.word	0x20000080

080014b0 <LCD_SetFontScale>:
/**
 * @brief  Sets the Text Scale.
 * @param  scale: the scale of font to be used
 * @retval None
 */
void LCD_SetFontScale(uint8_t scale) {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	font_scale = scale;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <LCD_SetFontScale+0x1c>)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	7013      	strb	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	20000086 	.word	0x20000086

080014d0 <LCD_DrawPixel>:
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in RGB(5-6-5)
 * @retval None
 */
void LCD_DrawPixel(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t pixel) {
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	817b      	strh	r3, [r7, #10]
 80014e2:	460b      	mov	r3, r1
 80014e4:	813b      	strh	r3, [r7, #8]
 80014e6:	4613      	mov	r3, r2
 80014e8:	80fb      	strh	r3, [r7, #6]
	if (PPOS(Xpos, Ypos) > GW_LCD_WIDTH * GW_LCD_HEIGHT) {
 80014ea:	893a      	ldrh	r2, [r7, #8]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	019b      	lsls	r3, r3, #6
 80014f4:	461a      	mov	r2, r3
 80014f6:	897b      	ldrh	r3, [r7, #10]
 80014f8:	4413      	add	r3, r2
 80014fa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80014fe:	dc0d      	bgt.n	800151c <LCD_DrawPixel+0x4c>
		return;
	}
	buf[PPOS(Xpos, Ypos)] = pixel;
 8001500:	893a      	ldrh	r2, [r7, #8]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	019b      	lsls	r3, r3, #6
 800150a:	461a      	mov	r2, r3
 800150c:	897b      	ldrh	r3, [r7, #10]
 800150e:	4413      	add	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4413      	add	r3, r2
 8001516:	88fa      	ldrh	r2, [r7, #6]
 8001518:	801a      	strh	r2, [r3, #0]
 800151a:	e000      	b.n	800151e <LCD_DrawPixel+0x4e>
		return;
 800151c:	bf00      	nop
}
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD.
 * @param  Color: the color of the background
 * @retval None
 */
void LCD_Clear(uint16_t *buf, uint16_t color) {
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b085      	sub	sp, #20
 800152c:	af02      	add	r7, sp, #8
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
	FillBuffer((uint32_t*) buf, LCD_GetXSize(), LCD_GetYSize(), 0, color);
 8001534:	f7ff ff7a 	bl	800142c <LCD_GetXSize>
 8001538:	4603      	mov	r3, r0
 800153a:	461c      	mov	r4, r3
 800153c:	f7ff ff7f 	bl	800143e <LCD_GetYSize>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2300      	movs	r3, #0
 800154a:	4621      	mov	r1, r4
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fc5d 	bl	8001e0c <FillBuffer>
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}
	...

0800155c <LCD_DisplayStringAt>:
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 * @retval None
 */
void LCD_DisplayStringAt(uint16_t *buf, uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b08b      	sub	sp, #44	; 0x2c
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	817b      	strh	r3, [r7, #10]
 800156a:	4613      	mov	r3, r2
 800156c:	813b      	strh	r3, [r7, #8]
	uint16_t refcolumn = 1, i = 0;
 800156e:	2301      	movs	r3, #1
 8001570:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001572:	2300      	movs	r3, #0
 8001574:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t size = 0, xsize = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
	uint32_t mod_size = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
	uint8_t *ptr = pText;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	61fb      	str	r3, [r7, #28]
	uint32_t font_width = font->Width * font_scale;
 8001586:	4b44      	ldr	r3, [pc, #272]	; (8001698 <LCD_DisplayStringAt+0x13c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	889b      	ldrh	r3, [r3, #4]
 800158c:	461a      	mov	r2, r3
 800158e:	4b43      	ldr	r3, [pc, #268]	; (800169c <LCD_DisplayStringAt+0x140>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	613b      	str	r3, [r7, #16]

	/* Get the text size */
	while (*ptr++)
 8001598:	e002      	b.n	80015a0 <LCD_DisplayStringAt+0x44>
		size++;
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	3301      	adds	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
	while (*ptr++)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	61fa      	str	r2, [r7, #28]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f6      	bne.n	800159a <LCD_DisplayStringAt+0x3e>

	/* Characters number per line */
	xsize = (LCD_GetXSize() / font_width);
 80015ac:	f7ff ff3e 	bl	800142c <LCD_GetXSize>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	61bb      	str	r3, [r7, #24]
	mod_size = LCD_GetXSize() % font_width;
 80015bc:	f7ff ff36 	bl	800142c <LCD_GetXSize>
 80015c0:	4603      	mov	r3, r0
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80015c8:	6939      	ldr	r1, [r7, #16]
 80015ca:	fb01 f202 	mul.w	r2, r1, r2
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

	switch (mode) {
 80015d2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d014      	beq.n	8001604 <LCD_DisplayStringAt+0xa8>
 80015da:	2b03      	cmp	r3, #3
 80015dc:	dc26      	bgt.n	800162c <LCD_DisplayStringAt+0xd0>
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d002      	beq.n	80015e8 <LCD_DisplayStringAt+0x8c>
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d011      	beq.n	800160a <LCD_DisplayStringAt+0xae>
 80015e6:	e021      	b.n	800162c <LCD_DisplayStringAt+0xd0>
	case CENTER_MODE: {
		refcolumn = X + ((xsize - size) * font_width + mod_size) / 2;
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	fb03 f202 	mul.w	r2, r3, r2
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	4413      	add	r3, r2
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	897b      	ldrh	r3, [r7, #10]
 80015fe:	4413      	add	r3, r2
 8001600:	84fb      	strh	r3, [r7, #38]	; 0x26
		break;
 8001602:	e016      	b.n	8001632 <LCD_DisplayStringAt+0xd6>
	}
	case LEFT_MODE: {
		refcolumn = X;
 8001604:	897b      	ldrh	r3, [r7, #10]
 8001606:	84fb      	strh	r3, [r7, #38]	; 0x26
		break;
 8001608:	e013      	b.n	8001632 <LCD_DisplayStringAt+0xd6>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * font_width) + mod_size;
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	b29a      	uxth	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	b29b      	uxth	r3, r3
 8001616:	fb12 f303 	smulbb	r3, r2, r3
 800161a:	b29a      	uxth	r2, r3
 800161c:	897b      	ldrh	r3, [r7, #10]
 800161e:	4413      	add	r3, r2
 8001620:	b29a      	uxth	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4413      	add	r3, r2
 8001628:	84fb      	strh	r3, [r7, #38]	; 0x26
		break;
 800162a:	e002      	b.n	8001632 <LCD_DisplayStringAt+0xd6>
	}
	default: {
		refcolumn = X;
 800162c:	897b      	ldrh	r3, [r7, #10]
 800162e:	84fb      	strh	r3, [r7, #38]	; 0x26
		break;
 8001630:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
 8001632:	e011      	b.n	8001658 <LCD_DisplayStringAt+0xfc>
			& (((LCD_GetXSize() - (i * font_width)) & 0xFFFF) >= font_width)) {
		/* Display one character on LCD */
		LCD_DisplayChar(buf, refcolumn, Y, *pText);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	893a      	ldrh	r2, [r7, #8]
 800163a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 f82f 	bl	80016a0 <LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += font_width;
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	b29a      	uxth	r2, r3
 8001646:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001648:	4413      	add	r3, r2
 800164a:	84fb      	strh	r3, [r7, #38]	; 0x26
		/* Point on the next character */
		pText++;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3301      	adds	r3, #1
 8001650:	607b      	str	r3, [r7, #4]
		i++;
 8001652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001654:	3301      	adds	r3, #1
 8001656:	84bb      	strh	r3, [r7, #36]	; 0x24
	while ((*pText != 0)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
			& (((LCD_GetXSize() - (i * font_width)) & 0xFFFF) >= font_width)) {
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2dc      	uxtb	r4, r3
 8001666:	f7ff fee1 	bl	800142c <LCD_GetXSize>
 800166a:	4603      	mov	r3, r0
 800166c:	4619      	mov	r1, r3
 800166e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	1acb      	subs	r3, r1, r3
 8001678:	b29b      	uxth	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	429a      	cmp	r2, r3
 800167e:	bf94      	ite	ls
 8001680:	2301      	movls	r3, #1
 8001682:	2300      	movhi	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4023      	ands	r3, r4
 8001688:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1d2      	bne.n	8001634 <LCD_DisplayStringAt+0xd8>
	}
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	372c      	adds	r7, #44	; 0x2c
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	20000080 	.word	0x20000080
 800169c:	20000086 	.word	0x20000086

080016a0 <LCD_DisplayChar>:
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 * @retval None
 */
void LCD_DisplayChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	4608      	mov	r0, r1
 80016aa:	4611      	mov	r1, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	4603      	mov	r3, r0
 80016b0:	817b      	strh	r3, [r7, #10]
 80016b2:	460b      	mov	r3, r1
 80016b4:	813b      	strh	r3, [r7, #8]
 80016b6:	4613      	mov	r3, r2
 80016b8:	71fb      	strb	r3, [r7, #7]
	DrawChar(buf, Xpos, Ypos,
			&font->table[(Ascii - ' ') * font->Height * ((font->Width + 7) / 8)],
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <LCD_DisplayChar+0x60>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	3b20      	subs	r3, #32
 80016c4:	490e      	ldr	r1, [pc, #56]	; (8001700 <LCD_DisplayChar+0x60>)
 80016c6:	6809      	ldr	r1, [r1, #0]
 80016c8:	88c9      	ldrh	r1, [r1, #6]
 80016ca:	fb03 f101 	mul.w	r1, r3, r1
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <LCD_DisplayChar+0x60>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	889b      	ldrh	r3, [r3, #4]
 80016d4:	3307      	adds	r3, #7
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	da00      	bge.n	80016dc <LCD_DisplayChar+0x3c>
 80016da:	3307      	adds	r3, #7
 80016dc:	10db      	asrs	r3, r3, #3
 80016de:	fb01 f303 	mul.w	r3, r1, r3
	DrawChar(buf, Xpos, Ypos,
 80016e2:	18d0      	adds	r0, r2, r3
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <LCD_DisplayChar+0x64>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	893a      	ldrh	r2, [r7, #8]
 80016ea:	8979      	ldrh	r1, [r7, #10]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	4603      	mov	r3, r0
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 fac9 	bl	8001c88 <DrawChar>
			font_scale);
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000080 	.word	0x20000080
 8001704:	20000086 	.word	0x20000086

08001708 <LCD_DrawHLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawHLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4603      	mov	r3, r0
 8001718:	817b      	strh	r3, [r7, #10]
 800171a:	460b      	mov	r3, r1
 800171c:	813b      	strh	r3, [r7, #8]
 800171e:	4613      	mov	r3, r2
 8001720:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
 8001726:	f7ff fe81 	bl	800142c <LCD_GetXSize>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	893b      	ldrh	r3, [r7, #8]
 8001730:	fb03 f202 	mul.w	r2, r3, r2
 8001734:	897b      	ldrh	r3, [r7, #10]
 8001736:	4413      	add	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4413      	add	r3, r2
 800173e:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, Length, 1, 0, color);
 8001740:	88f9      	ldrh	r1, [r7, #6]
 8001742:	8c3b      	ldrh	r3, [r7, #32]
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2300      	movs	r3, #0
 8001748:	2201      	movs	r2, #1
 800174a:	6978      	ldr	r0, [r7, #20]
 800174c:	f000 fb5e 	bl	8001e0c <FillBuffer>
}
 8001750:	bf00      	nop
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <LCD_DrawVLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawVLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	4608      	mov	r0, r1
 8001762:	4611      	mov	r1, r2
 8001764:	461a      	mov	r2, r3
 8001766:	4603      	mov	r3, r0
 8001768:	817b      	strh	r3, [r7, #10]
 800176a:	460b      	mov	r3, r1
 800176c:	813b      	strh	r3, [r7, #8]
 800176e:	4613      	mov	r3, r2
 8001770:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
 8001776:	f7ff fe59 	bl	800142c <LCD_GetXSize>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	893b      	ldrh	r3, [r7, #8]
 8001780:	fb03 f202 	mul.w	r2, r3, r2
 8001784:	897b      	ldrh	r3, [r7, #10]
 8001786:	4413      	add	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4413      	add	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, 1, Length, (LCD_GetXSize() - 1), color);
 8001790:	88fc      	ldrh	r4, [r7, #6]
 8001792:	f7ff fe4b 	bl	800142c <LCD_GetXSize>
 8001796:	4603      	mov	r3, r0
 8001798:	3b01      	subs	r3, #1
 800179a:	461a      	mov	r2, r3
 800179c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4613      	mov	r3, r2
 80017a2:	4622      	mov	r2, r4
 80017a4:	2101      	movs	r1, #1
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f000 fb30 	bl	8001e0c <FillBuffer>
}
 80017ac:	bf00      	nop
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}

080017b4 <LCD_DrawLine>:
 * @param  X2: the point 2 X position
 * @param  Y2: the point 2 Y position
 * @retval None
 */
void LCD_DrawLine(uint16_t *buf, uint16_t X1, uint16_t Y1, uint16_t X2,
		uint16_t Y2, uint16_t color) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	; 0x30
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	4608      	mov	r0, r1
 80017be:	4611      	mov	r1, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	817b      	strh	r3, [r7, #10]
 80017c6:	460b      	mov	r3, r1
 80017c8:	813b      	strh	r3, [r7, #8]
 80017ca:	4613      	mov	r3, r2
 80017cc:	80fb      	strh	r3, [r7, #6]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, yinc1 =
 80017ce:	2300      	movs	r3, #0
 80017d0:	833b      	strh	r3, [r7, #24]
 80017d2:	2300      	movs	r3, #0
 80017d4:	82fb      	strh	r3, [r7, #22]
 80017d6:	2300      	movs	r3, #0
 80017d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80017da:	2300      	movs	r3, #0
 80017dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80017de:	2300      	movs	r3, #0
 80017e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80017e2:	2300      	movs	r3, #0
 80017e4:	853b      	strh	r3, [r7, #40]	; 0x28
 80017e6:	2300      	movs	r3, #0
 80017e8:	84fb      	strh	r3, [r7, #38]	; 0x26
			0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 80017ea:	2300      	movs	r3, #0
 80017ec:	84bb      	strh	r3, [r7, #36]	; 0x24
 80017ee:	2300      	movs	r3, #0
 80017f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80017f2:	2300      	movs	r3, #0
 80017f4:	843b      	strh	r3, [r7, #32]
 80017f6:	2300      	movs	r3, #0
 80017f8:	83fb      	strh	r3, [r7, #30]
 80017fa:	2300      	movs	r3, #0
 80017fc:	83bb      	strh	r3, [r7, #28]
			curpixel = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	837b      	strh	r3, [r7, #26]

	deltax = ABS(X2 - X1); /* The difference between the x's */
 8001802:	88fa      	ldrh	r2, [r7, #6]
 8001804:	897b      	ldrh	r3, [r7, #10]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	bfb8      	it	lt
 800180c:	425b      	neglt	r3, r3
 800180e:	833b      	strh	r3, [r7, #24]
	deltay = ABS(Y2 - Y1); /* The difference between the y's */
 8001810:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001812:	893b      	ldrh	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	bfb8      	it	lt
 800181a:	425b      	neglt	r3, r3
 800181c:	82fb      	strh	r3, [r7, #22]
	x = X1; /* Start x off at the first pixel */
 800181e:	897b      	ldrh	r3, [r7, #10]
 8001820:	85fb      	strh	r3, [r7, #46]	; 0x2e
	y = Y1; /* Start y off at the first pixel */
 8001822:	893b      	ldrh	r3, [r7, #8]
 8001824:	85bb      	strh	r3, [r7, #44]	; 0x2c

	if (X2 >= X1) /* The x-values are increasing */
 8001826:	88fa      	ldrh	r2, [r7, #6]
 8001828:	897b      	ldrh	r3, [r7, #10]
 800182a:	429a      	cmp	r2, r3
 800182c:	d304      	bcc.n	8001838 <LCD_DrawLine+0x84>
	{
		xinc1 = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	857b      	strh	r3, [r7, #42]	; 0x2a
		xinc2 = 1;
 8001832:	2301      	movs	r3, #1
 8001834:	853b      	strh	r3, [r7, #40]	; 0x28
 8001836:	e005      	b.n	8001844 <LCD_DrawLine+0x90>
	} else /* The x-values are decreasing */
	{
		xinc1 = -1;
 8001838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800183c:	857b      	strh	r3, [r7, #42]	; 0x2a
		xinc2 = -1;
 800183e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001842:	853b      	strh	r3, [r7, #40]	; 0x28
	}

	if (Y2 >= Y1) /* The y-values are increasing */
 8001844:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001846:	893b      	ldrh	r3, [r7, #8]
 8001848:	429a      	cmp	r2, r3
 800184a:	d304      	bcc.n	8001856 <LCD_DrawLine+0xa2>
	{
		yinc1 = 1;
 800184c:	2301      	movs	r3, #1
 800184e:	84fb      	strh	r3, [r7, #38]	; 0x26
		yinc2 = 1;
 8001850:	2301      	movs	r3, #1
 8001852:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001854:	e005      	b.n	8001862 <LCD_DrawLine+0xae>
	} else /* The y-values are decreasing */
	{
		yinc1 = -1;
 8001856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800185a:	84fb      	strh	r3, [r7, #38]	; 0x26
		yinc2 = -1;
 800185c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001860:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if (deltax >= deltay) /* There is at least one x-value for every y-value */
 8001862:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001866:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800186a:	429a      	cmp	r2, r3
 800186c:	db11      	blt.n	8001892 <LCD_DrawLine+0xde>
	{
		xinc1 = 0; /* Don't change the x when numerator >= denominator */
 800186e:	2300      	movs	r3, #0
 8001870:	857b      	strh	r3, [r7, #42]	; 0x2a
		yinc2 = 0; /* Don't change the y for every iteration */
 8001872:	2300      	movs	r3, #0
 8001874:	84bb      	strh	r3, [r7, #36]	; 0x24
		den = deltax;
 8001876:	8b3b      	ldrh	r3, [r7, #24]
 8001878:	847b      	strh	r3, [r7, #34]	; 0x22
		num = deltax / 2;
 800187a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	da00      	bge.n	8001884 <LCD_DrawLine+0xd0>
 8001882:	3301      	adds	r3, #1
 8001884:	105b      	asrs	r3, r3, #1
 8001886:	843b      	strh	r3, [r7, #32]
		numadd = deltay;
 8001888:	8afb      	ldrh	r3, [r7, #22]
 800188a:	83fb      	strh	r3, [r7, #30]
		numpixels = deltax; /* There are more x-values than y-values */
 800188c:	8b3b      	ldrh	r3, [r7, #24]
 800188e:	83bb      	strh	r3, [r7, #28]
 8001890:	e010      	b.n	80018b4 <LCD_DrawLine+0x100>
	} else /* There is at least one y-value for every x-value */
	{
		xinc2 = 0; /* Don't change the x for every iteration */
 8001892:	2300      	movs	r3, #0
 8001894:	853b      	strh	r3, [r7, #40]	; 0x28
		yinc1 = 0; /* Don't change the y when numerator >= denominator */
 8001896:	2300      	movs	r3, #0
 8001898:	84fb      	strh	r3, [r7, #38]	; 0x26
		den = deltay;
 800189a:	8afb      	ldrh	r3, [r7, #22]
 800189c:	847b      	strh	r3, [r7, #34]	; 0x22
		num = deltay / 2;
 800189e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da00      	bge.n	80018a8 <LCD_DrawLine+0xf4>
 80018a6:	3301      	adds	r3, #1
 80018a8:	105b      	asrs	r3, r3, #1
 80018aa:	843b      	strh	r3, [r7, #32]
		numadd = deltax;
 80018ac:	8b3b      	ldrh	r3, [r7, #24]
 80018ae:	83fb      	strh	r3, [r7, #30]
		numpixels = deltay; /* There are more y-values than x-values */
 80018b0:	8afb      	ldrh	r3, [r7, #22]
 80018b2:	83bb      	strh	r3, [r7, #28]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 80018b4:	2300      	movs	r3, #0
 80018b6:	837b      	strh	r3, [r7, #26]
 80018b8:	e02f      	b.n	800191a <LCD_DrawLine+0x166>
		LCD_DrawPixel(buf, x, y, color); /* Draw the current pixel */
 80018ba:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80018bc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80018be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f7ff fe05 	bl	80014d0 <LCD_DrawPixel>
		num += numadd; /* Increase the numerator by the top of the fraction */
 80018c6:	8c3a      	ldrh	r2, [r7, #32]
 80018c8:	8bfb      	ldrh	r3, [r7, #30]
 80018ca:	4413      	add	r3, r2
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	843b      	strh	r3, [r7, #32]
		if (num >= den) /* Check if numerator >= denominator */
 80018d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80018d4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80018d8:	429a      	cmp	r2, r3
 80018da:	db0e      	blt.n	80018fa <LCD_DrawLine+0x146>
		{
			num -= den; /* Calculate the new numerator value */
 80018dc:	8c3a      	ldrh	r2, [r7, #32]
 80018de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	843b      	strh	r3, [r7, #32]
			x += xinc1; /* Change the x as appropriate */
 80018e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80018e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018ea:	4413      	add	r3, r2
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
			y += yinc1; /* Change the y as appropriate */
 80018f0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80018f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018f4:	4413      	add	r3, r2
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}
		x += xinc2; /* Change the x as appropriate */
 80018fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80018fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018fe:	4413      	add	r3, r2
 8001900:	b29b      	uxth	r3, r3
 8001902:	85fb      	strh	r3, [r7, #46]	; 0x2e
		y += yinc2; /* Change the y as appropriate */
 8001904:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001908:	4413      	add	r3, r2
 800190a:	b29b      	uxth	r3, r3
 800190c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800190e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001912:	b29b      	uxth	r3, r3
 8001914:	3301      	adds	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	837b      	strh	r3, [r7, #26]
 800191a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800191e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001922:	429a      	cmp	r2, r3
 8001924:	ddc9      	ble.n	80018ba <LCD_DrawLine+0x106>
	}
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	3730      	adds	r7, #48	; 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <LCD_DrawRect>:
 * @param  Height: display rectangle height
 * @param  Width: display rectangle width
 * @retval None
 */
void LCD_DrawRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af02      	add	r7, sp, #8
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	4608      	mov	r0, r1
 800193a:	4611      	mov	r1, r2
 800193c:	461a      	mov	r2, r3
 800193e:	4603      	mov	r3, r0
 8001940:	817b      	strh	r3, [r7, #10]
 8001942:	460b      	mov	r3, r1
 8001944:	813b      	strh	r3, [r7, #8]
 8001946:	4613      	mov	r3, r2
 8001948:	80fb      	strh	r3, [r7, #6]
	/* Draw horizontal lines */
	LCD_DrawHLine(buf, Xpos, Ypos, Width, color);
 800194a:	88f8      	ldrh	r0, [r7, #6]
 800194c:	893a      	ldrh	r2, [r7, #8]
 800194e:	8979      	ldrh	r1, [r7, #10]
 8001950:	8bbb      	ldrh	r3, [r7, #28]
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	4603      	mov	r3, r0
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f7ff fed6 	bl	8001708 <LCD_DrawHLine>
	LCD_DrawHLine(buf, Xpos, (Ypos + Height), Width, color);
 800195c:	893a      	ldrh	r2, [r7, #8]
 800195e:	8b3b      	ldrh	r3, [r7, #24]
 8001960:	4413      	add	r3, r2
 8001962:	b29a      	uxth	r2, r3
 8001964:	88f8      	ldrh	r0, [r7, #6]
 8001966:	8979      	ldrh	r1, [r7, #10]
 8001968:	8bbb      	ldrh	r3, [r7, #28]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	4603      	mov	r3, r0
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7ff feca 	bl	8001708 <LCD_DrawHLine>

	/* Draw vertical lines */
	LCD_DrawVLine(buf, Xpos, Ypos, Height, color);
 8001974:	8b38      	ldrh	r0, [r7, #24]
 8001976:	893a      	ldrh	r2, [r7, #8]
 8001978:	8979      	ldrh	r1, [r7, #10]
 800197a:	8bbb      	ldrh	r3, [r7, #28]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	4603      	mov	r3, r0
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f7ff fee9 	bl	8001758 <LCD_DrawVLine>
	LCD_DrawVLine(buf, (Xpos + Width), Ypos, Height, color);
 8001986:	897a      	ldrh	r2, [r7, #10]
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	4413      	add	r3, r2
 800198c:	b299      	uxth	r1, r3
 800198e:	8b38      	ldrh	r0, [r7, #24]
 8001990:	893a      	ldrh	r2, [r7, #8]
 8001992:	8bbb      	ldrh	r3, [r7, #28]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	4603      	mov	r3, r0
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff fedd 	bl	8001758 <LCD_DrawVLine>
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <LCD_DrawCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_DrawCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b088      	sub	sp, #32
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	4608      	mov	r0, r1
 80019b0:	4611      	mov	r1, r2
 80019b2:	461a      	mov	r2, r3
 80019b4:	4603      	mov	r3, r0
 80019b6:	817b      	strh	r3, [r7, #10]
 80019b8:	460b      	mov	r3, r1
 80019ba:	813b      	strh	r3, [r7, #8]
 80019bc:	4613      	mov	r3, r2
 80019be:	80fb      	strh	r3, [r7, #6]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	f1c3 0303 	rsb	r3, r3, #3
 80019c8:	61fb      	str	r3, [r7, #28]
	curx = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
	cury = Radius;
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
 80019d2:	e087      	b.n	8001ae4 <LCD_DrawCircle+0x13e>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos - cury), color);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	897b      	ldrh	r3, [r7, #10]
 80019da:	4413      	add	r3, r2
 80019dc:	b299      	uxth	r1, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	893a      	ldrh	r2, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff fd70 	bl	80014d0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos - cury), color);
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	897a      	ldrh	r2, [r7, #10]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	b299      	uxth	r1, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	893a      	ldrh	r2, [r7, #8]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff fd62 	bl	80014d0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos - curx), color);
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	897b      	ldrh	r3, [r7, #10]
 8001a12:	4413      	add	r3, r2
 8001a14:	b299      	uxth	r1, r3
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	893a      	ldrh	r2, [r7, #8]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7ff fd54 	bl	80014d0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos - curx), color);
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	897a      	ldrh	r2, [r7, #10]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	b299      	uxth	r1, r3
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	893a      	ldrh	r2, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f7ff fd46 	bl	80014d0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos + cury), color);
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	897b      	ldrh	r3, [r7, #10]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b299      	uxth	r1, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	893b      	ldrh	r3, [r7, #8]
 8001a54:	4413      	add	r3, r2
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff fd38 	bl	80014d0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos + cury), color);
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	897a      	ldrh	r2, [r7, #10]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	893b      	ldrh	r3, [r7, #8]
 8001a70:	4413      	add	r3, r2
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f7ff fd2a 	bl	80014d0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos + curx), color);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	897b      	ldrh	r3, [r7, #10]
 8001a82:	4413      	add	r3, r2
 8001a84:	b299      	uxth	r1, r3
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	893b      	ldrh	r3, [r7, #8]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f7ff fd1c 	bl	80014d0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos + curx), color);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	897a      	ldrh	r2, [r7, #10]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	b299      	uxth	r1, r3
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	893b      	ldrh	r3, [r7, #8]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f7ff fd0e 	bl	80014d0 <LCD_DrawPixel>

		if (d < 0) {
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da06      	bge.n	8001ac8 <LCD_DrawCircle+0x122>
			d += (curx << 2) + 6;
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	009a      	lsls	r2, r3, #2
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3306      	adds	r3, #6
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	e00a      	b.n	8001ade <LCD_DrawCircle+0x138>
		} else {
			d += ((curx - cury) << 2) + 10;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	009a      	lsls	r2, r3, #2
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	330a      	adds	r3, #10
 8001ad6:	61fb      	str	r3, [r7, #28]
			cury--;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
		}
		curx++;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	f67f af73 	bls.w	80019d4 <LCD_DrawCircle+0x2e>
	}
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <LCD_FillRect>:
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 * @retval None
 */
void LCD_FillRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	817b      	strh	r3, [r7, #10]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	813b      	strh	r3, [r7, #8]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]

	/* Get the rectangle start address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
 8001b16:	f7ff fc89 	bl	800142c <LCD_GetXSize>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	893b      	ldrh	r3, [r7, #8]
 8001b20:	fb03 f202 	mul.w	r2, r3, r2
 8001b24:	897b      	ldrh	r3, [r7, #10]
 8001b26:	4413      	add	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]

	/* Fill the rectangle */
	FillBuffer((uint32_t*) xaddress, Width, Height, (LCD_GetXSize() - Width),
 8001b30:	88fc      	ldrh	r4, [r7, #6]
 8001b32:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 8001b34:	f7ff fc7a 	bl	800142c <LCD_GetXSize>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	4613      	mov	r3, r2
 8001b48:	462a      	mov	r2, r5
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	6978      	ldr	r0, [r7, #20]
 8001b4e:	f000 f95d 	bl	8001e0c <FillBuffer>
			color);
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bdb0      	pop	{r4, r5, r7, pc}

08001b5a <LCD_FillCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_FillCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b08a      	sub	sp, #40	; 0x28
 8001b5e:	af02      	add	r7, sp, #8
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	4608      	mov	r0, r1
 8001b64:	4611      	mov	r1, r2
 8001b66:	461a      	mov	r2, r3
 8001b68:	4603      	mov	r3, r0
 8001b6a:	817b      	strh	r3, [r7, #10]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	813b      	strh	r3, [r7, #8]
 8001b70:	4613      	mov	r3, r2
 8001b72:	80fb      	strh	r3, [r7, #6]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	f1c3 0303 	rsb	r3, r3, #3
 8001b7c:	61fb      	str	r3, [r7, #28]

	curx = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
	cury = Radius;
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
 8001b86:	e06d      	b.n	8001c64 <LCD_FillCircle+0x10a>
		if (cury > 0) {
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d027      	beq.n	8001bde <LCD_FillCircle+0x84>
			LCD_DrawHLine(buf, Xpos - cury, Ypos + curx, 2 * cury, color);
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	897a      	ldrh	r2, [r7, #10]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	b299      	uxth	r1, r3
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	893b      	ldrh	r3, [r7, #8]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	b298      	uxth	r0, r3
 8001baa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	4603      	mov	r3, r0
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f7ff fda9 	bl	8001708 <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - cury, Ypos - curx, 2 * cury, color);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	897a      	ldrh	r2, [r7, #10]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	b299      	uxth	r1, r3
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	893a      	ldrh	r2, [r7, #8]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	b298      	uxth	r0, r3
 8001bd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f7ff fd95 	bl	8001708 <LCD_DrawHLine>
		}

		if (curx > 0) {
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d027      	beq.n	8001c34 <LCD_FillCircle+0xda>
			LCD_DrawHLine(buf, Xpos - curx, Ypos - cury, 2 * curx, color);
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	897a      	ldrh	r2, [r7, #10]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b299      	uxth	r1, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	893a      	ldrh	r2, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	b298      	uxth	r0, r3
 8001c00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4603      	mov	r3, r0
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff fd7e 	bl	8001708 <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - curx, Ypos + cury, 2 * curx, color);
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	897a      	ldrh	r2, [r7, #10]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	b299      	uxth	r1, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	893b      	ldrh	r3, [r7, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	b298      	uxth	r0, r3
 8001c28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f7ff fd6a 	bl	8001708 <LCD_DrawHLine>
		}
		if (d < 0) {
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	da06      	bge.n	8001c48 <LCD_FillCircle+0xee>
			d += (curx << 2) + 6;
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	009a      	lsls	r2, r3, #2
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	4413      	add	r3, r2
 8001c42:	3306      	adds	r3, #6
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e00a      	b.n	8001c5e <LCD_FillCircle+0x104>
		} else {
			d += ((curx - cury) << 2) + 10;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	009a      	lsls	r2, r3, #2
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	4413      	add	r3, r2
 8001c54:	330a      	adds	r3, #10
 8001c56:	61fb      	str	r3, [r7, #28]
			cury--;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
		}
		curx++;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d98d      	bls.n	8001b88 <LCD_FillCircle+0x2e>
	}
	LCD_DrawCircle(buf, Xpos, Ypos, Radius, color);
 8001c6c:	88f8      	ldrh	r0, [r7, #6]
 8001c6e:	893a      	ldrh	r2, [r7, #8]
 8001c70:	8979      	ldrh	r1, [r7, #10]
 8001c72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	4603      	mov	r3, r0
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f7ff fe94 	bl	80019a6 <LCD_DrawCircle>
}
 8001c7e:	bf00      	nop
 8001c80:	3720      	adds	r7, #32
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <DrawChar>:
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		const uint8_t *c, uint8_t scale) {
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b08d      	sub	sp, #52	; 0x34
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	817b      	strh	r3, [r7, #10]
 8001c96:	4613      	mov	r3, r2
 8001c98:	813b      	strh	r3, [r7, #8]
	uint32_t i = 0, j = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]

	height = font->Height;
 8001ca6:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <DrawChar+0x178>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	88db      	ldrh	r3, [r3, #6]
 8001cac:	837b      	strh	r3, [r7, #26]
	width = font->Width;
 8001cae:	4b54      	ldr	r3, [pc, #336]	; (8001e00 <DrawChar+0x178>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	889b      	ldrh	r3, [r3, #4]
 8001cb4:	833b      	strh	r3, [r7, #24]

	offset = 8 * ((width + 7) / 8) - width;
 8001cb6:	8b3b      	ldrh	r3, [r7, #24]
 8001cb8:	3307      	adds	r3, #7
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da00      	bge.n	8001cc0 <DrawChar+0x38>
 8001cbe:	3307      	adds	r3, #7
 8001cc0:	10db      	asrs	r3, r3, #3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	8b3b      	ldrh	r3, [r7, #24]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	75fb      	strb	r3, [r7, #23]

	for (i = 0; i < height; i++) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd4:	e08a      	b.n	8001dec <DrawChar+0x164>
		pchar = ((uint8_t*) c + (width + 7) / 8 * i);
 8001cd6:	8b3b      	ldrh	r3, [r7, #24]
 8001cd8:	3307      	adds	r3, #7
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da00      	bge.n	8001ce0 <DrawChar+0x58>
 8001cde:	3307      	adds	r3, #7
 8001ce0:	10db      	asrs	r3, r3, #3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]

		switch (((width + 7) / 8)) {
 8001cf0:	8b3b      	ldrh	r3, [r7, #24]
 8001cf2:	3307      	adds	r3, #7
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	da00      	bge.n	8001cfa <DrawChar+0x72>
 8001cf8:	3307      	adds	r3, #7
 8001cfa:	10db      	asrs	r3, r3, #3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d002      	beq.n	8001d06 <DrawChar+0x7e>
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d004      	beq.n	8001d0e <DrawChar+0x86>
 8001d04:	e00c      	b.n	8001d20 <DrawChar+0x98>
		case 1:
			line = pchar[0];
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	61fb      	str	r3, [r7, #28]
			break;
 8001d0c:	e016      	b.n	8001d3c <DrawChar+0xb4>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	3201      	adds	r2, #1
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61fb      	str	r3, [r7, #28]
			break;
 8001d1e:	e00d      	b.n	8001d3c <DrawChar+0xb4>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	3202      	adds	r2, #2
 8001d34:	7812      	ldrb	r2, [r2, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61fb      	str	r3, [r7, #28]
			break;
 8001d3a:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	623b      	str	r3, [r7, #32]
 8001d40:	e047      	b.n	8001dd2 <DrawChar+0x14a>
			if (line & (1 << (width - j + offset - 1))) {
 8001d42:	8b3a      	ldrh	r2, [r7, #24]
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	1ad2      	subs	r2, r2, r3
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	2201      	movs	r2, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01b      	beq.n	8001d96 <DrawChar+0x10e>
				//LCD_DrawPixel(buf, (Xpos + j), Ypos, font_color);
				LCD_FillRect(buf, (Xpos + j * scale), Ypos, scale, scale,
 8001d5e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	fb12 f303 	smulbb	r3, r2, r3
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	897b      	ldrh	r3, [r7, #10]
 8001d70:	4413      	add	r3, r2
 8001d72:	b299      	uxth	r1, r3
 8001d74:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001d78:	b29c      	uxth	r4, r3
 8001d7a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4a20      	ldr	r2, [pc, #128]	; (8001e04 <DrawChar+0x17c>)
 8001d82:	8812      	ldrh	r2, [r2, #0]
 8001d84:	8938      	ldrh	r0, [r7, #8]
 8001d86:	9201      	str	r2, [sp, #4]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff feb2 	bl	8001af8 <LCD_FillRect>
 8001d94:	e01a      	b.n	8001dcc <DrawChar+0x144>
						font_color);
			} else {
				//LCD_DrawPixel(buf, (Xpos + j), Ypos, font_bcolor);
				LCD_FillRect(buf, (Xpos + j * scale), Ypos, scale, scale,
 8001d96:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	fb12 f303 	smulbb	r3, r2, r3
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	897b      	ldrh	r3, [r7, #10]
 8001da8:	4413      	add	r3, r2
 8001daa:	b299      	uxth	r1, r3
 8001dac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001db0:	b29c      	uxth	r4, r3
 8001db2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <DrawChar+0x180>)
 8001dba:	8812      	ldrh	r2, [r2, #0]
 8001dbc:	8938      	ldrh	r0, [r7, #8]
 8001dbe:	9201      	str	r2, [sp, #4]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	4623      	mov	r3, r4
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7ff fe96 	bl	8001af8 <LCD_FillRect>
		for (j = 0; j < width; j++) {
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	623b      	str	r3, [r7, #32]
 8001dd2:	8b3b      	ldrh	r3, [r7, #24]
 8001dd4:	6a3a      	ldr	r2, [r7, #32]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d3b3      	bcc.n	8001d42 <DrawChar+0xba>
						font_bcolor);
			}
		}
		Ypos = Ypos + scale;
 8001dda:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	893b      	ldrh	r3, [r7, #8]
 8001de2:	4413      	add	r3, r2
 8001de4:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	3301      	adds	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
 8001dec:	8b7b      	ldrh	r3, [r7, #26]
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f4ff af70 	bcc.w	8001cd6 <DrawChar+0x4e>
	}
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	372c      	adds	r7, #44	; 0x2c
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd90      	pop	{r4, r7, pc}
 8001e00:	20000080 	.word	0x20000080
 8001e04:	20000084 	.word	0x20000084
 8001e08:	2000021e 	.word	0x2000021e

08001e0c <FillBuffer>:
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 * @retval None
 */
static void FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize,
		uint32_t OffLine, uint16_t ColorIndex) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]

	DMA2D->CR = DMA2D_R2M;
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <FillBuffer+0x68>)
 8001e1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e20:	601a      	str	r2, [r3, #0]
	DMA2D->OCOLR = 0x0000FFFF & ColorIndex;
 8001e22:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <FillBuffer+0x68>)
 8001e24:	8b3b      	ldrh	r3, [r7, #24]
 8001e26:	6393      	str	r3, [r2, #56]	; 0x38
	DMA2D->OMAR = (uint32_t) pDst;
 8001e28:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <FillBuffer+0x68>)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	63d3      	str	r3, [r2, #60]	; 0x3c
	DMA2D->OOR = OffLine;
 8001e2e:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <FillBuffer+0x68>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6413      	str	r3, [r2, #64]	; 0x40
	DMA2D->OPFCCR = LTDC_PIXEL_FORMAT_RGB565;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <FillBuffer+0x68>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
	DMA2D->NLR = (uint32_t) (xSize << 16) | (uint16_t) ySize;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	b292      	uxth	r2, r2
 8001e42:	4611      	mov	r1, r2
 8001e44:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <FillBuffer+0x68>)
 8001e46:	430b      	orrs	r3, r1
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44

	DMA2D->CR |= DMA2D_CR_START;
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <FillBuffer+0x68>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <FillBuffer+0x68>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6013      	str	r3, [r2, #0]

	while (DMA2D->CR & DMA2D_CR_START) {
 8001e56:	bf00      	nop
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <FillBuffer+0x68>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f9      	bne.n	8001e58 <FillBuffer+0x4c>

	}
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	52001000 	.word	0x52001000

08001e78 <init_sprite>:
static void _draw_sprite_xy_t(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data);

void init_sprite(Sprite *sprite, uint16_t x, uint16_t y, uint8_t width,
		uint8_t height, uint8_t settings, uint16_t *pallete, uint8_t *data) {
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	4608      	mov	r0, r1
 8001e82:	4611      	mov	r1, r2
 8001e84:	461a      	mov	r2, r3
 8001e86:	4603      	mov	r3, r0
 8001e88:	817b      	strh	r3, [r7, #10]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	813b      	strh	r3, [r7, #8]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	71fb      	strb	r3, [r7, #7]
	sprite->x = x;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	897a      	ldrh	r2, [r7, #10]
 8001e96:	801a      	strh	r2, [r3, #0]
	sprite->y = y;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	893a      	ldrh	r2, [r7, #8]
 8001e9c:	805a      	strh	r2, [r3, #2]
	sprite->width = width;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	79fa      	ldrb	r2, [r7, #7]
 8001ea2:	711a      	strb	r2, [r3, #4]
	sprite->height = height;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	7e3a      	ldrb	r2, [r7, #24]
 8001ea8:	715a      	strb	r2, [r3, #5]
	sprite->settings = settings;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	7f3a      	ldrb	r2, [r7, #28]
 8001eae:	719a      	strb	r2, [r3, #6]
	sprite->pallete = pallete;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a3a      	ldr	r2, [r7, #32]
 8001eb4:	609a      	str	r2, [r3, #8]
	sprite->data = data;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eba:	60da      	str	r2, [r3, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <set_sprite_flip_x>:
			(show == 0) ?
					(*sprite).settings & ~SPRITE_SHOW :
					(*sprite).settings | SPRITE_SHOW;
}

void set_sprite_flip_x(Sprite *sprite, int flip_x) {
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
	sprite->settings =
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d105      	bne.n	8001ee4 <set_sprite_flip_x+0x1c>
			(flip_x == 0) ?
					(*sprite).settings & ~SPRITE_FLIP_X :
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	799b      	ldrb	r3, [r3, #6]
	sprite->settings =
 8001edc:	f023 0320 	bic.w	r3, r3, #32
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e004      	b.n	8001eee <set_sprite_flip_x+0x26>
					(*sprite).settings | SPRITE_FLIP_X;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	799b      	ldrb	r3, [r3, #6]
	sprite->settings =
 8001ee8:	f043 0320 	orr.w	r3, r3, #32
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	7193      	strb	r3, [r2, #6]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <render_sprite>:

void set_sprite_data(Sprite *sprite, uint8_t *data) {
	sprite->data = data;
}

void render_sprite(uint16_t *buf, Sprite sprite) {
 8001efe:	b084      	sub	sp, #16
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af04      	add	r7, sp, #16
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001f0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (!(sprite.settings & SPRITE_SHOW) || !(sprite.settings & SPRITE_SCALE)) {
 8001f10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80e7 	beq.w	80020ec <render_sprite+0x1ee>
 8001f1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80e0 	beq.w	80020ec <render_sprite+0x1ee>
		return;
	}
	uint16_t x = sprite.x;
 8001f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f2e:	82fb      	strh	r3, [r7, #22]
	uint16_t y = sprite.y;
 8001f30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f32:	82bb      	strh	r3, [r7, #20]
	uint8_t width = sprite.width;
 8001f34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f38:	74fb      	strb	r3, [r7, #19]
	uint8_t height = sprite.height;
 8001f3a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f3e:	74bb      	strb	r3, [r7, #18]
	uint8_t scale = (sprite.settings & SPRITE_SCALE);
 8001f40:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	747b      	strb	r3, [r7, #17]
	uint16_t *pallete = sprite.pallete;
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	60fb      	str	r3, [r7, #12]
	uint8_t *data = sprite.data;
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f50:	60bb      	str	r3, [r7, #8]
	if ((sprite.settings & SPRITE_TRANSPOSE)) {
 8001f52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f56:	b25b      	sxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da63      	bge.n	8002024 <render_sprite+0x126>
		if ((sprite.settings & SPRITE_FLIP_X)
 8001f5c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d015      	beq.n	8001f94 <render_sprite+0x96>
				&& (sprite.settings & SPRITE_FLIP_Y)) {
 8001f68:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00f      	beq.n	8001f94 <render_sprite+0x96>
			_draw_sprite_xy_t(buf, x, y, width, height, scale, pallete, data);
 8001f74:	7cf8      	ldrb	r0, [r7, #19]
 8001f76:	8aba      	ldrh	r2, [r7, #20]
 8001f78:	8af9      	ldrh	r1, [r7, #22]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	9303      	str	r3, [sp, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	9302      	str	r3, [sp, #8]
 8001f82:	7c7b      	ldrb	r3, [r7, #17]
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	7cbb      	ldrb	r3, [r7, #18]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fdbb 	bl	8002b08 <_draw_sprite_xy_t>
 8001f92:	e0ac      	b.n	80020ee <render_sprite+0x1f0>
		} else if (!(sprite.settings & SPRITE_FLIP_X)
 8001f94:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d115      	bne.n	8001fcc <render_sprite+0xce>
				&& (sprite.settings & SPRITE_FLIP_Y)) {
 8001fa0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00f      	beq.n	8001fcc <render_sprite+0xce>
			_draw_sprite_y_t(buf, x, y, width, height, scale, pallete, data);
 8001fac:	7cf8      	ldrb	r0, [r7, #19]
 8001fae:	8aba      	ldrh	r2, [r7, #20]
 8001fb0:	8af9      	ldrh	r1, [r7, #22]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	9303      	str	r3, [sp, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	9302      	str	r3, [sp, #8]
 8001fba:	7c7b      	ldrb	r3, [r7, #17]
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	7cbb      	ldrb	r3, [r7, #18]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fcfb 	bl	80029c0 <_draw_sprite_y_t>
 8001fca:	e090      	b.n	80020ee <render_sprite+0x1f0>
		} else if ((sprite.settings & SPRITE_FLIP_X)
 8001fcc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d015      	beq.n	8002004 <render_sprite+0x106>
				&& !(sprite.settings & SPRITE_FLIP_Y)) {
 8001fd8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10f      	bne.n	8002004 <render_sprite+0x106>
			_draw_sprite_x_t(buf, x, y, width, height, scale, pallete, data);
 8001fe4:	7cf8      	ldrb	r0, [r7, #19]
 8001fe6:	8aba      	ldrh	r2, [r7, #20]
 8001fe8:	8af9      	ldrh	r1, [r7, #22]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	9303      	str	r3, [sp, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	9302      	str	r3, [sp, #8]
 8001ff2:	7c7b      	ldrb	r3, [r7, #17]
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	7cbb      	ldrb	r3, [r7, #18]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fc3c 	bl	800287a <_draw_sprite_x_t>
 8002002:	e074      	b.n	80020ee <render_sprite+0x1f0>
		} else {
			_draw_sprite_no_t(buf, x, y, width, height, scale, pallete, data);
 8002004:	7cf8      	ldrb	r0, [r7, #19]
 8002006:	8aba      	ldrh	r2, [r7, #20]
 8002008:	8af9      	ldrh	r1, [r7, #22]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	9302      	str	r3, [sp, #8]
 8002012:	7c7b      	ldrb	r3, [r7, #17]
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	7cbb      	ldrb	r3, [r7, #18]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	4603      	mov	r3, r0
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fb8d 	bl	800273c <_draw_sprite_no_t>
 8002022:	e064      	b.n	80020ee <render_sprite+0x1f0>
		}
	} else {
		if ((sprite.settings & SPRITE_FLIP_X)
 8002024:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b00      	cmp	r3, #0
 800202e:	d015      	beq.n	800205c <render_sprite+0x15e>
				&& (sprite.settings & SPRITE_FLIP_Y)) {
 8002030:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00f      	beq.n	800205c <render_sprite+0x15e>
			_draw_sprite_xy(buf, x, y, width, height, scale, pallete, data);
 800203c:	7cf8      	ldrb	r0, [r7, #19]
 800203e:	8aba      	ldrh	r2, [r7, #20]
 8002040:	8af9      	ldrh	r1, [r7, #22]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	9303      	str	r3, [sp, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	9302      	str	r3, [sp, #8]
 800204a:	7c7b      	ldrb	r3, [r7, #17]
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	7cbb      	ldrb	r3, [r7, #18]
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	4603      	mov	r3, r0
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 faca 	bl	80025ee <_draw_sprite_xy>
 800205a:	e048      	b.n	80020ee <render_sprite+0x1f0>
		} else if (!(sprite.settings & SPRITE_FLIP_X)
 800205c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d115      	bne.n	8002094 <render_sprite+0x196>
				&& (sprite.settings & SPRITE_FLIP_Y)) {
 8002068:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00f      	beq.n	8002094 <render_sprite+0x196>
			_draw_sprite_y(buf, x, y, width, height, scale, pallete, data);
 8002074:	7cf8      	ldrb	r0, [r7, #19]
 8002076:	8aba      	ldrh	r2, [r7, #20]
 8002078:	8af9      	ldrh	r1, [r7, #22]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	9303      	str	r3, [sp, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	9302      	str	r3, [sp, #8]
 8002082:	7c7b      	ldrb	r3, [r7, #17]
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	7cbb      	ldrb	r3, [r7, #18]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	4603      	mov	r3, r0
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fa0a 	bl	80024a6 <_draw_sprite_y>
 8002092:	e02c      	b.n	80020ee <render_sprite+0x1f0>
		} else if ((sprite.settings & SPRITE_FLIP_X)
 8002094:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b00      	cmp	r3, #0
 800209e:	d015      	beq.n	80020cc <render_sprite+0x1ce>
				&& !(sprite.settings & SPRITE_FLIP_Y)) {
 80020a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10f      	bne.n	80020cc <render_sprite+0x1ce>
			_draw_sprite_x(buf, x, y, width, height, scale, pallete, data);
 80020ac:	7cf8      	ldrb	r0, [r7, #19]
 80020ae:	8aba      	ldrh	r2, [r7, #20]
 80020b0:	8af9      	ldrh	r1, [r7, #22]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	9303      	str	r3, [sp, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	7c7b      	ldrb	r3, [r7, #17]
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	7cbb      	ldrb	r3, [r7, #18]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	4603      	mov	r3, r0
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f94b 	bl	8002360 <_draw_sprite_x>
 80020ca:	e010      	b.n	80020ee <render_sprite+0x1f0>
		} else {
			_draw_sprite_no(buf, x, y, width, height, scale, pallete, data);
 80020cc:	7cf8      	ldrb	r0, [r7, #19]
 80020ce:	8aba      	ldrh	r2, [r7, #20]
 80020d0:	8af9      	ldrh	r1, [r7, #22]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	9303      	str	r3, [sp, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	9302      	str	r3, [sp, #8]
 80020da:	7c7b      	ldrb	r3, [r7, #17]
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	7cbb      	ldrb	r3, [r7, #18]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4603      	mov	r3, r0
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f89c 	bl	8002222 <_draw_sprite_no>
 80020ea:	e000      	b.n	80020ee <render_sprite+0x1f0>
		return;
 80020ec:	bf00      	nop
		}
	}
}
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020f6:	b004      	add	sp, #16
 80020f8:	4770      	bx	lr

080020fa <render_sprites>:

void render_sprites(uint16_t *buf, Sprite **list) {
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af02      	add	r7, sp, #8
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
	int i;
	int length = get_sprite_list_length(list);
 8002104:	6838      	ldr	r0, [r7, #0]
 8002106:	f000 f874 	bl	80021f2 <get_sprite_list_length>
 800210a:	60b8      	str	r0, [r7, #8]
	for (i = 0; i < length; i++) {
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e010      	b.n	8002134 <render_sprites+0x3a>

		render_sprite(buf, (*list[(length - 1) - i]));
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1e5a      	subs	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	4413      	add	r3, r2
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	9200      	str	r2, [sp, #0]
 8002126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fee8 	bl	8001efe <render_sprite>
	for (i = 0; i < length; i++) {
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3301      	adds	r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	dbea      	blt.n	8002112 <render_sprites+0x18>
	}
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <sprites_init_list>:

Sprite** sprites_init_list(Sprite *first_sprite) {
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
	Sprite **list = (Sprite**) malloc(sizeof(Sprite*) * 2);
 800214e:	2008      	movs	r0, #8
 8002150:	f012 f922 	bl	8014398 <malloc>
 8002154:	4603      	mov	r3, r0
 8002156:	60fb      	str	r3, [r7, #12]
	list[0] = first_sprite;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	601a      	str	r2, [r3, #0]
	list[1] = (Sprite*) NULL;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3304      	adds	r3, #4
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
	return list;
 8002166:	68fb      	ldr	r3, [r7, #12]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <sprites_add_to_list>:

Sprite** sprites_add_to_list(Sprite **list, Sprite *sprite) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
	int i;
	int length = get_sprite_list_length(list);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f839 	bl	80021f2 <get_sprite_list_length>
 8002180:	6138      	str	r0, [r7, #16]
	Sprite **new_list = (Sprite**) malloc(sizeof(Sprite*) * (length + 2));
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	3302      	adds	r3, #2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4618      	mov	r0, r3
 800218a:	f012 f905 	bl	8014398 <malloc>
 800218e:	4603      	mov	r3, r0
 8002190:	60fb      	str	r3, [r7, #12]
	if (new_list == NULL) {
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <sprites_add_to_list+0x2c>
		Error_Handler();
 8002198:	f003 fe66 	bl	8005e68 <Error_Handler>
	}
	for (i = 0; i < length; i++) {
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	e00c      	b.n	80021bc <sprites_add_to_list+0x4c>
		new_list[i] = list[i];
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	441a      	add	r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	440b      	add	r3, r1
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < length; i++) {
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3301      	adds	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dbee      	blt.n	80021a2 <sprites_add_to_list+0x32>
	}
	new_list[i] = sprite;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	601a      	str	r2, [r3, #0]
	new_list[i + 1] = (Sprite*) NULL;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3301      	adds	r3, #1
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4413      	add	r3, r2
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
	free((void*) list);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f012 f8e2 	bl	80143a8 <free>
	list = NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
	return new_list;
 80021e8:	68fb      	ldr	r3, [r7, #12]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <get_sprite_list_length>:
		return 1;
	}
	return 0;
}

int get_sprite_list_length(Sprite **list) {
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
	int i = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
	while (list[i] != NULL) {
 80021fe:	e002      	b.n	8002206 <get_sprite_list_length+0x14>
		i++;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3301      	adds	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
	while (list[i] != NULL) {
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f5      	bne.n	8002200 <get_sprite_list_length+0xe>
	}
	return i;
 8002214:	68fb      	ldr	r3, [r7, #12]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_draw_sprite_no>:

static void _draw_sprite_no(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data) {
 8002222:	b580      	push	{r7, lr}
 8002224:	b08a      	sub	sp, #40	; 0x28
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	4608      	mov	r0, r1
 800222c:	4611      	mov	r1, r2
 800222e:	461a      	mov	r2, r3
 8002230:	4603      	mov	r3, r0
 8002232:	817b      	strh	r3, [r7, #10]
 8002234:	460b      	mov	r3, r1
 8002236:	813b      	strh	r3, [r7, #8]
 8002238:	4613      	mov	r3, r2
 800223a:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
 8002240:	e084      	b.n	800234c <_draw_sprite_no+0x12a>
		for (j = 0; j < height; ++j) {
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	e079      	b.n	800233c <_draw_sprite_no+0x11a>
			color = pallete[
					(i % 2 == 0) ?
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <_draw_sprite_no+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	6a3a      	ldr	r2, [r7, #32]
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	da00      	bge.n	8002260 <_draw_sprite_no+0x3e>
 800225e:	3301      	adds	r3, #1
 8002260:	105b      	asrs	r3, r3, #1
 8002262:	461a      	mov	r2, r3
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	2b00      	cmp	r3, #0
 8002268:	da00      	bge.n	800226c <_draw_sprite_no+0x4a>
 800226a:	3301      	adds	r3, #1
 800226c:	105b      	asrs	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	461a      	mov	r2, r3
 8002272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002274:	4413      	add	r3, r2
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	b2db      	uxtb	r3, r3
			color = pallete[
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	e015      	b.n	80022ac <_draw_sprite_no+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	6a3a      	ldr	r2, [r7, #32]
 8002284:	fb02 f303 	mul.w	r3, r2, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	da00      	bge.n	800228e <_draw_sprite_no+0x6c>
 800228c:	3301      	adds	r3, #1
 800228e:	105b      	asrs	r3, r3, #1
 8002290:	461a      	mov	r2, r3
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	2b00      	cmp	r3, #0
 8002296:	da00      	bge.n	800229a <_draw_sprite_no+0x78>
 8002298:	3301      	adds	r3, #1
 800229a:	105b      	asrs	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	461a      	mov	r2, r3
 80022a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a2:	4413      	add	r3, r2
 80022a4:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 80022a6:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022ae:	4413      	add	r3, r2
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	e036      	b.n	8002328 <_draw_sprite_no+0x106>
				if (color == pallete[0]) {
 80022ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	8afa      	ldrh	r2, [r7, #22]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d037      	beq.n	8002334 <_draw_sprite_no+0x112>
					break;
				}
				Xpos = x + i * scale + k;
 80022c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	fb12 f303 	smulbb	r3, r2, r3
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	897b      	ldrh	r3, [r7, #10]
 80022d6:	4413      	add	r3, r2
 80022d8:	b29a      	uxth	r2, r3
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	4413      	add	r3, r2
 80022e0:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	e017      	b.n	8002318 <_draw_sprite_no+0xf6>
					Ypos = y + j * scale + l;
 80022e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	fb12 f303 	smulbb	r3, r2, r3
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	893b      	ldrh	r3, [r7, #8]
 80022fa:	4413      	add	r3, r2
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	b29b      	uxth	r3, r3
 8002302:	4413      	add	r3, r2
 8002304:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Xpos, Ypos, color);
 8002306:	8afb      	ldrh	r3, [r7, #22]
 8002308:	8a7a      	ldrh	r2, [r7, #18]
 800230a:	8ab9      	ldrh	r1, [r7, #20]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff f8df 	bl	80014d0 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	3301      	adds	r3, #1
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	429a      	cmp	r2, r3
 8002320:	dbe2      	blt.n	80022e8 <_draw_sprite_no+0xc6>
			for (k = 0; k < scale; ++k) {
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3301      	adds	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	429a      	cmp	r2, r3
 8002330:	dbc3      	blt.n	80022ba <_draw_sprite_no+0x98>
 8002332:	e000      	b.n	8002336 <_draw_sprite_no+0x114>
					break;
 8002334:	bf00      	nop
		for (j = 0; j < height; ++j) {
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	3301      	adds	r3, #1
 800233a:	623b      	str	r3, [r7, #32]
 800233c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	429a      	cmp	r2, r3
 8002344:	db80      	blt.n	8002248 <_draw_sprite_no+0x26>
	for (i = 0; i < width; ++i) {
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	3301      	adds	r3, #1
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002350:	429a      	cmp	r2, r3
 8002352:	f6ff af76 	blt.w	8002242 <_draw_sprite_no+0x20>
				}

			}
		}
	}
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_draw_sprite_x>:
static void _draw_sprite_x(uint16_t *buf, uint16_t x, uint16_t y, uint8_t width,
		uint8_t height, uint8_t scale, uint16_t *pallete, uint8_t *data) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4603      	mov	r3, r0
 8002370:	817b      	strh	r3, [r7, #10]
 8002372:	460b      	mov	r3, r1
 8002374:	813b      	strh	r3, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	e088      	b.n	8002492 <_draw_sprite_x+0x132>
		for (j = 0; j < height; ++j) {
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
 8002384:	e07c      	b.n	8002480 <_draw_sprite_x+0x120>
			color = pallete[
					(i % 2 == 0) ?
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
 800238c:	2b00      	cmp	r3, #0
 800238e:	d116      	bne.n	80023be <_draw_sprite_x+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	6a3a      	ldr	r2, [r7, #32]
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	da00      	bge.n	800239e <_draw_sprite_x+0x3e>
 800239c:	3301      	adds	r3, #1
 800239e:	105b      	asrs	r3, r3, #1
 80023a0:	461a      	mov	r2, r3
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	da00      	bge.n	80023aa <_draw_sprite_x+0x4a>
 80023a8:	3301      	adds	r3, #1
 80023aa:	105b      	asrs	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	461a      	mov	r2, r3
 80023b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b2:	4413      	add	r3, r2
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	b2db      	uxtb	r3, r3
			color = pallete[
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	e015      	b.n	80023ea <_draw_sprite_x+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	6a3a      	ldr	r2, [r7, #32]
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	da00      	bge.n	80023cc <_draw_sprite_x+0x6c>
 80023ca:	3301      	adds	r3, #1
 80023cc:	105b      	asrs	r3, r3, #1
 80023ce:	461a      	mov	r2, r3
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da00      	bge.n	80023d8 <_draw_sprite_x+0x78>
 80023d6:	3301      	adds	r3, #1
 80023d8:	105b      	asrs	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	461a      	mov	r2, r3
 80023de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e0:	4413      	add	r3, r2
 80023e2:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 80023e4:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023ec:	4413      	add	r3, r2
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	e039      	b.n	800246c <_draw_sprite_x+0x10c>
				if (color == pallete[0]) {
 80023f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	8afa      	ldrh	r2, [r7, #22]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d03a      	beq.n	8002478 <_draw_sprite_x+0x118>
					break;
				}
				Xpos = x + ((width - 1) - i) * scale + k;
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	b29a      	uxth	r2, r3
 800240c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002410:	b29b      	uxth	r3, r3
 8002412:	fb12 f303 	smulbb	r3, r2, r3
 8002416:	b29a      	uxth	r2, r3
 8002418:	897b      	ldrh	r3, [r7, #10]
 800241a:	4413      	add	r3, r2
 800241c:	b29a      	uxth	r2, r3
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	b29b      	uxth	r3, r3
 8002422:	4413      	add	r3, r2
 8002424:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	e017      	b.n	800245c <_draw_sprite_x+0xfc>
					Ypos = y + j * scale + l;
 800242c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002430:	b29a      	uxth	r2, r3
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	b29b      	uxth	r3, r3
 8002436:	fb12 f303 	smulbb	r3, r2, r3
 800243a:	b29a      	uxth	r2, r3
 800243c:	893b      	ldrh	r3, [r7, #8]
 800243e:	4413      	add	r3, r2
 8002440:	b29a      	uxth	r2, r3
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	b29b      	uxth	r3, r3
 8002446:	4413      	add	r3, r2
 8002448:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Xpos, Ypos, color);
 800244a:	8afb      	ldrh	r3, [r7, #22]
 800244c:	8a7a      	ldrh	r2, [r7, #18]
 800244e:	8ab9      	ldrh	r1, [r7, #20]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f7ff f83d 	bl	80014d0 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	3301      	adds	r3, #1
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	429a      	cmp	r2, r3
 8002464:	dbe2      	blt.n	800242c <_draw_sprite_x+0xcc>
			for (k = 0; k < scale; ++k) {
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	429a      	cmp	r2, r3
 8002474:	dbc0      	blt.n	80023f8 <_draw_sprite_x+0x98>
 8002476:	e000      	b.n	800247a <_draw_sprite_x+0x11a>
					break;
 8002478:	bf00      	nop
		for (j = 0; j < height; ++j) {
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	3301      	adds	r3, #1
 800247e:	623b      	str	r3, [r7, #32]
 8002480:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002484:	6a3a      	ldr	r2, [r7, #32]
 8002486:	429a      	cmp	r2, r3
 8002488:	f6ff af7d 	blt.w	8002386 <_draw_sprite_x+0x26>
	for (i = 0; i < width; ++i) {
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	3301      	adds	r3, #1
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002496:	429a      	cmp	r2, r3
 8002498:	f6ff af72 	blt.w	8002380 <_draw_sprite_x+0x20>
				}

			}
		}
	}
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3728      	adds	r7, #40	; 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_draw_sprite_y>:
static void _draw_sprite_y(uint16_t *buf, uint16_t x, uint16_t y, uint8_t width,
		uint8_t height, uint8_t scale, uint16_t *pallete, uint8_t *data) {
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b08a      	sub	sp, #40	; 0x28
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	4608      	mov	r0, r1
 80024b0:	4611      	mov	r1, r2
 80024b2:	461a      	mov	r2, r3
 80024b4:	4603      	mov	r3, r0
 80024b6:	817b      	strh	r3, [r7, #10]
 80024b8:	460b      	mov	r3, r1
 80024ba:	813b      	strh	r3, [r7, #8]
 80024bc:	4613      	mov	r3, r2
 80024be:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
 80024c4:	e089      	b.n	80025da <_draw_sprite_y+0x134>
		for (j = 0; j < height; ++j) {
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	e07d      	b.n	80025c8 <_draw_sprite_y+0x122>
			color = pallete[
					(i % 2 == 0) ?
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d116      	bne.n	8002504 <_draw_sprite_y+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	6a3a      	ldr	r2, [r7, #32]
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da00      	bge.n	80024e4 <_draw_sprite_y+0x3e>
 80024e2:	3301      	adds	r3, #1
 80024e4:	105b      	asrs	r3, r3, #1
 80024e6:	461a      	mov	r2, r3
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	da00      	bge.n	80024f0 <_draw_sprite_y+0x4a>
 80024ee:	3301      	adds	r3, #1
 80024f0:	105b      	asrs	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f8:	4413      	add	r3, r2
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	b2db      	uxtb	r3, r3
			color = pallete[
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	e015      	b.n	8002530 <_draw_sprite_y+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	6a3a      	ldr	r2, [r7, #32]
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	da00      	bge.n	8002512 <_draw_sprite_y+0x6c>
 8002510:	3301      	adds	r3, #1
 8002512:	105b      	asrs	r3, r3, #1
 8002514:	461a      	mov	r2, r3
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	2b00      	cmp	r3, #0
 800251a:	da00      	bge.n	800251e <_draw_sprite_y+0x78>
 800251c:	3301      	adds	r3, #1
 800251e:	105b      	asrs	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	461a      	mov	r2, r3
 8002524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002526:	4413      	add	r3, r2
 8002528:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 800252a:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	e03a      	b.n	80025b4 <_draw_sprite_y+0x10e>
				if (color == pallete[0]) {
 800253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	8afa      	ldrh	r2, [r7, #22]
 8002544:	429a      	cmp	r2, r3
 8002546:	d03b      	beq.n	80025c0 <_draw_sprite_y+0x11a>
					break;
				}
				Xpos = x + i * scale + k;
 8002548:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800254c:	b29a      	uxth	r2, r3
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	b29b      	uxth	r3, r3
 8002552:	fb12 f303 	smulbb	r3, r2, r3
 8002556:	b29a      	uxth	r2, r3
 8002558:	897b      	ldrh	r3, [r7, #10]
 800255a:	4413      	add	r3, r2
 800255c:	b29a      	uxth	r2, r3
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	b29b      	uxth	r3, r3
 8002562:	4413      	add	r3, r2
 8002564:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	e01b      	b.n	80025a4 <_draw_sprite_y+0xfe>
					Ypos = y + ((height - 1) - j) * scale + l;
 800256c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	b29a      	uxth	r2, r3
 8002578:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800257c:	b29b      	uxth	r3, r3
 800257e:	fb12 f303 	smulbb	r3, r2, r3
 8002582:	b29a      	uxth	r2, r3
 8002584:	893b      	ldrh	r3, [r7, #8]
 8002586:	4413      	add	r3, r2
 8002588:	b29a      	uxth	r2, r3
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	b29b      	uxth	r3, r3
 800258e:	4413      	add	r3, r2
 8002590:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Xpos, Ypos, color);
 8002592:	8afb      	ldrh	r3, [r7, #22]
 8002594:	8a7a      	ldrh	r2, [r7, #18]
 8002596:	8ab9      	ldrh	r1, [r7, #20]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7fe ff99 	bl	80014d0 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	3301      	adds	r3, #1
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	dbde      	blt.n	800256c <_draw_sprite_y+0xc6>
			for (k = 0; k < scale; ++k) {
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	dbbf      	blt.n	800253e <_draw_sprite_y+0x98>
 80025be:	e000      	b.n	80025c2 <_draw_sprite_y+0x11c>
					break;
 80025c0:	bf00      	nop
		for (j = 0; j < height; ++j) {
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	3301      	adds	r3, #1
 80025c6:	623b      	str	r3, [r7, #32]
 80025c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025cc:	6a3a      	ldr	r2, [r7, #32]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	f6ff af7c 	blt.w	80024cc <_draw_sprite_y+0x26>
	for (i = 0; i < width; ++i) {
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	3301      	adds	r3, #1
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	429a      	cmp	r2, r3
 80025e0:	f6ff af71 	blt.w	80024c6 <_draw_sprite_y+0x20>
				}

			}
		}
	}
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3728      	adds	r7, #40	; 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <_draw_sprite_xy>:
static void _draw_sprite_xy(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data) {
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b08a      	sub	sp, #40	; 0x28
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	4608      	mov	r0, r1
 80025f8:	4611      	mov	r1, r2
 80025fa:	461a      	mov	r2, r3
 80025fc:	4603      	mov	r3, r0
 80025fe:	817b      	strh	r3, [r7, #10]
 8002600:	460b      	mov	r3, r1
 8002602:	813b      	strh	r3, [r7, #8]
 8002604:	4613      	mov	r3, r2
 8002606:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	e08c      	b.n	8002728 <_draw_sprite_xy+0x13a>
		for (j = 0; j < height; ++j) {
 800260e:	2300      	movs	r3, #0
 8002610:	623b      	str	r3, [r7, #32]
 8002612:	e080      	b.n	8002716 <_draw_sprite_xy+0x128>
			color = pallete[
					(i % 2 == 0) ?
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
 800261a:	2b00      	cmp	r3, #0
 800261c:	d116      	bne.n	800264c <_draw_sprite_xy+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	6a3a      	ldr	r2, [r7, #32]
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	da00      	bge.n	800262c <_draw_sprite_xy+0x3e>
 800262a:	3301      	adds	r3, #1
 800262c:	105b      	asrs	r3, r3, #1
 800262e:	461a      	mov	r2, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	da00      	bge.n	8002638 <_draw_sprite_xy+0x4a>
 8002636:	3301      	adds	r3, #1
 8002638:	105b      	asrs	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	461a      	mov	r2, r3
 800263e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002640:	4413      	add	r3, r2
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	b2db      	uxtb	r3, r3
			color = pallete[
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	e015      	b.n	8002678 <_draw_sprite_xy+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	6a3a      	ldr	r2, [r7, #32]
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	da00      	bge.n	800265a <_draw_sprite_xy+0x6c>
 8002658:	3301      	adds	r3, #1
 800265a:	105b      	asrs	r3, r3, #1
 800265c:	461a      	mov	r2, r3
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	da00      	bge.n	8002666 <_draw_sprite_xy+0x78>
 8002664:	3301      	adds	r3, #1
 8002666:	105b      	asrs	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	461a      	mov	r2, r3
 800266c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 8002672:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800267a:	4413      	add	r3, r2
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	e03d      	b.n	8002702 <_draw_sprite_xy+0x114>
				if (color == pallete[0]) {
 8002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	8afa      	ldrh	r2, [r7, #22]
 800268c:	429a      	cmp	r2, r3
 800268e:	d03e      	beq.n	800270e <_draw_sprite_xy+0x120>
					break;
				}
				Xpos = x + ((width - 1) - i) * scale + k;
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	1e5a      	subs	r2, r3, #1
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	b29a      	uxth	r2, r3
 800269a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800269e:	b29b      	uxth	r3, r3
 80026a0:	fb12 f303 	smulbb	r3, r2, r3
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	897b      	ldrh	r3, [r7, #10]
 80026a8:	4413      	add	r3, r2
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	e01b      	b.n	80026f2 <_draw_sprite_xy+0x104>
					Ypos = y + ((height - 1) - j) * scale + l;
 80026ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80026be:	1e5a      	subs	r2, r3, #1
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	fb12 f303 	smulbb	r3, r2, r3
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	893b      	ldrh	r3, [r7, #8]
 80026d4:	4413      	add	r3, r2
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4413      	add	r3, r2
 80026de:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Xpos, Ypos, color);
 80026e0:	8afb      	ldrh	r3, [r7, #22]
 80026e2:	8a7a      	ldrh	r2, [r7, #18]
 80026e4:	8ab9      	ldrh	r1, [r7, #20]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7fe fef2 	bl	80014d0 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	3301      	adds	r3, #1
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dbde      	blt.n	80026ba <_draw_sprite_xy+0xcc>
			for (k = 0; k < scale; ++k) {
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	3301      	adds	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	429a      	cmp	r2, r3
 800270a:	dbbc      	blt.n	8002686 <_draw_sprite_xy+0x98>
 800270c:	e000      	b.n	8002710 <_draw_sprite_xy+0x122>
					break;
 800270e:	bf00      	nop
		for (j = 0; j < height; ++j) {
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	3301      	adds	r3, #1
 8002714:	623b      	str	r3, [r7, #32]
 8002716:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800271a:	6a3a      	ldr	r2, [r7, #32]
 800271c:	429a      	cmp	r2, r3
 800271e:	f6ff af79 	blt.w	8002614 <_draw_sprite_xy+0x26>
	for (i = 0; i < width; ++i) {
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	3301      	adds	r3, #1
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272c:	429a      	cmp	r2, r3
 800272e:	f6ff af6e 	blt.w	800260e <_draw_sprite_xy+0x20>
				}

			}
		}
	}
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	3728      	adds	r7, #40	; 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_draw_sprite_no_t>:

static void _draw_sprite_no_t(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	4608      	mov	r0, r1
 8002746:	4611      	mov	r1, r2
 8002748:	461a      	mov	r2, r3
 800274a:	4603      	mov	r3, r0
 800274c:	817b      	strh	r3, [r7, #10]
 800274e:	460b      	mov	r3, r1
 8002750:	813b      	strh	r3, [r7, #8]
 8002752:	4613      	mov	r3, r2
 8002754:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	e084      	b.n	8002866 <_draw_sprite_no_t+0x12a>
		for (j = 0; j < height; ++j) {
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
 8002760:	e079      	b.n	8002856 <_draw_sprite_no_t+0x11a>
			color = pallete[
					(i % 2 == 0) ?
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
 8002768:	2b00      	cmp	r3, #0
 800276a:	d116      	bne.n	800279a <_draw_sprite_no_t+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	6a3a      	ldr	r2, [r7, #32]
 8002770:	fb02 f303 	mul.w	r3, r2, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	da00      	bge.n	800277a <_draw_sprite_no_t+0x3e>
 8002778:	3301      	adds	r3, #1
 800277a:	105b      	asrs	r3, r3, #1
 800277c:	461a      	mov	r2, r3
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	2b00      	cmp	r3, #0
 8002782:	da00      	bge.n	8002786 <_draw_sprite_no_t+0x4a>
 8002784:	3301      	adds	r3, #1
 8002786:	105b      	asrs	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	461a      	mov	r2, r3
 800278c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800278e:	4413      	add	r3, r2
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	b2db      	uxtb	r3, r3
			color = pallete[
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	e015      	b.n	80027c6 <_draw_sprite_no_t+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	6a3a      	ldr	r2, [r7, #32]
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da00      	bge.n	80027a8 <_draw_sprite_no_t+0x6c>
 80027a6:	3301      	adds	r3, #1
 80027a8:	105b      	asrs	r3, r3, #1
 80027aa:	461a      	mov	r2, r3
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da00      	bge.n	80027b4 <_draw_sprite_no_t+0x78>
 80027b2:	3301      	adds	r3, #1
 80027b4:	105b      	asrs	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027bc:	4413      	add	r3, r2
 80027be:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 80027c0:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027c8:	4413      	add	r3, r2
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e036      	b.n	8002842 <_draw_sprite_no_t+0x106>
				if (color == pallete[0]) {
 80027d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	8afa      	ldrh	r2, [r7, #22]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d037      	beq.n	800284e <_draw_sprite_no_t+0x112>
					break;
				}
				Xpos = x + i * scale + k;
 80027de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	fb12 f303 	smulbb	r3, r2, r3
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	897b      	ldrh	r3, [r7, #10]
 80027f0:	4413      	add	r3, r2
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	e017      	b.n	8002832 <_draw_sprite_no_t+0xf6>
					Ypos = y + j * scale + l;
 8002802:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002806:	b29a      	uxth	r2, r3
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	b29b      	uxth	r3, r3
 800280c:	fb12 f303 	smulbb	r3, r2, r3
 8002810:	b29a      	uxth	r2, r3
 8002812:	893b      	ldrh	r3, [r7, #8]
 8002814:	4413      	add	r3, r2
 8002816:	b29a      	uxth	r2, r3
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	b29b      	uxth	r3, r3
 800281c:	4413      	add	r3, r2
 800281e:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Ypos, Xpos, color);
 8002820:	8afb      	ldrh	r3, [r7, #22]
 8002822:	8aba      	ldrh	r2, [r7, #20]
 8002824:	8a79      	ldrh	r1, [r7, #18]
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7fe fe52 	bl	80014d0 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	3301      	adds	r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	429a      	cmp	r2, r3
 800283a:	dbe2      	blt.n	8002802 <_draw_sprite_no_t+0xc6>
			for (k = 0; k < scale; ++k) {
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	3301      	adds	r3, #1
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	429a      	cmp	r2, r3
 800284a:	dbc3      	blt.n	80027d4 <_draw_sprite_no_t+0x98>
 800284c:	e000      	b.n	8002850 <_draw_sprite_no_t+0x114>
					break;
 800284e:	bf00      	nop
		for (j = 0; j < height; ++j) {
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	3301      	adds	r3, #1
 8002854:	623b      	str	r3, [r7, #32]
 8002856:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800285a:	6a3a      	ldr	r2, [r7, #32]
 800285c:	429a      	cmp	r2, r3
 800285e:	db80      	blt.n	8002762 <_draw_sprite_no_t+0x26>
	for (i = 0; i < width; ++i) {
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	3301      	adds	r3, #1
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286a:	429a      	cmp	r2, r3
 800286c:	f6ff af76 	blt.w	800275c <_draw_sprite_no_t+0x20>
				}

			}
		}
	}
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3728      	adds	r7, #40	; 0x28
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <_draw_sprite_x_t>:

static void _draw_sprite_x_t(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data) {
 800287a:	b580      	push	{r7, lr}
 800287c:	b08a      	sub	sp, #40	; 0x28
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	4608      	mov	r0, r1
 8002884:	4611      	mov	r1, r2
 8002886:	461a      	mov	r2, r3
 8002888:	4603      	mov	r3, r0
 800288a:	817b      	strh	r3, [r7, #10]
 800288c:	460b      	mov	r3, r1
 800288e:	813b      	strh	r3, [r7, #8]
 8002890:	4613      	mov	r3, r2
 8002892:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
 8002894:	2300      	movs	r3, #0
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
 8002898:	e088      	b.n	80029ac <_draw_sprite_x_t+0x132>
		for (j = 0; j < height; ++j) {
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	e07c      	b.n	800299a <_draw_sprite_x_t+0x120>
			color = pallete[
					(i % 2 == 0) ?
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d116      	bne.n	80028d8 <_draw_sprite_x_t+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	6a3a      	ldr	r2, [r7, #32]
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da00      	bge.n	80028b8 <_draw_sprite_x_t+0x3e>
 80028b6:	3301      	adds	r3, #1
 80028b8:	105b      	asrs	r3, r3, #1
 80028ba:	461a      	mov	r2, r3
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	2b00      	cmp	r3, #0
 80028c0:	da00      	bge.n	80028c4 <_draw_sprite_x_t+0x4a>
 80028c2:	3301      	adds	r3, #1
 80028c4:	105b      	asrs	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	461a      	mov	r2, r3
 80028ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028cc:	4413      	add	r3, r2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	b2db      	uxtb	r3, r3
			color = pallete[
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	e015      	b.n	8002904 <_draw_sprite_x_t+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	6a3a      	ldr	r2, [r7, #32]
 80028dc:	fb02 f303 	mul.w	r3, r2, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	da00      	bge.n	80028e6 <_draw_sprite_x_t+0x6c>
 80028e4:	3301      	adds	r3, #1
 80028e6:	105b      	asrs	r3, r3, #1
 80028e8:	461a      	mov	r2, r3
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	da00      	bge.n	80028f2 <_draw_sprite_x_t+0x78>
 80028f0:	3301      	adds	r3, #1
 80028f2:	105b      	asrs	r3, r3, #1
 80028f4:	4413      	add	r3, r2
 80028f6:	461a      	mov	r2, r3
 80028f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fa:	4413      	add	r3, r2
 80028fc:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 80028fe:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002906:	4413      	add	r3, r2
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	e039      	b.n	8002986 <_draw_sprite_x_t+0x10c>
				if (color == pallete[0]) {
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	8afa      	ldrh	r2, [r7, #22]
 8002918:	429a      	cmp	r2, r3
 800291a:	d03a      	beq.n	8002992 <_draw_sprite_x_t+0x118>
					break;
				}
				Xpos = x + ((width - 1) - i) * scale + k;
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	1e5a      	subs	r2, r3, #1
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	b29a      	uxth	r2, r3
 8002926:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800292a:	b29b      	uxth	r3, r3
 800292c:	fb12 f303 	smulbb	r3, r2, r3
 8002930:	b29a      	uxth	r2, r3
 8002932:	897b      	ldrh	r3, [r7, #10]
 8002934:	4413      	add	r3, r2
 8002936:	b29a      	uxth	r2, r3
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	b29b      	uxth	r3, r3
 800293c:	4413      	add	r3, r2
 800293e:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	e017      	b.n	8002976 <_draw_sprite_x_t+0xfc>
					Ypos = y + j * scale + l;
 8002946:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800294a:	b29a      	uxth	r2, r3
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	b29b      	uxth	r3, r3
 8002950:	fb12 f303 	smulbb	r3, r2, r3
 8002954:	b29a      	uxth	r2, r3
 8002956:	893b      	ldrh	r3, [r7, #8]
 8002958:	4413      	add	r3, r2
 800295a:	b29a      	uxth	r2, r3
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	b29b      	uxth	r3, r3
 8002960:	4413      	add	r3, r2
 8002962:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Ypos, Xpos, color);
 8002964:	8afb      	ldrh	r3, [r7, #22]
 8002966:	8aba      	ldrh	r2, [r7, #20]
 8002968:	8a79      	ldrh	r1, [r7, #18]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7fe fdb0 	bl	80014d0 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	3301      	adds	r3, #1
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	429a      	cmp	r2, r3
 800297e:	dbe2      	blt.n	8002946 <_draw_sprite_x_t+0xcc>
			for (k = 0; k < scale; ++k) {
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	3301      	adds	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	429a      	cmp	r2, r3
 800298e:	dbc0      	blt.n	8002912 <_draw_sprite_x_t+0x98>
 8002990:	e000      	b.n	8002994 <_draw_sprite_x_t+0x11a>
					break;
 8002992:	bf00      	nop
		for (j = 0; j < height; ++j) {
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	3301      	adds	r3, #1
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800299e:	6a3a      	ldr	r2, [r7, #32]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	f6ff af7d 	blt.w	80028a0 <_draw_sprite_x_t+0x26>
	for (i = 0; i < width; ++i) {
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	3301      	adds	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f6ff af72 	blt.w	800289a <_draw_sprite_x_t+0x20>
				}

			}
		}
	}
}
 80029b6:	bf00      	nop
 80029b8:	bf00      	nop
 80029ba:	3728      	adds	r7, #40	; 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_draw_sprite_y_t>:

static void _draw_sprite_y_t(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	460b      	mov	r3, r1
 80029d4:	813b      	strh	r3, [r7, #8]
 80029d6:	4613      	mov	r3, r2
 80029d8:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	e089      	b.n	8002af4 <_draw_sprite_y_t+0x134>
		for (j = 0; j < height; ++j) {
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
 80029e4:	e07d      	b.n	8002ae2 <_draw_sprite_y_t+0x122>
			color = pallete[
					(i % 2 == 0) ?
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d116      	bne.n	8002a1e <_draw_sprite_y_t+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	6a3a      	ldr	r2, [r7, #32]
 80029f4:	fb02 f303 	mul.w	r3, r2, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da00      	bge.n	80029fe <_draw_sprite_y_t+0x3e>
 80029fc:	3301      	adds	r3, #1
 80029fe:	105b      	asrs	r3, r3, #1
 8002a00:	461a      	mov	r2, r3
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	da00      	bge.n	8002a0a <_draw_sprite_y_t+0x4a>
 8002a08:	3301      	adds	r3, #1
 8002a0a:	105b      	asrs	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a12:	4413      	add	r3, r2
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	b2db      	uxtb	r3, r3
			color = pallete[
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	e015      	b.n	8002a4a <_draw_sprite_y_t+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	6a3a      	ldr	r2, [r7, #32]
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	da00      	bge.n	8002a2c <_draw_sprite_y_t+0x6c>
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	105b      	asrs	r3, r3, #1
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	da00      	bge.n	8002a38 <_draw_sprite_y_t+0x78>
 8002a36:	3301      	adds	r3, #1
 8002a38:	105b      	asrs	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a40:	4413      	add	r3, r2
 8002a42:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 8002a44:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a4c:	4413      	add	r3, r2
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	e03a      	b.n	8002ace <_draw_sprite_y_t+0x10e>
				if (color == pallete[0]) {
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	8afa      	ldrh	r2, [r7, #22]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d03b      	beq.n	8002ada <_draw_sprite_y_t+0x11a>
					break;
				}
				Xpos = x + i * scale + k;
 8002a62:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	fb12 f303 	smulbb	r3, r2, r3
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	897b      	ldrh	r3, [r7, #10]
 8002a74:	4413      	add	r3, r2
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
 8002a80:	2300      	movs	r3, #0
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	e01b      	b.n	8002abe <_draw_sprite_y_t+0xfe>
					Ypos = y + ((height - 1) - j) * scale + l;
 8002a86:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a8a:	1e5a      	subs	r2, r3, #1
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	fb12 f303 	smulbb	r3, r2, r3
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	893b      	ldrh	r3, [r7, #8]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Ypos, Xpos, color);
 8002aac:	8afb      	ldrh	r3, [r7, #22]
 8002aae:	8aba      	ldrh	r2, [r7, #20]
 8002ab0:	8a79      	ldrh	r1, [r7, #18]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7fe fd0c 	bl	80014d0 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	3301      	adds	r3, #1
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	dbde      	blt.n	8002a86 <_draw_sprite_y_t+0xc6>
			for (k = 0; k < scale; ++k) {
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3301      	adds	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	dbbf      	blt.n	8002a58 <_draw_sprite_y_t+0x98>
 8002ad8:	e000      	b.n	8002adc <_draw_sprite_y_t+0x11c>
					break;
 8002ada:	bf00      	nop
		for (j = 0; j < height; ++j) {
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ae6:	6a3a      	ldr	r2, [r7, #32]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	f6ff af7c 	blt.w	80029e6 <_draw_sprite_y_t+0x26>
	for (i = 0; i < width; ++i) {
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	3301      	adds	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af8:	429a      	cmp	r2, r3
 8002afa:	f6ff af71 	blt.w	80029e0 <_draw_sprite_y_t+0x20>
				}

			}
		}
	}
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	3728      	adds	r7, #40	; 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_draw_sprite_xy_t>:

static void _draw_sprite_xy_t(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	4608      	mov	r0, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	461a      	mov	r2, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	817b      	strh	r3, [r7, #10]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	813b      	strh	r3, [r7, #8]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	e08c      	b.n	8002c42 <_draw_sprite_xy_t+0x13a>
		for (j = 0; j < height; ++j) {
 8002b28:	2300      	movs	r3, #0
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	e080      	b.n	8002c30 <_draw_sprite_xy_t+0x128>
			color = pallete[
					(i % 2 == 0) ?
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d116      	bne.n	8002b66 <_draw_sprite_xy_t+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	6a3a      	ldr	r2, [r7, #32]
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	da00      	bge.n	8002b46 <_draw_sprite_xy_t+0x3e>
 8002b44:	3301      	adds	r3, #1
 8002b46:	105b      	asrs	r3, r3, #1
 8002b48:	461a      	mov	r2, r3
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da00      	bge.n	8002b52 <_draw_sprite_xy_t+0x4a>
 8002b50:	3301      	adds	r3, #1
 8002b52:	105b      	asrs	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	461a      	mov	r2, r3
 8002b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5a:	4413      	add	r3, r2
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	b2db      	uxtb	r3, r3
			color = pallete[
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	e015      	b.n	8002b92 <_draw_sprite_xy_t+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	6a3a      	ldr	r2, [r7, #32]
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	da00      	bge.n	8002b74 <_draw_sprite_xy_t+0x6c>
 8002b72:	3301      	adds	r3, #1
 8002b74:	105b      	asrs	r3, r3, #1
 8002b76:	461a      	mov	r2, r3
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	da00      	bge.n	8002b80 <_draw_sprite_xy_t+0x78>
 8002b7e:	3301      	adds	r3, #1
 8002b80:	105b      	asrs	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b88:	4413      	add	r3, r2
 8002b8a:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
 8002b8c:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b94:	4413      	add	r3, r2
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	e03d      	b.n	8002c1c <_draw_sprite_xy_t+0x114>
				if (color == pallete[0]) {
 8002ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	8afa      	ldrh	r2, [r7, #22]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d03e      	beq.n	8002c28 <_draw_sprite_xy_t+0x120>
					break;
				}
				Xpos = x + ((width - 1) - i) * scale + k;
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	1e5a      	subs	r2, r3, #1
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	fb12 f303 	smulbb	r3, r2, r3
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	897b      	ldrh	r3, [r7, #10]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	e01b      	b.n	8002c0c <_draw_sprite_xy_t+0x104>
					Ypos = y + ((height - 1) - j) * scale + l;
 8002bd4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	fb12 f303 	smulbb	r3, r2, r3
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	893b      	ldrh	r3, [r7, #8]
 8002bee:	4413      	add	r3, r2
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Ypos, Xpos, color);
 8002bfa:	8afb      	ldrh	r3, [r7, #22]
 8002bfc:	8aba      	ldrh	r2, [r7, #20]
 8002bfe:	8a79      	ldrh	r1, [r7, #18]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f7fe fc65 	bl	80014d0 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	dbde      	blt.n	8002bd4 <_draw_sprite_xy_t+0xcc>
			for (k = 0; k < scale; ++k) {
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	dbbc      	blt.n	8002ba0 <_draw_sprite_xy_t+0x98>
 8002c26:	e000      	b.n	8002c2a <_draw_sprite_xy_t+0x122>
					break;
 8002c28:	bf00      	nop
		for (j = 0; j < height; ++j) {
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	623b      	str	r3, [r7, #32]
 8002c30:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	f6ff af79 	blt.w	8002b2e <_draw_sprite_xy_t+0x26>
	for (i = 0; i < width; ++i) {
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	3301      	adds	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c46:	429a      	cmp	r2, r3
 8002c48:	f6ff af6e 	blt.w	8002b28 <_draw_sprite_xy_t+0x20>
				}

			}
		}
	}
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3728      	adds	r7, #40	; 0x28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <gw_audio_init>:
Generator gen3;
Noise noise1;

static uint32_t audio_frame = 0;

void gw_audio_init(void) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
	memset(audiobuffer, 0, sizeof(audiobuffer));
 8002c5e:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8002c62:	2100      	movs	r1, #0
 8002c64:	4853      	ldr	r0, [pc, #332]	; (8002db4 <gw_audio_init+0x15c>)
 8002c66:	f011 ff29 	bl	8014abc <memset>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) audiobuffer,
 8002c6a:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002c6e:	4951      	ldr	r1, [pc, #324]	; (8002db4 <gw_audio_init+0x15c>)
 8002c70:	4851      	ldr	r0, [pc, #324]	; (8002db8 <gw_audio_init+0x160>)
 8002c72:	f00f fdab 	bl	80127cc <HAL_SAI_Transmit_DMA>
	AUDIO_BUFFER_LENGTH);
	int i;
	for (i = 0; i < AUDIO_PROGRAMMABLE_LENGTH; i++) {
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	e040      	b.n	8002cfe <gw_audio_init+0xa6>
		(&gen1)->gen_freq[i] = 0;
 8002c7c:	4a4f      	ldr	r2, [pc, #316]	; (8002dbc <gw_audio_init+0x164>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
		(&gen1)->gen_duty[i] = PW_HALF;
 8002c86:	4a4d      	ldr	r2, [pc, #308]	; (8002dbc <gw_audio_init+0x164>)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3350      	adds	r3, #80	; 0x50
 8002c8e:	2201      	movs	r2, #1
 8002c90:	701a      	strb	r2, [r3, #0]
		(&gen1)->gen_vol[i] = (uint8_t) 0;
 8002c92:	4a4a      	ldr	r2, [pc, #296]	; (8002dbc <gw_audio_init+0x164>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	3328      	adds	r3, #40	; 0x28
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]

		(&gen2)->gen_freq[i] = 0;
 8002c9e:	4a48      	ldr	r2, [pc, #288]	; (8002dc0 <gw_audio_init+0x168>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
		(&gen2)->gen_duty[i] = PW_HALF;
 8002ca8:	4a45      	ldr	r2, [pc, #276]	; (8002dc0 <gw_audio_init+0x168>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	3350      	adds	r3, #80	; 0x50
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
		(&gen2)->gen_vol[i] = (uint8_t) 0;
 8002cb4:	4a42      	ldr	r2, [pc, #264]	; (8002dc0 <gw_audio_init+0x168>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	3328      	adds	r3, #40	; 0x28
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]

		(&gen3)->gen_freq[i] = 0;
 8002cc0:	4a40      	ldr	r2, [pc, #256]	; (8002dc4 <gw_audio_init+0x16c>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
		(&gen3)->gen_duty[i] = PW_HALF;
 8002cca:	4a3e      	ldr	r2, [pc, #248]	; (8002dc4 <gw_audio_init+0x16c>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4413      	add	r3, r2
 8002cd0:	3350      	adds	r3, #80	; 0x50
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
		(&gen3)->gen_vol[i] = (uint8_t) 0;
 8002cd6:	4a3b      	ldr	r2, [pc, #236]	; (8002dc4 <gw_audio_init+0x16c>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4413      	add	r3, r2
 8002cdc:	3328      	adds	r3, #40	; 0x28
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]

		(&noise1)->noise_freq[i] = 0;
 8002ce2:	4a39      	ldr	r2, [pc, #228]	; (8002dc8 <gw_audio_init+0x170>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
		(&noise1)->noise_vol[i] = (uint8_t) 0;
 8002cec:	4a36      	ldr	r2, [pc, #216]	; (8002dc8 <gw_audio_init+0x170>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3328      	adds	r3, #40	; 0x28
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < AUDIO_PROGRAMMABLE_LENGTH; i++) {
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b27      	cmp	r3, #39	; 0x27
 8002d02:	ddbb      	ble.n	8002c7c <gw_audio_init+0x24>
	}

	(&gen1)->samples_high = 0;
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <gw_audio_init+0x164>)
 8002d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
 8002d10:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <gw_audio_init+0x164>)
 8002d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&gen1)->samples_high = 0;
 8002d1c:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <gw_audio_init+0x164>)
 8002d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d22:	2200      	movs	r2, #0
 8002d24:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <gw_audio_init+0x164>)
 8002d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&gen1)->samples_high = 0;
 8002d34:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <gw_audio_init+0x164>)
 8002d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
 8002d40:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <gw_audio_init+0x164>)
 8002d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&noise1)->LFSR = 1;
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <gw_audio_init+0x170>)
 8002d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d52:	2201      	movs	r2, #1
 8002d54:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
	(&noise1)->last = 0;
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <gw_audio_init+0x170>)
 8002d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312

	for (i = 0; i < AUDIO_BUFFER_LENGTH; i++) {
 8002d64:	2300      	movs	r3, #0
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	e01a      	b.n	8002da0 <gw_audio_init+0x148>
		(&gen1)->audiobuffer[i] = 0;
 8002d6a:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <gw_audio_init+0x164>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	333c      	adds	r3, #60	; 0x3c
 8002d70:	2100      	movs	r1, #0
 8002d72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&gen2)->audiobuffer[i] = 0;
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <gw_audio_init+0x168>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	333c      	adds	r3, #60	; 0x3c
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&gen3)->audiobuffer[i] = 0;
 8002d82:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <gw_audio_init+0x16c>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	333c      	adds	r3, #60	; 0x3c
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&noise1)->audiobuffer[i] = 0;
 8002d8e:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <gw_audio_init+0x170>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3328      	adds	r3, #40	; 0x28
 8002d94:	2100      	movs	r1, #0
 8002d96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < AUDIO_BUFFER_LENGTH; i++) {
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8002da6:	dbe0      	blt.n	8002d6a <gw_audio_init+0x112>
	}
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	30000000 	.word	0x30000000
 8002db8:	20000490 	.word	0x20000490
 8002dbc:	300012c0 	.word	0x300012c0
 8002dc0:	30002600 	.word	0x30002600
 8002dc4:	30003940 	.word	0x30003940
 8002dc8:	30004c80 	.word	0x30004c80

08002dcc <HAL_SAI_TxHalfCpltCallback>:

void gw_audio_resume(void) {
	HAL_SAI_DMAResume(&hsai_BlockA1);
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	move_generator(&gen1);
 8002dd4:	4829      	ldr	r0, [pc, #164]	; (8002e7c <HAL_SAI_TxHalfCpltCallback+0xb0>)
 8002dd6:	f000 f96f 	bl	80030b8 <move_generator>
	play_generator(&gen1, 0, AUDIO_BUFFER_LENGTH / 2);
 8002dda:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002dde:	2100      	movs	r1, #0
 8002de0:	4826      	ldr	r0, [pc, #152]	; (8002e7c <HAL_SAI_TxHalfCpltCallback+0xb0>)
 8002de2:	f000 f8b7 	bl	8002f54 <play_generator>
	move_generator(&gen2);
 8002de6:	4826      	ldr	r0, [pc, #152]	; (8002e80 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 8002de8:	f000 f966 	bl	80030b8 <move_generator>
	play_generator(&gen2, 0, AUDIO_BUFFER_LENGTH / 2);
 8002dec:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002df0:	2100      	movs	r1, #0
 8002df2:	4823      	ldr	r0, [pc, #140]	; (8002e80 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 8002df4:	f000 f8ae 	bl	8002f54 <play_generator>
	move_generator(&gen3);
 8002df8:	4822      	ldr	r0, [pc, #136]	; (8002e84 <HAL_SAI_TxHalfCpltCallback+0xb8>)
 8002dfa:	f000 f95d 	bl	80030b8 <move_generator>
	play_generator(&gen3, 0, AUDIO_BUFFER_LENGTH / 2);
 8002dfe:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002e02:	2100      	movs	r1, #0
 8002e04:	481f      	ldr	r0, [pc, #124]	; (8002e84 <HAL_SAI_TxHalfCpltCallback+0xb8>)
 8002e06:	f000 f8a5 	bl	8002f54 <play_generator>
	move_noise(&noise1);
 8002e0a:	481f      	ldr	r0, [pc, #124]	; (8002e88 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8002e0c:	f000 fa51 	bl	80032b2 <move_noise>
	play_noise(&noise1, 0, AUDIO_BUFFER_LENGTH / 2);
 8002e10:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002e14:	2100      	movs	r1, #0
 8002e16:	481c      	ldr	r0, [pc, #112]	; (8002e88 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8002e18:	f000 f9b9 	bl	800318e <play_noise>
	int i;
	for (i = 0; i < AUDIO_BUFFER_LENGTH / 2; i++) {
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	e022      	b.n	8002e68 <HAL_SAI_TxHalfCpltCallback+0x9c>
		audiobuffer[i] = 4
				* (gen1.audiobuffer[i] + gen2.audiobuffer[i]
 8002e22:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <HAL_SAI_TxHalfCpltCallback+0xb0>)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	333c      	adds	r3, #60	; 0x3c
 8002e28:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	333c      	adds	r3, #60	; 0x3c
 8002e34:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002e38:	440b      	add	r3, r1
						+ gen3.audiobuffer[i] + noise1.audiobuffer[i]);
 8002e3a:	4912      	ldr	r1, [pc, #72]	; (8002e84 <HAL_SAI_TxHalfCpltCallback+0xb8>)
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	323c      	adds	r2, #60	; 0x3c
 8002e40:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8002e44:	4413      	add	r3, r2
 8002e46:	4910      	ldr	r1, [pc, #64]	; (8002e88 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	3228      	adds	r2, #40	; 0x28
 8002e4c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8002e50:	4413      	add	r3, r2
		audiobuffer[i] = 4
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	b219      	sxth	r1, r3
 8002e5a:	4a0c      	ldr	r2, [pc, #48]	; (8002e8c <HAL_SAI_TxHalfCpltCallback+0xc0>)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < AUDIO_BUFFER_LENGTH / 2; i++) {
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3301      	adds	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002e6e:	dbd8      	blt.n	8002e22 <HAL_SAI_TxHalfCpltCallback+0x56>
	}
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	300012c0 	.word	0x300012c0
 8002e80:	30002600 	.word	0x30002600
 8002e84:	30003940 	.word	0x30003940
 8002e88:	30004c80 	.word	0x30004c80
 8002e8c:	30000000 	.word	0x30000000

08002e90 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	audio_frame++;
 8002e98:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <HAL_SAI_TxCpltCallback+0xac>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <HAL_SAI_TxCpltCallback+0xac>)
 8002ea0:	6013      	str	r3, [r2, #0]
	play_generator(&gen1, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
 8002ea2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002ea6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002eaa:	4825      	ldr	r0, [pc, #148]	; (8002f40 <HAL_SAI_TxCpltCallback+0xb0>)
 8002eac:	f000 f852 	bl	8002f54 <play_generator>
	play_generator(&gen2, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
 8002eb0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002eb4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002eb8:	4822      	ldr	r0, [pc, #136]	; (8002f44 <HAL_SAI_TxCpltCallback+0xb4>)
 8002eba:	f000 f84b 	bl	8002f54 <play_generator>
	play_generator(&gen3, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
 8002ebe:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002ec2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002ec6:	4820      	ldr	r0, [pc, #128]	; (8002f48 <HAL_SAI_TxCpltCallback+0xb8>)
 8002ec8:	f000 f844 	bl	8002f54 <play_generator>
	play_noise(&noise1, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
 8002ecc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002ed0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002ed4:	481d      	ldr	r0, [pc, #116]	; (8002f4c <HAL_SAI_TxCpltCallback+0xbc>)
 8002ed6:	f000 f95a 	bl	800318e <play_noise>
	int i;
	for (i = AUDIO_BUFFER_LENGTH / 2; i < AUDIO_BUFFER_LENGTH; i++) {
 8002eda:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e022      	b.n	8002f28 <HAL_SAI_TxCpltCallback+0x98>
		audiobuffer[i] = 2
				* (gen1.audiobuffer[i] + gen2.audiobuffer[i]
 8002ee2:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <HAL_SAI_TxCpltCallback+0xb0>)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	333c      	adds	r3, #60	; 0x3c
 8002ee8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002eec:	4619      	mov	r1, r3
 8002eee:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <HAL_SAI_TxCpltCallback+0xb4>)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	333c      	adds	r3, #60	; 0x3c
 8002ef4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ef8:	440b      	add	r3, r1
						+ gen3.audiobuffer[i] + noise1.audiobuffer[i]);
 8002efa:	4913      	ldr	r1, [pc, #76]	; (8002f48 <HAL_SAI_TxCpltCallback+0xb8>)
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	323c      	adds	r2, #60	; 0x3c
 8002f00:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8002f04:	4413      	add	r3, r2
 8002f06:	4911      	ldr	r1, [pc, #68]	; (8002f4c <HAL_SAI_TxCpltCallback+0xbc>)
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	3228      	adds	r2, #40	; 0x28
 8002f0c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8002f10:	4413      	add	r3, r2
		audiobuffer[i] = 2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	b219      	sxth	r1, r3
 8002f1a:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <HAL_SAI_TxCpltCallback+0xc0>)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = AUDIO_BUFFER_LENGTH / 2; i < AUDIO_BUFFER_LENGTH; i++) {
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3301      	adds	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8002f2e:	dbd8      	blt.n	8002ee2 <HAL_SAI_TxCpltCallback+0x52>
	}
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000220 	.word	0x20000220
 8002f40:	300012c0 	.word	0x300012c0
 8002f44:	30002600 	.word	0x30002600
 8002f48:	30003940 	.word	0x30003940
 8002f4c:	30004c80 	.word	0x30004c80
 8002f50:	30000000 	.word	0x30000000

08002f54 <play_generator>:

void play_generator(Generator *gen, int start, int len) {
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
	int i;
	uint8_t freq = (*gen).gen_freq[0];
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	74fb      	strb	r3, [r7, #19]
	if (freq == 0) {
 8002f66:	7cfb      	ldrb	r3, [r7, #19]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d112      	bne.n	8002f92 <play_generator+0x3e>
		for (i = start; i < start + len; i++) {
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	e008      	b.n	8002f84 <play_generator+0x30>
			gen->audiobuffer[i] = 0;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	323c      	adds	r2, #60	; 0x3c
 8002f78:	2100      	movs	r1, #0
 8002f7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = start; i < start + len; i++) {
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3301      	adds	r3, #1
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	dbf0      	blt.n	8002f72 <play_generator+0x1e>
		}
		return;
 8002f90:	e08d      	b.n	80030ae <play_generator+0x15a>
	}
	uint8_t duty = (*gen).gen_duty[0];
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f98:	74bb      	strb	r3, [r7, #18]
	uint16_t samples_high;
	uint16_t samples_low;
	switch (duty) {
 8002f9a:	7cbb      	ldrb	r3, [r7, #18]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d018      	beq.n	8002fd2 <play_generator+0x7e>
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	dc1f      	bgt.n	8002fe4 <play_generator+0x90>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <play_generator+0x5a>
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d009      	beq.n	8002fc0 <play_generator+0x6c>
 8002fac:	e01a      	b.n	8002fe4 <play_generator+0x90>
	case PW_SHORT:
		samples_high = 1 * (uint16_t) freq;
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	837b      	strh	r3, [r7, #26]
		samples_low = 3 * (uint16_t) freq;
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	0052      	lsls	r2, r2, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	833b      	strh	r3, [r7, #24]
		break;
 8002fbe:	e01a      	b.n	8002ff6 <play_generator+0xa2>
	case PW_HALF:
		samples_high = 2 * (uint16_t) freq;
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	837b      	strh	r3, [r7, #26]
		samples_low = 2 * (uint16_t) freq;
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	833b      	strh	r3, [r7, #24]
		break;
 8002fd0:	e011      	b.n	8002ff6 <play_generator+0xa2>
	case PW_LONG:
		samples_high = 3 * (uint16_t) freq;
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	0052      	lsls	r2, r2, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	837b      	strh	r3, [r7, #26]
		samples_low = 1 * (uint16_t) freq;
 8002fde:	7cfb      	ldrb	r3, [r7, #19]
 8002fe0:	833b      	strh	r3, [r7, #24]
		break;
 8002fe2:	e008      	b.n	8002ff6 <play_generator+0xa2>
	default:
		samples_high = 2 * (uint16_t) freq;
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	837b      	strh	r3, [r7, #26]
		samples_low = 2 * (uint16_t) freq;
 8002fec:	7cfb      	ldrb	r3, [r7, #19]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	833b      	strh	r3, [r7, #24]
		break;
 8002ff4:	bf00      	nop
	}
	uint8_t vol = (*gen).gen_vol[0];
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ffc:	747b      	strb	r3, [r7, #17]
	uint16_t counter_high = (*gen).samples_high;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003004:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 8003008:	82fb      	strh	r3, [r7, #22]
	uint16_t counter_low = (*gen).samples_low;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003010:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8003014:	82bb      	strh	r3, [r7, #20]

	if (counter_high > samples_high) {
 8003016:	8afa      	ldrh	r2, [r7, #22]
 8003018:	8b7b      	ldrh	r3, [r7, #26]
 800301a:	429a      	cmp	r2, r3
 800301c:	d901      	bls.n	8003022 <play_generator+0xce>
		counter_high = samples_high;
 800301e:	8b7b      	ldrh	r3, [r7, #26]
 8003020:	82fb      	strh	r3, [r7, #22]
	}
	if (counter_low > samples_low) {
 8003022:	8aba      	ldrh	r2, [r7, #20]
 8003024:	8b3b      	ldrh	r3, [r7, #24]
 8003026:	429a      	cmp	r2, r3
 8003028:	d901      	bls.n	800302e <play_generator+0xda>
		counter_low = samples_low;
 800302a:	8b3b      	ldrh	r3, [r7, #24]
 800302c:	82bb      	strh	r3, [r7, #20]
	}

	for (i = start; i < start + len; i++) {
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e028      	b.n	8003086 <play_generator+0x132>
		if (counter_high > 0) {
 8003034:	8afb      	ldrh	r3, [r7, #22]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <play_generator+0xfc>
			gen->audiobuffer[i] = (int16_t) vol;
 800303a:	7c7b      	ldrb	r3, [r7, #17]
 800303c:	b219      	sxth	r1, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	323c      	adds	r2, #60	; 0x3c
 8003044:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			counter_high--;
 8003048:	8afb      	ldrh	r3, [r7, #22]
 800304a:	3b01      	subs	r3, #1
 800304c:	82fb      	strh	r3, [r7, #22]
 800304e:	e017      	b.n	8003080 <play_generator+0x12c>
		} else {
			if (counter_low > 0) {
 8003050:	8abb      	ldrh	r3, [r7, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <play_generator+0x11e>
				gen->audiobuffer[i] = -(int16_t) vol;
 8003056:	7c7b      	ldrb	r3, [r7, #17]
 8003058:	b29b      	uxth	r3, r3
 800305a:	425b      	negs	r3, r3
 800305c:	b29b      	uxth	r3, r3
 800305e:	b219      	sxth	r1, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	323c      	adds	r2, #60	; 0x3c
 8003066:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				counter_low--;
 800306a:	8abb      	ldrh	r3, [r7, #20]
 800306c:	3b01      	subs	r3, #1
 800306e:	82bb      	strh	r3, [r7, #20]
 8003070:	e006      	b.n	8003080 <play_generator+0x12c>
			} else {
				counter_high = samples_high;
 8003072:	8b7b      	ldrh	r3, [r7, #26]
 8003074:	82fb      	strh	r3, [r7, #22]
				counter_low = samples_low;
 8003076:	8b3b      	ldrh	r3, [r7, #24]
 8003078:	82bb      	strh	r3, [r7, #20]
				i--;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3b01      	subs	r3, #1
 800307e:	61fb      	str	r3, [r7, #28]
	for (i = start; i < start + len; i++) {
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3301      	adds	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	429a      	cmp	r2, r3
 8003090:	dbd0      	blt.n	8003034 <play_generator+0xe0>
			}
		}
	}
	gen->samples_high = counter_high;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003098:	461a      	mov	r2, r3
 800309a:	8afb      	ldrh	r3, [r7, #22]
 800309c:	f8a2 3338 	strh.w	r3, [r2, #824]	; 0x338
	gen->samples_low = counter_low;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a6:	461a      	mov	r2, r3
 80030a8:	8abb      	ldrh	r3, [r7, #20]
 80030aa:	f8a2 333a 	strh.w	r3, [r2, #826]	; 0x33a
}
 80030ae:	3724      	adds	r7, #36	; 0x24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <move_generator>:

void move_generator(Generator *gen) {
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	int i, n = AUDIO_PROGRAMMABLE_LENGTH;
 80030c0:	2328      	movs	r3, #40	; 0x28
 80030c2:	613b      	str	r3, [r7, #16]
	uint8_t *a = gen->gen_freq;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	60fb      	str	r3, [r7, #12]
	uint8_t temp = a[0];
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e00b      	b.n	80030ec <move_generator+0x34>
		a[i] = a[i + 1];
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	3301      	adds	r3, #1
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	441a      	add	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	68f9      	ldr	r1, [r7, #12]
 80030e0:	440b      	add	r3, r1
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	3301      	adds	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	dbee      	blt.n	80030d4 <move_generator+0x1c>
	}
	a[n - 1] = temp;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	7afa      	ldrb	r2, [r7, #11]
 8003100:	701a      	strb	r2, [r3, #0]
	a = gen->gen_vol;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3328      	adds	r3, #40	; 0x28
 8003106:	60fb      	str	r3, [r7, #12]
	temp = a[0];
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	e00b      	b.n	800312c <move_generator+0x74>
		a[i] = a[i + 1];
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3301      	adds	r3, #1
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	441a      	add	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	440b      	add	r3, r1
 8003122:	7812      	ldrb	r2, [r2, #0]
 8003124:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3301      	adds	r3, #1
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	3b01      	subs	r3, #1
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	429a      	cmp	r2, r3
 8003134:	dbee      	blt.n	8003114 <move_generator+0x5c>
	}
	a[n - 1] = temp;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	3b01      	subs	r3, #1
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	7afa      	ldrb	r2, [r7, #11]
 8003140:	701a      	strb	r2, [r3, #0]
	a = gen->gen_duty;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3350      	adds	r3, #80	; 0x50
 8003146:	60fb      	str	r3, [r7, #12]
	temp = a[0];
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	e00b      	b.n	800316c <move_generator+0xb4>
		a[i] = a[i + 1];
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3301      	adds	r3, #1
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	441a      	add	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	68f9      	ldr	r1, [r7, #12]
 8003160:	440b      	add	r3, r1
 8003162:	7812      	ldrb	r2, [r2, #0]
 8003164:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3301      	adds	r3, #1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	3b01      	subs	r3, #1
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	429a      	cmp	r2, r3
 8003174:	dbee      	blt.n	8003154 <move_generator+0x9c>
	}
	a[n - 1] = temp;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	3b01      	subs	r3, #1
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4413      	add	r3, r2
 800317e:	7afa      	ldrb	r2, [r7, #11]
 8003180:	701a      	strb	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <play_noise>:

void play_noise(Noise *noise, int start, int len) {
 800318e:	b480      	push	{r7}
 8003190:	b08b      	sub	sp, #44	; 0x2c
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
	int i;
	uint16_t freq = 4 * (uint16_t) (*noise).noise_freq[0];
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	837b      	strh	r3, [r7, #26]
	if (freq == 0) {
 80031a4:	8b7b      	ldrh	r3, [r7, #26]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d112      	bne.n	80031d0 <play_noise+0x42>
		for (i = start; i < start + len; i++) {
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
 80031ae:	e008      	b.n	80031c2 <play_noise+0x34>
			noise->audiobuffer[i] = 0;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	3228      	adds	r2, #40	; 0x28
 80031b6:	2100      	movs	r1, #0
 80031b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = start; i < start + len; i++) {
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	3301      	adds	r3, #1
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ca:	429a      	cmp	r2, r3
 80031cc:	dbf0      	blt.n	80031b0 <play_noise+0x22>
		}
		return;
 80031ce:	e06b      	b.n	80032a8 <play_noise+0x11a>
	}
	uint8_t vol = (*noise).noise_vol[0];
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031d6:	767b      	strb	r3, [r7, #25]
	uint16_t LFSR = (*noise).LFSR;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031de:	f8b3 3310 	ldrh.w	r3, [r3, #784]	; 0x310
 80031e2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t last = (*noise).last;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ea:	f8b3 3312 	ldrh.w	r3, [r3, #786]	; 0x312
 80031ee:	843b      	strh	r3, [r7, #32]
	int out = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
	if (last > freq) {
 80031f4:	8c3a      	ldrh	r2, [r7, #32]
 80031f6:	8b7b      	ldrh	r3, [r7, #26]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d901      	bls.n	8003200 <play_noise+0x72>
		last = freq;
 80031fc:	8b7b      	ldrh	r3, [r7, #26]
 80031fe:	843b      	strh	r3, [r7, #32]
	}
	for (i = start; i < start + len; i++) {
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
 8003204:	e03c      	b.n	8003280 <play_noise+0xf2>
		if (last > 0) {
 8003206:	8c3b      	ldrh	r3, [r7, #32]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d013      	beq.n	8003234 <play_noise+0xa6>
			noise->audiobuffer[i] =
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d105      	bne.n	800321e <play_noise+0x90>
 8003212:	7e7b      	ldrb	r3, [r7, #25]
 8003214:	b29b      	uxth	r3, r3
 8003216:	425b      	negs	r3, r3
 8003218:	b29b      	uxth	r3, r3
 800321a:	b21b      	sxth	r3, r3
 800321c:	e001      	b.n	8003222 <play_noise+0x94>
 800321e:	7e7b      	ldrb	r3, [r7, #25]
 8003220:	b21b      	sxth	r3, r3
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003226:	3128      	adds	r1, #40	; 0x28
 8003228:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
					(out == 1) ? -1 * (int16_t) vol : (int16_t) vol;
			last--;
 800322c:	8c3b      	ldrh	r3, [r7, #32]
 800322e:	3b01      	subs	r3, #1
 8003230:	843b      	strh	r3, [r7, #32]
 8003232:	e022      	b.n	800327a <play_noise+0xec>
		} else {
			last = freq;
 8003234:	8b7b      	ldrh	r3, [r7, #26]
 8003236:	843b      	strh	r3, [r7, #32]
			i--;
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	3b01      	subs	r3, #1
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
			uint16_t xor_result = (LFSR & 0b01) ^ ((LFSR & 0b10) >> 1);
 800323e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003240:	105b      	asrs	r3, r3, #1
 8003242:	b21a      	sxth	r2, r3
 8003244:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003248:	4053      	eors	r3, r2
 800324a:	b21b      	sxth	r3, r3
 800324c:	b29b      	uxth	r3, r3
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	82fb      	strh	r3, [r7, #22]
			LFSR = (LFSR >> 1) | (xor_result << 14);
 8003254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	b29b      	uxth	r3, r3
 800325a:	b21a      	sxth	r2, r3
 800325c:	8afb      	ldrh	r3, [r7, #22]
 800325e:	039b      	lsls	r3, r3, #14
 8003260:	b21b      	sxth	r3, r3
 8003262:	4313      	orrs	r3, r2
 8003264:	b21b      	sxth	r3, r3
 8003266:	847b      	strh	r3, [r7, #34]	; 0x22
			out = ~LFSR & 0x01;
 8003268:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	61fb      	str	r3, [r7, #28]
	for (i = start; i < start + len; i++) {
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	3301      	adds	r3, #1
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	429a      	cmp	r2, r3
 800328a:	dbbc      	blt.n	8003206 <play_noise+0x78>
		}
	}
	noise->LFSR = LFSR;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003292:	461a      	mov	r2, r3
 8003294:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003296:	f8a2 3310 	strh.w	r3, [r2, #784]	; 0x310
	noise->last = last;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a0:	461a      	mov	r2, r3
 80032a2:	8c3b      	ldrh	r3, [r7, #32]
 80032a4:	f8a2 3312 	strh.w	r3, [r2, #786]	; 0x312
}
 80032a8:	372c      	adds	r7, #44	; 0x2c
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <move_noise>:

void move_noise(Noise *noise) {
 80032b2:	b480      	push	{r7}
 80032b4:	b087      	sub	sp, #28
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
	int i, n = AUDIO_PROGRAMMABLE_LENGTH;
 80032ba:	2328      	movs	r3, #40	; 0x28
 80032bc:	613b      	str	r3, [r7, #16]
	uint8_t *a = noise->noise_freq;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
	uint8_t temp = a[0];
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	e00b      	b.n	80032e6 <move_noise+0x34>
		a[i] = a[i + 1];
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	3301      	adds	r3, #1
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	441a      	add	r2, r3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	68f9      	ldr	r1, [r7, #12]
 80032da:	440b      	add	r3, r1
 80032dc:	7812      	ldrb	r2, [r2, #0]
 80032de:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3301      	adds	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	dbee      	blt.n	80032ce <move_noise+0x1c>
	}
	a[n - 1] = temp;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	7afa      	ldrb	r2, [r7, #11]
 80032fa:	701a      	strb	r2, [r3, #0]
	a = noise->noise_vol;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3328      	adds	r3, #40	; 0x28
 8003300:	60fb      	str	r3, [r7, #12]
	temp = a[0];
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	e00b      	b.n	8003326 <move_noise+0x74>
		a[i] = a[i + 1];
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	3301      	adds	r3, #1
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	441a      	add	r2, r3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	68f9      	ldr	r1, [r7, #12]
 800331a:	440b      	add	r3, r1
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3301      	adds	r3, #1
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	3b01      	subs	r3, #1
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	429a      	cmp	r2, r3
 800332e:	dbee      	blt.n	800330e <move_noise+0x5c>
	}
	a[n - 1] = temp;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	3b01      	subs	r3, #1
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	7afa      	ldrb	r2, [r7, #11]
 800333a:	701a      	strb	r2, [r3, #0]
}
 800333c:	bf00      	nop
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_ADC_ConvCpltCallback>:
		int percent;
		bq24072_state_t state;
	} last;
} bq24072_data;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	bq24072_data.value = HAL_ADC_GetValue(hadc);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f004 fbaf 	bl	8007ab4 <HAL_ADC_GetValue>
 8003356:	4603      	mov	r3, r0
 8003358:	b29a      	uxth	r2, r3
 800335a:	4b04      	ldr	r3, [pc, #16]	; (800336c <HAL_ADC_ConvCpltCallback+0x24>)
 800335c:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop_IT(hadc);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f004 fb6c 	bl	8007a3c <HAL_ADC_Stop_IT>
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000224 	.word	0x20000224

08003370 <bq24072_init>:

int32_t bq24072_init(void) {
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
	// Read initial states
	bq24072_handle_power_good();
 8003374:	f000 f80c 	bl	8003390 <bq24072_handle_power_good>
	bq24072_handle_charging();
 8003378:	f000 f822 	bl	80033c0 <bq24072_handle_charging>
	bq24072_poll();
 800337c:	f000 f838 	bl	80033f0 <bq24072_poll>

	// Start timer for voltage poll
	HAL_TIM_Base_Start_IT(&htim1);
 8003380:	4802      	ldr	r0, [pc, #8]	; (800338c <bq24072_init+0x1c>)
 8003382:	f010 fb45 	bl	8013a10 <HAL_TIM_Base_Start_IT>

	return 0;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000628 	.word	0x20000628

08003390 <bq24072_handle_power_good>:

void bq24072_handle_power_good(void) {
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
	bq24072_data.power_good = !(HAL_GPIO_ReadPin(
			bq_pins[BQ24072_PIN_PGOOD].bank, bq_pins[BQ24072_PIN_PGOOD].pin)
 8003394:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <bq24072_handle_power_good+0x28>)
 8003396:	2304      	movs	r3, #4
	bq24072_data.power_good = !(HAL_GPIO_ReadPin(
 8003398:	b29b      	uxth	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f009 f803 	bl	800c3a8 <HAL_GPIO_ReadPin>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4b03      	ldr	r3, [pc, #12]	; (80033bc <bq24072_handle_power_good+0x2c>)
 80033b0:	70da      	strb	r2, [r3, #3]
			== GPIO_PIN_SET);
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	58020000 	.word	0x58020000
 80033bc:	20000224 	.word	0x20000224

080033c0 <bq24072_handle_charging>:

void bq24072_handle_charging(void) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
	bq24072_data.charging = !(HAL_GPIO_ReadPin(bq_pins[BQ24072_PIN_CHG].bank,
 80033c4:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <bq24072_handle_charging+0x28>)
			bq_pins[BQ24072_PIN_CHG].pin) == GPIO_PIN_SET);
 80033c6:	2380      	movs	r3, #128	; 0x80
	bq24072_data.charging = !(HAL_GPIO_ReadPin(bq_pins[BQ24072_PIN_CHG].bank,
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f008 ffeb 	bl	800c3a8 <HAL_GPIO_ReadPin>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b03      	ldr	r3, [pc, #12]	; (80033ec <bq24072_handle_charging+0x2c>)
 80033e0:	709a      	strb	r2, [r3, #2]
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	58021000 	.word	0x58021000
 80033ec:	20000224 	.word	0x20000224

080033f0 <bq24072_poll>:
	}

	return percent;
}

void bq24072_poll(void) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <bq24072_poll+0x10>)
 80033f6:	f004 f9f3 	bl	80077e0 <HAL_ADC_Start_IT>
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000270 	.word	0x20000270

08003404 <buttons_get>:
#include "stm32h7xx_hal.h"
#include "main.h"

#include <stdbool.h>

uint32_t buttons_get() {
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
    bool left = HAL_GPIO_ReadPin(BTN_Left_GPIO_Port, BTN_Left_Pin) == GPIO_PIN_RESET;
 800340a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800340e:	4843      	ldr	r0, [pc, #268]	; (800351c <buttons_get+0x118>)
 8003410:	f008 ffca 	bl	800c3a8 <HAL_GPIO_ReadPin>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	bf0c      	ite	eq
 800341a:	2301      	moveq	r3, #1
 800341c:	2300      	movne	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
    bool right = HAL_GPIO_ReadPin(BTN_Right_GPIO_Port, BTN_Right_Pin) == GPIO_PIN_RESET;
 8003420:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003424:	483d      	ldr	r0, [pc, #244]	; (800351c <buttons_get+0x118>)
 8003426:	f008 ffbf 	bl	800c3a8 <HAL_GPIO_ReadPin>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	73bb      	strb	r3, [r7, #14]
    bool up = HAL_GPIO_ReadPin(BTN_Up_GPIO_Port, BTN_Up_Pin) == GPIO_PIN_RESET ;
 8003436:	2101      	movs	r1, #1
 8003438:	4838      	ldr	r0, [pc, #224]	; (800351c <buttons_get+0x118>)
 800343a:	f008 ffb5 	bl	800c3a8 <HAL_GPIO_ReadPin>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	737b      	strb	r3, [r7, #13]
    bool down = HAL_GPIO_ReadPin(BTN_Down_GPIO_Port, BTN_Down_Pin) == GPIO_PIN_RESET;
 800344a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800344e:	4833      	ldr	r0, [pc, #204]	; (800351c <buttons_get+0x118>)
 8003450:	f008 ffaa 	bl	800c3a8 <HAL_GPIO_ReadPin>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	733b      	strb	r3, [r7, #12]
    bool a = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin) == GPIO_PIN_RESET;
 8003460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003464:	482d      	ldr	r0, [pc, #180]	; (800351c <buttons_get+0x118>)
 8003466:	f008 ff9f 	bl	800c3a8 <HAL_GPIO_ReadPin>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	72fb      	strb	r3, [r7, #11]
    bool b = HAL_GPIO_ReadPin(BTN_B_GPIO_Port, BTN_B_Pin) == GPIO_PIN_RESET;
 8003476:	2120      	movs	r1, #32
 8003478:	4828      	ldr	r0, [pc, #160]	; (800351c <buttons_get+0x118>)
 800347a:	f008 ff95 	bl	800c3a8 <HAL_GPIO_ReadPin>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	72bb      	strb	r3, [r7, #10]
    bool time = HAL_GPIO_ReadPin(BTN_TIME_GPIO_Port, BTN_TIME_Pin) == GPIO_PIN_RESET;
 800348a:	2120      	movs	r1, #32
 800348c:	4824      	ldr	r0, [pc, #144]	; (8003520 <buttons_get+0x11c>)
 800348e:	f008 ff8b 	bl	800c3a8 <HAL_GPIO_ReadPin>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	727b      	strb	r3, [r7, #9]
    bool game = HAL_GPIO_ReadPin(BTN_GAME_GPIO_Port, BTN_GAME_Pin) == GPIO_PIN_RESET;
 800349e:	2102      	movs	r1, #2
 80034a0:	481f      	ldr	r0, [pc, #124]	; (8003520 <buttons_get+0x11c>)
 80034a2:	f008 ff81 	bl	800c3a8 <HAL_GPIO_ReadPin>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	723b      	strb	r3, [r7, #8]
    bool pause = HAL_GPIO_ReadPin(BTN_PAUSE_GPIO_Port, BTN_PAUSE_Pin) == GPIO_PIN_RESET;
 80034b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034b6:	481a      	ldr	r0, [pc, #104]	; (8003520 <buttons_get+0x11c>)
 80034b8:	f008 ff76 	bl	800c3a8 <HAL_GPIO_ReadPin>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf0c      	ite	eq
 80034c2:	2301      	moveq	r3, #1
 80034c4:	2300      	movne	r3, #0
 80034c6:	71fb      	strb	r3, [r7, #7]
    bool power = HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == GPIO_PIN_RESET;
 80034c8:	2101      	movs	r1, #1
 80034ca:	4816      	ldr	r0, [pc, #88]	; (8003524 <buttons_get+0x120>)
 80034cc:	f008 ff6c 	bl	800c3a8 <HAL_GPIO_ReadPin>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf0c      	ite	eq
 80034d6:	2301      	moveq	r3, #1
 80034d8:	2300      	movne	r3, #0
 80034da:	71bb      	strb	r3, [r7, #6]

    //bool start = HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET;
    //bool select = HAL_GPIO_ReadPin(BTN_SELECT_GPIO_Port, BTN_SELECT_Pin) == GPIO_PIN_RESET;

    return (
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) |
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	7b7b      	ldrb	r3, [r7, #13]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	431a      	orrs	r2, r3
 80034e4:	7bbb      	ldrb	r3, [r7, #14]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	431a      	orrs	r2, r3
 80034ea:	7b3b      	ldrb	r3, [r7, #12]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	431a      	orrs	r2, r3
 80034f0:	7afb      	ldrb	r3, [r7, #11]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	431a      	orrs	r2, r3
 80034f6:	7abb      	ldrb	r3, [r7, #10]
 80034f8:	015b      	lsls	r3, r3, #5
 80034fa:	431a      	orrs	r2, r3
        (time << 6) | (game << 7) | (pause << 8) | (power << 9)// | (start << 10) | (select << 11)
 80034fc:	7a7b      	ldrb	r3, [r7, #9]
 80034fe:	019b      	lsls	r3, r3, #6
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) |
 8003500:	431a      	orrs	r2, r3
        (time << 6) | (game << 7) | (pause << 8) | (power << 9)// | (start << 10) | (select << 11)
 8003502:	7a3b      	ldrb	r3, [r7, #8]
 8003504:	01db      	lsls	r3, r3, #7
 8003506:	431a      	orrs	r2, r3
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	431a      	orrs	r2, r3
 800350e:	79bb      	ldrb	r3, [r7, #6]
 8003510:	025b      	lsls	r3, r3, #9
 8003512:	4313      	orrs	r3, r2
    );


}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	58020c00 	.word	0x58020c00
 8003520:	58020800 	.word	0x58020800
 8003524:	58020000 	.word	0x58020000

08003528 <set_ospi_cmd>:
static void set_ospi_cmd(OSPI_RegularCmdTypeDef *ospi_cmd,
                         const flash_cmd_t *cmd,
                         uint32_t address,
                         uint8_t *data,
                         size_t len)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
    memset(ospi_cmd, 0x0, sizeof(*ospi_cmd));
 8003536:	2250      	movs	r2, #80	; 0x50
 8003538:	2100      	movs	r1, #0
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f011 fabe 	bl	8014abc <memset>

    ospi_cmd->OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
    ospi_cmd->FlashId = 0;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	605a      	str	r2, [r3, #4]
    ospi_cmd->Instruction = cmd->cmd;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	609a      	str	r2, [r3, #8]
    ospi_cmd->InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]
    ospi_cmd->InstructionMode = instruction_line_map[cmd->instr_lines];
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	785b      	ldrb	r3, [r3, #1]
 8003560:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	4b20      	ldr	r3, [pc, #128]	; (80035ec <set_ospi_cmd+0xc4>)
 800356a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	60da      	str	r2, [r3, #12]

    ospi_cmd->AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c
    ospi_cmd->DummyCycles = cmd->dummy;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	789b      	ldrb	r3, [r3, #2]
 800357c:	461a      	mov	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	645a      	str	r2, [r3, #68]	; 0x44
    ospi_cmd->DQSMode = HAL_OSPI_DQS_DISABLE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	649a      	str	r2, [r3, #72]	; 0x48
    ospi_cmd->SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	64da      	str	r2, [r3, #76]	; 0x4c
    ospi_cmd->InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	615a      	str	r2, [r3, #20]

    ospi_cmd->Address = address;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	619a      	str	r2, [r3, #24]
    ospi_cmd->AddressSize = address_size_map[cmd->addr_size];
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	785b      	ldrb	r3, [r3, #1]
 800359e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <set_ospi_cmd+0xc8>)
 80035a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	621a      	str	r2, [r3, #32]
    ospi_cmd->AddressMode = address_line_map[cmd->addr_lines];
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	785b      	ldrb	r3, [r3, #1]
 80035b4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <set_ospi_cmd+0xcc>)
 80035be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	61da      	str	r2, [r3, #28]

    ospi_cmd->NbData = len;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	63da      	str	r2, [r3, #60]	; 0x3c
    ospi_cmd->DataMode = data_line_map[cmd->data_lines];
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	785b      	ldrb	r3, [r3, #1]
 80035d0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <set_ospi_cmd+0xd0>)
 80035da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	08019948 	.word	0x08019948
 80035f0:	08019960 	.word	0x08019960
 80035f4:	08019954 	.word	0x08019954
 80035f8:	08019970 	.word	0x08019970

080035fc <OSPI_ReadBytes>:

static void OSPI_ReadBytes(const flash_cmd_t *cmd,
                           uint32_t address,
                           uint8_t *data,
                           size_t len)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b09c      	sub	sp, #112	; 0x70
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
    OSPI_RegularCmdTypeDef ospi_cmd;

    // DBG("RB %d 0x%08x 0x%08X %d\n", cmd->cmd, address, data, len);

    assert(flash.mem_mapped_enabled == false);
 800360a:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <OSPI_ReadBytes+0x84>)
 800360c:	7c1b      	ldrb	r3, [r3, #16]
 800360e:	f083 0301 	eor.w	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <OSPI_ReadBytes+0x2a>
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <OSPI_ReadBytes+0x88>)
 800361a:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <OSPI_ReadBytes+0x8c>)
 800361c:	f240 11a3 	movw	r1, #419	; 0x1a3
 8003620:	481a      	ldr	r0, [pc, #104]	; (800368c <OSPI_ReadBytes+0x90>)
 8003622:	f010 fe9b 	bl	801435c <__assert_func>

    set_ospi_cmd(&ospi_cmd,
 8003626:	f107 0014 	add.w	r0, r7, #20
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	68f9      	ldr	r1, [r7, #12]
 8003634:	f7ff ff78 	bl	8003528 <set_ospi_cmd>
                 len);

    //wdog_refresh();

    HAL_StatusTypeDef res;
    res = HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <OSPI_ReadBytes+0x84>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f107 0114 	add.w	r1, r7, #20
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4618      	mov	r0, r3
 8003646:	f009 fcf1 	bl	800d02c <HAL_OSPI_Command>
 800364a:	4603      	mov	r3, r0
 800364c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (res != HAL_OK) {
 8003650:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <OSPI_ReadBytes+0x60>
        Error_Handler();
 8003658:	f002 fc06 	bl	8005e68 <Error_Handler>
    }

    if (HAL_OSPI_Receive(flash.hospi, data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <OSPI_ReadBytes+0x84>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f241 3288 	movw	r2, #5000	; 0x1388
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4618      	mov	r0, r3
 8003668:	f009 fde0 	bl	800d22c <HAL_OSPI_Receive>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <OSPI_ReadBytes+0x7a>
        Error_Handler();
 8003672:	f002 fbf9 	bl	8005e68 <Error_Handler>
    }
}
 8003676:	bf00      	nop
 8003678:	3768      	adds	r7, #104	; 0x68
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000088 	.word	0x20000088
 8003684:	08015958 	.word	0x08015958
 8003688:	08019ca8 	.word	0x08019ca8
 800368c:	0801597c 	.word	0x0801597c

08003690 <OSPI_WriteBytes>:

static void OSPI_WriteBytes(const flash_cmd_t *cmd,
                            uint32_t address,
                            const uint8_t *data,
                            size_t len)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b09a      	sub	sp, #104	; 0x68
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
    OSPI_RegularCmdTypeDef ospi_cmd;

    // DBG("WB %d 0x%08x 0x%08X %d\n", cmd->cmd, address, data, len);

    assert(flash.mem_mapped_enabled == false);
 800369e:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <OSPI_WriteBytes+0x80>)
 80036a0:	7c1b      	ldrb	r3, [r3, #16]
 80036a2:	f083 0301 	eor.w	r3, r3, #1
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d106      	bne.n	80036ba <OSPI_WriteBytes+0x2a>
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <OSPI_WriteBytes+0x84>)
 80036ae:	4a1a      	ldr	r2, [pc, #104]	; (8003718 <OSPI_WriteBytes+0x88>)
 80036b0:	f240 11c1 	movw	r1, #449	; 0x1c1
 80036b4:	4819      	ldr	r0, [pc, #100]	; (800371c <OSPI_WriteBytes+0x8c>)
 80036b6:	f010 fe51 	bl	801435c <__assert_func>

    set_ospi_cmd(&ospi_cmd,
 80036ba:	f107 0010 	add.w	r0, r7, #16
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	68f9      	ldr	r1, [r7, #12]
 80036c8:	f7ff ff2e 	bl	8003528 <set_ospi_cmd>
                 (uint8_t *) data,
                 len);

    //wdog_refresh();

    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <OSPI_WriteBytes+0x80>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f107 0110 	add.w	r1, r7, #16
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4618      	mov	r0, r3
 80036da:	f009 fca7 	bl	800d02c <HAL_OSPI_Command>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <OSPI_WriteBytes+0x58>
        Error_Handler();
 80036e4:	f002 fbc0 	bl	8005e68 <Error_Handler>
    }

    if (len > 0) {
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <OSPI_WriteBytes+0x78>
        if (HAL_OSPI_Transmit(flash.hospi, (uint8_t *) data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <OSPI_WriteBytes+0x80>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f009 fd24 	bl	800d146 <HAL_OSPI_Transmit>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <OSPI_WriteBytes+0x78>
            Error_Handler();
 8003704:	f002 fbb0 	bl	8005e68 <Error_Handler>
        }
    }
}
 8003708:	bf00      	nop
 800370a:	3760      	adds	r7, #96	; 0x60
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000088 	.word	0x20000088
 8003714:	08015958 	.word	0x08015958
 8003718:	08019cb8 	.word	0x08019cb8
 800371c:	0801597c 	.word	0x0801597c

08003720 <wait_for_status>:

static void wait_for_status(uint8_t mask, uint8_t value, uint32_t timeout)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	603a      	str	r2, [r7, #0]
 800372a:	71fb      	strb	r3, [r7, #7]
 800372c:	460b      	mov	r3, r1
 800372e:	71bb      	strb	r3, [r7, #6]
    uint8_t status;

    uint32_t t0 = HAL_GetTick();
 8003730:	f003 faf4 	bl	8006d1c <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    do {
        OSPI_ReadBytes(CMD(RDSR), 0, &status, 1);
 8003736:	4b14      	ldr	r3, [pc, #80]	; (8003788 <wait_for_status+0x68>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	1cd8      	adds	r0, r3, #3
 800373e:	f107 020b 	add.w	r2, r7, #11
 8003742:	2301      	movs	r3, #1
 8003744:	2100      	movs	r1, #0
 8003746:	f7ff ff59 	bl	80035fc <OSPI_ReadBytes>

#if 0
        printf("Status: %02X\n", status);
        HAL_Delay(500);
#endif
        if ((timeout > 0) && (HAL_GetTick() > t0 + timeout)) {
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00e      	beq.n	800376e <wait_for_status+0x4e>
 8003750:	f003 fae4 	bl	8006d1c <HAL_GetTick>
 8003754:	4601      	mov	r1, r0
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4413      	add	r3, r2
 800375c:	4299      	cmp	r1, r3
 800375e:	d906      	bls.n	800376e <wait_for_status+0x4e>
            assert(!"Status poll timeout!");
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <wait_for_status+0x6c>)
 8003762:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <wait_for_status+0x70>)
 8003764:	f240 11e5 	movw	r1, #485	; 0x1e5
 8003768:	480a      	ldr	r0, [pc, #40]	; (8003794 <wait_for_status+0x74>)
 800376a:	f010 fdf7 	bl	801435c <__assert_func>
            break;
        }
    } while ((status & mask) != value);
 800376e:	7afa      	ldrb	r2, [r7, #11]
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	4013      	ands	r3, r2
 8003774:	b2db      	uxtb	r3, r3
 8003776:	79ba      	ldrb	r2, [r7, #6]
 8003778:	429a      	cmp	r2, r3
 800377a:	d1dc      	bne.n	8003736 <wait_for_status+0x16>
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000088 	.word	0x20000088
 800378c:	080159a0 	.word	0x080159a0
 8003790:	08019cc8 	.word	0x08019cc8
 8003794:	0801597c 	.word	0x0801597c

08003798 <OSPI_EnableMemoryMappedMode>:

void OSPI_EnableMemoryMappedMode(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b09a      	sub	sp, #104	; 0x68
 800379c:	af02      	add	r7, sp, #8
    OSPI_MemoryMappedTypeDef sMemMappedCfg;
    OSPI_RegularCmdTypeDef ospi_cmd;
    const flash_cmd_t *cmd = CMD(READ);
 800379e:	4b28      	ldr	r3, [pc, #160]	; (8003840 <OSPI_EnableMemoryMappedMode+0xa8>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	332a      	adds	r3, #42	; 0x2a
 80037a6:	65fb      	str	r3, [r7, #92]	; 0x5c

    assert(flash.mem_mapped_enabled == false);
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <OSPI_EnableMemoryMappedMode+0xa8>)
 80037aa:	7c1b      	ldrb	r3, [r3, #16]
 80037ac:	f083 0301 	eor.w	r3, r3, #1
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <OSPI_EnableMemoryMappedMode+0x2c>
 80037b6:	4b23      	ldr	r3, [pc, #140]	; (8003844 <OSPI_EnableMemoryMappedMode+0xac>)
 80037b8:	4a23      	ldr	r2, [pc, #140]	; (8003848 <OSPI_EnableMemoryMappedMode+0xb0>)
 80037ba:	f240 11f1 	movw	r1, #497	; 0x1f1
 80037be:	4823      	ldr	r0, [pc, #140]	; (800384c <OSPI_EnableMemoryMappedMode+0xb4>)
 80037c0:	f010 fdcc 	bl	801435c <__assert_func>

    set_ospi_cmd(&ospi_cmd, cmd, 0, NULL, 0);
 80037c4:	1d38      	adds	r0, r7, #4
 80037c6:	2300      	movs	r3, #0
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	2300      	movs	r3, #0
 80037cc:	2200      	movs	r2, #0
 80037ce:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80037d0:	f7ff feaa 	bl	8003528 <set_ospi_cmd>

    // Memory-mapped mode configuration for linear burst read operations
    ospi_cmd.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 80037d4:	2301      	movs	r3, #1
 80037d6:	607b      	str	r3, [r7, #4]
    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <OSPI_EnableMemoryMappedMode+0xa8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	1d39      	adds	r1, r7, #4
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4618      	mov	r0, r3
 80037e4:	f009 fc22 	bl	800d02c <HAL_OSPI_Command>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <OSPI_EnableMemoryMappedMode+0x5a>
        Error_Handler();
 80037ee:	f002 fb3b 	bl	8005e68 <Error_Handler>
    }

    // Use read instruction for write (in order to not alter the flash by accident)
    ospi_cmd.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80037f2:	2302      	movs	r3, #2
 80037f4:	607b      	str	r3, [r7, #4]
    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <OSPI_EnableMemoryMappedMode+0xa8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	1d39      	adds	r1, r7, #4
 80037fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003800:	4618      	mov	r0, r3
 8003802:	f009 fc13 	bl	800d02c <HAL_OSPI_Command>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <OSPI_EnableMemoryMappedMode+0x78>
        Error_Handler();
 800380c:	f002 fb2c 	bl	8005e68 <Error_Handler>
    }

    // Disable timeout counter for memory mapped mode
    sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8003810:	2300      	movs	r3, #0
 8003812:	657b      	str	r3, [r7, #84]	; 0x54
    sMemMappedCfg.TimeOutPeriod = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	65bb      	str	r3, [r7, #88]	; 0x58

    // Enable memory mapped mode
    if (HAL_OSPI_MemoryMapped(flash.hospi, &sMemMappedCfg) != HAL_OK) {
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <OSPI_EnableMemoryMappedMode+0xa8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f009 fda6 	bl	800d374 <HAL_OSPI_MemoryMapped>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <OSPI_EnableMemoryMappedMode+0x9a>
        Error_Handler();
 800382e:	f002 fb1b 	bl	8005e68 <Error_Handler>
    }

    flash.mem_mapped_enabled = true;
 8003832:	4b03      	ldr	r3, [pc, #12]	; (8003840 <OSPI_EnableMemoryMappedMode+0xa8>)
 8003834:	2201      	movs	r2, #1
 8003836:	741a      	strb	r2, [r3, #16]
}
 8003838:	bf00      	nop
 800383a:	3760      	adds	r7, #96	; 0x60
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000088 	.word	0x20000088
 8003844:	08015958 	.word	0x08015958
 8003848:	08019cd8 	.word	0x08019cd8
 800384c:	0801597c 	.word	0x0801597c

08003850 <OSPI_NOR_WriteEnable>:
    // Wait for Write In Progress Bit to become zero
    wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
}

void OSPI_NOR_WriteEnable(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
    OSPI_WriteBytes(CMD(WREN), 0, NULL, 0);
 8003854:	4b08      	ldr	r3, [pc, #32]	; (8003878 <OSPI_NOR_WriteEnable+0x28>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f103 000c 	add.w	r0, r3, #12
 800385e:	2300      	movs	r3, #0
 8003860:	2200      	movs	r2, #0
 8003862:	2100      	movs	r1, #0
 8003864:	f7ff ff14 	bl	8003690 <OSPI_WriteBytes>

    // Wait for Write Enable Latch to be set
    wait_for_status(STATUS_WEL_Msk, STATUS_WEL_Msk, TMO_DEFAULT);
 8003868:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800386c:	2102      	movs	r1, #2
 800386e:	2002      	movs	r0, #2
 8003870:	f7ff ff56 	bl	8003720 <wait_for_status>
}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20000088 	.word	0x20000088

0800387c <init_mx_issi>:
{
    OSPI_ReadBytes(CMD(RDCR), 0, dest, 1);
}

static void init_mx_issi(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
    // Shared code for both MX and ISSI

    uint8_t rd_status;

    DBG("%s\n", __FUNCTION__);
 8003882:	481e      	ldr	r0, [pc, #120]	; (80038fc <init_mx_issi+0x80>)
 8003884:	f011 f81a 	bl	80148bc <puts>

    OSPI_ReadBytes(CMD(RDSR), 0, &rd_status, 1);
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <init_mx_issi+0x84>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1cd8      	adds	r0, r3, #3
 8003890:	1dfa      	adds	r2, r7, #7
 8003892:	2301      	movs	r3, #1
 8003894:	2100      	movs	r1, #0
 8003896:	f7ff feb1 	bl	80035fc <OSPI_ReadBytes>

    if (flash.config->set_quad && ((rd_status & STATUS_QE_Msk) == 0)) {
 800389a:	4b19      	ldr	r3, [pc, #100]	; (8003900 <init_mx_issi+0x84>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	7d1b      	ldrb	r3, [r3, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d027      	beq.n	80038f4 <init_mx_issi+0x78>
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d122      	bne.n	80038f4 <init_mx_issi+0x78>
        // WRSR - Write Status Register
        // Set Quad Enable bit (6) in status register. Other bits = 0.
        uint8_t wr_status = STATUS_QE_Msk;
 80038ae:	2340      	movs	r3, #64	; 0x40
 80038b0:	71bb      	strb	r3, [r7, #6]

        DBG("Setting QE bit.\n");
 80038b2:	4814      	ldr	r0, [pc, #80]	; (8003904 <init_mx_issi+0x88>)
 80038b4:	f011 f802 	bl	80148bc <puts>

        // Set the QE bit
        OSPI_NOR_WriteEnable();
 80038b8:	f7ff ffca 	bl	8003850 <OSPI_NOR_WriteEnable>
        OSPI_WriteBytes(CMD(WRSR), 0, &wr_status, 1);
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <init_mx_issi+0x84>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	1dba      	adds	r2, r7, #6
 80038c4:	2301      	movs	r3, #1
 80038c6:	2100      	movs	r1, #0
 80038c8:	f7ff fee2 	bl	8003690 <OSPI_WriteBytes>
        wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 80038cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038d0:	2100      	movs	r1, #0
 80038d2:	2001      	movs	r0, #1
 80038d4:	f7ff ff24 	bl	8003720 <wait_for_status>

        OSPI_ReadBytes(CMD(RDSR), 0, &rd_status, 1);
 80038d8:	4b09      	ldr	r3, [pc, #36]	; (8003900 <init_mx_issi+0x84>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	1cd8      	adds	r0, r3, #3
 80038e0:	1dfa      	adds	r2, r7, #7
 80038e2:	2301      	movs	r3, #1
 80038e4:	2100      	movs	r1, #0
 80038e6:	f7ff fe89 	bl	80035fc <OSPI_ReadBytes>
        DBG("QE bit set. Status: %02X\n", rd_status);
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	4619      	mov	r1, r3
 80038ee:	4806      	ldr	r0, [pc, #24]	; (8003908 <init_mx_issi+0x8c>)
 80038f0:	f010 ff7e 	bl	80147f0 <iprintf>
    }
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	08019cf4 	.word	0x08019cf4
 8003900:	20000088 	.word	0x20000088
 8003904:	08015aec 	.word	0x08015aec
 8003908:	08015afc 	.word	0x08015afc

0800390c <init_spansion>:

static void init_spansion(void)
{
 800390c:	b5b0      	push	{r4, r5, r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af04      	add	r7, sp, #16
    uint8_t rd_cr2;
    uint8_t rd_cr3;
    uint8_t rd_cr4;

    // SR[1-2]V
    OSPI_ReadBytes(CMD(RDSR), 0x00, &rd_sr1, 1);
 8003912:	4b44      	ldr	r3, [pc, #272]	; (8003a24 <init_spansion+0x118>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	1cd8      	adds	r0, r3, #3
 800391a:	1dfa      	adds	r2, r7, #7
 800391c:	2301      	movs	r3, #1
 800391e:	2100      	movs	r1, #0
 8003920:	f7ff fe6c 	bl	80035fc <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x00800001, &rd_sr2, 1);
 8003924:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <init_spansion+0x118>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f103 0009 	add.w	r0, r3, #9
 800392e:	1dba      	adds	r2, r7, #6
 8003930:	2301      	movs	r3, #1
 8003932:	493d      	ldr	r1, [pc, #244]	; (8003a28 <init_spansion+0x11c>)
 8003934:	f7ff fe62 	bl	80035fc <OSPI_ReadBytes>

    // CR[1-4]NV
    OSPI_ReadBytes(CMD(RDCR), 0x00, &rd_cr1, 1);
 8003938:	4b3a      	ldr	r3, [pc, #232]	; (8003a24 <init_spansion+0x118>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	1d98      	adds	r0, r3, #6
 8003940:	1d7a      	adds	r2, r7, #5
 8003942:	2301      	movs	r3, #1
 8003944:	2100      	movs	r1, #0
 8003946:	f7ff fe59 	bl	80035fc <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x03, &rd_cr2, 1);
 800394a:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <init_spansion+0x118>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f103 0009 	add.w	r0, r3, #9
 8003954:	1d3a      	adds	r2, r7, #4
 8003956:	2301      	movs	r3, #1
 8003958:	2103      	movs	r1, #3
 800395a:	f7ff fe4f 	bl	80035fc <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x04, &rd_cr3, 1);
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <init_spansion+0x118>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f103 0009 	add.w	r0, r3, #9
 8003968:	1cfa      	adds	r2, r7, #3
 800396a:	2301      	movs	r3, #1
 800396c:	2104      	movs	r1, #4
 800396e:	f7ff fe45 	bl	80035fc <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x05, &rd_cr4, 1);
 8003972:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <init_spansion+0x118>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f103 0009 	add.w	r0, r3, #9
 800397c:	1cba      	adds	r2, r7, #2
 800397e:	2301      	movs	r3, #1
 8003980:	2105      	movs	r1, #5
 8003982:	f7ff fe3b 	bl	80035fc <OSPI_ReadBytes>

    DBG("SR1: %02X SR2: %02X CR: %02X %02X %02X %02X\n", rd_sr1, rd_sr2, rd_cr1, rd_cr2, rd_cr3, rd_cr4);
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	4618      	mov	r0, r3
 800398a:	79bb      	ldrb	r3, [r7, #6]
 800398c:	461c      	mov	r4, r3
 800398e:	797b      	ldrb	r3, [r7, #5]
 8003990:	461d      	mov	r5, r3
 8003992:	793b      	ldrb	r3, [r7, #4]
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	78b9      	ldrb	r1, [r7, #2]
 8003998:	9102      	str	r1, [sp, #8]
 800399a:	9201      	str	r2, [sp, #4]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	462b      	mov	r3, r5
 80039a0:	4622      	mov	r2, r4
 80039a2:	4601      	mov	r1, r0
 80039a4:	4821      	ldr	r0, [pc, #132]	; (8003a2c <init_spansion+0x120>)
 80039a6:	f010 ff23 	bl	80147f0 <iprintf>

    if (flash.config->set_quad && ((rd_cr1 & S_CR_QUAD_Msk) == 0)) {
 80039aa:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <init_spansion+0x118>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	7d1b      	ldrb	r3, [r3, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d033      	beq.n	8003a1c <init_spansion+0x110>
 80039b4:	797b      	ldrb	r3, [r7, #5]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d12e      	bne.n	8003a1c <init_spansion+0x110>
        // WRSR/WRR writes to {status, config}
        // Clear SR1V and set bit 1 (QUAD) in CR1NV
        uint8_t wr_sr[] = {0x00, S_CR_QUAD_Msk};
 80039be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039c2:	803b      	strh	r3, [r7, #0]

        DBG("Setting QUAD in CR1V.\n");
 80039c4:	481a      	ldr	r0, [pc, #104]	; (8003a30 <init_spansion+0x124>)
 80039c6:	f010 ff79 	bl	80148bc <puts>

        // Enable write to be allowed to change the registers
        OSPI_NOR_WriteEnable();
 80039ca:	f7ff ff41 	bl	8003850 <OSPI_NOR_WriteEnable>

        OSPI_WriteBytes(CMD(WRSR), 0, wr_sr, sizeof(wr_sr));
 80039ce:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <init_spansion+0x118>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	463a      	mov	r2, r7
 80039d6:	2302      	movs	r3, #2
 80039d8:	2100      	movs	r1, #0
 80039da:	f7ff fe59 	bl	8003690 <OSPI_WriteBytes>

        // Wait until WIP bit is cleared
        wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 80039de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039e2:	2100      	movs	r1, #0
 80039e4:	2001      	movs	r0, #1
 80039e6:	f7ff fe9b 	bl	8003720 <wait_for_status>

        OSPI_ReadBytes(CMD(RDSR), 0, &rd_sr1, 1);
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <init_spansion+0x118>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	1cd8      	adds	r0, r3, #3
 80039f2:	1dfa      	adds	r2, r7, #7
 80039f4:	2301      	movs	r3, #1
 80039f6:	2100      	movs	r1, #0
 80039f8:	f7ff fe00 	bl	80035fc <OSPI_ReadBytes>
        OSPI_ReadBytes(CMD(RDCR), 0, &rd_cr1, 1);
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <init_spansion+0x118>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	1d98      	adds	r0, r3, #6
 8003a04:	1d7a      	adds	r2, r7, #5
 8003a06:	2301      	movs	r3, #1
 8003a08:	2100      	movs	r1, #0
 8003a0a:	f7ff fdf7 	bl	80035fc <OSPI_ReadBytes>
        DBG("QUAD bit set. SR: %02X CR: %02X\n", rd_sr1, rd_cr1);
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	4619      	mov	r1, r3
 8003a12:	797b      	ldrb	r3, [r7, #5]
 8003a14:	461a      	mov	r2, r3
 8003a16:	4807      	ldr	r0, [pc, #28]	; (8003a34 <init_spansion+0x128>)
 8003a18:	f010 feea 	bl	80147f0 <iprintf>
    }
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bdb0      	pop	{r4, r5, r7, pc}
 8003a24:	20000088 	.word	0x20000088
 8003a28:	00800001 	.word	0x00800001
 8003a2c:	08015b18 	.word	0x08015b18
 8003a30:	08015b48 	.word	0x08015b48
 8003a34:	08015b60 	.word	0x08015b60

08003a38 <init_winbond>:

static void init_winbond(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
	//                                    cmd   i_lines  a_lines  a_size         d_lines  dummy
	const flash_cmd_t cmd_rdsr2 = CMD_DEF(0x35, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
 8003a3e:	4a7f      	ldr	r2, [pc, #508]	; (8003c3c <init_winbond+0x204>)
 8003a40:	f107 0314 	add.w	r3, r7, #20
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	4611      	mov	r1, r2
 8003a48:	8019      	strh	r1, [r3, #0]
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	0c12      	lsrs	r2, r2, #16
 8003a4e:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_rdsr3 = CMD_DEF(0x15, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
 8003a50:	4a7b      	ldr	r2, [pc, #492]	; (8003c40 <init_winbond+0x208>)
 8003a52:	f107 0310 	add.w	r3, r7, #16
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	4611      	mov	r1, r2
 8003a5a:	8019      	strh	r1, [r3, #0]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	0c12      	lsrs	r2, r2, #16
 8003a60:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_wrsr2 = CMD_DEF(0x31, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
 8003a62:	4a78      	ldr	r2, [pc, #480]	; (8003c44 <init_winbond+0x20c>)
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	8019      	strh	r1, [r3, #0]
 8003a6e:	3302      	adds	r3, #2
 8003a70:	0c12      	lsrs	r2, r2, #16
 8003a72:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_wrsr3 = CMD_DEF(0x11, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
 8003a74:	4a74      	ldr	r2, [pc, #464]	; (8003c48 <init_winbond+0x210>)
 8003a76:	f107 0308 	add.w	r3, r7, #8
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	8019      	strh	r1, [r3, #0]
 8003a80:	3302      	adds	r3, #2
 8003a82:	0c12      	lsrs	r2, r2, #16
 8003a84:	701a      	strb	r2, [r3, #0]

	const bool is_quad = flash.config->set_quad;
 8003a86:	4b71      	ldr	r3, [pc, #452]	; (8003c4c <init_winbond+0x214>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	7d1b      	ldrb	r3, [r3, #20]
 8003a8c:	75fb      	strb	r3, [r7, #23]

	uint8_t sr1, sr2, sr3;

	OSPI_ReadBytes(CMD(RDSR),  0, &sr1, 1);
 8003a8e:	4b6f      	ldr	r3, [pc, #444]	; (8003c4c <init_winbond+0x214>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	1cd8      	adds	r0, r3, #3
 8003a96:	1dfa      	adds	r2, r7, #7
 8003a98:	2301      	movs	r3, #1
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	f7ff fdae 	bl	80035fc <OSPI_ReadBytes>
	OSPI_ReadBytes(&cmd_rdsr2, 0, &sr2, 1);
 8003aa0:	1dba      	adds	r2, r7, #6
 8003aa2:	f107 0014 	add.w	r0, r7, #20
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	f7ff fda7 	bl	80035fc <OSPI_ReadBytes>
	OSPI_ReadBytes(&cmd_rdsr3, 0, &sr3, 1);
 8003aae:	1d7a      	adds	r2, r7, #5
 8003ab0:	f107 0010 	add.w	r0, r7, #16
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f7ff fda0 	bl	80035fc <OSPI_ReadBytes>
	DBG("Winbond SR1: %02X SR2: %02X SR3: %02X\n", sr1, sr2, sr3);
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	79bb      	ldrb	r3, [r7, #6]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	797b      	ldrb	r3, [r7, #5]
 8003ac6:	4862      	ldr	r0, [pc, #392]	; (8003c50 <init_winbond+0x218>)
 8003ac8:	f010 fe92 	bl	80147f0 <iprintf>

	// try to clear writeable protect bits if set

	if (sr1 & WB_SR1_PROTECT_Msk) {
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d027      	beq.n	8003b26 <init_winbond+0xee>
		DBG("clearing SR1 protect bits\n");
 8003ad6:	485f      	ldr	r0, [pc, #380]	; (8003c54 <init_winbond+0x21c>)
 8003ad8:	f010 fef0 	bl	80148bc <puts>
		sr1 = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	71fb      	strb	r3, [r7, #7]

		OSPI_NOR_WriteEnable();
 8003ae0:	f7ff feb6 	bl	8003850 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(CMD(WRSR), 0, &sr1, 1);
 8003ae4:	4b59      	ldr	r3, [pc, #356]	; (8003c4c <init_winbond+0x214>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	1dfa      	adds	r2, r7, #7
 8003aec:	2301      	movs	r3, #1
 8003aee:	2100      	movs	r1, #0
 8003af0:	f7ff fdce 	bl	8003690 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 8003af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003af8:	2100      	movs	r1, #0
 8003afa:	2001      	movs	r0, #1
 8003afc:	f7ff fe10 	bl	8003720 <wait_for_status>

		OSPI_ReadBytes(CMD(RDSR), 0, &sr1, 1);
 8003b00:	4b52      	ldr	r3, [pc, #328]	; (8003c4c <init_winbond+0x214>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	1cd8      	adds	r0, r3, #3
 8003b08:	1dfa      	adds	r2, r7, #7
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	f7ff fd75 	bl	80035fc <OSPI_ReadBytes>
		if (sr1 & WB_SR1_PROTECT_Msk)
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <init_winbond+0xee>
			DBG("SR1: %02X, change failed\n", sr1);
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	484d      	ldr	r0, [pc, #308]	; (8003c58 <init_winbond+0x220>)
 8003b22:	f010 fe65 	bl	80147f0 <iprintf>
	}

	if ((sr2 & WB_SR2_PROTECT_Msk) || (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos))) {
 8003b26:	79bb      	ldrb	r3, [r7, #6]
 8003b28:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d107      	bne.n	8003b40 <init_winbond+0x108>
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d039      	beq.n	8003baa <init_winbond+0x172>
 8003b36:	79bb      	ldrb	r3, [r7, #6]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d134      	bne.n	8003baa <init_winbond+0x172>
		DBG("clearing SR2 protect bits\n");
 8003b40:	4846      	ldr	r0, [pc, #280]	; (8003c5c <init_winbond+0x224>)
 8003b42:	f010 febb 	bl	80148bc <puts>
		sr2 = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	71bb      	strb	r3, [r7, #6]

		if (is_quad) {
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <init_winbond+0x122>
			DBG("and enabling quad mode\n");
 8003b50:	4843      	ldr	r0, [pc, #268]	; (8003c60 <init_winbond+0x228>)
 8003b52:	f010 feb3 	bl	80148bc <puts>
			sr2 = 1<<WB_SR2_QE_Pos;
 8003b56:	2302      	movs	r3, #2
 8003b58:	71bb      	strb	r3, [r7, #6]
		}

		OSPI_NOR_WriteEnable();
 8003b5a:	f7ff fe79 	bl	8003850 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(&cmd_wrsr2, 0, &sr2, 1);
 8003b5e:	1dba      	adds	r2, r7, #6
 8003b60:	f107 000c 	add.w	r0, r7, #12
 8003b64:	2301      	movs	r3, #1
 8003b66:	2100      	movs	r1, #0
 8003b68:	f7ff fd92 	bl	8003690 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 8003b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b70:	2100      	movs	r1, #0
 8003b72:	2001      	movs	r0, #1
 8003b74:	f7ff fdd4 	bl	8003720 <wait_for_status>

		OSPI_ReadBytes(&cmd_rdsr2, 0, &sr2, 1);
 8003b78:	1dba      	adds	r2, r7, #6
 8003b7a:	f107 0014 	add.w	r0, r7, #20
 8003b7e:	2301      	movs	r3, #1
 8003b80:	2100      	movs	r1, #0
 8003b82:	f7ff fd3b 	bl	80035fc <OSPI_ReadBytes>
		if ((sr2 & WB_SR2_PROTECT_Msk) || (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos)))
 8003b86:	79bb      	ldrb	r3, [r7, #6]
 8003b88:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d107      	bne.n	8003ba0 <init_winbond+0x168>
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <init_winbond+0x172>
 8003b96:	79bb      	ldrb	r3, [r7, #6]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <init_winbond+0x172>
			DBG("SR2: %02X, change failed\n", sr2);
 8003ba0:	79bb      	ldrb	r3, [r7, #6]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	482f      	ldr	r0, [pc, #188]	; (8003c64 <init_winbond+0x22c>)
 8003ba6:	f010 fe23 	bl	80147f0 <iprintf>
	}

	if ((sr3 & WB_SR3_PROTECT_Msk) || ((sr3 & WB_SR3_DRV_Msk) != WB_SR3_DRV_Val_50)) {
 8003baa:	797b      	ldrb	r3, [r7, #5]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <init_winbond+0x186>
 8003bb4:	797b      	ldrb	r3, [r7, #5]
 8003bb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d029      	beq.n	8003c12 <init_winbond+0x1da>
		DBG("clearing SR3 protect bits, setting drive strength 50%%\n");
 8003bbe:	482a      	ldr	r0, [pc, #168]	; (8003c68 <init_winbond+0x230>)
 8003bc0:	f010 fe16 	bl	80147f0 <iprintf>
		sr3 = WB_SR3_DRV_Val_50;
 8003bc4:	2340      	movs	r3, #64	; 0x40
 8003bc6:	717b      	strb	r3, [r7, #5]

		OSPI_NOR_WriteEnable();
 8003bc8:	f7ff fe42 	bl	8003850 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(&cmd_wrsr3, 0, &sr3, 1);
 8003bcc:	1d7a      	adds	r2, r7, #5
 8003bce:	f107 0008 	add.w	r0, r7, #8
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	f7ff fd5b 	bl	8003690 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 8003bda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bde:	2100      	movs	r1, #0
 8003be0:	2001      	movs	r0, #1
 8003be2:	f7ff fd9d 	bl	8003720 <wait_for_status>

		OSPI_ReadBytes(&cmd_rdsr3, 0, &sr3, 1);
 8003be6:	1d7a      	adds	r2, r7, #5
 8003be8:	f107 0010 	add.w	r0, r7, #16
 8003bec:	2301      	movs	r3, #1
 8003bee:	2100      	movs	r1, #0
 8003bf0:	f7ff fd04 	bl	80035fc <OSPI_ReadBytes>
		if ((sr3 & WB_SR3_PROTECT_Msk) || ((sr3 & WB_SR3_DRV_Msk) != WB_SR3_DRV_Val_50))
 8003bf4:	797b      	ldrb	r3, [r7, #5]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d104      	bne.n	8003c08 <init_winbond+0x1d0>
 8003bfe:	797b      	ldrb	r3, [r7, #5]
 8003c00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003c04:	2b40      	cmp	r3, #64	; 0x40
 8003c06:	d004      	beq.n	8003c12 <init_winbond+0x1da>
			DBG("SR3: %02X, change failed\n", sr3);
 8003c08:	797b      	ldrb	r3, [r7, #5]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4817      	ldr	r0, [pc, #92]	; (8003c6c <init_winbond+0x234>)
 8003c0e:	f010 fdef 	bl	80147f0 <iprintf>
	}

    if (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos)) {
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00d      	beq.n	8003c34 <init_winbond+0x1fc>
 8003c18:	79bb      	ldrb	r3, [r7, #6]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d108      	bne.n	8003c34 <init_winbond+0x1fc>
        DBG("Windbond quad mode not enabled, falling back to SPI\n");
 8003c22:	4813      	ldr	r0, [pc, #76]	; (8003c70 <init_winbond+0x238>)
 8003c24:	f010 fe4a 	bl	80148bc <puts>
        flash.config = &config_spi_24b;
 8003c28:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <init_winbond+0x214>)
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <init_winbond+0x23c>)
 8003c2c:	609a      	str	r2, [r3, #8]
        flash.name = "Winbond SPI";
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <init_winbond+0x214>)
 8003c30:	4a11      	ldr	r2, [pc, #68]	; (8003c78 <init_winbond+0x240>)
 8003c32:	60da      	str	r2, [r3, #12]
    }
}
 8003c34:	bf00      	nop
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	08015cc8 	.word	0x08015cc8
 8003c40:	08015ccc 	.word	0x08015ccc
 8003c44:	08015cd0 	.word	0x08015cd0
 8003c48:	08015cd4 	.word	0x08015cd4
 8003c4c:	20000088 	.word	0x20000088
 8003c50:	08015b84 	.word	0x08015b84
 8003c54:	08015bac 	.word	0x08015bac
 8003c58:	08015bc8 	.word	0x08015bc8
 8003c5c:	08015be4 	.word	0x08015be4
 8003c60:	08015c00 	.word	0x08015c00
 8003c64:	08015c18 	.word	0x08015c18
 8003c68:	08015c34 	.word	0x08015c34
 8003c6c:	08015c6c 	.word	0x08015c6c
 8003c70:	08015c88 	.word	0x08015c88
 8003c74:	08019afc 	.word	0x08019afc
 8003c78:	08015cbc 	.word	0x08015cbc

08003c7c <OSPI_Init>:
    // Assumes that erase sizes are sorted: 4 > 3 > 2 > 1.
    return flash.config->erase_sizes[0];
}

void OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
    uint8_t status;

    flash.hospi = hospi;
 8003c84:	4a4c      	ldr	r2, [pc, #304]	; (8003db8 <OSPI_Init+0x13c>)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6013      	str	r3, [r2, #0]

    // Enable Reset
    OSPI_WriteBytes(CMD(RSTEN), 0, NULL, 0);
 8003c8a:	4b4b      	ldr	r3, [pc, #300]	; (8003db8 <OSPI_Init+0x13c>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f103 0012 	add.w	r0, r3, #18
 8003c94:	2300      	movs	r3, #0
 8003c96:	2200      	movs	r2, #0
 8003c98:	2100      	movs	r1, #0
 8003c9a:	f7ff fcf9 	bl	8003690 <OSPI_WriteBytes>
    HAL_Delay(2);
 8003c9e:	2002      	movs	r0, #2
 8003ca0:	f003 f848 	bl	8006d34 <HAL_Delay>

    // Reset
    OSPI_WriteBytes(CMD(RST), 0, NULL, 0);
 8003ca4:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <OSPI_Init+0x13c>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f103 0015 	add.w	r0, r3, #21
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	f7ff fcec 	bl	8003690 <OSPI_WriteBytes>
    HAL_Delay(20);
 8003cb8:	2014      	movs	r0, #20
 8003cba:	f003 f83b 	bl	8006d34 <HAL_Delay>

    // Read ID
    OSPI_ReadBytes(CMD(RDID), 0, &flash.jedec_id.u8[0], 3);
 8003cbe:	4b3e      	ldr	r3, [pc, #248]	; (8003db8 <OSPI_Init+0x13c>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f103 000f 	add.w	r0, r3, #15
 8003cc8:	2303      	movs	r3, #3
 8003cca:	4a3c      	ldr	r2, [pc, #240]	; (8003dbc <OSPI_Init+0x140>)
 8003ccc:	2100      	movs	r1, #0
 8003cce:	f7ff fc95 	bl	80035fc <OSPI_ReadBytes>
    DBG("JEDEC_ID: %02X %02X %02X\n", flash.jedec_id.u8[0], flash.jedec_id.u8[1], flash.jedec_id.u8[2]);
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <OSPI_Init+0x13c>)
 8003cd4:	791b      	ldrb	r3, [r3, #4]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <OSPI_Init+0x13c>)
 8003cda:	795b      	ldrb	r3, [r3, #5]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <OSPI_Init+0x13c>)
 8003ce0:	799b      	ldrb	r3, [r3, #6]
 8003ce2:	4837      	ldr	r0, [pc, #220]	; (8003dc0 <OSPI_Init+0x144>)
 8003ce4:	f010 fd84 	bl	80147f0 <iprintf>

    // Check for known bad IDs
    if (((flash.jedec_id.u32 & 0xffffff) == 0xffffff) ||
 8003ce8:	4b33      	ldr	r3, [pc, #204]	; (8003db8 <OSPI_Init+0x13c>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003cf0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d005      	beq.n	8003d04 <OSPI_Init+0x88>
        ((flash.jedec_id.u32 & 0xffffff) == 0x000000)) {
 8003cf8:	4b2f      	ldr	r3, [pc, #188]	; (8003db8 <OSPI_Init+0x13c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if (((flash.jedec_id.u32 & 0xffffff) == 0xffffff) ||
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <OSPI_Init+0x96>
        assert(!"Can't communicate with the external flash! Please check the soldering.");
 8003d04:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <OSPI_Init+0x148>)
 8003d06:	4a30      	ldr	r2, [pc, #192]	; (8003dc8 <OSPI_Init+0x14c>)
 8003d08:	f240 3149 	movw	r1, #841	; 0x349
 8003d0c:	482f      	ldr	r0, [pc, #188]	; (8003dcc <OSPI_Init+0x150>)
 8003d0e:	f010 fb25 	bl	801435c <__assert_func>
    }

    OSPI_ReadBytes(CMD(RDSR), 0, &status, 1);
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <OSPI_Init+0x13c>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	1cd8      	adds	r0, r3, #3
 8003d1a:	f107 020b 	add.w	r2, r7, #11
 8003d1e:	2301      	movs	r3, #1
 8003d20:	2100      	movs	r1, #0
 8003d22:	f7ff fc6b 	bl	80035fc <OSPI_ReadBytes>
    DBG("Status: %02X\n", status);
 8003d26:	7afb      	ldrb	r3, [r7, #11]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4829      	ldr	r0, [pc, #164]	; (8003dd0 <OSPI_Init+0x154>)
 8003d2c:	f010 fd60 	bl	80147f0 <iprintf>

    for (int i = 0; i < ARRAY_SIZE(jedec_map); i++) {
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	e02e      	b.n	8003d94 <OSPI_Init+0x118>
        if ((flash.jedec_id.u32 & 0xffffff) == (jedec_map[i].jedec_id.u32 & 0xffffff)) {
 8003d36:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <OSPI_Init+0x13c>)
 8003d38:	6859      	ldr	r1, [r3, #4]
 8003d3a:	4826      	ldr	r0, [pc, #152]	; (8003dd4 <OSPI_Init+0x158>)
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4403      	add	r3, r0
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	404b      	eors	r3, r1
 8003d4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d11c      	bne.n	8003d8e <OSPI_Init+0x112>
            flash.config = jedec_map[i].config;
 8003d54:	491f      	ldr	r1, [pc, #124]	; (8003dd4 <OSPI_Init+0x158>)
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	3308      	adds	r3, #8
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <OSPI_Init+0x13c>)
 8003d68:	6093      	str	r3, [r2, #8]
            flash.name = jedec_map[i].name;
 8003d6a:	491a      	ldr	r1, [pc, #104]	; (8003dd4 <OSPI_Init+0x158>)
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	3304      	adds	r3, #4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <OSPI_Init+0x13c>)
 8003d7e:	60d3      	str	r3, [r2, #12]
            DBG("Found config: %s\n", flash.name);
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <OSPI_Init+0x13c>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4619      	mov	r1, r3
 8003d86:	4814      	ldr	r0, [pc, #80]	; (8003dd8 <OSPI_Init+0x15c>)
 8003d88:	f010 fd32 	bl	80147f0 <iprintf>
            break;
 8003d8c:	e005      	b.n	8003d9a <OSPI_Init+0x11e>
    for (int i = 0; i < ARRAY_SIZE(jedec_map); i++) {
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3301      	adds	r3, #1
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d9cd      	bls.n	8003d36 <OSPI_Init+0xba>
        }
    }

    if (flash.config->init_fn) {
 8003d9a:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <OSPI_Init+0x13c>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <OSPI_Init+0x130>
        flash.config->init_fn();
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <OSPI_Init+0x13c>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	4798      	blx	r3
    }

    OSPI_EnableMemoryMappedMode();
 8003dac:	f7ff fcf4 	bl	8003798 <OSPI_EnableMemoryMappedMode>
}
 8003db0:	bf00      	nop
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000088 	.word	0x20000088
 8003dbc:	2000008c 	.word	0x2000008c
 8003dc0:	08015cd8 	.word	0x08015cd8
 8003dc4:	08015cf4 	.word	0x08015cf4
 8003dc8:	08019d04 	.word	0x08019d04
 8003dcc:	0801597c 	.word	0x0801597c
 8003dd0:	08015d40 	.word	0x08015d40
 8003dd4:	08019bdc 	.word	0x08019bdc
 8003dd8:	08015d50 	.word	0x08015d50

08003ddc <lcd_backlight_set>:
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
	HAL_DAC_Stop(&hdac2, DAC_CHANNEL_1);
}

void lcd_backlight_set(uint8_t brightness) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	2208      	movs	r2, #8
 8003dea:	2100      	movs	r1, #0
 8003dec:	480f      	ldr	r0, [pc, #60]	; (8003e2c <lcd_backlight_set+0x50>)
 8003dee:	f005 f87a 	bl	8008ee6 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, brightness);
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	2208      	movs	r2, #8
 8003df6:	2110      	movs	r1, #16
 8003df8:	480c      	ldr	r0, [pc, #48]	; (8003e2c <lcd_backlight_set+0x50>)
 8003dfa:	f005 f874 	bl	8008ee6 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	2208      	movs	r2, #8
 8003e02:	2100      	movs	r1, #0
 8003e04:	480a      	ldr	r0, [pc, #40]	; (8003e30 <lcd_backlight_set+0x54>)
 8003e06:	f005 f86e 	bl	8008ee6 <HAL_DAC_SetValue>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4807      	ldr	r0, [pc, #28]	; (8003e2c <lcd_backlight_set+0x50>)
 8003e0e:	f005 f818 	bl	8008e42 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8003e12:	2110      	movs	r1, #16
 8003e14:	4805      	ldr	r0, [pc, #20]	; (8003e2c <lcd_backlight_set+0x50>)
 8003e16:	f005 f814 	bl	8008e42 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4804      	ldr	r0, [pc, #16]	; (8003e30 <lcd_backlight_set+0x54>)
 8003e1e:	f005 f810 	bl	8008e42 <HAL_DAC_Start>
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200002d4 	.word	0x200002d4
 8003e30:	200002e8 	.word	0x200002e8

08003e34 <lcd_init>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
	// Pull reset line(?) low. (Flakey without this)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
}

void lcd_init(SPI_HandleTypeDef *spi, LTDC_HandleTypeDef *ltdc) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
// Wake
// Enable 3.3v
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2102      	movs	r1, #2
 8003e42:	489c      	ldr	r0, [pc, #624]	; (80040b4 <lcd_init+0x280>)
 8003e44:	f008 fac8 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003e48:	2001      	movs	r0, #1
 8003e4a:	f002 ff73 	bl	8006d34 <HAL_Delay>
	// Enable 1.8V
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8003e4e:	2201      	movs	r2, #1
 8003e50:	2110      	movs	r1, #16
 8003e52:	4898      	ldr	r0, [pc, #608]	; (80040b4 <lcd_init+0x280>)
 8003e54:	f008 fac0 	bl	800c3d8 <HAL_GPIO_WritePin>
	// also assert CS, not sure where to put this yet
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e5e:	4896      	ldr	r0, [pc, #600]	; (80040b8 <lcd_init+0x284>)
 8003e60:	f008 faba 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(7);
 8003e64:	2007      	movs	r0, #7
 8003e66:	f002 ff65 	bl	8006d34 <HAL_Delay>

// HAL_SPI_Transmit(spi, (uint8_t *)"\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55", 10, 100);
	// Lets go, bootup sequence.
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e70:	4890      	ldr	r0, [pc, #576]	; (80040b4 <lcd_init+0x280>)
 8003e72:	f008 fab1 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003e76:	2002      	movs	r0, #2
 8003e78:	f002 ff5c 	bl	8006d34 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e82:	488c      	ldr	r0, [pc, #560]	; (80040b4 <lcd_init+0x280>)
 8003e84:	f008 faa8 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003e88:	2002      	movs	r0, #2
 8003e8a:	f002 ff53 	bl	8006d34 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e94:	4887      	ldr	r0, [pc, #540]	; (80040b4 <lcd_init+0x280>)
 8003e96:	f008 fa9f 	bl	800c3d8 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8003e9a:	200a      	movs	r0, #10
 8003e9c:	f002 ff4a 	bl	8006d34 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ea6:	4884      	ldr	r0, [pc, #528]	; (80040b8 <lcd_init+0x284>)
 8003ea8:	f008 fa96 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(45);
 8003eac:	202d      	movs	r0, #45	; 0x2d
 8003eae:	f002 ff41 	bl	8006d34 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x08\x80", 2, 100);
 8003eb2:	2364      	movs	r3, #100	; 0x64
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	4981      	ldr	r1, [pc, #516]	; (80040bc <lcd_init+0x288>)
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f00f fa6d 	bl	8013398 <HAL_SPI_Transmit>
	HAL_Delay(2);
 8003ebe:	2002      	movs	r0, #2
 8003ec0:	f002 ff38 	bl	8006d34 <HAL_Delay>
	//wdog_refresh();

	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003eca:	487b      	ldr	r0, [pc, #492]	; (80040b8 <lcd_init+0x284>)
 8003ecc:	f008 fa84 	bl	800c3d8 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ed6:	4878      	ldr	r0, [pc, #480]	; (80040b8 <lcd_init+0x284>)
 8003ed8:	f008 fa7e 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003edc:	2002      	movs	r0, #2
 8003ede:	f002 ff29 	bl	8006d34 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x6E\x80", 2, 100);
 8003ee2:	2364      	movs	r3, #100	; 0x64
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	4976      	ldr	r1, [pc, #472]	; (80040c0 <lcd_init+0x28c>)
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f00f fa55 	bl	8013398 <HAL_SPI_Transmit>
	HAL_Delay(2);
 8003eee:	2002      	movs	r0, #2
 8003ef0:	f002 ff20 	bl	8006d34 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003efa:	486f      	ldr	r0, [pc, #444]	; (80040b8 <lcd_init+0x284>)
 8003efc:	f008 fa6c 	bl	800c3d8 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003f00:	2200      	movs	r2, #0
 8003f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f06:	486c      	ldr	r0, [pc, #432]	; (80040b8 <lcd_init+0x284>)
 8003f08:	f008 fa66 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003f0c:	2002      	movs	r0, #2
 8003f0e:	f002 ff11 	bl	8006d34 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x80\x80", 2, 100);
 8003f12:	2364      	movs	r3, #100	; 0x64
 8003f14:	2202      	movs	r2, #2
 8003f16:	496b      	ldr	r1, [pc, #428]	; (80040c4 <lcd_init+0x290>)
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f00f fa3d 	bl	8013398 <HAL_SPI_Transmit>

	HAL_Delay(2);
 8003f1e:	2002      	movs	r0, #2
 8003f20:	f002 ff08 	bl	8006d34 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003f24:	2201      	movs	r2, #1
 8003f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f2a:	4863      	ldr	r0, [pc, #396]	; (80040b8 <lcd_init+0x284>)
 8003f2c:	f008 fa54 	bl	800c3d8 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003f30:	2200      	movs	r2, #0
 8003f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f36:	4860      	ldr	r0, [pc, #384]	; (80040b8 <lcd_init+0x284>)
 8003f38:	f008 fa4e 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003f3c:	2002      	movs	r0, #2
 8003f3e:	f002 fef9 	bl	8006d34 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x68\x00", 2, 100);
 8003f42:	2364      	movs	r3, #100	; 0x64
 8003f44:	2202      	movs	r2, #2
 8003f46:	4960      	ldr	r1, [pc, #384]	; (80040c8 <lcd_init+0x294>)
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f00f fa25 	bl	8013398 <HAL_SPI_Transmit>
	HAL_Delay(2);
 8003f4e:	2002      	movs	r0, #2
 8003f50:	f002 fef0 	bl	8006d34 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003f54:	2201      	movs	r2, #1
 8003f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f5a:	4857      	ldr	r0, [pc, #348]	; (80040b8 <lcd_init+0x284>)
 8003f5c:	f008 fa3c 	bl	800c3d8 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003f60:	2200      	movs	r2, #0
 8003f62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f66:	4854      	ldr	r0, [pc, #336]	; (80040b8 <lcd_init+0x284>)
 8003f68:	f008 fa36 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003f6c:	2002      	movs	r0, #2
 8003f6e:	f002 fee1 	bl	8006d34 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\xd0\x00", 2, 100);
 8003f72:	2364      	movs	r3, #100	; 0x64
 8003f74:	2202      	movs	r2, #2
 8003f76:	4955      	ldr	r1, [pc, #340]	; (80040cc <lcd_init+0x298>)
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f00f fa0d 	bl	8013398 <HAL_SPI_Transmit>
	HAL_Delay(2);
 8003f7e:	2002      	movs	r0, #2
 8003f80:	f002 fed8 	bl	8006d34 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003f84:	2201      	movs	r2, #1
 8003f86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f8a:	484b      	ldr	r0, [pc, #300]	; (80040b8 <lcd_init+0x284>)
 8003f8c:	f008 fa24 	bl	800c3d8 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003f90:	2200      	movs	r2, #0
 8003f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f96:	4848      	ldr	r0, [pc, #288]	; (80040b8 <lcd_init+0x284>)
 8003f98:	f008 fa1e 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003f9c:	2002      	movs	r0, #2
 8003f9e:	f002 fec9 	bl	8006d34 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x1b\x00", 2, 100);
 8003fa2:	2364      	movs	r3, #100	; 0x64
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	494a      	ldr	r1, [pc, #296]	; (80040d0 <lcd_init+0x29c>)
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f00f f9f5 	bl	8013398 <HAL_SPI_Transmit>

	HAL_Delay(2);
 8003fae:	2002      	movs	r0, #2
 8003fb0:	f002 fec0 	bl	8006d34 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fba:	483f      	ldr	r0, [pc, #252]	; (80040b8 <lcd_init+0x284>)
 8003fbc:	f008 fa0c 	bl	800c3d8 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fc6:	483c      	ldr	r0, [pc, #240]	; (80040b8 <lcd_init+0x284>)
 8003fc8:	f008 fa06 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003fcc:	2002      	movs	r0, #2
 8003fce:	f002 feb1 	bl	8006d34 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\xe0\x00", 2, 100);
 8003fd2:	2364      	movs	r3, #100	; 0x64
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	493f      	ldr	r1, [pc, #252]	; (80040d4 <lcd_init+0x2a0>)
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f00f f9dd 	bl	8013398 <HAL_SPI_Transmit>

	HAL_Delay(2);
 8003fde:	2002      	movs	r0, #2
 8003fe0:	f002 fea8 	bl	8006d34 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fea:	4833      	ldr	r0, [pc, #204]	; (80040b8 <lcd_init+0x284>)
 8003fec:	f008 f9f4 	bl	800c3d8 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff6:	4830      	ldr	r0, [pc, #192]	; (80040b8 <lcd_init+0x284>)
 8003ff8:	f008 f9ee 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003ffc:	2002      	movs	r0, #2
 8003ffe:	f002 fe99 	bl	8006d34 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x6a\x80", 2, 100);
 8004002:	2364      	movs	r3, #100	; 0x64
 8004004:	2202      	movs	r2, #2
 8004006:	4934      	ldr	r1, [pc, #208]	; (80040d8 <lcd_init+0x2a4>)
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f00f f9c5 	bl	8013398 <HAL_SPI_Transmit>

	HAL_Delay(2);
 800400e:	2002      	movs	r0, #2
 8004010:	f002 fe90 	bl	8006d34 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8004014:	2201      	movs	r2, #1
 8004016:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800401a:	4827      	ldr	r0, [pc, #156]	; (80040b8 <lcd_init+0x284>)
 800401c:	f008 f9dc 	bl	800c3d8 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004020:	2200      	movs	r2, #0
 8004022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004026:	4824      	ldr	r0, [pc, #144]	; (80040b8 <lcd_init+0x284>)
 8004028:	f008 f9d6 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800402c:	2002      	movs	r0, #2
 800402e:	f002 fe81 	bl	8006d34 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x80\x00", 2, 100);
 8004032:	2364      	movs	r3, #100	; 0x64
 8004034:	2202      	movs	r2, #2
 8004036:	4929      	ldr	r1, [pc, #164]	; (80040dc <lcd_init+0x2a8>)
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f00f f9ad 	bl	8013398 <HAL_SPI_Transmit>
	HAL_Delay(2);
 800403e:	2002      	movs	r0, #2
 8004040:	f002 fe78 	bl	8006d34 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8004044:	2201      	movs	r2, #1
 8004046:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800404a:	481b      	ldr	r0, [pc, #108]	; (80040b8 <lcd_init+0x284>)
 800404c:	f008 f9c4 	bl	800c3d8 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004050:	2200      	movs	r2, #0
 8004052:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004056:	4818      	ldr	r0, [pc, #96]	; (80040b8 <lcd_init+0x284>)
 8004058:	f008 f9be 	bl	800c3d8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800405c:	2002      	movs	r0, #2
 800405e:	f002 fe69 	bl	8006d34 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x14\x80", 2, 100);
 8004062:	2364      	movs	r3, #100	; 0x64
 8004064:	2202      	movs	r2, #2
 8004066:	491e      	ldr	r1, [pc, #120]	; (80040e0 <lcd_init+0x2ac>)
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f00f f995 	bl	8013398 <HAL_SPI_Transmit>
	HAL_Delay(2);
 800406e:	2002      	movs	r0, #2
 8004070:	f002 fe60 	bl	8006d34 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8004074:	2201      	movs	r2, #1
 8004076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800407a:	480f      	ldr	r0, [pc, #60]	; (80040b8 <lcd_init+0x284>)
 800407c:	f008 f9ac 	bl	800c3d8 <HAL_GPIO_WritePin>
	//wdog_refresh();

	HAL_LTDC_SetAddress(ltdc, (uint32_t) &fb1, 0);
 8004080:	4b18      	ldr	r3, [pc, #96]	; (80040e4 <lcd_init+0x2b0>)
 8004082:	2200      	movs	r2, #0
 8004084:	4619      	mov	r1, r3
 8004086:	6838      	ldr	r0, [r7, #0]
 8004088:	f008 fbaa 	bl	800c7e0 <HAL_LTDC_SetAddress>

	memset(fb1, 0, sizeof(framebuffer1));
 800408c:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <lcd_init+0x2b0>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f010 fd10 	bl	8014abc <memset>
	memset(fb2, 0, sizeof(framebuffer1));
 800409c:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <lcd_init+0x2b4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f010 fd08 	bl	8014abc <memset>
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	58020c00 	.word	0x58020c00
 80040b8:	58020400 	.word	0x58020400
 80040bc:	08015d64 	.word	0x08015d64
 80040c0:	08015d68 	.word	0x08015d68
 80040c4:	08015d6c 	.word	0x08015d6c
 80040c8:	08015d70 	.word	0x08015d70
 80040cc:	08015d74 	.word	0x08015d74
 80040d0:	08015d78 	.word	0x08015d78
 80040d4:	08015d7c 	.word	0x08015d7c
 80040d8:	08015d80 	.word	0x08015d80
 80040dc:	08015d84 	.word	0x08015d84
 80040e0:	08015d88 	.word	0x08015d88
 80040e4:	2000009c 	.word	0x2000009c
 80040e8:	200000a0 	.word	0x200000a0

080040ec <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	frame_counter++;
 80040f4:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_LTDC_ReloadEventCallback+0x40>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	4a0c      	ldr	r2, [pc, #48]	; (800412c <HAL_LTDC_ReloadEventCallback+0x40>)
 80040fc:	6013      	str	r3, [r2, #0]
	if (active_framebuffer == 0) {
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <HAL_LTDC_ReloadEventCallback+0x44>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d107      	bne.n	8004116 <HAL_LTDC_ReloadEventCallback+0x2a>
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb2, 0);
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_LTDC_ReloadEventCallback+0x48>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2200      	movs	r2, #0
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f008 fb66 	bl	800c7e0 <HAL_LTDC_SetAddress>
	} else {
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
	}
}
 8004114:	e006      	b.n	8004124 <HAL_LTDC_ReloadEventCallback+0x38>
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
 8004116:	4b08      	ldr	r3, [pc, #32]	; (8004138 <HAL_LTDC_ReloadEventCallback+0x4c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2200      	movs	r2, #0
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f008 fb5e 	bl	800c7e0 <HAL_LTDC_SetAddress>
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000234 	.word	0x20000234
 8004130:	20000230 	.word	0x20000230
 8004134:	200000a0 	.word	0x200000a0
 8004138:	2000009c 	.word	0x2000009c

0800413c <lcd_swap>:

uint32_t is_lcd_swap_pending(void) {
	return (uint32_t) ((hltdc.Instance->SRCR) & (LTDC_SRCR_VBR | LTDC_SRCR_IMR));
}

void lcd_swap(void) {
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8004140:	2102      	movs	r1, #2
 8004142:	4807      	ldr	r0, [pc, #28]	; (8004160 <lcd_swap+0x24>)
 8004144:	f008 fb82 	bl	800c84c <HAL_LTDC_Reload>
	active_framebuffer = active_framebuffer ? 0 : 1;
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <lcd_swap+0x28>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	4b02      	ldr	r3, [pc, #8]	; (8004164 <lcd_swap+0x28>)
 800415a:	601a      	str	r2, [r3, #0]
}
 800415c:	bf00      	nop
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20000364 	.word	0x20000364
 8004164:	20000230 	.word	0x20000230

08004168 <lcd_sync>:

void lcd_sync(void) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
	void *active = lcd_get_active_buffer();
 800416e:	f000 f813 	bl	8004198 <lcd_get_active_buffer>
 8004172:	6078      	str	r0, [r7, #4]
	void *inactive = lcd_get_inactive_buffer();
 8004174:	f000 f826 	bl	80041c4 <lcd_get_inactive_buffer>
 8004178:	6038      	str	r0, [r7, #0]

	if (active != inactive) {
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d005      	beq.n	800418e <lcd_sync+0x26>
		memcpy(inactive, active, sizeof(framebuffer1));
 8004182:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	6838      	ldr	r0, [r7, #0]
 800418a:	f010 fd22 	bl	8014bd2 <memcpy>
	}
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <lcd_get_active_buffer>:

void* lcd_get_active_buffer(void) {
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
	return active_framebuffer ? fb2 : fb1;
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <lcd_get_active_buffer+0x20>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <lcd_get_active_buffer+0x12>
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <lcd_get_active_buffer+0x24>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	e001      	b.n	80041ae <lcd_get_active_buffer+0x16>
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <lcd_get_active_buffer+0x28>)
 80041ac:	681b      	ldr	r3, [r3, #0]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	20000230 	.word	0x20000230
 80041bc:	200000a0 	.word	0x200000a0
 80041c0:	2000009c 	.word	0x2000009c

080041c4 <lcd_get_inactive_buffer>:

void* lcd_get_inactive_buffer(void) {
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
	return active_framebuffer ? fb1 : fb2;
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <lcd_get_inactive_buffer+0x20>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <lcd_get_inactive_buffer+0x12>
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <lcd_get_inactive_buffer+0x24>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	e001      	b.n	80041da <lcd_get_inactive_buffer+0x16>
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <lcd_get_inactive_buffer+0x28>)
 80041d8:	681b      	ldr	r3, [r3, #0]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	20000230 	.word	0x20000230
 80041e8:	2000009c 	.word	0x2000009c
 80041ec:	200000a0 	.word	0x200000a0

080041f0 <lcd_wait_for_vblank>:
void lcd_set_buffers(uint16_t *buf1, uint16_t *buf2) {
	fb1 = buf1;
	fb2 = buf2;
}

void lcd_wait_for_vblank(void) {
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
	uint32_t old_counter = frame_counter;
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <lcd_wait_for_vblank+0x28>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	607b      	str	r3, [r7, #4]
	while (old_counter == frame_counter) {
 80041fc:	e000      	b.n	8004200 <lcd_wait_for_vblank+0x10>
		__asm("nop");
 80041fe:	bf00      	nop
	while (old_counter == frame_counter) {
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <lcd_wait_for_vblank+0x28>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d0f9      	beq.n	80041fe <lcd_wait_for_vblank+0xe>
	}
}
 800420a:	bf00      	nop
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	20000234 	.word	0x20000234

0800421c <about_menu_init>:

static int ticks = 0;
static int action_delay = 0;
int in_about_menu = 1;

void about_menu_init() {
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
	in_about_menu = 1;
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <about_menu_init+0x34>)
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8004226:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800422a:	f7fd f911 	bl	8001450 <LCD_SetTextColor>
	LCD_SetFont(&Font24);
 800422e:	4809      	ldr	r0, [pc, #36]	; (8004254 <about_menu_init+0x38>)
 8004230:	f7fd f92e 	bl	8001490 <LCD_SetFont>
	LCD_SetFontScale(1);
 8004234:	2001      	movs	r0, #1
 8004236:	f7fd f93b 	bl	80014b0 <LCD_SetFontScale>
	while (in_about_menu) {
 800423a:	e001      	b.n	8004240 <about_menu_init+0x24>
		about_menu_loop();
 800423c:	f000 f80c 	bl	8004258 <about_menu_loop>
	while (in_about_menu) {
 8004240:	4b03      	ldr	r3, [pc, #12]	; (8004250 <about_menu_init+0x34>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f9      	bne.n	800423c <about_menu_init+0x20>
	}
	//main_menu_init();
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	200000a4 	.word	0x200000a4
 8004254:	20000018 	.word	0x20000018

08004258 <about_menu_loop>:
static void about_menu_loop() {
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
	uint16_t *fb = lcd_get_active_buffer();
 800425e:	f7ff ff9b 	bl	8004198 <lcd_get_active_buffer>
 8004262:	6078      	str	r0, [r7, #4]
	draw_background(fb);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f863 	bl	8004330 <draw_background>

	process_input();
 800426a:	f000 f80b 	bl	8004284 <process_input>
	update();
 800426e:	f000 f851 	bl	8004314 <update>

	lcd_swap();
 8004272:	f7ff ff63 	bl	800413c <lcd_swap>
	lcd_wait_for_vblank();
 8004276:	f7ff ffbb 	bl	80041f0 <lcd_wait_for_vblank>
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <process_input>:

static void process_input() {
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
 800428a:	f7ff f8bb 	bl	8003404 <buttons_get>
 800428e:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <process_input+0x1a>
		HAL_NVIC_SystemReset();
 800429a:	f004 fda0 	bl	8008dde <HAL_NVIC_SystemReset>
	}
	if (action_delay <= 0) {
 800429e:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <process_input+0x84>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	dc08      	bgt.n	80042b8 <process_input+0x34>
		if (buttons & B_B) {
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <process_input+0x3e>
			in_about_menu = 0;
 80042b0:	4b16      	ldr	r3, [pc, #88]	; (800430c <process_input+0x88>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	e004      	b.n	80042c2 <process_input+0x3e>
		}
	} else {
		action_delay--;
 80042b8:	4b13      	ldr	r3, [pc, #76]	; (8004308 <process_input+0x84>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3b01      	subs	r3, #1
 80042be:	4a12      	ldr	r2, [pc, #72]	; (8004308 <process_input+0x84>)
 80042c0:	6013      	str	r3, [r2, #0]
	}
	if (buttons & B_Up) {
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <process_input+0x4e>
		secret_data1 = 1;
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <process_input+0x8c>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
	}
	if (buttons & B_Down && secret_data1) {
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <process_input+0x6a>
 80042dc:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <process_input+0x8c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <process_input+0x6a>
		secret_function();
 80042e4:	f000 f8de 	bl	80044a4 <secret_function>
		action_delay = 15;
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <process_input+0x84>)
 80042ea:	220f      	movs	r2, #15
 80042ec:	601a      	str	r2, [r3, #0]
	}
	if (buttons & ~B_Up) {
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f023 0302 	bic.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <process_input+0x7a>
		secret_data1 = 0;
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <process_input+0x8c>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
	}
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000240 	.word	0x20000240
 800430c:	200000a4 	.word	0x200000a4
 8004310:	20000238 	.word	0x20000238

08004314 <update>:

static void update() {
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
	ticks++;
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <update+0x18>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	4a03      	ldr	r2, [pc, #12]	; (800432c <update+0x18>)
 8004320:	6013      	str	r3, [r2, #0]
}
 8004322:	bf00      	nop
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	2000023c 	.word	0x2000023c

08004330 <draw_background>:

static void draw_background(uint16_t *buf) {
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af02      	add	r7, sp, #8
 8004336:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
 8004338:	2100      	movs	r1, #0
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fd f8f4 	bl	8001528 <LCD_Clear>

	LCD_SetFontScale(3);
 8004340:	2003      	movs	r0, #3
 8004342:	f7fd f8b5 	bl	80014b0 <LCD_SetFontScale>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8004346:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800434a:	f7fd f881 	bl	8001450 <LCD_SetTextColor>
	LCD_SetFont(&Font24);
 800434e:	484d      	ldr	r0, [pc, #308]	; (8004484 <draw_background+0x154>)
 8004350:	f7fd f89e 	bl	8001490 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 8004354:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004358:	f7fd f87a 	bl	8001450 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 40, 20, 'P');
 800435c:	2350      	movs	r3, #80	; 0x50
 800435e:	2214      	movs	r2, #20
 8004360:	2128      	movs	r1, #40	; 0x28
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fd f99c 	bl	80016a0 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_ORANGE);
 8004368:	f64f 5080 	movw	r0, #64896	; 0xfd80
 800436c:	f7fd f870 	bl	8001450 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 80, 20, 'o');
 8004370:	236f      	movs	r3, #111	; 0x6f
 8004372:	2214      	movs	r2, #20
 8004374:	2150      	movs	r1, #80	; 0x50
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fd f992 	bl	80016a0 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800437c:	2010      	movs	r0, #16
 800437e:	f7fd f867 	bl	8001450 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 120, 20, 'n');
 8004382:	236e      	movs	r3, #110	; 0x6e
 8004384:	2214      	movs	r2, #20
 8004386:	2178      	movs	r1, #120	; 0x78
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7fd f989 	bl	80016a0 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_RED);
 800438e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004392:	f7fd f85d 	bl	8001450 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 160, 20, 'g');
 8004396:	2367      	movs	r3, #103	; 0x67
 8004398:	2214      	movs	r2, #20
 800439a:	21a0      	movs	r1, #160	; 0xa0
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7fd f97f 	bl	80016a0 <LCD_DisplayChar>
	LCD_SetFontScale(1);
 80043a2:	2001      	movs	r0, #1
 80043a4:	f7fd f884 	bl	80014b0 <LCD_SetFontScale>

	LCD_FillRect(buf, 220, 64, 50, 8, LCD_COLOR_WHITE);
 80043a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	2308      	movs	r3, #8
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	2332      	movs	r3, #50	; 0x32
 80043b4:	2240      	movs	r2, #64	; 0x40
 80043b6:	21dc      	movs	r1, #220	; 0xdc
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7fd fb9d 	bl	8001af8 <LCD_FillRect>
	LCD_FillCircle(buf, 270, 40, 10, LCD_COLOR_WHITE);
 80043be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	230a      	movs	r3, #10
 80043c6:	2228      	movs	r2, #40	; 0x28
 80043c8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7fd fbc4 	bl	8001b5a <LCD_FillCircle>
	LCD_DrawLine(buf, 221, 40, 245, 64, LCD_COLOR_WHITE);
 80043d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	2340      	movs	r3, #64	; 0x40
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	23f5      	movs	r3, #245	; 0xf5
 80043de:	2228      	movs	r2, #40	; 0x28
 80043e0:	21dd      	movs	r1, #221	; 0xdd
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fd f9e6 	bl	80017b4 <LCD_DrawLine>
	LCD_DrawLine(buf, 269, 40, 245, 64, LCD_COLOR_WHITE);
 80043e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	2340      	movs	r3, #64	; 0x40
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	23f5      	movs	r3, #245	; 0xf5
 80043f4:	2228      	movs	r2, #40	; 0x28
 80043f6:	f240 110d 	movw	r1, #269	; 0x10d
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd f9da 	bl	80017b4 <LCD_DrawLine>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8004400:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004404:	f7fd f824 	bl	8001450 <LCD_SetTextColor>
	LCD_SetFont(&Font20);
 8004408:	481f      	ldr	r0, [pc, #124]	; (8004488 <draw_background+0x158>)
 800440a:	f7fd f841 	bl	8001490 <LCD_SetFont>
	LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Developed by:\0", CENTER_MODE);
 800440e:	2301      	movs	r3, #1
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	4b1e      	ldr	r3, [pc, #120]	; (800448c <draw_background+0x15c>)
 8004414:	226e      	movs	r2, #110	; 0x6e
 8004416:	2100      	movs	r1, #0
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fd f89f 	bl	800155c <LCD_DisplayStringAt>
	LCD_SetFont(&Font24);
 800441e:	4819      	ldr	r0, [pc, #100]	; (8004484 <draw_background+0x154>)
 8004420:	f7fd f836 	bl	8001490 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_DARKYELLOW);
 8004424:	f44f 4004 	mov.w	r0, #33792	; 0x8400
 8004428:	f7fd f812 	bl	8001450 <LCD_SetTextColor>
	LCD_DisplayStringAt(buf, 0, 140, (uint8_t*) "Jopo12321\0", CENTER_MODE);
 800442c:	2301      	movs	r3, #1
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	4b17      	ldr	r3, [pc, #92]	; (8004490 <draw_background+0x160>)
 8004432:	228c      	movs	r2, #140	; 0x8c
 8004434:	2100      	movs	r1, #0
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fd f890 	bl	800155c <LCD_DisplayStringAt>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 800443c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004440:	f7fd f806 	bl	8001450 <LCD_SetTextColor>
	LCD_SetFont(&Font12);
 8004444:	4813      	ldr	r0, [pc, #76]	; (8004494 <draw_background+0x164>)
 8004446:	f7fd f823 	bl	8001490 <LCD_SetFont>
	LCD_DisplayStringAt(buf, 0, 175, (uint8_t*) "jozef.kromka22@gmail.com\0",
 800444a:	2301      	movs	r3, #1
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <draw_background+0x168>)
 8004450:	22af      	movs	r2, #175	; 0xaf
 8004452:	2100      	movs	r1, #0
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fd f881 	bl	800155c <LCD_DisplayStringAt>
			CENTER_MODE);
	LCD_DisplayStringAt(buf, 0, 200,
 800445a:	2301      	movs	r3, #1
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <draw_background+0x16c>)
 8004460:	22c8      	movs	r2, #200	; 0xc8
 8004462:	2100      	movs	r1, #0
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7fd f879 	bl	800155c <LCD_DisplayStringAt>
			(uint8_t*) "https://github.com/Jopo12321/\0", CENTER_MODE);
	LCD_DisplayStringAt(buf, 0, 212, (uint8_t*) "game-and-watch-pong\0",
 800446a:	2301      	movs	r3, #1
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <draw_background+0x170>)
 8004470:	22d4      	movs	r2, #212	; 0xd4
 8004472:	2100      	movs	r1, #0
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7fd f871 	bl	800155c <LCD_DisplayStringAt>
			CENTER_MODE);
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000018 	.word	0x20000018
 8004488:	20000010 	.word	0x20000010
 800448c:	08015d8c 	.word	0x08015d8c
 8004490:	08015d9c 	.word	0x08015d9c
 8004494:	20000000 	.word	0x20000000
 8004498:	08015da8 	.word	0x08015da8
 800449c:	08015dc4 	.word	0x08015dc4
 80044a0:	08015de4 	.word	0x08015de4

080044a4 <secret_function>:

static void secret_function() {
 80044a4:	b5b0      	push	{r4, r5, r7, lr}
 80044a6:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 80044aa:	af04      	add	r7, sp, #16
	int i, j;
	uint8_t secret_data2[] = { 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE,
 80044ac:	4bc9      	ldr	r3, [pc, #804]	; (80047d4 <secret_function+0x330>)
 80044ae:	f507 7414 	add.w	r4, r7, #592	; 0x250
 80044b2:	461d      	mov	r5, r3
 80044b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80044bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0xFF, 0xFF, 0xFF, 0xFE, 0xEE, 0xEE, 0xEE, 0xEE, 0xFF, 0xFE, 0xFF,
			0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xEE, 0xEE,
			0xEE, 0xEE };
	uint8_t secret_data6[] = { 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D,
 80044c0:	4bc5      	ldr	r3, [pc, #788]	; (80047d8 <secret_function+0x334>)
 80044c2:	f507 7404 	add.w	r4, r7, #528	; 0x210
 80044c6:	461d      	mov	r5, r3
 80044c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80044d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			0x00, 0x0D, 0xDD, 0xDD, 0x00, 0x0D, 0xDD, 0xD0, 0x00, 0xDD, 0xD0,
			0x00, 0x00, 0xDD, 0x00, 0x00 };
	Sprite secret_data3;
	Sprite secret_data7;
	uint16_t x[] = { 304, 288, 288, 0, 96, 192, 192, 96, 144, 288, 144, 0, 144,
 80044dc:	4bbf      	ldr	r3, [pc, #764]	; (80047dc <secret_function+0x338>)
 80044de:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 80044e2:	461d      	mov	r5, r3
 80044e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80044ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			288, 144, 0 };
	uint16_t y[] = { 224, 0, 208, 208, 104, 104, 104, 104, 0, 104, 208, 104, 0,
 80044f0:	4bbb      	ldr	r3, [pc, #748]	; (80047e0 <secret_function+0x33c>)
 80044f2:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 80044f6:	461d      	mov	r5, r3
 80044f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			104, 208, 104 };
	int8_t x_speed[] =
 8004504:	4bb7      	ldr	r3, [pc, #732]	; (80047e4 <secret_function+0x340>)
 8004506:	f507 74d0 	add.w	r4, r7, #416	; 0x1a0
 800450a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800450c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{ 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1 };
	int8_t y_speed[] =
 8004510:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8004514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004518:	4ab3      	ldr	r2, [pc, #716]	; (80047e8 <secret_function+0x344>)
 800451a:	461c      	mov	r4, r3
 800451c:	4613      	mov	r3, r2
 800451e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004520:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{ 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1 };
	int secret_data8 = 16;
 8004524:	2310      	movs	r3, #16
 8004526:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
	uint16_t secret_data9[100];
	uint16_t secret_dataA[100];
	for (i = 0; i < 100; ++i) {
 800452a:	2300      	movs	r3, #0
 800452c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8004530:	e033      	b.n	800459a <secret_function+0xf6>
		secret_data9[i] = randint(0, 319);
 8004532:	f010 f81b 	bl	801456c <rand>
 8004536:	4602      	mov	r2, r0
 8004538:	4bac      	ldr	r3, [pc, #688]	; (80047ec <secret_function+0x348>)
 800453a:	fb83 1302 	smull	r1, r3, r3, r2
 800453e:	11d9      	asrs	r1, r3, #7
 8004540:	17d3      	asrs	r3, r2, #31
 8004542:	1ac9      	subs	r1, r1, r3
 8004544:	460b      	mov	r3, r1
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	019b      	lsls	r3, r3, #6
 800454c:	1ad1      	subs	r1, r2, r3
 800454e:	b289      	uxth	r1, r1
 8004550:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8004554:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004558:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 800455c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		secret_dataA[i] = randint(0, 239);
 8004560:	f010 f804 	bl	801456c <rand>
 8004564:	4602      	mov	r2, r0
 8004566:	4ba2      	ldr	r3, [pc, #648]	; (80047f0 <secret_function+0x34c>)
 8004568:	fb83 1302 	smull	r1, r3, r3, r2
 800456c:	4413      	add	r3, r2
 800456e:	11d9      	asrs	r1, r3, #7
 8004570:	17d3      	asrs	r3, r2, #31
 8004572:	1ac9      	subs	r1, r1, r3
 8004574:	460b      	mov	r3, r1
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	1a5b      	subs	r3, r3, r1
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1ad1      	subs	r1, r2, r3
 800457e:	b289      	uxth	r1, r1
 8004580:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8004584:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8004588:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 800458c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < 100; ++i) {
 8004590:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8004594:	3301      	adds	r3, #1
 8004596:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800459a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800459e:	2b63      	cmp	r3, #99	; 0x63
 80045a0:	ddc7      	ble.n	8004532 <secret_function+0x8e>
	}
	uint16_t max_x = 304;
 80045a2:	f44f 7398 	mov.w	r3, #304	; 0x130
 80045a6:	f8a7 328e 	strh.w	r3, [r7, #654]	; 0x28e
	uint16_t min_x = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f8a7 328c 	strh.w	r3, [r7, #652]	; 0x28c
	uint16_t max_y = 224;
 80045b0:	23e0      	movs	r3, #224	; 0xe0
 80045b2:	f8a7 328a 	strh.w	r3, [r7, #650]	; 0x28a
	uint16_t min_y = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f8a7 3288 	strh.w	r3, [r7, #648]	; 0x288
	uint8_t delay = 30;
 80045bc:	231e      	movs	r3, #30
 80045be:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
	uint8_t dir = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286
	init_sprite(&secret_data3, x[0], y[0], 8, 8, SPRITE_SHOW | 0x01, pallete,
 80045c8:	f8b7 11d0 	ldrh.w	r1, [r7, #464]	; 0x1d0
 80045cc:	f8b7 21b0 	ldrh.w	r2, [r7, #432]	; 0x1b0
 80045d0:	f507 7000 	add.w	r0, r7, #512	; 0x200
 80045d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80045d8:	9303      	str	r3, [sp, #12]
 80045da:	4b86      	ldr	r3, [pc, #536]	; (80047f4 <secret_function+0x350>)
 80045dc:	9302      	str	r3, [sp, #8]
 80045de:	2311      	movs	r3, #17
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	2308      	movs	r3, #8
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	2308      	movs	r3, #8
 80045e8:	f7fd fc46 	bl	8001e78 <init_sprite>
			secret_data2);
	init_sprite(&secret_data7, x[1], y[1], 8, 16, SPRITE_SHOW | 0x02, pallete,
 80045ec:	f8b7 11d2 	ldrh.w	r1, [r7, #466]	; 0x1d2
 80045f0:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	; 0x1b2
 80045f4:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 80045f8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80045fc:	9303      	str	r3, [sp, #12]
 80045fe:	4b7d      	ldr	r3, [pc, #500]	; (80047f4 <secret_function+0x350>)
 8004600:	9302      	str	r3, [sp, #8]
 8004602:	2312      	movs	r3, #18
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	2310      	movs	r3, #16
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	2308      	movs	r3, #8
 800460c:	f7fd fc34 	bl	8001e78 <init_sprite>
			secret_data6);
	int secret_data4 = 1;
 8004610:	2301      	movs	r3, #1
 8004612:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	int secret_data5 = 1;
 8004616:	2301      	movs	r3, #1
 8004618:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
	while (secret_data4) {
 800461c:	e227      	b.n	8004a6e <secret_function+0x5ca>
		uint16_t *fb = lcd_get_active_buffer();
 800461e:	f7ff fdbb 	bl	8004198 <lcd_get_active_buffer>
 8004622:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274

		if (secret_data5) {
 8004626:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80c4 	beq.w	80047b8 <secret_function+0x314>
			secret_data3.x = x[0];
 8004630:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 8004634:	f8a7 3200 	strh.w	r3, [r7, #512]	; 0x200
			secret_data3.y = y[0];
 8004638:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 800463c:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
			render_sprite(fb, secret_data3);
 8004640:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800464c:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8004650:	f7fd fc55 	bl	8001efe <render_sprite>
			secret_data3.x = x[0] + 8;
 8004654:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 8004658:	3308      	adds	r3, #8
 800465a:	b29b      	uxth	r3, r3
 800465c:	f8a7 3200 	strh.w	r3, [r7, #512]	; 0x200
			render_sprite(fb, secret_data3);
 8004660:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800466c:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8004670:	f7fd fc45 	bl	8001efe <render_sprite>
			secret_data3.y = y[0] + 8;
 8004674:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 8004678:	3308      	adds	r3, #8
 800467a:	b29b      	uxth	r3, r3
 800467c:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
			render_sprite(fb, secret_data3);
 8004680:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800468c:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8004690:	f7fd fc35 	bl	8001efe <render_sprite>
			secret_data3.x = x[0];
 8004694:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 8004698:	f8a7 3200 	strh.w	r3, [r7, #512]	; 0x200
			render_sprite(fb, secret_data3);
 800469c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046a8:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 80046ac:	f7fd fc27 	bl	8001efe <render_sprite>
			if (x[0] == 112 && y[0] == 112) {
 80046b0:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80046b4:	2b70      	cmp	r3, #112	; 0x70
 80046b6:	d112      	bne.n	80046de <secret_function+0x23a>
 80046b8:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 80046bc:	2b70      	cmp	r3, #112	; 0x70
 80046be:	d10e      	bne.n	80046de <secret_function+0x23a>
				secret_data5 = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
				delay = 30;
 80046c6:	231e      	movs	r3, #30
 80046c8:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
				x[0] = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0
				y[0] = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	f8a7 31b0 	strh.w	r3, [r7, #432]	; 0x1b0
				dir = 5;
 80046d8:	2305      	movs	r3, #5
 80046da:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286
			}
			switch (dir) {
 80046de:	f897 3286 	ldrb.w	r3, [r7, #646]	; 0x286
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d865      	bhi.n	80047b2 <secret_function+0x30e>
 80046e6:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <secret_function+0x248>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	08004727 	.word	0x08004727
 80046f4:	08004751 	.word	0x08004751
 80046f8:	0800477b 	.word	0x0800477b
			case 0:
				x[0] = x[0] - 16;
 80046fc:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 8004700:	3b10      	subs	r3, #16
 8004702:	b29b      	uxth	r3, r3
 8004704:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0
				if (x[0] == min_x) {
 8004708:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 800470c:	f8b7 228c 	ldrh.w	r2, [r7, #652]	; 0x28c
 8004710:	429a      	cmp	r2, r3
 8004712:	d147      	bne.n	80047a4 <secret_function+0x300>
					dir = 1;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286
					max_y = max_y - 16;
 800471a:	f8b7 328a 	ldrh.w	r3, [r7, #650]	; 0x28a
 800471e:	3b10      	subs	r3, #16
 8004720:	f8a7 328a 	strh.w	r3, [r7, #650]	; 0x28a
				}
				break;
 8004724:	e03e      	b.n	80047a4 <secret_function+0x300>
			case 1:
				y[0] = y[0] - 16;
 8004726:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 800472a:	3b10      	subs	r3, #16
 800472c:	b29b      	uxth	r3, r3
 800472e:	f8a7 31b0 	strh.w	r3, [r7, #432]	; 0x1b0
				if (y[0] == min_y) {
 8004732:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 8004736:	f8b7 2288 	ldrh.w	r2, [r7, #648]	; 0x288
 800473a:	429a      	cmp	r2, r3
 800473c:	d134      	bne.n	80047a8 <secret_function+0x304>
					dir = 2;
 800473e:	2302      	movs	r3, #2
 8004740:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286
					min_x = min_x + 16;
 8004744:	f8b7 328c 	ldrh.w	r3, [r7, #652]	; 0x28c
 8004748:	3310      	adds	r3, #16
 800474a:	f8a7 328c 	strh.w	r3, [r7, #652]	; 0x28c
				}
				break;
 800474e:	e02b      	b.n	80047a8 <secret_function+0x304>
			case 2:
				x[0] = x[0] + 16;
 8004750:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 8004754:	3310      	adds	r3, #16
 8004756:	b29b      	uxth	r3, r3
 8004758:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0
				if (x[0] == max_x) {
 800475c:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 8004760:	f8b7 228e 	ldrh.w	r2, [r7, #654]	; 0x28e
 8004764:	429a      	cmp	r2, r3
 8004766:	d121      	bne.n	80047ac <secret_function+0x308>
					dir = 3;
 8004768:	2303      	movs	r3, #3
 800476a:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286
					min_y = min_y + 16;
 800476e:	f8b7 3288 	ldrh.w	r3, [r7, #648]	; 0x288
 8004772:	3310      	adds	r3, #16
 8004774:	f8a7 3288 	strh.w	r3, [r7, #648]	; 0x288
				}
				break;
 8004778:	e018      	b.n	80047ac <secret_function+0x308>
			case 3:
				y[0] = y[0] + 16;
 800477a:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 800477e:	3310      	adds	r3, #16
 8004780:	b29b      	uxth	r3, r3
 8004782:	f8a7 31b0 	strh.w	r3, [r7, #432]	; 0x1b0
				if (y[0] == max_y) {
 8004786:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 800478a:	f8b7 228a 	ldrh.w	r2, [r7, #650]	; 0x28a
 800478e:	429a      	cmp	r2, r3
 8004790:	d10e      	bne.n	80047b0 <secret_function+0x30c>
					dir = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286
					max_x = max_x - 16;
 8004798:	f8b7 328e 	ldrh.w	r3, [r7, #654]	; 0x28e
 800479c:	3b10      	subs	r3, #16
 800479e:	f8a7 328e 	strh.w	r3, [r7, #654]	; 0x28e
				}
				break;
 80047a2:	e005      	b.n	80047b0 <secret_function+0x30c>
				break;
 80047a4:	bf00      	nop
 80047a6:	e004      	b.n	80047b2 <secret_function+0x30e>
				break;
 80047a8:	bf00      	nop
 80047aa:	e002      	b.n	80047b2 <secret_function+0x30e>
				break;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <secret_function+0x30e>
				break;
 80047b0:	bf00      	nop
			}
			lcd_sync();
 80047b2:	f7ff fcd9 	bl	8004168 <lcd_sync>
 80047b6:	e137      	b.n	8004a28 <secret_function+0x584>
		} else {
			if (delay <= 0) {
 80047b8:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 8133 	bne.w	8004a28 <secret_function+0x584>
				LCD_Clear(fb, LCD_COLOR_BLACK);
 80047c2:	2100      	movs	r1, #0
 80047c4:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 80047c8:	f7fc feae 	bl	8001528 <LCD_Clear>
				for (i = 0; i < 100; ++i) {
 80047cc:	2300      	movs	r3, #0
 80047ce:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80047d2:	e02c      	b.n	800482e <secret_function+0x38a>
 80047d4:	08015e18 	.word	0x08015e18
 80047d8:	08015e38 	.word	0x08015e38
 80047dc:	08015e78 	.word	0x08015e78
 80047e0:	08015e98 	.word	0x08015e98
 80047e4:	08015eb8 	.word	0x08015eb8
 80047e8:	08015ec8 	.word	0x08015ec8
 80047ec:	66666667 	.word	0x66666667
 80047f0:	88888889 	.word	0x88888889
 80047f4:	20000020 	.word	0x20000020
					LCD_DrawPixel(fb, secret_data9[i], secret_dataA[i],
 80047f8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80047fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004800:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8004804:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8004808:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800480c:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8004810:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8004814:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800481c:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8004820:	f7fc fe56 	bl	80014d0 <LCD_DrawPixel>
				for (i = 0; i < 100; ++i) {
 8004824:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8004828:	3301      	adds	r3, #1
 800482a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800482e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8004832:	2b63      	cmp	r3, #99	; 0x63
 8004834:	dde0      	ble.n	80047f8 <secret_function+0x354>
							LCD_COLOR_WHITE);
				}
				LCD_SetBackColor(LCD_COLOR_BLACK);
 8004836:	2000      	movs	r0, #0
 8004838:	f7fc fe1a 	bl	8001470 <LCD_SetBackColor>
				LCD_SetTextColor(LCD_COLOR_ORANGE);
 800483c:	f64f 5080 	movw	r0, #64896	; 0xfd80
 8004840:	f7fc fe06 	bl	8001450 <LCD_SetTextColor>
				LCD_SetFont(&Font24);
 8004844:	488f      	ldr	r0, [pc, #572]	; (8004a84 <secret_function+0x5e0>)
 8004846:	f7fc fe23 	bl	8001490 <LCD_SetFont>
				LCD_DisplayStringAt(fb, 0, 96, (uint8_t*) "Thank you for\0",
 800484a:	2301      	movs	r3, #1
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	4b8e      	ldr	r3, [pc, #568]	; (8004a88 <secret_function+0x5e4>)
 8004850:	2260      	movs	r2, #96	; 0x60
 8004852:	2100      	movs	r1, #0
 8004854:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8004858:	f7fc fe80 	bl	800155c <LCD_DisplayStringAt>
						CENTER_MODE);
				LCD_DisplayStringAt(fb, 0, 120, (uint8_t*) "playing!\0",
 800485c:	2301      	movs	r3, #1
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	4b8a      	ldr	r3, [pc, #552]	; (8004a8c <secret_function+0x5e8>)
 8004862:	2278      	movs	r2, #120	; 0x78
 8004864:	2100      	movs	r1, #0
 8004866:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 800486a:	f7fc fe77 	bl	800155c <LCD_DisplayStringAt>
						CENTER_MODE);
				for (i = 0; i < secret_data8; ++i) {
 800486e:	2300      	movs	r3, #0
 8004870:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8004874:	e0d1      	b.n	8004a1a <secret_function+0x576>
					set_sprite_flip_x(&secret_data7, 0);
 8004876:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd fb23 	bl	8001ec8 <set_sprite_flip_x>
					secret_data7.x = x[i];
 8004882:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800488c:	443b      	add	r3, r7
 800488e:	f833 3cc8 	ldrh.w	r3, [r3, #-200]
 8004892:	f8a7 31f0 	strh.w	r3, [r7, #496]	; 0x1f0
					secret_data7.y = y[i];
 8004896:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80048a0:	443b      	add	r3, r7
 80048a2:	f833 3ce8 	ldrh.w	r3, [r3, #-232]
 80048a6:	f8a7 31f2 	strh.w	r3, [r7, #498]	; 0x1f2
					render_sprite(fb, secret_data7);
 80048aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80048b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048b6:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 80048ba:	f7fd fb20 	bl	8001efe <render_sprite>
					secret_data7.x = x[i] + 16;
 80048be:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80048c8:	443b      	add	r3, r7
 80048ca:	f833 3cc8 	ldrh.w	r3, [r3, #-200]
 80048ce:	3310      	adds	r3, #16
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f8a7 31f0 	strh.w	r3, [r7, #496]	; 0x1f0
					set_sprite_flip_x(&secret_data7, 1);
 80048d6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80048da:	2101      	movs	r1, #1
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd faf3 	bl	8001ec8 <set_sprite_flip_x>
					render_sprite(fb, secret_data7);
 80048e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80048ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048ee:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 80048f2:	f7fd fb04 	bl	8001efe <render_sprite>
					for (j = 0; j < 3; ++j) {
 80048f6:	2300      	movs	r3, #0
 80048f8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80048fc:	e083      	b.n	8004a06 <secret_function+0x562>
						if (y[i] == 0) {
 80048fe:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8004908:	443b      	add	r3, r7
 800490a:	f833 3ce8 	ldrh.w	r3, [r3, #-232]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d108      	bne.n	8004924 <secret_function+0x480>
							y_speed[i] = 1;
 8004912:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8004916:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800491a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800491e:	4413      	add	r3, r2
 8004920:	2201      	movs	r2, #1
 8004922:	701a      	strb	r2, [r3, #0]
						}
						if (y[i] == 208) {
 8004924:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800492e:	443b      	add	r3, r7
 8004930:	f833 3ce8 	ldrh.w	r3, [r3, #-232]
 8004934:	2bd0      	cmp	r3, #208	; 0xd0
 8004936:	d108      	bne.n	800494a <secret_function+0x4a6>
							y_speed[i] = -1;
 8004938:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800493c:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8004940:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8004944:	4413      	add	r3, r2
 8004946:	22ff      	movs	r2, #255	; 0xff
 8004948:	701a      	strb	r2, [r3, #0]
						}
						if (x[i] == 0) {
 800494a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8004954:	443b      	add	r3, r7
 8004956:	f833 3cc8 	ldrh.w	r3, [r3, #-200]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <secret_function+0x4c8>
							x_speed[i] = 1;
 800495e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004962:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8004966:	4413      	add	r3, r2
 8004968:	2201      	movs	r2, #1
 800496a:	701a      	strb	r2, [r3, #0]
						}
						if (x[i] == 288) {
 800496c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8004976:	443b      	add	r3, r7
 8004978:	f833 3cc8 	ldrh.w	r3, [r3, #-200]
 800497c:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8004980:	d106      	bne.n	8004990 <secret_function+0x4ec>
							x_speed[i] = -1;
 8004982:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004986:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800498a:	4413      	add	r3, r2
 800498c:	22ff      	movs	r2, #255	; 0xff
 800498e:	701a      	strb	r2, [r3, #0]
						}
						x[i] = x[i] + x_speed[i];
 8004990:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800499a:	443b      	add	r3, r7
 800499c:	f833 2cc8 	ldrh.w	r2, [r3, #-200]
 80049a0:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 80049a4:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80049a8:	440b      	add	r3, r1
 80049aa:	f993 3000 	ldrsb.w	r3, [r3]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80049be:	443b      	add	r3, r7
 80049c0:	f823 2cc8 	strh.w	r2, [r3, #-200]
						y[i] = y[i] + y_speed[i];
 80049c4:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80049ce:	443b      	add	r3, r7
 80049d0:	f833 2ce8 	ldrh.w	r2, [r3, #-232]
 80049d4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80049d8:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 80049dc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80049e0:	440b      	add	r3, r1
 80049e2:	f993 3000 	ldrsb.w	r3, [r3]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4413      	add	r3, r2
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80049f6:	443b      	add	r3, r7
 80049f8:	f823 2ce8 	strh.w	r2, [r3, #-232]
					for (j = 0; j < 3; ++j) {
 80049fc:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8004a00:	3301      	adds	r3, #1
 8004a02:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8004a06:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	f77f af77 	ble.w	80048fe <secret_function+0x45a>
				for (i = 0; i < secret_data8; ++i) {
 8004a10:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8004a14:	3301      	adds	r3, #1
 8004a16:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8004a1a:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8004a1e:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004a22:	429a      	cmp	r2, r3
 8004a24:	f6ff af27 	blt.w	8004876 <secret_function+0x3d2>
					}
				}
			}
		}

		uint32_t buttons = buttons_get();
 8004a28:	f7fe fcec 	bl	8003404 <buttons_get>
 8004a2c:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
		if (buttons & B_POWER) {
 8004a30:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8004a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <secret_function+0x59c>
			HAL_NVIC_SystemReset();
 8004a3c:	f004 f9cf 	bl	8008dde <HAL_NVIC_SystemReset>
		}
		if (delay <= 0) {
 8004a40:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <secret_function+0x5b8>
			if (buttons & ~B_POWER) {
 8004a48:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8004a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <secret_function+0x5c2>
				secret_data4 = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8004a5a:	e004      	b.n	8004a66 <secret_function+0x5c2>
			}
		} else {
			delay--;
 8004a5c:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8004a60:	3b01      	subs	r3, #1
 8004a62:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
		}

		lcd_swap();
 8004a66:	f7ff fb69 	bl	800413c <lcd_swap>
		lcd_wait_for_vblank();
 8004a6a:	f7ff fbc1 	bl	80041f0 <lcd_wait_for_vblank>
	while (secret_data4) {
 8004a6e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f47f add3 	bne.w	800461e <secret_function+0x17a>
	}
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	f507 7726 	add.w	r7, r7, #664	; 0x298
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bdb0      	pop	{r4, r5, r7, pc}
 8004a84:	20000018 	.word	0x20000018
 8004a88:	08015dfc 	.word	0x08015dfc
 8004a8c:	08015e0c 	.word	0x08015e0c

08004a90 <main_menu_init>:
int demo_ticks = 0;

int restart_game;
int in_main_menu;

void main_menu_init() {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
	if (restart_game) {
 8004a94:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <main_menu_init+0x54>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <main_menu_init+0x12>
		game_init();
 8004a9c:	f7fb fc78 	bl	8000390 <game_init>
		return;
 8004aa0:	e01e      	b.n	8004ae0 <main_menu_init+0x50>
	}
	demo_ticks = 0;
 8004aa2:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <main_menu_init+0x58>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
	in_main_menu = 1;
 8004aa8:	4b10      	ldr	r3, [pc, #64]	; (8004aec <main_menu_init+0x5c>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]
	action_delay = 20;
 8004aae:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <main_menu_init+0x60>)
 8004ab0:	2214      	movs	r2, #20
 8004ab2:	601a      	str	r2, [r3, #0]
	title_pallete_idx = 0;
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <main_menu_init+0x64>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8004aba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004abe:	f7fc fcc7 	bl	8001450 <LCD_SetTextColor>
	LCD_SetFont(&Font24);
 8004ac2:	480d      	ldr	r0, [pc, #52]	; (8004af8 <main_menu_init+0x68>)
 8004ac4:	f7fc fce4 	bl	8001490 <LCD_SetFont>
	LCD_SetFontScale(1);
 8004ac8:	2001      	movs	r0, #1
 8004aca:	f7fc fcf1 	bl	80014b0 <LCD_SetFontScale>
	while (in_main_menu) {
 8004ace:	e001      	b.n	8004ad4 <main_menu_init+0x44>
		main_menu_loop();
 8004ad0:	f000 f814 	bl	8004afc <main_menu_loop>
	while (in_main_menu) {
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <main_menu_init+0x5c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f9      	bne.n	8004ad0 <main_menu_init+0x40>
	}
	menu_select();
 8004adc:	f000 f9ba 	bl	8004e54 <menu_select>
}
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000258 	.word	0x20000258
 8004ae8:	20000254 	.word	0x20000254
 8004aec:	2000025c 	.word	0x2000025c
 8004af0:	2000024c 	.word	0x2000024c
 8004af4:	20000244 	.word	0x20000244
 8004af8:	20000018 	.word	0x20000018

08004afc <main_menu_loop>:

static void main_menu_loop() {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
	uint16_t *fb = lcd_get_active_buffer();
 8004b02:	f7ff fb49 	bl	8004198 <lcd_get_active_buffer>
 8004b06:	6078      	str	r0, [r7, #4]
	draw_background(fb);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f80d 	bl	8004b28 <draw_background>

	process_input();
 8004b0e:	f000 f92d 	bl	8004d6c <process_input>
	update();
 8004b12:	f000 f97b 	bl	8004e0c <update>

	lcd_swap();
 8004b16:	f7ff fb11 	bl	800413c <lcd_swap>
	lcd_wait_for_vblank();
 8004b1a:	f7ff fb69 	bl	80041f0 <lcd_wait_for_vblank>
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <draw_background>:

static void draw_background(uint16_t *buf) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
 8004b30:	2100      	movs	r1, #0
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fc fcf8 	bl	8001528 <LCD_Clear>

	if (ticks % 10 == 0) {
 8004b38:	4b81      	ldr	r3, [pc, #516]	; (8004d40 <draw_background+0x218>)
 8004b3a:	6819      	ldr	r1, [r3, #0]
 8004b3c:	4b81      	ldr	r3, [pc, #516]	; (8004d44 <draw_background+0x21c>)
 8004b3e:	fb83 2301 	smull	r2, r3, r3, r1
 8004b42:	109a      	asrs	r2, r3, #2
 8004b44:	17cb      	asrs	r3, r1, #31
 8004b46:	1ad2      	subs	r2, r2, r3
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	1aca      	subs	r2, r1, r3
 8004b52:	2a00      	cmp	r2, #0
 8004b54:	d105      	bne.n	8004b62 <draw_background+0x3a>
		title_pallete_idx--;
 8004b56:	4b7c      	ldr	r3, [pc, #496]	; (8004d48 <draw_background+0x220>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	4b7a      	ldr	r3, [pc, #488]	; (8004d48 <draw_background+0x220>)
 8004b60:	701a      	strb	r2, [r3, #0]
	}

	LCD_SetFontScale(3);
 8004b62:	2003      	movs	r0, #3
 8004b64:	f7fc fca4 	bl	80014b0 <LCD_SetFontScale>
	LCD_SetFont(&Font24);
 8004b68:	4878      	ldr	r0, [pc, #480]	; (8004d4c <draw_background+0x224>)
 8004b6a:	f7fc fc91 	bl	8001490 <LCD_SetFont>
	LCD_SetTextColor(title_pallete[(title_pallete_idx + 0) % 4]);
 8004b6e:	4b76      	ldr	r3, [pc, #472]	; (8004d48 <draw_background+0x220>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	4a76      	ldr	r2, [pc, #472]	; (8004d50 <draw_background+0x228>)
 8004b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fc fc67 	bl	8001450 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 40, 20, 'P');
 8004b82:	2350      	movs	r3, #80	; 0x50
 8004b84:	2214      	movs	r2, #20
 8004b86:	2128      	movs	r1, #40	; 0x28
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7fc fd89 	bl	80016a0 <LCD_DisplayChar>
	LCD_SetTextColor(title_pallete[(title_pallete_idx + 1) % 4]);
 8004b8e:	4b6e      	ldr	r3, [pc, #440]	; (8004d48 <draw_background+0x220>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	425a      	negs	r2, r3
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	f002 0203 	and.w	r2, r2, #3
 8004b9e:	bf58      	it	pl
 8004ba0:	4253      	negpl	r3, r2
 8004ba2:	4a6b      	ldr	r2, [pc, #428]	; (8004d50 <draw_background+0x228>)
 8004ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fc fc51 	bl	8001450 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 80, 20, 'o');
 8004bae:	236f      	movs	r3, #111	; 0x6f
 8004bb0:	2214      	movs	r2, #20
 8004bb2:	2150      	movs	r1, #80	; 0x50
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7fc fd73 	bl	80016a0 <LCD_DisplayChar>
	LCD_SetTextColor(title_pallete[(title_pallete_idx + 2) % 4]);
 8004bba:	4b63      	ldr	r3, [pc, #396]	; (8004d48 <draw_background+0x220>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	425a      	negs	r2, r3
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	f002 0203 	and.w	r2, r2, #3
 8004bca:	bf58      	it	pl
 8004bcc:	4253      	negpl	r3, r2
 8004bce:	4a60      	ldr	r2, [pc, #384]	; (8004d50 <draw_background+0x228>)
 8004bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fc fc3b 	bl	8001450 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 120, 20, 'n');
 8004bda:	236e      	movs	r3, #110	; 0x6e
 8004bdc:	2214      	movs	r2, #20
 8004bde:	2178      	movs	r1, #120	; 0x78
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fc fd5d 	bl	80016a0 <LCD_DisplayChar>
	LCD_SetTextColor(title_pallete[(title_pallete_idx + 3) % 4]);
 8004be6:	4b58      	ldr	r3, [pc, #352]	; (8004d48 <draw_background+0x220>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	3303      	adds	r3, #3
 8004bec:	425a      	negs	r2, r3
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	f002 0203 	and.w	r2, r2, #3
 8004bf6:	bf58      	it	pl
 8004bf8:	4253      	negpl	r3, r2
 8004bfa:	4a55      	ldr	r2, [pc, #340]	; (8004d50 <draw_background+0x228>)
 8004bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fc fc25 	bl	8001450 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 160, 20, 'g');
 8004c06:	2367      	movs	r3, #103	; 0x67
 8004c08:	2214      	movs	r2, #20
 8004c0a:	21a0      	movs	r1, #160	; 0xa0
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7fc fd47 	bl	80016a0 <LCD_DisplayChar>
	LCD_SetFontScale(1);
 8004c12:	2001      	movs	r0, #1
 8004c14:	f7fc fc4c 	bl	80014b0 <LCD_SetFontScale>

	LCD_FillRect(buf, 220, 64, 50, 8, LCD_COLOR_WHITE);
 8004c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	2308      	movs	r3, #8
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	2332      	movs	r3, #50	; 0x32
 8004c24:	2240      	movs	r2, #64	; 0x40
 8004c26:	21dc      	movs	r1, #220	; 0xdc
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fc ff65 	bl	8001af8 <LCD_FillRect>
	LCD_FillCircle(buf, 270, 40, 10, LCD_COLOR_WHITE);
 8004c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	230a      	movs	r3, #10
 8004c36:	2228      	movs	r2, #40	; 0x28
 8004c38:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fc ff8c 	bl	8001b5a <LCD_FillCircle>
	LCD_DrawLine(buf, 221, 40, 245, 64, LCD_COLOR_WHITE);
 8004c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c46:	9301      	str	r3, [sp, #4]
 8004c48:	2340      	movs	r3, #64	; 0x40
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	23f5      	movs	r3, #245	; 0xf5
 8004c4e:	2228      	movs	r2, #40	; 0x28
 8004c50:	21dd      	movs	r1, #221	; 0xdd
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fc fdae 	bl	80017b4 <LCD_DrawLine>
	LCD_DrawLine(buf, 269, 40, 245, 64, LCD_COLOR_WHITE);
 8004c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c5c:	9301      	str	r3, [sp, #4]
 8004c5e:	2340      	movs	r3, #64	; 0x40
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	23f5      	movs	r3, #245	; 0xf5
 8004c64:	2228      	movs	r2, #40	; 0x28
 8004c66:	f240 110d 	movw	r1, #269	; 0x10d
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc fda2 	bl	80017b4 <LCD_DrawLine>

	if (selected_item % 4 == 0) {
 8004c70:	4b38      	ldr	r3, [pc, #224]	; (8004d54 <draw_background+0x22c>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <draw_background+0x162>
		LCD_SetTextColor(selected_item_color);
 8004c7e:	4b36      	ldr	r3, [pc, #216]	; (8004d58 <draw_background+0x230>)
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fc fbe4 	bl	8001450 <LCD_SetTextColor>
 8004c88:	e003      	b.n	8004c92 <draw_background+0x16a>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 8004c8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004c8e:	f7fc fbdf 	bl	8001450 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Start\0", CENTER_MODE);
 8004c92:	2301      	movs	r3, #1
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	4b31      	ldr	r3, [pc, #196]	; (8004d5c <draw_background+0x234>)
 8004c98:	226e      	movs	r2, #110	; 0x6e
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7fc fc5d 	bl	800155c <LCD_DisplayStringAt>
	if (selected_item % 4 == 1) {
 8004ca2:	4b2c      	ldr	r3, [pc, #176]	; (8004d54 <draw_background+0x22c>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d105      	bne.n	8004cbc <draw_background+0x194>
		LCD_SetTextColor(selected_item_color);
 8004cb0:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <draw_background+0x230>)
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fc fbcb 	bl	8001450 <LCD_SetTextColor>
 8004cba:	e003      	b.n	8004cc4 <draw_background+0x19c>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 8004cbc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004cc0:	f7fc fbc6 	bl	8001450 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 140, (uint8_t*) "Settings\0", CENTER_MODE);
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <draw_background+0x238>)
 8004cca:	228c      	movs	r2, #140	; 0x8c
 8004ccc:	2100      	movs	r1, #0
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc fc44 	bl	800155c <LCD_DisplayStringAt>
	if (selected_item % 4 == 2) {
 8004cd4:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <draw_background+0x22c>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d105      	bne.n	8004cee <draw_background+0x1c6>
		LCD_SetTextColor(selected_item_color);
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <draw_background+0x230>)
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fc fbb2 	bl	8001450 <LCD_SetTextColor>
 8004cec:	e003      	b.n	8004cf6 <draw_background+0x1ce>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 8004cee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004cf2:	f7fc fbad 	bl	8001450 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 170, (uint8_t*) "About\0", CENTER_MODE);
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <draw_background+0x23c>)
 8004cfc:	22aa      	movs	r2, #170	; 0xaa
 8004cfe:	2100      	movs	r1, #0
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7fc fc2b 	bl	800155c <LCD_DisplayStringAt>
	if (selected_item % 4 == 3) {
 8004d06:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <draw_background+0x22c>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d105      	bne.n	8004d20 <draw_background+0x1f8>
		LCD_SetTextColor(selected_item_color);
 8004d14:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <draw_background+0x230>)
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fc fb99 	bl	8001450 <LCD_SetTextColor>
 8004d1e:	e003      	b.n	8004d28 <draw_background+0x200>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 8004d20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004d24:	f7fc fb94 	bl	8001450 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 200, (uint8_t*) "Exit\0", CENTER_MODE);
 8004d28:	2301      	movs	r3, #1
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <draw_background+0x240>)
 8004d2e:	22c8      	movs	r2, #200	; 0xc8
 8004d30:	2100      	movs	r1, #0
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fc fc12 	bl	800155c <LCD_DisplayStringAt>
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20000248 	.word	0x20000248
 8004d44:	66666667 	.word	0x66666667
 8004d48:	20000244 	.word	0x20000244
 8004d4c:	20000018 	.word	0x20000018
 8004d50:	200000a8 	.word	0x200000a8
 8004d54:	20000250 	.word	0x20000250
 8004d58:	200000b0 	.word	0x200000b0
 8004d5c:	08015ed8 	.word	0x08015ed8
 8004d60:	08015ee0 	.word	0x08015ee0
 8004d64:	08015eec 	.word	0x08015eec
 8004d68:	08015ef4 	.word	0x08015ef4

08004d6c <process_input>:

static void process_input() {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
 8004d72:	f7fe fb47 	bl	8003404 <buttons_get>
 8004d76:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <process_input+0x1a>
		HAL_NVIC_SystemReset();
 8004d82:	f004 f82c 	bl	8008dde <HAL_NVIC_SystemReset>
	}
	if (buttons & ~B_POWER) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <process_input+0x2a>
		demo_ticks = 0;
 8004d90:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <process_input+0x90>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
	}
	if (action_delay <= 0) {
 8004d96:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <process_input+0x94>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	dc24      	bgt.n	8004de8 <process_input+0x7c>
		if (buttons & B_Up) {
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <process_input+0x4e>
			selected_item--;
 8004da8:	4b16      	ldr	r3, [pc, #88]	; (8004e04 <process_input+0x98>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <process_input+0x98>)
 8004db2:	701a      	strb	r2, [r3, #0]
			action_delay = 10;
 8004db4:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <process_input+0x94>)
 8004db6:	220a      	movs	r2, #10
 8004db8:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_Down) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <process_input+0x6a>
			selected_item++;
 8004dc4:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <process_input+0x98>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <process_input+0x98>)
 8004dce:	701a      	strb	r2, [r3, #0]
			action_delay = 10;
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <process_input+0x94>)
 8004dd2:	220a      	movs	r2, #10
 8004dd4:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_A) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <process_input+0x86>
			in_main_menu = 0;
 8004de0:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <process_input+0x9c>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
		}
	} else {
		action_delay--;
	}
}
 8004de6:	e004      	b.n	8004df2 <process_input+0x86>
		action_delay--;
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <process_input+0x94>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	4a04      	ldr	r2, [pc, #16]	; (8004e00 <process_input+0x94>)
 8004df0:	6013      	str	r3, [r2, #0]
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000254 	.word	0x20000254
 8004e00:	2000024c 	.word	0x2000024c
 8004e04:	20000250 	.word	0x20000250
 8004e08:	2000025c 	.word	0x2000025c

08004e0c <update>:

static void update() {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
	ticks++;
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <update+0x38>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	4a0b      	ldr	r2, [pc, #44]	; (8004e44 <update+0x38>)
 8004e18:	6013      	str	r3, [r2, #0]
	demo_ticks++;
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <update+0x3c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	4a09      	ldr	r2, [pc, #36]	; (8004e48 <update+0x3c>)
 8004e22:	6013      	str	r3, [r2, #0]
	if (demo_ticks > 1000) {
 8004e24:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <update+0x3c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e2c:	dd07      	ble.n	8004e3e <update+0x32>
		in_demo = 1;
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <update+0x40>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
		game_init();
 8004e34:	f7fb faac 	bl	8000390 <game_init>
		action_delay = 20;
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <update+0x44>)
 8004e3a:	2214      	movs	r2, #20
 8004e3c:	601a      	str	r2, [r3, #0]
	}
}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000248 	.word	0x20000248
 8004e48:	20000254 	.word	0x20000254
 8004e4c:	20000200 	.word	0x20000200
 8004e50:	2000024c 	.word	0x2000024c

08004e54 <menu_select>:

static void menu_select() {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
	switch (selected_item % 4) {
 8004e58:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <menu_select+0x48>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d817      	bhi.n	8004e94 <menu_select+0x40>
 8004e64:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <menu_select+0x18>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004e7d 	.word	0x08004e7d
 8004e70:	08004e83 	.word	0x08004e83
 8004e74:	08004e89 	.word	0x08004e89
 8004e78:	08004e8f 	.word	0x08004e8f
	case 0:
		game_init();
 8004e7c:	f7fb fa88 	bl	8000390 <game_init>
		break;
 8004e80:	e009      	b.n	8004e96 <menu_select+0x42>
	case 1:
		settings_menu_init();
 8004e82:	f000 f80d 	bl	8004ea0 <settings_menu_init>
		break;
 8004e86:	e006      	b.n	8004e96 <menu_select+0x42>
	case 2:
		about_menu_init();
 8004e88:	f7ff f9c8 	bl	800421c <about_menu_init>
		break;
 8004e8c:	e003      	b.n	8004e96 <menu_select+0x42>
	case 3:
		HAL_NVIC_SystemReset();
 8004e8e:	f003 ffa6 	bl	8008dde <HAL_NVIC_SystemReset>
		break;
 8004e92:	e000      	b.n	8004e96 <menu_select+0x42>
	default:
		break;
 8004e94:	bf00      	nop
	}
}
 8004e96:	bf00      	nop
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000250 	.word	0x20000250

08004ea0 <settings_menu_init>:
LCD_COLOR_MAGENTA, LCD_COLOR_BROWN, LCD_COLOR_ORANGE,
LCD_COLOR_LIGHTRED, LCD_COLOR_LIGHTGREEN, LCD_COLOR_LIGHTBLUE,
LCD_COLOR_LIGHTMAGENTA, LCD_COLOR_DARKRED, LCD_COLOR_DARKGREEN,
LCD_COLOR_DARKBLUE, LCD_COLOR_DARKMAGENTA };

void settings_menu_init() {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
	action_delay = 10;
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <settings_menu_init+0x40>)
 8004ea6:	220a      	movs	r2, #10
 8004ea8:	601a      	str	r2, [r3, #0]
	selected_item = 0;
 8004eaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <settings_menu_init+0x44>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
	in_settings_menu = 1;
 8004eb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <settings_menu_init+0x48>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8004eb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004eba:	f7fc fac9 	bl	8001450 <LCD_SetTextColor>
	LCD_SetFont(&Font24);
 8004ebe:	480b      	ldr	r0, [pc, #44]	; (8004eec <settings_menu_init+0x4c>)
 8004ec0:	f7fc fae6 	bl	8001490 <LCD_SetFont>
	LCD_SetFontScale(1);
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	f7fc faf3 	bl	80014b0 <LCD_SetFontScale>
	while (in_settings_menu) {
 8004eca:	e001      	b.n	8004ed0 <settings_menu_init+0x30>
		settings_menu_loop();
 8004ecc:	f000 f810 	bl	8004ef0 <settings_menu_loop>
	while (in_settings_menu) {
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <settings_menu_init+0x48>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f9      	bne.n	8004ecc <settings_menu_init+0x2c>
	}
	//main_menu_init();
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000268 	.word	0x20000268
 8004ee4:	2000026c 	.word	0x2000026c
 8004ee8:	200000b8 	.word	0x200000b8
 8004eec:	20000018 	.word	0x20000018

08004ef0 <settings_menu_loop>:
static void settings_menu_loop() {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
	uint16_t *fb = lcd_get_active_buffer();
 8004ef6:	f7ff f94f 	bl	8004198 <lcd_get_active_buffer>
 8004efa:	6078      	str	r0, [r7, #4]
	draw_background(fb);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f883 	bl	8005008 <draw_background>

	process_input();
 8004f02:	f000 f80b 	bl	8004f1c <process_input>
	update();
 8004f06:	f000 f871 	bl	8004fec <update>

	lcd_swap();
 8004f0a:	f7ff f917 	bl	800413c <lcd_swap>
	lcd_wait_for_vblank();
 8004f0e:	f7ff f96f 	bl	80041f0 <lcd_wait_for_vblank>
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <process_input>:

static void process_input() {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
 8004f22:	f7fe fa6f 	bl	8003404 <buttons_get>
 8004f26:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <process_input+0x1a>
		HAL_NVIC_SystemReset();
 8004f32:	f003 ff54 	bl	8008dde <HAL_NVIC_SystemReset>
	}
	if (action_delay <= 0) {
 8004f36:	4b2a      	ldr	r3, [pc, #168]	; (8004fe0 <process_input+0xc4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	dc3e      	bgt.n	8004fbc <process_input+0xa0>
		if (buttons & B_Up) {
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <process_input+0x3e>
			selected_item--;
 8004f48:	4b26      	ldr	r3, [pc, #152]	; (8004fe4 <process_input+0xc8>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <process_input+0xc8>)
 8004f52:	701a      	strb	r2, [r3, #0]
			action_delay = 10;
 8004f54:	4b22      	ldr	r3, [pc, #136]	; (8004fe0 <process_input+0xc4>)
 8004f56:	220a      	movs	r2, #10
 8004f58:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_Down) {
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <process_input+0x5a>
			selected_item++;
 8004f64:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <process_input+0xc8>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <process_input+0xc8>)
 8004f6e:	701a      	strb	r2, [r3, #0]
			action_delay = 10;
 8004f70:	4b1b      	ldr	r3, [pc, #108]	; (8004fe0 <process_input+0xc4>)
 8004f72:	220a      	movs	r2, #10
 8004f74:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_Left) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d006      	beq.n	8004f8e <process_input+0x72>
			action_delay = 10;
 8004f80:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <process_input+0xc4>)
 8004f82:	220a      	movs	r2, #10
 8004f84:	601a      	str	r2, [r3, #0]
			change_settings(-1);
 8004f86:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8a:	f000 f931 	bl	80051f0 <change_settings>
		}
		if (buttons & B_Right) {
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <process_input+0x88>
			action_delay = 10;
 8004f98:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <process_input+0xc4>)
 8004f9a:	220a      	movs	r2, #10
 8004f9c:	601a      	str	r2, [r3, #0]
			change_settings(1);
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	f000 f926 	bl	80051f0 <change_settings>
		}
		if (buttons & B_A) {
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <process_input+0xaa>
			action_delay = 10;
 8004fae:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <process_input+0xc4>)
 8004fb0:	220a      	movs	r2, #10
 8004fb2:	601a      	str	r2, [r3, #0]
			change_settings(1);
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	f000 f91b 	bl	80051f0 <change_settings>
 8004fba:	e004      	b.n	8004fc6 <process_input+0xaa>
		}
	} else {
		action_delay--;
 8004fbc:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <process_input+0xc4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	4a07      	ldr	r2, [pc, #28]	; (8004fe0 <process_input+0xc4>)
 8004fc4:	6013      	str	r3, [r2, #0]
	}
	if (buttons & B_B) {
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <process_input+0xba>
		in_settings_menu = 0;
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <process_input+0xcc>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
	}
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000268 	.word	0x20000268
 8004fe4:	2000026c 	.word	0x2000026c
 8004fe8:	200000b8 	.word	0x200000b8

08004fec <update>:

static void update() {
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
	ticks++;
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <update+0x18>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	4a03      	ldr	r2, [pc, #12]	; (8005004 <update+0x18>)
 8004ff8:	6013      	str	r3, [r2, #0]
}
 8004ffa:	bf00      	nop
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	20000264 	.word	0x20000264

08005008 <draw_background>:

static void draw_background(uint16_t *buf) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af02      	add	r7, sp, #8
 800500e:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
 8005010:	2100      	movs	r1, #0
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fc fa88 	bl	8001528 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8005018:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800501c:	f7fc fa18 	bl	8001450 <LCD_SetTextColor>
	LCD_SetFontScale(2);
 8005020:	2002      	movs	r0, #2
 8005022:	f7fc fa45 	bl	80014b0 <LCD_SetFontScale>
	LCD_DisplayChar(buf, 40, 20, 'S');
 8005026:	2353      	movs	r3, #83	; 0x53
 8005028:	2214      	movs	r2, #20
 800502a:	2128      	movs	r1, #40	; 0x28
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7fc fb37 	bl	80016a0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 70, 20, 'e');
 8005032:	2365      	movs	r3, #101	; 0x65
 8005034:	2214      	movs	r2, #20
 8005036:	2146      	movs	r1, #70	; 0x46
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7fc fb31 	bl	80016a0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 100, 20, 't');
 800503e:	2374      	movs	r3, #116	; 0x74
 8005040:	2214      	movs	r2, #20
 8005042:	2164      	movs	r1, #100	; 0x64
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7fc fb2b 	bl	80016a0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 130, 20, 't');
 800504a:	2374      	movs	r3, #116	; 0x74
 800504c:	2214      	movs	r2, #20
 800504e:	2182      	movs	r1, #130	; 0x82
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7fc fb25 	bl	80016a0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 160, 20, 'i');
 8005056:	2369      	movs	r3, #105	; 0x69
 8005058:	2214      	movs	r2, #20
 800505a:	21a0      	movs	r1, #160	; 0xa0
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7fc fb1f 	bl	80016a0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 190, 20, 'n');
 8005062:	236e      	movs	r3, #110	; 0x6e
 8005064:	2214      	movs	r2, #20
 8005066:	21be      	movs	r1, #190	; 0xbe
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fc fb19 	bl	80016a0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 220, 20, 'g');
 800506e:	2367      	movs	r3, #103	; 0x67
 8005070:	2214      	movs	r2, #20
 8005072:	21dc      	movs	r1, #220	; 0xdc
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7fc fb13 	bl	80016a0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 250, 20, 's');
 800507a:	2373      	movs	r3, #115	; 0x73
 800507c:	2214      	movs	r2, #20
 800507e:	21fa      	movs	r1, #250	; 0xfa
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7fc fb0d 	bl	80016a0 <LCD_DisplayChar>
	LCD_SetFontScale(1);
 8005086:	2001      	movs	r0, #1
 8005088:	f7fc fa12 	bl	80014b0 <LCD_SetFontScale>

	if (selected_item % 4 == 0) {
 800508c:	4b4d      	ldr	r3, [pc, #308]	; (80051c4 <draw_background+0x1bc>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d105      	bne.n	80050a6 <draw_background+0x9e>
		LCD_SetTextColor(selected_item_color);
 800509a:	4b4b      	ldr	r3, [pc, #300]	; (80051c8 <draw_background+0x1c0>)
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fc f9d6 	bl	8001450 <LCD_SetTextColor>
 80050a4:	e003      	b.n	80050ae <draw_background+0xa6>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 80050a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80050aa:	f7fc f9d1 	bl	8001450 <LCD_SetTextColor>
	}
	switch (difficulty) {
 80050ae:	4b47      	ldr	r3, [pc, #284]	; (80051cc <draw_background+0x1c4>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d018      	beq.n	80050e8 <draw_background+0xe0>
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	dc1f      	bgt.n	80050fa <draw_background+0xf2>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <draw_background+0xbc>
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d009      	beq.n	80050d6 <draw_background+0xce>
	case HARD:
		LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Difficulty: HARD\0",
				CENTER_MODE);
		break;
	default:
		break;
 80050c2:	e01a      	b.n	80050fa <draw_background+0xf2>
		LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Difficulty: EASY\0",
 80050c4:	2301      	movs	r3, #1
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	4b41      	ldr	r3, [pc, #260]	; (80051d0 <draw_background+0x1c8>)
 80050ca:	226e      	movs	r2, #110	; 0x6e
 80050cc:	2100      	movs	r1, #0
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fc fa44 	bl	800155c <LCD_DisplayStringAt>
		break;
 80050d4:	e012      	b.n	80050fc <draw_background+0xf4>
		LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Difficulty: MEDIUM\0",
 80050d6:	2301      	movs	r3, #1
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	4b3e      	ldr	r3, [pc, #248]	; (80051d4 <draw_background+0x1cc>)
 80050dc:	226e      	movs	r2, #110	; 0x6e
 80050de:	2100      	movs	r1, #0
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7fc fa3b 	bl	800155c <LCD_DisplayStringAt>
		break;
 80050e6:	e009      	b.n	80050fc <draw_background+0xf4>
		LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Difficulty: HARD\0",
 80050e8:	2301      	movs	r3, #1
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	4b3a      	ldr	r3, [pc, #232]	; (80051d8 <draw_background+0x1d0>)
 80050ee:	226e      	movs	r2, #110	; 0x6e
 80050f0:	2100      	movs	r1, #0
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fc fa32 	bl	800155c <LCD_DisplayStringAt>
		break;
 80050f8:	e000      	b.n	80050fc <draw_background+0xf4>
		break;
 80050fa:	bf00      	nop
	}
	if (selected_item % 4 == 1) {
 80050fc:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <draw_background+0x1bc>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b01      	cmp	r3, #1
 8005108:	d105      	bne.n	8005116 <draw_background+0x10e>
		LCD_SetTextColor(selected_item_color);
 800510a:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <draw_background+0x1c0>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7fc f99e 	bl	8001450 <LCD_SetTextColor>
 8005114:	e003      	b.n	800511e <draw_background+0x116>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 8005116:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800511a:	f7fc f999 	bl	8001450 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 140, (uint8_t*) "Paddle color:   \0",
 800511e:	2301      	movs	r3, #1
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	4b2e      	ldr	r3, [pc, #184]	; (80051dc <draw_background+0x1d4>)
 8005124:	228c      	movs	r2, #140	; 0x8c
 8005126:	2100      	movs	r1, #0
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7fc fa17 	bl	800155c <LCD_DisplayStringAt>
			CENTER_MODE);
	LCD_FillRect(buf, 250, 150, 50, 8, paddle_color);
 800512e:	4b2c      	ldr	r3, [pc, #176]	; (80051e0 <draw_background+0x1d8>)
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	2308      	movs	r3, #8
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	2332      	movs	r3, #50	; 0x32
 800513a:	2296      	movs	r2, #150	; 0x96
 800513c:	21fa      	movs	r1, #250	; 0xfa
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fc fcda 	bl	8001af8 <LCD_FillRect>
	if (selected_item % 4 == 2) {
 8005144:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <draw_background+0x1bc>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d105      	bne.n	800515e <draw_background+0x156>
		LCD_SetTextColor(selected_item_color);
 8005152:	4b1d      	ldr	r3, [pc, #116]	; (80051c8 <draw_background+0x1c0>)
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f7fc f97a 	bl	8001450 <LCD_SetTextColor>
 800515c:	e003      	b.n	8005166 <draw_background+0x15e>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 800515e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005162:	f7fc f975 	bl	8001450 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 170, (uint8_t*) "Ball color: \0", CENTER_MODE);
 8005166:	2301      	movs	r3, #1
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	4b1e      	ldr	r3, [pc, #120]	; (80051e4 <draw_background+0x1dc>)
 800516c:	22aa      	movs	r2, #170	; 0xaa
 800516e:	2100      	movs	r1, #0
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fc f9f3 	bl	800155c <LCD_DisplayStringAt>
	LCD_FillCircle(buf, 275, 180, 10, ball_color);
 8005176:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <draw_background+0x1e0>)
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	230a      	movs	r3, #10
 800517e:	22b4      	movs	r2, #180	; 0xb4
 8005180:	f240 1113 	movw	r1, #275	; 0x113
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7fc fce8 	bl	8001b5a <LCD_FillCircle>
	if (selected_item % 4 == 3) {
 800518a:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <draw_background+0x1bc>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b03      	cmp	r3, #3
 8005196:	d105      	bne.n	80051a4 <draw_background+0x19c>
		LCD_SetTextColor(selected_item_color);
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <draw_background+0x1c0>)
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f7fc f957 	bl	8001450 <LCD_SetTextColor>
 80051a2:	e003      	b.n	80051ac <draw_background+0x1a4>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
 80051a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80051a8:	f7fc f952 	bl	8001450 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 200, (uint8_t*) "Back\0", CENTER_MODE);
 80051ac:	2301      	movs	r3, #1
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <draw_background+0x1e4>)
 80051b2:	22c8      	movs	r2, #200	; 0xc8
 80051b4:	2100      	movs	r1, #0
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fc f9d0 	bl	800155c <LCD_DisplayStringAt>
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	2000026c 	.word	0x2000026c
 80051c8:	200000bc 	.word	0x200000bc
 80051cc:	20000260 	.word	0x20000260
 80051d0:	08015efc 	.word	0x08015efc
 80051d4:	08015f10 	.word	0x08015f10
 80051d8:	08015f24 	.word	0x08015f24
 80051dc:	08015f38 	.word	0x08015f38
 80051e0:	200000b2 	.word	0x200000b2
 80051e4:	08015f4c 	.word	0x08015f4c
 80051e8:	200000b4 	.word	0x200000b4
 80051ec:	08015f5c 	.word	0x08015f5c

080051f0 <change_settings>:

static void change_settings(int dir) {
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	switch (selected_item % 4) {
 80051f8:	4b45      	ldr	r3, [pc, #276]	; (8005310 <change_settings+0x120>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	2b03      	cmp	r3, #3
 8005202:	d87d      	bhi.n	8005300 <change_settings+0x110>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <change_settings+0x1c>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	0800521d 	.word	0x0800521d
 8005210:	08005279 	.word	0x08005279
 8005214:	080052b9 	.word	0x080052b9
 8005218:	080052f9 	.word	0x080052f9
	case 0:
		switch (difficulty) {
 800521c:	4b3d      	ldr	r3, [pc, #244]	; (8005314 <change_settings+0x124>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d01c      	beq.n	800525e <change_settings+0x6e>
 8005224:	2b02      	cmp	r3, #2
 8005226:	dc25      	bgt.n	8005274 <change_settings+0x84>
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <change_settings+0x42>
 800522c:	2b01      	cmp	r3, #1
 800522e:	d00b      	beq.n	8005248 <change_settings+0x58>
			} else {
				difficulty = MEDIUM;
			}
			break;
		default:
			break;
 8005230:	e020      	b.n	8005274 <change_settings+0x84>
			if (dir > 0) {
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	dd03      	ble.n	8005240 <change_settings+0x50>
				difficulty = MEDIUM;
 8005238:	4b36      	ldr	r3, [pc, #216]	; (8005314 <change_settings+0x124>)
 800523a:	2201      	movs	r2, #1
 800523c:	701a      	strb	r2, [r3, #0]
			break;
 800523e:	e01a      	b.n	8005276 <change_settings+0x86>
				difficulty = HARD;
 8005240:	4b34      	ldr	r3, [pc, #208]	; (8005314 <change_settings+0x124>)
 8005242:	2202      	movs	r2, #2
 8005244:	701a      	strb	r2, [r3, #0]
			break;
 8005246:	e016      	b.n	8005276 <change_settings+0x86>
			if (dir > 0) {
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	dd03      	ble.n	8005256 <change_settings+0x66>
				difficulty = HARD;
 800524e:	4b31      	ldr	r3, [pc, #196]	; (8005314 <change_settings+0x124>)
 8005250:	2202      	movs	r2, #2
 8005252:	701a      	strb	r2, [r3, #0]
			break;
 8005254:	e00f      	b.n	8005276 <change_settings+0x86>
				difficulty = EASY;
 8005256:	4b2f      	ldr	r3, [pc, #188]	; (8005314 <change_settings+0x124>)
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
			break;
 800525c:	e00b      	b.n	8005276 <change_settings+0x86>
			if (dir > 0) {
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	dd03      	ble.n	800526c <change_settings+0x7c>
				difficulty = EASY;
 8005264:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <change_settings+0x124>)
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
			break;
 800526a:	e004      	b.n	8005276 <change_settings+0x86>
				difficulty = MEDIUM;
 800526c:	4b29      	ldr	r3, [pc, #164]	; (8005314 <change_settings+0x124>)
 800526e:	2201      	movs	r2, #1
 8005270:	701a      	strb	r2, [r3, #0]
			break;
 8005272:	e000      	b.n	8005276 <change_settings+0x86>
			break;
 8005274:	bf00      	nop
		}
		break;
 8005276:	e044      	b.n	8005302 <change_settings+0x112>
	case 1:
		if (dir > 0) {
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	dd06      	ble.n	800528c <change_settings+0x9c>
			paddle_color_idx++;
 800527e:	4b26      	ldr	r3, [pc, #152]	; (8005318 <change_settings+0x128>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	b2da      	uxtb	r2, r3
 8005286:	4b24      	ldr	r3, [pc, #144]	; (8005318 <change_settings+0x128>)
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	e005      	b.n	8005298 <change_settings+0xa8>
		} else {
			paddle_color_idx--;
 800528c:	4b22      	ldr	r3, [pc, #136]	; (8005318 <change_settings+0x128>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	3b01      	subs	r3, #1
 8005292:	b2da      	uxtb	r2, r3
 8005294:	4b20      	ldr	r3, [pc, #128]	; (8005318 <change_settings+0x128>)
 8005296:	701a      	strb	r2, [r3, #0]
		}
		paddle_color_idx = paddle_color_idx % 16;
 8005298:	4b1f      	ldr	r3, [pc, #124]	; (8005318 <change_settings+0x128>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	4b1d      	ldr	r3, [pc, #116]	; (8005318 <change_settings+0x128>)
 80052a4:	701a      	strb	r2, [r3, #0]
		paddle_color = settings_color_pallete[paddle_color_idx];
 80052a6:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <change_settings+0x128>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b1b      	ldr	r3, [pc, #108]	; (800531c <change_settings+0x12c>)
 80052ae:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80052b2:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <change_settings+0x130>)
 80052b4:	801a      	strh	r2, [r3, #0]
		break;
 80052b6:	e024      	b.n	8005302 <change_settings+0x112>
	case 2:
		if (dir > 0) {
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	dd06      	ble.n	80052cc <change_settings+0xdc>
			ball_color_idx++;
 80052be:	4b19      	ldr	r3, [pc, #100]	; (8005324 <change_settings+0x134>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	3301      	adds	r3, #1
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	4b17      	ldr	r3, [pc, #92]	; (8005324 <change_settings+0x134>)
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	e005      	b.n	80052d8 <change_settings+0xe8>
		} else {
			ball_color_idx--;
 80052cc:	4b15      	ldr	r3, [pc, #84]	; (8005324 <change_settings+0x134>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	4b13      	ldr	r3, [pc, #76]	; (8005324 <change_settings+0x134>)
 80052d6:	701a      	strb	r2, [r3, #0]
		}
		ball_color_idx = ball_color_idx % 16;
 80052d8:	4b12      	ldr	r3, [pc, #72]	; (8005324 <change_settings+0x134>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	4b10      	ldr	r3, [pc, #64]	; (8005324 <change_settings+0x134>)
 80052e4:	701a      	strb	r2, [r3, #0]
		ball_color = settings_color_pallete[ball_color_idx];
 80052e6:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <change_settings+0x134>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <change_settings+0x12c>)
 80052ee:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80052f2:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <change_settings+0x138>)
 80052f4:	801a      	strh	r2, [r3, #0]
		break;
 80052f6:	e004      	b.n	8005302 <change_settings+0x112>
	case 3:
		in_settings_menu = 0;
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <change_settings+0x13c>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
		break;
 80052fe:	e000      	b.n	8005302 <change_settings+0x112>
	default:
		break;
 8005300:	bf00      	nop
	}
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	2000026c 	.word	0x2000026c
 8005314:	20000260 	.word	0x20000260
 8005318:	2000026d 	.word	0x2000026d
 800531c:	200000c0 	.word	0x200000c0
 8005320:	200000b2 	.word	0x200000b2
 8005324:	2000026e 	.word	0x2000026e
 8005328:	200000b4 	.word	0x200000b4
 800532c:	200000b8 	.word	0x200000b8

08005330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005336:	f001 fc6b 	bl	8006c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800533a:	f000 f86b 	bl	8005414 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800533e:	f000 f8eb 	bl	8005518 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005342:	f000 fc91 	bl	8005c68 <MX_GPIO_Init>
  MX_DMA_Init();
 8005346:	f000 fc6f 	bl	8005c28 <MX_DMA_Init>
  MX_LTDC_Init();
 800534a:	f000 fa2d 	bl	80057a8 <MX_LTDC_Init>
  MX_SPI2_Init();
 800534e:	f000 fbc1 	bl	8005ad4 <MX_SPI2_Init>
  MX_OCTOSPI1_Init();
 8005352:	f000 faa9 	bl	80058a8 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
 8005356:	f000 fb87 	bl	8005a68 <MX_SAI1_Init>
  MX_RTC_Init();
 800535a:	f000 fb05 	bl	8005968 <MX_RTC_Init>
  MX_DAC1_Init();
 800535e:	f000 f997 	bl	8005690 <MX_DAC1_Init>
  MX_DAC2_Init();
 8005362:	f000 f9d1 	bl	8005708 <MX_DAC2_Init>
  MX_ADC1_Init();
 8005366:	f000 f91b 	bl	80055a0 <MX_ADC1_Init>
  MX_TIM1_Init();
 800536a:	f000 fc09 	bl	8005b80 <MX_TIM1_Init>
  MX_DMA2D_Init();
 800536e:	f000 f9fd 	bl	800576c <MX_DMA2D_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005372:	f000 f909 	bl	8005588 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	lcd_init(&hspi2, &hltdc);
 8005376:	4922      	ldr	r1, [pc, #136]	; (8005400 <main+0xd0>)
 8005378:	4822      	ldr	r0, [pc, #136]	; (8005404 <main+0xd4>)
 800537a:	f7fe fd5b 	bl	8003e34 <lcd_init>
	lcd_backlight_set(backlightLevels[6]);
 800537e:	23b2      	movs	r3, #178	; 0xb2
 8005380:	4618      	mov	r0, r3
 8005382:	f7fe fd2b 	bl	8003ddc <lcd_backlight_set>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	OSPI_Init(&hospi1);
 8005386:	4820      	ldr	r0, [pc, #128]	; (8005408 <main+0xd8>)
 8005388:	f7fe fc78 	bl	8003c7c <OSPI_Init>

	// Sanity check, sometimes this is triggered
	uint32_t add = 0x90000000;
 800538c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8005390:	61fb      	str	r3, [r7, #28]
	uint32_t *ptr = (uint32_t*) add;
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	61bb      	str	r3, [r7, #24]
	if (*ptr == 0x88888888) {
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 800539e:	d101      	bne.n	80053a4 <main+0x74>
		Error_Handler();
 80053a0:	f000 fd62 	bl	8005e68 <Error_Handler>
	}

	bq24072_init();
 80053a4:	f7fd ffe4 	bl	8003370 <bq24072_init>

	gw_audio_init();
 80053a8:	f7fd fc56 	bl	8002c58 <gw_audio_init>

	RTC_TimeTypeDef sTime = { 0 };
 80053ac:	1d3b      	adds	r3, r7, #4
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	605a      	str	r2, [r3, #4]
 80053b4:	609a      	str	r2, [r3, #8]
 80053b6:	60da      	str	r2, [r3, #12]
 80053b8:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 80053ba:	2300      	movs	r3, #0
 80053bc:	603b      	str	r3, [r7, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80053be:	1d3b      	adds	r3, r7, #4
 80053c0:	2200      	movs	r2, #0
 80053c2:	4619      	mov	r1, r3
 80053c4:	4811      	ldr	r0, [pc, #68]	; (800540c <main+0xdc>)
 80053c6:	f00c fd33 	bl	8011e30 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80053ca:	463b      	mov	r3, r7
 80053cc:	2200      	movs	r2, #0
 80053ce:	4619      	mov	r1, r3
 80053d0:	480e      	ldr	r0, [pc, #56]	; (800540c <main+0xdc>)
 80053d2:	f00c fe11 	bl	8011ff8 <HAL_RTC_GetDate>
	HAL_ADC_Start(&hadc1);
 80053d6:	480e      	ldr	r0, [pc, #56]	; (8005410 <main+0xe0>)
 80053d8:	f002 f870 	bl	80074bc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80053dc:	f04f 31ff 	mov.w	r1, #4294967295
 80053e0:	480b      	ldr	r0, [pc, #44]	; (8005410 <main+0xe0>)
 80053e2:	f002 f925 	bl	8007630 <HAL_ADC_PollForConversion>
	srand(HAL_ADC_GetValue(&hadc1) ^ sTime.SubSeconds);
 80053e6:	480a      	ldr	r0, [pc, #40]	; (8005410 <main+0xe0>)
 80053e8:	f002 fb64 	bl	8007ab4 <HAL_ADC_GetValue>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4053      	eors	r3, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f00f f88c 	bl	8014510 <srand>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		main_menu_init();
 80053f8:	f7ff fb4a 	bl	8004a90 <main_menu_init>
 80053fc:	e7fc      	b.n	80053f8 <main+0xc8>
 80053fe:	bf00      	nop
 8005400:	20000364 	.word	0x20000364
 8005404:	200005a0 	.word	0x200005a0
 8005408:	2000040c 	.word	0x2000040c
 800540c:	20000468 	.word	0x20000468
 8005410:	20000270 	.word	0x20000270

08005414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b09c      	sub	sp, #112	; 0x70
 8005418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800541a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800541e:	224c      	movs	r2, #76	; 0x4c
 8005420:	2100      	movs	r1, #0
 8005422:	4618      	mov	r0, r3
 8005424:	f00f fb4a 	bl	8014abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005428:	1d3b      	adds	r3, r7, #4
 800542a:	2220      	movs	r2, #32
 800542c:	2100      	movs	r1, #0
 800542e:	4618      	mov	r0, r3
 8005430:	f00f fb44 	bl	8014abc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8005434:	4b36      	ldr	r3, [pc, #216]	; (8005510 <SystemClock_Config+0xfc>)
 8005436:	f04f 32ff 	mov.w	r2, #4294967295
 800543a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800543e:	2002      	movs	r0, #2
 8005440:	f008 ffe6 	bl	800e410 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005444:	2300      	movs	r3, #0
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	4b32      	ldr	r3, [pc, #200]	; (8005514 <SystemClock_Config+0x100>)
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	4a31      	ldr	r2, [pc, #196]	; (8005514 <SystemClock_Config+0x100>)
 800544e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005452:	6193      	str	r3, [r2, #24]
 8005454:	4b2f      	ldr	r3, [pc, #188]	; (8005514 <SystemClock_Config+0x100>)
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800545c:	603b      	str	r3, [r7, #0]
 800545e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005460:	bf00      	nop
 8005462:	4b2c      	ldr	r3, [pc, #176]	; (8005514 <SystemClock_Config+0x100>)
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800546a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800546e:	d1f8      	bne.n	8005462 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005470:	f008 ffbe 	bl	800e3f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005474:	4b26      	ldr	r3, [pc, #152]	; (8005510 <SystemClock_Config+0xfc>)
 8005476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005478:	4a25      	ldr	r2, [pc, #148]	; (8005510 <SystemClock_Config+0xfc>)
 800547a:	f023 0318 	bic.w	r3, r3, #24
 800547e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8005480:	230e      	movs	r3, #14
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005484:	2301      	movs	r3, #1
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8005488:	2301      	movs	r3, #1
 800548a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800548c:	2340      	movs	r3, #64	; 0x40
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005490:	2301      	movs	r3, #1
 8005492:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005494:	2302      	movs	r3, #2
 8005496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005498:	2300      	movs	r3, #0
 800549a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800549c:	2310      	movs	r3, #16
 800549e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 140;
 80054a0:	238c      	movs	r3, #140	; 0x8c
 80054a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80054a4:	2302      	movs	r3, #2
 80054a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80054a8:	2302      	movs	r3, #2
 80054aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80054ac:	2302      	movs	r3, #2
 80054ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80054b0:	2308      	movs	r3, #8
 80054b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054c0:	4618      	mov	r0, r3
 80054c2:	f008 ffdf 	bl	800e484 <HAL_RCC_OscConfig>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80054cc:	f000 fccc 	bl	8005e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054d0:	233f      	movs	r3, #63	; 0x3f
 80054d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054d4:	2303      	movs	r3, #3
 80054d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80054e0:	2340      	movs	r3, #64	; 0x40
 80054e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80054e4:	2340      	movs	r3, #64	; 0x40
 80054e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80054e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80054ee:	2340      	movs	r3, #64	; 0x40
 80054f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80054f2:	1d3b      	adds	r3, r7, #4
 80054f4:	2106      	movs	r1, #6
 80054f6:	4618      	mov	r0, r3
 80054f8:	f009 fbf6 	bl	800ece8 <HAL_RCC_ClockConfig>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8005502:	f000 fcb1 	bl	8005e68 <Error_Handler>
  }
}
 8005506:	bf00      	nop
 8005508:	3770      	adds	r7, #112	; 0x70
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	58024400 	.word	0x58024400
 8005514:	58024800 	.word	0x58024800

08005518 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b0b0      	sub	sp, #192	; 0xc0
 800551c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800551e:	463b      	mov	r3, r7
 8005520:	22c0      	movs	r2, #192	; 0xc0
 8005522:	2100      	movs	r1, #0
 8005524:	4618      	mov	r0, r3
 8005526:	f00f fac9 	bl	8014abc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER
 800552a:	4a16      	ldr	r2, [pc, #88]	; (8005584 <PeriphCommonClock_Config+0x6c>)
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLL3.PLL3M = 4;
 8005534:	2304      	movs	r3, #4
 8005536:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 9;
 8005538:	2309      	movs	r3, #9
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800553c:	2302      	movs	r3, #2
 800553e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8005540:	2302      	movs	r3, #2
 8005542:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 24;
 8005544:	2318      	movs	r3, #24
 8005546:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8005548:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800554c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800554e:	2300      	movs	r3, #0
 8005550:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8005556:	2300      	movs	r3, #0
 8005558:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800555a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800555e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8005562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800556a:	463b      	mov	r3, r7
 800556c:	4618      	mov	r0, r3
 800556e:	f009 ff31 	bl	800f3d4 <HAL_RCCEx_PeriphCLKConfig>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <PeriphCommonClock_Config+0x64>
  {
    Error_Handler();
 8005578:	f000 fc76 	bl	8005e68 <Error_Handler>
  }
}
 800557c:	bf00      	nop
 800557e:	37c0      	adds	r7, #192	; 0xc0
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	a0080000 	.word	0xa0080000

08005588 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* OCTOSPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 800558c:	2200      	movs	r2, #0
 800558e:	2100      	movs	r1, #0
 8005590:	205c      	movs	r0, #92	; 0x5c
 8005592:	f003 fbfc 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8005596:	205c      	movs	r0, #92	; 0x5c
 8005598:	f003 fc13 	bl	8008dc2 <HAL_NVIC_EnableIRQ>
}
 800559c:	bf00      	nop
 800559e:	bd80      	pop	{r7, pc}

080055a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80055a6:	f107 031c 	add.w	r3, r7, #28
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	605a      	str	r2, [r3, #4]
 80055b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80055b2:	463b      	mov	r3, r7
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	605a      	str	r2, [r3, #4]
 80055ba:	609a      	str	r2, [r3, #8]
 80055bc:	60da      	str	r2, [r3, #12]
 80055be:	611a      	str	r2, [r3, #16]
 80055c0:	615a      	str	r2, [r3, #20]
 80055c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80055c4:	4b2f      	ldr	r3, [pc, #188]	; (8005684 <MX_ADC1_Init+0xe4>)
 80055c6:	4a30      	ldr	r2, [pc, #192]	; (8005688 <MX_ADC1_Init+0xe8>)
 80055c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80055ca:	4b2e      	ldr	r3, [pc, #184]	; (8005684 <MX_ADC1_Init+0xe4>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80055d0:	4b2c      	ldr	r3, [pc, #176]	; (8005684 <MX_ADC1_Init+0xe4>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80055d6:	4b2b      	ldr	r3, [pc, #172]	; (8005684 <MX_ADC1_Init+0xe4>)
 80055d8:	2200      	movs	r2, #0
 80055da:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80055dc:	4b29      	ldr	r3, [pc, #164]	; (8005684 <MX_ADC1_Init+0xe4>)
 80055de:	2204      	movs	r2, #4
 80055e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80055e2:	4b28      	ldr	r3, [pc, #160]	; (8005684 <MX_ADC1_Init+0xe4>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80055e8:	4b26      	ldr	r3, [pc, #152]	; (8005684 <MX_ADC1_Init+0xe4>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80055ee:	4b25      	ldr	r3, [pc, #148]	; (8005684 <MX_ADC1_Init+0xe4>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80055f4:	4b23      	ldr	r3, [pc, #140]	; (8005684 <MX_ADC1_Init+0xe4>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80055fa:	4b22      	ldr	r3, [pc, #136]	; (8005684 <MX_ADC1_Init+0xe4>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005600:	4b20      	ldr	r3, [pc, #128]	; (8005684 <MX_ADC1_Init+0xe4>)
 8005602:	2200      	movs	r2, #0
 8005604:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8005606:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <MX_ADC1_Init+0xe4>)
 8005608:	2200      	movs	r2, #0
 800560a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800560c:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <MX_ADC1_Init+0xe4>)
 800560e:	2200      	movs	r2, #0
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <MX_ADC1_Init+0xe4>)
 8005614:	2200      	movs	r2, #0
 8005616:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005618:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <MX_ADC1_Init+0xe4>)
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005620:	4818      	ldr	r0, [pc, #96]	; (8005684 <MX_ADC1_Init+0xe4>)
 8005622:	f001 fdf1 	bl	8007208 <HAL_ADC_Init>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800562c:	f000 fc1c 	bl	8005e68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005634:	f107 031c 	add.w	r3, r7, #28
 8005638:	4619      	mov	r1, r3
 800563a:	4812      	ldr	r0, [pc, #72]	; (8005684 <MX_ADC1_Init+0xe4>)
 800563c:	f003 fa1a 	bl	8008a74 <HAL_ADCEx_MultiModeConfigChannel>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8005646:	f000 fc0f 	bl	8005e68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800564a:	4b10      	ldr	r3, [pc, #64]	; (800568c <MX_ADC1_Init+0xec>)
 800564c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800564e:	2306      	movs	r3, #6
 8005650:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005656:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800565a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800565c:	2304      	movs	r3, #4
 800565e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8005664:	2300      	movs	r3, #0
 8005666:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005668:	463b      	mov	r3, r7
 800566a:	4619      	mov	r1, r3
 800566c:	4805      	ldr	r0, [pc, #20]	; (8005684 <MX_ADC1_Init+0xe4>)
 800566e:	f002 fc5d 	bl	8007f2c <HAL_ADC_ConfigChannel>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8005678:	f000 fbf6 	bl	8005e68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800567c:	bf00      	nop
 800567e:	3728      	adds	r7, #40	; 0x28
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20000270 	.word	0x20000270
 8005688:	40022000 	.word	0x40022000
 800568c:	10c00010 	.word	0x10c00010

08005690 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	; 0x28
 8005694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8005696:	1d3b      	adds	r3, r7, #4
 8005698:	2224      	movs	r2, #36	; 0x24
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f00f fa0d 	bl	8014abc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80056a2:	4b17      	ldr	r3, [pc, #92]	; (8005700 <MX_DAC1_Init+0x70>)
 80056a4:	4a17      	ldr	r2, [pc, #92]	; (8005704 <MX_DAC1_Init+0x74>)
 80056a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80056a8:	4815      	ldr	r0, [pc, #84]	; (8005700 <MX_DAC1_Init+0x70>)
 80056aa:	f003 fba8 	bl	8008dfe <HAL_DAC_Init>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80056b4:	f000 fbd8 	bl	8005e68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80056bc:	2300      	movs	r3, #0
 80056be:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80056cc:	1d3b      	adds	r3, r7, #4
 80056ce:	2200      	movs	r2, #0
 80056d0:	4619      	mov	r1, r3
 80056d2:	480b      	ldr	r0, [pc, #44]	; (8005700 <MX_DAC1_Init+0x70>)
 80056d4:	f003 fc2c 	bl	8008f30 <HAL_DAC_ConfigChannel>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80056de:	f000 fbc3 	bl	8005e68 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	2210      	movs	r2, #16
 80056e6:	4619      	mov	r1, r3
 80056e8:	4805      	ldr	r0, [pc, #20]	; (8005700 <MX_DAC1_Init+0x70>)
 80056ea:	f003 fc21 	bl	8008f30 <HAL_DAC_ConfigChannel>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80056f4:	f000 fbb8 	bl	8005e68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80056f8:	bf00      	nop
 80056fa:	3728      	adds	r7, #40	; 0x28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	200002d4 	.word	0x200002d4
 8005704:	40007400 	.word	0x40007400

08005708 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	2224      	movs	r2, #36	; 0x24
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f00f f9d1 	bl	8014abc <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <MX_DAC2_Init+0x5c>)
 800571c:	4a12      	ldr	r2, [pc, #72]	; (8005768 <MX_DAC2_Init+0x60>)
 800571e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8005720:	4810      	ldr	r0, [pc, #64]	; (8005764 <MX_DAC2_Init+0x5c>)
 8005722:	f003 fb6c 	bl	8008dfe <HAL_DAC_Init>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 800572c:	f000 fb9c 	bl	8005e68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005730:	2300      	movs	r3, #0
 8005732:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005734:	2300      	movs	r3, #0
 8005736:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800573c:	2301      	movs	r3, #1
 800573e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	2200      	movs	r2, #0
 8005748:	4619      	mov	r1, r3
 800574a:	4806      	ldr	r0, [pc, #24]	; (8005764 <MX_DAC2_Init+0x5c>)
 800574c:	f003 fbf0 	bl	8008f30 <HAL_DAC_ConfigChannel>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <MX_DAC2_Init+0x52>
  {
    Error_Handler();
 8005756:	f000 fb87 	bl	8005e68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800575a:	bf00      	nop
 800575c:	3728      	adds	r7, #40	; 0x28
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200002e8 	.word	0x200002e8
 8005768:	58003400 	.word	0x58003400

0800576c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <MX_DMA2D_Init+0x34>)
 8005772:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <MX_DMA2D_Init+0x38>)
 8005774:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8005776:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <MX_DMA2D_Init+0x34>)
 8005778:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800577c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800577e:	4b08      	ldr	r3, [pc, #32]	; (80057a0 <MX_DMA2D_Init+0x34>)
 8005780:	2202      	movs	r2, #2
 8005782:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8005784:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <MX_DMA2D_Init+0x34>)
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800578a:	4805      	ldr	r0, [pc, #20]	; (80057a0 <MX_DMA2D_Init+0x34>)
 800578c:	f006 fbf8 	bl	800bf80 <HAL_DMA2D_Init>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8005796:	f000 fb67 	bl	8005e68 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800579a:	bf00      	nop
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	200002fc 	.word	0x200002fc
 80057a4:	52001000 	.word	0x52001000

080057a8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08e      	sub	sp, #56	; 0x38
 80057ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80057ae:	1d3b      	adds	r3, r7, #4
 80057b0:	2234      	movs	r2, #52	; 0x34
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f00f f981 	bl	8014abc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80057ba:	4b39      	ldr	r3, [pc, #228]	; (80058a0 <MX_LTDC_Init+0xf8>)
 80057bc:	4a39      	ldr	r2, [pc, #228]	; (80058a4 <MX_LTDC_Init+0xfc>)
 80057be:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80057c0:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <MX_LTDC_Init+0xf8>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80057c6:	4b36      	ldr	r3, [pc, #216]	; (80058a0 <MX_LTDC_Init+0xf8>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80057cc:	4b34      	ldr	r3, [pc, #208]	; (80058a0 <MX_LTDC_Init+0xf8>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IIPC;
 80057d2:	4b33      	ldr	r3, [pc, #204]	; (80058a0 <MX_LTDC_Init+0xf8>)
 80057d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80057da:	4b31      	ldr	r3, [pc, #196]	; (80058a0 <MX_LTDC_Init+0xf8>)
 80057dc:	2209      	movs	r2, #9
 80057de:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80057e0:	4b2f      	ldr	r3, [pc, #188]	; (80058a0 <MX_LTDC_Init+0xf8>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 60;
 80057e6:	4b2e      	ldr	r3, [pc, #184]	; (80058a0 <MX_LTDC_Init+0xf8>)
 80057e8:	223c      	movs	r2, #60	; 0x3c
 80057ea:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 7;
 80057ec:	4b2c      	ldr	r3, [pc, #176]	; (80058a0 <MX_LTDC_Init+0xf8>)
 80057ee:	2207      	movs	r2, #7
 80057f0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 380;
 80057f2:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <MX_LTDC_Init+0xf8>)
 80057f4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 247;
 80057fa:	4b29      	ldr	r3, [pc, #164]	; (80058a0 <MX_LTDC_Init+0xf8>)
 80057fc:	22f7      	movs	r2, #247	; 0xf7
 80057fe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 392;
 8005800:	4b27      	ldr	r3, [pc, #156]	; (80058a0 <MX_LTDC_Init+0xf8>)
 8005802:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8005806:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 255;
 8005808:	4b25      	ldr	r3, [pc, #148]	; (80058a0 <MX_LTDC_Init+0xf8>)
 800580a:	22ff      	movs	r2, #255	; 0xff
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800580e:	4b24      	ldr	r3, [pc, #144]	; (80058a0 <MX_LTDC_Init+0xf8>)
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8005816:	4b22      	ldr	r3, [pc, #136]	; (80058a0 <MX_LTDC_Init+0xf8>)
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800581e:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <MX_LTDC_Init+0xf8>)
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8005826:	481e      	ldr	r0, [pc, #120]	; (80058a0 <MX_LTDC_Init+0xf8>)
 8005828:	f006 fe14 	bl	800c454 <HAL_LTDC_Init>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <MX_LTDC_Init+0x8e>
  {
    Error_Handler();
 8005832:	f000 fb19 	bl	8005e68 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
 800583a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800583e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
 8005844:	23f0      	movs	r3, #240	; 0xf0
 8005846:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8005848:	2302      	movs	r3, #2
 800584a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800584c:	23ff      	movs	r3, #255	; 0xff
 800584e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
 8005850:	23ff      	movs	r3, #255	; 0xff
 8005852:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8005854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005858:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800585a:	2305      	movs	r3, #5
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x24000000;
 800585e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 320;
 8005864:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005868:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 240;
 800586a:	23f0      	movs	r3, #240	; 0xf0
 800586c:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8005874:	23ff      	movs	r3, #255	; 0xff
 8005876:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005880:	1d3b      	adds	r3, r7, #4
 8005882:	2200      	movs	r2, #0
 8005884:	4619      	mov	r1, r3
 8005886:	4806      	ldr	r0, [pc, #24]	; (80058a0 <MX_LTDC_Init+0xf8>)
 8005888:	f006 ff6c 	bl	800c764 <HAL_LTDC_ConfigLayer>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8005892:	f000 fae9 	bl	8005e68 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8005896:	bf00      	nop
 8005898:	3738      	adds	r7, #56	; 0x38
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000364 	.word	0x20000364
 80058a4:	50001000 	.word	0x50001000

080058a8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80058ae:	463b      	mov	r3, r7
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	609a      	str	r2, [r3, #8]
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	611a      	str	r2, [r3, #16]
 80058bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80058be:	4b28      	ldr	r3, [pc, #160]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 80058c0:	4a28      	ldr	r2, [pc, #160]	; (8005964 <MX_OCTOSPI1_Init+0xbc>)
 80058c2:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 80058c4:	4b26      	ldr	r3, [pc, #152]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 80058c6:	2204      	movs	r2, #4
 80058c8:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80058ca:	4b25      	ldr	r3, [pc, #148]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80058d0:	4b23      	ldr	r3, [pc, #140]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 80058d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058d6:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 80058d8:	4b21      	ldr	r3, [pc, #132]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 80058da:	2218      	movs	r2, #24
 80058dc:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80058de:	4b20      	ldr	r3, [pc, #128]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 80058e0:	2202      	movs	r2, #2
 80058e2:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80058e4:	4b1e      	ldr	r3, [pc, #120]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80058ea:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80058f0:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 80058f6:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80058fc:	4b18      	ldr	r3, [pc, #96]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 80058fe:	2200      	movs	r2, #0
 8005900:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8005902:	4b17      	ldr	r3, [pc, #92]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 8005904:	2200      	movs	r2, #0
 8005906:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8005908:	4b15      	ldr	r3, [pc, #84]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800590e:	4b14      	ldr	r3, [pc, #80]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 8005910:	2208      	movs	r2, #8
 8005912:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8005914:	4b12      	ldr	r3, [pc, #72]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 8005916:	2200      	movs	r2, #0
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 800591a:	4b11      	ldr	r3, [pc, #68]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 800591c:	2200      	movs	r2, #0
 800591e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8005920:	480f      	ldr	r0, [pc, #60]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 8005922:	f007 f985 	bl	800cc30 <HAL_OSPI_Init>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 800592c:	f000 fa9c 	bl	8005e68 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8005930:	2301      	movs	r3, #1
 8005932:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8005934:	2301      	movs	r3, #1
 8005936:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8005938:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800593c:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800593e:	463b      	mov	r3, r7
 8005940:	f241 3288 	movw	r2, #5000	; 0x1388
 8005944:	4619      	mov	r1, r3
 8005946:	4806      	ldr	r0, [pc, #24]	; (8005960 <MX_OCTOSPI1_Init+0xb8>)
 8005948:	f007 fdc2 	bl	800d4d0 <HAL_OSPIM_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 8005952:	f000 fa89 	bl	8005e68 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8005956:	bf00      	nop
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	2000040c 	.word	0x2000040c
 8005964:	52005000 	.word	0x52005000

08005968 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800596e:	1d3b      	adds	r3, r7, #4
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	609a      	str	r2, [r3, #8]
 8005978:	60da      	str	r2, [r3, #12]
 800597a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800597c:	2300      	movs	r3, #0
 800597e:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN RTC_Init 1 */
	hrtc.Instance = RTC;
 8005980:	4b36      	ldr	r3, [pc, #216]	; (8005a5c <MX_RTC_Init+0xf4>)
 8005982:	4a37      	ldr	r2, [pc, #220]	; (8005a60 <MX_RTC_Init+0xf8>)
 8005984:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005986:	4b35      	ldr	r3, [pc, #212]	; (8005a5c <MX_RTC_Init+0xf4>)
 8005988:	2200      	movs	r2, #0
 800598a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800598c:	4b33      	ldr	r3, [pc, #204]	; (8005a5c <MX_RTC_Init+0xf4>)
 800598e:	227f      	movs	r2, #127	; 0x7f
 8005990:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8005992:	4b32      	ldr	r3, [pc, #200]	; (8005a5c <MX_RTC_Init+0xf4>)
 8005994:	22ff      	movs	r2, #255	; 0xff
 8005996:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005998:	4b30      	ldr	r3, [pc, #192]	; (8005a5c <MX_RTC_Init+0xf4>)
 800599a:	2200      	movs	r2, #0
 800599c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800599e:	4b2f      	ldr	r3, [pc, #188]	; (8005a5c <MX_RTC_Init+0xf4>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80059a4:	4b2d      	ldr	r3, [pc, #180]	; (8005a5c <MX_RTC_Init+0xf4>)
 80059a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059aa:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80059ac:	4b2b      	ldr	r3, [pc, #172]	; (8005a5c <MX_RTC_Init+0xf4>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	615a      	str	r2, [r3, #20]
	if ((RCC->BDCR & RCC_BDCR_RTCEN) != 0) {
 80059b2:	4b2c      	ldr	r3, [pc, #176]	; (8005a64 <MX_RTC_Init+0xfc>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <MX_RTC_Init+0x5c>
		HAL_PWR_EnableBkUpAccess();
 80059be:	f008 fd17 	bl	800e3f0 <HAL_PWR_EnableBkUpAccess>
 80059c2:	e048      	b.n	8005a56 <MX_RTC_Init+0xee>
	}
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80059c4:	4b25      	ldr	r3, [pc, #148]	; (8005a5c <MX_RTC_Init+0xf4>)
 80059c6:	4a26      	ldr	r2, [pc, #152]	; (8005a60 <MX_RTC_Init+0xf8>)
 80059c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80059ca:	4b24      	ldr	r3, [pc, #144]	; (8005a5c <MX_RTC_Init+0xf4>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80059d0:	4b22      	ldr	r3, [pc, #136]	; (8005a5c <MX_RTC_Init+0xf4>)
 80059d2:	227f      	movs	r2, #127	; 0x7f
 80059d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80059d6:	4b21      	ldr	r3, [pc, #132]	; (8005a5c <MX_RTC_Init+0xf4>)
 80059d8:	22ff      	movs	r2, #255	; 0xff
 80059da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80059dc:	4b1f      	ldr	r3, [pc, #124]	; (8005a5c <MX_RTC_Init+0xf4>)
 80059de:	2200      	movs	r2, #0
 80059e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80059e2:	4b1e      	ldr	r3, [pc, #120]	; (8005a5c <MX_RTC_Init+0xf4>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80059e8:	4b1c      	ldr	r3, [pc, #112]	; (8005a5c <MX_RTC_Init+0xf4>)
 80059ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059ee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80059f0:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <MX_RTC_Init+0xf4>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80059f6:	4819      	ldr	r0, [pc, #100]	; (8005a5c <MX_RTC_Init+0xf4>)
 80059f8:	f00c f8f6 	bl	8011be8 <HAL_RTC_Init>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8005a02:	f000 fa31 	bl	8005e68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005a1a:	1d3b      	adds	r3, r7, #4
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4619      	mov	r1, r3
 8005a20:	480e      	ldr	r0, [pc, #56]	; (8005a5c <MX_RTC_Init+0xf4>)
 8005a22:	f00c f967 	bl	8011cf4 <HAL_RTC_SetTime>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8005a2c:	f000 fa1c 	bl	8005e68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005a30:	2301      	movs	r3, #1
 8005a32:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8005a34:	2301      	movs	r3, #1
 8005a36:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8005a40:	463b      	mov	r3, r7
 8005a42:	2200      	movs	r2, #0
 8005a44:	4619      	mov	r1, r3
 8005a46:	4805      	ldr	r0, [pc, #20]	; (8005a5c <MX_RTC_Init+0xf4>)
 8005a48:	f00c fa4e 	bl	8011ee8 <HAL_RTC_SetDate>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <MX_RTC_Init+0xee>
  {
    Error_Handler();
 8005a52:	f000 fa09 	bl	8005e68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000468 	.word	0x20000468
 8005a60:	58004000 	.word	0x58004000
 8005a64:	58024400 	.word	0x58024400

08005a68 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8005a6c:	4b17      	ldr	r3, [pc, #92]	; (8005acc <MX_SAI1_Init+0x64>)
 8005a6e:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <MX_SAI1_Init+0x68>)
 8005a70:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8005a72:	4b16      	ldr	r3, [pc, #88]	; (8005acc <MX_SAI1_Init+0x64>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8005a78:	4b14      	ldr	r3, [pc, #80]	; (8005acc <MX_SAI1_Init+0x64>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <MX_SAI1_Init+0x64>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8005a84:	4b11      	ldr	r3, [pc, #68]	; (8005acc <MX_SAI1_Init+0x64>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8005a8a:	4b10      	ldr	r3, [pc, #64]	; (8005acc <MX_SAI1_Init+0x64>)
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8005a90:	4b0e      	ldr	r3, [pc, #56]	; (8005acc <MX_SAI1_Init+0x64>)
 8005a92:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005a96:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <MX_SAI1_Init+0x64>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8005a9e:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <MX_SAI1_Init+0x64>)
 8005aa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8005aa6:	4b09      	ldr	r3, [pc, #36]	; (8005acc <MX_SAI1_Init+0x64>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8005aac:	4b07      	ldr	r3, [pc, #28]	; (8005acc <MX_SAI1_Init+0x64>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4804      	ldr	r0, [pc, #16]	; (8005acc <MX_SAI1_Init+0x64>)
 8005aba:	f00c fbbd 	bl	8012238 <HAL_SAI_InitProtocol>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8005ac4:	f000 f9d0 	bl	8005e68 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8005ac8:	bf00      	nop
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000490 	.word	0x20000490
 8005ad0:	40015804 	.word	0x40015804

08005ad4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005ad8:	4b27      	ldr	r3, [pc, #156]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005ada:	4a28      	ldr	r2, [pc, #160]	; (8005b7c <MX_SPI2_Init+0xa8>)
 8005adc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005ade:	4b26      	ldr	r3, [pc, #152]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005ae0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005ae4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8005ae6:	4b24      	ldr	r3, [pc, #144]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005ae8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005aec:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005aee:	4b22      	ldr	r3, [pc, #136]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005af0:	2207      	movs	r2, #7
 8005af2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005af4:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005afa:	4b1f      	ldr	r3, [pc, #124]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005b00:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005b06:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005b08:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b0a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8005b0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b10:	4b19      	ldr	r3, [pc, #100]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b16:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b1c:	4b16      	ldr	r3, [pc, #88]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8005b22:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005b28:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8005b2e:	4b12      	ldr	r3, [pc, #72]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8005b34:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005b3a:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005b40:	4b0d      	ldr	r3, [pc, #52]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005b46:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8005b58:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005b64:	4804      	ldr	r0, [pc, #16]	; (8005b78 <MX_SPI2_Init+0xa4>)
 8005b66:	f00d faf3 	bl	8013150 <HAL_SPI_Init>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8005b70:	f000 f97a 	bl	8005e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005b74:	bf00      	nop
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	200005a0 	.word	0x200005a0
 8005b7c:	40003800 	.word	0x40003800

08005b80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b86:	f107 0310 	add.w	r3, r7, #16
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	605a      	str	r2, [r3, #4]
 8005b90:	609a      	str	r2, [r3, #8]
 8005b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b94:	1d3b      	adds	r3, r7, #4
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
 8005b9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005b9e:	4b20      	ldr	r3, [pc, #128]	; (8005c20 <MX_TIM1_Init+0xa0>)
 8005ba0:	4a20      	ldr	r2, [pc, #128]	; (8005c24 <MX_TIM1_Init+0xa4>)
 8005ba2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14000;
 8005ba4:	4b1e      	ldr	r3, [pc, #120]	; (8005c20 <MX_TIM1_Init+0xa0>)
 8005ba6:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8005baa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bac:	4b1c      	ldr	r3, [pc, #112]	; (8005c20 <MX_TIM1_Init+0xa0>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8005bb2:	4b1b      	ldr	r3, [pc, #108]	; (8005c20 <MX_TIM1_Init+0xa0>)
 8005bb4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bba:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <MX_TIM1_Init+0xa0>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005bc0:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <MX_TIM1_Init+0xa0>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bc6:	4b16      	ldr	r3, [pc, #88]	; (8005c20 <MX_TIM1_Init+0xa0>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005bcc:	4814      	ldr	r0, [pc, #80]	; (8005c20 <MX_TIM1_Init+0xa0>)
 8005bce:	f00d fec8 	bl	8013962 <HAL_TIM_Base_Init>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8005bd8:	f000 f946 	bl	8005e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005be0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005be2:	f107 0310 	add.w	r3, r7, #16
 8005be6:	4619      	mov	r1, r3
 8005be8:	480d      	ldr	r0, [pc, #52]	; (8005c20 <MX_TIM1_Init+0xa0>)
 8005bea:	f00e f8a9 	bl	8013d40 <HAL_TIM_ConfigClockSource>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8005bf4:	f000 f938 	bl	8005e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005c04:	1d3b      	adds	r3, r7, #4
 8005c06:	4619      	mov	r1, r3
 8005c08:	4805      	ldr	r0, [pc, #20]	; (8005c20 <MX_TIM1_Init+0xa0>)
 8005c0a:	f00e fafb 	bl	8014204 <HAL_TIMEx_MasterConfigSynchronization>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005c14:	f000 f928 	bl	8005e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005c18:	bf00      	nop
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000628 	.word	0x20000628
 8005c24:	40010000 	.word	0x40010000

08005c28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <MX_DMA_Init+0x3c>)
 8005c30:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005c34:	4a0b      	ldr	r2, [pc, #44]	; (8005c64 <MX_DMA_Init+0x3c>)
 8005c36:	f043 0301 	orr.w	r3, r3, #1
 8005c3a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <MX_DMA_Init+0x3c>)
 8005c40:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2100      	movs	r1, #0
 8005c50:	200b      	movs	r0, #11
 8005c52:	f003 f89c 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005c56:	200b      	movs	r0, #11
 8005c58:	f003 f8b3 	bl	8008dc2 <HAL_NVIC_EnableIRQ>

}
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	58024400 	.word	0x58024400

08005c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	605a      	str	r2, [r3, #4]
 8005c78:	609a      	str	r2, [r3, #8]
 8005c7a:	60da      	str	r2, [r3, #12]
 8005c7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c7e:	4b74      	ldr	r3, [pc, #464]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005c80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005c84:	4a72      	ldr	r2, [pc, #456]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005c86:	f043 0310 	orr.w	r3, r3, #16
 8005c8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8005c8e:	4b70      	ldr	r3, [pc, #448]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005c90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c9c:	4b6c      	ldr	r3, [pc, #432]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005c9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005ca2:	4a6b      	ldr	r2, [pc, #428]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005ca4:	f043 0304 	orr.w	r3, r3, #4
 8005ca8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8005cac:	4b68      	ldr	r3, [pc, #416]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005cae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cba:	4b65      	ldr	r3, [pc, #404]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005cbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005cc0:	4a63      	ldr	r2, [pc, #396]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005cc2:	f043 0301 	orr.w	r3, r3, #1
 8005cc6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8005cca:	4b61      	ldr	r3, [pc, #388]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005ccc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cd8:	4b5d      	ldr	r3, [pc, #372]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005cda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005cde:	4a5c      	ldr	r2, [pc, #368]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005ce0:	f043 0302 	orr.w	r3, r3, #2
 8005ce4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8005ce8:	4b59      	ldr	r3, [pc, #356]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005cea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	607b      	str	r3, [r7, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cf6:	4b56      	ldr	r3, [pc, #344]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005cf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005cfc:	4a54      	ldr	r2, [pc, #336]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005cfe:	f043 0308 	orr.w	r3, r3, #8
 8005d02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8005d06:	4b52      	ldr	r3, [pc, #328]	; (8005e50 <MX_GPIO_Init+0x1e8>)
 8005d08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	603b      	str	r3, [r7, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Speaker_enable_GPIO_Port, GPIO_Speaker_enable_Pin, GPIO_PIN_SET);
 8005d14:	2201      	movs	r2, #1
 8005d16:	2108      	movs	r1, #8
 8005d18:	484e      	ldr	r0, [pc, #312]	; (8005e54 <MX_GPIO_Init+0x1ec>)
 8005d1a:	f006 fb5d 	bl	800c3d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d24:	484b      	ldr	r0, [pc, #300]	; (8005e54 <MX_GPIO_Init+0x1ec>)
 8005d26:	f006 fb57 	bl	800c3d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d30:	4849      	ldr	r0, [pc, #292]	; (8005e58 <MX_GPIO_Init+0x1f0>)
 8005d32:	f006 fb51 	bl	800c3d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8005d36:	2201      	movs	r2, #1
 8005d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d3c:	4847      	ldr	r0, [pc, #284]	; (8005e5c <MX_GPIO_Init+0x1f4>)
 8005d3e:	f006 fb4b 	bl	800c3d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8005d42:	2200      	movs	r2, #0
 8005d44:	2112      	movs	r1, #18
 8005d46:	4845      	ldr	r0, [pc, #276]	; (8005e5c <MX_GPIO_Init+0x1f4>)
 8005d48:	f006 fb46 	bl	800c3d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_Speaker_enable_Pin PE8 */
  GPIO_InitStruct.Pin = GPIO_Speaker_enable_Pin|GPIO_PIN_8;
 8005d4c:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d52:	2301      	movs	r3, #1
 8005d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d5e:	f107 0314 	add.w	r3, r7, #20
 8005d62:	4619      	mov	r1, r3
 8005d64:	483b      	ldr	r0, [pc, #236]	; (8005e54 <MX_GPIO_Init+0x1ec>)
 8005d66:	f006 f96f 	bl	800c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_PAUSE_Pin BTN_GAME_Pin BTN_TIME_Pin */
  GPIO_InitStruct.Pin = BTN_PAUSE_Pin|BTN_GAME_Pin|BTN_TIME_Pin;
 8005d6a:	f242 0322 	movw	r3, #8226	; 0x2022
 8005d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d70:	2300      	movs	r3, #0
 8005d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d74:	2301      	movs	r3, #1
 8005d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d78:	f107 0314 	add.w	r3, r7, #20
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4838      	ldr	r0, [pc, #224]	; (8005e60 <MX_GPIO_Init+0x1f8>)
 8005d80:	f006 f962 	bl	800c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_PWR_Pin */
  GPIO_InitStruct.Pin = BTN_PWR_Pin;
 8005d84:	2301      	movs	r3, #1
 8005d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_PWR_GPIO_Port, &GPIO_InitStruct);
 8005d90:	f107 0314 	add.w	r3, r7, #20
 8005d94:	4619      	mov	r1, r3
 8005d96:	4833      	ldr	r0, [pc, #204]	; (8005e64 <MX_GPIO_Init+0x1fc>)
 8005d98:	f006 f956 	bl	800c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005da0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8005da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005daa:	f107 0314 	add.w	r3, r7, #20
 8005dae:	4619      	mov	r1, r3
 8005db0:	482c      	ldr	r0, [pc, #176]	; (8005e64 <MX_GPIO_Init+0x1fc>)
 8005db2:	f006 f949 	bl	800c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005db6:	2380      	movs	r3, #128	; 0x80
 8005db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005dba:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8005dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005dc4:	f107 0314 	add.w	r3, r7, #20
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4822      	ldr	r0, [pc, #136]	; (8005e54 <MX_GPIO_Init+0x1ec>)
 8005dcc:	f006 f93c 	bl	800c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dde:	2300      	movs	r3, #0
 8005de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005de2:	f107 0314 	add.w	r3, r7, #20
 8005de6:	4619      	mov	r1, r3
 8005de8:	481b      	ldr	r0, [pc, #108]	; (8005e58 <MX_GPIO_Init+0x1f0>)
 8005dea:	f006 f92d 	bl	800c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD1 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_4;
 8005dee:	f44f 7389 	mov.w	r3, #274	; 0x112
 8005df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005df4:	2301      	movs	r3, #1
 8005df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e00:	f107 0314 	add.w	r3, r7, #20
 8005e04:	4619      	mov	r1, r3
 8005e06:	4815      	ldr	r0, [pc, #84]	; (8005e5c <MX_GPIO_Init+0x1f4>)
 8005e08:	f006 f91e 	bl	800c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_Left_Pin BTN_Down_Pin BTN_Right_Pin
                           BTN_Up_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_Left_Pin|BTN_Down_Pin|BTN_Right_Pin
 8005e0c:	f64c 2321 	movw	r3, #51745	; 0xca21
 8005e10:	617b      	str	r3, [r7, #20]
                          |BTN_Up_Pin|BTN_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e16:	2301      	movs	r3, #1
 8005e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e1a:	f107 0314 	add.w	r3, r7, #20
 8005e1e:	4619      	mov	r1, r3
 8005e20:	480e      	ldr	r0, [pc, #56]	; (8005e5c <MX_GPIO_Init+0x1f4>)
 8005e22:	f006 f911 	bl	800c048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005e26:	2200      	movs	r2, #0
 8005e28:	2100      	movs	r1, #0
 8005e2a:	2008      	movs	r0, #8
 8005e2c:	f002 ffaf 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005e30:	2008      	movs	r0, #8
 8005e32:	f002 ffc6 	bl	8008dc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005e36:	2200      	movs	r2, #0
 8005e38:	2100      	movs	r1, #0
 8005e3a:	2017      	movs	r0, #23
 8005e3c:	f002 ffa7 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005e40:	2017      	movs	r0, #23
 8005e42:	f002 ffbe 	bl	8008dc2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005e46:	bf00      	nop
 8005e48:	3728      	adds	r7, #40	; 0x28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	58024400 	.word	0x58024400
 8005e54:	58021000 	.word	0x58021000
 8005e58:	58020400 	.word	0x58020400
 8005e5c:	58020c00 	.word	0x58020c00
 8005e60:	58020800 	.word	0x58020800
 8005e64:	58020000 	.word	0x58020000

08005e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e6c:	b672      	cpsid	i
}
 8005e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005e70:	e7fe      	b.n	8005e70 <Error_Handler+0x8>
	...

08005e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <HAL_MspInit+0x30>)
 8005e7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005e80:	4a08      	ldr	r2, [pc, #32]	; (8005ea4 <HAL_MspInit+0x30>)
 8005e82:	f043 0302 	orr.w	r3, r3, #2
 8005e86:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005e8a:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <HAL_MspInit+0x30>)
 8005e8c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	58024400 	.word	0x58024400

08005ea8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	; 0x28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eb0:	f107 0314 	add.w	r3, r7, #20
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	60da      	str	r2, [r3, #12]
 8005ebe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1c      	ldr	r2, [pc, #112]	; (8005f38 <HAL_ADC_MspInit+0x90>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d131      	bne.n	8005f2e <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005eca:	4b1c      	ldr	r3, [pc, #112]	; (8005f3c <HAL_ADC_MspInit+0x94>)
 8005ecc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005ed0:	4a1a      	ldr	r2, [pc, #104]	; (8005f3c <HAL_ADC_MspInit+0x94>)
 8005ed2:	f043 0320 	orr.w	r3, r3, #32
 8005ed6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8005eda:	4b18      	ldr	r3, [pc, #96]	; (8005f3c <HAL_ADC_MspInit+0x94>)
 8005edc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ee8:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <HAL_ADC_MspInit+0x94>)
 8005eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005eee:	4a13      	ldr	r2, [pc, #76]	; (8005f3c <HAL_ADC_MspInit+0x94>)
 8005ef0:	f043 0304 	orr.w	r3, r3, #4
 8005ef4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8005ef8:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <HAL_ADC_MspInit+0x94>)
 8005efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005f06:	2310      	movs	r3, #16
 8005f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f12:	f107 0314 	add.w	r3, r7, #20
 8005f16:	4619      	mov	r1, r3
 8005f18:	4809      	ldr	r0, [pc, #36]	; (8005f40 <HAL_ADC_MspInit+0x98>)
 8005f1a:	f006 f895 	bl	800c048 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2100      	movs	r1, #0
 8005f22:	2012      	movs	r0, #18
 8005f24:	f002 ff33 	bl	8008d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005f28:	2012      	movs	r0, #18
 8005f2a:	f002 ff4a 	bl	8008dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005f2e:	bf00      	nop
 8005f30:	3728      	adds	r7, #40	; 0x28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40022000 	.word	0x40022000
 8005f3c:	58024400 	.word	0x58024400
 8005f40:	58020800 	.word	0x58020800

08005f44 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08c      	sub	sp, #48	; 0x30
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f4c:	f107 031c 	add.w	r3, r7, #28
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	609a      	str	r2, [r3, #8]
 8005f58:	60da      	str	r2, [r3, #12]
 8005f5a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a30      	ldr	r2, [pc, #192]	; (8006024 <HAL_DAC_MspInit+0xe0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d12a      	bne.n	8005fbc <HAL_DAC_MspInit+0x78>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8005f66:	4b30      	ldr	r3, [pc, #192]	; (8006028 <HAL_DAC_MspInit+0xe4>)
 8005f68:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005f6c:	4a2e      	ldr	r2, [pc, #184]	; (8006028 <HAL_DAC_MspInit+0xe4>)
 8005f6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f72:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8005f76:	4b2c      	ldr	r3, [pc, #176]	; (8006028 <HAL_DAC_MspInit+0xe4>)
 8005f78:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f84:	4b28      	ldr	r3, [pc, #160]	; (8006028 <HAL_DAC_MspInit+0xe4>)
 8005f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005f8a:	4a27      	ldr	r2, [pc, #156]	; (8006028 <HAL_DAC_MspInit+0xe4>)
 8005f8c:	f043 0301 	orr.w	r3, r3, #1
 8005f90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8005f94:	4b24      	ldr	r3, [pc, #144]	; (8006028 <HAL_DAC_MspInit+0xe4>)
 8005f96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005fa2:	2330      	movs	r3, #48	; 0x30
 8005fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fae:	f107 031c 	add.w	r3, r7, #28
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	481d      	ldr	r0, [pc, #116]	; (800602c <HAL_DAC_MspInit+0xe8>)
 8005fb6:	f006 f847 	bl	800c048 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8005fba:	e02e      	b.n	800601a <HAL_DAC_MspInit+0xd6>
  else if(hdac->Instance==DAC2)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <HAL_DAC_MspInit+0xec>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d129      	bne.n	800601a <HAL_DAC_MspInit+0xd6>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8005fc6:	4b18      	ldr	r3, [pc, #96]	; (8006028 <HAL_DAC_MspInit+0xe4>)
 8005fc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005fcc:	4a16      	ldr	r2, [pc, #88]	; (8006028 <HAL_DAC_MspInit+0xe4>)
 8005fce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005fd2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005fd6:	4b14      	ldr	r3, [pc, #80]	; (8006028 <HAL_DAC_MspInit+0xe4>)
 8005fd8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fe4:	4b10      	ldr	r3, [pc, #64]	; (8006028 <HAL_DAC_MspInit+0xe4>)
 8005fe6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005fea:	4a0f      	ldr	r2, [pc, #60]	; (8006028 <HAL_DAC_MspInit+0xe4>)
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <HAL_DAC_MspInit+0xe4>)
 8005ff6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006002:	2340      	movs	r3, #64	; 0x40
 8006004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006006:	2303      	movs	r3, #3
 8006008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800600a:	2300      	movs	r3, #0
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800600e:	f107 031c 	add.w	r3, r7, #28
 8006012:	4619      	mov	r1, r3
 8006014:	4805      	ldr	r0, [pc, #20]	; (800602c <HAL_DAC_MspInit+0xe8>)
 8006016:	f006 f817 	bl	800c048 <HAL_GPIO_Init>
}
 800601a:	bf00      	nop
 800601c:	3730      	adds	r7, #48	; 0x30
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40007400 	.word	0x40007400
 8006028:	58024400 	.word	0x58024400
 800602c:	58020000 	.word	0x58020000
 8006030:	58003400 	.word	0x58003400

08006034 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a0b      	ldr	r2, [pc, #44]	; (8006070 <HAL_DMA2D_MspInit+0x3c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d10e      	bne.n	8006064 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006046:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <HAL_DMA2D_MspInit+0x40>)
 8006048:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800604c:	4a09      	ldr	r2, [pc, #36]	; (8006074 <HAL_DMA2D_MspInit+0x40>)
 800604e:	f043 0310 	orr.w	r3, r3, #16
 8006052:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006056:	4b07      	ldr	r3, [pc, #28]	; (8006074 <HAL_DMA2D_MspInit+0x40>)
 8006058:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800605c:	f003 0310 	and.w	r3, r3, #16
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	52001000 	.word	0x52001000
 8006074:	58024400 	.word	0x58024400

08006078 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08e      	sub	sp, #56	; 0x38
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	609a      	str	r2, [r3, #8]
 800608c:	60da      	str	r2, [r3, #12]
 800608e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a90      	ldr	r2, [pc, #576]	; (80062d8 <HAL_LTDC_MspInit+0x260>)
 8006096:	4293      	cmp	r3, r2
 8006098:	f040 8119 	bne.w	80062ce <HAL_LTDC_MspInit+0x256>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800609c:	4b8f      	ldr	r3, [pc, #572]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 800609e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80060a2:	4a8e      	ldr	r2, [pc, #568]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 80060a4:	f043 0308 	orr.w	r3, r3, #8
 80060a8:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80060ac:	4b8b      	ldr	r3, [pc, #556]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 80060ae:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	623b      	str	r3, [r7, #32]
 80060b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060ba:	4b88      	ldr	r3, [pc, #544]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 80060bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80060c0:	4a86      	ldr	r2, [pc, #536]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 80060c2:	f043 0304 	orr.w	r3, r3, #4
 80060c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80060ca:	4b84      	ldr	r3, [pc, #528]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 80060cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060d8:	4b80      	ldr	r3, [pc, #512]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 80060da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80060de:	4a7f      	ldr	r2, [pc, #508]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80060e8:	4b7c      	ldr	r3, [pc, #496]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 80060ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060f6:	4b79      	ldr	r3, [pc, #484]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 80060f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80060fc:	4a77      	ldr	r2, [pc, #476]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 80060fe:	f043 0302 	orr.w	r3, r3, #2
 8006102:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006106:	4b75      	ldr	r3, [pc, #468]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 8006108:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006114:	4b71      	ldr	r3, [pc, #452]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 8006116:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800611a:	4a70      	ldr	r2, [pc, #448]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 800611c:	f043 0310 	orr.w	r3, r3, #16
 8006120:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006124:	4b6d      	ldr	r3, [pc, #436]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 8006126:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800612a:	f003 0310 	and.w	r3, r3, #16
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006132:	4b6a      	ldr	r3, [pc, #424]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 8006134:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006138:	4a68      	ldr	r2, [pc, #416]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 800613a:	f043 0308 	orr.w	r3, r3, #8
 800613e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006142:	4b66      	ldr	r3, [pc, #408]	; (80062dc <HAL_LTDC_MspInit+0x264>)
 8006144:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006148:	f003 0308 	and.w	r3, r3, #8
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PD6     ------> LTDC_B2
    PB5     ------> LTDC_B5
    PB8     ------> LTDC_B6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006150:	2301      	movs	r3, #1
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006154:	2302      	movs	r3, #2
 8006156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006158:	2300      	movs	r3, #0
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800615c:	2300      	movs	r3, #0
 800615e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8006160:	230b      	movs	r3, #11
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006168:	4619      	mov	r1, r3
 800616a:	485d      	ldr	r0, [pc, #372]	; (80062e0 <HAL_LTDC_MspInit+0x268>)
 800616c:	f005 ff6c 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8006170:	f44f 6338 	mov.w	r3, #2944	; 0xb80
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006176:	2302      	movs	r3, #2
 8006178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800617a:	2300      	movs	r3, #0
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800617e:	2300      	movs	r3, #0
 8006180:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006182:	230e      	movs	r3, #14
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800618a:	4619      	mov	r1, r3
 800618c:	4855      	ldr	r0, [pc, #340]	; (80062e4 <HAL_LTDC_MspInit+0x26c>)
 800618e:	f005 ff5b 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006192:	2301      	movs	r3, #1
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006196:	2302      	movs	r3, #2
 8006198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619a:	2300      	movs	r3, #0
 800619c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800619e:	2300      	movs	r3, #0
 80061a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80061a2:	2309      	movs	r3, #9
 80061a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061aa:	4619      	mov	r1, r3
 80061ac:	484e      	ldr	r0, [pc, #312]	; (80062e8 <HAL_LTDC_MspInit+0x270>)
 80061ae:	f005 ff4b 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80061b2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061b8:	2302      	movs	r3, #2
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061c0:	2300      	movs	r3, #0
 80061c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80061c4:	230e      	movs	r3, #14
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80061c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061cc:	4619      	mov	r1, r3
 80061ce:	4847      	ldr	r0, [pc, #284]	; (80062ec <HAL_LTDC_MspInit+0x274>)
 80061d0:	f005 ff3a 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_8;
 80061d4:	f44f 439a 	mov.w	r3, #19712	; 0x4d00
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061da:	2302      	movs	r3, #2
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061e2:	2300      	movs	r3, #0
 80061e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80061e6:	230e      	movs	r3, #14
 80061e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061ee:	4619      	mov	r1, r3
 80061f0:	483d      	ldr	r0, [pc, #244]	; (80062e8 <HAL_LTDC_MspInit+0x270>)
 80061f2:	f005 ff29 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
 80061f6:	f44f 6389 	mov.w	r3, #1096	; 0x448
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061fc:	2302      	movs	r3, #2
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006200:	2300      	movs	r3, #0
 8006202:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006204:	2300      	movs	r3, #0
 8006206:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006208:	230e      	movs	r3, #14
 800620a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800620c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006210:	4619      	mov	r1, r3
 8006212:	4837      	ldr	r0, [pc, #220]	; (80062f0 <HAL_LTDC_MspInit+0x278>)
 8006214:	f005 ff18 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8006218:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800621e:	2302      	movs	r3, #2
 8006220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006222:	2300      	movs	r3, #0
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006226:	2300      	movs	r3, #0
 8006228:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800622a:	230e      	movs	r3, #14
 800622c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800622e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006232:	4619      	mov	r1, r3
 8006234:	482a      	ldr	r0, [pc, #168]	; (80062e0 <HAL_LTDC_MspInit+0x268>)
 8006236:	f005 ff07 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800623a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006240:	2302      	movs	r3, #2
 8006242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006244:	2300      	movs	r3, #0
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006248:	2300      	movs	r3, #0
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
 800624c:	230a      	movs	r3, #10
 800624e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006254:	4619      	mov	r1, r3
 8006256:	4822      	ldr	r0, [pc, #136]	; (80062e0 <HAL_LTDC_MspInit+0x268>)
 8006258:	f005 fef6 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800625c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006262:	2302      	movs	r3, #2
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006266:	2300      	movs	r3, #0
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800626a:	2300      	movs	r3, #0
 800626c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
 800626e:	230c      	movs	r3, #12
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006276:	4619      	mov	r1, r3
 8006278:	481a      	ldr	r0, [pc, #104]	; (80062e4 <HAL_LTDC_MspInit+0x26c>)
 800627a:	f005 fee5 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800627e:	2304      	movs	r3, #4
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006282:	2302      	movs	r3, #2
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006286:	2300      	movs	r3, #0
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800628a:	2300      	movs	r3, #0
 800628c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800628e:	2309      	movs	r3, #9
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006296:	4619      	mov	r1, r3
 8006298:	4815      	ldr	r0, [pc, #84]	; (80062f0 <HAL_LTDC_MspInit+0x278>)
 800629a:	f005 fed5 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800629e:	2320      	movs	r3, #32
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a2:	2302      	movs	r3, #2
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062aa:	2300      	movs	r3, #0
 80062ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 80062ae:	230b      	movs	r3, #11
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062b6:	4619      	mov	r1, r3
 80062b8:	480b      	ldr	r0, [pc, #44]	; (80062e8 <HAL_LTDC_MspInit+0x270>)
 80062ba:	f005 fec5 	bl	800c048 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80062be:	2200      	movs	r2, #0
 80062c0:	2100      	movs	r1, #0
 80062c2:	2058      	movs	r0, #88	; 0x58
 80062c4:	f002 fd63 	bl	8008d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80062c8:	2058      	movs	r0, #88	; 0x58
 80062ca:	f002 fd7a 	bl	8008dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80062ce:	bf00      	nop
 80062d0:	3738      	adds	r7, #56	; 0x38
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	50001000 	.word	0x50001000
 80062dc:	58024400 	.word	0x58024400
 80062e0:	58020800 	.word	0x58020800
 80062e4:	58020000 	.word	0x58020000
 80062e8:	58020400 	.word	0x58020400
 80062ec:	58021000 	.word	0x58021000
 80062f0:	58020c00 	.word	0x58020c00

080062f4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b0be      	sub	sp, #248	; 0xf8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	605a      	str	r2, [r3, #4]
 8006306:	609a      	str	r2, [r3, #8]
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800630c:	f107 0320 	add.w	r3, r7, #32
 8006310:	22c0      	movs	r2, #192	; 0xc0
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f00e fbd1 	bl	8014abc <memset>
  if(hospi->Instance==OCTOSPI1)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a7a      	ldr	r2, [pc, #488]	; (8006508 <HAL_OSPI_MspInit+0x214>)
 8006320:	4293      	cmp	r3, r2
 8006322:	f040 80ec 	bne.w	80064fe <HAL_OSPI_MspInit+0x20a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8006326:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
 8006332:	2330      	movs	r3, #48	; 0x30
 8006334:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006336:	f107 0320 	add.w	r3, r7, #32
 800633a:	4618      	mov	r0, r3
 800633c:	f009 f84a 	bl	800f3d4 <HAL_RCCEx_PeriphCLKConfig>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8006346:	f7ff fd8f 	bl	8005e68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800634a:	4b70      	ldr	r3, [pc, #448]	; (800650c <HAL_OSPI_MspInit+0x218>)
 800634c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006350:	4a6e      	ldr	r2, [pc, #440]	; (800650c <HAL_OSPI_MspInit+0x218>)
 8006352:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006356:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800635a:	4b6c      	ldr	r3, [pc, #432]	; (800650c <HAL_OSPI_MspInit+0x218>)
 800635c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8006368:	4b68      	ldr	r3, [pc, #416]	; (800650c <HAL_OSPI_MspInit+0x218>)
 800636a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800636e:	4a67      	ldr	r2, [pc, #412]	; (800650c <HAL_OSPI_MspInit+0x218>)
 8006370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006374:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8006378:	4b64      	ldr	r3, [pc, #400]	; (800650c <HAL_OSPI_MspInit+0x218>)
 800637a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800637e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006382:	61bb      	str	r3, [r7, #24]
 8006384:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006386:	4b61      	ldr	r3, [pc, #388]	; (800650c <HAL_OSPI_MspInit+0x218>)
 8006388:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800638c:	4a5f      	ldr	r2, [pc, #380]	; (800650c <HAL_OSPI_MspInit+0x218>)
 800638e:	f043 0310 	orr.w	r3, r3, #16
 8006392:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006396:	4b5d      	ldr	r3, [pc, #372]	; (800650c <HAL_OSPI_MspInit+0x218>)
 8006398:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063a4:	4b59      	ldr	r3, [pc, #356]	; (800650c <HAL_OSPI_MspInit+0x218>)
 80063a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80063aa:	4a58      	ldr	r2, [pc, #352]	; (800650c <HAL_OSPI_MspInit+0x218>)
 80063ac:	f043 0301 	orr.w	r3, r3, #1
 80063b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80063b4:	4b55      	ldr	r3, [pc, #340]	; (800650c <HAL_OSPI_MspInit+0x218>)
 80063b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063c2:	4b52      	ldr	r3, [pc, #328]	; (800650c <HAL_OSPI_MspInit+0x218>)
 80063c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80063c8:	4a50      	ldr	r2, [pc, #320]	; (800650c <HAL_OSPI_MspInit+0x218>)
 80063ca:	f043 0302 	orr.w	r3, r3, #2
 80063ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80063d2:	4b4e      	ldr	r3, [pc, #312]	; (800650c <HAL_OSPI_MspInit+0x218>)
 80063d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80063e0:	4b4a      	ldr	r3, [pc, #296]	; (800650c <HAL_OSPI_MspInit+0x218>)
 80063e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80063e6:	4a49      	ldr	r2, [pc, #292]	; (800650c <HAL_OSPI_MspInit+0x218>)
 80063e8:	f043 0308 	orr.w	r3, r3, #8
 80063ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80063f0:	4b46      	ldr	r3, [pc, #280]	; (800650c <HAL_OSPI_MspInit+0x218>)
 80063f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	60bb      	str	r3, [r7, #8]
 80063fc:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    PD12     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80063fe:	2304      	movs	r3, #4
 8006400:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006404:	2302      	movs	r3, #2
 8006406:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800640a:	2300      	movs	r3, #0
 800640c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006410:	2303      	movs	r3, #3
 8006412:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8006416:	2309      	movs	r3, #9
 8006418:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800641c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006420:	4619      	mov	r1, r3
 8006422:	483b      	ldr	r0, [pc, #236]	; (8006510 <HAL_OSPI_MspInit+0x21c>)
 8006424:	f005 fe10 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006428:	2302      	movs	r3, #2
 800642a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800642e:	2302      	movs	r3, #2
 8006430:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006434:	2300      	movs	r3, #0
 8006436:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800643a:	2303      	movs	r3, #3
 800643c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8006440:	2309      	movs	r3, #9
 8006442:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006446:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800644a:	4619      	mov	r1, r3
 800644c:	4831      	ldr	r0, [pc, #196]	; (8006514 <HAL_OSPI_MspInit+0x220>)
 800644e:	f005 fdfb 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006452:	2302      	movs	r3, #2
 8006454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006458:	2302      	movs	r3, #2
 800645a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800645e:	2300      	movs	r3, #0
 8006460:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006464:	2303      	movs	r3, #3
 8006466:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 800646a:	230b      	movs	r3, #11
 800646c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006470:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006474:	4619      	mov	r1, r3
 8006476:	4828      	ldr	r0, [pc, #160]	; (8006518 <HAL_OSPI_MspInit+0x224>)
 8006478:	f005 fde6 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800647c:	2304      	movs	r3, #4
 800647e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006482:	2302      	movs	r3, #2
 8006484:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006488:	2300      	movs	r3, #0
 800648a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800648e:	2303      	movs	r3, #3
 8006490:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8006494:	2309      	movs	r3, #9
 8006496:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800649a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800649e:	4619      	mov	r1, r3
 80064a0:	481d      	ldr	r0, [pc, #116]	; (8006518 <HAL_OSPI_MspInit+0x224>)
 80064a2:	f005 fdd1 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80064a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ae:	2302      	movs	r3, #2
 80064b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064ba:	2303      	movs	r3, #3
 80064bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 80064c0:	230b      	movs	r3, #11
 80064c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80064ca:	4619      	mov	r1, r3
 80064cc:	4810      	ldr	r0, [pc, #64]	; (8006510 <HAL_OSPI_MspInit+0x21c>)
 80064ce:	f005 fdbb 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80064d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064da:	2302      	movs	r3, #2
 80064dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064e6:	2303      	movs	r3, #3
 80064e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80064ec:	2309      	movs	r3, #9
 80064ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80064f6:	4619      	mov	r1, r3
 80064f8:	4808      	ldr	r0, [pc, #32]	; (800651c <HAL_OSPI_MspInit+0x228>)
 80064fa:	f005 fda5 	bl	800c048 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80064fe:	bf00      	nop
 8006500:	37f8      	adds	r7, #248	; 0xf8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	52005000 	.word	0x52005000
 800650c:	58024400 	.word	0x58024400
 8006510:	58021000 	.word	0x58021000
 8006514:	58020000 	.word	0x58020000
 8006518:	58020400 	.word	0x58020400
 800651c:	58020c00 	.word	0x58020c00

08006520 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b0b2      	sub	sp, #200	; 0xc8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006528:	f107 0308 	add.w	r3, r7, #8
 800652c:	22c0      	movs	r2, #192	; 0xc0
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f00e fac3 	bl	8014abc <memset>
  if(hrtc->Instance==RTC)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a10      	ldr	r2, [pc, #64]	; (800657c <HAL_RTC_MspInit+0x5c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d119      	bne.n	8006574 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006540:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800654c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006550:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006554:	f107 0308 	add.w	r3, r7, #8
 8006558:	4618      	mov	r0, r3
 800655a:	f008 ff3b 	bl	800f3d4 <HAL_RCCEx_PeriphCLKConfig>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8006564:	f7ff fc80 	bl	8005e68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006568:	4b05      	ldr	r3, [pc, #20]	; (8006580 <HAL_RTC_MspInit+0x60>)
 800656a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656c:	4a04      	ldr	r2, [pc, #16]	; (8006580 <HAL_RTC_MspInit+0x60>)
 800656e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006572:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006574:	bf00      	nop
 8006576:	37c8      	adds	r7, #200	; 0xc8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	58004000 	.word	0x58004000
 8006580:	58024400 	.word	0x58024400

08006584 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b0ba      	sub	sp, #232	; 0xe8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800658c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	609a      	str	r2, [r3, #8]
 8006598:	60da      	str	r2, [r3, #12]
 800659a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800659c:	f107 0310 	add.w	r3, r7, #16
 80065a0:	22c0      	movs	r2, #192	; 0xc0
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f00e fa89 	bl	8014abc <memset>
  if(hspi->Instance==SPI2)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a27      	ldr	r2, [pc, #156]	; (800664c <HAL_SPI_MspInit+0xc8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d146      	bne.n	8006642 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80065b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80065c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065c4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065c6:	f107 0310 	add.w	r3, r7, #16
 80065ca:	4618      	mov	r0, r3
 80065cc:	f008 ff02 	bl	800f3d4 <HAL_RCCEx_PeriphCLKConfig>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80065d6:	f7ff fc47 	bl	8005e68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80065da:	4b1d      	ldr	r3, [pc, #116]	; (8006650 <HAL_SPI_MspInit+0xcc>)
 80065dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80065e0:	4a1b      	ldr	r2, [pc, #108]	; (8006650 <HAL_SPI_MspInit+0xcc>)
 80065e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065e6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80065ea:	4b19      	ldr	r3, [pc, #100]	; (8006650 <HAL_SPI_MspInit+0xcc>)
 80065ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80065f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065f8:	4b15      	ldr	r3, [pc, #84]	; (8006650 <HAL_SPI_MspInit+0xcc>)
 80065fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065fe:	4a14      	ldr	r2, [pc, #80]	; (8006650 <HAL_SPI_MspInit+0xcc>)
 8006600:	f043 0302 	orr.w	r3, r3, #2
 8006604:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <HAL_SPI_MspInit+0xcc>)
 800660a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	60bb      	str	r3, [r7, #8]
 8006614:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8006616:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800661a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800661e:	2302      	movs	r3, #2
 8006620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006624:	2300      	movs	r3, #0
 8006626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800662a:	2300      	movs	r3, #0
 800662c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006630:	2305      	movs	r3, #5
 8006632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006636:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800663a:	4619      	mov	r1, r3
 800663c:	4805      	ldr	r0, [pc, #20]	; (8006654 <HAL_SPI_MspInit+0xd0>)
 800663e:	f005 fd03 	bl	800c048 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006642:	bf00      	nop
 8006644:	37e8      	adds	r7, #232	; 0xe8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40003800 	.word	0x40003800
 8006650:	58024400 	.word	0x58024400
 8006654:	58020400 	.word	0x58020400

08006658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a0e      	ldr	r2, [pc, #56]	; (80066a0 <HAL_TIM_Base_MspInit+0x48>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d116      	bne.n	8006698 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800666a:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <HAL_TIM_Base_MspInit+0x4c>)
 800666c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006670:	4a0c      	ldr	r2, [pc, #48]	; (80066a4 <HAL_TIM_Base_MspInit+0x4c>)
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800667a:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <HAL_TIM_Base_MspInit+0x4c>)
 800667c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8006688:	2200      	movs	r2, #0
 800668a:	2100      	movs	r1, #0
 800668c:	2019      	movs	r0, #25
 800668e:	f002 fb7e 	bl	8008d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8006692:	2019      	movs	r0, #25
 8006694:	f002 fb95 	bl	8008dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8006698:	bf00      	nop
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40010000 	.word	0x40010000
 80066a4:	58024400 	.word	0x58024400

080066a8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b0ba      	sub	sp, #232	; 0xe8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80066b0:	f107 0310 	add.w	r3, r7, #16
 80066b4:	22c0      	movs	r2, #192	; 0xc0
 80066b6:	2100      	movs	r1, #0
 80066b8:	4618      	mov	r0, r3
 80066ba:	f00e f9ff 	bl	8014abc <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a50      	ldr	r2, [pc, #320]	; (8006804 <HAL_SAI_MspInit+0x15c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	f040 8098 	bne.w	80067fa <HAL_SAI_MspInit+0x152>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80066ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066ce:	f04f 0300 	mov.w	r3, #0
 80066d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80066d6:	2319      	movs	r3, #25
 80066d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 80066da:	23c0      	movs	r3, #192	; 0xc0
 80066dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 80066de:	2305      	movs	r3, #5
 80066e0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80066e2:	2302      	movs	r3, #2
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 5;
 80066e6:	2305      	movs	r3, #5
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80066ea:	2340      	movs	r3, #64	; 0x40
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80066f6:	2301      	movs	r3, #1
 80066f8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80066fa:	f107 0310 	add.w	r3, r7, #16
 80066fe:	4618      	mov	r0, r3
 8006700:	f008 fe68 	bl	800f3d4 <HAL_RCCEx_PeriphCLKConfig>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <HAL_SAI_MspInit+0x66>
    {
      Error_Handler();
 800670a:	f7ff fbad 	bl	8005e68 <Error_Handler>
    }

    if (SAI1_client == 0)
 800670e:	4b3e      	ldr	r3, [pc, #248]	; (8006808 <HAL_SAI_MspInit+0x160>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d116      	bne.n	8006744 <HAL_SAI_MspInit+0x9c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006716:	4b3d      	ldr	r3, [pc, #244]	; (800680c <HAL_SAI_MspInit+0x164>)
 8006718:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800671c:	4a3b      	ldr	r2, [pc, #236]	; (800680c <HAL_SAI_MspInit+0x164>)
 800671e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006722:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8006726:	4b39      	ldr	r3, [pc, #228]	; (800680c <HAL_SAI_MspInit+0x164>)
 8006728:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800672c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8006734:	2200      	movs	r2, #0
 8006736:	2100      	movs	r1, #0
 8006738:	2057      	movs	r0, #87	; 0x57
 800673a:	f002 fb28 	bl	8008d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800673e:	2057      	movs	r0, #87	; 0x57
 8006740:	f002 fb3f 	bl	8008dc2 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8006744:	4b30      	ldr	r3, [pc, #192]	; (8006808 <HAL_SAI_MspInit+0x160>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	4a2f      	ldr	r2, [pc, #188]	; (8006808 <HAL_SAI_MspInit+0x160>)
 800674c:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800674e:	2370      	movs	r3, #112	; 0x70
 8006750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006754:	2302      	movs	r3, #2
 8006756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800675a:	2300      	movs	r3, #0
 800675c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006760:	2300      	movs	r3, #0
 8006762:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006766:	2306      	movs	r3, #6
 8006768:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800676c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006770:	4619      	mov	r1, r3
 8006772:	4827      	ldr	r0, [pc, #156]	; (8006810 <HAL_SAI_MspInit+0x168>)
 8006774:	f005 fc68 	bl	800c048 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8006778:	4b26      	ldr	r3, [pc, #152]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 800677a:	4a27      	ldr	r2, [pc, #156]	; (8006818 <HAL_SAI_MspInit+0x170>)
 800677c:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800677e:	4b25      	ldr	r3, [pc, #148]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 8006780:	2257      	movs	r2, #87	; 0x57
 8006782:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006784:	4b23      	ldr	r3, [pc, #140]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 8006786:	2240      	movs	r2, #64	; 0x40
 8006788:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800678a:	4b22      	ldr	r3, [pc, #136]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 800678c:	2200      	movs	r2, #0
 800678e:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8006790:	4b20      	ldr	r3, [pc, #128]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 8006792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006796:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006798:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 800679a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800679e:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80067a0:	4b1c      	ldr	r3, [pc, #112]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 80067a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067a6:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80067a8:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 80067aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067ae:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80067b0:	4b18      	ldr	r3, [pc, #96]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80067b6:	4b17      	ldr	r3, [pc, #92]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 80067b8:	2204      	movs	r2, #4
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80067bc:	4b15      	ldr	r3, [pc, #84]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 80067be:	2203      	movs	r2, #3
 80067c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80067c2:	4b14      	ldr	r3, [pc, #80]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80067c8:	4b12      	ldr	r3, [pc, #72]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80067ce:	4811      	ldr	r0, [pc, #68]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 80067d0:	f002 fcec 	bl	80091ac <HAL_DMA_Init>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <HAL_SAI_MspInit+0x136>
    {
      Error_Handler();
 80067da:	f7ff fb45 	bl	8005e68 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a0c      	ldr	r2, [pc, #48]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 80067e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80067e6:	4a0b      	ldr	r2, [pc, #44]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a09      	ldr	r2, [pc, #36]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 80067f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80067f4:	4a07      	ldr	r2, [pc, #28]	; (8006814 <HAL_SAI_MspInit+0x16c>)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80067fa:	bf00      	nop
 80067fc:	37e8      	adds	r7, #232	; 0xe8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40015804 	.word	0x40015804
 8006808:	20000674 	.word	0x20000674
 800680c:	58024400 	.word	0x58024400
 8006810:	58021000 	.word	0x58021000
 8006814:	20000528 	.word	0x20000528
 8006818:	40020010 	.word	0x40020010

0800681c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8006820:	e7fe      	b.n	8006820 <NMI_Handler+0x4>

08006822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006822:	b480      	push	{r7}
 8006824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006826:	e7fe      	b.n	8006826 <HardFault_Handler+0x4>

08006828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800682c:	e7fe      	b.n	800682c <MemManage_Handler+0x4>

0800682e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800682e:	b480      	push	{r7}
 8006830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006832:	e7fe      	b.n	8006832 <BusFault_Handler+0x4>

08006834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006838:	e7fe      	b.n	8006838 <UsageFault_Handler+0x4>

0800683a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800683a:	b480      	push	{r7}
 800683c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800683e:	bf00      	nop
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800684c:	bf00      	nop
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006856:	b480      	push	{r7}
 8006858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800685a:	bf00      	nop
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006868:	f000 fa44 	bl	8006cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#if 1
	if (HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == 0) // is power button down ?
 800686c:	2101      	movs	r1, #1
 800686e:	480c      	ldr	r0, [pc, #48]	; (80068a0 <SysTick_Handler+0x3c>)
 8006870:	f005 fd9a 	bl	800c3a8 <HAL_GPIO_ReadPin>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10d      	bne.n	8006896 <SysTick_Handler+0x32>
			{
		g_system_reset_ticks++;
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <SysTick_Handler+0x40>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3301      	adds	r3, #1
 8006880:	4a08      	ldr	r2, [pc, #32]	; (80068a4 <SysTick_Handler+0x40>)
 8006882:	6013      	str	r3, [r2, #0]
		if (g_system_reset_ticks >= 5000) {
 8006884:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <SysTick_Handler+0x40>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f241 3287 	movw	r2, #4999	; 0x1387
 800688c:	4293      	cmp	r3, r2
 800688e:	dd05      	ble.n	800689c <SysTick_Handler+0x38>
			HAL_NVIC_SystemReset();
 8006890:	f002 faa5 	bl	8008dde <HAL_NVIC_SystemReset>
	} else {
		g_system_reset_ticks = 0;
	}
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8006894:	e002      	b.n	800689c <SysTick_Handler+0x38>
		g_system_reset_ticks = 0;
 8006896:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <SysTick_Handler+0x40>)
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]
}
 800689c:	bf00      	nop
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	58020000 	.word	0x58020000
 80068a4:	20000678 	.word	0x20000678

080068a8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80068ac:	2004      	movs	r0, #4
 80068ae:	f005 fdac 	bl	800c40a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80068b2:	bf00      	nop
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80068bc:	4802      	ldr	r0, [pc, #8]	; (80068c8 <DMA1_Stream0_IRQHandler+0x10>)
 80068be:	f003 ffd1 	bl	800a864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80068c2:	bf00      	nop
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000528 	.word	0x20000528

080068cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80068d0:	4802      	ldr	r0, [pc, #8]	; (80068dc <ADC_IRQHandler+0x10>)
 80068d2:	f001 f8fd 	bl	8007ad0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80068d6:	bf00      	nop
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000270 	.word	0x20000270

080068e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80068e4:	2080      	movs	r0, #128	; 0x80
 80068e6:	f005 fd90 	bl	800c40a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80068ea:	bf00      	nop
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80068f4:	4802      	ldr	r0, [pc, #8]	; (8006900 <TIM1_UP_IRQHandler+0x10>)
 80068f6:	f00d f903 	bl	8013b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80068fa:	bf00      	nop
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000628 	.word	0x20000628

08006904 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8006908:	4802      	ldr	r0, [pc, #8]	; (8006914 <SAI1_IRQHandler+0x10>)
 800690a:	f00c f815 	bl	8012938 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 800690e:	bf00      	nop
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20000490 	.word	0x20000490

08006918 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800691c:	4802      	ldr	r0, [pc, #8]	; (8006928 <LTDC_IRQHandler+0x10>)
 800691e:	f005 fe69 	bl	800c5f4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8006922:	bf00      	nop
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20000364 	.word	0x20000364

0800692c <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8006930:	4802      	ldr	r0, [pc, #8]	; (800693c <OCTOSPI1_IRQHandler+0x10>)
 8006932:	f006 fa39 	bl	800cda8 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8006936:	bf00      	nop
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	2000040c 	.word	0x2000040c

08006940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
	return 1;
 8006944:	2301      	movs	r3, #1
}
 8006946:	4618      	mov	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <_kill>:

int _kill(int pid, int sig)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800695a:	f00e f90d 	bl	8014b78 <__errno>
 800695e:	4603      	mov	r3, r0
 8006960:	2216      	movs	r2, #22
 8006962:	601a      	str	r2, [r3, #0]
	return -1;
 8006964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <_exit>:

void _exit (int status)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006978:	f04f 31ff 	mov.w	r1, #4294967295
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff ffe7 	bl	8006950 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006982:	e7fe      	b.n	8006982 <_exit+0x12>

08006984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	e00a      	b.n	80069ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006996:	f3af 8000 	nop.w
 800699a:	4601      	mov	r1, r0
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	60ba      	str	r2, [r7, #8]
 80069a2:	b2ca      	uxtb	r2, r1
 80069a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	3301      	adds	r3, #1
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	dbf0      	blt.n	8006996 <_read+0x12>
	}

return len;
 80069b4:	687b      	ldr	r3, [r7, #4]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b086      	sub	sp, #24
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	e009      	b.n	80069e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	60ba      	str	r2, [r7, #8]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	3301      	adds	r3, #1
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	dbf1      	blt.n	80069d0 <_write+0x12>
	}
	return len;
 80069ec:	687b      	ldr	r3, [r7, #4]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <_close>:

int _close(int file)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
	return -1;
 80069fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a1e:	605a      	str	r2, [r3, #4]
	return 0;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <_isatty>:

int _isatty(int file)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
	return 1;
 8006a36:	2301      	movs	r3, #1
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
	return 0;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
	...

08006a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a68:	4a14      	ldr	r2, [pc, #80]	; (8006abc <_sbrk+0x5c>)
 8006a6a:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <_sbrk+0x60>)
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a74:	4b13      	ldr	r3, [pc, #76]	; (8006ac4 <_sbrk+0x64>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d102      	bne.n	8006a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a7c:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <_sbrk+0x64>)
 8006a7e:	4a12      	ldr	r2, [pc, #72]	; (8006ac8 <_sbrk+0x68>)
 8006a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a82:	4b10      	ldr	r3, [pc, #64]	; (8006ac4 <_sbrk+0x64>)
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4413      	add	r3, r2
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d207      	bcs.n	8006aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a90:	f00e f872 	bl	8014b78 <__errno>
 8006a94:	4603      	mov	r3, r0
 8006a96:	220c      	movs	r2, #12
 8006a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9e:	e009      	b.n	8006ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006aa0:	4b08      	ldr	r3, [pc, #32]	; (8006ac4 <_sbrk+0x64>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006aa6:	4b07      	ldr	r3, [pc, #28]	; (8006ac4 <_sbrk+0x64>)
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4413      	add	r3, r2
 8006aae:	4a05      	ldr	r2, [pc, #20]	; (8006ac4 <_sbrk+0x64>)
 8006ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	20020000 	.word	0x20020000
 8006ac0:	00005000 	.word	0x00005000
 8006ac4:	2000067c 	.word	0x2000067c
 8006ac8:	200007d0 	.word	0x200007d0

08006acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006ad0:	4b32      	ldr	r3, [pc, #200]	; (8006b9c <SystemInit+0xd0>)
 8006ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad6:	4a31      	ldr	r2, [pc, #196]	; (8006b9c <SystemInit+0xd0>)
 8006ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006ae0:	4b2f      	ldr	r3, [pc, #188]	; (8006ba0 <SystemInit+0xd4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 030f 	and.w	r3, r3, #15
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d807      	bhi.n	8006afc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006aec:	4b2c      	ldr	r3, [pc, #176]	; (8006ba0 <SystemInit+0xd4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f023 030f 	bic.w	r3, r3, #15
 8006af4:	4a2a      	ldr	r2, [pc, #168]	; (8006ba0 <SystemInit+0xd4>)
 8006af6:	f043 0303 	orr.w	r3, r3, #3
 8006afa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006afc:	4b29      	ldr	r3, [pc, #164]	; (8006ba4 <SystemInit+0xd8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a28      	ldr	r2, [pc, #160]	; (8006ba4 <SystemInit+0xd8>)
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006b08:	4b26      	ldr	r3, [pc, #152]	; (8006ba4 <SystemInit+0xd8>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006b0e:	4b25      	ldr	r3, [pc, #148]	; (8006ba4 <SystemInit+0xd8>)
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	4924      	ldr	r1, [pc, #144]	; (8006ba4 <SystemInit+0xd8>)
 8006b14:	4b24      	ldr	r3, [pc, #144]	; (8006ba8 <SystemInit+0xdc>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006b1a:	4b21      	ldr	r3, [pc, #132]	; (8006ba0 <SystemInit+0xd4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 030c 	and.w	r3, r3, #12
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d007      	beq.n	8006b36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006b26:	4b1e      	ldr	r3, [pc, #120]	; (8006ba0 <SystemInit+0xd4>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f023 030f 	bic.w	r3, r3, #15
 8006b2e:	4a1c      	ldr	r2, [pc, #112]	; (8006ba0 <SystemInit+0xd4>)
 8006b30:	f043 0303 	orr.w	r3, r3, #3
 8006b34:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8006b36:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <SystemInit+0xd8>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8006b3c:	4b19      	ldr	r3, [pc, #100]	; (8006ba4 <SystemInit+0xd8>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8006b42:	4b18      	ldr	r3, [pc, #96]	; (8006ba4 <SystemInit+0xd8>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006b48:	4b16      	ldr	r3, [pc, #88]	; (8006ba4 <SystemInit+0xd8>)
 8006b4a:	4a18      	ldr	r2, [pc, #96]	; (8006bac <SystemInit+0xe0>)
 8006b4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006b4e:	4b15      	ldr	r3, [pc, #84]	; (8006ba4 <SystemInit+0xd8>)
 8006b50:	4a17      	ldr	r2, [pc, #92]	; (8006bb0 <SystemInit+0xe4>)
 8006b52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006b54:	4b13      	ldr	r3, [pc, #76]	; (8006ba4 <SystemInit+0xd8>)
 8006b56:	4a17      	ldr	r2, [pc, #92]	; (8006bb4 <SystemInit+0xe8>)
 8006b58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006b5a:	4b12      	ldr	r3, [pc, #72]	; (8006ba4 <SystemInit+0xd8>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006b60:	4b10      	ldr	r3, [pc, #64]	; (8006ba4 <SystemInit+0xd8>)
 8006b62:	4a14      	ldr	r2, [pc, #80]	; (8006bb4 <SystemInit+0xe8>)
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006b66:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <SystemInit+0xd8>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006b6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ba4 <SystemInit+0xd8>)
 8006b6e:	4a11      	ldr	r2, [pc, #68]	; (8006bb4 <SystemInit+0xe8>)
 8006b70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006b72:	4b0c      	ldr	r3, [pc, #48]	; (8006ba4 <SystemInit+0xd8>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006b78:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <SystemInit+0xd8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a09      	ldr	r2, [pc, #36]	; (8006ba4 <SystemInit+0xd8>)
 8006b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006b84:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <SystemInit+0xd8>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006b8a:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <SystemInit+0xec>)
 8006b8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006b90:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8006b92:	bf00      	nop
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	e000ed00 	.word	0xe000ed00
 8006ba0:	52002000 	.word	0x52002000
 8006ba4:	58024400 	.word	0x58024400
 8006ba8:	eaf6ed7f 	.word	0xeaf6ed7f
 8006bac:	02020200 	.word	0x02020200
 8006bb0:	01ff0000 	.word	0x01ff0000
 8006bb4:	01010280 	.word	0x01010280
 8006bb8:	52004000 	.word	0x52004000

08006bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bf4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006bc0:	f7ff ff84 	bl	8006acc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006bc4:	480c      	ldr	r0, [pc, #48]	; (8006bf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006bc6:	490d      	ldr	r1, [pc, #52]	; (8006bfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006bc8:	4a0d      	ldr	r2, [pc, #52]	; (8006c00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006bcc:	e002      	b.n	8006bd4 <LoopCopyDataInit>

08006bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006bd2:	3304      	adds	r3, #4

08006bd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8006bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006bd8:	d3f9      	bcc.n	8006bce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bda:	4a0a      	ldr	r2, [pc, #40]	; (8006c04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006bdc:	4c0a      	ldr	r4, [pc, #40]	; (8006c08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006be0:	e001      	b.n	8006be6 <LoopFillZerobss>

08006be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006be4:	3204      	adds	r2, #4

08006be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006be8:	d3fb      	bcc.n	8006be2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006bea:	f00d ffcb 	bl	8014b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006bee:	f7fe fb9f 	bl	8005330 <main>
  bx  lr
 8006bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006bfc:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8006c00:	08019e10 	.word	0x08019e10
  ldr r2, =_sbss
 8006c04:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8006c08:	200007d0 	.word	0x200007d0

08006c0c <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c0c:	e7fe      	b.n	8006c0c <BDMA1_IRQHandler>
	...

08006c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c16:	2003      	movs	r0, #3
 8006c18:	f002 f8ae 	bl	8008d78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006c1c:	f008 fa1a 	bl	800f054 <HAL_RCC_GetSysClockFreq>
 8006c20:	4602      	mov	r2, r0
 8006c22:	4b15      	ldr	r3, [pc, #84]	; (8006c78 <HAL_Init+0x68>)
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	0a1b      	lsrs	r3, r3, #8
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	4913      	ldr	r1, [pc, #76]	; (8006c7c <HAL_Init+0x6c>)
 8006c2e:	5ccb      	ldrb	r3, [r1, r3]
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	fa22 f303 	lsr.w	r3, r2, r3
 8006c38:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006c3a:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <HAL_Init+0x68>)
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	4a0e      	ldr	r2, [pc, #56]	; (8006c7c <HAL_Init+0x6c>)
 8006c44:	5cd3      	ldrb	r3, [r2, r3]
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c50:	4a0b      	ldr	r2, [pc, #44]	; (8006c80 <HAL_Init+0x70>)
 8006c52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c54:	4a0b      	ldr	r2, [pc, #44]	; (8006c84 <HAL_Init+0x74>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	f000 f814 	bl	8006c88 <HAL_InitTick>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e002      	b.n	8006c70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006c6a:	f7ff f903 	bl	8005e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	58024400 	.word	0x58024400
 8006c7c:	08019d10 	.word	0x08019d10
 8006c80:	200000e4 	.word	0x200000e4
 8006c84:	200000e0 	.word	0x200000e0

08006c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006c90:	4b15      	ldr	r3, [pc, #84]	; (8006ce8 <HAL_InitTick+0x60>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e021      	b.n	8006ce0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006c9c:	4b13      	ldr	r3, [pc, #76]	; (8006cec <HAL_InitTick+0x64>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <HAL_InitTick+0x60>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f002 f897 	bl	8008de6 <HAL_SYSTICK_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e00e      	b.n	8006ce0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b0f      	cmp	r3, #15
 8006cc6:	d80a      	bhi.n	8006cde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cc8:	2200      	movs	r2, #0
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	f002 f85d 	bl	8008d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cd4:	4a06      	ldr	r2, [pc, #24]	; (8006cf0 <HAL_InitTick+0x68>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e000      	b.n	8006ce0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	200000ec 	.word	0x200000ec
 8006cec:	200000e0 	.word	0x200000e0
 8006cf0:	200000e8 	.word	0x200000e8

08006cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006cf8:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <HAL_IncTick+0x20>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <HAL_IncTick+0x24>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4413      	add	r3, r2
 8006d04:	4a04      	ldr	r2, [pc, #16]	; (8006d18 <HAL_IncTick+0x24>)
 8006d06:	6013      	str	r3, [r2, #0]
}
 8006d08:	bf00      	nop
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	200000ec 	.word	0x200000ec
 8006d18:	20000680 	.word	0x20000680

08006d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8006d20:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <HAL_GetTick+0x14>)
 8006d22:	681b      	ldr	r3, [r3, #0]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000680 	.word	0x20000680

08006d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d3c:	f7ff ffee 	bl	8006d1c <HAL_GetTick>
 8006d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d005      	beq.n	8006d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <HAL_Delay+0x44>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d5a:	bf00      	nop
 8006d5c:	f7ff ffde 	bl	8006d1c <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d8f7      	bhi.n	8006d5c <HAL_Delay+0x28>
  {
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	200000ec 	.word	0x200000ec

08006d7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	609a      	str	r2, [r3, #8]
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	609a      	str	r2, [r3, #8]
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3360      	adds	r3, #96	; 0x60
 8006df6:	461a      	mov	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	430b      	orrs	r3, r1
 8006e12:	431a      	orrs	r2, r3
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006e18:	bf00      	nop
 8006e1a:	371c      	adds	r7, #28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	fa01 f303 	lsl.w	r3, r1, r3
 8006e44:	431a      	orrs	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	611a      	str	r2, [r3, #16]
}
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b087      	sub	sp, #28
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3360      	adds	r3, #96	; 0x60
 8006e66:	461a      	mov	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	601a      	str	r2, [r3, #0]
  }
}
 8006e80:	bf00      	nop
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e000      	b.n	8006ea6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b087      	sub	sp, #28
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3330      	adds	r3, #48	; 0x30
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	0a1b      	lsrs	r3, r3, #8
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	f003 030c 	and.w	r3, r3, #12
 8006ece:	4413      	add	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	211f      	movs	r1, #31
 8006ede:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee2:	43db      	mvns	r3, r3
 8006ee4:	401a      	ands	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	0e9b      	lsrs	r3, r3, #26
 8006eea:	f003 011f 	and.w	r1, r3, #31
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f003 031f 	and.w	r3, r3, #31
 8006ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f16:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3314      	adds	r3, #20
 8006f40:	461a      	mov	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	0e5b      	lsrs	r3, r3, #25
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	4413      	add	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	0d1b      	lsrs	r3, r3, #20
 8006f58:	f003 031f 	and.w	r3, r3, #31
 8006f5c:	2107      	movs	r1, #7
 8006f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f62:	43db      	mvns	r3, r3
 8006f64:	401a      	ands	r2, r3
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	0d1b      	lsrs	r3, r3, #20
 8006f6a:	f003 031f 	and.w	r3, r3, #31
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	fa01 f303 	lsl.w	r3, r1, r3
 8006f74:	431a      	orrs	r2, r3
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006f7a:	bf00      	nop
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	401a      	ands	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f003 0318 	and.w	r3, r3, #24
 8006faa:	4908      	ldr	r1, [pc, #32]	; (8006fcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8006fac:	40d9      	lsrs	r1, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	400b      	ands	r3, r1
 8006fb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	000fffff 	.word	0x000fffff

08006fd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 031f 	and.w	r3, r3, #31
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <LL_ADC_DisableDeepPowerDown+0x20>)
 8007016:	4013      	ands	r3, r2
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6093      	str	r3, [r2, #8]
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	5fffffc0 	.word	0x5fffffc0

0800702c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800703c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007040:	d101      	bne.n	8007046 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	4b05      	ldr	r3, [pc, #20]	; (8007078 <LL_ADC_EnableInternalRegulator+0x24>)
 8007062:	4013      	ands	r3, r2
 8007064:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	6fffffc0 	.word	0x6fffffc0

0800707c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800708c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007090:	d101      	bne.n	8007096 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007092:	2301      	movs	r3, #1
 8007094:	e000      	b.n	8007098 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <LL_ADC_Enable+0x24>)
 80070b2:	4013      	ands	r3, r2
 80070b4:	f043 0201 	orr.w	r2, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	7fffffc0 	.word	0x7fffffc0

080070cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	4b05      	ldr	r3, [pc, #20]	; (80070f0 <LL_ADC_Disable+0x24>)
 80070da:	4013      	ands	r3, r2
 80070dc:	f043 0202 	orr.w	r2, r3, #2
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	7fffffc0 	.word	0x7fffffc0

080070f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <LL_ADC_IsEnabled+0x18>
 8007108:	2301      	movs	r3, #1
 800710a:	e000      	b.n	800710e <LL_ADC_IsEnabled+0x1a>
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800711a:	b480      	push	{r7}
 800711c:	b083      	sub	sp, #12
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b02      	cmp	r3, #2
 800712c:	d101      	bne.n	8007132 <LL_ADC_IsDisableOngoing+0x18>
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <LL_ADC_IsDisableOngoing+0x1a>
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	4b05      	ldr	r3, [pc, #20]	; (8007164 <LL_ADC_REG_StartConversion+0x24>)
 800714e:	4013      	ands	r3, r2
 8007150:	f043 0204 	orr.w	r2, r3, #4
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	7fffffc0 	.word	0x7fffffc0

08007168 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	4b05      	ldr	r3, [pc, #20]	; (800718c <LL_ADC_REG_StopConversion+0x24>)
 8007176:	4013      	ands	r3, r2
 8007178:	f043 0210 	orr.w	r2, r3, #16
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	7fffffc0 	.word	0x7fffffc0

08007190 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d101      	bne.n	80071a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
	...

080071b8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <LL_ADC_INJ_StopConversion+0x24>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	f043 0220 	orr.w	r2, r3, #32
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	7fffffc0 	.word	0x7fffffc0

080071e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d101      	bne.n	80071f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007208:	b590      	push	{r4, r7, lr}
 800720a:	b089      	sub	sp, #36	; 0x24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007214:	2300      	movs	r3, #0
 8007216:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e138      	b.n	8007494 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722c:	2b00      	cmp	r3, #0
 800722e:	d109      	bne.n	8007244 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7fe fe39 	bl	8005ea8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff feef 	bl	800702c <LL_ADC_IsDeepPowerDownEnabled>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff fed5 	bl	8007008 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff ff0a 	bl	800707c <LL_ADC_IsInternalRegulatorEnabled>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d114      	bne.n	8007298 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff feee 	bl	8007054 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007278:	4b88      	ldr	r3, [pc, #544]	; (800749c <HAL_ADC_Init+0x294>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	099b      	lsrs	r3, r3, #6
 800727e:	4a88      	ldr	r2, [pc, #544]	; (80074a0 <HAL_ADC_Init+0x298>)
 8007280:	fba2 2303 	umull	r2, r3, r2, r3
 8007284:	099b      	lsrs	r3, r3, #6
 8007286:	3301      	adds	r3, #1
 8007288:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800728a:	e002      	b.n	8007292 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	3b01      	subs	r3, #1
 8007290:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1f9      	bne.n	800728c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff feed 	bl	800707c <LL_ADC_IsInternalRegulatorEnabled>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10d      	bne.n	80072c4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	f043 0210 	orr.w	r2, r3, #16
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b8:	f043 0201 	orr.w	r2, r3, #1
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff ff61 	bl	8007190 <LL_ADC_REG_IsConversionOngoing>
 80072ce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d4:	f003 0310 	and.w	r3, r3, #16
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f040 80d2 	bne.w	8007482 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f040 80ce 	bne.w	8007482 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80072ee:	f043 0202 	orr.w	r2, r3, #2
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff fefa 	bl	80070f4 <LL_ADC_IsEnabled>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d110      	bne.n	8007328 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007306:	4867      	ldr	r0, [pc, #412]	; (80074a4 <HAL_ADC_Init+0x29c>)
 8007308:	f7ff fef4 	bl	80070f4 <LL_ADC_IsEnabled>
 800730c:	4604      	mov	r4, r0
 800730e:	4866      	ldr	r0, [pc, #408]	; (80074a8 <HAL_ADC_Init+0x2a0>)
 8007310:	f7ff fef0 	bl	80070f4 <LL_ADC_IsEnabled>
 8007314:	4603      	mov	r3, r0
 8007316:	4323      	orrs	r3, r4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	4619      	mov	r1, r3
 8007322:	4862      	ldr	r0, [pc, #392]	; (80074ac <HAL_ADC_Init+0x2a4>)
 8007324:	f7ff fd2a 	bl	8006d7c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	7d5b      	ldrb	r3, [r3, #21]
 800732c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007332:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8007338:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7f1b      	ldrb	r3, [r3, #28]
 800733e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007340:	4313      	orrs	r3, r2
 8007342:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7f1b      	ldrb	r3, [r3, #28]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d106      	bne.n	800735a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	3b01      	subs	r3, #1
 8007352:	045b      	lsls	r3, r3, #17
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4313      	orrs	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4313      	orrs	r3, r2
 8007374:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	4b4c      	ldr	r3, [pc, #304]	; (80074b0 <HAL_ADC_Init+0x2a8>)
 800737e:	4013      	ands	r3, r2
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6812      	ldr	r2, [r2, #0]
 8007384:	69b9      	ldr	r1, [r7, #24]
 8007386:	430b      	orrs	r3, r1
 8007388:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff fefe 	bl	8007190 <LL_ADC_REG_IsConversionOngoing>
 8007394:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff ff20 	bl	80071e0 <LL_ADC_INJ_IsConversionOngoing>
 80073a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d14a      	bne.n	800743e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d147      	bne.n	800743e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	7d1b      	ldrb	r3, [r3, #20]
 80073b2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80073b8:	4313      	orrs	r3, r2
 80073ba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	4b3c      	ldr	r3, [pc, #240]	; (80074b4 <HAL_ADC_Init+0x2ac>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	6812      	ldr	r2, [r2, #0]
 80073ca:	69b9      	ldr	r1, [r7, #24]
 80073cc:	430b      	orrs	r3, r1
 80073ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d11b      	bne.n	8007412 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691a      	ldr	r2, [r3, #16]
 80073e6:	4b34      	ldr	r3, [pc, #208]	; (80074b8 <HAL_ADC_Init+0x2b0>)
 80073e8:	4013      	ands	r3, r2
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073ee:	3a01      	subs	r2, #1
 80073f0:	0411      	lsls	r1, r2, #16
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80073f6:	4311      	orrs	r1, r2
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80073fc:	4311      	orrs	r1, r2
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007402:	430a      	orrs	r2, r1
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 0201 	orr.w	r2, r2, #1
 800740e:	611a      	str	r2, [r3, #16]
 8007410:	e007      	b.n	8007422 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691a      	ldr	r2, [r3, #16]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 0201 	bic.w	r2, r2, #1
 8007420:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f001 f9f5 	bl	8008828 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d10c      	bne.n	8007460 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	f023 010f 	bic.w	r1, r3, #15
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	1e5a      	subs	r2, r3, #1
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	631a      	str	r2, [r3, #48]	; 0x30
 800745e:	e007      	b.n	8007470 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 020f 	bic.w	r2, r2, #15
 800746e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007474:	f023 0303 	bic.w	r3, r3, #3
 8007478:	f043 0201 	orr.w	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	655a      	str	r2, [r3, #84]	; 0x54
 8007480:	e007      	b.n	8007492 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007486:	f043 0210 	orr.w	r2, r3, #16
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007492:	7ffb      	ldrb	r3, [r7, #31]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3724      	adds	r7, #36	; 0x24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd90      	pop	{r4, r7, pc}
 800749c:	200000e0 	.word	0x200000e0
 80074a0:	053e2d63 	.word	0x053e2d63
 80074a4:	40022000 	.word	0x40022000
 80074a8:	40022100 	.word	0x40022100
 80074ac:	40022300 	.word	0x40022300
 80074b0:	fff0c003 	.word	0xfff0c003
 80074b4:	ffffbffc 	.word	0xffffbffc
 80074b8:	fc00f81e 	.word	0xfc00f81e

080074bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80074c4:	4856      	ldr	r0, [pc, #344]	; (8007620 <HAL_ADC_Start+0x164>)
 80074c6:	f7ff fd83 	bl	8006fd0 <LL_ADC_GetMultimode>
 80074ca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff fe5d 	bl	8007190 <LL_ADC_REG_IsConversionOngoing>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f040 809a 	bne.w	8007612 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_ADC_Start+0x30>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e095      	b.n	8007618 <HAL_ADC_Start+0x15c>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f001 f8bb 	bl	8008670 <ADC_Enable>
 80074fa:	4603      	mov	r3, r0
 80074fc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f040 8081 	bne.w	8007608 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800750a:	4b46      	ldr	r3, [pc, #280]	; (8007624 <HAL_ADC_Start+0x168>)
 800750c:	4013      	ands	r3, r2
 800750e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a43      	ldr	r2, [pc, #268]	; (8007628 <HAL_ADC_Start+0x16c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d002      	beq.n	8007526 <HAL_ADC_Start+0x6a>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	e000      	b.n	8007528 <HAL_ADC_Start+0x6c>
 8007526:	4b41      	ldr	r3, [pc, #260]	; (800762c <HAL_ADC_Start+0x170>)
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6812      	ldr	r2, [r2, #0]
 800752c:	4293      	cmp	r3, r2
 800752e:	d002      	beq.n	8007536 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d105      	bne.n	8007542 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800754a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800754e:	d106      	bne.n	800755e <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007554:	f023 0206 	bic.w	r2, r3, #6
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	659a      	str	r2, [r3, #88]	; 0x58
 800755c:	e002      	b.n	8007564 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	221c      	movs	r2, #28
 800756a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a2b      	ldr	r2, [pc, #172]	; (8007628 <HAL_ADC_Start+0x16c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d002      	beq.n	8007584 <HAL_ADC_Start+0xc8>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	e000      	b.n	8007586 <HAL_ADC_Start+0xca>
 8007584:	4b29      	ldr	r3, [pc, #164]	; (800762c <HAL_ADC_Start+0x170>)
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6812      	ldr	r2, [r2, #0]
 800758a:	4293      	cmp	r3, r2
 800758c:	d008      	beq.n	80075a0 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2b05      	cmp	r3, #5
 8007598:	d002      	beq.n	80075a0 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	2b09      	cmp	r3, #9
 800759e:	d114      	bne.n	80075ca <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d007      	beq.n	80075be <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80075b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff fdbc 	bl	8007140 <LL_ADC_REG_StartConversion>
 80075c8:	e025      	b.n	8007616 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a13      	ldr	r2, [pc, #76]	; (8007628 <HAL_ADC_Start+0x16c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d002      	beq.n	80075e6 <HAL_ADC_Start+0x12a>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	e000      	b.n	80075e8 <HAL_ADC_Start+0x12c>
 80075e6:	4b11      	ldr	r3, [pc, #68]	; (800762c <HAL_ADC_Start+0x170>)
 80075e8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00f      	beq.n	8007616 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80075fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	655a      	str	r2, [r3, #84]	; 0x54
 8007606:	e006      	b.n	8007616 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007610:	e001      	b.n	8007616 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007612:	2302      	movs	r3, #2
 8007614:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	40022300 	.word	0x40022300
 8007624:	fffff0fe 	.word	0xfffff0fe
 8007628:	40022100 	.word	0x40022100
 800762c:	40022000 	.word	0x40022000

08007630 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800763a:	4866      	ldr	r0, [pc, #408]	; (80077d4 <HAL_ADC_PollForConversion+0x1a4>)
 800763c:	f7ff fcc8 	bl	8006fd0 <LL_ADC_GetMultimode>
 8007640:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b08      	cmp	r3, #8
 8007648:	d102      	bne.n	8007650 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800764a:	2308      	movs	r3, #8
 800764c:	61fb      	str	r3, [r7, #28]
 800764e:	e02a      	b.n	80076a6 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d005      	beq.n	8007662 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b05      	cmp	r3, #5
 800765a:	d002      	beq.n	8007662 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b09      	cmp	r3, #9
 8007660:	d111      	bne.n	8007686 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d007      	beq.n	8007680 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007674:	f043 0220 	orr.w	r2, r3, #32
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e0a4      	b.n	80077ca <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8007680:	2304      	movs	r3, #4
 8007682:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8007684:	e00f      	b.n	80076a6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007686:	4853      	ldr	r0, [pc, #332]	; (80077d4 <HAL_ADC_PollForConversion+0x1a4>)
 8007688:	f7ff fcb0 	bl	8006fec <LL_ADC_GetMultiDMATransfer>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d007      	beq.n	80076a2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007696:	f043 0220 	orr.w	r2, r3, #32
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e093      	b.n	80077ca <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80076a2:	2304      	movs	r3, #4
 80076a4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80076a6:	f7ff fb39 	bl	8006d1c <HAL_GetTick>
 80076aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80076ac:	e021      	b.n	80076f2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b4:	d01d      	beq.n	80076f2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80076b6:	f7ff fb31 	bl	8006d1c <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d302      	bcc.n	80076cc <HAL_ADC_PollForConversion+0x9c>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d112      	bne.n	80076f2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4013      	ands	r3, r2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10b      	bne.n	80076f2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076de:	f043 0204 	orr.w	r2, r3, #4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e06b      	b.n	80077ca <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	4013      	ands	r3, r2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0d6      	beq.n	80076ae <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007704:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff fbbb 	bl	8006e8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01c      	beq.n	8007756 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	7d5b      	ldrb	r3, [r3, #21]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d118      	bne.n	8007756 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	2b08      	cmp	r3, #8
 8007730:	d111      	bne.n	8007756 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d105      	bne.n	8007756 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774e:	f043 0201 	orr.w	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1f      	ldr	r2, [pc, #124]	; (80077d8 <HAL_ADC_PollForConversion+0x1a8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d002      	beq.n	8007766 <HAL_ADC_PollForConversion+0x136>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	e000      	b.n	8007768 <HAL_ADC_PollForConversion+0x138>
 8007766:	4b1d      	ldr	r3, [pc, #116]	; (80077dc <HAL_ADC_PollForConversion+0x1ac>)
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	4293      	cmp	r3, r2
 800776e:	d008      	beq.n	8007782 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d005      	beq.n	8007782 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b05      	cmp	r3, #5
 800777a:	d002      	beq.n	8007782 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2b09      	cmp	r3, #9
 8007780:	d104      	bne.n	800778c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	61bb      	str	r3, [r7, #24]
 800778a:	e00c      	b.n	80077a6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a11      	ldr	r2, [pc, #68]	; (80077d8 <HAL_ADC_PollForConversion+0x1a8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d002      	beq.n	800779c <HAL_ADC_PollForConversion+0x16c>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	e000      	b.n	800779e <HAL_ADC_PollForConversion+0x16e>
 800779c:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <HAL_ADC_PollForConversion+0x1ac>)
 800779e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d104      	bne.n	80077b6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2208      	movs	r2, #8
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	e008      	b.n	80077c8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	220c      	movs	r2, #12
 80077c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3720      	adds	r7, #32
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	40022300 	.word	0x40022300
 80077d8:	40022100 	.word	0x40022100
 80077dc:	40022000 	.word	0x40022000

080077e0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80077e8:	4890      	ldr	r0, [pc, #576]	; (8007a2c <HAL_ADC_Start_IT+0x24c>)
 80077ea:	f7ff fbf1 	bl	8006fd0 <LL_ADC_GetMultimode>
 80077ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff fccb 	bl	8007190 <LL_ADC_REG_IsConversionOngoing>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f040 810e 	bne.w	8007a1e <HAL_ADC_Start_IT+0x23e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007808:	2b01      	cmp	r3, #1
 800780a:	d101      	bne.n	8007810 <HAL_ADC_Start_IT+0x30>
 800780c:	2302      	movs	r3, #2
 800780e:	e109      	b.n	8007a24 <HAL_ADC_Start_IT+0x244>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 ff29 	bl	8008670 <ADC_Enable>
 800781e:	4603      	mov	r3, r0
 8007820:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f040 80f5 	bne.w	8007a14 <HAL_ADC_Start_IT+0x234>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800782e:	4b80      	ldr	r3, [pc, #512]	; (8007a30 <HAL_ADC_Start_IT+0x250>)
 8007830:	4013      	ands	r3, r2
 8007832:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a7d      	ldr	r2, [pc, #500]	; (8007a34 <HAL_ADC_Start_IT+0x254>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d002      	beq.n	800784a <HAL_ADC_Start_IT+0x6a>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	e000      	b.n	800784c <HAL_ADC_Start_IT+0x6c>
 800784a:	4b7b      	ldr	r3, [pc, #492]	; (8007a38 <HAL_ADC_Start_IT+0x258>)
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	6812      	ldr	r2, [r2, #0]
 8007850:	4293      	cmp	r3, r2
 8007852:	d002      	beq.n	800785a <HAL_ADC_Start_IT+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d105      	bne.n	8007866 <HAL_ADC_Start_IT+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d006      	beq.n	8007880 <HAL_ADC_Start_IT+0xa0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007876:	f023 0206 	bic.w	r2, r3, #6
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	659a      	str	r2, [r3, #88]	; 0x58
 800787e:	e002      	b.n	8007886 <HAL_ADC_Start_IT+0xa6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	221c      	movs	r2, #28
 800788c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 021c 	bic.w	r2, r2, #28
 80078a4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d108      	bne.n	80078c0 <HAL_ADC_Start_IT+0xe0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0208 	orr.w	r2, r2, #8
 80078bc:	605a      	str	r2, [r3, #4]
          break;
 80078be:	e008      	b.n	80078d2 <HAL_ADC_Start_IT+0xf2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0204 	orr.w	r2, r2, #4
 80078ce:	605a      	str	r2, [r3, #4]
          break;
 80078d0:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d107      	bne.n	80078ea <HAL_ADC_Start_IT+0x10a>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f042 0210 	orr.w	r2, r2, #16
 80078e8:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a51      	ldr	r2, [pc, #324]	; (8007a34 <HAL_ADC_Start_IT+0x254>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d002      	beq.n	80078fa <HAL_ADC_Start_IT+0x11a>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	e000      	b.n	80078fc <HAL_ADC_Start_IT+0x11c>
 80078fa:	4b4f      	ldr	r3, [pc, #316]	; (8007a38 <HAL_ADC_Start_IT+0x258>)
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	6812      	ldr	r2, [r2, #0]
 8007900:	4293      	cmp	r3, r2
 8007902:	d008      	beq.n	8007916 <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	2b05      	cmp	r3, #5
 800790e:	d002      	beq.n	8007916 <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	2b09      	cmp	r3, #9
 8007914:	d13a      	bne.n	800798c <HAL_ADC_Start_IT+0x1ac>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d02d      	beq.n	8007980 <HAL_ADC_Start_IT+0x1a0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007928:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800792c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b08      	cmp	r3, #8
 800793a:	d110      	bne.n	800795e <HAL_ADC_Start_IT+0x17e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0220 	bic.w	r2, r2, #32
 800794a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800795a:	605a      	str	r2, [r3, #4]
              break;
 800795c:	e010      	b.n	8007980 <HAL_ADC_Start_IT+0x1a0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800796c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0220 	orr.w	r2, r2, #32
 800797c:	605a      	str	r2, [r3, #4]
              break;
 800797e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fbdb 	bl	8007140 <LL_ADC_REG_StartConversion>
 800798a:	e04a      	b.n	8007a22 <HAL_ADC_Start_IT+0x242>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007990:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a25      	ldr	r2, [pc, #148]	; (8007a34 <HAL_ADC_Start_IT+0x254>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d002      	beq.n	80079a8 <HAL_ADC_Start_IT+0x1c8>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	e000      	b.n	80079aa <HAL_ADC_Start_IT+0x1ca>
 80079a8:	4b23      	ldr	r3, [pc, #140]	; (8007a38 <HAL_ADC_Start_IT+0x258>)
 80079aa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d034      	beq.n	8007a22 <HAL_ADC_Start_IT+0x242>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80079c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d110      	bne.n	80079f2 <HAL_ADC_Start_IT+0x212>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 0220 	bic.w	r2, r2, #32
 80079de:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ee:	605a      	str	r2, [r3, #4]
              break;
 80079f0:	e017      	b.n	8007a22 <HAL_ADC_Start_IT+0x242>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a00:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f042 0220 	orr.w	r2, r2, #32
 8007a10:	605a      	str	r2, [r3, #4]
              break;
 8007a12:	e006      	b.n	8007a22 <HAL_ADC_Start_IT+0x242>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007a1c:	e001      	b.n	8007a22 <HAL_ADC_Start_IT+0x242>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007a1e:	2302      	movs	r3, #2
 8007a20:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	40022300 	.word	0x40022300
 8007a30:	fffff0fe 	.word	0xfffff0fe
 8007a34:	40022100 	.word	0x40022100
 8007a38:	40022000 	.word	0x40022000

08007a3c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d101      	bne.n	8007a52 <HAL_ADC_Stop_IT+0x16>
 8007a4e:	2302      	movs	r3, #2
 8007a50:	e029      	b.n	8007aa6 <HAL_ADC_Stop_IT+0x6a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007a5a:	2103      	movs	r1, #3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fd4b 	bl	80084f8 <ADC_ConversionStop>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d117      	bne.n	8007a9c <HAL_ADC_Stop_IT+0x60>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 021c 	bic.w	r2, r2, #28
 8007a7a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fe73 	bl	8008768 <ADC_Disable>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d107      	bne.n	8007a9c <HAL_ADC_Stop_IT+0x60>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a90:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <HAL_ADC_Stop_IT+0x74>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	f043 0201 	orr.w	r2, r3, #1
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	ffffeefe 	.word	0xffffeefe

08007ab4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
	...

08007ad0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08a      	sub	sp, #40	; 0x28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007ad8:	2300      	movs	r3, #0
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007aec:	4882      	ldr	r0, [pc, #520]	; (8007cf8 <HAL_ADC_IRQHandler+0x228>)
 8007aee:	f7ff fa6f 	bl	8006fd0 <LL_ADC_GetMultimode>
 8007af2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d017      	beq.n	8007b2e <HAL_ADC_IRQHandler+0x5e>
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d012      	beq.n	8007b2e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d105      	bne.n	8007b20 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b18:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 ff9d 	bl	8008a60 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <HAL_ADC_IRQHandler+0x72>
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 8083 	beq.w	8007c54 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d07d      	beq.n	8007c54 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5c:	f003 0310 	and.w	r3, r3, #16
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d105      	bne.n	8007b70 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff f989 	bl	8006e8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d062      	beq.n	8007c46 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a5d      	ldr	r2, [pc, #372]	; (8007cfc <HAL_ADC_IRQHandler+0x22c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d002      	beq.n	8007b90 <HAL_ADC_IRQHandler+0xc0>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	e000      	b.n	8007b92 <HAL_ADC_IRQHandler+0xc2>
 8007b90:	4b5b      	ldr	r3, [pc, #364]	; (8007d00 <HAL_ADC_IRQHandler+0x230>)
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6812      	ldr	r2, [r2, #0]
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d008      	beq.n	8007bac <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2b05      	cmp	r3, #5
 8007ba4:	d002      	beq.n	8007bac <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b09      	cmp	r3, #9
 8007baa:	d104      	bne.n	8007bb6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	623b      	str	r3, [r7, #32]
 8007bb4:	e00c      	b.n	8007bd0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a50      	ldr	r2, [pc, #320]	; (8007cfc <HAL_ADC_IRQHandler+0x22c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d002      	beq.n	8007bc6 <HAL_ADC_IRQHandler+0xf6>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	e000      	b.n	8007bc8 <HAL_ADC_IRQHandler+0xf8>
 8007bc6:	4b4e      	ldr	r3, [pc, #312]	; (8007d00 <HAL_ADC_IRQHandler+0x230>)
 8007bc8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d135      	bne.n	8007c46 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d12e      	bne.n	8007c46 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7ff facf 	bl	8007190 <LL_ADC_REG_IsConversionOngoing>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d11a      	bne.n	8007c2e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 020c 	bic.w	r2, r2, #12
 8007c06:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d112      	bne.n	8007c46 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c24:	f043 0201 	orr.w	r2, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	655a      	str	r2, [r3, #84]	; 0x54
 8007c2c:	e00b      	b.n	8007c46 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c32:	f043 0210 	orr.w	r2, r3, #16
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3e:	f043 0201 	orr.w	r2, r3, #1
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fb fb7e 	bl	8003348 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	220c      	movs	r2, #12
 8007c52:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d004      	beq.n	8007c68 <HAL_ADC_IRQHandler+0x198>
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10b      	bne.n	8007c80 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 809f 	beq.w	8007db2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 8099 	beq.w	8007db2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c84:	f003 0310 	and.w	r3, r3, #16
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d105      	bne.n	8007c98 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c90:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff f934 	bl	8006f0a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007ca2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7ff f8ef 	bl	8006e8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007cae:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a11      	ldr	r2, [pc, #68]	; (8007cfc <HAL_ADC_IRQHandler+0x22c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d002      	beq.n	8007cc0 <HAL_ADC_IRQHandler+0x1f0>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	e000      	b.n	8007cc2 <HAL_ADC_IRQHandler+0x1f2>
 8007cc0:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <HAL_ADC_IRQHandler+0x230>)
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	6812      	ldr	r2, [r2, #0]
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d008      	beq.n	8007cdc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d005      	beq.n	8007cdc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b06      	cmp	r3, #6
 8007cd4:	d002      	beq.n	8007cdc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b07      	cmp	r3, #7
 8007cda:	d104      	bne.n	8007ce6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	623b      	str	r3, [r7, #32]
 8007ce4:	e013      	b.n	8007d0e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a04      	ldr	r2, [pc, #16]	; (8007cfc <HAL_ADC_IRQHandler+0x22c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d009      	beq.n	8007d04 <HAL_ADC_IRQHandler+0x234>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	e007      	b.n	8007d06 <HAL_ADC_IRQHandler+0x236>
 8007cf6:	bf00      	nop
 8007cf8:	40022300 	.word	0x40022300
 8007cfc:	40022100 	.word	0x40022100
 8007d00:	40022000 	.word	0x40022000
 8007d04:	4b7d      	ldr	r3, [pc, #500]	; (8007efc <HAL_ADC_IRQHandler+0x42c>)
 8007d06:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d047      	beq.n	8007da4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <HAL_ADC_IRQHandler+0x25e>
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d03f      	beq.n	8007da4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d13a      	bne.n	8007da4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d38:	2b40      	cmp	r3, #64	; 0x40
 8007d3a:	d133      	bne.n	8007da4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d12e      	bne.n	8007da4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff fa48 	bl	80071e0 <LL_ADC_INJ_IsConversionOngoing>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d11a      	bne.n	8007d8c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d64:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d112      	bne.n	8007da4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d82:	f043 0201 	orr.w	r2, r3, #1
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	655a      	str	r2, [r3, #84]	; 0x54
 8007d8a:	e00b      	b.n	8007da4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d90:	f043 0210 	orr.w	r2, r3, #16
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9c:	f043 0201 	orr.w	r2, r3, #1
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fe33 	bl	8008a10 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2260      	movs	r2, #96	; 0x60
 8007db0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d011      	beq.n	8007de0 <HAL_ADC_IRQHandler+0x310>
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00c      	beq.n	8007de0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f896 	bl	8007f04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2280      	movs	r2, #128	; 0x80
 8007dde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d012      	beq.n	8007e10 <HAL_ADC_IRQHandler+0x340>
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00d      	beq.n	8007e10 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fe19 	bl	8008a38 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d012      	beq.n	8007e40 <HAL_ADC_IRQHandler+0x370>
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00d      	beq.n	8007e40 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fe0b 	bl	8008a4c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	f003 0310 	and.w	r3, r3, #16
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d036      	beq.n	8007eb8 <HAL_ADC_IRQHandler+0x3e8>
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f003 0310 	and.w	r3, r3, #16
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d031      	beq.n	8007eb8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d102      	bne.n	8007e62 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e60:	e014      	b.n	8007e8c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d008      	beq.n	8007e7a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007e68:	4825      	ldr	r0, [pc, #148]	; (8007f00 <HAL_ADC_IRQHandler+0x430>)
 8007e6a:	f7ff f8bf 	bl	8006fec <LL_ADC_GetMultiDMATransfer>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8007e74:	2301      	movs	r3, #1
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
 8007e78:	e008      	b.n	8007e8c <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f003 0303 	and.w	r3, r3, #3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d10e      	bne.n	8007eb0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e96:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea2:	f043 0202 	orr.w	r2, r3, #2
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f834 	bl	8007f18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2210      	movs	r2, #16
 8007eb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d018      	beq.n	8007ef4 <HAL_ADC_IRQHandler+0x424>
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d013      	beq.n	8007ef4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007edc:	f043 0208 	orr.w	r2, r3, #8
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007eec:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fd98 	bl	8008a24 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007ef4:	bf00      	nop
 8007ef6:	3728      	adds	r7, #40	; 0x28
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	40022000 	.word	0x40022000
 8007f00:	40022300 	.word	0x40022300

08007f04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007f2c:	b590      	push	{r4, r7, lr}
 8007f2e:	b0a1      	sub	sp, #132	; 0x84
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	4a9a      	ldr	r2, [pc, #616]	; (80081b0 <HAL_ADC_ConfigChannel+0x284>)
 8007f46:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <HAL_ADC_ConfigChannel+0x2a>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e2bc      	b.n	80084d0 <HAL_ADC_ConfigChannel+0x5a4>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff f914 	bl	8007190 <LL_ADC_REG_IsConversionOngoing>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f040 82a1 	bne.w	80084b2 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d108      	bne.n	8007f8e <HAL_ADC_ConfigChannel+0x62>
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	0e9b      	lsrs	r3, r3, #26
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	2201      	movs	r2, #1
 8007f88:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8c:	e016      	b.n	8007fbc <HAL_ADC_ConfigChannel+0x90>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f96:	fa93 f3a3 	rbit	r3, r3
 8007f9a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f9e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8007fa6:	2320      	movs	r3, #32
 8007fa8:	e003      	b.n	8007fb2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8007faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fac:	fab3 f383 	clz	r3, r3
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	f003 031f 	and.w	r3, r3, #31
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	69d1      	ldr	r1, [r2, #28]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	6859      	ldr	r1, [r3, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f7fe ff6b 	bl	8006eb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff f8d5 	bl	8007190 <LL_ADC_REG_IsConversionOngoing>
 8007fe6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff f8f7 	bl	80071e0 <LL_ADC_INJ_IsConversionOngoing>
 8007ff2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f040 80a0 	bne.w	800813c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 809c 	bne.w	800813c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	6819      	ldr	r1, [r3, #0]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	461a      	mov	r2, r3
 8008012:	f7fe ff8d 	bl	8006f30 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f003 0310 	and.w	r3, r3, #16
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10b      	bne.n	800803c <HAL_ADC_ConfigChannel+0x110>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	695a      	ldr	r2, [r3, #20]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	089b      	lsrs	r3, r3, #2
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	fa02 f303 	lsl.w	r3, r2, r3
 800803a:	e00a      	b.n	8008052 <HAL_ADC_ConfigChannel+0x126>
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	695a      	ldr	r2, [r3, #20]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	089b      	lsrs	r3, r3, #2
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	fa02 f303 	lsl.w	r3, r2, r3
 8008052:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	2b04      	cmp	r3, #4
 800805a:	d027      	beq.n	80080ac <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6919      	ldr	r1, [r3, #16]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800806a:	f7fe febb 	bl	8006de4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	6919      	ldr	r1, [r3, #16]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	7e5b      	ldrb	r3, [r3, #25]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d102      	bne.n	8008084 <HAL_ADC_ConfigChannel+0x158>
 800807e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008082:	e000      	b.n	8008086 <HAL_ADC_ConfigChannel+0x15a>
 8008084:	2300      	movs	r3, #0
 8008086:	461a      	mov	r2, r3
 8008088:	f7fe fee5 	bl	8006e56 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	6919      	ldr	r1, [r3, #16]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	7e1b      	ldrb	r3, [r3, #24]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d102      	bne.n	80080a2 <HAL_ADC_ConfigChannel+0x176>
 800809c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080a0:	e000      	b.n	80080a4 <HAL_ADC_ConfigChannel+0x178>
 80080a2:	2300      	movs	r3, #0
 80080a4:	461a      	mov	r2, r3
 80080a6:	f7fe febd 	bl	8006e24 <LL_ADC_SetDataRightShift>
 80080aa:	e047      	b.n	800813c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	069b      	lsls	r3, r3, #26
 80080bc:	429a      	cmp	r2, r3
 80080be:	d107      	bne.n	80080d0 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80080ce:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	069b      	lsls	r3, r3, #26
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d107      	bne.n	80080f4 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80080f2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	069b      	lsls	r3, r3, #26
 8008104:	429a      	cmp	r2, r3
 8008106:	d107      	bne.n	8008118 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008116:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800811e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	069b      	lsls	r3, r3, #26
 8008128:	429a      	cmp	r2, r3
 800812a:	d107      	bne.n	800813c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800813a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4618      	mov	r0, r3
 8008142:	f7fe ffd7 	bl	80070f4 <LL_ADC_IsEnabled>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	f040 81bb 	bne.w	80084c4 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	6819      	ldr	r1, [r3, #0]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	461a      	mov	r2, r3
 800815c:	f7fe ff14 	bl	8006f88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	4a12      	ldr	r2, [pc, #72]	; (80081b0 <HAL_ADC_ConfigChannel+0x284>)
 8008166:	4293      	cmp	r3, r2
 8008168:	f040 8130 	bne.w	80083cc <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10b      	bne.n	8008194 <HAL_ADC_ConfigChannel+0x268>
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	0e9b      	lsrs	r3, r3, #26
 8008182:	3301      	adds	r3, #1
 8008184:	f003 031f 	and.w	r3, r3, #31
 8008188:	2b09      	cmp	r3, #9
 800818a:	bf94      	ite	ls
 800818c:	2301      	movls	r3, #1
 800818e:	2300      	movhi	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	e01b      	b.n	80081cc <HAL_ADC_ConfigChannel+0x2a0>
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800819a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800819c:	fa93 f3a3 	rbit	r3, r3
 80081a0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80081a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80081a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d103      	bne.n	80081b4 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80081ac:	2320      	movs	r3, #32
 80081ae:	e005      	b.n	80081bc <HAL_ADC_ConfigChannel+0x290>
 80081b0:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80081b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b6:	fab3 f383 	clz	r3, r3
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	3301      	adds	r3, #1
 80081be:	f003 031f 	and.w	r3, r3, #31
 80081c2:	2b09      	cmp	r3, #9
 80081c4:	bf94      	ite	ls
 80081c6:	2301      	movls	r3, #1
 80081c8:	2300      	movhi	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d079      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d107      	bne.n	80081ec <HAL_ADC_ConfigChannel+0x2c0>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	0e9b      	lsrs	r3, r3, #26
 80081e2:	3301      	adds	r3, #1
 80081e4:	069b      	lsls	r3, r3, #26
 80081e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80081ea:	e015      	b.n	8008218 <HAL_ADC_ConfigChannel+0x2ec>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f4:	fa93 f3a3 	rbit	r3, r3
 80081f8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80081fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80081fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8008204:	2320      	movs	r3, #32
 8008206:	e003      	b.n	8008210 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8008208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800820a:	fab3 f383 	clz	r3, r3
 800820e:	b2db      	uxtb	r3, r3
 8008210:	3301      	adds	r3, #1
 8008212:	069b      	lsls	r3, r3, #26
 8008214:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <HAL_ADC_ConfigChannel+0x30c>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	0e9b      	lsrs	r3, r3, #26
 800822a:	3301      	adds	r3, #1
 800822c:	f003 031f 	and.w	r3, r3, #31
 8008230:	2101      	movs	r1, #1
 8008232:	fa01 f303 	lsl.w	r3, r1, r3
 8008236:	e017      	b.n	8008268 <HAL_ADC_ConfigChannel+0x33c>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800823e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008240:	fa93 f3a3 	rbit	r3, r3
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008248:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800824a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8008250:	2320      	movs	r3, #32
 8008252:	e003      	b.n	800825c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8008254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008256:	fab3 f383 	clz	r3, r3
 800825a:	b2db      	uxtb	r3, r3
 800825c:	3301      	adds	r3, #1
 800825e:	f003 031f 	and.w	r3, r3, #31
 8008262:	2101      	movs	r1, #1
 8008264:	fa01 f303 	lsl.w	r3, r1, r3
 8008268:	ea42 0103 	orr.w	r1, r2, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <HAL_ADC_ConfigChannel+0x362>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	0e9b      	lsrs	r3, r3, #26
 800827e:	3301      	adds	r3, #1
 8008280:	f003 021f 	and.w	r2, r3, #31
 8008284:	4613      	mov	r3, r2
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	4413      	add	r3, r2
 800828a:	051b      	lsls	r3, r3, #20
 800828c:	e018      	b.n	80082c0 <HAL_ADC_ConfigChannel+0x394>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008296:	fa93 f3a3 	rbit	r3, r3
 800829a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80082a6:	2320      	movs	r3, #32
 80082a8:	e003      	b.n	80082b2 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	fab3 f383 	clz	r3, r3
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	3301      	adds	r3, #1
 80082b4:	f003 021f 	and.w	r2, r3, #31
 80082b8:	4613      	mov	r3, r2
 80082ba:	005b      	lsls	r3, r3, #1
 80082bc:	4413      	add	r3, r2
 80082be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80082c0:	430b      	orrs	r3, r1
 80082c2:	e07e      	b.n	80083c2 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d107      	bne.n	80082e0 <HAL_ADC_ConfigChannel+0x3b4>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	0e9b      	lsrs	r3, r3, #26
 80082d6:	3301      	adds	r3, #1
 80082d8:	069b      	lsls	r3, r3, #26
 80082da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80082de:	e015      	b.n	800830c <HAL_ADC_ConfigChannel+0x3e0>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	fa93 f3a3 	rbit	r3, r3
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80082f8:	2320      	movs	r3, #32
 80082fa:	e003      	b.n	8008304 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80082fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fe:	fab3 f383 	clz	r3, r3
 8008302:	b2db      	uxtb	r3, r3
 8008304:	3301      	adds	r3, #1
 8008306:	069b      	lsls	r3, r3, #26
 8008308:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008314:	2b00      	cmp	r3, #0
 8008316:	d109      	bne.n	800832c <HAL_ADC_ConfigChannel+0x400>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	0e9b      	lsrs	r3, r3, #26
 800831e:	3301      	adds	r3, #1
 8008320:	f003 031f 	and.w	r3, r3, #31
 8008324:	2101      	movs	r1, #1
 8008326:	fa01 f303 	lsl.w	r3, r1, r3
 800832a:	e017      	b.n	800835c <HAL_ADC_ConfigChannel+0x430>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	fa93 f3a3 	rbit	r3, r3
 8008338:	61bb      	str	r3, [r7, #24]
  return result;
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8008344:	2320      	movs	r3, #32
 8008346:	e003      	b.n	8008350 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	fab3 f383 	clz	r3, r3
 800834e:	b2db      	uxtb	r3, r3
 8008350:	3301      	adds	r3, #1
 8008352:	f003 031f 	and.w	r3, r3, #31
 8008356:	2101      	movs	r1, #1
 8008358:	fa01 f303 	lsl.w	r3, r1, r3
 800835c:	ea42 0103 	orr.w	r1, r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10d      	bne.n	8008388 <HAL_ADC_ConfigChannel+0x45c>
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	0e9b      	lsrs	r3, r3, #26
 8008372:	3301      	adds	r3, #1
 8008374:	f003 021f 	and.w	r2, r3, #31
 8008378:	4613      	mov	r3, r2
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	4413      	add	r3, r2
 800837e:	3b1e      	subs	r3, #30
 8008380:	051b      	lsls	r3, r3, #20
 8008382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008386:	e01b      	b.n	80083c0 <HAL_ADC_ConfigChannel+0x494>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	fa93 f3a3 	rbit	r3, r3
 8008394:	60fb      	str	r3, [r7, #12]
  return result;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80083a0:	2320      	movs	r3, #32
 80083a2:	e003      	b.n	80083ac <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	fab3 f383 	clz	r3, r3
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	3301      	adds	r3, #1
 80083ae:	f003 021f 	and.w	r2, r3, #31
 80083b2:	4613      	mov	r3, r2
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	4413      	add	r3, r2
 80083b8:	3b1e      	subs	r3, #30
 80083ba:	051b      	lsls	r3, r3, #20
 80083bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083c0:	430b      	orrs	r3, r1
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	6892      	ldr	r2, [r2, #8]
 80083c6:	4619      	mov	r1, r3
 80083c8:	f7fe fdb2 	bl	8006f30 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	da77      	bge.n	80084c4 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80083d4:	4840      	ldr	r0, [pc, #256]	; (80084d8 <HAL_ADC_ConfigChannel+0x5ac>)
 80083d6:	f7fe fcf7 	bl	8006dc8 <LL_ADC_GetCommonPathInternalCh>
 80083da:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80083dc:	483f      	ldr	r0, [pc, #252]	; (80084dc <HAL_ADC_ConfigChannel+0x5b0>)
 80083de:	f7fe fe89 	bl	80070f4 <LL_ADC_IsEnabled>
 80083e2:	4604      	mov	r4, r0
 80083e4:	483e      	ldr	r0, [pc, #248]	; (80084e0 <HAL_ADC_ConfigChannel+0x5b4>)
 80083e6:	f7fe fe85 	bl	80070f4 <LL_ADC_IsEnabled>
 80083ea:	4603      	mov	r3, r0
 80083ec:	4323      	orrs	r3, r4
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d155      	bne.n	800849e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a3b      	ldr	r2, [pc, #236]	; (80084e4 <HAL_ADC_ConfigChannel+0x5b8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d122      	bne.n	8008442 <HAL_ADC_ConfigChannel+0x516>
 80083fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d11d      	bne.n	8008442 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a35      	ldr	r2, [pc, #212]	; (80084e0 <HAL_ADC_ConfigChannel+0x5b4>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d159      	bne.n	80084c4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008412:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008416:	4619      	mov	r1, r3
 8008418:	482f      	ldr	r0, [pc, #188]	; (80084d8 <HAL_ADC_ConfigChannel+0x5ac>)
 800841a:	f7fe fcc2 	bl	8006da2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800841e:	4b32      	ldr	r3, [pc, #200]	; (80084e8 <HAL_ADC_ConfigChannel+0x5bc>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	099b      	lsrs	r3, r3, #6
 8008424:	4a31      	ldr	r2, [pc, #196]	; (80084ec <HAL_ADC_ConfigChannel+0x5c0>)
 8008426:	fba2 2303 	umull	r2, r3, r2, r3
 800842a:	099b      	lsrs	r3, r3, #6
 800842c:	3301      	adds	r3, #1
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008432:	e002      	b.n	800843a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	3b01      	subs	r3, #1
 8008438:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1f9      	bne.n	8008434 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008440:	e040      	b.n	80084c4 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a2a      	ldr	r2, [pc, #168]	; (80084f0 <HAL_ADC_ConfigChannel+0x5c4>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d111      	bne.n	8008470 <HAL_ADC_ConfigChannel+0x544>
 800844c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800844e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10c      	bne.n	8008470 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a21      	ldr	r2, [pc, #132]	; (80084e0 <HAL_ADC_ConfigChannel+0x5b4>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d131      	bne.n	80084c4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008466:	4619      	mov	r1, r3
 8008468:	481b      	ldr	r0, [pc, #108]	; (80084d8 <HAL_ADC_ConfigChannel+0x5ac>)
 800846a:	f7fe fc9a 	bl	8006da2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800846e:	e029      	b.n	80084c4 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a1f      	ldr	r2, [pc, #124]	; (80084f4 <HAL_ADC_ConfigChannel+0x5c8>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d124      	bne.n	80084c4 <HAL_ADC_ConfigChannel+0x598>
 800847a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d11f      	bne.n	80084c4 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a15      	ldr	r2, [pc, #84]	; (80084e0 <HAL_ADC_ConfigChannel+0x5b4>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d11a      	bne.n	80084c4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800848e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008494:	4619      	mov	r1, r3
 8008496:	4810      	ldr	r0, [pc, #64]	; (80084d8 <HAL_ADC_ConfigChannel+0x5ac>)
 8008498:	f7fe fc83 	bl	8006da2 <LL_ADC_SetCommonPathInternalCh>
 800849c:	e012      	b.n	80084c4 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a2:	f043 0220 	orr.w	r2, r3, #32
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80084b0:	e008      	b.n	80084c4 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b6:	f043 0220 	orr.w	r2, r3, #32
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80084cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3784      	adds	r7, #132	; 0x84
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd90      	pop	{r4, r7, pc}
 80084d8:	40022300 	.word	0x40022300
 80084dc:	40022000 	.word	0x40022000
 80084e0:	40022100 	.word	0x40022100
 80084e4:	cb840000 	.word	0xcb840000
 80084e8:	200000e0 	.word	0x200000e0
 80084ec:	053e2d63 	.word	0x053e2d63
 80084f0:	bac04000 	.word	0xbac04000
 80084f4:	cfb80000 	.word	0xcfb80000

080084f8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b088      	sub	sp, #32
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008502:	2300      	movs	r3, #0
 8008504:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe fe3e 	bl	8007190 <LL_ADC_REG_IsConversionOngoing>
 8008514:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fe60 	bl	80071e0 <LL_ADC_INJ_IsConversionOngoing>
 8008520:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d103      	bne.n	8008530 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 8098 	beq.w	8008660 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d02a      	beq.n	8008594 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	7d5b      	ldrb	r3, [r3, #21]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d126      	bne.n	8008594 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	7d1b      	ldrb	r3, [r3, #20]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d122      	bne.n	8008594 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800854e:	2301      	movs	r3, #1
 8008550:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008552:	e014      	b.n	800857e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	4a45      	ldr	r2, [pc, #276]	; (800866c <ADC_ConversionStop+0x174>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d90d      	bls.n	8008578 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008560:	f043 0210 	orr.w	r2, r3, #16
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856c:	f043 0201 	orr.w	r2, r3, #1
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e074      	b.n	8008662 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	3301      	adds	r3, #1
 800857c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008588:	2b40      	cmp	r3, #64	; 0x40
 800858a:	d1e3      	bne.n	8008554 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2240      	movs	r2, #64	; 0x40
 8008592:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	2b02      	cmp	r3, #2
 8008598:	d014      	beq.n	80085c4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fdf6 	bl	8007190 <LL_ADC_REG_IsConversionOngoing>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00c      	beq.n	80085c4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe fdb3 	bl	800711a <LL_ADC_IsDisableOngoing>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d104      	bne.n	80085c4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fe fdd2 	bl	8007168 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d014      	beq.n	80085f4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fe06 	bl	80071e0 <LL_ADC_INJ_IsConversionOngoing>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00c      	beq.n	80085f4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe fd9b 	bl	800711a <LL_ADC_IsDisableOngoing>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d104      	bne.n	80085f4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe fde2 	bl	80071b8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d005      	beq.n	8008606 <ADC_ConversionStop+0x10e>
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d105      	bne.n	800860c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008600:	230c      	movs	r3, #12
 8008602:	617b      	str	r3, [r7, #20]
        break;
 8008604:	e005      	b.n	8008612 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008606:	2308      	movs	r3, #8
 8008608:	617b      	str	r3, [r7, #20]
        break;
 800860a:	e002      	b.n	8008612 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800860c:	2304      	movs	r3, #4
 800860e:	617b      	str	r3, [r7, #20]
        break;
 8008610:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008612:	f7fe fb83 	bl	8006d1c <HAL_GetTick>
 8008616:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008618:	e01b      	b.n	8008652 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800861a:	f7fe fb7f 	bl	8006d1c <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b05      	cmp	r3, #5
 8008626:	d914      	bls.n	8008652 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689a      	ldr	r2, [r3, #8]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	4013      	ands	r3, r2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00d      	beq.n	8008652 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863a:	f043 0210 	orr.w	r2, r3, #16
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008646:	f043 0201 	orr.w	r2, r3, #1
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e007      	b.n	8008662 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	4013      	ands	r3, r2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1dc      	bne.n	800861a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3720      	adds	r7, #32
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	000cdbff 	.word	0x000cdbff

08008670 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4618      	mov	r0, r3
 800867e:	f7fe fd39 	bl	80070f4 <LL_ADC_IsEnabled>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d161      	bne.n	800874c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689a      	ldr	r2, [r3, #8]
 800868e:	4b32      	ldr	r3, [pc, #200]	; (8008758 <ADC_Enable+0xe8>)
 8008690:	4013      	ands	r3, r2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00d      	beq.n	80086b2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869a:	f043 0210 	orr.w	r2, r3, #16
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a6:	f043 0201 	orr.w	r2, r3, #1
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e04d      	b.n	800874e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe fcf4 	bl	80070a4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80086bc:	f7fe fb2e 	bl	8006d1c <HAL_GetTick>
 80086c0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80086c2:	4826      	ldr	r0, [pc, #152]	; (800875c <ADC_Enable+0xec>)
 80086c4:	f7fe fc84 	bl	8006fd0 <LL_ADC_GetMultimode>
 80086c8:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a24      	ldr	r2, [pc, #144]	; (8008760 <ADC_Enable+0xf0>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d002      	beq.n	80086da <ADC_Enable+0x6a>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	e000      	b.n	80086dc <ADC_Enable+0x6c>
 80086da:	4b22      	ldr	r3, [pc, #136]	; (8008764 <ADC_Enable+0xf4>)
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	6812      	ldr	r2, [r2, #0]
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d02c      	beq.n	800873e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d130      	bne.n	800874c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80086ea:	e028      	b.n	800873e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe fcff 	bl	80070f4 <LL_ADC_IsEnabled>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d104      	bne.n	8008706 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe fccf 	bl	80070a4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008706:	f7fe fb09 	bl	8006d1c <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b02      	cmp	r3, #2
 8008712:	d914      	bls.n	800873e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b01      	cmp	r3, #1
 8008720:	d00d      	beq.n	800873e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008726:	f043 0210 	orr.w	r2, r3, #16
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008732:	f043 0201 	orr.w	r2, r3, #1
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e007      	b.n	800874e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b01      	cmp	r3, #1
 800874a:	d1cf      	bne.n	80086ec <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	8000003f 	.word	0x8000003f
 800875c:	40022300 	.word	0x40022300
 8008760:	40022100 	.word	0x40022100
 8008764:	40022000 	.word	0x40022000

08008768 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe fcd0 	bl	800711a <LL_ADC_IsDisableOngoing>
 800877a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4618      	mov	r0, r3
 8008782:	f7fe fcb7 	bl	80070f4 <LL_ADC_IsEnabled>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d047      	beq.n	800881c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d144      	bne.n	800881c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f003 030d 	and.w	r3, r3, #13
 800879c:	2b01      	cmp	r3, #1
 800879e:	d10c      	bne.n	80087ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe fc91 	bl	80070cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2203      	movs	r2, #3
 80087b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80087b2:	f7fe fab3 	bl	8006d1c <HAL_GetTick>
 80087b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80087b8:	e029      	b.n	800880e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087be:	f043 0210 	orr.w	r2, r3, #16
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ca:	f043 0201 	orr.w	r2, r3, #1
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e023      	b.n	800881e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80087d6:	f7fe faa1 	bl	8006d1c <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d914      	bls.n	800880e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00d      	beq.n	800880e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f6:	f043 0210 	orr.w	r2, r3, #16
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008802:	f043 0201 	orr.w	r2, r3, #1
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e007      	b.n	800881e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1dc      	bne.n	80087d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008830:	4b60      	ldr	r3, [pc, #384]	; (80089b4 <ADC_ConfigureBoostMode+0x18c>)
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01c      	beq.n	8008876 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800883c:	f006 fd84 	bl	800f348 <HAL_RCC_GetHCLKFreq>
 8008840:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800884a:	d010      	beq.n	800886e <ADC_ConfigureBoostMode+0x46>
 800884c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008850:	d873      	bhi.n	800893a <ADC_ConfigureBoostMode+0x112>
 8008852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008856:	d002      	beq.n	800885e <ADC_ConfigureBoostMode+0x36>
 8008858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800885c:	d16d      	bne.n	800893a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	0c1b      	lsrs	r3, r3, #16
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	fbb2 f3f3 	udiv	r3, r2, r3
 800886a:	60fb      	str	r3, [r7, #12]
        break;
 800886c:	e068      	b.n	8008940 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	089b      	lsrs	r3, r3, #2
 8008872:	60fb      	str	r3, [r7, #12]
        break;
 8008874:	e064      	b.n	8008940 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008876:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800887a:	f04f 0100 	mov.w	r1, #0
 800887e:	f007 ff67 	bl	8010750 <HAL_RCCEx_GetPeriphCLKFreq>
 8008882:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800888c:	d051      	beq.n	8008932 <ADC_ConfigureBoostMode+0x10a>
 800888e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008892:	d854      	bhi.n	800893e <ADC_ConfigureBoostMode+0x116>
 8008894:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008898:	d047      	beq.n	800892a <ADC_ConfigureBoostMode+0x102>
 800889a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800889e:	d84e      	bhi.n	800893e <ADC_ConfigureBoostMode+0x116>
 80088a0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80088a4:	d03d      	beq.n	8008922 <ADC_ConfigureBoostMode+0xfa>
 80088a6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80088aa:	d848      	bhi.n	800893e <ADC_ConfigureBoostMode+0x116>
 80088ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088b0:	d033      	beq.n	800891a <ADC_ConfigureBoostMode+0xf2>
 80088b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088b6:	d842      	bhi.n	800893e <ADC_ConfigureBoostMode+0x116>
 80088b8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80088bc:	d029      	beq.n	8008912 <ADC_ConfigureBoostMode+0xea>
 80088be:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80088c2:	d83c      	bhi.n	800893e <ADC_ConfigureBoostMode+0x116>
 80088c4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80088c8:	d01a      	beq.n	8008900 <ADC_ConfigureBoostMode+0xd8>
 80088ca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80088ce:	d836      	bhi.n	800893e <ADC_ConfigureBoostMode+0x116>
 80088d0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80088d4:	d014      	beq.n	8008900 <ADC_ConfigureBoostMode+0xd8>
 80088d6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80088da:	d830      	bhi.n	800893e <ADC_ConfigureBoostMode+0x116>
 80088dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088e0:	d00e      	beq.n	8008900 <ADC_ConfigureBoostMode+0xd8>
 80088e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088e6:	d82a      	bhi.n	800893e <ADC_ConfigureBoostMode+0x116>
 80088e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80088ec:	d008      	beq.n	8008900 <ADC_ConfigureBoostMode+0xd8>
 80088ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80088f2:	d824      	bhi.n	800893e <ADC_ConfigureBoostMode+0x116>
 80088f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088f8:	d002      	beq.n	8008900 <ADC_ConfigureBoostMode+0xd8>
 80088fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80088fe:	d11e      	bne.n	800893e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	0c9b      	lsrs	r3, r3, #18
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	fbb2 f3f3 	udiv	r3, r2, r3
 800890e:	60fb      	str	r3, [r7, #12]
        break;
 8008910:	e016      	b.n	8008940 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	091b      	lsrs	r3, r3, #4
 8008916:	60fb      	str	r3, [r7, #12]
        break;
 8008918:	e012      	b.n	8008940 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	095b      	lsrs	r3, r3, #5
 800891e:	60fb      	str	r3, [r7, #12]
        break;
 8008920:	e00e      	b.n	8008940 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	099b      	lsrs	r3, r3, #6
 8008926:	60fb      	str	r3, [r7, #12]
        break;
 8008928:	e00a      	b.n	8008940 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	09db      	lsrs	r3, r3, #7
 800892e:	60fb      	str	r3, [r7, #12]
        break;
 8008930:	e006      	b.n	8008940 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	0a1b      	lsrs	r3, r3, #8
 8008936:	60fb      	str	r3, [r7, #12]
        break;
 8008938:	e002      	b.n	8008940 <ADC_ConfigureBoostMode+0x118>
        break;
 800893a:	bf00      	nop
 800893c:	e000      	b.n	8008940 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800893e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	085b      	lsrs	r3, r3, #1
 8008944:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4a1b      	ldr	r2, [pc, #108]	; (80089b8 <ADC_ConfigureBoostMode+0x190>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d808      	bhi.n	8008960 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800895c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800895e:	e025      	b.n	80089ac <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4a16      	ldr	r2, [pc, #88]	; (80089bc <ADC_ConfigureBoostMode+0x194>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d80a      	bhi.n	800897e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800897a:	609a      	str	r2, [r3, #8]
}
 800897c:	e016      	b.n	80089ac <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4a0f      	ldr	r2, [pc, #60]	; (80089c0 <ADC_ConfigureBoostMode+0x198>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d80a      	bhi.n	800899c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008998:	609a      	str	r2, [r3, #8]
}
 800899a:	e007      	b.n	80089ac <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80089aa:	609a      	str	r2, [r3, #8]
}
 80089ac:	bf00      	nop
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	40022300 	.word	0x40022300
 80089b8:	005f5e10 	.word	0x005f5e10
 80089bc:	00bebc20 	.word	0x00bebc20
 80089c0:	017d7840 	.word	0x017d7840

080089c4 <LL_ADC_IsEnabled>:
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d101      	bne.n	80089dc <LL_ADC_IsEnabled+0x18>
 80089d8:	2301      	movs	r3, #1
 80089da:	e000      	b.n	80089de <LL_ADC_IsEnabled+0x1a>
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <LL_ADC_REG_IsConversionOngoing>:
{
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d101      	bne.n	8008a02 <LL_ADC_REG_IsConversionOngoing+0x18>
 80089fe:	2301      	movs	r3, #1
 8008a00:	e000      	b.n	8008a04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008a74:	b590      	push	{r4, r7, lr}
 8008a76:	b09f      	sub	sp, #124	; 0x7c
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d101      	bne.n	8008a92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008a8e:	2302      	movs	r3, #2
 8008a90:	e080      	b.n	8008b94 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a3d      	ldr	r2, [pc, #244]	; (8008b9c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d102      	bne.n	8008ab2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008aac:	4b3c      	ldr	r3, [pc, #240]	; (8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8008aae:	60bb      	str	r3, [r7, #8]
 8008ab0:	e001      	b.n	8008ab6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10b      	bne.n	8008ad4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac0:	f043 0220 	orr.w	r2, r3, #32
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e05f      	b.n	8008b94 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff ff87 	bl	80089ea <LL_ADC_REG_IsConversionOngoing>
 8008adc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7ff ff81 	bl	80089ea <LL_ADC_REG_IsConversionOngoing>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d141      	bne.n	8008b72 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d13e      	bne.n	8008b72 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008af4:	4b2b      	ldr	r3, [pc, #172]	; (8008ba4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8008af6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d020      	beq.n	8008b42 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b10:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008b12:	4822      	ldr	r0, [pc, #136]	; (8008b9c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8008b14:	f7ff ff56 	bl	80089c4 <LL_ADC_IsEnabled>
 8008b18:	4604      	mov	r4, r0
 8008b1a:	4821      	ldr	r0, [pc, #132]	; (8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8008b1c:	f7ff ff52 	bl	80089c4 <LL_ADC_IsEnabled>
 8008b20:	4603      	mov	r3, r0
 8008b22:	4323      	orrs	r3, r4
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d12e      	bne.n	8008b86 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	4b1e      	ldr	r3, [pc, #120]	; (8008ba8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8008b2e:	4013      	ands	r3, r2
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	6811      	ldr	r1, [r2, #0]
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	6892      	ldr	r2, [r2, #8]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b3e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b40:	e021      	b.n	8008b86 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b4c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008b4e:	4813      	ldr	r0, [pc, #76]	; (8008b9c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8008b50:	f7ff ff38 	bl	80089c4 <LL_ADC_IsEnabled>
 8008b54:	4604      	mov	r4, r0
 8008b56:	4812      	ldr	r0, [pc, #72]	; (8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8008b58:	f7ff ff34 	bl	80089c4 <LL_ADC_IsEnabled>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	4323      	orrs	r3, r4
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d110      	bne.n	8008b86 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b66:	689a      	ldr	r2, [r3, #8]
 8008b68:	4b0f      	ldr	r3, [pc, #60]	; (8008ba8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b6e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b70:	e009      	b.n	8008b86 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b76:	f043 0220 	orr.w	r2, r3, #32
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008b84:	e000      	b.n	8008b88 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b86:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008b90:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	377c      	adds	r7, #124	; 0x7c
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd90      	pop	{r4, r7, pc}
 8008b9c:	40022000 	.word	0x40022000
 8008ba0:	40022100 	.word	0x40022100
 8008ba4:	40022300 	.word	0x40022300
 8008ba8:	fffff0e0 	.word	0xfffff0e0

08008bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	; (8008bec <__NVIC_SetPriorityGrouping+0x40>)
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008bc8:	4013      	ands	r3, r2
 8008bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008bd4:	4b06      	ldr	r3, [pc, #24]	; (8008bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008bda:	4a04      	ldr	r2, [pc, #16]	; (8008bec <__NVIC_SetPriorityGrouping+0x40>)
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	60d3      	str	r3, [r2, #12]
}
 8008be0:	bf00      	nop
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	e000ed00 	.word	0xe000ed00
 8008bf0:	05fa0000 	.word	0x05fa0000

08008bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008bf8:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <__NVIC_GetPriorityGrouping+0x18>)
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	0a1b      	lsrs	r3, r3, #8
 8008bfe:	f003 0307 	and.w	r3, r3, #7
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	e000ed00 	.word	0xe000ed00

08008c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	db0b      	blt.n	8008c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	f003 021f 	and.w	r2, r3, #31
 8008c28:	4907      	ldr	r1, [pc, #28]	; (8008c48 <__NVIC_EnableIRQ+0x38>)
 8008c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c2e:	095b      	lsrs	r3, r3, #5
 8008c30:	2001      	movs	r0, #1
 8008c32:	fa00 f202 	lsl.w	r2, r0, r2
 8008c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	e000e100 	.word	0xe000e100

08008c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	4603      	mov	r3, r0
 8008c54:	6039      	str	r1, [r7, #0]
 8008c56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	db0a      	blt.n	8008c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	490c      	ldr	r1, [pc, #48]	; (8008c98 <__NVIC_SetPriority+0x4c>)
 8008c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c6a:	0112      	lsls	r2, r2, #4
 8008c6c:	b2d2      	uxtb	r2, r2
 8008c6e:	440b      	add	r3, r1
 8008c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c74:	e00a      	b.n	8008c8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	4908      	ldr	r1, [pc, #32]	; (8008c9c <__NVIC_SetPriority+0x50>)
 8008c7c:	88fb      	ldrh	r3, [r7, #6]
 8008c7e:	f003 030f 	and.w	r3, r3, #15
 8008c82:	3b04      	subs	r3, #4
 8008c84:	0112      	lsls	r2, r2, #4
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	440b      	add	r3, r1
 8008c8a:	761a      	strb	r2, [r3, #24]
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	e000e100 	.word	0xe000e100
 8008c9c:	e000ed00 	.word	0xe000ed00

08008ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b089      	sub	sp, #36	; 0x24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f1c3 0307 	rsb	r3, r3, #7
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	bf28      	it	cs
 8008cbe:	2304      	movcs	r3, #4
 8008cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	2b06      	cmp	r3, #6
 8008cc8:	d902      	bls.n	8008cd0 <NVIC_EncodePriority+0x30>
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	3b03      	subs	r3, #3
 8008cce:	e000      	b.n	8008cd2 <NVIC_EncodePriority+0x32>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	43da      	mvns	r2, r3
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	401a      	ands	r2, r3
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf2:	43d9      	mvns	r1, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cf8:	4313      	orrs	r3, r2
         );
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3724      	adds	r7, #36	; 0x24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
	...

08008d08 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008d0c:	f3bf 8f4f 	dsb	sy
}
 8008d10:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008d12:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <__NVIC_SystemReset+0x24>)
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008d1a:	4904      	ldr	r1, [pc, #16]	; (8008d2c <__NVIC_SystemReset+0x24>)
 8008d1c:	4b04      	ldr	r3, [pc, #16]	; (8008d30 <__NVIC_SystemReset+0x28>)
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008d22:	f3bf 8f4f 	dsb	sy
}
 8008d26:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008d28:	bf00      	nop
 8008d2a:	e7fd      	b.n	8008d28 <__NVIC_SystemReset+0x20>
 8008d2c:	e000ed00 	.word	0xe000ed00
 8008d30:	05fa0004 	.word	0x05fa0004

08008d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d44:	d301      	bcc.n	8008d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d46:	2301      	movs	r3, #1
 8008d48:	e00f      	b.n	8008d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d4a:	4a0a      	ldr	r2, [pc, #40]	; (8008d74 <SysTick_Config+0x40>)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d52:	210f      	movs	r1, #15
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	f7ff ff78 	bl	8008c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d5c:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <SysTick_Config+0x40>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d62:	4b04      	ldr	r3, [pc, #16]	; (8008d74 <SysTick_Config+0x40>)
 8008d64:	2207      	movs	r2, #7
 8008d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	e000e010 	.word	0xe000e010

08008d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff ff13 	bl	8008bac <__NVIC_SetPriorityGrouping>
}
 8008d86:	bf00      	nop
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b086      	sub	sp, #24
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	4603      	mov	r3, r0
 8008d96:	60b9      	str	r1, [r7, #8]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008d9c:	f7ff ff2a 	bl	8008bf4 <__NVIC_GetPriorityGrouping>
 8008da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	68b9      	ldr	r1, [r7, #8]
 8008da6:	6978      	ldr	r0, [r7, #20]
 8008da8:	f7ff ff7a 	bl	8008ca0 <NVIC_EncodePriority>
 8008dac:	4602      	mov	r2, r0
 8008dae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008db2:	4611      	mov	r1, r2
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff ff49 	bl	8008c4c <__NVIC_SetPriority>
}
 8008dba:	bf00      	nop
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	4603      	mov	r3, r0
 8008dca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff ff1d 	bl	8008c10 <__NVIC_EnableIRQ>
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008de2:	f7ff ff91 	bl	8008d08 <__NVIC_SystemReset>

08008de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff ffa0 	bl	8008d34 <SysTick_Config>
 8008df4:	4603      	mov	r3, r0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e014      	b.n	8008e3a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	791b      	ldrb	r3, [r3, #4]
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d105      	bne.n	8008e26 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7fd f88f 	bl	8005f44 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2202      	movs	r2, #2
 8008e2a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	795b      	ldrb	r3, [r3, #5]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d101      	bne.n	8008e58 <HAL_DAC_Start+0x16>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e040      	b.n	8008eda <HAL_DAC_Start+0x98>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2202      	movs	r2, #2
 8008e62:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6819      	ldr	r1, [r3, #0]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	f003 0310 	and.w	r3, r3, #16
 8008e70:	2201      	movs	r2, #1
 8008e72:	409a      	lsls	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	430a      	orrs	r2, r1
 8008e7a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10f      	bne.n	8008ea2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d11d      	bne.n	8008ecc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 0201 	orr.w	r2, r2, #1
 8008e9e:	605a      	str	r2, [r3, #4]
 8008ea0:	e014      	b.n	8008ecc <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	f003 0310 	and.w	r3, r3, #16
 8008eb2:	2102      	movs	r1, #2
 8008eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d107      	bne.n	8008ecc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0202 	orr.w	r2, r2, #2
 8008eca:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b087      	sub	sp, #28
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
 8008ef2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d105      	bne.n	8008f10 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4413      	add	r3, r2
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	617b      	str	r3, [r7, #20]
 8008f0e:	e004      	b.n	8008f1a <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4413      	add	r3, r2
 8008f16:	3314      	adds	r3, #20
 8008f18:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	371c      	adds	r7, #28
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	795b      	ldrb	r3, [r3, #5]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_DAC_ConfigChannel+0x18>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e12a      	b.n	800919e <HAL_DAC_ConfigChannel+0x26e>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2202      	movs	r2, #2
 8008f52:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	f040 8081 	bne.w	8009060 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008f5e:	f7fd fedd 	bl	8006d1c <HAL_GetTick>
 8008f62:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d140      	bne.n	8008fec <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008f6a:	e018      	b.n	8008f9e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008f6c:	f7fd fed6 	bl	8006d1c <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d911      	bls.n	8008f9e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f80:	4b89      	ldr	r3, [pc, #548]	; (80091a8 <HAL_DAC_ConfigChannel+0x278>)
 8008f82:	4013      	ands	r3, r2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00a      	beq.n	8008f9e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	f043 0208 	orr.w	r2, r3, #8
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2203      	movs	r2, #3
 8008f98:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e0ff      	b.n	800919e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa4:	4b80      	ldr	r3, [pc, #512]	; (80091a8 <HAL_DAC_ConfigChannel+0x278>)
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1df      	bne.n	8008f6c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8008fac:	2001      	movs	r0, #1
 8008fae:	f7fd fec1 	bl	8006d34 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	6992      	ldr	r2, [r2, #24]
 8008fba:	641a      	str	r2, [r3, #64]	; 0x40
 8008fbc:	e023      	b.n	8009006 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008fbe:	f7fd fead 	bl	8006d1c <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d90f      	bls.n	8008fec <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	da0a      	bge.n	8008fec <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f043 0208 	orr.w	r2, r3, #8
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2203      	movs	r2, #3
 8008fe6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e0d8      	b.n	800919e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	dbe3      	blt.n	8008fbe <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	f7fd fe9c 	bl	8006d34 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	6992      	ldr	r2, [r2, #24]
 8009004:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f003 0310 	and.w	r3, r3, #16
 8009012:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009016:	fa01 f303 	lsl.w	r3, r1, r3
 800901a:	43db      	mvns	r3, r3
 800901c:	ea02 0103 	and.w	r1, r2, r3
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	69da      	ldr	r2, [r3, #28]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f003 0310 	and.w	r3, r3, #16
 800902a:	409a      	lsls	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	430a      	orrs	r2, r1
 8009032:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f003 0310 	and.w	r3, r3, #16
 8009040:	21ff      	movs	r1, #255	; 0xff
 8009042:	fa01 f303 	lsl.w	r3, r1, r3
 8009046:	43db      	mvns	r3, r3
 8009048:	ea02 0103 	and.w	r1, r2, r3
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	6a1a      	ldr	r2, [r3, #32]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f003 0310 	and.w	r3, r3, #16
 8009056:	409a      	lsls	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d11d      	bne.n	80090a4 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f003 0310 	and.w	r3, r3, #16
 8009076:	221f      	movs	r2, #31
 8009078:	fa02 f303 	lsl.w	r3, r2, r3
 800907c:	43db      	mvns	r3, r3
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	4013      	ands	r3, r2
 8009082:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f003 0310 	and.w	r3, r3, #16
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	fa02 f303 	lsl.w	r3, r2, r3
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	4313      	orrs	r3, r2
 800909a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090aa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f003 0310 	and.w	r3, r3, #16
 80090b2:	2207      	movs	r2, #7
 80090b4:	fa02 f303 	lsl.w	r3, r2, r3
 80090b8:	43db      	mvns	r3, r3
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	4013      	ands	r3, r2
 80090be:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d102      	bne.n	80090ce <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80090c8:	2300      	movs	r3, #0
 80090ca:	61fb      	str	r3, [r7, #28]
 80090cc:	e00f      	b.n	80090ee <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d102      	bne.n	80090dc <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80090d6:	2301      	movs	r3, #1
 80090d8:	61fb      	str	r3, [r7, #28]
 80090da:	e008      	b.n	80090ee <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d102      	bne.n	80090ea <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80090e4:	2301      	movs	r3, #1
 80090e6:	61fb      	str	r3, [r7, #28]
 80090e8:	e001      	b.n	80090ee <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	69fa      	ldr	r2, [r7, #28]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f003 0310 	and.w	r3, r3, #16
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	fa02 f303 	lsl.w	r3, r2, r3
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	4313      	orrs	r3, r2
 800910e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6819      	ldr	r1, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f003 0310 	and.w	r3, r3, #16
 8009124:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009128:	fa02 f303 	lsl.w	r3, r2, r3
 800912c:	43da      	mvns	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	400a      	ands	r2, r1
 8009134:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f003 0310 	and.w	r3, r3, #16
 8009144:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009148:	fa02 f303 	lsl.w	r3, r2, r3
 800914c:	43db      	mvns	r3, r3
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	4013      	ands	r3, r2
 8009152:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f003 0310 	and.w	r3, r3, #16
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	fa02 f303 	lsl.w	r3, r2, r3
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	4313      	orrs	r3, r2
 800916a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6819      	ldr	r1, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f003 0310 	and.w	r3, r3, #16
 8009180:	22c0      	movs	r2, #192	; 0xc0
 8009182:	fa02 f303 	lsl.w	r3, r2, r3
 8009186:	43da      	mvns	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	400a      	ands	r2, r1
 800918e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3720      	adds	r7, #32
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20008000 	.word	0x20008000

080091ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80091b4:	f7fd fdb2 	bl	8006d1c <HAL_GetTick>
 80091b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e37d      	b.n	80098c0 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a66      	ldr	r2, [pc, #408]	; (8009364 <HAL_DMA_Init+0x1b8>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d04a      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a65      	ldr	r2, [pc, #404]	; (8009368 <HAL_DMA_Init+0x1bc>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d045      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a63      	ldr	r2, [pc, #396]	; (800936c <HAL_DMA_Init+0x1c0>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d040      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a62      	ldr	r2, [pc, #392]	; (8009370 <HAL_DMA_Init+0x1c4>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d03b      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a60      	ldr	r2, [pc, #384]	; (8009374 <HAL_DMA_Init+0x1c8>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d036      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a5f      	ldr	r2, [pc, #380]	; (8009378 <HAL_DMA_Init+0x1cc>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d031      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a5d      	ldr	r2, [pc, #372]	; (800937c <HAL_DMA_Init+0x1d0>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d02c      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a5c      	ldr	r2, [pc, #368]	; (8009380 <HAL_DMA_Init+0x1d4>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d027      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a5a      	ldr	r2, [pc, #360]	; (8009384 <HAL_DMA_Init+0x1d8>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d022      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a59      	ldr	r2, [pc, #356]	; (8009388 <HAL_DMA_Init+0x1dc>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d01d      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a57      	ldr	r2, [pc, #348]	; (800938c <HAL_DMA_Init+0x1e0>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d018      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a56      	ldr	r2, [pc, #344]	; (8009390 <HAL_DMA_Init+0x1e4>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d013      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a54      	ldr	r2, [pc, #336]	; (8009394 <HAL_DMA_Init+0x1e8>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d00e      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a53      	ldr	r2, [pc, #332]	; (8009398 <HAL_DMA_Init+0x1ec>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d009      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a51      	ldr	r2, [pc, #324]	; (800939c <HAL_DMA_Init+0x1f0>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d004      	beq.n	8009264 <HAL_DMA_Init+0xb8>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a50      	ldr	r2, [pc, #320]	; (80093a0 <HAL_DMA_Init+0x1f4>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d101      	bne.n	8009268 <HAL_DMA_Init+0xbc>
 8009264:	2301      	movs	r3, #1
 8009266:	e000      	b.n	800926a <HAL_DMA_Init+0xbe>
 8009268:	2300      	movs	r3, #0
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 813c 	beq.w	80094e8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2202      	movs	r2, #2
 8009274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a37      	ldr	r2, [pc, #220]	; (8009364 <HAL_DMA_Init+0x1b8>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d04a      	beq.n	8009320 <HAL_DMA_Init+0x174>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a36      	ldr	r2, [pc, #216]	; (8009368 <HAL_DMA_Init+0x1bc>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d045      	beq.n	8009320 <HAL_DMA_Init+0x174>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a34      	ldr	r2, [pc, #208]	; (800936c <HAL_DMA_Init+0x1c0>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d040      	beq.n	8009320 <HAL_DMA_Init+0x174>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a33      	ldr	r2, [pc, #204]	; (8009370 <HAL_DMA_Init+0x1c4>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d03b      	beq.n	8009320 <HAL_DMA_Init+0x174>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a31      	ldr	r2, [pc, #196]	; (8009374 <HAL_DMA_Init+0x1c8>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d036      	beq.n	8009320 <HAL_DMA_Init+0x174>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a30      	ldr	r2, [pc, #192]	; (8009378 <HAL_DMA_Init+0x1cc>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d031      	beq.n	8009320 <HAL_DMA_Init+0x174>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a2e      	ldr	r2, [pc, #184]	; (800937c <HAL_DMA_Init+0x1d0>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d02c      	beq.n	8009320 <HAL_DMA_Init+0x174>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a2d      	ldr	r2, [pc, #180]	; (8009380 <HAL_DMA_Init+0x1d4>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d027      	beq.n	8009320 <HAL_DMA_Init+0x174>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a2b      	ldr	r2, [pc, #172]	; (8009384 <HAL_DMA_Init+0x1d8>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d022      	beq.n	8009320 <HAL_DMA_Init+0x174>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a2a      	ldr	r2, [pc, #168]	; (8009388 <HAL_DMA_Init+0x1dc>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d01d      	beq.n	8009320 <HAL_DMA_Init+0x174>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a28      	ldr	r2, [pc, #160]	; (800938c <HAL_DMA_Init+0x1e0>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d018      	beq.n	8009320 <HAL_DMA_Init+0x174>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a27      	ldr	r2, [pc, #156]	; (8009390 <HAL_DMA_Init+0x1e4>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d013      	beq.n	8009320 <HAL_DMA_Init+0x174>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a25      	ldr	r2, [pc, #148]	; (8009394 <HAL_DMA_Init+0x1e8>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d00e      	beq.n	8009320 <HAL_DMA_Init+0x174>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a24      	ldr	r2, [pc, #144]	; (8009398 <HAL_DMA_Init+0x1ec>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d009      	beq.n	8009320 <HAL_DMA_Init+0x174>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a22      	ldr	r2, [pc, #136]	; (800939c <HAL_DMA_Init+0x1f0>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d004      	beq.n	8009320 <HAL_DMA_Init+0x174>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a21      	ldr	r2, [pc, #132]	; (80093a0 <HAL_DMA_Init+0x1f4>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d108      	bne.n	8009332 <HAL_DMA_Init+0x186>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f022 0201 	bic.w	r2, r2, #1
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	e007      	b.n	8009342 <HAL_DMA_Init+0x196>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f022 0201 	bic.w	r2, r2, #1
 8009340:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009342:	e02f      	b.n	80093a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009344:	f7fd fcea 	bl	8006d1c <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	2b05      	cmp	r3, #5
 8009350:	d928      	bls.n	80093a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2220      	movs	r2, #32
 8009356:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2203      	movs	r2, #3
 800935c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e2ad      	b.n	80098c0 <HAL_DMA_Init+0x714>
 8009364:	40020010 	.word	0x40020010
 8009368:	40020028 	.word	0x40020028
 800936c:	40020040 	.word	0x40020040
 8009370:	40020058 	.word	0x40020058
 8009374:	40020070 	.word	0x40020070
 8009378:	40020088 	.word	0x40020088
 800937c:	400200a0 	.word	0x400200a0
 8009380:	400200b8 	.word	0x400200b8
 8009384:	40020410 	.word	0x40020410
 8009388:	40020428 	.word	0x40020428
 800938c:	40020440 	.word	0x40020440
 8009390:	40020458 	.word	0x40020458
 8009394:	40020470 	.word	0x40020470
 8009398:	40020488 	.word	0x40020488
 800939c:	400204a0 	.word	0x400204a0
 80093a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1c8      	bne.n	8009344 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	4b73      	ldr	r3, [pc, #460]	; (800958c <HAL_DMA_Init+0x3e0>)
 80093be:	4013      	ands	r3, r2
 80093c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80093ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a1b      	ldr	r3, [r3, #32]
 80093e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	d107      	bne.n	8009408 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009400:	4313      	orrs	r3, r2
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	4313      	orrs	r3, r2
 8009406:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	2b28      	cmp	r3, #40	; 0x28
 800940e:	d903      	bls.n	8009418 <HAL_DMA_Init+0x26c>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	2b2e      	cmp	r3, #46	; 0x2e
 8009416:	d91f      	bls.n	8009458 <HAL_DMA_Init+0x2ac>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	2b3e      	cmp	r3, #62	; 0x3e
 800941e:	d903      	bls.n	8009428 <HAL_DMA_Init+0x27c>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	2b42      	cmp	r3, #66	; 0x42
 8009426:	d917      	bls.n	8009458 <HAL_DMA_Init+0x2ac>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	2b46      	cmp	r3, #70	; 0x46
 800942e:	d903      	bls.n	8009438 <HAL_DMA_Init+0x28c>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	2b48      	cmp	r3, #72	; 0x48
 8009436:	d90f      	bls.n	8009458 <HAL_DMA_Init+0x2ac>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	2b4e      	cmp	r3, #78	; 0x4e
 800943e:	d903      	bls.n	8009448 <HAL_DMA_Init+0x29c>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	2b52      	cmp	r3, #82	; 0x52
 8009446:	d907      	bls.n	8009458 <HAL_DMA_Init+0x2ac>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	2b73      	cmp	r3, #115	; 0x73
 800944e:	d905      	bls.n	800945c <HAL_DMA_Init+0x2b0>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	2b77      	cmp	r3, #119	; 0x77
 8009456:	d801      	bhi.n	800945c <HAL_DMA_Init+0x2b0>
 8009458:	2301      	movs	r3, #1
 800945a:	e000      	b.n	800945e <HAL_DMA_Init+0x2b2>
 800945c:	2300      	movs	r3, #0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009468:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f023 0307 	bic.w	r3, r3, #7
 8009480:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	4313      	orrs	r3, r2
 800948a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	2b04      	cmp	r3, #4
 8009492:	d117      	bne.n	80094c4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	4313      	orrs	r3, r2
 800949c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00e      	beq.n	80094c4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f002 fbe0 	bl	800bc6c <DMA_CheckFifoParam>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d008      	beq.n	80094c4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2240      	movs	r2, #64	; 0x40
 80094b6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e1fd      	b.n	80098c0 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f002 fb1b 	bl	800bb08 <DMA_CalcBaseAndBitshift>
 80094d2:	4603      	mov	r3, r0
 80094d4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094da:	f003 031f 	and.w	r3, r3, #31
 80094de:	223f      	movs	r2, #63	; 0x3f
 80094e0:	409a      	lsls	r2, r3
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	609a      	str	r2, [r3, #8]
 80094e6:	e0fd      	b.n	80096e4 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a28      	ldr	r2, [pc, #160]	; (8009590 <HAL_DMA_Init+0x3e4>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d04a      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a27      	ldr	r2, [pc, #156]	; (8009594 <HAL_DMA_Init+0x3e8>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d045      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a25      	ldr	r2, [pc, #148]	; (8009598 <HAL_DMA_Init+0x3ec>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d040      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a24      	ldr	r2, [pc, #144]	; (800959c <HAL_DMA_Init+0x3f0>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d03b      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a22      	ldr	r2, [pc, #136]	; (80095a0 <HAL_DMA_Init+0x3f4>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d036      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a21      	ldr	r2, [pc, #132]	; (80095a4 <HAL_DMA_Init+0x3f8>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d031      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a1f      	ldr	r2, [pc, #124]	; (80095a8 <HAL_DMA_Init+0x3fc>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d02c      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a1e      	ldr	r2, [pc, #120]	; (80095ac <HAL_DMA_Init+0x400>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d027      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a1c      	ldr	r2, [pc, #112]	; (80095b0 <HAL_DMA_Init+0x404>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d022      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a1b      	ldr	r2, [pc, #108]	; (80095b4 <HAL_DMA_Init+0x408>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d01d      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a19      	ldr	r2, [pc, #100]	; (80095b8 <HAL_DMA_Init+0x40c>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d018      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a18      	ldr	r2, [pc, #96]	; (80095bc <HAL_DMA_Init+0x410>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d013      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a16      	ldr	r2, [pc, #88]	; (80095c0 <HAL_DMA_Init+0x414>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d00e      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a15      	ldr	r2, [pc, #84]	; (80095c4 <HAL_DMA_Init+0x418>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d009      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a13      	ldr	r2, [pc, #76]	; (80095c8 <HAL_DMA_Init+0x41c>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d004      	beq.n	8009588 <HAL_DMA_Init+0x3dc>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a12      	ldr	r2, [pc, #72]	; (80095cc <HAL_DMA_Init+0x420>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d123      	bne.n	80095d0 <HAL_DMA_Init+0x424>
 8009588:	2301      	movs	r3, #1
 800958a:	e022      	b.n	80095d2 <HAL_DMA_Init+0x426>
 800958c:	fe10803f 	.word	0xfe10803f
 8009590:	48022c08 	.word	0x48022c08
 8009594:	48022c1c 	.word	0x48022c1c
 8009598:	48022c30 	.word	0x48022c30
 800959c:	48022c44 	.word	0x48022c44
 80095a0:	48022c58 	.word	0x48022c58
 80095a4:	48022c6c 	.word	0x48022c6c
 80095a8:	48022c80 	.word	0x48022c80
 80095ac:	48022c94 	.word	0x48022c94
 80095b0:	58025408 	.word	0x58025408
 80095b4:	5802541c 	.word	0x5802541c
 80095b8:	58025430 	.word	0x58025430
 80095bc:	58025444 	.word	0x58025444
 80095c0:	58025458 	.word	0x58025458
 80095c4:	5802546c 	.word	0x5802546c
 80095c8:	58025480 	.word	0x58025480
 80095cc:	58025494 	.word	0x58025494
 80095d0:	2300      	movs	r3, #0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d07d      	beq.n	80096d2 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a7f      	ldr	r2, [pc, #508]	; (80097d8 <HAL_DMA_Init+0x62c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d021      	beq.n	8009624 <HAL_DMA_Init+0x478>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a7d      	ldr	r2, [pc, #500]	; (80097dc <HAL_DMA_Init+0x630>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d01c      	beq.n	8009624 <HAL_DMA_Init+0x478>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a7c      	ldr	r2, [pc, #496]	; (80097e0 <HAL_DMA_Init+0x634>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d017      	beq.n	8009624 <HAL_DMA_Init+0x478>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a7a      	ldr	r2, [pc, #488]	; (80097e4 <HAL_DMA_Init+0x638>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d012      	beq.n	8009624 <HAL_DMA_Init+0x478>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a79      	ldr	r2, [pc, #484]	; (80097e8 <HAL_DMA_Init+0x63c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d00d      	beq.n	8009624 <HAL_DMA_Init+0x478>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a77      	ldr	r2, [pc, #476]	; (80097ec <HAL_DMA_Init+0x640>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d008      	beq.n	8009624 <HAL_DMA_Init+0x478>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a76      	ldr	r2, [pc, #472]	; (80097f0 <HAL_DMA_Init+0x644>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d003      	beq.n	8009624 <HAL_DMA_Init+0x478>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a74      	ldr	r2, [pc, #464]	; (80097f4 <HAL_DMA_Init+0x648>)
 8009622:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2202      	movs	r2, #2
 8009628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	4b6e      	ldr	r3, [pc, #440]	; (80097f8 <HAL_DMA_Init+0x64c>)
 8009640:	4013      	ands	r3, r2
 8009642:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	2b40      	cmp	r3, #64	; 0x40
 800964a:	d008      	beq.n	800965e <HAL_DMA_Init+0x4b2>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	2b80      	cmp	r3, #128	; 0x80
 8009652:	d102      	bne.n	800965a <HAL_DMA_Init+0x4ae>
 8009654:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009658:	e002      	b.n	8009660 <HAL_DMA_Init+0x4b4>
 800965a:	2300      	movs	r3, #0
 800965c:	e000      	b.n	8009660 <HAL_DMA_Init+0x4b4>
 800965e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	68d2      	ldr	r2, [r2, #12]
 8009664:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009666:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800966e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009676:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800967e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	69db      	ldr	r3, [r3, #28]
 8009684:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009686:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800968e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	4313      	orrs	r3, r2
 8009694:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	4b55      	ldr	r3, [pc, #340]	; (80097fc <HAL_DMA_Init+0x650>)
 80096a6:	4413      	add	r3, r2
 80096a8:	4a55      	ldr	r2, [pc, #340]	; (8009800 <HAL_DMA_Init+0x654>)
 80096aa:	fba2 2303 	umull	r2, r3, r2, r3
 80096ae:	091b      	lsrs	r3, r3, #4
 80096b0:	009a      	lsls	r2, r3, #2
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f002 fa26 	bl	800bb08 <DMA_CalcBaseAndBitshift>
 80096bc:	4603      	mov	r3, r0
 80096be:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096c4:	f003 031f 	and.w	r3, r3, #31
 80096c8:	2201      	movs	r2, #1
 80096ca:	409a      	lsls	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	605a      	str	r2, [r3, #4]
 80096d0:	e008      	b.n	80096e4 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2240      	movs	r2, #64	; 0x40
 80096d6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2203      	movs	r2, #3
 80096dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e0ed      	b.n	80098c0 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a46      	ldr	r2, [pc, #280]	; (8009804 <HAL_DMA_Init+0x658>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d072      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a45      	ldr	r2, [pc, #276]	; (8009808 <HAL_DMA_Init+0x65c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d06d      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a43      	ldr	r2, [pc, #268]	; (800980c <HAL_DMA_Init+0x660>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d068      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a42      	ldr	r2, [pc, #264]	; (8009810 <HAL_DMA_Init+0x664>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d063      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a40      	ldr	r2, [pc, #256]	; (8009814 <HAL_DMA_Init+0x668>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d05e      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a3f      	ldr	r2, [pc, #252]	; (8009818 <HAL_DMA_Init+0x66c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d059      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a3d      	ldr	r2, [pc, #244]	; (800981c <HAL_DMA_Init+0x670>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d054      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a3c      	ldr	r2, [pc, #240]	; (8009820 <HAL_DMA_Init+0x674>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d04f      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a3a      	ldr	r2, [pc, #232]	; (8009824 <HAL_DMA_Init+0x678>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d04a      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a39      	ldr	r2, [pc, #228]	; (8009828 <HAL_DMA_Init+0x67c>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d045      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a37      	ldr	r2, [pc, #220]	; (800982c <HAL_DMA_Init+0x680>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d040      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a36      	ldr	r2, [pc, #216]	; (8009830 <HAL_DMA_Init+0x684>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d03b      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a34      	ldr	r2, [pc, #208]	; (8009834 <HAL_DMA_Init+0x688>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d036      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a33      	ldr	r2, [pc, #204]	; (8009838 <HAL_DMA_Init+0x68c>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d031      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a31      	ldr	r2, [pc, #196]	; (800983c <HAL_DMA_Init+0x690>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d02c      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a30      	ldr	r2, [pc, #192]	; (8009840 <HAL_DMA_Init+0x694>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d027      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a13      	ldr	r2, [pc, #76]	; (80097d8 <HAL_DMA_Init+0x62c>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d022      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a12      	ldr	r2, [pc, #72]	; (80097dc <HAL_DMA_Init+0x630>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d01d      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a10      	ldr	r2, [pc, #64]	; (80097e0 <HAL_DMA_Init+0x634>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d018      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a0f      	ldr	r2, [pc, #60]	; (80097e4 <HAL_DMA_Init+0x638>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d013      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a0d      	ldr	r2, [pc, #52]	; (80097e8 <HAL_DMA_Init+0x63c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d00e      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a0c      	ldr	r2, [pc, #48]	; (80097ec <HAL_DMA_Init+0x640>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d009      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a0a      	ldr	r2, [pc, #40]	; (80097f0 <HAL_DMA_Init+0x644>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d004      	beq.n	80097d4 <HAL_DMA_Init+0x628>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a09      	ldr	r2, [pc, #36]	; (80097f4 <HAL_DMA_Init+0x648>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d137      	bne.n	8009844 <HAL_DMA_Init+0x698>
 80097d4:	2301      	movs	r3, #1
 80097d6:	e036      	b.n	8009846 <HAL_DMA_Init+0x69a>
 80097d8:	58025408 	.word	0x58025408
 80097dc:	5802541c 	.word	0x5802541c
 80097e0:	58025430 	.word	0x58025430
 80097e4:	58025444 	.word	0x58025444
 80097e8:	58025458 	.word	0x58025458
 80097ec:	5802546c 	.word	0x5802546c
 80097f0:	58025480 	.word	0x58025480
 80097f4:	58025494 	.word	0x58025494
 80097f8:	fffe000f 	.word	0xfffe000f
 80097fc:	a7fdabf8 	.word	0xa7fdabf8
 8009800:	cccccccd 	.word	0xcccccccd
 8009804:	40020010 	.word	0x40020010
 8009808:	40020028 	.word	0x40020028
 800980c:	40020040 	.word	0x40020040
 8009810:	40020058 	.word	0x40020058
 8009814:	40020070 	.word	0x40020070
 8009818:	40020088 	.word	0x40020088
 800981c:	400200a0 	.word	0x400200a0
 8009820:	400200b8 	.word	0x400200b8
 8009824:	40020410 	.word	0x40020410
 8009828:	40020428 	.word	0x40020428
 800982c:	40020440 	.word	0x40020440
 8009830:	40020458 	.word	0x40020458
 8009834:	40020470 	.word	0x40020470
 8009838:	40020488 	.word	0x40020488
 800983c:	400204a0 	.word	0x400204a0
 8009840:	400204b8 	.word	0x400204b8
 8009844:	2300      	movs	r3, #0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d032      	beq.n	80098b0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f002 fa8a 	bl	800bd64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	2b80      	cmp	r3, #128	; 0x80
 8009856:	d102      	bne.n	800985e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685a      	ldr	r2, [r3, #4]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009866:	b2d2      	uxtb	r2, r2
 8009868:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009872:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d010      	beq.n	800989e <HAL_DMA_Init+0x6f2>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	2b08      	cmp	r3, #8
 8009882:	d80c      	bhi.n	800989e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f002 fb07 	bl	800be98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800989a:	605a      	str	r2, [r3, #4]
 800989c:	e008      	b.n	80098b0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
 80098d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e226      	b.n	8009d32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d101      	bne.n	80098f2 <HAL_DMA_Start_IT+0x2a>
 80098ee:	2302      	movs	r3, #2
 80098f0:	e21f      	b.n	8009d32 <HAL_DMA_Start_IT+0x46a>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b01      	cmp	r3, #1
 8009904:	f040 820a 	bne.w	8009d1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2202      	movs	r2, #2
 800990c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a68      	ldr	r2, [pc, #416]	; (8009abc <HAL_DMA_Start_IT+0x1f4>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d04a      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a66      	ldr	r2, [pc, #408]	; (8009ac0 <HAL_DMA_Start_IT+0x1f8>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d045      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a65      	ldr	r2, [pc, #404]	; (8009ac4 <HAL_DMA_Start_IT+0x1fc>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d040      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a63      	ldr	r2, [pc, #396]	; (8009ac8 <HAL_DMA_Start_IT+0x200>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d03b      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a62      	ldr	r2, [pc, #392]	; (8009acc <HAL_DMA_Start_IT+0x204>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d036      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a60      	ldr	r2, [pc, #384]	; (8009ad0 <HAL_DMA_Start_IT+0x208>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d031      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a5f      	ldr	r2, [pc, #380]	; (8009ad4 <HAL_DMA_Start_IT+0x20c>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d02c      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a5d      	ldr	r2, [pc, #372]	; (8009ad8 <HAL_DMA_Start_IT+0x210>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d027      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a5c      	ldr	r2, [pc, #368]	; (8009adc <HAL_DMA_Start_IT+0x214>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d022      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a5a      	ldr	r2, [pc, #360]	; (8009ae0 <HAL_DMA_Start_IT+0x218>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d01d      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a59      	ldr	r2, [pc, #356]	; (8009ae4 <HAL_DMA_Start_IT+0x21c>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d018      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a57      	ldr	r2, [pc, #348]	; (8009ae8 <HAL_DMA_Start_IT+0x220>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d013      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a56      	ldr	r2, [pc, #344]	; (8009aec <HAL_DMA_Start_IT+0x224>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d00e      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a54      	ldr	r2, [pc, #336]	; (8009af0 <HAL_DMA_Start_IT+0x228>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d009      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a53      	ldr	r2, [pc, #332]	; (8009af4 <HAL_DMA_Start_IT+0x22c>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d004      	beq.n	80099b6 <HAL_DMA_Start_IT+0xee>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a51      	ldr	r2, [pc, #324]	; (8009af8 <HAL_DMA_Start_IT+0x230>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d108      	bne.n	80099c8 <HAL_DMA_Start_IT+0x100>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f022 0201 	bic.w	r2, r2, #1
 80099c4:	601a      	str	r2, [r3, #0]
 80099c6:	e007      	b.n	80099d8 <HAL_DMA_Start_IT+0x110>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 0201 	bic.w	r2, r2, #1
 80099d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	68b9      	ldr	r1, [r7, #8]
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f001 feae 	bl	800b740 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a34      	ldr	r2, [pc, #208]	; (8009abc <HAL_DMA_Start_IT+0x1f4>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d04a      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a33      	ldr	r2, [pc, #204]	; (8009ac0 <HAL_DMA_Start_IT+0x1f8>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d045      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a31      	ldr	r2, [pc, #196]	; (8009ac4 <HAL_DMA_Start_IT+0x1fc>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d040      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a30      	ldr	r2, [pc, #192]	; (8009ac8 <HAL_DMA_Start_IT+0x200>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d03b      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a2e      	ldr	r2, [pc, #184]	; (8009acc <HAL_DMA_Start_IT+0x204>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d036      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a2d      	ldr	r2, [pc, #180]	; (8009ad0 <HAL_DMA_Start_IT+0x208>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d031      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a2b      	ldr	r2, [pc, #172]	; (8009ad4 <HAL_DMA_Start_IT+0x20c>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d02c      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a2a      	ldr	r2, [pc, #168]	; (8009ad8 <HAL_DMA_Start_IT+0x210>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d027      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a28      	ldr	r2, [pc, #160]	; (8009adc <HAL_DMA_Start_IT+0x214>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d022      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a27      	ldr	r2, [pc, #156]	; (8009ae0 <HAL_DMA_Start_IT+0x218>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d01d      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a25      	ldr	r2, [pc, #148]	; (8009ae4 <HAL_DMA_Start_IT+0x21c>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d018      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a24      	ldr	r2, [pc, #144]	; (8009ae8 <HAL_DMA_Start_IT+0x220>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d013      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a22      	ldr	r2, [pc, #136]	; (8009aec <HAL_DMA_Start_IT+0x224>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d00e      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a21      	ldr	r2, [pc, #132]	; (8009af0 <HAL_DMA_Start_IT+0x228>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d009      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a1f      	ldr	r2, [pc, #124]	; (8009af4 <HAL_DMA_Start_IT+0x22c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d004      	beq.n	8009a84 <HAL_DMA_Start_IT+0x1bc>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a1e      	ldr	r2, [pc, #120]	; (8009af8 <HAL_DMA_Start_IT+0x230>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d101      	bne.n	8009a88 <HAL_DMA_Start_IT+0x1c0>
 8009a84:	2301      	movs	r3, #1
 8009a86:	e000      	b.n	8009a8a <HAL_DMA_Start_IT+0x1c2>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d036      	beq.n	8009afc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f023 021e 	bic.w	r2, r3, #30
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f042 0216 	orr.w	r2, r2, #22
 8009aa0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d03e      	beq.n	8009b28 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f042 0208 	orr.w	r2, r2, #8
 8009ab8:	601a      	str	r2, [r3, #0]
 8009aba:	e035      	b.n	8009b28 <HAL_DMA_Start_IT+0x260>
 8009abc:	40020010 	.word	0x40020010
 8009ac0:	40020028 	.word	0x40020028
 8009ac4:	40020040 	.word	0x40020040
 8009ac8:	40020058 	.word	0x40020058
 8009acc:	40020070 	.word	0x40020070
 8009ad0:	40020088 	.word	0x40020088
 8009ad4:	400200a0 	.word	0x400200a0
 8009ad8:	400200b8 	.word	0x400200b8
 8009adc:	40020410 	.word	0x40020410
 8009ae0:	40020428 	.word	0x40020428
 8009ae4:	40020440 	.word	0x40020440
 8009ae8:	40020458 	.word	0x40020458
 8009aec:	40020470 	.word	0x40020470
 8009af0:	40020488 	.word	0x40020488
 8009af4:	400204a0 	.word	0x400204a0
 8009af8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f023 020e 	bic.w	r2, r3, #14
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f042 020a 	orr.w	r2, r2, #10
 8009b0e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d007      	beq.n	8009b28 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f042 0204 	orr.w	r2, r2, #4
 8009b26:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a83      	ldr	r2, [pc, #524]	; (8009d3c <HAL_DMA_Start_IT+0x474>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d072      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a82      	ldr	r2, [pc, #520]	; (8009d40 <HAL_DMA_Start_IT+0x478>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d06d      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a80      	ldr	r2, [pc, #512]	; (8009d44 <HAL_DMA_Start_IT+0x47c>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d068      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a7f      	ldr	r2, [pc, #508]	; (8009d48 <HAL_DMA_Start_IT+0x480>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d063      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a7d      	ldr	r2, [pc, #500]	; (8009d4c <HAL_DMA_Start_IT+0x484>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d05e      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a7c      	ldr	r2, [pc, #496]	; (8009d50 <HAL_DMA_Start_IT+0x488>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d059      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a7a      	ldr	r2, [pc, #488]	; (8009d54 <HAL_DMA_Start_IT+0x48c>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d054      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a79      	ldr	r2, [pc, #484]	; (8009d58 <HAL_DMA_Start_IT+0x490>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d04f      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a77      	ldr	r2, [pc, #476]	; (8009d5c <HAL_DMA_Start_IT+0x494>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d04a      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a76      	ldr	r2, [pc, #472]	; (8009d60 <HAL_DMA_Start_IT+0x498>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d045      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a74      	ldr	r2, [pc, #464]	; (8009d64 <HAL_DMA_Start_IT+0x49c>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d040      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a73      	ldr	r2, [pc, #460]	; (8009d68 <HAL_DMA_Start_IT+0x4a0>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d03b      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a71      	ldr	r2, [pc, #452]	; (8009d6c <HAL_DMA_Start_IT+0x4a4>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d036      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a70      	ldr	r2, [pc, #448]	; (8009d70 <HAL_DMA_Start_IT+0x4a8>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d031      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a6e      	ldr	r2, [pc, #440]	; (8009d74 <HAL_DMA_Start_IT+0x4ac>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d02c      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a6d      	ldr	r2, [pc, #436]	; (8009d78 <HAL_DMA_Start_IT+0x4b0>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d027      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a6b      	ldr	r2, [pc, #428]	; (8009d7c <HAL_DMA_Start_IT+0x4b4>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d022      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a6a      	ldr	r2, [pc, #424]	; (8009d80 <HAL_DMA_Start_IT+0x4b8>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d01d      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a68      	ldr	r2, [pc, #416]	; (8009d84 <HAL_DMA_Start_IT+0x4bc>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d018      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a67      	ldr	r2, [pc, #412]	; (8009d88 <HAL_DMA_Start_IT+0x4c0>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d013      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a65      	ldr	r2, [pc, #404]	; (8009d8c <HAL_DMA_Start_IT+0x4c4>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d00e      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a64      	ldr	r2, [pc, #400]	; (8009d90 <HAL_DMA_Start_IT+0x4c8>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d009      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a62      	ldr	r2, [pc, #392]	; (8009d94 <HAL_DMA_Start_IT+0x4cc>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d004      	beq.n	8009c18 <HAL_DMA_Start_IT+0x350>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a61      	ldr	r2, [pc, #388]	; (8009d98 <HAL_DMA_Start_IT+0x4d0>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d101      	bne.n	8009c1c <HAL_DMA_Start_IT+0x354>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e000      	b.n	8009c1e <HAL_DMA_Start_IT+0x356>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d01a      	beq.n	8009c58 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d007      	beq.n	8009c40 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c3e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d007      	beq.n	8009c58 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c56:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a37      	ldr	r2, [pc, #220]	; (8009d3c <HAL_DMA_Start_IT+0x474>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d04a      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a36      	ldr	r2, [pc, #216]	; (8009d40 <HAL_DMA_Start_IT+0x478>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d045      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a34      	ldr	r2, [pc, #208]	; (8009d44 <HAL_DMA_Start_IT+0x47c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d040      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a33      	ldr	r2, [pc, #204]	; (8009d48 <HAL_DMA_Start_IT+0x480>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d03b      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a31      	ldr	r2, [pc, #196]	; (8009d4c <HAL_DMA_Start_IT+0x484>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d036      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a30      	ldr	r2, [pc, #192]	; (8009d50 <HAL_DMA_Start_IT+0x488>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d031      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a2e      	ldr	r2, [pc, #184]	; (8009d54 <HAL_DMA_Start_IT+0x48c>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d02c      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a2d      	ldr	r2, [pc, #180]	; (8009d58 <HAL_DMA_Start_IT+0x490>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d027      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a2b      	ldr	r2, [pc, #172]	; (8009d5c <HAL_DMA_Start_IT+0x494>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d022      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a2a      	ldr	r2, [pc, #168]	; (8009d60 <HAL_DMA_Start_IT+0x498>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d01d      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a28      	ldr	r2, [pc, #160]	; (8009d64 <HAL_DMA_Start_IT+0x49c>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d018      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a27      	ldr	r2, [pc, #156]	; (8009d68 <HAL_DMA_Start_IT+0x4a0>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d013      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a25      	ldr	r2, [pc, #148]	; (8009d6c <HAL_DMA_Start_IT+0x4a4>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d00e      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a24      	ldr	r2, [pc, #144]	; (8009d70 <HAL_DMA_Start_IT+0x4a8>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d009      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a22      	ldr	r2, [pc, #136]	; (8009d74 <HAL_DMA_Start_IT+0x4ac>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d004      	beq.n	8009cf8 <HAL_DMA_Start_IT+0x430>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a21      	ldr	r2, [pc, #132]	; (8009d78 <HAL_DMA_Start_IT+0x4b0>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d108      	bne.n	8009d0a <HAL_DMA_Start_IT+0x442>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f042 0201 	orr.w	r2, r2, #1
 8009d06:	601a      	str	r2, [r3, #0]
 8009d08:	e012      	b.n	8009d30 <HAL_DMA_Start_IT+0x468>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f042 0201 	orr.w	r2, r2, #1
 8009d18:	601a      	str	r2, [r3, #0]
 8009d1a:	e009      	b.n	8009d30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3718      	adds	r7, #24
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	40020010 	.word	0x40020010
 8009d40:	40020028 	.word	0x40020028
 8009d44:	40020040 	.word	0x40020040
 8009d48:	40020058 	.word	0x40020058
 8009d4c:	40020070 	.word	0x40020070
 8009d50:	40020088 	.word	0x40020088
 8009d54:	400200a0 	.word	0x400200a0
 8009d58:	400200b8 	.word	0x400200b8
 8009d5c:	40020410 	.word	0x40020410
 8009d60:	40020428 	.word	0x40020428
 8009d64:	40020440 	.word	0x40020440
 8009d68:	40020458 	.word	0x40020458
 8009d6c:	40020470 	.word	0x40020470
 8009d70:	40020488 	.word	0x40020488
 8009d74:	400204a0 	.word	0x400204a0
 8009d78:	400204b8 	.word	0x400204b8
 8009d7c:	58025408 	.word	0x58025408
 8009d80:	5802541c 	.word	0x5802541c
 8009d84:	58025430 	.word	0x58025430
 8009d88:	58025444 	.word	0x58025444
 8009d8c:	58025458 	.word	0x58025458
 8009d90:	5802546c 	.word	0x5802546c
 8009d94:	58025480 	.word	0x58025480
 8009d98:	58025494 	.word	0x58025494

08009d9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009da4:	f7fc ffba 	bl	8006d1c <HAL_GetTick>
 8009da8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e2dc      	b.n	800a36e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d008      	beq.n	8009dd2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2280      	movs	r2, #128	; 0x80
 8009dc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e2cd      	b.n	800a36e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a76      	ldr	r2, [pc, #472]	; (8009fb0 <HAL_DMA_Abort+0x214>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d04a      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a74      	ldr	r2, [pc, #464]	; (8009fb4 <HAL_DMA_Abort+0x218>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d045      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a73      	ldr	r2, [pc, #460]	; (8009fb8 <HAL_DMA_Abort+0x21c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d040      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a71      	ldr	r2, [pc, #452]	; (8009fbc <HAL_DMA_Abort+0x220>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d03b      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a70      	ldr	r2, [pc, #448]	; (8009fc0 <HAL_DMA_Abort+0x224>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d036      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a6e      	ldr	r2, [pc, #440]	; (8009fc4 <HAL_DMA_Abort+0x228>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d031      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a6d      	ldr	r2, [pc, #436]	; (8009fc8 <HAL_DMA_Abort+0x22c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d02c      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a6b      	ldr	r2, [pc, #428]	; (8009fcc <HAL_DMA_Abort+0x230>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d027      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a6a      	ldr	r2, [pc, #424]	; (8009fd0 <HAL_DMA_Abort+0x234>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d022      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a68      	ldr	r2, [pc, #416]	; (8009fd4 <HAL_DMA_Abort+0x238>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d01d      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a67      	ldr	r2, [pc, #412]	; (8009fd8 <HAL_DMA_Abort+0x23c>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d018      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a65      	ldr	r2, [pc, #404]	; (8009fdc <HAL_DMA_Abort+0x240>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d013      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a64      	ldr	r2, [pc, #400]	; (8009fe0 <HAL_DMA_Abort+0x244>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d00e      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a62      	ldr	r2, [pc, #392]	; (8009fe4 <HAL_DMA_Abort+0x248>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d009      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a61      	ldr	r2, [pc, #388]	; (8009fe8 <HAL_DMA_Abort+0x24c>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d004      	beq.n	8009e72 <HAL_DMA_Abort+0xd6>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a5f      	ldr	r2, [pc, #380]	; (8009fec <HAL_DMA_Abort+0x250>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d101      	bne.n	8009e76 <HAL_DMA_Abort+0xda>
 8009e72:	2301      	movs	r3, #1
 8009e74:	e000      	b.n	8009e78 <HAL_DMA_Abort+0xdc>
 8009e76:	2300      	movs	r3, #0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d013      	beq.n	8009ea4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f022 021e 	bic.w	r2, r2, #30
 8009e8a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	695a      	ldr	r2, [r3, #20]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e9a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	617b      	str	r3, [r7, #20]
 8009ea2:	e00a      	b.n	8009eba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f022 020e 	bic.w	r2, r2, #14
 8009eb2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a3c      	ldr	r2, [pc, #240]	; (8009fb0 <HAL_DMA_Abort+0x214>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d072      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a3a      	ldr	r2, [pc, #232]	; (8009fb4 <HAL_DMA_Abort+0x218>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d06d      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a39      	ldr	r2, [pc, #228]	; (8009fb8 <HAL_DMA_Abort+0x21c>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d068      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a37      	ldr	r2, [pc, #220]	; (8009fbc <HAL_DMA_Abort+0x220>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d063      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a36      	ldr	r2, [pc, #216]	; (8009fc0 <HAL_DMA_Abort+0x224>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d05e      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a34      	ldr	r2, [pc, #208]	; (8009fc4 <HAL_DMA_Abort+0x228>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d059      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a33      	ldr	r2, [pc, #204]	; (8009fc8 <HAL_DMA_Abort+0x22c>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d054      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a31      	ldr	r2, [pc, #196]	; (8009fcc <HAL_DMA_Abort+0x230>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d04f      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a30      	ldr	r2, [pc, #192]	; (8009fd0 <HAL_DMA_Abort+0x234>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d04a      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a2e      	ldr	r2, [pc, #184]	; (8009fd4 <HAL_DMA_Abort+0x238>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d045      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a2d      	ldr	r2, [pc, #180]	; (8009fd8 <HAL_DMA_Abort+0x23c>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d040      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a2b      	ldr	r2, [pc, #172]	; (8009fdc <HAL_DMA_Abort+0x240>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d03b      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a2a      	ldr	r2, [pc, #168]	; (8009fe0 <HAL_DMA_Abort+0x244>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d036      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a28      	ldr	r2, [pc, #160]	; (8009fe4 <HAL_DMA_Abort+0x248>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d031      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a27      	ldr	r2, [pc, #156]	; (8009fe8 <HAL_DMA_Abort+0x24c>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d02c      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a25      	ldr	r2, [pc, #148]	; (8009fec <HAL_DMA_Abort+0x250>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d027      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a24      	ldr	r2, [pc, #144]	; (8009ff0 <HAL_DMA_Abort+0x254>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d022      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a22      	ldr	r2, [pc, #136]	; (8009ff4 <HAL_DMA_Abort+0x258>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d01d      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a21      	ldr	r2, [pc, #132]	; (8009ff8 <HAL_DMA_Abort+0x25c>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d018      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a1f      	ldr	r2, [pc, #124]	; (8009ffc <HAL_DMA_Abort+0x260>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d013      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a1e      	ldr	r2, [pc, #120]	; (800a000 <HAL_DMA_Abort+0x264>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d00e      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a1c      	ldr	r2, [pc, #112]	; (800a004 <HAL_DMA_Abort+0x268>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d009      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a1b      	ldr	r2, [pc, #108]	; (800a008 <HAL_DMA_Abort+0x26c>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d004      	beq.n	8009faa <HAL_DMA_Abort+0x20e>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a19      	ldr	r2, [pc, #100]	; (800a00c <HAL_DMA_Abort+0x270>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d132      	bne.n	800a010 <HAL_DMA_Abort+0x274>
 8009faa:	2301      	movs	r3, #1
 8009fac:	e031      	b.n	800a012 <HAL_DMA_Abort+0x276>
 8009fae:	bf00      	nop
 8009fb0:	40020010 	.word	0x40020010
 8009fb4:	40020028 	.word	0x40020028
 8009fb8:	40020040 	.word	0x40020040
 8009fbc:	40020058 	.word	0x40020058
 8009fc0:	40020070 	.word	0x40020070
 8009fc4:	40020088 	.word	0x40020088
 8009fc8:	400200a0 	.word	0x400200a0
 8009fcc:	400200b8 	.word	0x400200b8
 8009fd0:	40020410 	.word	0x40020410
 8009fd4:	40020428 	.word	0x40020428
 8009fd8:	40020440 	.word	0x40020440
 8009fdc:	40020458 	.word	0x40020458
 8009fe0:	40020470 	.word	0x40020470
 8009fe4:	40020488 	.word	0x40020488
 8009fe8:	400204a0 	.word	0x400204a0
 8009fec:	400204b8 	.word	0x400204b8
 8009ff0:	58025408 	.word	0x58025408
 8009ff4:	5802541c 	.word	0x5802541c
 8009ff8:	58025430 	.word	0x58025430
 8009ffc:	58025444 	.word	0x58025444
 800a000:	58025458 	.word	0x58025458
 800a004:	5802546c 	.word	0x5802546c
 800a008:	58025480 	.word	0x58025480
 800a00c:	58025494 	.word	0x58025494
 800a010:	2300      	movs	r3, #0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d007      	beq.n	800a026 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a024:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a6d      	ldr	r2, [pc, #436]	; (800a1e0 <HAL_DMA_Abort+0x444>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d04a      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a6b      	ldr	r2, [pc, #428]	; (800a1e4 <HAL_DMA_Abort+0x448>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d045      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a6a      	ldr	r2, [pc, #424]	; (800a1e8 <HAL_DMA_Abort+0x44c>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d040      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a68      	ldr	r2, [pc, #416]	; (800a1ec <HAL_DMA_Abort+0x450>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d03b      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a67      	ldr	r2, [pc, #412]	; (800a1f0 <HAL_DMA_Abort+0x454>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d036      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a65      	ldr	r2, [pc, #404]	; (800a1f4 <HAL_DMA_Abort+0x458>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d031      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a64      	ldr	r2, [pc, #400]	; (800a1f8 <HAL_DMA_Abort+0x45c>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d02c      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a62      	ldr	r2, [pc, #392]	; (800a1fc <HAL_DMA_Abort+0x460>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d027      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a61      	ldr	r2, [pc, #388]	; (800a200 <HAL_DMA_Abort+0x464>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d022      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a5f      	ldr	r2, [pc, #380]	; (800a204 <HAL_DMA_Abort+0x468>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d01d      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a5e      	ldr	r2, [pc, #376]	; (800a208 <HAL_DMA_Abort+0x46c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d018      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a5c      	ldr	r2, [pc, #368]	; (800a20c <HAL_DMA_Abort+0x470>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d013      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a5b      	ldr	r2, [pc, #364]	; (800a210 <HAL_DMA_Abort+0x474>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d00e      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a59      	ldr	r2, [pc, #356]	; (800a214 <HAL_DMA_Abort+0x478>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d009      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a58      	ldr	r2, [pc, #352]	; (800a218 <HAL_DMA_Abort+0x47c>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d004      	beq.n	800a0c6 <HAL_DMA_Abort+0x32a>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a56      	ldr	r2, [pc, #344]	; (800a21c <HAL_DMA_Abort+0x480>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d108      	bne.n	800a0d8 <HAL_DMA_Abort+0x33c>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f022 0201 	bic.w	r2, r2, #1
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	e007      	b.n	800a0e8 <HAL_DMA_Abort+0x34c>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f022 0201 	bic.w	r2, r2, #1
 800a0e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a0e8:	e013      	b.n	800a112 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a0ea:	f7fc fe17 	bl	8006d1c <HAL_GetTick>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	2b05      	cmp	r3, #5
 800a0f6:	d90c      	bls.n	800a112 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2203      	movs	r2, #3
 800a102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e12d      	b.n	800a36e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0301 	and.w	r3, r3, #1
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1e5      	bne.n	800a0ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a2f      	ldr	r2, [pc, #188]	; (800a1e0 <HAL_DMA_Abort+0x444>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d04a      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a2d      	ldr	r2, [pc, #180]	; (800a1e4 <HAL_DMA_Abort+0x448>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d045      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a2c      	ldr	r2, [pc, #176]	; (800a1e8 <HAL_DMA_Abort+0x44c>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d040      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a2a      	ldr	r2, [pc, #168]	; (800a1ec <HAL_DMA_Abort+0x450>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d03b      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a29      	ldr	r2, [pc, #164]	; (800a1f0 <HAL_DMA_Abort+0x454>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d036      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a27      	ldr	r2, [pc, #156]	; (800a1f4 <HAL_DMA_Abort+0x458>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d031      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a26      	ldr	r2, [pc, #152]	; (800a1f8 <HAL_DMA_Abort+0x45c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d02c      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a24      	ldr	r2, [pc, #144]	; (800a1fc <HAL_DMA_Abort+0x460>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d027      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a23      	ldr	r2, [pc, #140]	; (800a200 <HAL_DMA_Abort+0x464>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d022      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a21      	ldr	r2, [pc, #132]	; (800a204 <HAL_DMA_Abort+0x468>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d01d      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a20      	ldr	r2, [pc, #128]	; (800a208 <HAL_DMA_Abort+0x46c>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d018      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a1e      	ldr	r2, [pc, #120]	; (800a20c <HAL_DMA_Abort+0x470>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d013      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a1d      	ldr	r2, [pc, #116]	; (800a210 <HAL_DMA_Abort+0x474>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d00e      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a1b      	ldr	r2, [pc, #108]	; (800a214 <HAL_DMA_Abort+0x478>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d009      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a1a      	ldr	r2, [pc, #104]	; (800a218 <HAL_DMA_Abort+0x47c>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d004      	beq.n	800a1be <HAL_DMA_Abort+0x422>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a18      	ldr	r2, [pc, #96]	; (800a21c <HAL_DMA_Abort+0x480>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d101      	bne.n	800a1c2 <HAL_DMA_Abort+0x426>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e000      	b.n	800a1c4 <HAL_DMA_Abort+0x428>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d02b      	beq.n	800a220 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1d2:	f003 031f 	and.w	r3, r3, #31
 800a1d6:	223f      	movs	r2, #63	; 0x3f
 800a1d8:	409a      	lsls	r2, r3
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	609a      	str	r2, [r3, #8]
 800a1de:	e02a      	b.n	800a236 <HAL_DMA_Abort+0x49a>
 800a1e0:	40020010 	.word	0x40020010
 800a1e4:	40020028 	.word	0x40020028
 800a1e8:	40020040 	.word	0x40020040
 800a1ec:	40020058 	.word	0x40020058
 800a1f0:	40020070 	.word	0x40020070
 800a1f4:	40020088 	.word	0x40020088
 800a1f8:	400200a0 	.word	0x400200a0
 800a1fc:	400200b8 	.word	0x400200b8
 800a200:	40020410 	.word	0x40020410
 800a204:	40020428 	.word	0x40020428
 800a208:	40020440 	.word	0x40020440
 800a20c:	40020458 	.word	0x40020458
 800a210:	40020470 	.word	0x40020470
 800a214:	40020488 	.word	0x40020488
 800a218:	400204a0 	.word	0x400204a0
 800a21c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a224:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a22a:	f003 031f 	and.w	r3, r3, #31
 800a22e:	2201      	movs	r2, #1
 800a230:	409a      	lsls	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a4f      	ldr	r2, [pc, #316]	; (800a378 <HAL_DMA_Abort+0x5dc>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d072      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a4d      	ldr	r2, [pc, #308]	; (800a37c <HAL_DMA_Abort+0x5e0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d06d      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a4c      	ldr	r2, [pc, #304]	; (800a380 <HAL_DMA_Abort+0x5e4>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d068      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a4a      	ldr	r2, [pc, #296]	; (800a384 <HAL_DMA_Abort+0x5e8>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d063      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a49      	ldr	r2, [pc, #292]	; (800a388 <HAL_DMA_Abort+0x5ec>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d05e      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a47      	ldr	r2, [pc, #284]	; (800a38c <HAL_DMA_Abort+0x5f0>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d059      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a46      	ldr	r2, [pc, #280]	; (800a390 <HAL_DMA_Abort+0x5f4>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d054      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a44      	ldr	r2, [pc, #272]	; (800a394 <HAL_DMA_Abort+0x5f8>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d04f      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a43      	ldr	r2, [pc, #268]	; (800a398 <HAL_DMA_Abort+0x5fc>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d04a      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a41      	ldr	r2, [pc, #260]	; (800a39c <HAL_DMA_Abort+0x600>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d045      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a40      	ldr	r2, [pc, #256]	; (800a3a0 <HAL_DMA_Abort+0x604>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d040      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a3e      	ldr	r2, [pc, #248]	; (800a3a4 <HAL_DMA_Abort+0x608>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d03b      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a3d      	ldr	r2, [pc, #244]	; (800a3a8 <HAL_DMA_Abort+0x60c>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d036      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a3b      	ldr	r2, [pc, #236]	; (800a3ac <HAL_DMA_Abort+0x610>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d031      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a3a      	ldr	r2, [pc, #232]	; (800a3b0 <HAL_DMA_Abort+0x614>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d02c      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a38      	ldr	r2, [pc, #224]	; (800a3b4 <HAL_DMA_Abort+0x618>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d027      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a37      	ldr	r2, [pc, #220]	; (800a3b8 <HAL_DMA_Abort+0x61c>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d022      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a35      	ldr	r2, [pc, #212]	; (800a3bc <HAL_DMA_Abort+0x620>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d01d      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a34      	ldr	r2, [pc, #208]	; (800a3c0 <HAL_DMA_Abort+0x624>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d018      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a32      	ldr	r2, [pc, #200]	; (800a3c4 <HAL_DMA_Abort+0x628>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d013      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a31      	ldr	r2, [pc, #196]	; (800a3c8 <HAL_DMA_Abort+0x62c>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d00e      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a2f      	ldr	r2, [pc, #188]	; (800a3cc <HAL_DMA_Abort+0x630>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d009      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a2e      	ldr	r2, [pc, #184]	; (800a3d0 <HAL_DMA_Abort+0x634>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d004      	beq.n	800a326 <HAL_DMA_Abort+0x58a>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a2c      	ldr	r2, [pc, #176]	; (800a3d4 <HAL_DMA_Abort+0x638>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d101      	bne.n	800a32a <HAL_DMA_Abort+0x58e>
 800a326:	2301      	movs	r3, #1
 800a328:	e000      	b.n	800a32c <HAL_DMA_Abort+0x590>
 800a32a:	2300      	movs	r3, #0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d015      	beq.n	800a35c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a338:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00c      	beq.n	800a35c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a34c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a350:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a35a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	40020010 	.word	0x40020010
 800a37c:	40020028 	.word	0x40020028
 800a380:	40020040 	.word	0x40020040
 800a384:	40020058 	.word	0x40020058
 800a388:	40020070 	.word	0x40020070
 800a38c:	40020088 	.word	0x40020088
 800a390:	400200a0 	.word	0x400200a0
 800a394:	400200b8 	.word	0x400200b8
 800a398:	40020410 	.word	0x40020410
 800a39c:	40020428 	.word	0x40020428
 800a3a0:	40020440 	.word	0x40020440
 800a3a4:	40020458 	.word	0x40020458
 800a3a8:	40020470 	.word	0x40020470
 800a3ac:	40020488 	.word	0x40020488
 800a3b0:	400204a0 	.word	0x400204a0
 800a3b4:	400204b8 	.word	0x400204b8
 800a3b8:	58025408 	.word	0x58025408
 800a3bc:	5802541c 	.word	0x5802541c
 800a3c0:	58025430 	.word	0x58025430
 800a3c4:	58025444 	.word	0x58025444
 800a3c8:	58025458 	.word	0x58025458
 800a3cc:	5802546c 	.word	0x5802546c
 800a3d0:	58025480 	.word	0x58025480
 800a3d4:	58025494 	.word	0x58025494

0800a3d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e237      	b.n	800a85a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d004      	beq.n	800a400 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2280      	movs	r2, #128	; 0x80
 800a3fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e22c      	b.n	800a85a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a5c      	ldr	r2, [pc, #368]	; (800a578 <HAL_DMA_Abort_IT+0x1a0>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d04a      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a5b      	ldr	r2, [pc, #364]	; (800a57c <HAL_DMA_Abort_IT+0x1a4>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d045      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a59      	ldr	r2, [pc, #356]	; (800a580 <HAL_DMA_Abort_IT+0x1a8>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d040      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a58      	ldr	r2, [pc, #352]	; (800a584 <HAL_DMA_Abort_IT+0x1ac>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d03b      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a56      	ldr	r2, [pc, #344]	; (800a588 <HAL_DMA_Abort_IT+0x1b0>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d036      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a55      	ldr	r2, [pc, #340]	; (800a58c <HAL_DMA_Abort_IT+0x1b4>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d031      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a53      	ldr	r2, [pc, #332]	; (800a590 <HAL_DMA_Abort_IT+0x1b8>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d02c      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a52      	ldr	r2, [pc, #328]	; (800a594 <HAL_DMA_Abort_IT+0x1bc>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d027      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a50      	ldr	r2, [pc, #320]	; (800a598 <HAL_DMA_Abort_IT+0x1c0>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d022      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a4f      	ldr	r2, [pc, #316]	; (800a59c <HAL_DMA_Abort_IT+0x1c4>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d01d      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a4d      	ldr	r2, [pc, #308]	; (800a5a0 <HAL_DMA_Abort_IT+0x1c8>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d018      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a4c      	ldr	r2, [pc, #304]	; (800a5a4 <HAL_DMA_Abort_IT+0x1cc>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d013      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a4a      	ldr	r2, [pc, #296]	; (800a5a8 <HAL_DMA_Abort_IT+0x1d0>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d00e      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a49      	ldr	r2, [pc, #292]	; (800a5ac <HAL_DMA_Abort_IT+0x1d4>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d009      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a47      	ldr	r2, [pc, #284]	; (800a5b0 <HAL_DMA_Abort_IT+0x1d8>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d004      	beq.n	800a4a0 <HAL_DMA_Abort_IT+0xc8>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a46      	ldr	r2, [pc, #280]	; (800a5b4 <HAL_DMA_Abort_IT+0x1dc>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d101      	bne.n	800a4a4 <HAL_DMA_Abort_IT+0xcc>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e000      	b.n	800a4a6 <HAL_DMA_Abort_IT+0xce>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f000 8086 	beq.w	800a5b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2204      	movs	r2, #4
 800a4b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a2f      	ldr	r2, [pc, #188]	; (800a578 <HAL_DMA_Abort_IT+0x1a0>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d04a      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a2e      	ldr	r2, [pc, #184]	; (800a57c <HAL_DMA_Abort_IT+0x1a4>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d045      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a2c      	ldr	r2, [pc, #176]	; (800a580 <HAL_DMA_Abort_IT+0x1a8>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d040      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a2b      	ldr	r2, [pc, #172]	; (800a584 <HAL_DMA_Abort_IT+0x1ac>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d03b      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a29      	ldr	r2, [pc, #164]	; (800a588 <HAL_DMA_Abort_IT+0x1b0>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d036      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a28      	ldr	r2, [pc, #160]	; (800a58c <HAL_DMA_Abort_IT+0x1b4>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d031      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a26      	ldr	r2, [pc, #152]	; (800a590 <HAL_DMA_Abort_IT+0x1b8>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d02c      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a25      	ldr	r2, [pc, #148]	; (800a594 <HAL_DMA_Abort_IT+0x1bc>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d027      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a23      	ldr	r2, [pc, #140]	; (800a598 <HAL_DMA_Abort_IT+0x1c0>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d022      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a22      	ldr	r2, [pc, #136]	; (800a59c <HAL_DMA_Abort_IT+0x1c4>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d01d      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a20      	ldr	r2, [pc, #128]	; (800a5a0 <HAL_DMA_Abort_IT+0x1c8>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d018      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a1f      	ldr	r2, [pc, #124]	; (800a5a4 <HAL_DMA_Abort_IT+0x1cc>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d013      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a1d      	ldr	r2, [pc, #116]	; (800a5a8 <HAL_DMA_Abort_IT+0x1d0>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d00e      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a1c      	ldr	r2, [pc, #112]	; (800a5ac <HAL_DMA_Abort_IT+0x1d4>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d009      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a1a      	ldr	r2, [pc, #104]	; (800a5b0 <HAL_DMA_Abort_IT+0x1d8>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d004      	beq.n	800a554 <HAL_DMA_Abort_IT+0x17c>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a19      	ldr	r2, [pc, #100]	; (800a5b4 <HAL_DMA_Abort_IT+0x1dc>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d108      	bne.n	800a566 <HAL_DMA_Abort_IT+0x18e>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f022 0201 	bic.w	r2, r2, #1
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	e178      	b.n	800a858 <HAL_DMA_Abort_IT+0x480>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f022 0201 	bic.w	r2, r2, #1
 800a574:	601a      	str	r2, [r3, #0]
 800a576:	e16f      	b.n	800a858 <HAL_DMA_Abort_IT+0x480>
 800a578:	40020010 	.word	0x40020010
 800a57c:	40020028 	.word	0x40020028
 800a580:	40020040 	.word	0x40020040
 800a584:	40020058 	.word	0x40020058
 800a588:	40020070 	.word	0x40020070
 800a58c:	40020088 	.word	0x40020088
 800a590:	400200a0 	.word	0x400200a0
 800a594:	400200b8 	.word	0x400200b8
 800a598:	40020410 	.word	0x40020410
 800a59c:	40020428 	.word	0x40020428
 800a5a0:	40020440 	.word	0x40020440
 800a5a4:	40020458 	.word	0x40020458
 800a5a8:	40020470 	.word	0x40020470
 800a5ac:	40020488 	.word	0x40020488
 800a5b0:	400204a0 	.word	0x400204a0
 800a5b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f022 020e 	bic.w	r2, r2, #14
 800a5c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a6c      	ldr	r2, [pc, #432]	; (800a780 <HAL_DMA_Abort_IT+0x3a8>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d04a      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a6b      	ldr	r2, [pc, #428]	; (800a784 <HAL_DMA_Abort_IT+0x3ac>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d045      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a69      	ldr	r2, [pc, #420]	; (800a788 <HAL_DMA_Abort_IT+0x3b0>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d040      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a68      	ldr	r2, [pc, #416]	; (800a78c <HAL_DMA_Abort_IT+0x3b4>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d03b      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a66      	ldr	r2, [pc, #408]	; (800a790 <HAL_DMA_Abort_IT+0x3b8>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d036      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a65      	ldr	r2, [pc, #404]	; (800a794 <HAL_DMA_Abort_IT+0x3bc>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d031      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a63      	ldr	r2, [pc, #396]	; (800a798 <HAL_DMA_Abort_IT+0x3c0>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d02c      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a62      	ldr	r2, [pc, #392]	; (800a79c <HAL_DMA_Abort_IT+0x3c4>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d027      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a60      	ldr	r2, [pc, #384]	; (800a7a0 <HAL_DMA_Abort_IT+0x3c8>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d022      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a5f      	ldr	r2, [pc, #380]	; (800a7a4 <HAL_DMA_Abort_IT+0x3cc>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d01d      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a5d      	ldr	r2, [pc, #372]	; (800a7a8 <HAL_DMA_Abort_IT+0x3d0>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d018      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a5c      	ldr	r2, [pc, #368]	; (800a7ac <HAL_DMA_Abort_IT+0x3d4>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d013      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a5a      	ldr	r2, [pc, #360]	; (800a7b0 <HAL_DMA_Abort_IT+0x3d8>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d00e      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a59      	ldr	r2, [pc, #356]	; (800a7b4 <HAL_DMA_Abort_IT+0x3dc>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d009      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a57      	ldr	r2, [pc, #348]	; (800a7b8 <HAL_DMA_Abort_IT+0x3e0>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d004      	beq.n	800a668 <HAL_DMA_Abort_IT+0x290>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a56      	ldr	r2, [pc, #344]	; (800a7bc <HAL_DMA_Abort_IT+0x3e4>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d108      	bne.n	800a67a <HAL_DMA_Abort_IT+0x2a2>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0201 	bic.w	r2, r2, #1
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	e007      	b.n	800a68a <HAL_DMA_Abort_IT+0x2b2>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f022 0201 	bic.w	r2, r2, #1
 800a688:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a3c      	ldr	r2, [pc, #240]	; (800a780 <HAL_DMA_Abort_IT+0x3a8>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d072      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a3a      	ldr	r2, [pc, #232]	; (800a784 <HAL_DMA_Abort_IT+0x3ac>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d06d      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a39      	ldr	r2, [pc, #228]	; (800a788 <HAL_DMA_Abort_IT+0x3b0>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d068      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a37      	ldr	r2, [pc, #220]	; (800a78c <HAL_DMA_Abort_IT+0x3b4>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d063      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a36      	ldr	r2, [pc, #216]	; (800a790 <HAL_DMA_Abort_IT+0x3b8>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d05e      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a34      	ldr	r2, [pc, #208]	; (800a794 <HAL_DMA_Abort_IT+0x3bc>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d059      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a33      	ldr	r2, [pc, #204]	; (800a798 <HAL_DMA_Abort_IT+0x3c0>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d054      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a31      	ldr	r2, [pc, #196]	; (800a79c <HAL_DMA_Abort_IT+0x3c4>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d04f      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a30      	ldr	r2, [pc, #192]	; (800a7a0 <HAL_DMA_Abort_IT+0x3c8>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d04a      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a2e      	ldr	r2, [pc, #184]	; (800a7a4 <HAL_DMA_Abort_IT+0x3cc>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d045      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a2d      	ldr	r2, [pc, #180]	; (800a7a8 <HAL_DMA_Abort_IT+0x3d0>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d040      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a2b      	ldr	r2, [pc, #172]	; (800a7ac <HAL_DMA_Abort_IT+0x3d4>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d03b      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a2a      	ldr	r2, [pc, #168]	; (800a7b0 <HAL_DMA_Abort_IT+0x3d8>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d036      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a28      	ldr	r2, [pc, #160]	; (800a7b4 <HAL_DMA_Abort_IT+0x3dc>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d031      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a27      	ldr	r2, [pc, #156]	; (800a7b8 <HAL_DMA_Abort_IT+0x3e0>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d02c      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a25      	ldr	r2, [pc, #148]	; (800a7bc <HAL_DMA_Abort_IT+0x3e4>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d027      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a24      	ldr	r2, [pc, #144]	; (800a7c0 <HAL_DMA_Abort_IT+0x3e8>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d022      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a22      	ldr	r2, [pc, #136]	; (800a7c4 <HAL_DMA_Abort_IT+0x3ec>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d01d      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a21      	ldr	r2, [pc, #132]	; (800a7c8 <HAL_DMA_Abort_IT+0x3f0>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d018      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a1f      	ldr	r2, [pc, #124]	; (800a7cc <HAL_DMA_Abort_IT+0x3f4>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d013      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a1e      	ldr	r2, [pc, #120]	; (800a7d0 <HAL_DMA_Abort_IT+0x3f8>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d00e      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a1c      	ldr	r2, [pc, #112]	; (800a7d4 <HAL_DMA_Abort_IT+0x3fc>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d009      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a1b      	ldr	r2, [pc, #108]	; (800a7d8 <HAL_DMA_Abort_IT+0x400>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d004      	beq.n	800a77a <HAL_DMA_Abort_IT+0x3a2>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a19      	ldr	r2, [pc, #100]	; (800a7dc <HAL_DMA_Abort_IT+0x404>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d132      	bne.n	800a7e0 <HAL_DMA_Abort_IT+0x408>
 800a77a:	2301      	movs	r3, #1
 800a77c:	e031      	b.n	800a7e2 <HAL_DMA_Abort_IT+0x40a>
 800a77e:	bf00      	nop
 800a780:	40020010 	.word	0x40020010
 800a784:	40020028 	.word	0x40020028
 800a788:	40020040 	.word	0x40020040
 800a78c:	40020058 	.word	0x40020058
 800a790:	40020070 	.word	0x40020070
 800a794:	40020088 	.word	0x40020088
 800a798:	400200a0 	.word	0x400200a0
 800a79c:	400200b8 	.word	0x400200b8
 800a7a0:	40020410 	.word	0x40020410
 800a7a4:	40020428 	.word	0x40020428
 800a7a8:	40020440 	.word	0x40020440
 800a7ac:	40020458 	.word	0x40020458
 800a7b0:	40020470 	.word	0x40020470
 800a7b4:	40020488 	.word	0x40020488
 800a7b8:	400204a0 	.word	0x400204a0
 800a7bc:	400204b8 	.word	0x400204b8
 800a7c0:	58025408 	.word	0x58025408
 800a7c4:	5802541c 	.word	0x5802541c
 800a7c8:	58025430 	.word	0x58025430
 800a7cc:	58025444 	.word	0x58025444
 800a7d0:	58025458 	.word	0x58025458
 800a7d4:	5802546c 	.word	0x5802546c
 800a7d8:	58025480 	.word	0x58025480
 800a7dc:	58025494 	.word	0x58025494
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d028      	beq.n	800a838 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a7f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a800:	f003 031f 	and.w	r3, r3, #31
 800a804:	2201      	movs	r2, #1
 800a806:	409a      	lsls	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a814:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00c      	beq.n	800a838 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a82c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a836:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d003      	beq.n	800a858 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop

0800a864 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08a      	sub	sp, #40	; 0x28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a86c:	2300      	movs	r3, #0
 800a86e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a870:	4b67      	ldr	r3, [pc, #412]	; (800aa10 <HAL_DMA_IRQHandler+0x1ac>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a67      	ldr	r2, [pc, #412]	; (800aa14 <HAL_DMA_IRQHandler+0x1b0>)
 800a876:	fba2 2303 	umull	r2, r3, r2, r3
 800a87a:	0a9b      	lsrs	r3, r3, #10
 800a87c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a882:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a888:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a88a:	6a3b      	ldr	r3, [r7, #32]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a5f      	ldr	r2, [pc, #380]	; (800aa18 <HAL_DMA_IRQHandler+0x1b4>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d04a      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a5d      	ldr	r2, [pc, #372]	; (800aa1c <HAL_DMA_IRQHandler+0x1b8>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d045      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a5c      	ldr	r2, [pc, #368]	; (800aa20 <HAL_DMA_IRQHandler+0x1bc>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d040      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a5a      	ldr	r2, [pc, #360]	; (800aa24 <HAL_DMA_IRQHandler+0x1c0>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d03b      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a59      	ldr	r2, [pc, #356]	; (800aa28 <HAL_DMA_IRQHandler+0x1c4>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d036      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a57      	ldr	r2, [pc, #348]	; (800aa2c <HAL_DMA_IRQHandler+0x1c8>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d031      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a56      	ldr	r2, [pc, #344]	; (800aa30 <HAL_DMA_IRQHandler+0x1cc>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d02c      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a54      	ldr	r2, [pc, #336]	; (800aa34 <HAL_DMA_IRQHandler+0x1d0>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d027      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a53      	ldr	r2, [pc, #332]	; (800aa38 <HAL_DMA_IRQHandler+0x1d4>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d022      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a51      	ldr	r2, [pc, #324]	; (800aa3c <HAL_DMA_IRQHandler+0x1d8>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d01d      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a50      	ldr	r2, [pc, #320]	; (800aa40 <HAL_DMA_IRQHandler+0x1dc>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d018      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a4e      	ldr	r2, [pc, #312]	; (800aa44 <HAL_DMA_IRQHandler+0x1e0>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d013      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a4d      	ldr	r2, [pc, #308]	; (800aa48 <HAL_DMA_IRQHandler+0x1e4>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d00e      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a4b      	ldr	r2, [pc, #300]	; (800aa4c <HAL_DMA_IRQHandler+0x1e8>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d009      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a4a      	ldr	r2, [pc, #296]	; (800aa50 <HAL_DMA_IRQHandler+0x1ec>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d004      	beq.n	800a936 <HAL_DMA_IRQHandler+0xd2>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a48      	ldr	r2, [pc, #288]	; (800aa54 <HAL_DMA_IRQHandler+0x1f0>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d101      	bne.n	800a93a <HAL_DMA_IRQHandler+0xd6>
 800a936:	2301      	movs	r3, #1
 800a938:	e000      	b.n	800a93c <HAL_DMA_IRQHandler+0xd8>
 800a93a:	2300      	movs	r3, #0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 842b 	beq.w	800b198 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a946:	f003 031f 	and.w	r3, r3, #31
 800a94a:	2208      	movs	r2, #8
 800a94c:	409a      	lsls	r2, r3
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	4013      	ands	r3, r2
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 80a2 	beq.w	800aa9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a2e      	ldr	r2, [pc, #184]	; (800aa18 <HAL_DMA_IRQHandler+0x1b4>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d04a      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a2d      	ldr	r2, [pc, #180]	; (800aa1c <HAL_DMA_IRQHandler+0x1b8>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d045      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a2b      	ldr	r2, [pc, #172]	; (800aa20 <HAL_DMA_IRQHandler+0x1bc>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d040      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a2a      	ldr	r2, [pc, #168]	; (800aa24 <HAL_DMA_IRQHandler+0x1c0>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d03b      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a28      	ldr	r2, [pc, #160]	; (800aa28 <HAL_DMA_IRQHandler+0x1c4>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d036      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a27      	ldr	r2, [pc, #156]	; (800aa2c <HAL_DMA_IRQHandler+0x1c8>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d031      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a25      	ldr	r2, [pc, #148]	; (800aa30 <HAL_DMA_IRQHandler+0x1cc>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d02c      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a24      	ldr	r2, [pc, #144]	; (800aa34 <HAL_DMA_IRQHandler+0x1d0>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d027      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a22      	ldr	r2, [pc, #136]	; (800aa38 <HAL_DMA_IRQHandler+0x1d4>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d022      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a21      	ldr	r2, [pc, #132]	; (800aa3c <HAL_DMA_IRQHandler+0x1d8>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d01d      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a1f      	ldr	r2, [pc, #124]	; (800aa40 <HAL_DMA_IRQHandler+0x1dc>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d018      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a1e      	ldr	r2, [pc, #120]	; (800aa44 <HAL_DMA_IRQHandler+0x1e0>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d013      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a1c      	ldr	r2, [pc, #112]	; (800aa48 <HAL_DMA_IRQHandler+0x1e4>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d00e      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a1b      	ldr	r2, [pc, #108]	; (800aa4c <HAL_DMA_IRQHandler+0x1e8>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d009      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a19      	ldr	r2, [pc, #100]	; (800aa50 <HAL_DMA_IRQHandler+0x1ec>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d004      	beq.n	800a9f8 <HAL_DMA_IRQHandler+0x194>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a18      	ldr	r2, [pc, #96]	; (800aa54 <HAL_DMA_IRQHandler+0x1f0>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d12f      	bne.n	800aa58 <HAL_DMA_IRQHandler+0x1f4>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 0304 	and.w	r3, r3, #4
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	bf14      	ite	ne
 800aa06:	2301      	movne	r3, #1
 800aa08:	2300      	moveq	r3, #0
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	e02e      	b.n	800aa6c <HAL_DMA_IRQHandler+0x208>
 800aa0e:	bf00      	nop
 800aa10:	200000e0 	.word	0x200000e0
 800aa14:	1b4e81b5 	.word	0x1b4e81b5
 800aa18:	40020010 	.word	0x40020010
 800aa1c:	40020028 	.word	0x40020028
 800aa20:	40020040 	.word	0x40020040
 800aa24:	40020058 	.word	0x40020058
 800aa28:	40020070 	.word	0x40020070
 800aa2c:	40020088 	.word	0x40020088
 800aa30:	400200a0 	.word	0x400200a0
 800aa34:	400200b8 	.word	0x400200b8
 800aa38:	40020410 	.word	0x40020410
 800aa3c:	40020428 	.word	0x40020428
 800aa40:	40020440 	.word	0x40020440
 800aa44:	40020458 	.word	0x40020458
 800aa48:	40020470 	.word	0x40020470
 800aa4c:	40020488 	.word	0x40020488
 800aa50:	400204a0 	.word	0x400204a0
 800aa54:	400204b8 	.word	0x400204b8
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 0308 	and.w	r3, r3, #8
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	bf14      	ite	ne
 800aa66:	2301      	movne	r3, #1
 800aa68:	2300      	moveq	r3, #0
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d015      	beq.n	800aa9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f022 0204 	bic.w	r2, r2, #4
 800aa7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa84:	f003 031f 	and.w	r3, r3, #31
 800aa88:	2208      	movs	r2, #8
 800aa8a:	409a      	lsls	r2, r3
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
 800aa8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa94:	f043 0201 	orr.w	r2, r3, #1
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa0:	f003 031f 	and.w	r3, r3, #31
 800aaa4:	69ba      	ldr	r2, [r7, #24]
 800aaa6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaaa:	f003 0301 	and.w	r3, r3, #1
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d06e      	beq.n	800ab90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a69      	ldr	r2, [pc, #420]	; (800ac5c <HAL_DMA_IRQHandler+0x3f8>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d04a      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a67      	ldr	r2, [pc, #412]	; (800ac60 <HAL_DMA_IRQHandler+0x3fc>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d045      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a66      	ldr	r2, [pc, #408]	; (800ac64 <HAL_DMA_IRQHandler+0x400>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d040      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a64      	ldr	r2, [pc, #400]	; (800ac68 <HAL_DMA_IRQHandler+0x404>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d03b      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a63      	ldr	r2, [pc, #396]	; (800ac6c <HAL_DMA_IRQHandler+0x408>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d036      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a61      	ldr	r2, [pc, #388]	; (800ac70 <HAL_DMA_IRQHandler+0x40c>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d031      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a60      	ldr	r2, [pc, #384]	; (800ac74 <HAL_DMA_IRQHandler+0x410>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d02c      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a5e      	ldr	r2, [pc, #376]	; (800ac78 <HAL_DMA_IRQHandler+0x414>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d027      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a5d      	ldr	r2, [pc, #372]	; (800ac7c <HAL_DMA_IRQHandler+0x418>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d022      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a5b      	ldr	r2, [pc, #364]	; (800ac80 <HAL_DMA_IRQHandler+0x41c>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d01d      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a5a      	ldr	r2, [pc, #360]	; (800ac84 <HAL_DMA_IRQHandler+0x420>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d018      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a58      	ldr	r2, [pc, #352]	; (800ac88 <HAL_DMA_IRQHandler+0x424>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d013      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a57      	ldr	r2, [pc, #348]	; (800ac8c <HAL_DMA_IRQHandler+0x428>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d00e      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a55      	ldr	r2, [pc, #340]	; (800ac90 <HAL_DMA_IRQHandler+0x42c>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d009      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a54      	ldr	r2, [pc, #336]	; (800ac94 <HAL_DMA_IRQHandler+0x430>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d004      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x2ee>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a52      	ldr	r2, [pc, #328]	; (800ac98 <HAL_DMA_IRQHandler+0x434>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d10a      	bne.n	800ab68 <HAL_DMA_IRQHandler+0x304>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	bf14      	ite	ne
 800ab60:	2301      	movne	r3, #1
 800ab62:	2300      	moveq	r3, #0
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	e003      	b.n	800ab70 <HAL_DMA_IRQHandler+0x30c>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00d      	beq.n	800ab90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab78:	f003 031f 	and.w	r3, r3, #31
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	409a      	lsls	r2, r3
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab88:	f043 0202 	orr.w	r2, r3, #2
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab94:	f003 031f 	and.w	r3, r3, #31
 800ab98:	2204      	movs	r2, #4
 800ab9a:	409a      	lsls	r2, r3
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	4013      	ands	r3, r2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 808f 	beq.w	800acc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a2c      	ldr	r2, [pc, #176]	; (800ac5c <HAL_DMA_IRQHandler+0x3f8>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d04a      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a2a      	ldr	r2, [pc, #168]	; (800ac60 <HAL_DMA_IRQHandler+0x3fc>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d045      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a29      	ldr	r2, [pc, #164]	; (800ac64 <HAL_DMA_IRQHandler+0x400>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d040      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a27      	ldr	r2, [pc, #156]	; (800ac68 <HAL_DMA_IRQHandler+0x404>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d03b      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a26      	ldr	r2, [pc, #152]	; (800ac6c <HAL_DMA_IRQHandler+0x408>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d036      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a24      	ldr	r2, [pc, #144]	; (800ac70 <HAL_DMA_IRQHandler+0x40c>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d031      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a23      	ldr	r2, [pc, #140]	; (800ac74 <HAL_DMA_IRQHandler+0x410>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d02c      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a21      	ldr	r2, [pc, #132]	; (800ac78 <HAL_DMA_IRQHandler+0x414>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d027      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a20      	ldr	r2, [pc, #128]	; (800ac7c <HAL_DMA_IRQHandler+0x418>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d022      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a1e      	ldr	r2, [pc, #120]	; (800ac80 <HAL_DMA_IRQHandler+0x41c>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d01d      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a1d      	ldr	r2, [pc, #116]	; (800ac84 <HAL_DMA_IRQHandler+0x420>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d018      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a1b      	ldr	r2, [pc, #108]	; (800ac88 <HAL_DMA_IRQHandler+0x424>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d013      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a1a      	ldr	r2, [pc, #104]	; (800ac8c <HAL_DMA_IRQHandler+0x428>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d00e      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a18      	ldr	r2, [pc, #96]	; (800ac90 <HAL_DMA_IRQHandler+0x42c>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d009      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a17      	ldr	r2, [pc, #92]	; (800ac94 <HAL_DMA_IRQHandler+0x430>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d004      	beq.n	800ac46 <HAL_DMA_IRQHandler+0x3e2>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a15      	ldr	r2, [pc, #84]	; (800ac98 <HAL_DMA_IRQHandler+0x434>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d12a      	bne.n	800ac9c <HAL_DMA_IRQHandler+0x438>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0302 	and.w	r3, r3, #2
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	bf14      	ite	ne
 800ac54:	2301      	movne	r3, #1
 800ac56:	2300      	moveq	r3, #0
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	e023      	b.n	800aca4 <HAL_DMA_IRQHandler+0x440>
 800ac5c:	40020010 	.word	0x40020010
 800ac60:	40020028 	.word	0x40020028
 800ac64:	40020040 	.word	0x40020040
 800ac68:	40020058 	.word	0x40020058
 800ac6c:	40020070 	.word	0x40020070
 800ac70:	40020088 	.word	0x40020088
 800ac74:	400200a0 	.word	0x400200a0
 800ac78:	400200b8 	.word	0x400200b8
 800ac7c:	40020410 	.word	0x40020410
 800ac80:	40020428 	.word	0x40020428
 800ac84:	40020440 	.word	0x40020440
 800ac88:	40020458 	.word	0x40020458
 800ac8c:	40020470 	.word	0x40020470
 800ac90:	40020488 	.word	0x40020488
 800ac94:	400204a0 	.word	0x400204a0
 800ac98:	400204b8 	.word	0x400204b8
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2300      	movs	r3, #0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00d      	beq.n	800acc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acac:	f003 031f 	and.w	r3, r3, #31
 800acb0:	2204      	movs	r2, #4
 800acb2:	409a      	lsls	r2, r3
 800acb4:	6a3b      	ldr	r3, [r7, #32]
 800acb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acbc:	f043 0204 	orr.w	r2, r3, #4
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acc8:	f003 031f 	and.w	r3, r3, #31
 800accc:	2210      	movs	r2, #16
 800acce:	409a      	lsls	r2, r3
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	4013      	ands	r3, r2
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80a6 	beq.w	800ae26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a85      	ldr	r2, [pc, #532]	; (800aef4 <HAL_DMA_IRQHandler+0x690>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d04a      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a83      	ldr	r2, [pc, #524]	; (800aef8 <HAL_DMA_IRQHandler+0x694>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d045      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a82      	ldr	r2, [pc, #520]	; (800aefc <HAL_DMA_IRQHandler+0x698>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d040      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a80      	ldr	r2, [pc, #512]	; (800af00 <HAL_DMA_IRQHandler+0x69c>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d03b      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a7f      	ldr	r2, [pc, #508]	; (800af04 <HAL_DMA_IRQHandler+0x6a0>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d036      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a7d      	ldr	r2, [pc, #500]	; (800af08 <HAL_DMA_IRQHandler+0x6a4>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d031      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a7c      	ldr	r2, [pc, #496]	; (800af0c <HAL_DMA_IRQHandler+0x6a8>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d02c      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a7a      	ldr	r2, [pc, #488]	; (800af10 <HAL_DMA_IRQHandler+0x6ac>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d027      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a79      	ldr	r2, [pc, #484]	; (800af14 <HAL_DMA_IRQHandler+0x6b0>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d022      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a77      	ldr	r2, [pc, #476]	; (800af18 <HAL_DMA_IRQHandler+0x6b4>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d01d      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a76      	ldr	r2, [pc, #472]	; (800af1c <HAL_DMA_IRQHandler+0x6b8>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d018      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a74      	ldr	r2, [pc, #464]	; (800af20 <HAL_DMA_IRQHandler+0x6bc>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d013      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a73      	ldr	r2, [pc, #460]	; (800af24 <HAL_DMA_IRQHandler+0x6c0>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d00e      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a71      	ldr	r2, [pc, #452]	; (800af28 <HAL_DMA_IRQHandler+0x6c4>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d009      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a70      	ldr	r2, [pc, #448]	; (800af2c <HAL_DMA_IRQHandler+0x6c8>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d004      	beq.n	800ad7a <HAL_DMA_IRQHandler+0x516>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a6e      	ldr	r2, [pc, #440]	; (800af30 <HAL_DMA_IRQHandler+0x6cc>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d10a      	bne.n	800ad90 <HAL_DMA_IRQHandler+0x52c>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0308 	and.w	r3, r3, #8
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	bf14      	ite	ne
 800ad88:	2301      	movne	r3, #1
 800ad8a:	2300      	moveq	r3, #0
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	e009      	b.n	800ada4 <HAL_DMA_IRQHandler+0x540>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0304 	and.w	r3, r3, #4
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bf14      	ite	ne
 800ad9e:	2301      	movne	r3, #1
 800ada0:	2300      	moveq	r3, #0
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d03e      	beq.n	800ae26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adac:	f003 031f 	and.w	r3, r3, #31
 800adb0:	2210      	movs	r2, #16
 800adb2:	409a      	lsls	r2, r3
 800adb4:	6a3b      	ldr	r3, [r7, #32]
 800adb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d018      	beq.n	800adf8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d108      	bne.n	800ade6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add8:	2b00      	cmp	r3, #0
 800adda:	d024      	beq.n	800ae26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	4798      	blx	r3
 800ade4:	e01f      	b.n	800ae26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adea:	2b00      	cmp	r3, #0
 800adec:	d01b      	beq.n	800ae26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	4798      	blx	r3
 800adf6:	e016      	b.n	800ae26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d107      	bne.n	800ae16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f022 0208 	bic.w	r2, r2, #8
 800ae14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d003      	beq.n	800ae26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae2a:	f003 031f 	and.w	r3, r3, #31
 800ae2e:	2220      	movs	r2, #32
 800ae30:	409a      	lsls	r2, r3
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	4013      	ands	r3, r2
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 8110 	beq.w	800b05c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a2c      	ldr	r2, [pc, #176]	; (800aef4 <HAL_DMA_IRQHandler+0x690>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d04a      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a2b      	ldr	r2, [pc, #172]	; (800aef8 <HAL_DMA_IRQHandler+0x694>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d045      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a29      	ldr	r2, [pc, #164]	; (800aefc <HAL_DMA_IRQHandler+0x698>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d040      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a28      	ldr	r2, [pc, #160]	; (800af00 <HAL_DMA_IRQHandler+0x69c>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d03b      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a26      	ldr	r2, [pc, #152]	; (800af04 <HAL_DMA_IRQHandler+0x6a0>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d036      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a25      	ldr	r2, [pc, #148]	; (800af08 <HAL_DMA_IRQHandler+0x6a4>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d031      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a23      	ldr	r2, [pc, #140]	; (800af0c <HAL_DMA_IRQHandler+0x6a8>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d02c      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a22      	ldr	r2, [pc, #136]	; (800af10 <HAL_DMA_IRQHandler+0x6ac>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d027      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a20      	ldr	r2, [pc, #128]	; (800af14 <HAL_DMA_IRQHandler+0x6b0>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d022      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a1f      	ldr	r2, [pc, #124]	; (800af18 <HAL_DMA_IRQHandler+0x6b4>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d01d      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a1d      	ldr	r2, [pc, #116]	; (800af1c <HAL_DMA_IRQHandler+0x6b8>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d018      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a1c      	ldr	r2, [pc, #112]	; (800af20 <HAL_DMA_IRQHandler+0x6bc>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d013      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a1a      	ldr	r2, [pc, #104]	; (800af24 <HAL_DMA_IRQHandler+0x6c0>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d00e      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a19      	ldr	r2, [pc, #100]	; (800af28 <HAL_DMA_IRQHandler+0x6c4>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d009      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a17      	ldr	r2, [pc, #92]	; (800af2c <HAL_DMA_IRQHandler+0x6c8>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d004      	beq.n	800aedc <HAL_DMA_IRQHandler+0x678>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a16      	ldr	r2, [pc, #88]	; (800af30 <HAL_DMA_IRQHandler+0x6cc>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d12b      	bne.n	800af34 <HAL_DMA_IRQHandler+0x6d0>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 0310 	and.w	r3, r3, #16
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	bf14      	ite	ne
 800aeea:	2301      	movne	r3, #1
 800aeec:	2300      	moveq	r3, #0
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	e02a      	b.n	800af48 <HAL_DMA_IRQHandler+0x6e4>
 800aef2:	bf00      	nop
 800aef4:	40020010 	.word	0x40020010
 800aef8:	40020028 	.word	0x40020028
 800aefc:	40020040 	.word	0x40020040
 800af00:	40020058 	.word	0x40020058
 800af04:	40020070 	.word	0x40020070
 800af08:	40020088 	.word	0x40020088
 800af0c:	400200a0 	.word	0x400200a0
 800af10:	400200b8 	.word	0x400200b8
 800af14:	40020410 	.word	0x40020410
 800af18:	40020428 	.word	0x40020428
 800af1c:	40020440 	.word	0x40020440
 800af20:	40020458 	.word	0x40020458
 800af24:	40020470 	.word	0x40020470
 800af28:	40020488 	.word	0x40020488
 800af2c:	400204a0 	.word	0x400204a0
 800af30:	400204b8 	.word	0x400204b8
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f003 0302 	and.w	r3, r3, #2
 800af3e:	2b00      	cmp	r3, #0
 800af40:	bf14      	ite	ne
 800af42:	2301      	movne	r3, #1
 800af44:	2300      	moveq	r3, #0
 800af46:	b2db      	uxtb	r3, r3
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f000 8087 	beq.w	800b05c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af52:	f003 031f 	and.w	r3, r3, #31
 800af56:	2220      	movs	r2, #32
 800af58:	409a      	lsls	r2, r3
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b04      	cmp	r3, #4
 800af68:	d139      	bne.n	800afde <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f022 0216 	bic.w	r2, r2, #22
 800af78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	695a      	ldr	r2, [r3, #20]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d103      	bne.n	800af9a <HAL_DMA_IRQHandler+0x736>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af96:	2b00      	cmp	r3, #0
 800af98:	d007      	beq.n	800afaa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f022 0208 	bic.w	r2, r2, #8
 800afa8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afae:	f003 031f 	and.w	r3, r3, #31
 800afb2:	223f      	movs	r2, #63	; 0x3f
 800afb4:	409a      	lsls	r2, r3
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2201      	movs	r2, #1
 800afbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 8382 	beq.w	800b6d8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	4798      	blx	r3
          }
          return;
 800afdc:	e37c      	b.n	800b6d8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d018      	beq.n	800b01e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d108      	bne.n	800b00c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800affe:	2b00      	cmp	r3, #0
 800b000:	d02c      	beq.n	800b05c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	4798      	blx	r3
 800b00a:	e027      	b.n	800b05c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b010:	2b00      	cmp	r3, #0
 800b012:	d023      	beq.n	800b05c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	4798      	blx	r3
 800b01c:	e01e      	b.n	800b05c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10f      	bne.n	800b04c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f022 0210 	bic.w	r2, r2, #16
 800b03a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b050:	2b00      	cmp	r3, #0
 800b052:	d003      	beq.n	800b05c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b060:	2b00      	cmp	r3, #0
 800b062:	f000 833e 	beq.w	800b6e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b06a:	f003 0301 	and.w	r3, r3, #1
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 8088 	beq.w	800b184 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2204      	movs	r2, #4
 800b078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a89      	ldr	r2, [pc, #548]	; (800b2a8 <HAL_DMA_IRQHandler+0xa44>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d04a      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a88      	ldr	r2, [pc, #544]	; (800b2ac <HAL_DMA_IRQHandler+0xa48>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d045      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a86      	ldr	r2, [pc, #536]	; (800b2b0 <HAL_DMA_IRQHandler+0xa4c>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d040      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a85      	ldr	r2, [pc, #532]	; (800b2b4 <HAL_DMA_IRQHandler+0xa50>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d03b      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a83      	ldr	r2, [pc, #524]	; (800b2b8 <HAL_DMA_IRQHandler+0xa54>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d036      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a82      	ldr	r2, [pc, #520]	; (800b2bc <HAL_DMA_IRQHandler+0xa58>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d031      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a80      	ldr	r2, [pc, #512]	; (800b2c0 <HAL_DMA_IRQHandler+0xa5c>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d02c      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a7f      	ldr	r2, [pc, #508]	; (800b2c4 <HAL_DMA_IRQHandler+0xa60>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d027      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a7d      	ldr	r2, [pc, #500]	; (800b2c8 <HAL_DMA_IRQHandler+0xa64>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d022      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a7c      	ldr	r2, [pc, #496]	; (800b2cc <HAL_DMA_IRQHandler+0xa68>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d01d      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a7a      	ldr	r2, [pc, #488]	; (800b2d0 <HAL_DMA_IRQHandler+0xa6c>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d018      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a79      	ldr	r2, [pc, #484]	; (800b2d4 <HAL_DMA_IRQHandler+0xa70>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d013      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a77      	ldr	r2, [pc, #476]	; (800b2d8 <HAL_DMA_IRQHandler+0xa74>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d00e      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a76      	ldr	r2, [pc, #472]	; (800b2dc <HAL_DMA_IRQHandler+0xa78>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d009      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a74      	ldr	r2, [pc, #464]	; (800b2e0 <HAL_DMA_IRQHandler+0xa7c>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d004      	beq.n	800b11c <HAL_DMA_IRQHandler+0x8b8>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a73      	ldr	r2, [pc, #460]	; (800b2e4 <HAL_DMA_IRQHandler+0xa80>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d108      	bne.n	800b12e <HAL_DMA_IRQHandler+0x8ca>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f022 0201 	bic.w	r2, r2, #1
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	e007      	b.n	800b13e <HAL_DMA_IRQHandler+0x8da>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f022 0201 	bic.w	r2, r2, #1
 800b13c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3301      	adds	r3, #1
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b146:	429a      	cmp	r2, r3
 800b148:	d307      	bcc.n	800b15a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 0301 	and.w	r3, r3, #1
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1f2      	bne.n	800b13e <HAL_DMA_IRQHandler+0x8da>
 800b158:	e000      	b.n	800b15c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b15a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	2b00      	cmp	r3, #0
 800b168:	d004      	beq.n	800b174 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2203      	movs	r2, #3
 800b16e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b172:	e003      	b.n	800b17c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 82aa 	beq.w	800b6e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	4798      	blx	r3
 800b196:	e2a4      	b.n	800b6e2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a52      	ldr	r2, [pc, #328]	; (800b2e8 <HAL_DMA_IRQHandler+0xa84>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d04a      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a51      	ldr	r2, [pc, #324]	; (800b2ec <HAL_DMA_IRQHandler+0xa88>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d045      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a4f      	ldr	r2, [pc, #316]	; (800b2f0 <HAL_DMA_IRQHandler+0xa8c>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d040      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a4e      	ldr	r2, [pc, #312]	; (800b2f4 <HAL_DMA_IRQHandler+0xa90>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d03b      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a4c      	ldr	r2, [pc, #304]	; (800b2f8 <HAL_DMA_IRQHandler+0xa94>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d036      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a4b      	ldr	r2, [pc, #300]	; (800b2fc <HAL_DMA_IRQHandler+0xa98>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d031      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a49      	ldr	r2, [pc, #292]	; (800b300 <HAL_DMA_IRQHandler+0xa9c>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d02c      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a48      	ldr	r2, [pc, #288]	; (800b304 <HAL_DMA_IRQHandler+0xaa0>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d027      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a46      	ldr	r2, [pc, #280]	; (800b308 <HAL_DMA_IRQHandler+0xaa4>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d022      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a45      	ldr	r2, [pc, #276]	; (800b30c <HAL_DMA_IRQHandler+0xaa8>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d01d      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a43      	ldr	r2, [pc, #268]	; (800b310 <HAL_DMA_IRQHandler+0xaac>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d018      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a42      	ldr	r2, [pc, #264]	; (800b314 <HAL_DMA_IRQHandler+0xab0>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d013      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a40      	ldr	r2, [pc, #256]	; (800b318 <HAL_DMA_IRQHandler+0xab4>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d00e      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a3f      	ldr	r2, [pc, #252]	; (800b31c <HAL_DMA_IRQHandler+0xab8>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d009      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a3d      	ldr	r2, [pc, #244]	; (800b320 <HAL_DMA_IRQHandler+0xabc>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d004      	beq.n	800b238 <HAL_DMA_IRQHandler+0x9d4>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a3c      	ldr	r2, [pc, #240]	; (800b324 <HAL_DMA_IRQHandler+0xac0>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d101      	bne.n	800b23c <HAL_DMA_IRQHandler+0x9d8>
 800b238:	2301      	movs	r3, #1
 800b23a:	e000      	b.n	800b23e <HAL_DMA_IRQHandler+0x9da>
 800b23c:	2300      	movs	r3, #0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f000 824f 	beq.w	800b6e2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b250:	f003 031f 	and.w	r3, r3, #31
 800b254:	2204      	movs	r2, #4
 800b256:	409a      	lsls	r2, r3
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	4013      	ands	r3, r2
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 80dd 	beq.w	800b41c <HAL_DMA_IRQHandler+0xbb8>
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f003 0304 	and.w	r3, r3, #4
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f000 80d7 	beq.w	800b41c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b272:	f003 031f 	and.w	r3, r3, #31
 800b276:	2204      	movs	r2, #4
 800b278:	409a      	lsls	r2, r3
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d059      	beq.n	800b33c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d14a      	bne.n	800b328 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b296:	2b00      	cmp	r3, #0
 800b298:	f000 8220 	beq.w	800b6dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2a4:	e21a      	b.n	800b6dc <HAL_DMA_IRQHandler+0xe78>
 800b2a6:	bf00      	nop
 800b2a8:	40020010 	.word	0x40020010
 800b2ac:	40020028 	.word	0x40020028
 800b2b0:	40020040 	.word	0x40020040
 800b2b4:	40020058 	.word	0x40020058
 800b2b8:	40020070 	.word	0x40020070
 800b2bc:	40020088 	.word	0x40020088
 800b2c0:	400200a0 	.word	0x400200a0
 800b2c4:	400200b8 	.word	0x400200b8
 800b2c8:	40020410 	.word	0x40020410
 800b2cc:	40020428 	.word	0x40020428
 800b2d0:	40020440 	.word	0x40020440
 800b2d4:	40020458 	.word	0x40020458
 800b2d8:	40020470 	.word	0x40020470
 800b2dc:	40020488 	.word	0x40020488
 800b2e0:	400204a0 	.word	0x400204a0
 800b2e4:	400204b8 	.word	0x400204b8
 800b2e8:	48022c08 	.word	0x48022c08
 800b2ec:	48022c1c 	.word	0x48022c1c
 800b2f0:	48022c30 	.word	0x48022c30
 800b2f4:	48022c44 	.word	0x48022c44
 800b2f8:	48022c58 	.word	0x48022c58
 800b2fc:	48022c6c 	.word	0x48022c6c
 800b300:	48022c80 	.word	0x48022c80
 800b304:	48022c94 	.word	0x48022c94
 800b308:	58025408 	.word	0x58025408
 800b30c:	5802541c 	.word	0x5802541c
 800b310:	58025430 	.word	0x58025430
 800b314:	58025444 	.word	0x58025444
 800b318:	58025458 	.word	0x58025458
 800b31c:	5802546c 	.word	0x5802546c
 800b320:	58025480 	.word	0x58025480
 800b324:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f000 81d5 	beq.w	800b6dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b33a:	e1cf      	b.n	800b6dc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	f003 0320 	and.w	r3, r3, #32
 800b342:	2b00      	cmp	r3, #0
 800b344:	d160      	bne.n	800b408 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a7f      	ldr	r2, [pc, #508]	; (800b548 <HAL_DMA_IRQHandler+0xce4>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d04a      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a7d      	ldr	r2, [pc, #500]	; (800b54c <HAL_DMA_IRQHandler+0xce8>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d045      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a7c      	ldr	r2, [pc, #496]	; (800b550 <HAL_DMA_IRQHandler+0xcec>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d040      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a7a      	ldr	r2, [pc, #488]	; (800b554 <HAL_DMA_IRQHandler+0xcf0>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d03b      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a79      	ldr	r2, [pc, #484]	; (800b558 <HAL_DMA_IRQHandler+0xcf4>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d036      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a77      	ldr	r2, [pc, #476]	; (800b55c <HAL_DMA_IRQHandler+0xcf8>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d031      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a76      	ldr	r2, [pc, #472]	; (800b560 <HAL_DMA_IRQHandler+0xcfc>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d02c      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a74      	ldr	r2, [pc, #464]	; (800b564 <HAL_DMA_IRQHandler+0xd00>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d027      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a73      	ldr	r2, [pc, #460]	; (800b568 <HAL_DMA_IRQHandler+0xd04>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d022      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a71      	ldr	r2, [pc, #452]	; (800b56c <HAL_DMA_IRQHandler+0xd08>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d01d      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a70      	ldr	r2, [pc, #448]	; (800b570 <HAL_DMA_IRQHandler+0xd0c>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d018      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a6e      	ldr	r2, [pc, #440]	; (800b574 <HAL_DMA_IRQHandler+0xd10>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d013      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a6d      	ldr	r2, [pc, #436]	; (800b578 <HAL_DMA_IRQHandler+0xd14>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d00e      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a6b      	ldr	r2, [pc, #428]	; (800b57c <HAL_DMA_IRQHandler+0xd18>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d009      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a6a      	ldr	r2, [pc, #424]	; (800b580 <HAL_DMA_IRQHandler+0xd1c>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d004      	beq.n	800b3e6 <HAL_DMA_IRQHandler+0xb82>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a68      	ldr	r2, [pc, #416]	; (800b584 <HAL_DMA_IRQHandler+0xd20>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d108      	bne.n	800b3f8 <HAL_DMA_IRQHandler+0xb94>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f022 0208 	bic.w	r2, r2, #8
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	e007      	b.n	800b408 <HAL_DMA_IRQHandler+0xba4>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f022 0204 	bic.w	r2, r2, #4
 800b406:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f000 8165 	beq.w	800b6dc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b41a:	e15f      	b.n	800b6dc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b420:	f003 031f 	and.w	r3, r3, #31
 800b424:	2202      	movs	r2, #2
 800b426:	409a      	lsls	r2, r3
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	4013      	ands	r3, r2
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 80c5 	beq.w	800b5bc <HAL_DMA_IRQHandler+0xd58>
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	f003 0302 	and.w	r3, r3, #2
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f000 80bf 	beq.w	800b5bc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b442:	f003 031f 	and.w	r3, r3, #31
 800b446:	2202      	movs	r2, #2
 800b448:	409a      	lsls	r2, r3
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d018      	beq.n	800b48a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d109      	bne.n	800b476 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b466:	2b00      	cmp	r3, #0
 800b468:	f000 813a 	beq.w	800b6e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b474:	e134      	b.n	800b6e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 8130 	beq.w	800b6e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b488:	e12a      	b.n	800b6e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	f003 0320 	and.w	r3, r3, #32
 800b490:	2b00      	cmp	r3, #0
 800b492:	f040 8089 	bne.w	800b5a8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a2b      	ldr	r2, [pc, #172]	; (800b548 <HAL_DMA_IRQHandler+0xce4>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d04a      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a29      	ldr	r2, [pc, #164]	; (800b54c <HAL_DMA_IRQHandler+0xce8>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d045      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a28      	ldr	r2, [pc, #160]	; (800b550 <HAL_DMA_IRQHandler+0xcec>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d040      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a26      	ldr	r2, [pc, #152]	; (800b554 <HAL_DMA_IRQHandler+0xcf0>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d03b      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a25      	ldr	r2, [pc, #148]	; (800b558 <HAL_DMA_IRQHandler+0xcf4>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d036      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a23      	ldr	r2, [pc, #140]	; (800b55c <HAL_DMA_IRQHandler+0xcf8>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d031      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a22      	ldr	r2, [pc, #136]	; (800b560 <HAL_DMA_IRQHandler+0xcfc>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d02c      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a20      	ldr	r2, [pc, #128]	; (800b564 <HAL_DMA_IRQHandler+0xd00>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d027      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a1f      	ldr	r2, [pc, #124]	; (800b568 <HAL_DMA_IRQHandler+0xd04>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d022      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a1d      	ldr	r2, [pc, #116]	; (800b56c <HAL_DMA_IRQHandler+0xd08>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d01d      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a1c      	ldr	r2, [pc, #112]	; (800b570 <HAL_DMA_IRQHandler+0xd0c>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d018      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a1a      	ldr	r2, [pc, #104]	; (800b574 <HAL_DMA_IRQHandler+0xd10>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d013      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a19      	ldr	r2, [pc, #100]	; (800b578 <HAL_DMA_IRQHandler+0xd14>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d00e      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a17      	ldr	r2, [pc, #92]	; (800b57c <HAL_DMA_IRQHandler+0xd18>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d009      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a16      	ldr	r2, [pc, #88]	; (800b580 <HAL_DMA_IRQHandler+0xd1c>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d004      	beq.n	800b536 <HAL_DMA_IRQHandler+0xcd2>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a14      	ldr	r2, [pc, #80]	; (800b584 <HAL_DMA_IRQHandler+0xd20>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d128      	bne.n	800b588 <HAL_DMA_IRQHandler+0xd24>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f022 0214 	bic.w	r2, r2, #20
 800b544:	601a      	str	r2, [r3, #0]
 800b546:	e027      	b.n	800b598 <HAL_DMA_IRQHandler+0xd34>
 800b548:	40020010 	.word	0x40020010
 800b54c:	40020028 	.word	0x40020028
 800b550:	40020040 	.word	0x40020040
 800b554:	40020058 	.word	0x40020058
 800b558:	40020070 	.word	0x40020070
 800b55c:	40020088 	.word	0x40020088
 800b560:	400200a0 	.word	0x400200a0
 800b564:	400200b8 	.word	0x400200b8
 800b568:	40020410 	.word	0x40020410
 800b56c:	40020428 	.word	0x40020428
 800b570:	40020440 	.word	0x40020440
 800b574:	40020458 	.word	0x40020458
 800b578:	40020470 	.word	0x40020470
 800b57c:	40020488 	.word	0x40020488
 800b580:	400204a0 	.word	0x400204a0
 800b584:	400204b8 	.word	0x400204b8
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f022 020a 	bic.w	r2, r2, #10
 800b596:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 8097 	beq.w	800b6e0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b5ba:	e091      	b.n	800b6e0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5c0:	f003 031f 	and.w	r3, r3, #31
 800b5c4:	2208      	movs	r2, #8
 800b5c6:	409a      	lsls	r2, r3
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 8088 	beq.w	800b6e2 <HAL_DMA_IRQHandler+0xe7e>
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	f003 0308 	and.w	r3, r3, #8
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f000 8082 	beq.w	800b6e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a41      	ldr	r2, [pc, #260]	; (800b6e8 <HAL_DMA_IRQHandler+0xe84>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d04a      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a3f      	ldr	r2, [pc, #252]	; (800b6ec <HAL_DMA_IRQHandler+0xe88>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d045      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a3e      	ldr	r2, [pc, #248]	; (800b6f0 <HAL_DMA_IRQHandler+0xe8c>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d040      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a3c      	ldr	r2, [pc, #240]	; (800b6f4 <HAL_DMA_IRQHandler+0xe90>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d03b      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a3b      	ldr	r2, [pc, #236]	; (800b6f8 <HAL_DMA_IRQHandler+0xe94>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d036      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a39      	ldr	r2, [pc, #228]	; (800b6fc <HAL_DMA_IRQHandler+0xe98>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d031      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a38      	ldr	r2, [pc, #224]	; (800b700 <HAL_DMA_IRQHandler+0xe9c>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d02c      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a36      	ldr	r2, [pc, #216]	; (800b704 <HAL_DMA_IRQHandler+0xea0>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d027      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a35      	ldr	r2, [pc, #212]	; (800b708 <HAL_DMA_IRQHandler+0xea4>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d022      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a33      	ldr	r2, [pc, #204]	; (800b70c <HAL_DMA_IRQHandler+0xea8>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d01d      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a32      	ldr	r2, [pc, #200]	; (800b710 <HAL_DMA_IRQHandler+0xeac>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d018      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a30      	ldr	r2, [pc, #192]	; (800b714 <HAL_DMA_IRQHandler+0xeb0>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d013      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a2f      	ldr	r2, [pc, #188]	; (800b718 <HAL_DMA_IRQHandler+0xeb4>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d00e      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a2d      	ldr	r2, [pc, #180]	; (800b71c <HAL_DMA_IRQHandler+0xeb8>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d009      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a2c      	ldr	r2, [pc, #176]	; (800b720 <HAL_DMA_IRQHandler+0xebc>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d004      	beq.n	800b67e <HAL_DMA_IRQHandler+0xe1a>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a2a      	ldr	r2, [pc, #168]	; (800b724 <HAL_DMA_IRQHandler+0xec0>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d108      	bne.n	800b690 <HAL_DMA_IRQHandler+0xe2c>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f022 021c 	bic.w	r2, r2, #28
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	e007      	b.n	800b6a0 <HAL_DMA_IRQHandler+0xe3c>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f022 020e 	bic.w	r2, r2, #14
 800b69e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6a4:	f003 031f 	and.w	r3, r3, #31
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	409a      	lsls	r2, r3
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d009      	beq.n	800b6e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	4798      	blx	r3
 800b6d6:	e004      	b.n	800b6e2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 800b6d8:	bf00      	nop
 800b6da:	e002      	b.n	800b6e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b6dc:	bf00      	nop
 800b6de:	e000      	b.n	800b6e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b6e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b6e2:	3728      	adds	r7, #40	; 0x28
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	40020010 	.word	0x40020010
 800b6ec:	40020028 	.word	0x40020028
 800b6f0:	40020040 	.word	0x40020040
 800b6f4:	40020058 	.word	0x40020058
 800b6f8:	40020070 	.word	0x40020070
 800b6fc:	40020088 	.word	0x40020088
 800b700:	400200a0 	.word	0x400200a0
 800b704:	400200b8 	.word	0x400200b8
 800b708:	40020410 	.word	0x40020410
 800b70c:	40020428 	.word	0x40020428
 800b710:	40020440 	.word	0x40020440
 800b714:	40020458 	.word	0x40020458
 800b718:	40020470 	.word	0x40020470
 800b71c:	40020488 	.word	0x40020488
 800b720:	400204a0 	.word	0x400204a0
 800b724:	400204b8 	.word	0x400204b8

0800b728 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800b734:	4618      	mov	r0, r3
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b740:	b480      	push	{r7}
 800b742:	b087      	sub	sp, #28
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
 800b74c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b752:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b758:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a7f      	ldr	r2, [pc, #508]	; (800b95c <DMA_SetConfig+0x21c>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d072      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a7d      	ldr	r2, [pc, #500]	; (800b960 <DMA_SetConfig+0x220>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d06d      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a7c      	ldr	r2, [pc, #496]	; (800b964 <DMA_SetConfig+0x224>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d068      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a7a      	ldr	r2, [pc, #488]	; (800b968 <DMA_SetConfig+0x228>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d063      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a79      	ldr	r2, [pc, #484]	; (800b96c <DMA_SetConfig+0x22c>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d05e      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a77      	ldr	r2, [pc, #476]	; (800b970 <DMA_SetConfig+0x230>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d059      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a76      	ldr	r2, [pc, #472]	; (800b974 <DMA_SetConfig+0x234>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d054      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a74      	ldr	r2, [pc, #464]	; (800b978 <DMA_SetConfig+0x238>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d04f      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a73      	ldr	r2, [pc, #460]	; (800b97c <DMA_SetConfig+0x23c>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d04a      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a71      	ldr	r2, [pc, #452]	; (800b980 <DMA_SetConfig+0x240>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d045      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a70      	ldr	r2, [pc, #448]	; (800b984 <DMA_SetConfig+0x244>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d040      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a6e      	ldr	r2, [pc, #440]	; (800b988 <DMA_SetConfig+0x248>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d03b      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a6d      	ldr	r2, [pc, #436]	; (800b98c <DMA_SetConfig+0x24c>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d036      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a6b      	ldr	r2, [pc, #428]	; (800b990 <DMA_SetConfig+0x250>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d031      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a6a      	ldr	r2, [pc, #424]	; (800b994 <DMA_SetConfig+0x254>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d02c      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a68      	ldr	r2, [pc, #416]	; (800b998 <DMA_SetConfig+0x258>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d027      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a67      	ldr	r2, [pc, #412]	; (800b99c <DMA_SetConfig+0x25c>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d022      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a65      	ldr	r2, [pc, #404]	; (800b9a0 <DMA_SetConfig+0x260>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d01d      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a64      	ldr	r2, [pc, #400]	; (800b9a4 <DMA_SetConfig+0x264>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d018      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a62      	ldr	r2, [pc, #392]	; (800b9a8 <DMA_SetConfig+0x268>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d013      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a61      	ldr	r2, [pc, #388]	; (800b9ac <DMA_SetConfig+0x26c>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d00e      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a5f      	ldr	r2, [pc, #380]	; (800b9b0 <DMA_SetConfig+0x270>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d009      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a5e      	ldr	r2, [pc, #376]	; (800b9b4 <DMA_SetConfig+0x274>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d004      	beq.n	800b84a <DMA_SetConfig+0x10a>
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a5c      	ldr	r2, [pc, #368]	; (800b9b8 <DMA_SetConfig+0x278>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d101      	bne.n	800b84e <DMA_SetConfig+0x10e>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e000      	b.n	800b850 <DMA_SetConfig+0x110>
 800b84e:	2300      	movs	r3, #0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00d      	beq.n	800b870 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b85c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b862:	2b00      	cmp	r3, #0
 800b864:	d004      	beq.n	800b870 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b86e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a39      	ldr	r2, [pc, #228]	; (800b95c <DMA_SetConfig+0x21c>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d04a      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a38      	ldr	r2, [pc, #224]	; (800b960 <DMA_SetConfig+0x220>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d045      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a36      	ldr	r2, [pc, #216]	; (800b964 <DMA_SetConfig+0x224>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d040      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a35      	ldr	r2, [pc, #212]	; (800b968 <DMA_SetConfig+0x228>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d03b      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a33      	ldr	r2, [pc, #204]	; (800b96c <DMA_SetConfig+0x22c>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d036      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a32      	ldr	r2, [pc, #200]	; (800b970 <DMA_SetConfig+0x230>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d031      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a30      	ldr	r2, [pc, #192]	; (800b974 <DMA_SetConfig+0x234>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d02c      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a2f      	ldr	r2, [pc, #188]	; (800b978 <DMA_SetConfig+0x238>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d027      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a2d      	ldr	r2, [pc, #180]	; (800b97c <DMA_SetConfig+0x23c>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d022      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a2c      	ldr	r2, [pc, #176]	; (800b980 <DMA_SetConfig+0x240>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d01d      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a2a      	ldr	r2, [pc, #168]	; (800b984 <DMA_SetConfig+0x244>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d018      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a29      	ldr	r2, [pc, #164]	; (800b988 <DMA_SetConfig+0x248>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d013      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a27      	ldr	r2, [pc, #156]	; (800b98c <DMA_SetConfig+0x24c>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d00e      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a26      	ldr	r2, [pc, #152]	; (800b990 <DMA_SetConfig+0x250>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d009      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a24      	ldr	r2, [pc, #144]	; (800b994 <DMA_SetConfig+0x254>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d004      	beq.n	800b910 <DMA_SetConfig+0x1d0>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a23      	ldr	r2, [pc, #140]	; (800b998 <DMA_SetConfig+0x258>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d101      	bne.n	800b914 <DMA_SetConfig+0x1d4>
 800b910:	2301      	movs	r3, #1
 800b912:	e000      	b.n	800b916 <DMA_SetConfig+0x1d6>
 800b914:	2300      	movs	r3, #0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d059      	beq.n	800b9ce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b91e:	f003 031f 	and.w	r3, r3, #31
 800b922:	223f      	movs	r2, #63	; 0x3f
 800b924:	409a      	lsls	r2, r3
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b938:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	2b40      	cmp	r3, #64	; 0x40
 800b948:	d138      	bne.n	800b9bc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68ba      	ldr	r2, [r7, #8]
 800b958:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b95a:	e0ae      	b.n	800baba <DMA_SetConfig+0x37a>
 800b95c:	40020010 	.word	0x40020010
 800b960:	40020028 	.word	0x40020028
 800b964:	40020040 	.word	0x40020040
 800b968:	40020058 	.word	0x40020058
 800b96c:	40020070 	.word	0x40020070
 800b970:	40020088 	.word	0x40020088
 800b974:	400200a0 	.word	0x400200a0
 800b978:	400200b8 	.word	0x400200b8
 800b97c:	40020410 	.word	0x40020410
 800b980:	40020428 	.word	0x40020428
 800b984:	40020440 	.word	0x40020440
 800b988:	40020458 	.word	0x40020458
 800b98c:	40020470 	.word	0x40020470
 800b990:	40020488 	.word	0x40020488
 800b994:	400204a0 	.word	0x400204a0
 800b998:	400204b8 	.word	0x400204b8
 800b99c:	58025408 	.word	0x58025408
 800b9a0:	5802541c 	.word	0x5802541c
 800b9a4:	58025430 	.word	0x58025430
 800b9a8:	58025444 	.word	0x58025444
 800b9ac:	58025458 	.word	0x58025458
 800b9b0:	5802546c 	.word	0x5802546c
 800b9b4:	58025480 	.word	0x58025480
 800b9b8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	60da      	str	r2, [r3, #12]
}
 800b9cc:	e075      	b.n	800baba <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a3d      	ldr	r2, [pc, #244]	; (800bac8 <DMA_SetConfig+0x388>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d04a      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a3b      	ldr	r2, [pc, #236]	; (800bacc <DMA_SetConfig+0x38c>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d045      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a3a      	ldr	r2, [pc, #232]	; (800bad0 <DMA_SetConfig+0x390>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d040      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a38      	ldr	r2, [pc, #224]	; (800bad4 <DMA_SetConfig+0x394>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d03b      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a37      	ldr	r2, [pc, #220]	; (800bad8 <DMA_SetConfig+0x398>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d036      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a35      	ldr	r2, [pc, #212]	; (800badc <DMA_SetConfig+0x39c>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d031      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a34      	ldr	r2, [pc, #208]	; (800bae0 <DMA_SetConfig+0x3a0>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d02c      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a32      	ldr	r2, [pc, #200]	; (800bae4 <DMA_SetConfig+0x3a4>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d027      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a31      	ldr	r2, [pc, #196]	; (800bae8 <DMA_SetConfig+0x3a8>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d022      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a2f      	ldr	r2, [pc, #188]	; (800baec <DMA_SetConfig+0x3ac>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d01d      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a2e      	ldr	r2, [pc, #184]	; (800baf0 <DMA_SetConfig+0x3b0>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d018      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a2c      	ldr	r2, [pc, #176]	; (800baf4 <DMA_SetConfig+0x3b4>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d013      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a2b      	ldr	r2, [pc, #172]	; (800baf8 <DMA_SetConfig+0x3b8>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d00e      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a29      	ldr	r2, [pc, #164]	; (800bafc <DMA_SetConfig+0x3bc>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d009      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a28      	ldr	r2, [pc, #160]	; (800bb00 <DMA_SetConfig+0x3c0>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d004      	beq.n	800ba6e <DMA_SetConfig+0x32e>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a26      	ldr	r2, [pc, #152]	; (800bb04 <DMA_SetConfig+0x3c4>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d101      	bne.n	800ba72 <DMA_SetConfig+0x332>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e000      	b.n	800ba74 <DMA_SetConfig+0x334>
 800ba72:	2300      	movs	r3, #0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d020      	beq.n	800baba <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba7c:	f003 031f 	and.w	r3, r3, #31
 800ba80:	2201      	movs	r2, #1
 800ba82:	409a      	lsls	r2, r3
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	2b40      	cmp	r3, #64	; 0x40
 800ba96:	d108      	bne.n	800baaa <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	60da      	str	r2, [r3, #12]
}
 800baa8:	e007      	b.n	800baba <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	60da      	str	r2, [r3, #12]
}
 800baba:	bf00      	nop
 800babc:	371c      	adds	r7, #28
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop
 800bac8:	48022c08 	.word	0x48022c08
 800bacc:	48022c1c 	.word	0x48022c1c
 800bad0:	48022c30 	.word	0x48022c30
 800bad4:	48022c44 	.word	0x48022c44
 800bad8:	48022c58 	.word	0x48022c58
 800badc:	48022c6c 	.word	0x48022c6c
 800bae0:	48022c80 	.word	0x48022c80
 800bae4:	48022c94 	.word	0x48022c94
 800bae8:	58025408 	.word	0x58025408
 800baec:	5802541c 	.word	0x5802541c
 800baf0:	58025430 	.word	0x58025430
 800baf4:	58025444 	.word	0x58025444
 800baf8:	58025458 	.word	0x58025458
 800bafc:	5802546c 	.word	0x5802546c
 800bb00:	58025480 	.word	0x58025480
 800bb04:	58025494 	.word	0x58025494

0800bb08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a42      	ldr	r2, [pc, #264]	; (800bc20 <DMA_CalcBaseAndBitshift+0x118>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d04a      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a41      	ldr	r2, [pc, #260]	; (800bc24 <DMA_CalcBaseAndBitshift+0x11c>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d045      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a3f      	ldr	r2, [pc, #252]	; (800bc28 <DMA_CalcBaseAndBitshift+0x120>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d040      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a3e      	ldr	r2, [pc, #248]	; (800bc2c <DMA_CalcBaseAndBitshift+0x124>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d03b      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a3c      	ldr	r2, [pc, #240]	; (800bc30 <DMA_CalcBaseAndBitshift+0x128>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d036      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a3b      	ldr	r2, [pc, #236]	; (800bc34 <DMA_CalcBaseAndBitshift+0x12c>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d031      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a39      	ldr	r2, [pc, #228]	; (800bc38 <DMA_CalcBaseAndBitshift+0x130>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d02c      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a38      	ldr	r2, [pc, #224]	; (800bc3c <DMA_CalcBaseAndBitshift+0x134>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d027      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a36      	ldr	r2, [pc, #216]	; (800bc40 <DMA_CalcBaseAndBitshift+0x138>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d022      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a35      	ldr	r2, [pc, #212]	; (800bc44 <DMA_CalcBaseAndBitshift+0x13c>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d01d      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a33      	ldr	r2, [pc, #204]	; (800bc48 <DMA_CalcBaseAndBitshift+0x140>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d018      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a32      	ldr	r2, [pc, #200]	; (800bc4c <DMA_CalcBaseAndBitshift+0x144>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d013      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a30      	ldr	r2, [pc, #192]	; (800bc50 <DMA_CalcBaseAndBitshift+0x148>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d00e      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a2f      	ldr	r2, [pc, #188]	; (800bc54 <DMA_CalcBaseAndBitshift+0x14c>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d009      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a2d      	ldr	r2, [pc, #180]	; (800bc58 <DMA_CalcBaseAndBitshift+0x150>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d004      	beq.n	800bbb0 <DMA_CalcBaseAndBitshift+0xa8>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a2c      	ldr	r2, [pc, #176]	; (800bc5c <DMA_CalcBaseAndBitshift+0x154>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d101      	bne.n	800bbb4 <DMA_CalcBaseAndBitshift+0xac>
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e000      	b.n	800bbb6 <DMA_CalcBaseAndBitshift+0xae>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d024      	beq.n	800bc04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	3b10      	subs	r3, #16
 800bbc2:	4a27      	ldr	r2, [pc, #156]	; (800bc60 <DMA_CalcBaseAndBitshift+0x158>)
 800bbc4:	fba2 2303 	umull	r2, r3, r2, r3
 800bbc8:	091b      	lsrs	r3, r3, #4
 800bbca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f003 0307 	and.w	r3, r3, #7
 800bbd2:	4a24      	ldr	r2, [pc, #144]	; (800bc64 <DMA_CalcBaseAndBitshift+0x15c>)
 800bbd4:	5cd3      	ldrb	r3, [r2, r3]
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d908      	bls.n	800bbf4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	4b1f      	ldr	r3, [pc, #124]	; (800bc68 <DMA_CalcBaseAndBitshift+0x160>)
 800bbea:	4013      	ands	r3, r2
 800bbec:	1d1a      	adds	r2, r3, #4
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	659a      	str	r2, [r3, #88]	; 0x58
 800bbf2:	e00d      	b.n	800bc10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4b1b      	ldr	r3, [pc, #108]	; (800bc68 <DMA_CalcBaseAndBitshift+0x160>)
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	6593      	str	r3, [r2, #88]	; 0x58
 800bc02:	e005      	b.n	800bc10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	40020010 	.word	0x40020010
 800bc24:	40020028 	.word	0x40020028
 800bc28:	40020040 	.word	0x40020040
 800bc2c:	40020058 	.word	0x40020058
 800bc30:	40020070 	.word	0x40020070
 800bc34:	40020088 	.word	0x40020088
 800bc38:	400200a0 	.word	0x400200a0
 800bc3c:	400200b8 	.word	0x400200b8
 800bc40:	40020410 	.word	0x40020410
 800bc44:	40020428 	.word	0x40020428
 800bc48:	40020440 	.word	0x40020440
 800bc4c:	40020458 	.word	0x40020458
 800bc50:	40020470 	.word	0x40020470
 800bc54:	40020488 	.word	0x40020488
 800bc58:	400204a0 	.word	0x400204a0
 800bc5c:	400204b8 	.word	0x400204b8
 800bc60:	aaaaaaab 	.word	0xaaaaaaab
 800bc64:	08019d20 	.word	0x08019d20
 800bc68:	fffffc00 	.word	0xfffffc00

0800bc6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	699b      	ldr	r3, [r3, #24]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d120      	bne.n	800bcc2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	d858      	bhi.n	800bd3a <DMA_CheckFifoParam+0xce>
 800bc88:	a201      	add	r2, pc, #4	; (adr r2, 800bc90 <DMA_CheckFifoParam+0x24>)
 800bc8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8e:	bf00      	nop
 800bc90:	0800bca1 	.word	0x0800bca1
 800bc94:	0800bcb3 	.word	0x0800bcb3
 800bc98:	0800bca1 	.word	0x0800bca1
 800bc9c:	0800bd3b 	.word	0x0800bd3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d048      	beq.n	800bd3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bcb0:	e045      	b.n	800bd3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bcba:	d142      	bne.n	800bd42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bcc0:	e03f      	b.n	800bd42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	699b      	ldr	r3, [r3, #24]
 800bcc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcca:	d123      	bne.n	800bd14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd0:	2b03      	cmp	r3, #3
 800bcd2:	d838      	bhi.n	800bd46 <DMA_CheckFifoParam+0xda>
 800bcd4:	a201      	add	r2, pc, #4	; (adr r2, 800bcdc <DMA_CheckFifoParam+0x70>)
 800bcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcda:	bf00      	nop
 800bcdc:	0800bced 	.word	0x0800bced
 800bce0:	0800bcf3 	.word	0x0800bcf3
 800bce4:	0800bced 	.word	0x0800bced
 800bce8:	0800bd05 	.word	0x0800bd05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	73fb      	strb	r3, [r7, #15]
        break;
 800bcf0:	e030      	b.n	800bd54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d025      	beq.n	800bd4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bd02:	e022      	b.n	800bd4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bd0c:	d11f      	bne.n	800bd4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bd12:	e01c      	b.n	800bd4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d902      	bls.n	800bd22 <DMA_CheckFifoParam+0xb6>
 800bd1c:	2b03      	cmp	r3, #3
 800bd1e:	d003      	beq.n	800bd28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800bd20:	e018      	b.n	800bd54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	73fb      	strb	r3, [r7, #15]
        break;
 800bd26:	e015      	b.n	800bd54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00e      	beq.n	800bd52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	73fb      	strb	r3, [r7, #15]
    break;
 800bd38:	e00b      	b.n	800bd52 <DMA_CheckFifoParam+0xe6>
        break;
 800bd3a:	bf00      	nop
 800bd3c:	e00a      	b.n	800bd54 <DMA_CheckFifoParam+0xe8>
        break;
 800bd3e:	bf00      	nop
 800bd40:	e008      	b.n	800bd54 <DMA_CheckFifoParam+0xe8>
        break;
 800bd42:	bf00      	nop
 800bd44:	e006      	b.n	800bd54 <DMA_CheckFifoParam+0xe8>
        break;
 800bd46:	bf00      	nop
 800bd48:	e004      	b.n	800bd54 <DMA_CheckFifoParam+0xe8>
        break;
 800bd4a:	bf00      	nop
 800bd4c:	e002      	b.n	800bd54 <DMA_CheckFifoParam+0xe8>
        break;
 800bd4e:	bf00      	nop
 800bd50:	e000      	b.n	800bd54 <DMA_CheckFifoParam+0xe8>
    break;
 800bd52:	bf00      	nop
    }
  }

  return status;
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3714      	adds	r7, #20
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop

0800bd64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a38      	ldr	r2, [pc, #224]	; (800be58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d022      	beq.n	800bdc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a36      	ldr	r2, [pc, #216]	; (800be5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d01d      	beq.n	800bdc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a35      	ldr	r2, [pc, #212]	; (800be60 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d018      	beq.n	800bdc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a33      	ldr	r2, [pc, #204]	; (800be64 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d013      	beq.n	800bdc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a32      	ldr	r2, [pc, #200]	; (800be68 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d00e      	beq.n	800bdc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a30      	ldr	r2, [pc, #192]	; (800be6c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d009      	beq.n	800bdc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a2f      	ldr	r2, [pc, #188]	; (800be70 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d004      	beq.n	800bdc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a2d      	ldr	r2, [pc, #180]	; (800be74 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d101      	bne.n	800bdc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e000      	b.n	800bdc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d01a      	beq.n	800be02 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	3b08      	subs	r3, #8
 800bdd4:	4a28      	ldr	r2, [pc, #160]	; (800be78 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800bdd6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdda:	091b      	lsrs	r3, r3, #4
 800bddc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	4b26      	ldr	r3, [pc, #152]	; (800be7c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800bde2:	4413      	add	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	461a      	mov	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a24      	ldr	r2, [pc, #144]	; (800be80 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800bdf0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f003 031f 	and.w	r3, r3, #31
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	409a      	lsls	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800be00:	e024      	b.n	800be4c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	b2db      	uxtb	r3, r3
 800be08:	3b10      	subs	r3, #16
 800be0a:	4a1e      	ldr	r2, [pc, #120]	; (800be84 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800be0c:	fba2 2303 	umull	r2, r3, r2, r3
 800be10:	091b      	lsrs	r3, r3, #4
 800be12:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	4a1c      	ldr	r2, [pc, #112]	; (800be88 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d806      	bhi.n	800be2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	4a1b      	ldr	r2, [pc, #108]	; (800be8c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d902      	bls.n	800be2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	3308      	adds	r3, #8
 800be28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	4b18      	ldr	r3, [pc, #96]	; (800be90 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800be2e:	4413      	add	r3, r2
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	461a      	mov	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a16      	ldr	r2, [pc, #88]	; (800be94 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800be3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f003 031f 	and.w	r3, r3, #31
 800be44:	2201      	movs	r2, #1
 800be46:	409a      	lsls	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800be4c:	bf00      	nop
 800be4e:	3714      	adds	r7, #20
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	58025408 	.word	0x58025408
 800be5c:	5802541c 	.word	0x5802541c
 800be60:	58025430 	.word	0x58025430
 800be64:	58025444 	.word	0x58025444
 800be68:	58025458 	.word	0x58025458
 800be6c:	5802546c 	.word	0x5802546c
 800be70:	58025480 	.word	0x58025480
 800be74:	58025494 	.word	0x58025494
 800be78:	cccccccd 	.word	0xcccccccd
 800be7c:	16009600 	.word	0x16009600
 800be80:	58025880 	.word	0x58025880
 800be84:	aaaaaaab 	.word	0xaaaaaaab
 800be88:	400204b8 	.word	0x400204b8
 800be8c:	4002040f 	.word	0x4002040f
 800be90:	10008200 	.word	0x10008200
 800be94:	40020880 	.word	0x40020880

0800be98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d04a      	beq.n	800bf44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2b08      	cmp	r3, #8
 800beb2:	d847      	bhi.n	800bf44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a25      	ldr	r2, [pc, #148]	; (800bf50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d022      	beq.n	800bf04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4a24      	ldr	r2, [pc, #144]	; (800bf54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d01d      	beq.n	800bf04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a22      	ldr	r2, [pc, #136]	; (800bf58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d018      	beq.n	800bf04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a21      	ldr	r2, [pc, #132]	; (800bf5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d013      	beq.n	800bf04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a1f      	ldr	r2, [pc, #124]	; (800bf60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d00e      	beq.n	800bf04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a1e      	ldr	r2, [pc, #120]	; (800bf64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d009      	beq.n	800bf04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a1c      	ldr	r2, [pc, #112]	; (800bf68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d004      	beq.n	800bf04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a1b      	ldr	r2, [pc, #108]	; (800bf6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d101      	bne.n	800bf08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800bf04:	2301      	movs	r3, #1
 800bf06:	e000      	b.n	800bf0a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00a      	beq.n	800bf24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	4b17      	ldr	r3, [pc, #92]	; (800bf70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800bf12:	4413      	add	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	461a      	mov	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a15      	ldr	r2, [pc, #84]	; (800bf74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800bf20:	671a      	str	r2, [r3, #112]	; 0x70
 800bf22:	e009      	b.n	800bf38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	4b14      	ldr	r3, [pc, #80]	; (800bf78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800bf28:	4413      	add	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a11      	ldr	r2, [pc, #68]	; (800bf7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800bf36:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	409a      	lsls	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800bf44:	bf00      	nop
 800bf46:	3714      	adds	r7, #20
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr
 800bf50:	58025408 	.word	0x58025408
 800bf54:	5802541c 	.word	0x5802541c
 800bf58:	58025430 	.word	0x58025430
 800bf5c:	58025444 	.word	0x58025444
 800bf60:	58025458 	.word	0x58025458
 800bf64:	5802546c 	.word	0x5802546c
 800bf68:	58025480 	.word	0x58025480
 800bf6c:	58025494 	.word	0x58025494
 800bf70:	1600963f 	.word	0x1600963f
 800bf74:	58025940 	.word	0x58025940
 800bf78:	1000823f 	.word	0x1000823f
 800bf7c:	40020940 	.word	0x40020940

0800bf80 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d101      	bne.n	800bf92 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e04f      	b.n	800c032 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d106      	bne.n	800bfac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7fa f844 	bl	8006034 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2202      	movs	r2, #2
 800bfb0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	4b20      	ldr	r3, [pc, #128]	; (800c03c <HAL_DMA2D_Init+0xbc>)
 800bfbc:	4013      	ands	r3, r2
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	6851      	ldr	r1, [r2, #4]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	69d2      	ldr	r2, [r2, #28]
 800bfc6:	4311      	orrs	r1, r2
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	6812      	ldr	r2, [r2, #0]
 800bfcc:	430b      	orrs	r3, r1
 800bfce:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfd6:	4b1a      	ldr	r3, [pc, #104]	; (800c040 <HAL_DMA2D_Init+0xc0>)
 800bfd8:	4013      	ands	r3, r2
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	6891      	ldr	r1, [r2, #8]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	6992      	ldr	r2, [r2, #24]
 800bfe2:	4311      	orrs	r1, r2
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	6812      	ldr	r2, [r2, #0]
 800bfe8:	430b      	orrs	r3, r1
 800bfea:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bff2:	4b14      	ldr	r3, [pc, #80]	; (800c044 <HAL_DMA2D_Init+0xc4>)
 800bff4:	4013      	ands	r3, r2
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	68d1      	ldr	r1, [r2, #12]
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	6812      	ldr	r2, [r2, #0]
 800bffe:	430b      	orrs	r3, r1
 800c000:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c008:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	051a      	lsls	r2, r3, #20
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	695b      	ldr	r3, [r3, #20]
 800c016:	055b      	lsls	r3, r3, #21
 800c018:	431a      	orrs	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3708      	adds	r7, #8
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	fff8ffbf 	.word	0xfff8ffbf
 800c040:	fffffef8 	.word	0xfffffef8
 800c044:	ffff0000 	.word	0xffff0000

0800c048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c048:	b480      	push	{r7}
 800c04a:	b089      	sub	sp, #36	; 0x24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c052:	2300      	movs	r3, #0
 800c054:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c056:	4b89      	ldr	r3, [pc, #548]	; (800c27c <HAL_GPIO_Init+0x234>)
 800c058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c05a:	e194      	b.n	800c386 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	2101      	movs	r1, #1
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	fa01 f303 	lsl.w	r3, r1, r3
 800c068:	4013      	ands	r3, r2
 800c06a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f000 8186 	beq.w	800c380 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	f003 0303 	and.w	r3, r3, #3
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d005      	beq.n	800c08c <HAL_GPIO_Init+0x44>
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	f003 0303 	and.w	r3, r3, #3
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d130      	bne.n	800c0ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c092:	69fb      	ldr	r3, [r7, #28]
 800c094:	005b      	lsls	r3, r3, #1
 800c096:	2203      	movs	r2, #3
 800c098:	fa02 f303 	lsl.w	r3, r2, r3
 800c09c:	43db      	mvns	r3, r3
 800c09e:	69ba      	ldr	r2, [r7, #24]
 800c0a0:	4013      	ands	r3, r2
 800c0a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	68da      	ldr	r2, [r3, #12]
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	005b      	lsls	r3, r3, #1
 800c0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	69ba      	ldr	r2, [r7, #24]
 800c0ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ca:	43db      	mvns	r3, r3
 800c0cc:	69ba      	ldr	r2, [r7, #24]
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	091b      	lsrs	r3, r3, #4
 800c0d8:	f003 0201 	and.w	r2, r3, #1
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e2:	69ba      	ldr	r2, [r7, #24]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	69ba      	ldr	r2, [r7, #24]
 800c0ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	f003 0303 	and.w	r3, r3, #3
 800c0f6:	2b03      	cmp	r3, #3
 800c0f8:	d017      	beq.n	800c12a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	005b      	lsls	r3, r3, #1
 800c104:	2203      	movs	r2, #3
 800c106:	fa02 f303 	lsl.w	r3, r2, r3
 800c10a:	43db      	mvns	r3, r3
 800c10c:	69ba      	ldr	r2, [r7, #24]
 800c10e:	4013      	ands	r3, r2
 800c110:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	689a      	ldr	r2, [r3, #8]
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	005b      	lsls	r3, r3, #1
 800c11a:	fa02 f303 	lsl.w	r3, r2, r3
 800c11e:	69ba      	ldr	r2, [r7, #24]
 800c120:	4313      	orrs	r3, r2
 800c122:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	69ba      	ldr	r2, [r7, #24]
 800c128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	f003 0303 	and.w	r3, r3, #3
 800c132:	2b02      	cmp	r3, #2
 800c134:	d123      	bne.n	800c17e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	08da      	lsrs	r2, r3, #3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	3208      	adds	r2, #8
 800c13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	f003 0307 	and.w	r3, r3, #7
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	220f      	movs	r2, #15
 800c14e:	fa02 f303 	lsl.w	r3, r2, r3
 800c152:	43db      	mvns	r3, r3
 800c154:	69ba      	ldr	r2, [r7, #24]
 800c156:	4013      	ands	r3, r2
 800c158:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	691a      	ldr	r2, [r3, #16]
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	f003 0307 	and.w	r3, r3, #7
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	fa02 f303 	lsl.w	r3, r2, r3
 800c16a:	69ba      	ldr	r2, [r7, #24]
 800c16c:	4313      	orrs	r3, r2
 800c16e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	08da      	lsrs	r2, r3, #3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	3208      	adds	r2, #8
 800c178:	69b9      	ldr	r1, [r7, #24]
 800c17a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	005b      	lsls	r3, r3, #1
 800c188:	2203      	movs	r2, #3
 800c18a:	fa02 f303 	lsl.w	r3, r2, r3
 800c18e:	43db      	mvns	r3, r3
 800c190:	69ba      	ldr	r2, [r7, #24]
 800c192:	4013      	ands	r3, r2
 800c194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	f003 0203 	and.w	r2, r3, #3
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	005b      	lsls	r3, r3, #1
 800c1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a6:	69ba      	ldr	r2, [r7, #24]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	69ba      	ldr	r2, [r7, #24]
 800c1b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f000 80e0 	beq.w	800c380 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c1c0:	4b2f      	ldr	r3, [pc, #188]	; (800c280 <HAL_GPIO_Init+0x238>)
 800c1c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c1c6:	4a2e      	ldr	r2, [pc, #184]	; (800c280 <HAL_GPIO_Init+0x238>)
 800c1c8:	f043 0302 	orr.w	r3, r3, #2
 800c1cc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800c1d0:	4b2b      	ldr	r3, [pc, #172]	; (800c280 <HAL_GPIO_Init+0x238>)
 800c1d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c1d6:	f003 0302 	and.w	r3, r3, #2
 800c1da:	60fb      	str	r3, [r7, #12]
 800c1dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c1de:	4a29      	ldr	r2, [pc, #164]	; (800c284 <HAL_GPIO_Init+0x23c>)
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	089b      	lsrs	r3, r3, #2
 800c1e4:	3302      	adds	r3, #2
 800c1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	f003 0303 	and.w	r3, r3, #3
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	220f      	movs	r2, #15
 800c1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1fa:	43db      	mvns	r3, r3
 800c1fc:	69ba      	ldr	r2, [r7, #24]
 800c1fe:	4013      	ands	r3, r2
 800c200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a20      	ldr	r2, [pc, #128]	; (800c288 <HAL_GPIO_Init+0x240>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d052      	beq.n	800c2b0 <HAL_GPIO_Init+0x268>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	4a1f      	ldr	r2, [pc, #124]	; (800c28c <HAL_GPIO_Init+0x244>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d031      	beq.n	800c276 <HAL_GPIO_Init+0x22e>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a1e      	ldr	r2, [pc, #120]	; (800c290 <HAL_GPIO_Init+0x248>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d02b      	beq.n	800c272 <HAL_GPIO_Init+0x22a>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4a1d      	ldr	r2, [pc, #116]	; (800c294 <HAL_GPIO_Init+0x24c>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d025      	beq.n	800c26e <HAL_GPIO_Init+0x226>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a1c      	ldr	r2, [pc, #112]	; (800c298 <HAL_GPIO_Init+0x250>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d01f      	beq.n	800c26a <HAL_GPIO_Init+0x222>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4a1b      	ldr	r2, [pc, #108]	; (800c29c <HAL_GPIO_Init+0x254>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d019      	beq.n	800c266 <HAL_GPIO_Init+0x21e>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4a1a      	ldr	r2, [pc, #104]	; (800c2a0 <HAL_GPIO_Init+0x258>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d013      	beq.n	800c262 <HAL_GPIO_Init+0x21a>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a19      	ldr	r2, [pc, #100]	; (800c2a4 <HAL_GPIO_Init+0x25c>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d00d      	beq.n	800c25e <HAL_GPIO_Init+0x216>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4a18      	ldr	r2, [pc, #96]	; (800c2a8 <HAL_GPIO_Init+0x260>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d007      	beq.n	800c25a <HAL_GPIO_Init+0x212>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a17      	ldr	r2, [pc, #92]	; (800c2ac <HAL_GPIO_Init+0x264>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d101      	bne.n	800c256 <HAL_GPIO_Init+0x20e>
 800c252:	2309      	movs	r3, #9
 800c254:	e02d      	b.n	800c2b2 <HAL_GPIO_Init+0x26a>
 800c256:	230a      	movs	r3, #10
 800c258:	e02b      	b.n	800c2b2 <HAL_GPIO_Init+0x26a>
 800c25a:	2308      	movs	r3, #8
 800c25c:	e029      	b.n	800c2b2 <HAL_GPIO_Init+0x26a>
 800c25e:	2307      	movs	r3, #7
 800c260:	e027      	b.n	800c2b2 <HAL_GPIO_Init+0x26a>
 800c262:	2306      	movs	r3, #6
 800c264:	e025      	b.n	800c2b2 <HAL_GPIO_Init+0x26a>
 800c266:	2305      	movs	r3, #5
 800c268:	e023      	b.n	800c2b2 <HAL_GPIO_Init+0x26a>
 800c26a:	2304      	movs	r3, #4
 800c26c:	e021      	b.n	800c2b2 <HAL_GPIO_Init+0x26a>
 800c26e:	2303      	movs	r3, #3
 800c270:	e01f      	b.n	800c2b2 <HAL_GPIO_Init+0x26a>
 800c272:	2302      	movs	r3, #2
 800c274:	e01d      	b.n	800c2b2 <HAL_GPIO_Init+0x26a>
 800c276:	2301      	movs	r3, #1
 800c278:	e01b      	b.n	800c2b2 <HAL_GPIO_Init+0x26a>
 800c27a:	bf00      	nop
 800c27c:	58000080 	.word	0x58000080
 800c280:	58024400 	.word	0x58024400
 800c284:	58000400 	.word	0x58000400
 800c288:	58020000 	.word	0x58020000
 800c28c:	58020400 	.word	0x58020400
 800c290:	58020800 	.word	0x58020800
 800c294:	58020c00 	.word	0x58020c00
 800c298:	58021000 	.word	0x58021000
 800c29c:	58021400 	.word	0x58021400
 800c2a0:	58021800 	.word	0x58021800
 800c2a4:	58021c00 	.word	0x58021c00
 800c2a8:	58022000 	.word	0x58022000
 800c2ac:	58022400 	.word	0x58022400
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	69fa      	ldr	r2, [r7, #28]
 800c2b4:	f002 0203 	and.w	r2, r2, #3
 800c2b8:	0092      	lsls	r2, r2, #2
 800c2ba:	4093      	lsls	r3, r2
 800c2bc:	69ba      	ldr	r2, [r7, #24]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c2c2:	4938      	ldr	r1, [pc, #224]	; (800c3a4 <HAL_GPIO_Init+0x35c>)
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	089b      	lsrs	r3, r3, #2
 800c2c8:	3302      	adds	r3, #2
 800c2ca:	69ba      	ldr	r2, [r7, #24]
 800c2cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c2d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	43db      	mvns	r3, r3
 800c2dc:	69ba      	ldr	r2, [r7, #24]
 800c2de:	4013      	ands	r3, r2
 800c2e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c2ee:	69ba      	ldr	r2, [r7, #24]
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c2f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c2fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	43db      	mvns	r3, r3
 800c30a:	69ba      	ldr	r2, [r7, #24]
 800c30c:	4013      	ands	r3, r2
 800c30e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c31c:	69ba      	ldr	r2, [r7, #24]
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	4313      	orrs	r3, r2
 800c322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	43db      	mvns	r3, r3
 800c336:	69ba      	ldr	r2, [r7, #24]
 800c338:	4013      	ands	r3, r2
 800c33a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c344:	2b00      	cmp	r3, #0
 800c346:	d003      	beq.n	800c350 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800c348:	69ba      	ldr	r2, [r7, #24]
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	4313      	orrs	r3, r2
 800c34e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	69ba      	ldr	r2, [r7, #24]
 800c354:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	43db      	mvns	r3, r3
 800c360:	69ba      	ldr	r2, [r7, #24]
 800c362:	4013      	ands	r3, r2
 800c364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d003      	beq.n	800c37a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800c372:	69ba      	ldr	r2, [r7, #24]
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	4313      	orrs	r3, r2
 800c378:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	69ba      	ldr	r2, [r7, #24]
 800c37e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	3301      	adds	r3, #1
 800c384:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	fa22 f303 	lsr.w	r3, r2, r3
 800c390:	2b00      	cmp	r3, #0
 800c392:	f47f ae63 	bne.w	800c05c <HAL_GPIO_Init+0x14>
  }
}
 800c396:	bf00      	nop
 800c398:	bf00      	nop
 800c39a:	3724      	adds	r7, #36	; 0x24
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr
 800c3a4:	58000400 	.word	0x58000400

0800c3a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	691a      	ldr	r2, [r3, #16]
 800c3b8:	887b      	ldrh	r3, [r7, #2]
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	73fb      	strb	r3, [r7, #15]
 800c3c4:	e001      	b.n	800c3ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	807b      	strh	r3, [r7, #2]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c3e8:	787b      	ldrb	r3, [r7, #1]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c3ee:	887a      	ldrh	r2, [r7, #2]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800c3f4:	e003      	b.n	800c3fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c3f6:	887b      	ldrh	r3, [r7, #2]
 800c3f8:	041a      	lsls	r2, r3, #16
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	619a      	str	r2, [r3, #24]
}
 800c3fe:	bf00      	nop
 800c400:	370c      	adds	r7, #12
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr

0800c40a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b082      	sub	sp, #8
 800c40e:	af00      	add	r7, sp, #0
 800c410:	4603      	mov	r3, r0
 800c412:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800c414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c418:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c41c:	88fb      	ldrh	r3, [r7, #6]
 800c41e:	4013      	ands	r3, r2
 800c420:	2b00      	cmp	r3, #0
 800c422:	d008      	beq.n	800c436 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c428:	88fb      	ldrh	r3, [r7, #6]
 800c42a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c42e:	88fb      	ldrh	r3, [r7, #6]
 800c430:	4618      	mov	r0, r3
 800c432:	f000 f804 	bl	800c43e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800c436:	bf00      	nop
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c43e:	b480      	push	{r7}
 800c440:	b083      	sub	sp, #12
 800c442:	af00      	add	r7, sp, #0
 800c444:	4603      	mov	r3, r0
 800c446:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800c448:	bf00      	nop
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800c462:	2301      	movs	r3, #1
 800c464:	e0bf      	b.n	800c5e6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d106      	bne.n	800c480 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f7f9 fdfc 	bl	8006078 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2202      	movs	r2, #2
 800c484:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	699a      	ldr	r2, [r3, #24]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c496:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6999      	ldr	r1, [r3, #24]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c4ac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	691b      	ldr	r3, [r3, #16]
 800c4b2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	430a      	orrs	r2, r1
 800c4ba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6899      	ldr	r1, [r3, #8]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	4b4a      	ldr	r3, [pc, #296]	; (800c5f0 <HAL_LTDC_Init+0x19c>)
 800c4c8:	400b      	ands	r3, r1
 800c4ca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	695b      	ldr	r3, [r3, #20]
 800c4d0:	041b      	lsls	r3, r3, #16
 800c4d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	6899      	ldr	r1, [r3, #8]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	699a      	ldr	r2, [r3, #24]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	431a      	orrs	r2, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	430a      	orrs	r2, r1
 800c4e8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	68d9      	ldr	r1, [r3, #12]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	4b3e      	ldr	r3, [pc, #248]	; (800c5f0 <HAL_LTDC_Init+0x19c>)
 800c4f6:	400b      	ands	r3, r1
 800c4f8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	041b      	lsls	r3, r3, #16
 800c500:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68d9      	ldr	r1, [r3, #12]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a1a      	ldr	r2, [r3, #32]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	431a      	orrs	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	430a      	orrs	r2, r1
 800c516:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6919      	ldr	r1, [r3, #16]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	4b33      	ldr	r3, [pc, #204]	; (800c5f0 <HAL_LTDC_Init+0x19c>)
 800c524:	400b      	ands	r3, r1
 800c526:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52c:	041b      	lsls	r3, r3, #16
 800c52e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6919      	ldr	r1, [r3, #16]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	431a      	orrs	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	430a      	orrs	r2, r1
 800c544:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	6959      	ldr	r1, [r3, #20]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	4b27      	ldr	r3, [pc, #156]	; (800c5f0 <HAL_LTDC_Init+0x19c>)
 800c552:	400b      	ands	r3, r1
 800c554:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55a:	041b      	lsls	r3, r3, #16
 800c55c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	6959      	ldr	r1, [r3, #20]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	431a      	orrs	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	430a      	orrs	r2, r1
 800c572:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c57a:	021b      	lsls	r3, r3, #8
 800c57c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c584:	041b      	lsls	r3, r3, #16
 800c586:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c596:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c5aa:	431a      	orrs	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	430a      	orrs	r2, r1
 800c5b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f042 0206 	orr.w	r2, r2, #6
 800c5c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	699a      	ldr	r2, [r3, #24]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f042 0201 	orr.w	r2, r2, #1
 800c5d2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	f000f800 	.word	0xf000f800

0800c5f4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c602:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f003 0304 	and.w	r3, r3, #4
 800c612:	2b00      	cmp	r3, #0
 800c614:	d023      	beq.n	800c65e <HAL_LTDC_IRQHandler+0x6a>
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	f003 0304 	and.w	r3, r3, #4
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d01e      	beq.n	800c65e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f022 0204 	bic.w	r2, r2, #4
 800c62e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	2204      	movs	r2, #4
 800c636:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c63e:	f043 0201 	orr.w	r2, r3, #1
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2204      	movs	r2, #4
 800c64c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 f86f 	bl	800c73c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f003 0302 	and.w	r3, r3, #2
 800c664:	2b00      	cmp	r3, #0
 800c666:	d023      	beq.n	800c6b0 <HAL_LTDC_IRQHandler+0xbc>
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	f003 0302 	and.w	r3, r3, #2
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d01e      	beq.n	800c6b0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f022 0202 	bic.w	r2, r2, #2
 800c680:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2202      	movs	r2, #2
 800c688:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c690:	f043 0202 	orr.w	r2, r3, #2
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2204      	movs	r2, #4
 800c69e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f846 	bl	800c73c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f003 0301 	and.w	r3, r3, #1
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d01b      	beq.n	800c6f2 <HAL_LTDC_IRQHandler+0xfe>
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	f003 0301 	and.w	r3, r3, #1
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d016      	beq.n	800c6f2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f022 0201 	bic.w	r2, r2, #1
 800c6d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f82f 	bl	800c750 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f003 0308 	and.w	r3, r3, #8
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d01b      	beq.n	800c734 <HAL_LTDC_IRQHandler+0x140>
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	f003 0308 	and.w	r3, r3, #8
 800c702:	2b00      	cmp	r3, #0
 800c704:	d016      	beq.n	800c734 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f022 0208 	bic.w	r2, r2, #8
 800c714:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2208      	movs	r2, #8
 800c71c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7f7 fcdc 	bl	80040ec <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800c734:	bf00      	nop
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800c744:	bf00      	nop
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800c758:	bf00      	nop
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c764:	b5b0      	push	{r4, r5, r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c776:	2b01      	cmp	r3, #1
 800c778:	d101      	bne.n	800c77e <HAL_LTDC_ConfigLayer+0x1a>
 800c77a:	2302      	movs	r3, #2
 800c77c:	e02c      	b.n	800c7d8 <HAL_LTDC_ConfigLayer+0x74>
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2202      	movs	r2, #2
 800c78a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2134      	movs	r1, #52	; 0x34
 800c794:	fb01 f303 	mul.w	r3, r1, r3
 800c798:	4413      	add	r3, r2
 800c79a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	4614      	mov	r4, r2
 800c7a2:	461d      	mov	r5, r3
 800c7a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7b0:	682b      	ldr	r3, [r5, #0]
 800c7b2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	68b9      	ldr	r1, [r7, #8]
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f000 f877 	bl	800c8ac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3710      	adds	r7, #16
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bdb0      	pop	{r4, r5, r7, pc}

0800c7e0 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d101      	bne.n	800c7fa <HAL_LTDC_SetAddress+0x1a>
 800c7f6:	2302      	movs	r3, #2
 800c7f8:	e024      	b.n	800c844 <HAL_LTDC_SetAddress+0x64>
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2202      	movs	r2, #2
 800c806:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2234      	movs	r2, #52	; 0x34
 800c80e:	fb02 f303 	mul.w	r3, r2, r3
 800c812:	3338      	adds	r3, #56	; 0x38
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	4413      	add	r3, r2
 800c818:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	68ba      	ldr	r2, [r7, #8]
 800c81e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	6979      	ldr	r1, [r7, #20]
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f000 f841 	bl	800c8ac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2201      	movs	r2, #1
 800c830:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2200      	movs	r2, #0
 800c83e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	3718      	adds	r7, #24
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d101      	bne.n	800c864 <HAL_LTDC_Reload+0x18>
 800c860:	2302      	movs	r3, #2
 800c862:	e01c      	b.n	800c89e <HAL_LTDC_Reload+0x52>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2202      	movs	r2, #2
 800c870:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f042 0208 	orr.w	r2, r2, #8
 800c882:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	683a      	ldr	r2, [r7, #0]
 800c88a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2201      	movs	r2, #1
 800c890:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	370c      	adds	r7, #12
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
	...

0800c8ac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b089      	sub	sp, #36	; 0x24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	685a      	ldr	r2, [r3, #4]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	0c1b      	lsrs	r3, r3, #16
 800c8c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8c8:	4413      	add	r3, r2
 800c8ca:	041b      	lsls	r3, r3, #16
 800c8cc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	01db      	lsls	r3, r3, #7
 800c8d8:	4413      	add	r3, r2
 800c8da:	3384      	adds	r3, #132	; 0x84
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	6812      	ldr	r2, [r2, #0]
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	01d2      	lsls	r2, r2, #7
 800c8e8:	440a      	add	r2, r1
 800c8ea:	3284      	adds	r2, #132	; 0x84
 800c8ec:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c8f0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	0c1b      	lsrs	r3, r3, #16
 800c8fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c902:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c904:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4619      	mov	r1, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	01db      	lsls	r3, r3, #7
 800c910:	440b      	add	r3, r1
 800c912:	3384      	adds	r3, #132	; 0x84
 800c914:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c91a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	68da      	ldr	r2, [r3, #12]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c92a:	4413      	add	r3, r2
 800c92c:	041b      	lsls	r3, r3, #16
 800c92e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	461a      	mov	r2, r3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	01db      	lsls	r3, r3, #7
 800c93a:	4413      	add	r3, r2
 800c93c:	3384      	adds	r3, #132	; 0x84
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	6812      	ldr	r2, [r2, #0]
 800c944:	4611      	mov	r1, r2
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	01d2      	lsls	r2, r2, #7
 800c94a:	440a      	add	r2, r1
 800c94c:	3284      	adds	r2, #132	; 0x84
 800c94e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c952:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	689a      	ldr	r2, [r3, #8]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c962:	4413      	add	r3, r2
 800c964:	1c5a      	adds	r2, r3, #1
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4619      	mov	r1, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	01db      	lsls	r3, r3, #7
 800c970:	440b      	add	r3, r1
 800c972:	3384      	adds	r3, #132	; 0x84
 800c974:	4619      	mov	r1, r3
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	4313      	orrs	r3, r2
 800c97a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	461a      	mov	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	01db      	lsls	r3, r3, #7
 800c986:	4413      	add	r3, r2
 800c988:	3384      	adds	r3, #132	; 0x84
 800c98a:	691b      	ldr	r3, [r3, #16]
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	6812      	ldr	r2, [r2, #0]
 800c990:	4611      	mov	r1, r2
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	01d2      	lsls	r2, r2, #7
 800c996:	440a      	add	r2, r1
 800c998:	3284      	adds	r2, #132	; 0x84
 800c99a:	f023 0307 	bic.w	r3, r3, #7
 800c99e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	01db      	lsls	r3, r3, #7
 800c9aa:	4413      	add	r3, r2
 800c9ac:	3384      	adds	r3, #132	; 0x84
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c9bc:	021b      	lsls	r3, r3, #8
 800c9be:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c9c6:	041b      	lsls	r3, r3, #16
 800c9c8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	699b      	ldr	r3, [r3, #24]
 800c9ce:	061b      	lsls	r3, r3, #24
 800c9d0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	01db      	lsls	r3, r3, #7
 800c9dc:	4413      	add	r3, r2
 800c9de:	3384      	adds	r3, #132	; 0x84
 800c9e0:	699b      	ldr	r3, [r3, #24]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	01db      	lsls	r3, r3, #7
 800c9ec:	4413      	add	r3, r2
 800c9ee:	3384      	adds	r3, #132	; 0x84
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	431a      	orrs	r2, r3
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	431a      	orrs	r2, r3
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	01db      	lsls	r3, r3, #7
 800ca10:	440b      	add	r3, r1
 800ca12:	3384      	adds	r3, #132	; 0x84
 800ca14:	4619      	mov	r1, r3
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	461a      	mov	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	01db      	lsls	r3, r3, #7
 800ca26:	4413      	add	r3, r2
 800ca28:	3384      	adds	r3, #132	; 0x84
 800ca2a:	695b      	ldr	r3, [r3, #20]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	6812      	ldr	r2, [r2, #0]
 800ca30:	4611      	mov	r1, r2
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	01d2      	lsls	r2, r2, #7
 800ca36:	440a      	add	r2, r1
 800ca38:	3284      	adds	r2, #132	; 0x84
 800ca3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca3e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	461a      	mov	r2, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	01db      	lsls	r3, r3, #7
 800ca4a:	4413      	add	r3, r2
 800ca4c:	3384      	adds	r3, #132	; 0x84
 800ca4e:	461a      	mov	r2, r3
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	695b      	ldr	r3, [r3, #20]
 800ca54:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	01db      	lsls	r3, r3, #7
 800ca60:	4413      	add	r3, r2
 800ca62:	3384      	adds	r3, #132	; 0x84
 800ca64:	69da      	ldr	r2, [r3, #28]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	01db      	lsls	r3, r3, #7
 800ca70:	440b      	add	r3, r1
 800ca72:	3384      	adds	r3, #132	; 0x84
 800ca74:	4619      	mov	r1, r3
 800ca76:	4b58      	ldr	r3, [pc, #352]	; (800cbd8 <LTDC_SetConfig+0x32c>)
 800ca78:	4013      	ands	r3, r2
 800ca7a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	69da      	ldr	r2, [r3, #28]
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	6a1b      	ldr	r3, [r3, #32]
 800ca84:	68f9      	ldr	r1, [r7, #12]
 800ca86:	6809      	ldr	r1, [r1, #0]
 800ca88:	4608      	mov	r0, r1
 800ca8a:	6879      	ldr	r1, [r7, #4]
 800ca8c:	01c9      	lsls	r1, r1, #7
 800ca8e:	4401      	add	r1, r0
 800ca90:	3184      	adds	r1, #132	; 0x84
 800ca92:	4313      	orrs	r3, r2
 800ca94:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	01db      	lsls	r3, r3, #7
 800caa0:	4413      	add	r3, r2
 800caa2:	3384      	adds	r3, #132	; 0x84
 800caa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	461a      	mov	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	01db      	lsls	r3, r3, #7
 800cab0:	4413      	add	r3, r2
 800cab2:	3384      	adds	r3, #132	; 0x84
 800cab4:	461a      	mov	r2, r3
 800cab6:	2300      	movs	r3, #0
 800cab8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	461a      	mov	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	01db      	lsls	r3, r3, #7
 800cac4:	4413      	add	r3, r2
 800cac6:	3384      	adds	r3, #132	; 0x84
 800cac8:	461a      	mov	r2, r3
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cace:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d102      	bne.n	800cade <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800cad8:	2304      	movs	r3, #4
 800cada:	61fb      	str	r3, [r7, #28]
 800cadc:	e01b      	b.n	800cb16 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d102      	bne.n	800caec <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800cae6:	2303      	movs	r3, #3
 800cae8:	61fb      	str	r3, [r7, #28]
 800caea:	e014      	b.n	800cb16 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	691b      	ldr	r3, [r3, #16]
 800caf0:	2b04      	cmp	r3, #4
 800caf2:	d00b      	beq.n	800cb0c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d007      	beq.n	800cb0c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800cb00:	2b03      	cmp	r3, #3
 800cb02:	d003      	beq.n	800cb0c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800cb08:	2b07      	cmp	r3, #7
 800cb0a:	d102      	bne.n	800cb12 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	61fb      	str	r3, [r7, #28]
 800cb10:	e001      	b.n	800cb16 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800cb12:	2301      	movs	r3, #1
 800cb14:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	01db      	lsls	r3, r3, #7
 800cb20:	4413      	add	r3, r2
 800cb22:	3384      	adds	r3, #132	; 0x84
 800cb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	6812      	ldr	r2, [r2, #0]
 800cb2a:	4611      	mov	r1, r2
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	01d2      	lsls	r2, r2, #7
 800cb30:	440a      	add	r2, r1
 800cb32:	3284      	adds	r2, #132	; 0x84
 800cb34:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800cb38:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb3e:	69fa      	ldr	r2, [r7, #28]
 800cb40:	fb02 f303 	mul.w	r3, r2, r3
 800cb44:	041a      	lsls	r2, r3, #16
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	6859      	ldr	r1, [r3, #4]
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	1acb      	subs	r3, r1, r3
 800cb50:	69f9      	ldr	r1, [r7, #28]
 800cb52:	fb01 f303 	mul.w	r3, r1, r3
 800cb56:	3307      	adds	r3, #7
 800cb58:	68f9      	ldr	r1, [r7, #12]
 800cb5a:	6809      	ldr	r1, [r1, #0]
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	6879      	ldr	r1, [r7, #4]
 800cb60:	01c9      	lsls	r1, r1, #7
 800cb62:	4401      	add	r1, r0
 800cb64:	3184      	adds	r1, #132	; 0x84
 800cb66:	4313      	orrs	r3, r2
 800cb68:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	01db      	lsls	r3, r3, #7
 800cb74:	4413      	add	r3, r2
 800cb76:	3384      	adds	r3, #132	; 0x84
 800cb78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4619      	mov	r1, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	01db      	lsls	r3, r3, #7
 800cb84:	440b      	add	r3, r1
 800cb86:	3384      	adds	r3, #132	; 0x84
 800cb88:	4619      	mov	r1, r3
 800cb8a:	4b14      	ldr	r3, [pc, #80]	; (800cbdc <LTDC_SetConfig+0x330>)
 800cb8c:	4013      	ands	r3, r2
 800cb8e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	461a      	mov	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	01db      	lsls	r3, r3, #7
 800cb9a:	4413      	add	r3, r2
 800cb9c:	3384      	adds	r3, #132	; 0x84
 800cb9e:	461a      	mov	r2, r3
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	01db      	lsls	r3, r3, #7
 800cbb0:	4413      	add	r3, r2
 800cbb2:	3384      	adds	r3, #132	; 0x84
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	6812      	ldr	r2, [r2, #0]
 800cbba:	4611      	mov	r1, r2
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	01d2      	lsls	r2, r2, #7
 800cbc0:	440a      	add	r2, r1
 800cbc2:	3284      	adds	r2, #132	; 0x84
 800cbc4:	f043 0301 	orr.w	r3, r3, #1
 800cbc8:	6013      	str	r3, [r2, #0]
}
 800cbca:	bf00      	nop
 800cbcc:	3724      	adds	r7, #36	; 0x24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	fffff8f8 	.word	0xfffff8f8
 800cbdc:	fffff800 	.word	0xfffff800

0800cbe0 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d101      	bne.n	800cbf2 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e017      	b.n	800cc22 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	2b02      	cmp	r3, #2
 800cbfc:	d004      	beq.n	800cc08 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2280      	movs	r2, #128	; 0x80
 800cc02:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e00c      	b.n	800cc22 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2204      	movs	r2, #4
 800cc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	68da      	ldr	r2, [r3, #12]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f022 0201 	bic.w	r2, r2, #1
 800cc1e:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	370c      	adds	r7, #12
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr
	...

0800cc30 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af02      	add	r7, sp, #8
 800cc36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800cc3c:	f7fa f86e 	bl	8006d1c <HAL_GetTick>
 800cc40:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d102      	bne.n	800cc4e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	73fb      	strb	r3, [r7, #15]
 800cc4c:	e0a5      	b.n	800cd9a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f040 809e 	bne.w	800cd9a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7f9 fb48 	bl	80062f4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800cc64:	f241 3188 	movw	r1, #5000	; 0x1388
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 fc21 	bl	800d4b0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	689a      	ldr	r2, [r3, #8]
 800cc74:	4b4b      	ldr	r3, [pc, #300]	; (800cda4 <HAL_OSPI_Init+0x174>)
 800cc76:	4013      	ands	r3, r2
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	68d1      	ldr	r1, [r2, #12]
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	6912      	ldr	r2, [r2, #16]
 800cc80:	3a01      	subs	r2, #1
 800cc82:	0412      	lsls	r2, r2, #16
 800cc84:	4311      	orrs	r1, r2
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	6952      	ldr	r2, [r2, #20]
 800cc8a:	3a01      	subs	r2, #1
 800cc8c:	0212      	lsls	r2, r2, #8
 800cc8e:	4311      	orrs	r1, r2
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cc94:	4311      	orrs	r1, r2
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	69d2      	ldr	r2, [r2, #28]
 800cc9a:	4311      	orrs	r1, r2
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	6812      	ldr	r2, [r2, #0]
 800cca0:	430b      	orrs	r3, r1
 800cca2:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a1a      	ldr	r2, [r3, #32]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	430a      	orrs	r2, r1
 800ccb8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccbe:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	430a      	orrs	r2, r1
 800ccca:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ccd4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	3b01      	subs	r3, #1
 800cce6:	021a      	lsls	r2, r3, #8
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	430a      	orrs	r2, r1
 800ccee:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	2120      	movs	r1, #32
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f001 f90b 	bl	800df18 <OSPI_WaitFlagStateUntilTimeout>
 800cd02:	4603      	mov	r3, r0
 800cd04:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d146      	bne.n	800cd9a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1a:	1e5a      	subs	r2, r3, #1
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	430a      	orrs	r2, r1
 800cd22:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	689a      	ldr	r2, [r3, #8]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	430a      	orrs	r2, r1
 800cd38:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cd42:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4e:	431a      	orrs	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	430a      	orrs	r2, r1
 800cd56:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f042 0201 	orr.w	r2, r2, #1
 800cd68:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	699b      	ldr	r3, [r3, #24]
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d107      	bne.n	800cd82 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	689a      	ldr	r2, [r3, #8]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f042 0202 	orr.w	r2, r2, #2
 800cd80:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cd8a:	d103      	bne.n	800cd94 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	651a      	str	r2, [r3, #80]	; 0x50
 800cd92:	e002      	b.n	800cd9a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2202      	movs	r2, #2
 800cd98:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800cd9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	f8e0f8f4 	.word	0xf8e0f8f4

0800cda8 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	3350      	adds	r3, #80	; 0x50
 800cdb6:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	6a1b      	ldr	r3, [r3, #32]
 800cdbe:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdcc:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	f003 0304 	and.w	r3, r3, #4
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d03a      	beq.n	800ce4e <HAL_OSPI_IRQHandler+0xa6>
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d035      	beq.n	800ce4e <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b18      	cmp	r3, #24
 800cde6:	d10f      	bne.n	800ce08 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdec:	781a      	ldrb	r2, [r3, #0]
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf6:	1c5a      	adds	r2, r3, #1
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce00:	1e5a      	subs	r2, r3, #1
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	649a      	str	r2, [r3, #72]	; 0x48
 800ce06:	e012      	b.n	800ce2e <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2b28      	cmp	r3, #40	; 0x28
 800ce0c:	d10f      	bne.n	800ce2e <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce12:	697a      	ldr	r2, [r7, #20]
 800ce14:	7812      	ldrb	r2, [r2, #0]
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce1e:	1c5a      	adds	r2, r3, #1
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce28:	1e5a      	subs	r2, r3, #1
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d107      	bne.n	800ce46 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ce44:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 faf6 	bl	800d438 <HAL_OSPI_FifoThresholdCallback>
 800ce4c:	e0e7      	b.n	800d01e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	f003 0302 	and.w	r3, r3, #2
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d067      	beq.n	800cf28 <HAL_OSPI_IRQHandler+0x180>
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d062      	beq.n	800cf28 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	2b28      	cmp	r3, #40	; 0x28
 800ce66:	d131      	bne.n	800cecc <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d015      	beq.n	800ce9c <HAL_OSPI_IRQHandler+0xf4>
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d010      	beq.n	800ce9c <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce7e:	697a      	ldr	r2, [r7, #20]
 800ce80:	7812      	ldrb	r2, [r2, #0]
 800ce82:	b2d2      	uxtb	r2, r2
 800ce84:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8a:	1c5a      	adds	r2, r3, #1
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce94:	1e5a      	subs	r2, r3, #1
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800ce9a:	e0bd      	b.n	800d018 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f040 80b9 	bne.w	800d018 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2202      	movs	r2, #2
 800ceac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800cebc:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2202      	movs	r2, #2
 800cec2:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 facb 	bl	800d460 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800ceca:	e0a5      	b.n	800d018 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2202      	movs	r2, #2
 800ced2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800cee2:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2202      	movs	r2, #2
 800cee8:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2b18      	cmp	r3, #24
 800ceee:	d103      	bne.n	800cef8 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 fabf 	bl	800d474 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800cef6:	e08f      	b.n	800d018 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2b08      	cmp	r3, #8
 800cefc:	d103      	bne.n	800cf06 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 faa4 	bl	800d44c <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800cf04:	e088      	b.n	800d018 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf0c:	f040 8084 	bne.w	800d018 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d103      	bne.n	800cf20 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 fa83 	bl	800d424 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800cf1e:	e07b      	b.n	800d018 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 fa75 	bl	800d410 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800cf26:	e077      	b.n	800d018 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	f003 0308 	and.w	r3, r3, #8
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d01e      	beq.n	800cf70 <HAL_OSPI_IRQHandler+0x1c8>
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d019      	beq.n	800cf70 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2208      	movs	r2, #8
 800cf42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00a      	beq.n	800cf68 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800cf60:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2202      	movs	r2, #2
 800cf66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 fa8d 	bl	800d488 <HAL_OSPI_StatusMatchCallback>
 800cf6e:	e056      	b.n	800d01e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	f003 0301 	and.w	r3, r3, #1
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d03c      	beq.n	800cff4 <HAL_OSPI_IRQHandler+0x24c>
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d037      	beq.n	800cff4 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800cf9a:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2202      	movs	r2, #2
 800cfa0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f003 0304 	and.w	r3, r3, #4
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d01a      	beq.n	800cfe6 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f022 0204 	bic.w	r2, r2, #4
 800cfbe:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfc4:	4a18      	ldr	r2, [pc, #96]	; (800d028 <HAL_OSPI_IRQHandler+0x280>)
 800cfc6:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7ff fe07 	bl	800cbe0 <HAL_MDMA_Abort_IT>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d021      	beq.n	800d01c <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2202      	movs	r2, #2
 800cfdc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fa16 	bl	800d410 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800cfe4:	e01a      	b.n	800d01c <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2202      	movs	r2, #2
 800cfea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 fa0f 	bl	800d410 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800cff2:	e013      	b.n	800d01c <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	f003 0310 	and.w	r3, r3, #16
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00f      	beq.n	800d01e <HAL_OSPI_IRQHandler+0x276>
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00a      	beq.n	800d01e <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2210      	movs	r2, #16
 800d00e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 fa43 	bl	800d49c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d016:	e002      	b.n	800d01e <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d018:	bf00      	nop
 800d01a:	e000      	b.n	800d01e <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800d01c:	bf00      	nop
}
 800d01e:	bf00      	nop
 800d020:	3718      	adds	r7, #24
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	0800dea1 	.word	0x0800dea1

0800d02c <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b08a      	sub	sp, #40	; 0x28
 800d030:	af02      	add	r7, sp, #8
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800d038:	f7f9 fe70 	bl	8006d1c <HAL_GetTick>
 800d03c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d042:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d048:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d104      	bne.n	800d05a <HAL_OSPI_Command+0x2e>
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d058:	d115      	bne.n	800d086 <HAL_OSPI_Command+0x5a>
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	2b14      	cmp	r3, #20
 800d05e:	d107      	bne.n	800d070 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2b02      	cmp	r3, #2
 800d066:	d00e      	beq.n	800d086 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b03      	cmp	r3, #3
 800d06e:	d00a      	beq.n	800d086 <HAL_OSPI_Command+0x5a>
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	2b24      	cmp	r3, #36	; 0x24
 800d074:	d15b      	bne.n	800d12e <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d003      	beq.n	800d086 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800d082:	2b03      	cmp	r3, #3
 800d084:	d153      	bne.n	800d12e <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	2200      	movs	r2, #0
 800d08e:	2120      	movs	r1, #32
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f000 ff41 	bl	800df18 <OSPI_WaitFlagStateUntilTimeout>
 800d096:	4603      	mov	r3, r0
 800d098:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800d09a:	7ffb      	ldrb	r3, [r7, #31]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d14c      	bne.n	800d13a <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800d0a6:	68b9      	ldr	r1, [r7, #8]
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f000 ff6d 	bl	800df88 <OSPI_ConfigCmd>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800d0b2:	7ffb      	ldrb	r3, [r7, #31]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d140      	bne.n	800d13a <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10e      	bne.n	800d0de <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	2102      	movs	r1, #2
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f000 ff24 	bl	800df18 <OSPI_WaitFlagStateUntilTimeout>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2202      	movs	r2, #2
 800d0da:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800d0dc:	e02d      	b.n	800d13a <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d103      	bne.n	800d0ee <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2204      	movs	r2, #4
 800d0ea:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800d0ec:	e025      	b.n	800d13a <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d10b      	bne.n	800d10e <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0fa:	2b24      	cmp	r3, #36	; 0x24
 800d0fc:	d103      	bne.n	800d106 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2204      	movs	r2, #4
 800d102:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800d104:	e019      	b.n	800d13a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2214      	movs	r2, #20
 800d10a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800d10c:	e015      	b.n	800d13a <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b02      	cmp	r3, #2
 800d114:	d111      	bne.n	800d13a <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d11a:	2b14      	cmp	r3, #20
 800d11c:	d103      	bne.n	800d126 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2204      	movs	r2, #4
 800d122:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800d124:	e009      	b.n	800d13a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2224      	movs	r2, #36	; 0x24
 800d12a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800d12c:	e005      	b.n	800d13a <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2210      	movs	r2, #16
 800d136:	655a      	str	r2, [r3, #84]	; 0x54
 800d138:	e000      	b.n	800d13c <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800d13a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800d13c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3720      	adds	r7, #32
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b08a      	sub	sp, #40	; 0x28
 800d14a:	af02      	add	r7, sp, #8
 800d14c:	60f8      	str	r0, [r7, #12]
 800d14e:	60b9      	str	r1, [r7, #8]
 800d150:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d152:	f7f9 fde3 	bl	8006d1c <HAL_GetTick>
 800d156:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3350      	adds	r3, #80	; 0x50
 800d15e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d105      	bne.n	800d172 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800d166:	2301      	movs	r3, #1
 800d168:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2208      	movs	r2, #8
 800d16e:	655a      	str	r2, [r3, #84]	; 0x54
 800d170:	e057      	b.n	800d222 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d176:	2b04      	cmp	r3, #4
 800d178:	d14e      	bne.n	800d218 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d180:	1c5a      	adds	r2, r3, #1
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	68ba      	ldr	r2, [r7, #8]
 800d192:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800d1a2:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	2104      	movs	r1, #4
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f000 feb2 	bl	800df18 <OSPI_WaitFlagStateUntilTimeout>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800d1b8:	7ffb      	ldrb	r3, [r7, #31]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d113      	bne.n	800d1e6 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1c2:	781a      	ldrb	r2, [r3, #0]
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1cc:	1c5a      	adds	r2, r3, #1
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1d6:	1e5a      	subs	r2, r3, #1
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1df      	bne.n	800d1a4 <HAL_OSPI_Transmit+0x5e>
 800d1e4:	e000      	b.n	800d1e8 <HAL_OSPI_Transmit+0xa2>
          break;
 800d1e6:	bf00      	nop

      if (status == HAL_OK)
 800d1e8:	7ffb      	ldrb	r3, [r7, #31]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d119      	bne.n	800d222 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	2102      	movs	r1, #2
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f000 fe8d 	bl	800df18 <OSPI_WaitFlagStateUntilTimeout>
 800d1fe:	4603      	mov	r3, r0
 800d200:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800d202:	7ffb      	ldrb	r3, [r7, #31]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10c      	bne.n	800d222 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2202      	movs	r2, #2
 800d20e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2202      	movs	r2, #2
 800d214:	651a      	str	r2, [r3, #80]	; 0x50
 800d216:	e004      	b.n	800d222 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800d218:	2301      	movs	r3, #1
 800d21a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2210      	movs	r2, #16
 800d220:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800d222:	7ffb      	ldrb	r3, [r7, #31]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3720      	adds	r7, #32
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b08c      	sub	sp, #48	; 0x30
 800d230:	af02      	add	r7, sp, #8
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d238:	f7f9 fd70 	bl	8006d1c <HAL_GetTick>
 800d23c:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	3350      	adds	r3, #80	; 0x50
 800d244:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d24c:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800d256:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d106      	bne.n	800d26c <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800d25e:	2301      	movs	r3, #1
 800d260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2208      	movs	r2, #8
 800d268:	655a      	str	r2, [r3, #84]	; 0x54
 800d26a:	e07c      	b.n	800d366 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d270:	2b04      	cmp	r3, #4
 800d272:	d172      	bne.n	800d35a <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27a:	1c5a      	adds	r2, r3, #1
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	68ba      	ldr	r2, [r7, #8]
 800d28c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d2a0:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d2aa:	d104      	bne.n	800d2b6 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	69ba      	ldr	r2, [r7, #24]
 800d2b2:	649a      	str	r2, [r3, #72]	; 0x48
 800d2b4:	e011      	b.n	800d2da <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d2be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d004      	beq.n	800d2d0 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	69ba      	ldr	r2, [r7, #24]
 800d2cc:	649a      	str	r2, [r3, #72]	; 0x48
 800d2ce:	e004      	b.n	800d2da <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	697a      	ldr	r2, [r7, #20]
 800d2d6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	6a3b      	ldr	r3, [r7, #32]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	2106      	movs	r1, #6
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f000 fe17 	bl	800df18 <OSPI_WaitFlagStateUntilTimeout>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800d2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d114      	bne.n	800d322 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fc:	69fa      	ldr	r2, [r7, #28]
 800d2fe:	7812      	ldrb	r2, [r2, #0]
 800d300:	b2d2      	uxtb	r2, r2
 800d302:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d308:	1c5a      	adds	r2, r3, #1
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d312:	1e5a      	subs	r2, r3, #1
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1dc      	bne.n	800d2da <HAL_OSPI_Receive+0xae>
 800d320:	e000      	b.n	800d324 <HAL_OSPI_Receive+0xf8>
          break;
 800d322:	bf00      	nop

      if (status == HAL_OK)
 800d324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d11c      	bne.n	800d366 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	2201      	movs	r2, #1
 800d334:	2102      	movs	r1, #2
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f000 fdee 	bl	800df18 <OSPI_WaitFlagStateUntilTimeout>
 800d33c:	4603      	mov	r3, r0
 800d33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800d342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10d      	bne.n	800d366 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2202      	movs	r2, #2
 800d350:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2202      	movs	r2, #2
 800d356:	651a      	str	r2, [r3, #80]	; 0x50
 800d358:	e005      	b.n	800d366 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800d35a:	2301      	movs	r3, #1
 800d35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2210      	movs	r2, #16
 800d364:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800d366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3728      	adds	r7, #40	; 0x28
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
	...

0800d374 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b086      	sub	sp, #24
 800d378:	af02      	add	r7, sp, #8
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d37e:	f7f9 fccd 	bl	8006d1c <HAL_GetTick>
 800d382:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d388:	2b04      	cmp	r3, #4
 800d38a:	d134      	bne.n	800d3f6 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	2200      	movs	r2, #0
 800d396:	2120      	movs	r1, #32
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 fdbd 	bl	800df18 <OSPI_WaitFlagStateUntilTimeout>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d3a2:	7bfb      	ldrb	r3, [r7, #15]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d12b      	bne.n	800d400 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2288      	movs	r2, #136	; 0x88
 800d3ac:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b08      	cmp	r3, #8
 800d3b4:	d111      	bne.n	800d3da <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	683a      	ldr	r2, [r7, #0]
 800d3bc:	6852      	ldr	r2, [r2, #4]
 800d3be:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2210      	movs	r2, #16
 800d3c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d3d8:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	4b0a      	ldr	r3, [pc, #40]	; (800d40c <HAL_OSPI_MemoryMapped+0x98>)
 800d3e2:	4013      	ands	r3, r2
 800d3e4:	683a      	ldr	r2, [r7, #0]
 800d3e6:	6812      	ldr	r2, [r2, #0]
 800d3e8:	431a      	orrs	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	e004      	b.n	800d400 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2210      	movs	r2, #16
 800d3fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 800d400:	7bfb      	ldrb	r3, [r7, #15]
}
 800d402:	4618      	mov	r0, r3
 800d404:	3710      	adds	r7, #16
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	cffffff7 	.word	0xcffffff7

0800d410 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800d418:	bf00      	nop
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr

0800d424 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800d42c:	bf00      	nop
 800d42e:	370c      	adds	r7, #12
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800d440:	bf00      	nop
 800d442:	370c      	adds	r7, #12
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800d454:	bf00      	nop
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800d468:	bf00      	nop
 800d46a:	370c      	adds	r7, #12
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800d47c:	bf00      	nop
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	683a      	ldr	r2, [r7, #0]
 800d4be:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	370c      	adds	r7, #12
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
	...

0800d4d0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b094      	sub	sp, #80	; 0x50
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a9d      	ldr	r2, [pc, #628]	; (800d764 <HAL_OSPIM_Config+0x294>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d105      	bne.n	800d4fe <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800d4fc:	e004      	b.n	800d508 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800d4fe:	2301      	movs	r3, #1
 800d500:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 800d502:	2300      	movs	r3, #0
 800d504:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800d508:	2300      	movs	r3, #0
 800d50a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d50e:	e01d      	b.n	800d54c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 800d510:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d514:	3301      	adds	r3, #1
 800d516:	b2d8      	uxtb	r0, r3
 800d518:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800d51c:	f107 0114 	add.w	r1, r7, #20
 800d520:	4613      	mov	r3, r2
 800d522:	005b      	lsls	r3, r3, #1
 800d524:	4413      	add	r3, r2
 800d526:	00db      	lsls	r3, r3, #3
 800d528:	440b      	add	r3, r1
 800d52a:	4619      	mov	r1, r3
 800d52c:	f000 fea6 	bl	800e27c <OSPIM_GetConfig>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d005      	beq.n	800d542 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800d536:	2301      	movs	r3, #1
 800d538:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2208      	movs	r2, #8
 800d540:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800d542:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d546:	3301      	adds	r3, #1
 800d548:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d54c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d550:	2b01      	cmp	r3, #1
 800d552:	d9dd      	bls.n	800d510 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800d554:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f040 8495 	bne.w	800de88 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800d55e:	4b81      	ldr	r3, [pc, #516]	; (800d764 <HAL_OSPIM_Config+0x294>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00b      	beq.n	800d582 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800d56a:	4b7e      	ldr	r3, [pc, #504]	; (800d764 <HAL_OSPIM_Config+0x294>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a7d      	ldr	r2, [pc, #500]	; (800d764 <HAL_OSPIM_Config+0x294>)
 800d570:	f023 0301 	bic.w	r3, r3, #1
 800d574:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800d576:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d57a:	f043 0301 	orr.w	r3, r3, #1
 800d57e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800d582:	4b79      	ldr	r3, [pc, #484]	; (800d768 <HAL_OSPIM_Config+0x298>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f003 0301 	and.w	r3, r3, #1
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00b      	beq.n	800d5a6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800d58e:	4b76      	ldr	r3, [pc, #472]	; (800d768 <HAL_OSPIM_Config+0x298>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4a75      	ldr	r2, [pc, #468]	; (800d768 <HAL_OSPIM_Config+0x298>)
 800d594:	f023 0301 	bic.w	r3, r3, #1
 800d598:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800d59a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d59e:	f043 0302 	orr.w	r3, r3, #2
 800d5a2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800d5a6:	4971      	ldr	r1, [pc, #452]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d5a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	005b      	lsls	r3, r3, #1
 800d5ae:	4413      	add	r3, r2
 800d5b0:	00db      	lsls	r3, r3, #3
 800d5b2:	3350      	adds	r3, #80	; 0x50
 800d5b4:	443b      	add	r3, r7
 800d5b6:	3b34      	subs	r3, #52	; 0x34
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	440b      	add	r3, r1
 800d5c0:	6859      	ldr	r1, [r3, #4]
 800d5c2:	486a      	ldr	r0, [pc, #424]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d5c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	005b      	lsls	r3, r3, #1
 800d5ca:	4413      	add	r3, r2
 800d5cc:	00db      	lsls	r3, r3, #3
 800d5ce:	3350      	adds	r3, #80	; 0x50
 800d5d0:	443b      	add	r3, r7
 800d5d2:	3b34      	subs	r3, #52	; 0x34
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	3b01      	subs	r3, #1
 800d5d8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	4403      	add	r3, r0
 800d5e0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800d5e2:	4b62      	ldr	r3, [pc, #392]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f003 0301 	and.w	r3, r3, #1
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f000 80c0 	beq.w	800d770 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800d5f0:	4b5e      	ldr	r3, [pc, #376]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a5d      	ldr	r2, [pc, #372]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d5f6:	f023 0301 	bic.w	r3, r3, #1
 800d5fa:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800d5fc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d600:	2b01      	cmp	r3, #1
 800d602:	f040 8162 	bne.w	800d8ca <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 800d606:	4959      	ldr	r1, [pc, #356]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d608:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d60c:	4613      	mov	r3, r2
 800d60e:	005b      	lsls	r3, r3, #1
 800d610:	4413      	add	r3, r2
 800d612:	00db      	lsls	r3, r3, #3
 800d614:	3350      	adds	r3, #80	; 0x50
 800d616:	443b      	add	r3, r7
 800d618:	3b3c      	subs	r3, #60	; 0x3c
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	3b01      	subs	r3, #1
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	440b      	add	r3, r1
 800d622:	6859      	ldr	r1, [r3, #4]
 800d624:	4851      	ldr	r0, [pc, #324]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d626:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d62a:	4613      	mov	r3, r2
 800d62c:	005b      	lsls	r3, r3, #1
 800d62e:	4413      	add	r3, r2
 800d630:	00db      	lsls	r3, r3, #3
 800d632:	3350      	adds	r3, #80	; 0x50
 800d634:	443b      	add	r3, r7
 800d636:	3b3c      	subs	r3, #60	; 0x3c
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3b01      	subs	r3, #1
 800d63c:	f041 0202 	orr.w	r2, r1, #2
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	4403      	add	r3, r0
 800d644:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800d646:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d64a:	4613      	mov	r3, r2
 800d64c:	005b      	lsls	r3, r3, #1
 800d64e:	4413      	add	r3, r2
 800d650:	00db      	lsls	r3, r3, #3
 800d652:	3350      	adds	r3, #80	; 0x50
 800d654:	443b      	add	r3, r7
 800d656:	3b38      	subs	r3, #56	; 0x38
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d01f      	beq.n	800d69e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 800d65e:	4943      	ldr	r1, [pc, #268]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d660:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d664:	4613      	mov	r3, r2
 800d666:	005b      	lsls	r3, r3, #1
 800d668:	4413      	add	r3, r2
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	3350      	adds	r3, #80	; 0x50
 800d66e:	443b      	add	r3, r7
 800d670:	3b38      	subs	r3, #56	; 0x38
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	3b01      	subs	r3, #1
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	440b      	add	r3, r1
 800d67a:	6859      	ldr	r1, [r3, #4]
 800d67c:	483b      	ldr	r0, [pc, #236]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d67e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d682:	4613      	mov	r3, r2
 800d684:	005b      	lsls	r3, r3, #1
 800d686:	4413      	add	r3, r2
 800d688:	00db      	lsls	r3, r3, #3
 800d68a:	3350      	adds	r3, #80	; 0x50
 800d68c:	443b      	add	r3, r7
 800d68e:	3b38      	subs	r3, #56	; 0x38
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	3b01      	subs	r3, #1
 800d694:	f041 0220 	orr.w	r2, r1, #32
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	4403      	add	r3, r0
 800d69c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800d69e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	4413      	add	r3, r2
 800d6a8:	00db      	lsls	r3, r3, #3
 800d6aa:	3350      	adds	r3, #80	; 0x50
 800d6ac:	443b      	add	r3, r7
 800d6ae:	3b30      	subs	r3, #48	; 0x30
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d023      	beq.n	800d6fe <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 800d6b6:	492d      	ldr	r1, [pc, #180]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d6b8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d6bc:	4613      	mov	r3, r2
 800d6be:	005b      	lsls	r3, r3, #1
 800d6c0:	4413      	add	r3, r2
 800d6c2:	00db      	lsls	r3, r3, #3
 800d6c4:	3350      	adds	r3, #80	; 0x50
 800d6c6:	443b      	add	r3, r7
 800d6c8:	3b30      	subs	r3, #48	; 0x30
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	f003 0301 	and.w	r3, r3, #1
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	440b      	add	r3, r1
 800d6d6:	6859      	ldr	r1, [r3, #4]
 800d6d8:	4824      	ldr	r0, [pc, #144]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d6da:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d6de:	4613      	mov	r3, r2
 800d6e0:	005b      	lsls	r3, r3, #1
 800d6e2:	4413      	add	r3, r2
 800d6e4:	00db      	lsls	r3, r3, #3
 800d6e6:	3350      	adds	r3, #80	; 0x50
 800d6e8:	443b      	add	r3, r7
 800d6ea:	3b30      	subs	r3, #48	; 0x30
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	f003 0301 	and.w	r3, r3, #1
 800d6f4:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800d6f8:	009b      	lsls	r3, r3, #2
 800d6fa:	4403      	add	r3, r0
 800d6fc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800d6fe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d702:	4613      	mov	r3, r2
 800d704:	005b      	lsls	r3, r3, #1
 800d706:	4413      	add	r3, r2
 800d708:	00db      	lsls	r3, r3, #3
 800d70a:	3350      	adds	r3, #80	; 0x50
 800d70c:	443b      	add	r3, r7
 800d70e:	3b2c      	subs	r3, #44	; 0x2c
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	f000 80d9 	beq.w	800d8ca <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 800d718:	4914      	ldr	r1, [pc, #80]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d71a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d71e:	4613      	mov	r3, r2
 800d720:	005b      	lsls	r3, r3, #1
 800d722:	4413      	add	r3, r2
 800d724:	00db      	lsls	r3, r3, #3
 800d726:	3350      	adds	r3, #80	; 0x50
 800d728:	443b      	add	r3, r7
 800d72a:	3b2c      	subs	r3, #44	; 0x2c
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	3b01      	subs	r3, #1
 800d730:	f003 0301 	and.w	r3, r3, #1
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	440b      	add	r3, r1
 800d738:	6859      	ldr	r1, [r3, #4]
 800d73a:	480c      	ldr	r0, [pc, #48]	; (800d76c <HAL_OSPIM_Config+0x29c>)
 800d73c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d740:	4613      	mov	r3, r2
 800d742:	005b      	lsls	r3, r3, #1
 800d744:	4413      	add	r3, r2
 800d746:	00db      	lsls	r3, r3, #3
 800d748:	3350      	adds	r3, #80	; 0x50
 800d74a:	443b      	add	r3, r7
 800d74c:	3b2c      	subs	r3, #44	; 0x2c
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	3b01      	subs	r3, #1
 800d752:	f003 0301 	and.w	r3, r3, #1
 800d756:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	4403      	add	r3, r0
 800d75e:	605a      	str	r2, [r3, #4]
 800d760:	e0b3      	b.n	800d8ca <HAL_OSPIM_Config+0x3fa>
 800d762:	bf00      	nop
 800d764:	52005000 	.word	0x52005000
 800d768:	5200a000 	.word	0x5200a000
 800d76c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800d770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d772:	4613      	mov	r3, r2
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	4413      	add	r3, r2
 800d778:	00db      	lsls	r3, r3, #3
 800d77a:	3350      	adds	r3, #80	; 0x50
 800d77c:	443b      	add	r3, r7
 800d77e:	3b3c      	subs	r3, #60	; 0x3c
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	f000 80a1 	beq.w	800d8ca <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800d788:	4993      	ldr	r1, [pc, #588]	; (800d9d8 <HAL_OSPIM_Config+0x508>)
 800d78a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d78c:	4613      	mov	r3, r2
 800d78e:	005b      	lsls	r3, r3, #1
 800d790:	4413      	add	r3, r2
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	3350      	adds	r3, #80	; 0x50
 800d796:	443b      	add	r3, r7
 800d798:	3b3c      	subs	r3, #60	; 0x3c
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	3b01      	subs	r3, #1
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	440b      	add	r3, r1
 800d7a2:	6859      	ldr	r1, [r3, #4]
 800d7a4:	488c      	ldr	r0, [pc, #560]	; (800d9d8 <HAL_OSPIM_Config+0x508>)
 800d7a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	005b      	lsls	r3, r3, #1
 800d7ac:	4413      	add	r3, r2
 800d7ae:	00db      	lsls	r3, r3, #3
 800d7b0:	3350      	adds	r3, #80	; 0x50
 800d7b2:	443b      	add	r3, r7
 800d7b4:	3b3c      	subs	r3, #60	; 0x3c
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	f021 0201 	bic.w	r2, r1, #1
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	4403      	add	r3, r0
 800d7c2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800d7c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7c6:	4613      	mov	r3, r2
 800d7c8:	005b      	lsls	r3, r3, #1
 800d7ca:	4413      	add	r3, r2
 800d7cc:	00db      	lsls	r3, r3, #3
 800d7ce:	3350      	adds	r3, #80	; 0x50
 800d7d0:	443b      	add	r3, r7
 800d7d2:	3b38      	subs	r3, #56	; 0x38
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d01d      	beq.n	800d816 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800d7da:	497f      	ldr	r1, [pc, #508]	; (800d9d8 <HAL_OSPIM_Config+0x508>)
 800d7dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7de:	4613      	mov	r3, r2
 800d7e0:	005b      	lsls	r3, r3, #1
 800d7e2:	4413      	add	r3, r2
 800d7e4:	00db      	lsls	r3, r3, #3
 800d7e6:	3350      	adds	r3, #80	; 0x50
 800d7e8:	443b      	add	r3, r7
 800d7ea:	3b38      	subs	r3, #56	; 0x38
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	440b      	add	r3, r1
 800d7f4:	6859      	ldr	r1, [r3, #4]
 800d7f6:	4878      	ldr	r0, [pc, #480]	; (800d9d8 <HAL_OSPIM_Config+0x508>)
 800d7f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	005b      	lsls	r3, r3, #1
 800d7fe:	4413      	add	r3, r2
 800d800:	00db      	lsls	r3, r3, #3
 800d802:	3350      	adds	r3, #80	; 0x50
 800d804:	443b      	add	r3, r7
 800d806:	3b38      	subs	r3, #56	; 0x38
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	3b01      	subs	r3, #1
 800d80c:	f021 0210 	bic.w	r2, r1, #16
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	4403      	add	r3, r0
 800d814:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800d816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d818:	4613      	mov	r3, r2
 800d81a:	005b      	lsls	r3, r3, #1
 800d81c:	4413      	add	r3, r2
 800d81e:	00db      	lsls	r3, r3, #3
 800d820:	3350      	adds	r3, #80	; 0x50
 800d822:	443b      	add	r3, r7
 800d824:	3b30      	subs	r3, #48	; 0x30
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d021      	beq.n	800d870 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800d82c:	496a      	ldr	r1, [pc, #424]	; (800d9d8 <HAL_OSPIM_Config+0x508>)
 800d82e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d830:	4613      	mov	r3, r2
 800d832:	005b      	lsls	r3, r3, #1
 800d834:	4413      	add	r3, r2
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	3350      	adds	r3, #80	; 0x50
 800d83a:	443b      	add	r3, r7
 800d83c:	3b30      	subs	r3, #48	; 0x30
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3b01      	subs	r3, #1
 800d842:	f003 0301 	and.w	r3, r3, #1
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	440b      	add	r3, r1
 800d84a:	6859      	ldr	r1, [r3, #4]
 800d84c:	4862      	ldr	r0, [pc, #392]	; (800d9d8 <HAL_OSPIM_Config+0x508>)
 800d84e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d850:	4613      	mov	r3, r2
 800d852:	005b      	lsls	r3, r3, #1
 800d854:	4413      	add	r3, r2
 800d856:	00db      	lsls	r3, r3, #3
 800d858:	3350      	adds	r3, #80	; 0x50
 800d85a:	443b      	add	r3, r7
 800d85c:	3b30      	subs	r3, #48	; 0x30
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	3b01      	subs	r3, #1
 800d862:	f003 0301 	and.w	r3, r3, #1
 800d866:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	4403      	add	r3, r0
 800d86e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800d870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d872:	4613      	mov	r3, r2
 800d874:	005b      	lsls	r3, r3, #1
 800d876:	4413      	add	r3, r2
 800d878:	00db      	lsls	r3, r3, #3
 800d87a:	3350      	adds	r3, #80	; 0x50
 800d87c:	443b      	add	r3, r7
 800d87e:	3b2c      	subs	r3, #44	; 0x2c
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d021      	beq.n	800d8ca <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800d886:	4954      	ldr	r1, [pc, #336]	; (800d9d8 <HAL_OSPIM_Config+0x508>)
 800d888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d88a:	4613      	mov	r3, r2
 800d88c:	005b      	lsls	r3, r3, #1
 800d88e:	4413      	add	r3, r2
 800d890:	00db      	lsls	r3, r3, #3
 800d892:	3350      	adds	r3, #80	; 0x50
 800d894:	443b      	add	r3, r7
 800d896:	3b2c      	subs	r3, #44	; 0x2c
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3b01      	subs	r3, #1
 800d89c:	f003 0301 	and.w	r3, r3, #1
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	440b      	add	r3, r1
 800d8a4:	6859      	ldr	r1, [r3, #4]
 800d8a6:	484c      	ldr	r0, [pc, #304]	; (800d9d8 <HAL_OSPIM_Config+0x508>)
 800d8a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8aa:	4613      	mov	r3, r2
 800d8ac:	005b      	lsls	r3, r3, #1
 800d8ae:	4413      	add	r3, r2
 800d8b0:	00db      	lsls	r3, r3, #3
 800d8b2:	3350      	adds	r3, #80	; 0x50
 800d8b4:	443b      	add	r3, r7
 800d8b6:	3b2c      	subs	r3, #44	; 0x2c
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	f003 0301 	and.w	r3, r3, #1
 800d8c0:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	4403      	add	r3, r0
 800d8c8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	6819      	ldr	r1, [r3, #0]
 800d8ce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	005b      	lsls	r3, r3, #1
 800d8d6:	4413      	add	r3, r2
 800d8d8:	00db      	lsls	r3, r3, #3
 800d8da:	3350      	adds	r3, #80	; 0x50
 800d8dc:	443b      	add	r3, r7
 800d8de:	3b3c      	subs	r3, #60	; 0x3c
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4299      	cmp	r1, r3
 800d8e4:	d038      	beq.n	800d958 <HAL_OSPIM_Config+0x488>
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	6859      	ldr	r1, [r3, #4]
 800d8ea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	4413      	add	r3, r2
 800d8f4:	00db      	lsls	r3, r3, #3
 800d8f6:	3350      	adds	r3, #80	; 0x50
 800d8f8:	443b      	add	r3, r7
 800d8fa:	3b38      	subs	r3, #56	; 0x38
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4299      	cmp	r1, r3
 800d900:	d02a      	beq.n	800d958 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	6899      	ldr	r1, [r3, #8]
 800d906:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d90a:	4613      	mov	r3, r2
 800d90c:	005b      	lsls	r3, r3, #1
 800d90e:	4413      	add	r3, r2
 800d910:	00db      	lsls	r3, r3, #3
 800d912:	3350      	adds	r3, #80	; 0x50
 800d914:	443b      	add	r3, r7
 800d916:	3b34      	subs	r3, #52	; 0x34
 800d918:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800d91a:	4299      	cmp	r1, r3
 800d91c:	d01c      	beq.n	800d958 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	68d9      	ldr	r1, [r3, #12]
 800d922:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d926:	4613      	mov	r3, r2
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	4413      	add	r3, r2
 800d92c:	00db      	lsls	r3, r3, #3
 800d92e:	3350      	adds	r3, #80	; 0x50
 800d930:	443b      	add	r3, r7
 800d932:	3b30      	subs	r3, #48	; 0x30
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4299      	cmp	r1, r3
 800d938:	d00e      	beq.n	800d958 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	6919      	ldr	r1, [r3, #16]
 800d93e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d942:	4613      	mov	r3, r2
 800d944:	005b      	lsls	r3, r3, #1
 800d946:	4413      	add	r3, r2
 800d948:	00db      	lsls	r3, r3, #3
 800d94a:	3350      	adds	r3, #80	; 0x50
 800d94c:	443b      	add	r3, r7
 800d94e:	3b2c      	subs	r3, #44	; 0x2c
 800d950:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800d952:	4299      	cmp	r1, r3
 800d954:	f040 810e 	bne.w	800db74 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	6819      	ldr	r1, [r3, #0]
 800d95c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d960:	4613      	mov	r3, r2
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	4413      	add	r3, r2
 800d966:	00db      	lsls	r3, r3, #3
 800d968:	3350      	adds	r3, #80	; 0x50
 800d96a:	443b      	add	r3, r7
 800d96c:	3b3c      	subs	r3, #60	; 0x3c
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4299      	cmp	r1, r3
 800d972:	d133      	bne.n	800d9dc <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	6859      	ldr	r1, [r3, #4]
 800d978:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d97c:	4613      	mov	r3, r2
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	4413      	add	r3, r2
 800d982:	00db      	lsls	r3, r3, #3
 800d984:	3350      	adds	r3, #80	; 0x50
 800d986:	443b      	add	r3, r7
 800d988:	3b38      	subs	r3, #56	; 0x38
 800d98a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800d98c:	4299      	cmp	r1, r3
 800d98e:	d125      	bne.n	800d9dc <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	68d9      	ldr	r1, [r3, #12]
 800d994:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d998:	4613      	mov	r3, r2
 800d99a:	005b      	lsls	r3, r3, #1
 800d99c:	4413      	add	r3, r2
 800d99e:	00db      	lsls	r3, r3, #3
 800d9a0:	3350      	adds	r3, #80	; 0x50
 800d9a2:	443b      	add	r3, r7
 800d9a4:	3b30      	subs	r3, #48	; 0x30
 800d9a6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800d9a8:	4299      	cmp	r1, r3
 800d9aa:	d117      	bne.n	800d9dc <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	6919      	ldr	r1, [r3, #16]
 800d9b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	4413      	add	r3, r2
 800d9ba:	00db      	lsls	r3, r3, #3
 800d9bc:	3350      	adds	r3, #80	; 0x50
 800d9be:	443b      	add	r3, r7
 800d9c0:	3b2c      	subs	r3, #44	; 0x2c
 800d9c2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800d9c4:	4299      	cmp	r1, r3
 800d9c6:	d109      	bne.n	800d9dc <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800d9c8:	4b03      	ldr	r3, [pc, #12]	; (800d9d8 <HAL_OSPIM_Config+0x508>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a02      	ldr	r2, [pc, #8]	; (800d9d8 <HAL_OSPIM_Config+0x508>)
 800d9ce:	f043 0301 	orr.w	r3, r3, #1
 800d9d2:	6013      	str	r3, [r2, #0]
 800d9d4:	e0ce      	b.n	800db74 <HAL_OSPIM_Config+0x6a4>
 800d9d6:	bf00      	nop
 800d9d8:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800d9dc:	49bb      	ldr	r1, [pc, #748]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800d9de:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	4413      	add	r3, r2
 800d9e8:	00db      	lsls	r3, r3, #3
 800d9ea:	3350      	adds	r3, #80	; 0x50
 800d9ec:	443b      	add	r3, r7
 800d9ee:	3b3c      	subs	r3, #60	; 0x3c
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	440b      	add	r3, r1
 800d9f8:	6859      	ldr	r1, [r3, #4]
 800d9fa:	48b4      	ldr	r0, [pc, #720]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800d9fc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800da00:	4613      	mov	r3, r2
 800da02:	005b      	lsls	r3, r3, #1
 800da04:	4413      	add	r3, r2
 800da06:	00db      	lsls	r3, r3, #3
 800da08:	3350      	adds	r3, #80	; 0x50
 800da0a:	443b      	add	r3, r7
 800da0c:	3b3c      	subs	r3, #60	; 0x3c
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3b01      	subs	r3, #1
 800da12:	f021 0201 	bic.w	r2, r1, #1
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4403      	add	r3, r0
 800da1a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800da1c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800da20:	4613      	mov	r3, r2
 800da22:	005b      	lsls	r3, r3, #1
 800da24:	4413      	add	r3, r2
 800da26:	00db      	lsls	r3, r3, #3
 800da28:	3350      	adds	r3, #80	; 0x50
 800da2a:	443b      	add	r3, r7
 800da2c:	3b38      	subs	r3, #56	; 0x38
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d01f      	beq.n	800da74 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800da34:	49a5      	ldr	r1, [pc, #660]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800da36:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800da3a:	4613      	mov	r3, r2
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	4413      	add	r3, r2
 800da40:	00db      	lsls	r3, r3, #3
 800da42:	3350      	adds	r3, #80	; 0x50
 800da44:	443b      	add	r3, r7
 800da46:	3b38      	subs	r3, #56	; 0x38
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	3b01      	subs	r3, #1
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	440b      	add	r3, r1
 800da50:	6859      	ldr	r1, [r3, #4]
 800da52:	489e      	ldr	r0, [pc, #632]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800da54:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800da58:	4613      	mov	r3, r2
 800da5a:	005b      	lsls	r3, r3, #1
 800da5c:	4413      	add	r3, r2
 800da5e:	00db      	lsls	r3, r3, #3
 800da60:	3350      	adds	r3, #80	; 0x50
 800da62:	443b      	add	r3, r7
 800da64:	3b38      	subs	r3, #56	; 0x38
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	3b01      	subs	r3, #1
 800da6a:	f021 0210 	bic.w	r2, r1, #16
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	4403      	add	r3, r0
 800da72:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800da74:	4995      	ldr	r1, [pc, #596]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800da76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800da7a:	4613      	mov	r3, r2
 800da7c:	005b      	lsls	r3, r3, #1
 800da7e:	4413      	add	r3, r2
 800da80:	00db      	lsls	r3, r3, #3
 800da82:	3350      	adds	r3, #80	; 0x50
 800da84:	443b      	add	r3, r7
 800da86:	3b34      	subs	r3, #52	; 0x34
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	009b      	lsls	r3, r3, #2
 800da8e:	440b      	add	r3, r1
 800da90:	6859      	ldr	r1, [r3, #4]
 800da92:	488e      	ldr	r0, [pc, #568]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800da94:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800da98:	4613      	mov	r3, r2
 800da9a:	005b      	lsls	r3, r3, #1
 800da9c:	4413      	add	r3, r2
 800da9e:	00db      	lsls	r3, r3, #3
 800daa0:	3350      	adds	r3, #80	; 0x50
 800daa2:	443b      	add	r3, r7
 800daa4:	3b34      	subs	r3, #52	; 0x34
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	3b01      	subs	r3, #1
 800daaa:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	4403      	add	r3, r0
 800dab2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800dab4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800dab8:	4613      	mov	r3, r2
 800daba:	005b      	lsls	r3, r3, #1
 800dabc:	4413      	add	r3, r2
 800dabe:	00db      	lsls	r3, r3, #3
 800dac0:	3350      	adds	r3, #80	; 0x50
 800dac2:	443b      	add	r3, r7
 800dac4:	3b30      	subs	r3, #48	; 0x30
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d023      	beq.n	800db14 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800dacc:	497f      	ldr	r1, [pc, #508]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dace:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800dad2:	4613      	mov	r3, r2
 800dad4:	005b      	lsls	r3, r3, #1
 800dad6:	4413      	add	r3, r2
 800dad8:	00db      	lsls	r3, r3, #3
 800dada:	3350      	adds	r3, #80	; 0x50
 800dadc:	443b      	add	r3, r7
 800dade:	3b30      	subs	r3, #48	; 0x30
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	3b01      	subs	r3, #1
 800dae4:	f003 0301 	and.w	r3, r3, #1
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	440b      	add	r3, r1
 800daec:	6859      	ldr	r1, [r3, #4]
 800daee:	4877      	ldr	r0, [pc, #476]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800daf0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800daf4:	4613      	mov	r3, r2
 800daf6:	005b      	lsls	r3, r3, #1
 800daf8:	4413      	add	r3, r2
 800dafa:	00db      	lsls	r3, r3, #3
 800dafc:	3350      	adds	r3, #80	; 0x50
 800dafe:	443b      	add	r3, r7
 800db00:	3b30      	subs	r3, #48	; 0x30
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	3b01      	subs	r3, #1
 800db06:	f003 0301 	and.w	r3, r3, #1
 800db0a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	4403      	add	r3, r0
 800db12:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800db14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800db18:	4613      	mov	r3, r2
 800db1a:	005b      	lsls	r3, r3, #1
 800db1c:	4413      	add	r3, r2
 800db1e:	00db      	lsls	r3, r3, #3
 800db20:	3350      	adds	r3, #80	; 0x50
 800db22:	443b      	add	r3, r7
 800db24:	3b2c      	subs	r3, #44	; 0x2c
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d023      	beq.n	800db74 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800db2c:	4967      	ldr	r1, [pc, #412]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800db2e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800db32:	4613      	mov	r3, r2
 800db34:	005b      	lsls	r3, r3, #1
 800db36:	4413      	add	r3, r2
 800db38:	00db      	lsls	r3, r3, #3
 800db3a:	3350      	adds	r3, #80	; 0x50
 800db3c:	443b      	add	r3, r7
 800db3e:	3b2c      	subs	r3, #44	; 0x2c
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	3b01      	subs	r3, #1
 800db44:	f003 0301 	and.w	r3, r3, #1
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	440b      	add	r3, r1
 800db4c:	6859      	ldr	r1, [r3, #4]
 800db4e:	485f      	ldr	r0, [pc, #380]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800db50:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800db54:	4613      	mov	r3, r2
 800db56:	005b      	lsls	r3, r3, #1
 800db58:	4413      	add	r3, r2
 800db5a:	00db      	lsls	r3, r3, #3
 800db5c:	3350      	adds	r3, #80	; 0x50
 800db5e:	443b      	add	r3, r7
 800db60:	3b2c      	subs	r3, #44	; 0x2c
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3b01      	subs	r3, #1
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	4403      	add	r3, r0
 800db72:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800db74:	4a55      	ldr	r2, [pc, #340]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	3b01      	subs	r3, #1
 800db7c:	009b      	lsls	r3, r3, #2
 800db7e:	4413      	add	r3, r2
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800db86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db88:	025b      	lsls	r3, r3, #9
 800db8a:	431a      	orrs	r2, r3
 800db8c:	494f      	ldr	r1, [pc, #316]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	689b      	ldr	r3, [r3, #8]
 800db92:	3b01      	subs	r3, #1
 800db94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	440b      	add	r3, r1
 800db9c:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	695b      	ldr	r3, [r3, #20]
 800dba2:	1e5a      	subs	r2, r3, #1
 800dba4:	4b49      	ldr	r3, [pc, #292]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	0c1b      	lsrs	r3, r3, #16
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d90a      	bls.n	800dbc6 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800dbb0:	4b46      	ldr	r3, [pc, #280]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	695b      	ldr	r3, [r3, #20]
 800dbbc:	3b01      	subs	r3, #1
 800dbbe:	041b      	lsls	r3, r3, #16
 800dbc0:	4942      	ldr	r1, [pc, #264]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800dbc6:	4b41      	ldr	r3, [pc, #260]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f003 0301 	and.w	r3, r3, #1
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	f000 809a 	beq.w	800dd08 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800dbd4:	4a3d      	ldr	r2, [pc, #244]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	3b01      	subs	r3, #1
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4413      	add	r3, r2
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	f023 0203 	bic.w	r2, r3, #3
 800dbe6:	4939      	ldr	r1, [pc, #228]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	3b01      	subs	r3, #1
 800dbee:	f042 0201 	orr.w	r2, r2, #1
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	440b      	add	r3, r1
 800dbf6:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d011      	beq.n	800dc24 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800dc00:	4a32      	ldr	r2, [pc, #200]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	3b01      	subs	r3, #1
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	4413      	add	r3, r2
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dc12:	492e      	ldr	r1, [pc, #184]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	f042 0210 	orr.w	r2, r2, #16
 800dc1e:	009b      	lsls	r3, r3, #2
 800dc20:	440b      	add	r3, r1
 800dc22:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d016      	beq.n	800dc5e <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800dc30:	4a26      	ldr	r2, [pc, #152]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	68db      	ldr	r3, [r3, #12]
 800dc36:	3b01      	subs	r3, #1
 800dc38:	f003 0301 	and.w	r3, r3, #1
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	4413      	add	r3, r2
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800dc46:	4921      	ldr	r1, [pc, #132]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	3b01      	subs	r3, #1
 800dc4e:	f003 0301 	and.w	r3, r3, #1
 800dc52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	440b      	add	r3, r1
 800dc5a:	605a      	str	r2, [r3, #4]
 800dc5c:	e019      	b.n	800dc92 <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d015      	beq.n	800dc92 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800dc66:	4a19      	ldr	r2, [pc, #100]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	f003 0301 	and.w	r3, r3, #1
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	4413      	add	r3, r2
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800dc7c:	4913      	ldr	r1, [pc, #76]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	68db      	ldr	r3, [r3, #12]
 800dc82:	3b01      	subs	r3, #1
 800dc84:	f003 0301 	and.w	r3, r3, #1
 800dc88:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	440b      	add	r3, r1
 800dc90:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	691b      	ldr	r3, [r3, #16]
 800dc96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d018      	beq.n	800dcd0 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800dc9e:	4a0b      	ldr	r2, [pc, #44]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	691b      	ldr	r3, [r3, #16]
 800dca4:	3b01      	subs	r3, #1
 800dca6:	f003 0301 	and.w	r3, r3, #1
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	4413      	add	r3, r2
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800dcb4:	4905      	ldr	r1, [pc, #20]	; (800dccc <HAL_OSPIM_Config+0x7fc>)
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	691b      	ldr	r3, [r3, #16]
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	f003 0301 	and.w	r3, r3, #1
 800dcc0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	440b      	add	r3, r1
 800dcc8:	605a      	str	r2, [r3, #4]
 800dcca:	e0c5      	b.n	800de58 <HAL_OSPIM_Config+0x988>
 800dccc:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	691b      	ldr	r3, [r3, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f000 80bf 	beq.w	800de58 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800dcda:	4a6e      	ldr	r2, [pc, #440]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	3b01      	subs	r3, #1
 800dce2:	f003 0301 	and.w	r3, r3, #1
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	4413      	add	r3, r2
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800dcf0:	4968      	ldr	r1, [pc, #416]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	691b      	ldr	r3, [r3, #16]
 800dcf6:	3b01      	subs	r3, #1
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	440b      	add	r3, r1
 800dd04:	605a      	str	r2, [r3, #4]
 800dd06:	e0a7      	b.n	800de58 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800dd08:	4a62      	ldr	r2, [pc, #392]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	4413      	add	r3, r2
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	f023 0203 	bic.w	r2, r3, #3
 800dd1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd1c:	005b      	lsls	r3, r3, #1
 800dd1e:	431a      	orrs	r2, r3
 800dd20:	495c      	ldr	r1, [pc, #368]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	3b01      	subs	r3, #1
 800dd28:	f042 0201 	orr.w	r2, r2, #1
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	440b      	add	r3, r1
 800dd30:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d014      	beq.n	800dd64 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800dd3a:	4a56      	ldr	r2, [pc, #344]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	3b01      	subs	r3, #1
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4413      	add	r3, r2
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dd4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd4e:	015b      	lsls	r3, r3, #5
 800dd50:	431a      	orrs	r2, r3
 800dd52:	4950      	ldr	r1, [pc, #320]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	f042 0210 	orr.w	r2, r2, #16
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	440b      	add	r3, r1
 800dd62:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	68db      	ldr	r3, [r3, #12]
 800dd68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d019      	beq.n	800dda4 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800dd70:	4a48      	ldr	r2, [pc, #288]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	3b01      	subs	r3, #1
 800dd78:	f003 0301 	and.w	r3, r3, #1
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	4413      	add	r3, r2
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800dd86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd88:	049b      	lsls	r3, r3, #18
 800dd8a:	431a      	orrs	r2, r3
 800dd8c:	4941      	ldr	r1, [pc, #260]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	3b01      	subs	r3, #1
 800dd94:	f003 0301 	and.w	r3, r3, #1
 800dd98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	440b      	add	r3, r1
 800dda0:	605a      	str	r2, [r3, #4]
 800dda2:	e01c      	b.n	800ddde <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d018      	beq.n	800ddde <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800ddac:	4a39      	ldr	r2, [pc, #228]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ddc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddc4:	069b      	lsls	r3, r3, #26
 800ddc6:	431a      	orrs	r2, r3
 800ddc8:	4932      	ldr	r1, [pc, #200]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	f003 0301 	and.w	r3, r3, #1
 800ddd4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	440b      	add	r3, r1
 800dddc:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	691b      	ldr	r3, [r3, #16]
 800dde2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d019      	beq.n	800de1e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800ddea:	4a2a      	ldr	r2, [pc, #168]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	691b      	ldr	r3, [r3, #16]
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	f003 0301 	and.w	r3, r3, #1
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	4413      	add	r3, r2
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800de00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de02:	049b      	lsls	r3, r3, #18
 800de04:	431a      	orrs	r2, r3
 800de06:	4923      	ldr	r1, [pc, #140]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	691b      	ldr	r3, [r3, #16]
 800de0c:	3b01      	subs	r3, #1
 800de0e:	f003 0301 	and.w	r3, r3, #1
 800de12:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	440b      	add	r3, r1
 800de1a:	605a      	str	r2, [r3, #4]
 800de1c:	e01c      	b.n	800de58 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d018      	beq.n	800de58 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800de26:	4a1b      	ldr	r2, [pc, #108]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	691b      	ldr	r3, [r3, #16]
 800de2c:	3b01      	subs	r3, #1
 800de2e:	f003 0301 	and.w	r3, r3, #1
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	4413      	add	r3, r2
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800de3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de3e:	069b      	lsls	r3, r3, #26
 800de40:	431a      	orrs	r2, r3
 800de42:	4914      	ldr	r1, [pc, #80]	; (800de94 <HAL_OSPIM_Config+0x9c4>)
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	691b      	ldr	r3, [r3, #16]
 800de48:	3b01      	subs	r3, #1
 800de4a:	f003 0301 	and.w	r3, r3, #1
 800de4e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	440b      	add	r3, r1
 800de56:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800de58:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800de5c:	f003 0301 	and.w	r3, r3, #1
 800de60:	2b00      	cmp	r3, #0
 800de62:	d005      	beq.n	800de70 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800de64:	4b0c      	ldr	r3, [pc, #48]	; (800de98 <HAL_OSPIM_Config+0x9c8>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4a0b      	ldr	r2, [pc, #44]	; (800de98 <HAL_OSPIM_Config+0x9c8>)
 800de6a:	f043 0301 	orr.w	r3, r3, #1
 800de6e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800de70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800de74:	f003 0302 	and.w	r3, r3, #2
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d005      	beq.n	800de88 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800de7c:	4b07      	ldr	r3, [pc, #28]	; (800de9c <HAL_OSPIM_Config+0x9cc>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a06      	ldr	r2, [pc, #24]	; (800de9c <HAL_OSPIM_Config+0x9cc>)
 800de82:	f043 0301 	orr.w	r3, r3, #1
 800de86:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800de88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3750      	adds	r7, #80	; 0x50
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	5200b400 	.word	0x5200b400
 800de98:	52005000 	.word	0x52005000
 800de9c:	5200a000 	.word	0x5200a000

0800dea0 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deac:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2200      	movs	r2, #0
 800deb2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800debc:	d122      	bne.n	800df04 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	6a1b      	ldr	r3, [r3, #32]
 800dec4:	f003 0320 	and.w	r3, r3, #32
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d014      	beq.n	800def6 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2202      	movs	r2, #2
 800ded2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800dee2:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f042 0202 	orr.w	r2, r2, #2
 800def2:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 800def4:	e00c      	b.n	800df10 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2202      	movs	r2, #2
 800defa:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800defc:	68f8      	ldr	r0, [r7, #12]
 800defe:	f7ff fa91 	bl	800d424 <HAL_OSPI_AbortCpltCallback>
}
 800df02:	e005      	b.n	800df10 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2202      	movs	r2, #2
 800df08:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f7ff fa80 	bl	800d410 <HAL_OSPI_ErrorCallback>
}
 800df10:	bf00      	nop
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	603b      	str	r3, [r7, #0]
 800df24:	4613      	mov	r3, r2
 800df26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800df28:	e01a      	b.n	800df60 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df30:	d016      	beq.n	800df60 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df32:	f7f8 fef3 	bl	8006d1c <HAL_GetTick>
 800df36:	4602      	mov	r2, r0
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	1ad3      	subs	r3, r2, r3
 800df3c:	69ba      	ldr	r2, [r7, #24]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d302      	bcc.n	800df48 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10b      	bne.n	800df60 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df4e:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df54:	f043 0201 	orr.w	r2, r3, #1
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800df5c:	2301      	movs	r3, #1
 800df5e:	e00e      	b.n	800df7e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6a1a      	ldr	r2, [r3, #32]
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	4013      	ands	r3, r2
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bf14      	ite	ne
 800df6e:	2301      	movne	r3, #1
 800df70:	2300      	moveq	r3, #0
 800df72:	b2db      	uxtb	r3, r3
 800df74:	461a      	mov	r2, r3
 800df76:	79fb      	ldrb	r3, [r7, #7]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d1d6      	bne.n	800df2a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
	...

0800df88 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800df88:	b480      	push	{r7}
 800df8a:	b089      	sub	sp, #36	; 0x24
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df92:	2300      	movs	r3, #0
 800df94:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800dfa4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d10a      	bne.n	800dfc4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	685a      	ldr	r2, [r3, #4]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	430a      	orrs	r2, r1
 800dfc2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	d114      	bne.n	800dff6 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800dfd4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800dfde:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dfe8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800dff2:	60fb      	str	r3, [r7, #12]
 800dff4:	e02c      	b.n	800e050 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b03      	cmp	r3, #3
 800dffc:	d114      	bne.n	800e028 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e006:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800e010:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e01a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800e024:	60fb      	str	r3, [r7, #12]
 800e026:	e013      	b.n	800e050 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e030:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800e03a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800e044:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800e04e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e058:	431a      	orrs	r2, r3
 800e05a:	69bb      	ldr	r3, [r7, #24]
 800e05c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e062:	2b00      	cmp	r3, #0
 800e064:	d012      	beq.n	800e08c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e07e:	4319      	orrs	r1, r3
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e084:	430b      	orrs	r3, r1
 800e086:	431a      	orrs	r2, r3
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f023 021f 	bic.w	r2, r3, #31
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e098:	431a      	orrs	r2, r3
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d009      	beq.n	800e0ba <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d105      	bne.n	800e0ba <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	3a01      	subs	r2, #1
 800e0b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	68db      	ldr	r3, [r3, #12]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f000 8095 	beq.w	800e1ee <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	69db      	ldr	r3, [r3, #28]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d053      	beq.n	800e174 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d01e      	beq.n	800e112 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800e0d4:	69bb      	ldr	r3, [r7, #24]
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	4b64      	ldr	r3, [pc, #400]	; (800e26c <OSPI_ConfigCmd+0x2e4>)
 800e0da:	4013      	ands	r3, r2
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	68d1      	ldr	r1, [r2, #12]
 800e0e0:	683a      	ldr	r2, [r7, #0]
 800e0e2:	6952      	ldr	r2, [r2, #20]
 800e0e4:	4311      	orrs	r1, r2
 800e0e6:	683a      	ldr	r2, [r7, #0]
 800e0e8:	6912      	ldr	r2, [r2, #16]
 800e0ea:	4311      	orrs	r1, r2
 800e0ec:	683a      	ldr	r2, [r7, #0]
 800e0ee:	69d2      	ldr	r2, [r2, #28]
 800e0f0:	4311      	orrs	r1, r2
 800e0f2:	683a      	ldr	r2, [r7, #0]
 800e0f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e0f6:	4311      	orrs	r1, r2
 800e0f8:	683a      	ldr	r2, [r7, #0]
 800e0fa:	6a12      	ldr	r2, [r2, #32]
 800e0fc:	4311      	orrs	r1, r2
 800e0fe:	683a      	ldr	r2, [r7, #0]
 800e100:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e102:	4311      	orrs	r1, r2
 800e104:	683a      	ldr	r2, [r7, #0]
 800e106:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e108:	430a      	orrs	r2, r1
 800e10a:	431a      	orrs	r2, r3
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	601a      	str	r2, [r3, #0]
 800e110:	e026      	b.n	800e160 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	681a      	ldr	r2, [r3, #0]
 800e116:	4b56      	ldr	r3, [pc, #344]	; (800e270 <OSPI_ConfigCmd+0x2e8>)
 800e118:	4013      	ands	r3, r2
 800e11a:	683a      	ldr	r2, [r7, #0]
 800e11c:	68d1      	ldr	r1, [r2, #12]
 800e11e:	683a      	ldr	r2, [r7, #0]
 800e120:	6952      	ldr	r2, [r2, #20]
 800e122:	4311      	orrs	r1, r2
 800e124:	683a      	ldr	r2, [r7, #0]
 800e126:	6912      	ldr	r2, [r2, #16]
 800e128:	4311      	orrs	r1, r2
 800e12a:	683a      	ldr	r2, [r7, #0]
 800e12c:	69d2      	ldr	r2, [r2, #28]
 800e12e:	4311      	orrs	r1, r2
 800e130:	683a      	ldr	r2, [r7, #0]
 800e132:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e134:	4311      	orrs	r1, r2
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	6a12      	ldr	r2, [r2, #32]
 800e13a:	430a      	orrs	r2, r1
 800e13c:	431a      	orrs	r2, r3
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e14a:	d109      	bne.n	800e160 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800e150:	2b08      	cmp	r3, #8
 800e152:	d105      	bne.n	800e160 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	689a      	ldr	r2, [r3, #8]
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	683a      	ldr	r2, [r7, #0]
 800e16e:	6992      	ldr	r2, [r2, #24]
 800e170:	649a      	str	r2, [r3, #72]	; 0x48
 800e172:	e074      	b.n	800e25e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d015      	beq.n	800e1a8 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800e17c:	69bb      	ldr	r3, [r7, #24]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	4b3c      	ldr	r3, [pc, #240]	; (800e274 <OSPI_ConfigCmd+0x2ec>)
 800e182:	4013      	ands	r3, r2
 800e184:	683a      	ldr	r2, [r7, #0]
 800e186:	68d1      	ldr	r1, [r2, #12]
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	6952      	ldr	r2, [r2, #20]
 800e18c:	4311      	orrs	r1, r2
 800e18e:	683a      	ldr	r2, [r7, #0]
 800e190:	6912      	ldr	r2, [r2, #16]
 800e192:	4311      	orrs	r1, r2
 800e194:	683a      	ldr	r2, [r7, #0]
 800e196:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e198:	4311      	orrs	r1, r2
 800e19a:	683a      	ldr	r2, [r7, #0]
 800e19c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e19e:	430a      	orrs	r2, r1
 800e1a0:	431a      	orrs	r2, r3
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	601a      	str	r2, [r3, #0]
 800e1a6:	e01d      	b.n	800e1e4 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	68d9      	ldr	r1, [r3, #12]
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	695b      	ldr	r3, [r3, #20]
 800e1b8:	4319      	orrs	r1, r3
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	691b      	ldr	r3, [r3, #16]
 800e1be:	430b      	orrs	r3, r1
 800e1c0:	431a      	orrs	r2, r3
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1ce:	d109      	bne.n	800e1e4 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800e1d4:	2b08      	cmp	r3, #8
 800e1d6:	d105      	bne.n	800e1e4 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	689a      	ldr	r2, [r3, #8]
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	601a      	str	r2, [r3, #0]
 800e1ec:	e037      	b.n	800e25e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	69db      	ldr	r3, [r3, #28]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d02e      	beq.n	800e254 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d015      	beq.n	800e22a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800e1fe:	69bb      	ldr	r3, [r7, #24]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	4b1d      	ldr	r3, [pc, #116]	; (800e278 <OSPI_ConfigCmd+0x2f0>)
 800e204:	4013      	ands	r3, r2
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	69d1      	ldr	r1, [r2, #28]
 800e20a:	683a      	ldr	r2, [r7, #0]
 800e20c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e20e:	4311      	orrs	r1, r2
 800e210:	683a      	ldr	r2, [r7, #0]
 800e212:	6a12      	ldr	r2, [r2, #32]
 800e214:	4311      	orrs	r1, r2
 800e216:	683a      	ldr	r2, [r7, #0]
 800e218:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e21a:	4311      	orrs	r1, r2
 800e21c:	683a      	ldr	r2, [r7, #0]
 800e21e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e220:	430a      	orrs	r2, r1
 800e222:	431a      	orrs	r2, r3
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	601a      	str	r2, [r3, #0]
 800e228:	e00e      	b.n	800e248 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	69d9      	ldr	r1, [r3, #28]
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23a:	4319      	orrs	r1, r3
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	6a1b      	ldr	r3, [r3, #32]
 800e240:	430b      	orrs	r3, r1
 800e242:	431a      	orrs	r2, r3
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	683a      	ldr	r2, [r7, #0]
 800e24e:	6992      	ldr	r2, [r2, #24]
 800e250:	649a      	str	r2, [r3, #72]	; 0x48
 800e252:	e004      	b.n	800e25e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800e254:	2301      	movs	r3, #1
 800e256:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2208      	movs	r2, #8
 800e25c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800e25e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3724      	adds	r7, #36	; 0x24
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr
 800e26c:	f0ffc0c0 	.word	0xf0ffc0c0
 800e270:	ffffc0c0 	.word	0xffffc0c0
 800e274:	f0ffffc0 	.word	0xf0ffffc0
 800e278:	f0ffc0ff 	.word	0xf0ffc0ff

0800e27c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b087      	sub	sp, #28
 800e280:	af00      	add	r7, sp, #0
 800e282:	4603      	mov	r3, r0
 800e284:	6039      	str	r1, [r7, #0]
 800e286:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800e28c:	2300      	movs	r3, #0
 800e28e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800e290:	79fb      	ldrb	r3, [r7, #7]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d005      	beq.n	800e2a2 <OSPIM_GetConfig+0x26>
 800e296:	79fb      	ldrb	r3, [r7, #7]
 800e298:	2b02      	cmp	r3, #2
 800e29a:	d802      	bhi.n	800e2a2 <OSPIM_GetConfig+0x26>
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d102      	bne.n	800e2a8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	75fb      	strb	r3, [r7, #23]
 800e2a6:	e098      	b.n	800e3da <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800e2c6:	79fb      	ldrb	r3, [r7, #7]
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d10b      	bne.n	800e2e4 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800e2cc:	4b46      	ldr	r3, [pc, #280]	; (800e3e8 <OSPIM_GetConfig+0x16c>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f003 0301 	and.w	r3, r3, #1
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d102      	bne.n	800e2de <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800e2d8:	4b44      	ldr	r3, [pc, #272]	; (800e3ec <OSPIM_GetConfig+0x170>)
 800e2da:	613b      	str	r3, [r7, #16]
 800e2dc:	e002      	b.n	800e2e4 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800e2de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2e2:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	60fb      	str	r3, [r7, #12]
 800e2e8:	e074      	b.n	800e3d4 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800e2ea:	4a3f      	ldr	r2, [pc, #252]	; (800e3e8 <OSPIM_GetConfig+0x16c>)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	4413      	add	r3, r2
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	f003 0301 	and.w	r3, r3, #1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00a      	beq.n	800e316 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	4053      	eors	r3, r2
 800e306:	f003 0302 	and.w	r3, r3, #2
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d103      	bne.n	800e316 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	1c5a      	adds	r2, r3, #1
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	f003 0310 	and.w	r3, r3, #16
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00a      	beq.n	800e336 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800e320:	68ba      	ldr	r2, [r7, #8]
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	4053      	eors	r3, r2
 800e326:	f003 0320 	and.w	r3, r3, #32
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d103      	bne.n	800e336 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d00a      	beq.n	800e356 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	4053      	eors	r3, r2
 800e346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d103      	bne.n	800e356 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	1c5a      	adds	r2, r3, #1
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d018      	beq.n	800e392 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	4053      	eors	r3, r2
 800e366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d111      	bne.n	800e392 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e374:	2b00      	cmp	r3, #0
 800e376:	d106      	bne.n	800e386 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	3301      	adds	r3, #1
 800e37c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	60da      	str	r2, [r3, #12]
 800e384:	e005      	b.n	800e392 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	3301      	adds	r3, #1
 800e38a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d018      	beq.n	800e3ce <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800e39c:	68ba      	ldr	r2, [r7, #8]
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	4053      	eors	r3, r2
 800e3a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d111      	bne.n	800e3ce <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d106      	bne.n	800e3c2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	611a      	str	r2, [r3, #16]
 800e3c0:	e005      	b.n	800e3ce <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	60fb      	str	r3, [r7, #12]
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d987      	bls.n	800e2ea <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800e3da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	371c      	adds	r7, #28
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr
 800e3e8:	5200b400 	.word	0x5200b400
 800e3ec:	04040222 	.word	0x04040222

0800e3f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800e3f4:	4b05      	ldr	r3, [pc, #20]	; (800e40c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a04      	ldr	r2, [pc, #16]	; (800e40c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e3fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3fe:	6013      	str	r3, [r2, #0]
}
 800e400:	bf00      	nop
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	58024800 	.word	0x58024800

0800e410 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800e418:	4b19      	ldr	r3, [pc, #100]	; (800e480 <HAL_PWREx_ConfigSupply+0x70>)
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	f003 0304 	and.w	r3, r3, #4
 800e420:	2b04      	cmp	r3, #4
 800e422:	d00a      	beq.n	800e43a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e424:	4b16      	ldr	r3, [pc, #88]	; (800e480 <HAL_PWREx_ConfigSupply+0x70>)
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	f003 0307 	and.w	r3, r3, #7
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d001      	beq.n	800e436 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e432:	2301      	movs	r3, #1
 800e434:	e01f      	b.n	800e476 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e436:	2300      	movs	r3, #0
 800e438:	e01d      	b.n	800e476 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e43a:	4b11      	ldr	r3, [pc, #68]	; (800e480 <HAL_PWREx_ConfigSupply+0x70>)
 800e43c:	68db      	ldr	r3, [r3, #12]
 800e43e:	f023 0207 	bic.w	r2, r3, #7
 800e442:	490f      	ldr	r1, [pc, #60]	; (800e480 <HAL_PWREx_ConfigSupply+0x70>)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	4313      	orrs	r3, r2
 800e448:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e44a:	f7f8 fc67 	bl	8006d1c <HAL_GetTick>
 800e44e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e450:	e009      	b.n	800e466 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e452:	f7f8 fc63 	bl	8006d1c <HAL_GetTick>
 800e456:	4602      	mov	r2, r0
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	1ad3      	subs	r3, r2, r3
 800e45c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e460:	d901      	bls.n	800e466 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e462:	2301      	movs	r3, #1
 800e464:	e007      	b.n	800e476 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e466:	4b06      	ldr	r3, [pc, #24]	; (800e480 <HAL_PWREx_ConfigSupply+0x70>)
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e46e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e472:	d1ee      	bne.n	800e452 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e474:	2300      	movs	r3, #0
}
 800e476:	4618      	mov	r0, r3
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	58024800 	.word	0x58024800

0800e484 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b08c      	sub	sp, #48	; 0x30
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d102      	bne.n	800e498 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e492:	2301      	movs	r3, #1
 800e494:	f000 bc1f 	b.w	800ecd6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f003 0301 	and.w	r3, r3, #1
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	f000 80b3 	beq.w	800e60c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e4a6:	4b95      	ldr	r3, [pc, #596]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e4b0:	4b92      	ldr	r3, [pc, #584]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b8:	2b10      	cmp	r3, #16
 800e4ba:	d007      	beq.n	800e4cc <HAL_RCC_OscConfig+0x48>
 800e4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4be:	2b18      	cmp	r3, #24
 800e4c0:	d112      	bne.n	800e4e8 <HAL_RCC_OscConfig+0x64>
 800e4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c4:	f003 0303 	and.w	r3, r3, #3
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d10d      	bne.n	800e4e8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e4cc:	4b8b      	ldr	r3, [pc, #556]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 8098 	beq.w	800e60a <HAL_RCC_OscConfig+0x186>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	f040 8093 	bne.w	800e60a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e3f6      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4f0:	d106      	bne.n	800e500 <HAL_RCC_OscConfig+0x7c>
 800e4f2:	4b82      	ldr	r3, [pc, #520]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4a81      	ldr	r2, [pc, #516]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e4f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4fc:	6013      	str	r3, [r2, #0]
 800e4fe:	e058      	b.n	800e5b2 <HAL_RCC_OscConfig+0x12e>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d112      	bne.n	800e52e <HAL_RCC_OscConfig+0xaa>
 800e508:	4b7c      	ldr	r3, [pc, #496]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a7b      	ldr	r2, [pc, #492]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e50e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e512:	6013      	str	r3, [r2, #0]
 800e514:	4b79      	ldr	r3, [pc, #484]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4a78      	ldr	r2, [pc, #480]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e51a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e51e:	6013      	str	r3, [r2, #0]
 800e520:	4b76      	ldr	r3, [pc, #472]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4a75      	ldr	r2, [pc, #468]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e52a:	6013      	str	r3, [r2, #0]
 800e52c:	e041      	b.n	800e5b2 <HAL_RCC_OscConfig+0x12e>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e536:	d112      	bne.n	800e55e <HAL_RCC_OscConfig+0xda>
 800e538:	4b70      	ldr	r3, [pc, #448]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a6f      	ldr	r2, [pc, #444]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e53e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e542:	6013      	str	r3, [r2, #0]
 800e544:	4b6d      	ldr	r3, [pc, #436]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a6c      	ldr	r2, [pc, #432]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e54a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e54e:	6013      	str	r3, [r2, #0]
 800e550:	4b6a      	ldr	r3, [pc, #424]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4a69      	ldr	r2, [pc, #420]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e55a:	6013      	str	r3, [r2, #0]
 800e55c:	e029      	b.n	800e5b2 <HAL_RCC_OscConfig+0x12e>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800e566:	d112      	bne.n	800e58e <HAL_RCC_OscConfig+0x10a>
 800e568:	4b64      	ldr	r3, [pc, #400]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4a63      	ldr	r2, [pc, #396]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e56e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e572:	6013      	str	r3, [r2, #0]
 800e574:	4b61      	ldr	r3, [pc, #388]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a60      	ldr	r2, [pc, #384]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e57a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e57e:	6013      	str	r3, [r2, #0]
 800e580:	4b5e      	ldr	r3, [pc, #376]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4a5d      	ldr	r2, [pc, #372]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e58a:	6013      	str	r3, [r2, #0]
 800e58c:	e011      	b.n	800e5b2 <HAL_RCC_OscConfig+0x12e>
 800e58e:	4b5b      	ldr	r3, [pc, #364]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a5a      	ldr	r2, [pc, #360]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e598:	6013      	str	r3, [r2, #0]
 800e59a:	4b58      	ldr	r3, [pc, #352]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4a57      	ldr	r2, [pc, #348]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e5a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e5a4:	6013      	str	r3, [r2, #0]
 800e5a6:	4b55      	ldr	r3, [pc, #340]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4a54      	ldr	r2, [pc, #336]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e5ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e5b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d013      	beq.n	800e5e2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5ba:	f7f8 fbaf 	bl	8006d1c <HAL_GetTick>
 800e5be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e5c0:	e008      	b.n	800e5d4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e5c2:	f7f8 fbab 	bl	8006d1c <HAL_GetTick>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	2b64      	cmp	r3, #100	; 0x64
 800e5ce:	d901      	bls.n	800e5d4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800e5d0:	2303      	movs	r3, #3
 800e5d2:	e380      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e5d4:	4b49      	ldr	r3, [pc, #292]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d0f0      	beq.n	800e5c2 <HAL_RCC_OscConfig+0x13e>
 800e5e0:	e014      	b.n	800e60c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5e2:	f7f8 fb9b 	bl	8006d1c <HAL_GetTick>
 800e5e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e5e8:	e008      	b.n	800e5fc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e5ea:	f7f8 fb97 	bl	8006d1c <HAL_GetTick>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	2b64      	cmp	r3, #100	; 0x64
 800e5f6:	d901      	bls.n	800e5fc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	e36c      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e5fc:	4b3f      	ldr	r3, [pc, #252]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e604:	2b00      	cmp	r3, #0
 800e606:	d1f0      	bne.n	800e5ea <HAL_RCC_OscConfig+0x166>
 800e608:	e000      	b.n	800e60c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e60a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f003 0302 	and.w	r3, r3, #2
 800e614:	2b00      	cmp	r3, #0
 800e616:	f000 808c 	beq.w	800e732 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e61a:	4b38      	ldr	r3, [pc, #224]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e61c:	691b      	ldr	r3, [r3, #16]
 800e61e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e622:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e624:	4b35      	ldr	r3, [pc, #212]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e628:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e62a:	6a3b      	ldr	r3, [r7, #32]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d007      	beq.n	800e640 <HAL_RCC_OscConfig+0x1bc>
 800e630:	6a3b      	ldr	r3, [r7, #32]
 800e632:	2b18      	cmp	r3, #24
 800e634:	d137      	bne.n	800e6a6 <HAL_RCC_OscConfig+0x222>
 800e636:	69fb      	ldr	r3, [r7, #28]
 800e638:	f003 0303 	and.w	r3, r3, #3
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d132      	bne.n	800e6a6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e640:	4b2e      	ldr	r3, [pc, #184]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f003 0304 	and.w	r3, r3, #4
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d005      	beq.n	800e658 <HAL_RCC_OscConfig+0x1d4>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d101      	bne.n	800e658 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800e654:	2301      	movs	r3, #1
 800e656:	e33e      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e658:	4b28      	ldr	r3, [pc, #160]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f023 0219 	bic.w	r2, r3, #25
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	4925      	ldr	r1, [pc, #148]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e666:	4313      	orrs	r3, r2
 800e668:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e66a:	f7f8 fb57 	bl	8006d1c <HAL_GetTick>
 800e66e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e670:	e008      	b.n	800e684 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e672:	f7f8 fb53 	bl	8006d1c <HAL_GetTick>
 800e676:	4602      	mov	r2, r0
 800e678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67a:	1ad3      	subs	r3, r2, r3
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d901      	bls.n	800e684 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800e680:	2303      	movs	r3, #3
 800e682:	e328      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e684:	4b1d      	ldr	r3, [pc, #116]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f003 0304 	and.w	r3, r3, #4
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d0f0      	beq.n	800e672 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e690:	4b1a      	ldr	r3, [pc, #104]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	691b      	ldr	r3, [r3, #16]
 800e69c:	061b      	lsls	r3, r3, #24
 800e69e:	4917      	ldr	r1, [pc, #92]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e6a4:	e045      	b.n	800e732 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	68db      	ldr	r3, [r3, #12]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d028      	beq.n	800e700 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e6ae:	4b13      	ldr	r3, [pc, #76]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f023 0219 	bic.w	r2, r3, #25
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	4910      	ldr	r1, [pc, #64]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6c0:	f7f8 fb2c 	bl	8006d1c <HAL_GetTick>
 800e6c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e6c6:	e008      	b.n	800e6da <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e6c8:	f7f8 fb28 	bl	8006d1c <HAL_GetTick>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d0:	1ad3      	subs	r3, r2, r3
 800e6d2:	2b02      	cmp	r3, #2
 800e6d4:	d901      	bls.n	800e6da <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800e6d6:	2303      	movs	r3, #3
 800e6d8:	e2fd      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e6da:	4b08      	ldr	r3, [pc, #32]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f003 0304 	and.w	r3, r3, #4
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d0f0      	beq.n	800e6c8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e6e6:	4b05      	ldr	r3, [pc, #20]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	691b      	ldr	r3, [r3, #16]
 800e6f2:	061b      	lsls	r3, r3, #24
 800e6f4:	4901      	ldr	r1, [pc, #4]	; (800e6fc <HAL_RCC_OscConfig+0x278>)
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	604b      	str	r3, [r1, #4]
 800e6fa:	e01a      	b.n	800e732 <HAL_RCC_OscConfig+0x2ae>
 800e6fc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e700:	4b97      	ldr	r3, [pc, #604]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4a96      	ldr	r2, [pc, #600]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e706:	f023 0301 	bic.w	r3, r3, #1
 800e70a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e70c:	f7f8 fb06 	bl	8006d1c <HAL_GetTick>
 800e710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e712:	e008      	b.n	800e726 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e714:	f7f8 fb02 	bl	8006d1c <HAL_GetTick>
 800e718:	4602      	mov	r2, r0
 800e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71c:	1ad3      	subs	r3, r2, r3
 800e71e:	2b02      	cmp	r3, #2
 800e720:	d901      	bls.n	800e726 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800e722:	2303      	movs	r3, #3
 800e724:	e2d7      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e726:	4b8e      	ldr	r3, [pc, #568]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f003 0304 	and.w	r3, r3, #4
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1f0      	bne.n	800e714 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f003 0310 	and.w	r3, r3, #16
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d06a      	beq.n	800e814 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e73e:	4b88      	ldr	r3, [pc, #544]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e746:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e748:	4b85      	ldr	r3, [pc, #532]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e74c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	2b08      	cmp	r3, #8
 800e752:	d007      	beq.n	800e764 <HAL_RCC_OscConfig+0x2e0>
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	2b18      	cmp	r3, #24
 800e758:	d11b      	bne.n	800e792 <HAL_RCC_OscConfig+0x30e>
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	f003 0303 	and.w	r3, r3, #3
 800e760:	2b01      	cmp	r3, #1
 800e762:	d116      	bne.n	800e792 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e764:	4b7e      	ldr	r3, [pc, #504]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d005      	beq.n	800e77c <HAL_RCC_OscConfig+0x2f8>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	69db      	ldr	r3, [r3, #28]
 800e774:	2b80      	cmp	r3, #128	; 0x80
 800e776:	d001      	beq.n	800e77c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800e778:	2301      	movs	r3, #1
 800e77a:	e2ac      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e77c:	4b78      	ldr	r3, [pc, #480]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6a1b      	ldr	r3, [r3, #32]
 800e788:	061b      	lsls	r3, r3, #24
 800e78a:	4975      	ldr	r1, [pc, #468]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e78c:	4313      	orrs	r3, r2
 800e78e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e790:	e040      	b.n	800e814 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	69db      	ldr	r3, [r3, #28]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d023      	beq.n	800e7e2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e79a:	4b71      	ldr	r3, [pc, #452]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4a70      	ldr	r2, [pc, #448]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e7a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7a6:	f7f8 fab9 	bl	8006d1c <HAL_GetTick>
 800e7aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e7ac:	e008      	b.n	800e7c0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e7ae:	f7f8 fab5 	bl	8006d1c <HAL_GetTick>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	1ad3      	subs	r3, r2, r3
 800e7b8:	2b02      	cmp	r3, #2
 800e7ba:	d901      	bls.n	800e7c0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800e7bc:	2303      	movs	r3, #3
 800e7be:	e28a      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e7c0:	4b67      	ldr	r3, [pc, #412]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d0f0      	beq.n	800e7ae <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e7cc:	4b64      	ldr	r3, [pc, #400]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e7ce:	68db      	ldr	r3, [r3, #12]
 800e7d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6a1b      	ldr	r3, [r3, #32]
 800e7d8:	061b      	lsls	r3, r3, #24
 800e7da:	4961      	ldr	r1, [pc, #388]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	60cb      	str	r3, [r1, #12]
 800e7e0:	e018      	b.n	800e814 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e7e2:	4b5f      	ldr	r3, [pc, #380]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4a5e      	ldr	r2, [pc, #376]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e7e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7ee:	f7f8 fa95 	bl	8006d1c <HAL_GetTick>
 800e7f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e7f4:	e008      	b.n	800e808 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e7f6:	f7f8 fa91 	bl	8006d1c <HAL_GetTick>
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fe:	1ad3      	subs	r3, r2, r3
 800e800:	2b02      	cmp	r3, #2
 800e802:	d901      	bls.n	800e808 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800e804:	2303      	movs	r3, #3
 800e806:	e266      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e808:	4b55      	ldr	r3, [pc, #340]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e810:	2b00      	cmp	r3, #0
 800e812:	d1f0      	bne.n	800e7f6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f003 0308 	and.w	r3, r3, #8
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d036      	beq.n	800e88e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	695b      	ldr	r3, [r3, #20]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d019      	beq.n	800e85c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e828:	4b4d      	ldr	r3, [pc, #308]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e82a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e82c:	4a4c      	ldr	r2, [pc, #304]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e82e:	f043 0301 	orr.w	r3, r3, #1
 800e832:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e834:	f7f8 fa72 	bl	8006d1c <HAL_GetTick>
 800e838:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e83a:	e008      	b.n	800e84e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e83c:	f7f8 fa6e 	bl	8006d1c <HAL_GetTick>
 800e840:	4602      	mov	r2, r0
 800e842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	2b02      	cmp	r3, #2
 800e848:	d901      	bls.n	800e84e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800e84a:	2303      	movs	r3, #3
 800e84c:	e243      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e84e:	4b44      	ldr	r3, [pc, #272]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e852:	f003 0302 	and.w	r3, r3, #2
 800e856:	2b00      	cmp	r3, #0
 800e858:	d0f0      	beq.n	800e83c <HAL_RCC_OscConfig+0x3b8>
 800e85a:	e018      	b.n	800e88e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e85c:	4b40      	ldr	r3, [pc, #256]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e85e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e860:	4a3f      	ldr	r2, [pc, #252]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e862:	f023 0301 	bic.w	r3, r3, #1
 800e866:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e868:	f7f8 fa58 	bl	8006d1c <HAL_GetTick>
 800e86c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e86e:	e008      	b.n	800e882 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e870:	f7f8 fa54 	bl	8006d1c <HAL_GetTick>
 800e874:	4602      	mov	r2, r0
 800e876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e878:	1ad3      	subs	r3, r2, r3
 800e87a:	2b02      	cmp	r3, #2
 800e87c:	d901      	bls.n	800e882 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800e87e:	2303      	movs	r3, #3
 800e880:	e229      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e882:	4b37      	ldr	r3, [pc, #220]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e886:	f003 0302 	and.w	r3, r3, #2
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d1f0      	bne.n	800e870 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f003 0320 	and.w	r3, r3, #32
 800e896:	2b00      	cmp	r3, #0
 800e898:	d036      	beq.n	800e908 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	699b      	ldr	r3, [r3, #24]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d019      	beq.n	800e8d6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e8a2:	4b2f      	ldr	r3, [pc, #188]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	4a2e      	ldr	r2, [pc, #184]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e8a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e8ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e8ae:	f7f8 fa35 	bl	8006d1c <HAL_GetTick>
 800e8b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e8b4:	e008      	b.n	800e8c8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e8b6:	f7f8 fa31 	bl	8006d1c <HAL_GetTick>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8be:	1ad3      	subs	r3, r2, r3
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	d901      	bls.n	800e8c8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800e8c4:	2303      	movs	r3, #3
 800e8c6:	e206      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e8c8:	4b25      	ldr	r3, [pc, #148]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d0f0      	beq.n	800e8b6 <HAL_RCC_OscConfig+0x432>
 800e8d4:	e018      	b.n	800e908 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e8d6:	4b22      	ldr	r3, [pc, #136]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a21      	ldr	r2, [pc, #132]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e8dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e8e2:	f7f8 fa1b 	bl	8006d1c <HAL_GetTick>
 800e8e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e8e8:	e008      	b.n	800e8fc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e8ea:	f7f8 fa17 	bl	8006d1c <HAL_GetTick>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f2:	1ad3      	subs	r3, r2, r3
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	d901      	bls.n	800e8fc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800e8f8:	2303      	movs	r3, #3
 800e8fa:	e1ec      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e8fc:	4b18      	ldr	r3, [pc, #96]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e904:	2b00      	cmp	r3, #0
 800e906:	d1f0      	bne.n	800e8ea <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f003 0304 	and.w	r3, r3, #4
 800e910:	2b00      	cmp	r3, #0
 800e912:	f000 80af 	beq.w	800ea74 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e916:	4b13      	ldr	r3, [pc, #76]	; (800e964 <HAL_RCC_OscConfig+0x4e0>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a12      	ldr	r2, [pc, #72]	; (800e964 <HAL_RCC_OscConfig+0x4e0>)
 800e91c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e920:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e922:	f7f8 f9fb 	bl	8006d1c <HAL_GetTick>
 800e926:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e928:	e008      	b.n	800e93c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e92a:	f7f8 f9f7 	bl	8006d1c <HAL_GetTick>
 800e92e:	4602      	mov	r2, r0
 800e930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e932:	1ad3      	subs	r3, r2, r3
 800e934:	2b64      	cmp	r3, #100	; 0x64
 800e936:	d901      	bls.n	800e93c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800e938:	2303      	movs	r3, #3
 800e93a:	e1cc      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e93c:	4b09      	ldr	r3, [pc, #36]	; (800e964 <HAL_RCC_OscConfig+0x4e0>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e944:	2b00      	cmp	r3, #0
 800e946:	d0f0      	beq.n	800e92a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d10b      	bne.n	800e968 <HAL_RCC_OscConfig+0x4e4>
 800e950:	4b03      	ldr	r3, [pc, #12]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e954:	4a02      	ldr	r2, [pc, #8]	; (800e960 <HAL_RCC_OscConfig+0x4dc>)
 800e956:	f043 0301 	orr.w	r3, r3, #1
 800e95a:	6713      	str	r3, [r2, #112]	; 0x70
 800e95c:	e05b      	b.n	800ea16 <HAL_RCC_OscConfig+0x592>
 800e95e:	bf00      	nop
 800e960:	58024400 	.word	0x58024400
 800e964:	58024800 	.word	0x58024800
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d112      	bne.n	800e996 <HAL_RCC_OscConfig+0x512>
 800e970:	4b9d      	ldr	r3, [pc, #628]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e974:	4a9c      	ldr	r2, [pc, #624]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e976:	f023 0301 	bic.w	r3, r3, #1
 800e97a:	6713      	str	r3, [r2, #112]	; 0x70
 800e97c:	4b9a      	ldr	r3, [pc, #616]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e97e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e980:	4a99      	ldr	r2, [pc, #612]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e986:	6713      	str	r3, [r2, #112]	; 0x70
 800e988:	4b97      	ldr	r3, [pc, #604]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e98c:	4a96      	ldr	r2, [pc, #600]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e98e:	f023 0304 	bic.w	r3, r3, #4
 800e992:	6713      	str	r3, [r2, #112]	; 0x70
 800e994:	e03f      	b.n	800ea16 <HAL_RCC_OscConfig+0x592>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	2b05      	cmp	r3, #5
 800e99c:	d112      	bne.n	800e9c4 <HAL_RCC_OscConfig+0x540>
 800e99e:	4b92      	ldr	r3, [pc, #584]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9a2:	4a91      	ldr	r2, [pc, #580]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9a4:	f043 0304 	orr.w	r3, r3, #4
 800e9a8:	6713      	str	r3, [r2, #112]	; 0x70
 800e9aa:	4b8f      	ldr	r3, [pc, #572]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ae:	4a8e      	ldr	r2, [pc, #568]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9b4:	6713      	str	r3, [r2, #112]	; 0x70
 800e9b6:	4b8c      	ldr	r3, [pc, #560]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ba:	4a8b      	ldr	r2, [pc, #556]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9bc:	f043 0301 	orr.w	r3, r3, #1
 800e9c0:	6713      	str	r3, [r2, #112]	; 0x70
 800e9c2:	e028      	b.n	800ea16 <HAL_RCC_OscConfig+0x592>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	2b85      	cmp	r3, #133	; 0x85
 800e9ca:	d112      	bne.n	800e9f2 <HAL_RCC_OscConfig+0x56e>
 800e9cc:	4b86      	ldr	r3, [pc, #536]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9d0:	4a85      	ldr	r2, [pc, #532]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9d2:	f043 0304 	orr.w	r3, r3, #4
 800e9d6:	6713      	str	r3, [r2, #112]	; 0x70
 800e9d8:	4b83      	ldr	r3, [pc, #524]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9dc:	4a82      	ldr	r2, [pc, #520]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9e2:	6713      	str	r3, [r2, #112]	; 0x70
 800e9e4:	4b80      	ldr	r3, [pc, #512]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9e8:	4a7f      	ldr	r2, [pc, #508]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9ea:	f043 0301 	orr.w	r3, r3, #1
 800e9ee:	6713      	str	r3, [r2, #112]	; 0x70
 800e9f0:	e011      	b.n	800ea16 <HAL_RCC_OscConfig+0x592>
 800e9f2:	4b7d      	ldr	r3, [pc, #500]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9f6:	4a7c      	ldr	r2, [pc, #496]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800e9f8:	f023 0301 	bic.w	r3, r3, #1
 800e9fc:	6713      	str	r3, [r2, #112]	; 0x70
 800e9fe:	4b7a      	ldr	r3, [pc, #488]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800ea00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea02:	4a79      	ldr	r2, [pc, #484]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800ea04:	f023 0304 	bic.w	r3, r3, #4
 800ea08:	6713      	str	r3, [r2, #112]	; 0x70
 800ea0a:	4b77      	ldr	r3, [pc, #476]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800ea0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea0e:	4a76      	ldr	r2, [pc, #472]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800ea10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	689b      	ldr	r3, [r3, #8]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d015      	beq.n	800ea4a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea1e:	f7f8 f97d 	bl	8006d1c <HAL_GetTick>
 800ea22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ea24:	e00a      	b.n	800ea3c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea26:	f7f8 f979 	bl	8006d1c <HAL_GetTick>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2e:	1ad3      	subs	r3, r2, r3
 800ea30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d901      	bls.n	800ea3c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800ea38:	2303      	movs	r3, #3
 800ea3a:	e14c      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ea3c:	4b6a      	ldr	r3, [pc, #424]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800ea3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea40:	f003 0302 	and.w	r3, r3, #2
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d0ee      	beq.n	800ea26 <HAL_RCC_OscConfig+0x5a2>
 800ea48:	e014      	b.n	800ea74 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea4a:	f7f8 f967 	bl	8006d1c <HAL_GetTick>
 800ea4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ea50:	e00a      	b.n	800ea68 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea52:	f7f8 f963 	bl	8006d1c <HAL_GetTick>
 800ea56:	4602      	mov	r2, r0
 800ea58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d901      	bls.n	800ea68 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800ea64:	2303      	movs	r3, #3
 800ea66:	e136      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ea68:	4b5f      	ldr	r3, [pc, #380]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800ea6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea6c:	f003 0302 	and.w	r3, r3, #2
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1ee      	bne.n	800ea52 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	f000 812b 	beq.w	800ecd4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ea7e:	4b5a      	ldr	r3, [pc, #360]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea86:	2b18      	cmp	r3, #24
 800ea88:	f000 80bb 	beq.w	800ec02 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea90:	2b02      	cmp	r3, #2
 800ea92:	f040 8095 	bne.w	800ebc0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ea96:	4b54      	ldr	r3, [pc, #336]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a53      	ldr	r2, [pc, #332]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800ea9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800eaa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eaa2:	f7f8 f93b 	bl	8006d1c <HAL_GetTick>
 800eaa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eaa8:	e008      	b.n	800eabc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eaaa:	f7f8 f937 	bl	8006d1c <HAL_GetTick>
 800eaae:	4602      	mov	r2, r0
 800eab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	2b02      	cmp	r3, #2
 800eab6:	d901      	bls.n	800eabc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800eab8:	2303      	movs	r3, #3
 800eaba:	e10c      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eabc:	4b4a      	ldr	r3, [pc, #296]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1f0      	bne.n	800eaaa <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800eac8:	4b47      	ldr	r3, [pc, #284]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eaca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eacc:	4b47      	ldr	r3, [pc, #284]	; (800ebec <HAL_RCC_OscConfig+0x768>)
 800eace:	4013      	ands	r3, r2
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ead4:	687a      	ldr	r2, [r7, #4]
 800ead6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ead8:	0112      	lsls	r2, r2, #4
 800eada:	430a      	orrs	r2, r1
 800eadc:	4942      	ldr	r1, [pc, #264]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eade:	4313      	orrs	r3, r2
 800eae0:	628b      	str	r3, [r1, #40]	; 0x28
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eae6:	3b01      	subs	r3, #1
 800eae8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	025b      	lsls	r3, r3, #9
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	431a      	orrs	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eafc:	3b01      	subs	r3, #1
 800eafe:	041b      	lsls	r3, r3, #16
 800eb00:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800eb04:	431a      	orrs	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	061b      	lsls	r3, r3, #24
 800eb0e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800eb12:	4935      	ldr	r1, [pc, #212]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb14:	4313      	orrs	r3, r2
 800eb16:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800eb18:	4b33      	ldr	r3, [pc, #204]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb1c:	4a32      	ldr	r2, [pc, #200]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb1e:	f023 0301 	bic.w	r3, r3, #1
 800eb22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800eb24:	4b30      	ldr	r3, [pc, #192]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb28:	4b31      	ldr	r3, [pc, #196]	; (800ebf0 <HAL_RCC_OscConfig+0x76c>)
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800eb30:	00d2      	lsls	r2, r2, #3
 800eb32:	492d      	ldr	r1, [pc, #180]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb34:	4313      	orrs	r3, r2
 800eb36:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800eb38:	4b2b      	ldr	r3, [pc, #172]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb3c:	f023 020c 	bic.w	r2, r3, #12
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb44:	4928      	ldr	r1, [pc, #160]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb46:	4313      	orrs	r3, r2
 800eb48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800eb4a:	4b27      	ldr	r3, [pc, #156]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb4e:	f023 0202 	bic.w	r2, r3, #2
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb56:	4924      	ldr	r1, [pc, #144]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800eb5c:	4b22      	ldr	r3, [pc, #136]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb60:	4a21      	ldr	r2, [pc, #132]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb68:	4b1f      	ldr	r3, [pc, #124]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6c:	4a1e      	ldr	r2, [pc, #120]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800eb74:	4b1c      	ldr	r3, [pc, #112]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb78:	4a1b      	ldr	r2, [pc, #108]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eb7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800eb80:	4b19      	ldr	r3, [pc, #100]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb84:	4a18      	ldr	r2, [pc, #96]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb86:	f043 0301 	orr.w	r3, r3, #1
 800eb8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800eb8c:	4b16      	ldr	r3, [pc, #88]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a15      	ldr	r2, [pc, #84]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800eb92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800eb96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb98:	f7f8 f8c0 	bl	8006d1c <HAL_GetTick>
 800eb9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800eb9e:	e008      	b.n	800ebb2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eba0:	f7f8 f8bc 	bl	8006d1c <HAL_GetTick>
 800eba4:	4602      	mov	r2, r0
 800eba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba8:	1ad3      	subs	r3, r2, r3
 800ebaa:	2b02      	cmp	r3, #2
 800ebac:	d901      	bls.n	800ebb2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800ebae:	2303      	movs	r3, #3
 800ebb0:	e091      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ebb2:	4b0d      	ldr	r3, [pc, #52]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d0f0      	beq.n	800eba0 <HAL_RCC_OscConfig+0x71c>
 800ebbe:	e089      	b.n	800ecd4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ebc0:	4b09      	ldr	r3, [pc, #36]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a08      	ldr	r2, [pc, #32]	; (800ebe8 <HAL_RCC_OscConfig+0x764>)
 800ebc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ebca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ebcc:	f7f8 f8a6 	bl	8006d1c <HAL_GetTick>
 800ebd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ebd2:	e00f      	b.n	800ebf4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ebd4:	f7f8 f8a2 	bl	8006d1c <HAL_GetTick>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebdc:	1ad3      	subs	r3, r2, r3
 800ebde:	2b02      	cmp	r3, #2
 800ebe0:	d908      	bls.n	800ebf4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800ebe2:	2303      	movs	r3, #3
 800ebe4:	e077      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
 800ebe6:	bf00      	nop
 800ebe8:	58024400 	.word	0x58024400
 800ebec:	fffffc0c 	.word	0xfffffc0c
 800ebf0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ebf4:	4b3a      	ldr	r3, [pc, #232]	; (800ece0 <HAL_RCC_OscConfig+0x85c>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d1e9      	bne.n	800ebd4 <HAL_RCC_OscConfig+0x750>
 800ec00:	e068      	b.n	800ecd4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ec02:	4b37      	ldr	r3, [pc, #220]	; (800ece0 <HAL_RCC_OscConfig+0x85c>)
 800ec04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec06:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ec08:	4b35      	ldr	r3, [pc, #212]	; (800ece0 <HAL_RCC_OscConfig+0x85c>)
 800ec0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec0c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d031      	beq.n	800ec7a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	f003 0203 	and.w	r2, r3, #3
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d12a      	bne.n	800ec7a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	091b      	lsrs	r3, r3, #4
 800ec28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d122      	bne.n	800ec7a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d11a      	bne.n	800ec7a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	0a5b      	lsrs	r3, r3, #9
 800ec48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec50:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d111      	bne.n	800ec7a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	0c1b      	lsrs	r3, r3, #16
 800ec5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d108      	bne.n	800ec7a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	0e1b      	lsrs	r3, r3, #24
 800ec6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d001      	beq.n	800ec7e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e02b      	b.n	800ecd6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ec7e:	4b18      	ldr	r3, [pc, #96]	; (800ece0 <HAL_RCC_OscConfig+0x85c>)
 800ec80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec82:	08db      	lsrs	r3, r3, #3
 800ec84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec88:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec8e:	693a      	ldr	r2, [r7, #16]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d01f      	beq.n	800ecd4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ec94:	4b12      	ldr	r3, [pc, #72]	; (800ece0 <HAL_RCC_OscConfig+0x85c>)
 800ec96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec98:	4a11      	ldr	r2, [pc, #68]	; (800ece0 <HAL_RCC_OscConfig+0x85c>)
 800ec9a:	f023 0301 	bic.w	r3, r3, #1
 800ec9e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800eca0:	f7f8 f83c 	bl	8006d1c <HAL_GetTick>
 800eca4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800eca6:	bf00      	nop
 800eca8:	f7f8 f838 	bl	8006d1c <HAL_GetTick>
 800ecac:	4602      	mov	r2, r0
 800ecae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d0f9      	beq.n	800eca8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ecb4:	4b0a      	ldr	r3, [pc, #40]	; (800ece0 <HAL_RCC_OscConfig+0x85c>)
 800ecb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecb8:	4b0a      	ldr	r3, [pc, #40]	; (800ece4 <HAL_RCC_OscConfig+0x860>)
 800ecba:	4013      	ands	r3, r2
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ecc0:	00d2      	lsls	r2, r2, #3
 800ecc2:	4907      	ldr	r1, [pc, #28]	; (800ece0 <HAL_RCC_OscConfig+0x85c>)
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ecc8:	4b05      	ldr	r3, [pc, #20]	; (800ece0 <HAL_RCC_OscConfig+0x85c>)
 800ecca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eccc:	4a04      	ldr	r2, [pc, #16]	; (800ece0 <HAL_RCC_OscConfig+0x85c>)
 800ecce:	f043 0301 	orr.w	r3, r3, #1
 800ecd2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3730      	adds	r7, #48	; 0x30
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	58024400 	.word	0x58024400
 800ece4:	ffff0007 	.word	0xffff0007

0800ece8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b086      	sub	sp, #24
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d101      	bne.n	800ecfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	e19c      	b.n	800f036 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ecfc:	4b8a      	ldr	r3, [pc, #552]	; (800ef28 <HAL_RCC_ClockConfig+0x240>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f003 030f 	and.w	r3, r3, #15
 800ed04:	683a      	ldr	r2, [r7, #0]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d910      	bls.n	800ed2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed0a:	4b87      	ldr	r3, [pc, #540]	; (800ef28 <HAL_RCC_ClockConfig+0x240>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f023 020f 	bic.w	r2, r3, #15
 800ed12:	4985      	ldr	r1, [pc, #532]	; (800ef28 <HAL_RCC_ClockConfig+0x240>)
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	4313      	orrs	r3, r2
 800ed18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed1a:	4b83      	ldr	r3, [pc, #524]	; (800ef28 <HAL_RCC_ClockConfig+0x240>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f003 030f 	and.w	r3, r3, #15
 800ed22:	683a      	ldr	r2, [r7, #0]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d001      	beq.n	800ed2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ed28:	2301      	movs	r3, #1
 800ed2a:	e184      	b.n	800f036 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f003 0304 	and.w	r3, r3, #4
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d010      	beq.n	800ed5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	691a      	ldr	r2, [r3, #16]
 800ed3c:	4b7b      	ldr	r3, [pc, #492]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ed3e:	699b      	ldr	r3, [r3, #24]
 800ed40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d908      	bls.n	800ed5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ed48:	4b78      	ldr	r3, [pc, #480]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ed4a:	699b      	ldr	r3, [r3, #24]
 800ed4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	691b      	ldr	r3, [r3, #16]
 800ed54:	4975      	ldr	r1, [pc, #468]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ed56:	4313      	orrs	r3, r2
 800ed58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f003 0308 	and.w	r3, r3, #8
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d010      	beq.n	800ed88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	695a      	ldr	r2, [r3, #20]
 800ed6a:	4b70      	ldr	r3, [pc, #448]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ed6c:	69db      	ldr	r3, [r3, #28]
 800ed6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d908      	bls.n	800ed88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ed76:	4b6d      	ldr	r3, [pc, #436]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ed78:	69db      	ldr	r3, [r3, #28]
 800ed7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	695b      	ldr	r3, [r3, #20]
 800ed82:	496a      	ldr	r1, [pc, #424]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ed84:	4313      	orrs	r3, r2
 800ed86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f003 0310 	and.w	r3, r3, #16
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d010      	beq.n	800edb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	699a      	ldr	r2, [r3, #24]
 800ed98:	4b64      	ldr	r3, [pc, #400]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ed9a:	69db      	ldr	r3, [r3, #28]
 800ed9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d908      	bls.n	800edb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800eda4:	4b61      	ldr	r3, [pc, #388]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800eda6:	69db      	ldr	r3, [r3, #28]
 800eda8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	699b      	ldr	r3, [r3, #24]
 800edb0:	495e      	ldr	r1, [pc, #376]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800edb2:	4313      	orrs	r3, r2
 800edb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f003 0320 	and.w	r3, r3, #32
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d010      	beq.n	800ede4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	69da      	ldr	r2, [r3, #28]
 800edc6:	4b59      	ldr	r3, [pc, #356]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800edc8:	6a1b      	ldr	r3, [r3, #32]
 800edca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800edce:	429a      	cmp	r2, r3
 800edd0:	d908      	bls.n	800ede4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800edd2:	4b56      	ldr	r3, [pc, #344]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800edd4:	6a1b      	ldr	r3, [r3, #32]
 800edd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	69db      	ldr	r3, [r3, #28]
 800edde:	4953      	ldr	r1, [pc, #332]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ede0:	4313      	orrs	r3, r2
 800ede2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f003 0302 	and.w	r3, r3, #2
 800edec:	2b00      	cmp	r3, #0
 800edee:	d010      	beq.n	800ee12 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	68da      	ldr	r2, [r3, #12]
 800edf4:	4b4d      	ldr	r3, [pc, #308]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800edf6:	699b      	ldr	r3, [r3, #24]
 800edf8:	f003 030f 	and.w	r3, r3, #15
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d908      	bls.n	800ee12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ee00:	4b4a      	ldr	r3, [pc, #296]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ee02:	699b      	ldr	r3, [r3, #24]
 800ee04:	f023 020f 	bic.w	r2, r3, #15
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	4947      	ldr	r1, [pc, #284]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ee0e:	4313      	orrs	r3, r2
 800ee10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f003 0301 	and.w	r3, r3, #1
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d055      	beq.n	800eeca <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ee1e:	4b43      	ldr	r3, [pc, #268]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ee20:	699b      	ldr	r3, [r3, #24]
 800ee22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	4940      	ldr	r1, [pc, #256]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	2b02      	cmp	r3, #2
 800ee36:	d107      	bne.n	800ee48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ee38:	4b3c      	ldr	r3, [pc, #240]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d121      	bne.n	800ee88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ee44:	2301      	movs	r3, #1
 800ee46:	e0f6      	b.n	800f036 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	2b03      	cmp	r3, #3
 800ee4e:	d107      	bne.n	800ee60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ee50:	4b36      	ldr	r3, [pc, #216]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d115      	bne.n	800ee88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e0ea      	b.n	800f036 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d107      	bne.n	800ee78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ee68:	4b30      	ldr	r3, [pc, #192]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d109      	bne.n	800ee88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ee74:	2301      	movs	r3, #1
 800ee76:	e0de      	b.n	800f036 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ee78:	4b2c      	ldr	r3, [pc, #176]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f003 0304 	and.w	r3, r3, #4
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d101      	bne.n	800ee88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ee84:	2301      	movs	r3, #1
 800ee86:	e0d6      	b.n	800f036 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ee88:	4b28      	ldr	r3, [pc, #160]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ee8a:	691b      	ldr	r3, [r3, #16]
 800ee8c:	f023 0207 	bic.w	r2, r3, #7
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	4925      	ldr	r1, [pc, #148]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800ee96:	4313      	orrs	r3, r2
 800ee98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee9a:	f7f7 ff3f 	bl	8006d1c <HAL_GetTick>
 800ee9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eea0:	e00a      	b.n	800eeb8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eea2:	f7f7 ff3b 	bl	8006d1c <HAL_GetTick>
 800eea6:	4602      	mov	r2, r0
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	1ad3      	subs	r3, r2, r3
 800eeac:	f241 3288 	movw	r2, #5000	; 0x1388
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d901      	bls.n	800eeb8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800eeb4:	2303      	movs	r3, #3
 800eeb6:	e0be      	b.n	800f036 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eeb8:	4b1c      	ldr	r3, [pc, #112]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800eeba:	691b      	ldr	r3, [r3, #16]
 800eebc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	00db      	lsls	r3, r3, #3
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d1eb      	bne.n	800eea2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 0302 	and.w	r3, r3, #2
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d010      	beq.n	800eef8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	68da      	ldr	r2, [r3, #12]
 800eeda:	4b14      	ldr	r3, [pc, #80]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800eedc:	699b      	ldr	r3, [r3, #24]
 800eede:	f003 030f 	and.w	r3, r3, #15
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d208      	bcs.n	800eef8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eee6:	4b11      	ldr	r3, [pc, #68]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800eee8:	699b      	ldr	r3, [r3, #24]
 800eeea:	f023 020f 	bic.w	r2, r3, #15
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	490e      	ldr	r1, [pc, #56]	; (800ef2c <HAL_RCC_ClockConfig+0x244>)
 800eef4:	4313      	orrs	r3, r2
 800eef6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800eef8:	4b0b      	ldr	r3, [pc, #44]	; (800ef28 <HAL_RCC_ClockConfig+0x240>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f003 030f 	and.w	r3, r3, #15
 800ef00:	683a      	ldr	r2, [r7, #0]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d214      	bcs.n	800ef30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef06:	4b08      	ldr	r3, [pc, #32]	; (800ef28 <HAL_RCC_ClockConfig+0x240>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f023 020f 	bic.w	r2, r3, #15
 800ef0e:	4906      	ldr	r1, [pc, #24]	; (800ef28 <HAL_RCC_ClockConfig+0x240>)
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	4313      	orrs	r3, r2
 800ef14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef16:	4b04      	ldr	r3, [pc, #16]	; (800ef28 <HAL_RCC_ClockConfig+0x240>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f003 030f 	and.w	r3, r3, #15
 800ef1e:	683a      	ldr	r2, [r7, #0]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d005      	beq.n	800ef30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ef24:	2301      	movs	r3, #1
 800ef26:	e086      	b.n	800f036 <HAL_RCC_ClockConfig+0x34e>
 800ef28:	52002000 	.word	0x52002000
 800ef2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f003 0304 	and.w	r3, r3, #4
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d010      	beq.n	800ef5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	691a      	ldr	r2, [r3, #16]
 800ef40:	4b3f      	ldr	r3, [pc, #252]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800ef42:	699b      	ldr	r3, [r3, #24]
 800ef44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d208      	bcs.n	800ef5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ef4c:	4b3c      	ldr	r3, [pc, #240]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800ef4e:	699b      	ldr	r3, [r3, #24]
 800ef50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	4939      	ldr	r1, [pc, #228]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f003 0308 	and.w	r3, r3, #8
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d010      	beq.n	800ef8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	695a      	ldr	r2, [r3, #20]
 800ef6e:	4b34      	ldr	r3, [pc, #208]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800ef70:	69db      	ldr	r3, [r3, #28]
 800ef72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d208      	bcs.n	800ef8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ef7a:	4b31      	ldr	r3, [pc, #196]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800ef7c:	69db      	ldr	r3, [r3, #28]
 800ef7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	695b      	ldr	r3, [r3, #20]
 800ef86:	492e      	ldr	r1, [pc, #184]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f003 0310 	and.w	r3, r3, #16
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d010      	beq.n	800efba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	699a      	ldr	r2, [r3, #24]
 800ef9c:	4b28      	ldr	r3, [pc, #160]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800ef9e:	69db      	ldr	r3, [r3, #28]
 800efa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d208      	bcs.n	800efba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800efa8:	4b25      	ldr	r3, [pc, #148]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800efaa:	69db      	ldr	r3, [r3, #28]
 800efac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	699b      	ldr	r3, [r3, #24]
 800efb4:	4922      	ldr	r1, [pc, #136]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800efb6:	4313      	orrs	r3, r2
 800efb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f003 0320 	and.w	r3, r3, #32
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d010      	beq.n	800efe8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	69da      	ldr	r2, [r3, #28]
 800efca:	4b1d      	ldr	r3, [pc, #116]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800efcc:	6a1b      	ldr	r3, [r3, #32]
 800efce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d208      	bcs.n	800efe8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800efd6:	4b1a      	ldr	r3, [pc, #104]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800efd8:	6a1b      	ldr	r3, [r3, #32]
 800efda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	69db      	ldr	r3, [r3, #28]
 800efe2:	4917      	ldr	r1, [pc, #92]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800efe4:	4313      	orrs	r3, r2
 800efe6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800efe8:	f000 f834 	bl	800f054 <HAL_RCC_GetSysClockFreq>
 800efec:	4602      	mov	r2, r0
 800efee:	4b14      	ldr	r3, [pc, #80]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800eff0:	699b      	ldr	r3, [r3, #24]
 800eff2:	0a1b      	lsrs	r3, r3, #8
 800eff4:	f003 030f 	and.w	r3, r3, #15
 800eff8:	4912      	ldr	r1, [pc, #72]	; (800f044 <HAL_RCC_ClockConfig+0x35c>)
 800effa:	5ccb      	ldrb	r3, [r1, r3]
 800effc:	f003 031f 	and.w	r3, r3, #31
 800f000:	fa22 f303 	lsr.w	r3, r2, r3
 800f004:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800f006:	4b0e      	ldr	r3, [pc, #56]	; (800f040 <HAL_RCC_ClockConfig+0x358>)
 800f008:	699b      	ldr	r3, [r3, #24]
 800f00a:	f003 030f 	and.w	r3, r3, #15
 800f00e:	4a0d      	ldr	r2, [pc, #52]	; (800f044 <HAL_RCC_ClockConfig+0x35c>)
 800f010:	5cd3      	ldrb	r3, [r2, r3]
 800f012:	f003 031f 	and.w	r3, r3, #31
 800f016:	693a      	ldr	r2, [r7, #16]
 800f018:	fa22 f303 	lsr.w	r3, r2, r3
 800f01c:	4a0a      	ldr	r2, [pc, #40]	; (800f048 <HAL_RCC_ClockConfig+0x360>)
 800f01e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f020:	4a0a      	ldr	r2, [pc, #40]	; (800f04c <HAL_RCC_ClockConfig+0x364>)
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800f026:	4b0a      	ldr	r3, [pc, #40]	; (800f050 <HAL_RCC_ClockConfig+0x368>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7f7 fe2c 	bl	8006c88 <HAL_InitTick>
 800f030:	4603      	mov	r3, r0
 800f032:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800f034:	7bfb      	ldrb	r3, [r7, #15]
}
 800f036:	4618      	mov	r0, r3
 800f038:	3718      	adds	r7, #24
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	58024400 	.word	0x58024400
 800f044:	08019d10 	.word	0x08019d10
 800f048:	200000e4 	.word	0x200000e4
 800f04c:	200000e0 	.word	0x200000e0
 800f050:	200000e8 	.word	0x200000e8

0800f054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f054:	b480      	push	{r7}
 800f056:	b089      	sub	sp, #36	; 0x24
 800f058:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f05a:	4bb3      	ldr	r3, [pc, #716]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f05c:	691b      	ldr	r3, [r3, #16]
 800f05e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f062:	2b18      	cmp	r3, #24
 800f064:	f200 8155 	bhi.w	800f312 <HAL_RCC_GetSysClockFreq+0x2be>
 800f068:	a201      	add	r2, pc, #4	; (adr r2, 800f070 <HAL_RCC_GetSysClockFreq+0x1c>)
 800f06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f06e:	bf00      	nop
 800f070:	0800f0d5 	.word	0x0800f0d5
 800f074:	0800f313 	.word	0x0800f313
 800f078:	0800f313 	.word	0x0800f313
 800f07c:	0800f313 	.word	0x0800f313
 800f080:	0800f313 	.word	0x0800f313
 800f084:	0800f313 	.word	0x0800f313
 800f088:	0800f313 	.word	0x0800f313
 800f08c:	0800f313 	.word	0x0800f313
 800f090:	0800f0fb 	.word	0x0800f0fb
 800f094:	0800f313 	.word	0x0800f313
 800f098:	0800f313 	.word	0x0800f313
 800f09c:	0800f313 	.word	0x0800f313
 800f0a0:	0800f313 	.word	0x0800f313
 800f0a4:	0800f313 	.word	0x0800f313
 800f0a8:	0800f313 	.word	0x0800f313
 800f0ac:	0800f313 	.word	0x0800f313
 800f0b0:	0800f101 	.word	0x0800f101
 800f0b4:	0800f313 	.word	0x0800f313
 800f0b8:	0800f313 	.word	0x0800f313
 800f0bc:	0800f313 	.word	0x0800f313
 800f0c0:	0800f313 	.word	0x0800f313
 800f0c4:	0800f313 	.word	0x0800f313
 800f0c8:	0800f313 	.word	0x0800f313
 800f0cc:	0800f313 	.word	0x0800f313
 800f0d0:	0800f107 	.word	0x0800f107
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0d4:	4b94      	ldr	r3, [pc, #592]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f003 0320 	and.w	r3, r3, #32
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d009      	beq.n	800f0f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f0e0:	4b91      	ldr	r3, [pc, #580]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	08db      	lsrs	r3, r3, #3
 800f0e6:	f003 0303 	and.w	r3, r3, #3
 800f0ea:	4a90      	ldr	r2, [pc, #576]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f0ec:	fa22 f303 	lsr.w	r3, r2, r3
 800f0f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800f0f2:	e111      	b.n	800f318 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f0f4:	4b8d      	ldr	r3, [pc, #564]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f0f6:	61bb      	str	r3, [r7, #24]
      break;
 800f0f8:	e10e      	b.n	800f318 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800f0fa:	4b8d      	ldr	r3, [pc, #564]	; (800f330 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f0fc:	61bb      	str	r3, [r7, #24]
      break;
 800f0fe:	e10b      	b.n	800f318 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800f100:	4b8c      	ldr	r3, [pc, #560]	; (800f334 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800f102:	61bb      	str	r3, [r7, #24]
      break;
 800f104:	e108      	b.n	800f318 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f106:	4b88      	ldr	r3, [pc, #544]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f10a:	f003 0303 	and.w	r3, r3, #3
 800f10e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800f110:	4b85      	ldr	r3, [pc, #532]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f114:	091b      	lsrs	r3, r3, #4
 800f116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f11a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f11c:	4b82      	ldr	r3, [pc, #520]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f120:	f003 0301 	and.w	r3, r3, #1
 800f124:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f126:	4b80      	ldr	r3, [pc, #512]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f12a:	08db      	lsrs	r3, r3, #3
 800f12c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f130:	68fa      	ldr	r2, [r7, #12]
 800f132:	fb02 f303 	mul.w	r3, r2, r3
 800f136:	ee07 3a90 	vmov	s15, r3
 800f13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f13e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	2b00      	cmp	r3, #0
 800f146:	f000 80e1 	beq.w	800f30c <HAL_RCC_GetSysClockFreq+0x2b8>
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	2b02      	cmp	r3, #2
 800f14e:	f000 8083 	beq.w	800f258 <HAL_RCC_GetSysClockFreq+0x204>
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2b02      	cmp	r3, #2
 800f156:	f200 80a1 	bhi.w	800f29c <HAL_RCC_GetSysClockFreq+0x248>
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d003      	beq.n	800f168 <HAL_RCC_GetSysClockFreq+0x114>
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	2b01      	cmp	r3, #1
 800f164:	d056      	beq.n	800f214 <HAL_RCC_GetSysClockFreq+0x1c0>
 800f166:	e099      	b.n	800f29c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f168:	4b6f      	ldr	r3, [pc, #444]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f003 0320 	and.w	r3, r3, #32
 800f170:	2b00      	cmp	r3, #0
 800f172:	d02d      	beq.n	800f1d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f174:	4b6c      	ldr	r3, [pc, #432]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	08db      	lsrs	r3, r3, #3
 800f17a:	f003 0303 	and.w	r3, r3, #3
 800f17e:	4a6b      	ldr	r2, [pc, #428]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f180:	fa22 f303 	lsr.w	r3, r2, r3
 800f184:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	ee07 3a90 	vmov	s15, r3
 800f18c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	ee07 3a90 	vmov	s15, r3
 800f196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f19a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f19e:	4b62      	ldr	r3, [pc, #392]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1a6:	ee07 3a90 	vmov	s15, r3
 800f1aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800f1b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800f338 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f1b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800f1ce:	e087      	b.n	800f2e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	ee07 3a90 	vmov	s15, r3
 800f1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800f33c <HAL_RCC_GetSysClockFreq+0x2e8>
 800f1de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1e2:	4b51      	ldr	r3, [pc, #324]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ea:	ee07 3a90 	vmov	s15, r3
 800f1ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800f1f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800f338 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f1fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f20a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f20e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f212:	e065      	b.n	800f2e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	ee07 3a90 	vmov	s15, r3
 800f21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f21e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800f340 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f226:	4b40      	ldr	r3, [pc, #256]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f22e:	ee07 3a90 	vmov	s15, r3
 800f232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f236:	ed97 6a02 	vldr	s12, [r7, #8]
 800f23a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800f338 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f23e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f24a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f252:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f256:	e043      	b.n	800f2e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	ee07 3a90 	vmov	s15, r3
 800f25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f262:	eddf 6a38 	vldr	s13, [pc, #224]	; 800f344 <HAL_RCC_GetSysClockFreq+0x2f0>
 800f266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f26a:	4b2f      	ldr	r3, [pc, #188]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f272:	ee07 3a90 	vmov	s15, r3
 800f276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f27a:	ed97 6a02 	vldr	s12, [r7, #8]
 800f27e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800f338 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f28a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f296:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f29a:	e021      	b.n	800f2e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	ee07 3a90 	vmov	s15, r3
 800f2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800f340 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2ae:	4b1e      	ldr	r3, [pc, #120]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2b6:	ee07 3a90 	vmov	s15, r3
 800f2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2be:	ed97 6a02 	vldr	s12, [r7, #8]
 800f2c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800f338 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f2de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800f2e0:	4b11      	ldr	r3, [pc, #68]	; (800f328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f2e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2e4:	0a5b      	lsrs	r3, r3, #9
 800f2e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	ee07 3a90 	vmov	s15, r3
 800f2f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f2f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f304:	ee17 3a90 	vmov	r3, s15
 800f308:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800f30a:	e005      	b.n	800f318 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800f30c:	2300      	movs	r3, #0
 800f30e:	61bb      	str	r3, [r7, #24]
      break;
 800f310:	e002      	b.n	800f318 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800f312:	4b07      	ldr	r3, [pc, #28]	; (800f330 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f314:	61bb      	str	r3, [r7, #24]
      break;
 800f316:	bf00      	nop
  }

  return sysclockfreq;
 800f318:	69bb      	ldr	r3, [r7, #24]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3724      	adds	r7, #36	; 0x24
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop
 800f328:	58024400 	.word	0x58024400
 800f32c:	03d09000 	.word	0x03d09000
 800f330:	003d0900 	.word	0x003d0900
 800f334:	016e3600 	.word	0x016e3600
 800f338:	46000000 	.word	0x46000000
 800f33c:	4c742400 	.word	0x4c742400
 800f340:	4a742400 	.word	0x4a742400
 800f344:	4bb71b00 	.word	0x4bb71b00

0800f348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800f34e:	f7ff fe81 	bl	800f054 <HAL_RCC_GetSysClockFreq>
 800f352:	4602      	mov	r2, r0
 800f354:	4b10      	ldr	r3, [pc, #64]	; (800f398 <HAL_RCC_GetHCLKFreq+0x50>)
 800f356:	699b      	ldr	r3, [r3, #24]
 800f358:	0a1b      	lsrs	r3, r3, #8
 800f35a:	f003 030f 	and.w	r3, r3, #15
 800f35e:	490f      	ldr	r1, [pc, #60]	; (800f39c <HAL_RCC_GetHCLKFreq+0x54>)
 800f360:	5ccb      	ldrb	r3, [r1, r3]
 800f362:	f003 031f 	and.w	r3, r3, #31
 800f366:	fa22 f303 	lsr.w	r3, r2, r3
 800f36a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800f36c:	4b0a      	ldr	r3, [pc, #40]	; (800f398 <HAL_RCC_GetHCLKFreq+0x50>)
 800f36e:	699b      	ldr	r3, [r3, #24]
 800f370:	f003 030f 	and.w	r3, r3, #15
 800f374:	4a09      	ldr	r2, [pc, #36]	; (800f39c <HAL_RCC_GetHCLKFreq+0x54>)
 800f376:	5cd3      	ldrb	r3, [r2, r3]
 800f378:	f003 031f 	and.w	r3, r3, #31
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	fa22 f303 	lsr.w	r3, r2, r3
 800f382:	4a07      	ldr	r2, [pc, #28]	; (800f3a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800f384:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f386:	4a07      	ldr	r2, [pc, #28]	; (800f3a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800f38c:	4b04      	ldr	r3, [pc, #16]	; (800f3a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800f38e:	681b      	ldr	r3, [r3, #0]
}
 800f390:	4618      	mov	r0, r3
 800f392:	3708      	adds	r7, #8
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}
 800f398:	58024400 	.word	0x58024400
 800f39c:	08019d10 	.word	0x08019d10
 800f3a0:	200000e4 	.word	0x200000e4
 800f3a4:	200000e0 	.word	0x200000e0

0800f3a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800f3ac:	f7ff ffcc 	bl	800f348 <HAL_RCC_GetHCLKFreq>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	4b06      	ldr	r3, [pc, #24]	; (800f3cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800f3b4:	69db      	ldr	r3, [r3, #28]
 800f3b6:	091b      	lsrs	r3, r3, #4
 800f3b8:	f003 0307 	and.w	r3, r3, #7
 800f3bc:	4904      	ldr	r1, [pc, #16]	; (800f3d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f3be:	5ccb      	ldrb	r3, [r1, r3]
 800f3c0:	f003 031f 	and.w	r3, r3, #31
 800f3c4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	58024400 	.word	0x58024400
 800f3d0:	08019d10 	.word	0x08019d10

0800f3d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f3d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3d8:	b0c8      	sub	sp, #288	; 0x120
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f3ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800f3f8:	2500      	movs	r5, #0
 800f3fa:	ea54 0305 	orrs.w	r3, r4, r5
 800f3fe:	d049      	beq.n	800f494 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800f400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f406:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f40a:	d02f      	beq.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800f40c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f410:	d828      	bhi.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f416:	d01a      	beq.n	800f44e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f41c:	d822      	bhi.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d003      	beq.n	800f42a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800f422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f426:	d007      	beq.n	800f438 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f428:	e01c      	b.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f42a:	4ba7      	ldr	r3, [pc, #668]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f42e:	4aa6      	ldr	r2, [pc, #664]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f434:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f436:	e01a      	b.n	800f46e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f43c:	3308      	adds	r3, #8
 800f43e:	2102      	movs	r1, #2
 800f440:	4618      	mov	r0, r3
 800f442:	f002 fa6d 	bl	8011920 <RCCEx_PLL2_Config>
 800f446:	4603      	mov	r3, r0
 800f448:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f44c:	e00f      	b.n	800f46e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f44e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f452:	3328      	adds	r3, #40	; 0x28
 800f454:	2102      	movs	r1, #2
 800f456:	4618      	mov	r0, r3
 800f458:	f002 fb14 	bl	8011a84 <RCCEx_PLL3_Config>
 800f45c:	4603      	mov	r3, r0
 800f45e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f462:	e004      	b.n	800f46e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f464:	2301      	movs	r3, #1
 800f466:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f46a:	e000      	b.n	800f46e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800f46c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f46e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f472:	2b00      	cmp	r3, #0
 800f474:	d10a      	bne.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f476:	4b94      	ldr	r3, [pc, #592]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f47a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800f47e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f484:	4a90      	ldr	r2, [pc, #576]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f486:	430b      	orrs	r3, r1
 800f488:	6513      	str	r3, [r2, #80]	; 0x50
 800f48a:	e003      	b.n	800f494 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f48c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f490:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800f4a0:	f04f 0900 	mov.w	r9, #0
 800f4a4:	ea58 0309 	orrs.w	r3, r8, r9
 800f4a8:	d047      	beq.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800f4aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f4ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4b0:	2b04      	cmp	r3, #4
 800f4b2:	d82a      	bhi.n	800f50a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f4b4:	a201      	add	r2, pc, #4	; (adr r2, 800f4bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800f4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ba:	bf00      	nop
 800f4bc:	0800f4d1 	.word	0x0800f4d1
 800f4c0:	0800f4df 	.word	0x0800f4df
 800f4c4:	0800f4f5 	.word	0x0800f4f5
 800f4c8:	0800f513 	.word	0x0800f513
 800f4cc:	0800f513 	.word	0x0800f513
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f4d0:	4b7d      	ldr	r3, [pc, #500]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d4:	4a7c      	ldr	r2, [pc, #496]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f4d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f4dc:	e01a      	b.n	800f514 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f4de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f4e2:	3308      	adds	r3, #8
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f002 fa1a 	bl	8011920 <RCCEx_PLL2_Config>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f4f2:	e00f      	b.n	800f514 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f4f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f4f8:	3328      	adds	r3, #40	; 0x28
 800f4fa:	2100      	movs	r1, #0
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f002 fac1 	bl	8011a84 <RCCEx_PLL3_Config>
 800f502:	4603      	mov	r3, r0
 800f504:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f508:	e004      	b.n	800f514 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f50a:	2301      	movs	r3, #1
 800f50c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f510:	e000      	b.n	800f514 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800f512:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f514:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d10a      	bne.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f51c:	4b6a      	ldr	r3, [pc, #424]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f51e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f520:	f023 0107 	bic.w	r1, r3, #7
 800f524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f52a:	4a67      	ldr	r2, [pc, #412]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f52c:	430b      	orrs	r3, r1
 800f52e:	6513      	str	r3, [r2, #80]	; 0x50
 800f530:	e003      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f532:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f536:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800f53a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f542:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800f546:	f04f 0b00 	mov.w	fp, #0
 800f54a:	ea5a 030b 	orrs.w	r3, sl, fp
 800f54e:	d054      	beq.n	800f5fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800f550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f556:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800f55a:	d036      	beq.n	800f5ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800f55c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800f560:	d82f      	bhi.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f566:	d032      	beq.n	800f5ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800f568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f56c:	d829      	bhi.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f56e:	2bc0      	cmp	r3, #192	; 0xc0
 800f570:	d02f      	beq.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800f572:	2bc0      	cmp	r3, #192	; 0xc0
 800f574:	d825      	bhi.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f576:	2b80      	cmp	r3, #128	; 0x80
 800f578:	d018      	beq.n	800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800f57a:	2b80      	cmp	r3, #128	; 0x80
 800f57c:	d821      	bhi.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d002      	beq.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800f582:	2b40      	cmp	r3, #64	; 0x40
 800f584:	d007      	beq.n	800f596 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800f586:	e01c      	b.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f588:	4b4f      	ldr	r3, [pc, #316]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f58c:	4a4e      	ldr	r2, [pc, #312]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f58e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800f594:	e01e      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f59a:	3308      	adds	r3, #8
 800f59c:	2100      	movs	r1, #0
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f002 f9be 	bl	8011920 <RCCEx_PLL2_Config>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800f5aa:	e013      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f5ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f5b0:	3328      	adds	r3, #40	; 0x28
 800f5b2:	2100      	movs	r1, #0
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f002 fa65 	bl	8011a84 <RCCEx_PLL3_Config>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800f5c0:	e008      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f5c8:	e004      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800f5ca:	bf00      	nop
 800f5cc:	e002      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800f5ce:	bf00      	nop
 800f5d0:	e000      	b.n	800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800f5d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d10a      	bne.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800f5dc:	4b3a      	ldr	r3, [pc, #232]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5e0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800f5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f5e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5ea:	4a37      	ldr	r2, [pc, #220]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f5ec:	430b      	orrs	r3, r1
 800f5ee:	6513      	str	r3, [r2, #80]	; 0x50
 800f5f0:	e003      	b.n	800f5fa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f5f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800f5fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f602:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800f606:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f60a:	2300      	movs	r3, #0
 800f60c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f610:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800f614:	460b      	mov	r3, r1
 800f616:	4313      	orrs	r3, r2
 800f618:	d05c      	beq.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800f61a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f61e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f620:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800f624:	d03b      	beq.n	800f69e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800f626:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800f62a:	d834      	bhi.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800f62c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f630:	d037      	beq.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800f632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f636:	d82e      	bhi.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800f638:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f63c:	d033      	beq.n	800f6a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800f63e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f642:	d828      	bhi.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800f644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f648:	d01a      	beq.n	800f680 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800f64a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f64e:	d822      	bhi.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800f650:	2b00      	cmp	r3, #0
 800f652:	d003      	beq.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800f654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f658:	d007      	beq.n	800f66a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800f65a:	e01c      	b.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f65c:	4b1a      	ldr	r3, [pc, #104]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f660:	4a19      	ldr	r2, [pc, #100]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800f668:	e01e      	b.n	800f6a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f66a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f66e:	3308      	adds	r3, #8
 800f670:	2100      	movs	r1, #0
 800f672:	4618      	mov	r0, r3
 800f674:	f002 f954 	bl	8011920 <RCCEx_PLL2_Config>
 800f678:	4603      	mov	r3, r0
 800f67a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800f67e:	e013      	b.n	800f6a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f684:	3328      	adds	r3, #40	; 0x28
 800f686:	2100      	movs	r1, #0
 800f688:	4618      	mov	r0, r3
 800f68a:	f002 f9fb 	bl	8011a84 <RCCEx_PLL3_Config>
 800f68e:	4603      	mov	r3, r0
 800f690:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800f694:	e008      	b.n	800f6a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f696:	2301      	movs	r3, #1
 800f698:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f69c:	e004      	b.n	800f6a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800f69e:	bf00      	nop
 800f6a0:	e002      	b.n	800f6a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800f6a2:	bf00      	nop
 800f6a4:	e000      	b.n	800f6a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800f6a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d10d      	bne.n	800f6cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800f6b0:	4b05      	ldr	r3, [pc, #20]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f6b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6b4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800f6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f6bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f6be:	4a02      	ldr	r2, [pc, #8]	; (800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f6c0:	430b      	orrs	r3, r1
 800f6c2:	6513      	str	r3, [r2, #80]	; 0x50
 800f6c4:	e006      	b.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800f6c6:	bf00      	nop
 800f6c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f6d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800f6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6dc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800f6e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f6ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	d03a      	beq.n	800f76a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800f6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f6f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6fa:	2b30      	cmp	r3, #48	; 0x30
 800f6fc:	d01f      	beq.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800f6fe:	2b30      	cmp	r3, #48	; 0x30
 800f700:	d819      	bhi.n	800f736 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800f702:	2b20      	cmp	r3, #32
 800f704:	d00c      	beq.n	800f720 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800f706:	2b20      	cmp	r3, #32
 800f708:	d815      	bhi.n	800f736 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d019      	beq.n	800f742 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800f70e:	2b10      	cmp	r3, #16
 800f710:	d111      	bne.n	800f736 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f712:	4bae      	ldr	r3, [pc, #696]	; (800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f716:	4aad      	ldr	r2, [pc, #692]	; (800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f71c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800f71e:	e011      	b.n	800f744 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f724:	3308      	adds	r3, #8
 800f726:	2102      	movs	r1, #2
 800f728:	4618      	mov	r0, r3
 800f72a:	f002 f8f9 	bl	8011920 <RCCEx_PLL2_Config>
 800f72e:	4603      	mov	r3, r0
 800f730:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800f734:	e006      	b.n	800f744 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f736:	2301      	movs	r3, #1
 800f738:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f73c:	e002      	b.n	800f744 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800f73e:	bf00      	nop
 800f740:	e000      	b.n	800f744 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800f742:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f744:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d10a      	bne.n	800f762 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800f74c:	4b9f      	ldr	r3, [pc, #636]	; (800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f750:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800f754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f75a:	4a9c      	ldr	r2, [pc, #624]	; (800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f75c:	430b      	orrs	r3, r1
 800f75e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f760:	e003      	b.n	800f76a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f762:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f766:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f76a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f772:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800f776:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f77a:	2300      	movs	r3, #0
 800f77c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f780:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800f784:	460b      	mov	r3, r1
 800f786:	4313      	orrs	r3, r2
 800f788:	d051      	beq.n	800f82e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f78a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f78e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f794:	d035      	beq.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800f796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f79a:	d82e      	bhi.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x426>
 800f79c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f7a0:	d031      	beq.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800f7a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f7a6:	d828      	bhi.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x426>
 800f7a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7ac:	d01a      	beq.n	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800f7ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7b2:	d822      	bhi.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x426>
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d003      	beq.n	800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800f7b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7bc:	d007      	beq.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800f7be:	e01c      	b.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f7c0:	4b82      	ldr	r3, [pc, #520]	; (800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c4:	4a81      	ldr	r2, [pc, #516]	; (800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f7c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f7cc:	e01c      	b.n	800f808 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f7ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f7d2:	3308      	adds	r3, #8
 800f7d4:	2100      	movs	r1, #0
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f002 f8a2 	bl	8011920 <RCCEx_PLL2_Config>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f7e2:	e011      	b.n	800f808 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f7e8:	3328      	adds	r3, #40	; 0x28
 800f7ea:	2100      	movs	r1, #0
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f002 f949 	bl	8011a84 <RCCEx_PLL3_Config>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f7f8:	e006      	b.n	800f808 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f800:	e002      	b.n	800f808 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800f802:	bf00      	nop
 800f804:	e000      	b.n	800f808 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800f806:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f808:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d10a      	bne.n	800f826 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f810:	4b6e      	ldr	r3, [pc, #440]	; (800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f814:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f81c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f81e:	4a6b      	ldr	r2, [pc, #428]	; (800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f820:	430b      	orrs	r3, r1
 800f822:	6513      	str	r3, [r2, #80]	; 0x50
 800f824:	e003      	b.n	800f82e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f826:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f82a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f82e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f836:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f83a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f83e:	2300      	movs	r3, #0
 800f840:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f844:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f848:	460b      	mov	r3, r1
 800f84a:	4313      	orrs	r3, r2
 800f84c:	d053      	beq.n	800f8f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f84e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f858:	d033      	beq.n	800f8c2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800f85a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f85e:	d82c      	bhi.n	800f8ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800f860:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f864:	d02f      	beq.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800f866:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f86a:	d826      	bhi.n	800f8ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800f86c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f870:	d02b      	beq.n	800f8ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800f872:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f876:	d820      	bhi.n	800f8ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800f878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f87c:	d012      	beq.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800f87e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f882:	d81a      	bhi.n	800f8ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800f884:	2b00      	cmp	r3, #0
 800f886:	d022      	beq.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800f888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f88c:	d115      	bne.n	800f8ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f88e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f892:	3308      	adds	r3, #8
 800f894:	2101      	movs	r1, #1
 800f896:	4618      	mov	r0, r3
 800f898:	f002 f842 	bl	8011920 <RCCEx_PLL2_Config>
 800f89c:	4603      	mov	r3, r0
 800f89e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f8a2:	e015      	b.n	800f8d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f8a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f8a8:	3328      	adds	r3, #40	; 0x28
 800f8aa:	2101      	movs	r1, #1
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f002 f8e9 	bl	8011a84 <RCCEx_PLL3_Config>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f8b8:	e00a      	b.n	800f8d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f8c0:	e006      	b.n	800f8d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800f8c2:	bf00      	nop
 800f8c4:	e004      	b.n	800f8d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800f8c6:	bf00      	nop
 800f8c8:	e002      	b.n	800f8d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800f8ca:	bf00      	nop
 800f8cc:	e000      	b.n	800f8d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800f8ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d10a      	bne.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f8d8:	4b3c      	ldr	r3, [pc, #240]	; (800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8dc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f8e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f8e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f8e6:	4a39      	ldr	r2, [pc, #228]	; (800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f8e8:	430b      	orrs	r3, r1
 800f8ea:	6513      	str	r3, [r2, #80]	; 0x50
 800f8ec:	e003      	b.n	800f8f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f8f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f8f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f902:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f906:	2300      	movs	r3, #0
 800f908:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f90c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f910:	460b      	mov	r3, r1
 800f912:	4313      	orrs	r3, r2
 800f914:	d060      	beq.n	800f9d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f91a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f91e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800f922:	d039      	beq.n	800f998 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800f924:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800f928:	d832      	bhi.n	800f990 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800f92a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f92e:	d035      	beq.n	800f99c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800f930:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f934:	d82c      	bhi.n	800f990 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800f936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f93a:	d031      	beq.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800f93c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f940:	d826      	bhi.n	800f990 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800f942:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f946:	d02d      	beq.n	800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800f948:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f94c:	d820      	bhi.n	800f990 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800f94e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f952:	d012      	beq.n	800f97a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f958:	d81a      	bhi.n	800f990 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d024      	beq.n	800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f95e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f962:	d115      	bne.n	800f990 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f968:	3308      	adds	r3, #8
 800f96a:	2101      	movs	r1, #1
 800f96c:	4618      	mov	r0, r3
 800f96e:	f001 ffd7 	bl	8011920 <RCCEx_PLL2_Config>
 800f972:	4603      	mov	r3, r0
 800f974:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f978:	e017      	b.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f97a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f97e:	3328      	adds	r3, #40	; 0x28
 800f980:	2101      	movs	r1, #1
 800f982:	4618      	mov	r0, r3
 800f984:	f002 f87e 	bl	8011a84 <RCCEx_PLL3_Config>
 800f988:	4603      	mov	r3, r0
 800f98a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f98e:	e00c      	b.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f990:	2301      	movs	r3, #1
 800f992:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800f996:	e008      	b.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f998:	bf00      	nop
 800f99a:	e006      	b.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f99c:	bf00      	nop
 800f99e:	e004      	b.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f9a0:	bf00      	nop
 800f9a2:	e002      	b.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f9a4:	bf00      	nop
 800f9a6:	e000      	b.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800f9a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f9aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d10e      	bne.n	800f9d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f9b2:	4b06      	ldr	r3, [pc, #24]	; (800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f9b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f9ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f9be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f9c2:	4a02      	ldr	r2, [pc, #8]	; (800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800f9c4:	430b      	orrs	r3, r1
 800f9c6:	6593      	str	r3, [r2, #88]	; 0x58
 800f9c8:	e006      	b.n	800f9d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800f9ca:	bf00      	nop
 800f9cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f9d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f9d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f9e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f9ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	d037      	beq.n	800fa68 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f9f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f9fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa02:	d00e      	beq.n	800fa22 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800fa04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa08:	d816      	bhi.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d018      	beq.n	800fa40 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800fa0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa12:	d111      	bne.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa14:	4bc4      	ldr	r3, [pc, #784]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa18:	4ac3      	ldr	r2, [pc, #780]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fa1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fa1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800fa20:	e00f      	b.n	800fa42 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fa22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fa26:	3308      	adds	r3, #8
 800fa28:	2101      	movs	r1, #1
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f001 ff78 	bl	8011920 <RCCEx_PLL2_Config>
 800fa30:	4603      	mov	r3, r0
 800fa32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800fa36:	e004      	b.n	800fa42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa38:	2301      	movs	r3, #1
 800fa3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800fa3e:	e000      	b.n	800fa42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800fa40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d10a      	bne.n	800fa60 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800fa4a:	4bb7      	ldr	r3, [pc, #732]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fa4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa4e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800fa52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fa56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa58:	4ab3      	ldr	r2, [pc, #716]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fa5a:	430b      	orrs	r3, r1
 800fa5c:	6513      	str	r3, [r2, #80]	; 0x50
 800fa5e:	e003      	b.n	800fa68 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fa64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800fa68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa70:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800fa74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fa78:	2300      	movs	r3, #0
 800fa7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fa7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800fa82:	460b      	mov	r3, r1
 800fa84:	4313      	orrs	r3, r2
 800fa86:	d039      	beq.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800fa88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fa8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa8e:	2b03      	cmp	r3, #3
 800fa90:	d81c      	bhi.n	800facc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800fa92:	a201      	add	r2, pc, #4	; (adr r2, 800fa98 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800fa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa98:	0800fad5 	.word	0x0800fad5
 800fa9c:	0800faa9 	.word	0x0800faa9
 800faa0:	0800fab7 	.word	0x0800fab7
 800faa4:	0800fad5 	.word	0x0800fad5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800faa8:	4b9f      	ldr	r3, [pc, #636]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800faaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faac:	4a9e      	ldr	r2, [pc, #632]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800faae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800fab4:	e00f      	b.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800faba:	3308      	adds	r3, #8
 800fabc:	2102      	movs	r1, #2
 800fabe:	4618      	mov	r0, r3
 800fac0:	f001 ff2e 	bl	8011920 <RCCEx_PLL2_Config>
 800fac4:	4603      	mov	r3, r0
 800fac6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800faca:	e004      	b.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800facc:	2301      	movs	r3, #1
 800face:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800fad2:	e000      	b.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800fad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fad6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d10a      	bne.n	800faf4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800fade:	4b92      	ldr	r3, [pc, #584]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fae2:	f023 0103 	bic.w	r1, r3, #3
 800fae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800faea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800faec:	4a8e      	ldr	r2, [pc, #568]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800faee:	430b      	orrs	r3, r1
 800faf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800faf2:	e003      	b.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800faf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800faf8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fafc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800fb08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fb12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800fb16:	460b      	mov	r3, r1
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	f000 8099 	beq.w	800fc50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fb1e:	4b83      	ldr	r3, [pc, #524]	; (800fd2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	4a82      	ldr	r2, [pc, #520]	; (800fd2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800fb24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800fb2a:	f7f7 f8f7 	bl	8006d1c <HAL_GetTick>
 800fb2e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fb32:	e00b      	b.n	800fb4c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fb34:	f7f7 f8f2 	bl	8006d1c <HAL_GetTick>
 800fb38:	4602      	mov	r2, r0
 800fb3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fb3e:	1ad3      	subs	r3, r2, r3
 800fb40:	2b64      	cmp	r3, #100	; 0x64
 800fb42:	d903      	bls.n	800fb4c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800fb44:	2303      	movs	r3, #3
 800fb46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800fb4a:	e005      	b.n	800fb58 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fb4c:	4b77      	ldr	r3, [pc, #476]	; (800fd2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d0ed      	beq.n	800fb34 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800fb58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d173      	bne.n	800fc48 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800fb60:	4b71      	ldr	r3, [pc, #452]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fb62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fb64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fb68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fb6c:	4053      	eors	r3, r2
 800fb6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d015      	beq.n	800fba2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800fb76:	4b6c      	ldr	r3, [pc, #432]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fb78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800fb82:	4b69      	ldr	r3, [pc, #420]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb86:	4a68      	ldr	r2, [pc, #416]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fb88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fb8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fb8e:	4b66      	ldr	r3, [pc, #408]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fb90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb92:	4a65      	ldr	r2, [pc, #404]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fb94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800fb9a:	4a63      	ldr	r2, [pc, #396]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fb9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fba0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800fba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fba6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fbaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbae:	d118      	bne.n	800fbe2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fbb0:	f7f7 f8b4 	bl	8006d1c <HAL_GetTick>
 800fbb4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fbb8:	e00d      	b.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fbba:	f7f7 f8af 	bl	8006d1c <HAL_GetTick>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fbc4:	1ad2      	subs	r2, r2, r3
 800fbc6:	f241 3388 	movw	r3, #5000	; 0x1388
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d903      	bls.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800fbce:	2303      	movs	r3, #3
 800fbd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800fbd4:	e005      	b.n	800fbe2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fbd6:	4b54      	ldr	r3, [pc, #336]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fbd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbda:	f003 0302 	and.w	r3, r3, #2
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d0eb      	beq.n	800fbba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800fbe2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d129      	bne.n	800fc3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fbea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fbee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fbf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fbfa:	d10e      	bne.n	800fc1a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800fbfc:	4b4a      	ldr	r3, [pc, #296]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fbfe:	691b      	ldr	r3, [r3, #16]
 800fc00:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800fc04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fc08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fc0c:	091a      	lsrs	r2, r3, #4
 800fc0e:	4b48      	ldr	r3, [pc, #288]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800fc10:	4013      	ands	r3, r2
 800fc12:	4a45      	ldr	r2, [pc, #276]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fc14:	430b      	orrs	r3, r1
 800fc16:	6113      	str	r3, [r2, #16]
 800fc18:	e005      	b.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800fc1a:	4b43      	ldr	r3, [pc, #268]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fc1c:	691b      	ldr	r3, [r3, #16]
 800fc1e:	4a42      	ldr	r2, [pc, #264]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fc20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fc24:	6113      	str	r3, [r2, #16]
 800fc26:	4b40      	ldr	r3, [pc, #256]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fc28:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fc2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fc2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fc32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fc36:	4a3c      	ldr	r2, [pc, #240]	; (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fc38:	430b      	orrs	r3, r1
 800fc3a:	6713      	str	r3, [r2, #112]	; 0x70
 800fc3c:	e008      	b.n	800fc50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800fc3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fc42:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800fc46:	e003      	b.n	800fc50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fc4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800fc50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc58:	f002 0301 	and.w	r3, r2, #1
 800fc5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fc60:	2300      	movs	r3, #0
 800fc62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fc66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800fc6a:	460b      	mov	r3, r1
 800fc6c:	4313      	orrs	r3, r2
 800fc6e:	f000 8090 	beq.w	800fd92 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800fc72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fc76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc7a:	2b28      	cmp	r3, #40	; 0x28
 800fc7c:	d870      	bhi.n	800fd60 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800fc7e:	a201      	add	r2, pc, #4	; (adr r2, 800fc84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800fc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc84:	0800fd69 	.word	0x0800fd69
 800fc88:	0800fd61 	.word	0x0800fd61
 800fc8c:	0800fd61 	.word	0x0800fd61
 800fc90:	0800fd61 	.word	0x0800fd61
 800fc94:	0800fd61 	.word	0x0800fd61
 800fc98:	0800fd61 	.word	0x0800fd61
 800fc9c:	0800fd61 	.word	0x0800fd61
 800fca0:	0800fd61 	.word	0x0800fd61
 800fca4:	0800fd35 	.word	0x0800fd35
 800fca8:	0800fd61 	.word	0x0800fd61
 800fcac:	0800fd61 	.word	0x0800fd61
 800fcb0:	0800fd61 	.word	0x0800fd61
 800fcb4:	0800fd61 	.word	0x0800fd61
 800fcb8:	0800fd61 	.word	0x0800fd61
 800fcbc:	0800fd61 	.word	0x0800fd61
 800fcc0:	0800fd61 	.word	0x0800fd61
 800fcc4:	0800fd4b 	.word	0x0800fd4b
 800fcc8:	0800fd61 	.word	0x0800fd61
 800fccc:	0800fd61 	.word	0x0800fd61
 800fcd0:	0800fd61 	.word	0x0800fd61
 800fcd4:	0800fd61 	.word	0x0800fd61
 800fcd8:	0800fd61 	.word	0x0800fd61
 800fcdc:	0800fd61 	.word	0x0800fd61
 800fce0:	0800fd61 	.word	0x0800fd61
 800fce4:	0800fd69 	.word	0x0800fd69
 800fce8:	0800fd61 	.word	0x0800fd61
 800fcec:	0800fd61 	.word	0x0800fd61
 800fcf0:	0800fd61 	.word	0x0800fd61
 800fcf4:	0800fd61 	.word	0x0800fd61
 800fcf8:	0800fd61 	.word	0x0800fd61
 800fcfc:	0800fd61 	.word	0x0800fd61
 800fd00:	0800fd61 	.word	0x0800fd61
 800fd04:	0800fd69 	.word	0x0800fd69
 800fd08:	0800fd61 	.word	0x0800fd61
 800fd0c:	0800fd61 	.word	0x0800fd61
 800fd10:	0800fd61 	.word	0x0800fd61
 800fd14:	0800fd61 	.word	0x0800fd61
 800fd18:	0800fd61 	.word	0x0800fd61
 800fd1c:	0800fd61 	.word	0x0800fd61
 800fd20:	0800fd61 	.word	0x0800fd61
 800fd24:	0800fd69 	.word	0x0800fd69
 800fd28:	58024400 	.word	0x58024400
 800fd2c:	58024800 	.word	0x58024800
 800fd30:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fd34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fd38:	3308      	adds	r3, #8
 800fd3a:	2101      	movs	r1, #1
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f001 fdef 	bl	8011920 <RCCEx_PLL2_Config>
 800fd42:	4603      	mov	r3, r0
 800fd44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fd48:	e00f      	b.n	800fd6a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fd4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fd4e:	3328      	adds	r3, #40	; 0x28
 800fd50:	2101      	movs	r1, #1
 800fd52:	4618      	mov	r0, r3
 800fd54:	f001 fe96 	bl	8011a84 <RCCEx_PLL3_Config>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fd5e:	e004      	b.n	800fd6a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fd60:	2301      	movs	r3, #1
 800fd62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800fd66:	e000      	b.n	800fd6a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800fd68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d10b      	bne.n	800fd8a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800fd72:	4bc0      	ldr	r3, [pc, #768]	; (8010074 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800fd74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd76:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800fd7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fd7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd82:	4abc      	ldr	r2, [pc, #752]	; (8010074 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800fd84:	430b      	orrs	r3, r1
 800fd86:	6553      	str	r3, [r2, #84]	; 0x54
 800fd88:	e003      	b.n	800fd92 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fd8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800fd92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9a:	f002 0302 	and.w	r3, r2, #2
 800fd9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fda2:	2300      	movs	r3, #0
 800fda4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fda8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800fdac:	460b      	mov	r3, r1
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	d043      	beq.n	800fe3a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800fdb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fdb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fdba:	2b05      	cmp	r3, #5
 800fdbc:	d824      	bhi.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800fdbe:	a201      	add	r2, pc, #4	; (adr r2, 800fdc4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800fdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc4:	0800fe11 	.word	0x0800fe11
 800fdc8:	0800fddd 	.word	0x0800fddd
 800fdcc:	0800fdf3 	.word	0x0800fdf3
 800fdd0:	0800fe11 	.word	0x0800fe11
 800fdd4:	0800fe11 	.word	0x0800fe11
 800fdd8:	0800fe11 	.word	0x0800fe11
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fde0:	3308      	adds	r3, #8
 800fde2:	2101      	movs	r1, #1
 800fde4:	4618      	mov	r0, r3
 800fde6:	f001 fd9b 	bl	8011920 <RCCEx_PLL2_Config>
 800fdea:	4603      	mov	r3, r0
 800fdec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800fdf0:	e00f      	b.n	800fe12 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fdf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fdf6:	3328      	adds	r3, #40	; 0x28
 800fdf8:	2101      	movs	r1, #1
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f001 fe42 	bl	8011a84 <RCCEx_PLL3_Config>
 800fe00:	4603      	mov	r3, r0
 800fe02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800fe06:	e004      	b.n	800fe12 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800fe0e:	e000      	b.n	800fe12 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800fe10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d10b      	bne.n	800fe32 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800fe1a:	4b96      	ldr	r3, [pc, #600]	; (8010074 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800fe1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe1e:	f023 0107 	bic.w	r1, r3, #7
 800fe22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fe26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe2a:	4a92      	ldr	r2, [pc, #584]	; (8010074 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800fe2c:	430b      	orrs	r3, r1
 800fe2e:	6553      	str	r3, [r2, #84]	; 0x54
 800fe30:	e003      	b.n	800fe3a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fe36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fe3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fe3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe42:	f002 0304 	and.w	r3, r2, #4
 800fe46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fe50:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800fe54:	460b      	mov	r3, r1
 800fe56:	4313      	orrs	r3, r2
 800fe58:	d043      	beq.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800fe5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fe5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fe62:	2b05      	cmp	r3, #5
 800fe64:	d824      	bhi.n	800feb0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800fe66:	a201      	add	r2, pc, #4	; (adr r2, 800fe6c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800fe68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe6c:	0800feb9 	.word	0x0800feb9
 800fe70:	0800fe85 	.word	0x0800fe85
 800fe74:	0800fe9b 	.word	0x0800fe9b
 800fe78:	0800feb9 	.word	0x0800feb9
 800fe7c:	0800feb9 	.word	0x0800feb9
 800fe80:	0800feb9 	.word	0x0800feb9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fe84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fe88:	3308      	adds	r3, #8
 800fe8a:	2101      	movs	r1, #1
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f001 fd47 	bl	8011920 <RCCEx_PLL2_Config>
 800fe92:	4603      	mov	r3, r0
 800fe94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fe98:	e00f      	b.n	800feba <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fe9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fe9e:	3328      	adds	r3, #40	; 0x28
 800fea0:	2101      	movs	r1, #1
 800fea2:	4618      	mov	r0, r3
 800fea4:	f001 fdee 	bl	8011a84 <RCCEx_PLL3_Config>
 800fea8:	4603      	mov	r3, r0
 800feaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800feae:	e004      	b.n	800feba <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800feb0:	2301      	movs	r3, #1
 800feb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800feb6:	e000      	b.n	800feba <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800feb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800feba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d10b      	bne.n	800feda <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fec2:	4b6c      	ldr	r3, [pc, #432]	; (8010074 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800fec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fec6:	f023 0107 	bic.w	r1, r3, #7
 800feca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fece:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fed2:	4a68      	ldr	r2, [pc, #416]	; (8010074 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800fed4:	430b      	orrs	r3, r1
 800fed6:	6593      	str	r3, [r2, #88]	; 0x58
 800fed8:	e003      	b.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800feda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800fede:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feea:	f002 0320 	and.w	r3, r2, #32
 800feee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fef2:	2300      	movs	r3, #0
 800fef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fef8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800fefc:	460b      	mov	r3, r1
 800fefe:	4313      	orrs	r3, r2
 800ff00:	d055      	beq.n	800ffae <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ff02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ff06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ff0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ff0e:	d033      	beq.n	800ff78 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ff10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ff14:	d82c      	bhi.n	800ff70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800ff16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff1a:	d02f      	beq.n	800ff7c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800ff1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff20:	d826      	bhi.n	800ff70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800ff22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ff26:	d02b      	beq.n	800ff80 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800ff28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ff2c:	d820      	bhi.n	800ff70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800ff2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ff32:	d012      	beq.n	800ff5a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ff34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ff38:	d81a      	bhi.n	800ff70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d022      	beq.n	800ff84 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ff3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ff42:	d115      	bne.n	800ff70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ff44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ff48:	3308      	adds	r3, #8
 800ff4a:	2100      	movs	r1, #0
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f001 fce7 	bl	8011920 <RCCEx_PLL2_Config>
 800ff52:	4603      	mov	r3, r0
 800ff54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ff58:	e015      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ff5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ff5e:	3328      	adds	r3, #40	; 0x28
 800ff60:	2102      	movs	r1, #2
 800ff62:	4618      	mov	r0, r3
 800ff64:	f001 fd8e 	bl	8011a84 <RCCEx_PLL3_Config>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ff6e:	e00a      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ff70:	2301      	movs	r3, #1
 800ff72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ff76:	e006      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ff78:	bf00      	nop
 800ff7a:	e004      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ff7c:	bf00      	nop
 800ff7e:	e002      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ff80:	bf00      	nop
 800ff82:	e000      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ff84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d10b      	bne.n	800ffa6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ff8e:	4b39      	ldr	r3, [pc, #228]	; (8010074 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ff90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff92:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ff96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ff9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ff9e:	4a35      	ldr	r2, [pc, #212]	; (8010074 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ffa0:	430b      	orrs	r3, r1
 800ffa2:	6553      	str	r3, [r2, #84]	; 0x54
 800ffa4:	e003      	b.n	800ffae <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffa6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ffaa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ffae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ffb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800ffba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ffc4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800ffc8:	460b      	mov	r3, r1
 800ffca:	4313      	orrs	r3, r2
 800ffcc:	d058      	beq.n	8010080 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ffce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ffd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ffd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ffda:	d033      	beq.n	8010044 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ffdc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ffe0:	d82c      	bhi.n	801003c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ffe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ffe6:	d02f      	beq.n	8010048 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ffe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ffec:	d826      	bhi.n	801003c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ffee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fff2:	d02b      	beq.n	801004c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800fff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fff8:	d820      	bhi.n	801003c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800fffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fffe:	d012      	beq.n	8010026 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8010000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010004:	d81a      	bhi.n	801003c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8010006:	2b00      	cmp	r3, #0
 8010008:	d022      	beq.n	8010050 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 801000a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801000e:	d115      	bne.n	801003c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010014:	3308      	adds	r3, #8
 8010016:	2100      	movs	r1, #0
 8010018:	4618      	mov	r0, r3
 801001a:	f001 fc81 	bl	8011920 <RCCEx_PLL2_Config>
 801001e:	4603      	mov	r3, r0
 8010020:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010024:	e015      	b.n	8010052 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801002a:	3328      	adds	r3, #40	; 0x28
 801002c:	2102      	movs	r1, #2
 801002e:	4618      	mov	r0, r3
 8010030:	f001 fd28 	bl	8011a84 <RCCEx_PLL3_Config>
 8010034:	4603      	mov	r3, r0
 8010036:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801003a:	e00a      	b.n	8010052 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801003c:	2301      	movs	r3, #1
 801003e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8010042:	e006      	b.n	8010052 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8010044:	bf00      	nop
 8010046:	e004      	b.n	8010052 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8010048:	bf00      	nop
 801004a:	e002      	b.n	8010052 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 801004c:	bf00      	nop
 801004e:	e000      	b.n	8010052 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8010050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010052:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010056:	2b00      	cmp	r3, #0
 8010058:	d10e      	bne.n	8010078 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801005a:	4b06      	ldr	r3, [pc, #24]	; (8010074 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 801005c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801005e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8010062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010066:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801006a:	4a02      	ldr	r2, [pc, #8]	; (8010074 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 801006c:	430b      	orrs	r3, r1
 801006e:	6593      	str	r3, [r2, #88]	; 0x58
 8010070:	e006      	b.n	8010080 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8010072:	bf00      	nop
 8010074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010078:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801007c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010088:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801008c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010090:	2300      	movs	r3, #0
 8010092:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010096:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801009a:	460b      	mov	r3, r1
 801009c:	4313      	orrs	r3, r2
 801009e:	d055      	beq.n	801014c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80100a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80100a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80100a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80100ac:	d033      	beq.n	8010116 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80100ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80100b2:	d82c      	bhi.n	801010e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80100b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100b8:	d02f      	beq.n	801011a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80100ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100be:	d826      	bhi.n	801010e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80100c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80100c4:	d02b      	beq.n	801011e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80100c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80100ca:	d820      	bhi.n	801010e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80100cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80100d0:	d012      	beq.n	80100f8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80100d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80100d6:	d81a      	bhi.n	801010e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d022      	beq.n	8010122 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80100dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80100e0:	d115      	bne.n	801010e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80100e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80100e6:	3308      	adds	r3, #8
 80100e8:	2100      	movs	r1, #0
 80100ea:	4618      	mov	r0, r3
 80100ec:	f001 fc18 	bl	8011920 <RCCEx_PLL2_Config>
 80100f0:	4603      	mov	r3, r0
 80100f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80100f6:	e015      	b.n	8010124 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80100f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80100fc:	3328      	adds	r3, #40	; 0x28
 80100fe:	2102      	movs	r1, #2
 8010100:	4618      	mov	r0, r3
 8010102:	f001 fcbf 	bl	8011a84 <RCCEx_PLL3_Config>
 8010106:	4603      	mov	r3, r0
 8010108:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801010c:	e00a      	b.n	8010124 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801010e:	2301      	movs	r3, #1
 8010110:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8010114:	e006      	b.n	8010124 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8010116:	bf00      	nop
 8010118:	e004      	b.n	8010124 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 801011a:	bf00      	nop
 801011c:	e002      	b.n	8010124 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 801011e:	bf00      	nop
 8010120:	e000      	b.n	8010124 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8010122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010124:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010128:	2b00      	cmp	r3, #0
 801012a:	d10b      	bne.n	8010144 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801012c:	4ba1      	ldr	r3, [pc, #644]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801012e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010130:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8010134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010138:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801013c:	4a9d      	ldr	r2, [pc, #628]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801013e:	430b      	orrs	r3, r1
 8010140:	6593      	str	r3, [r2, #88]	; 0x58
 8010142:	e003      	b.n	801014c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010144:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010148:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801014c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010154:	f002 0308 	and.w	r3, r2, #8
 8010158:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801015c:	2300      	movs	r3, #0
 801015e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010162:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8010166:	460b      	mov	r3, r1
 8010168:	4313      	orrs	r3, r2
 801016a:	d01e      	beq.n	80101aa <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801016c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010178:	d10c      	bne.n	8010194 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801017a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801017e:	3328      	adds	r3, #40	; 0x28
 8010180:	2102      	movs	r1, #2
 8010182:	4618      	mov	r0, r3
 8010184:	f001 fc7e 	bl	8011a84 <RCCEx_PLL3_Config>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d002      	beq.n	8010194 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 801018e:	2301      	movs	r3, #1
 8010190:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010194:	4b87      	ldr	r3, [pc, #540]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010198:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801019c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80101a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80101a4:	4a83      	ldr	r2, [pc, #524]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80101a6:	430b      	orrs	r3, r1
 80101a8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80101aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80101ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b2:	f002 0310 	and.w	r3, r2, #16
 80101b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80101ba:	2300      	movs	r3, #0
 80101bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80101c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80101c4:	460b      	mov	r3, r1
 80101c6:	4313      	orrs	r3, r2
 80101c8:	d01e      	beq.n	8010208 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80101ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80101ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80101d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101d6:	d10c      	bne.n	80101f2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80101d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80101dc:	3328      	adds	r3, #40	; 0x28
 80101de:	2102      	movs	r1, #2
 80101e0:	4618      	mov	r0, r3
 80101e2:	f001 fc4f 	bl	8011a84 <RCCEx_PLL3_Config>
 80101e6:	4603      	mov	r3, r0
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d002      	beq.n	80101f2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80101ec:	2301      	movs	r3, #1
 80101ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80101f2:	4b70      	ldr	r3, [pc, #448]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80101f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80101fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80101fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010202:	4a6c      	ldr	r2, [pc, #432]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010204:	430b      	orrs	r3, r1
 8010206:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801020c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010210:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8010214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010218:	2300      	movs	r3, #0
 801021a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801021e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8010222:	460b      	mov	r3, r1
 8010224:	4313      	orrs	r3, r2
 8010226:	d03e      	beq.n	80102a6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8010228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801022c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010234:	d022      	beq.n	801027c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8010236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801023a:	d81b      	bhi.n	8010274 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 801023c:	2b00      	cmp	r3, #0
 801023e:	d003      	beq.n	8010248 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8010240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010244:	d00b      	beq.n	801025e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8010246:	e015      	b.n	8010274 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801024c:	3308      	adds	r3, #8
 801024e:	2100      	movs	r1, #0
 8010250:	4618      	mov	r0, r3
 8010252:	f001 fb65 	bl	8011920 <RCCEx_PLL2_Config>
 8010256:	4603      	mov	r3, r0
 8010258:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 801025c:	e00f      	b.n	801027e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801025e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010262:	3328      	adds	r3, #40	; 0x28
 8010264:	2102      	movs	r1, #2
 8010266:	4618      	mov	r0, r3
 8010268:	f001 fc0c 	bl	8011a84 <RCCEx_PLL3_Config>
 801026c:	4603      	mov	r3, r0
 801026e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010272:	e004      	b.n	801027e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010274:	2301      	movs	r3, #1
 8010276:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801027a:	e000      	b.n	801027e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 801027c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801027e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010282:	2b00      	cmp	r3, #0
 8010284:	d10b      	bne.n	801029e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010286:	4b4b      	ldr	r3, [pc, #300]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801028a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801028e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010296:	4a47      	ldr	r2, [pc, #284]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8010298:	430b      	orrs	r3, r1
 801029a:	6593      	str	r3, [r2, #88]	; 0x58
 801029c:	e003      	b.n	80102a6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801029e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80102a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80102a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80102aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80102b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80102b4:	2300      	movs	r3, #0
 80102b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80102b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80102bc:	460b      	mov	r3, r1
 80102be:	4313      	orrs	r3, r2
 80102c0:	d03b      	beq.n	801033a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80102c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80102c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80102ce:	d01f      	beq.n	8010310 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80102d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80102d4:	d818      	bhi.n	8010308 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80102d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80102da:	d003      	beq.n	80102e4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80102dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80102e0:	d007      	beq.n	80102f2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80102e2:	e011      	b.n	8010308 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80102e4:	4b33      	ldr	r3, [pc, #204]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80102e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102e8:	4a32      	ldr	r2, [pc, #200]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80102ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80102ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80102f0:	e00f      	b.n	8010312 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80102f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80102f6:	3328      	adds	r3, #40	; 0x28
 80102f8:	2101      	movs	r1, #1
 80102fa:	4618      	mov	r0, r3
 80102fc:	f001 fbc2 	bl	8011a84 <RCCEx_PLL3_Config>
 8010300:	4603      	mov	r3, r0
 8010302:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8010306:	e004      	b.n	8010312 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010308:	2301      	movs	r3, #1
 801030a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 801030e:	e000      	b.n	8010312 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8010310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010312:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010316:	2b00      	cmp	r3, #0
 8010318:	d10b      	bne.n	8010332 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801031a:	4b26      	ldr	r3, [pc, #152]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801031c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801031e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8010322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801032a:	4a22      	ldr	r2, [pc, #136]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801032c:	430b      	orrs	r3, r1
 801032e:	6553      	str	r3, [r2, #84]	; 0x54
 8010330:	e003      	b.n	801033a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010332:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010336:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801033a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801033e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010342:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8010346:	673b      	str	r3, [r7, #112]	; 0x70
 8010348:	2300      	movs	r3, #0
 801034a:	677b      	str	r3, [r7, #116]	; 0x74
 801034c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8010350:	460b      	mov	r3, r1
 8010352:	4313      	orrs	r3, r2
 8010354:	d034      	beq.n	80103c0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8010356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801035a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801035c:	2b00      	cmp	r3, #0
 801035e:	d003      	beq.n	8010368 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8010360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010364:	d007      	beq.n	8010376 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8010366:	e011      	b.n	801038c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010368:	4b12      	ldr	r3, [pc, #72]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801036a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801036c:	4a11      	ldr	r2, [pc, #68]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801036e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010372:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010374:	e00e      	b.n	8010394 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801037a:	3308      	adds	r3, #8
 801037c:	2102      	movs	r1, #2
 801037e:	4618      	mov	r0, r3
 8010380:	f001 face 	bl	8011920 <RCCEx_PLL2_Config>
 8010384:	4603      	mov	r3, r0
 8010386:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801038a:	e003      	b.n	8010394 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 801038c:	2301      	movs	r3, #1
 801038e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8010392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010394:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010398:	2b00      	cmp	r3, #0
 801039a:	d10d      	bne.n	80103b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801039c:	4b05      	ldr	r3, [pc, #20]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801039e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80103a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80103a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103aa:	4a02      	ldr	r2, [pc, #8]	; (80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80103ac:	430b      	orrs	r3, r1
 80103ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80103b0:	e006      	b.n	80103c0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80103b2:	bf00      	nop
 80103b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80103bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80103c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80103c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80103cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80103ce:	2300      	movs	r3, #0
 80103d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80103d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80103d6:	460b      	mov	r3, r1
 80103d8:	4313      	orrs	r3, r2
 80103da:	d00c      	beq.n	80103f6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80103dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80103e0:	3328      	adds	r3, #40	; 0x28
 80103e2:	2102      	movs	r1, #2
 80103e4:	4618      	mov	r0, r3
 80103e6:	f001 fb4d 	bl	8011a84 <RCCEx_PLL3_Config>
 80103ea:	4603      	mov	r3, r0
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d002      	beq.n	80103f6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80103f0:	2301      	movs	r3, #1
 80103f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80103f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80103fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8010402:	663b      	str	r3, [r7, #96]	; 0x60
 8010404:	2300      	movs	r3, #0
 8010406:	667b      	str	r3, [r7, #100]	; 0x64
 8010408:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801040c:	460b      	mov	r3, r1
 801040e:	4313      	orrs	r3, r2
 8010410:	d038      	beq.n	8010484 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8010412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801041a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801041e:	d018      	beq.n	8010452 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8010420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010424:	d811      	bhi.n	801044a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8010426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801042a:	d014      	beq.n	8010456 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 801042c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010430:	d80b      	bhi.n	801044a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8010432:	2b00      	cmp	r3, #0
 8010434:	d011      	beq.n	801045a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8010436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801043a:	d106      	bne.n	801044a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801043c:	4bc3      	ldr	r3, [pc, #780]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801043e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010440:	4ac2      	ldr	r2, [pc, #776]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8010442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010446:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8010448:	e008      	b.n	801045c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801044a:	2301      	movs	r3, #1
 801044c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8010450:	e004      	b.n	801045c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8010452:	bf00      	nop
 8010454:	e002      	b.n	801045c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8010456:	bf00      	nop
 8010458:	e000      	b.n	801045c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 801045a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801045c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010460:	2b00      	cmp	r3, #0
 8010462:	d10b      	bne.n	801047c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010464:	4bb9      	ldr	r3, [pc, #740]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8010466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010468:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801046c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010474:	4ab5      	ldr	r2, [pc, #724]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8010476:	430b      	orrs	r3, r1
 8010478:	6553      	str	r3, [r2, #84]	; 0x54
 801047a:	e003      	b.n	8010484 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801047c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010480:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8010490:	65bb      	str	r3, [r7, #88]	; 0x58
 8010492:	2300      	movs	r3, #0
 8010494:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010496:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801049a:	460b      	mov	r3, r1
 801049c:	4313      	orrs	r3, r2
 801049e:	d009      	beq.n	80104b4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80104a0:	4baa      	ldr	r3, [pc, #680]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80104a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80104a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80104ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104ae:	4aa7      	ldr	r2, [pc, #668]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80104b0:	430b      	orrs	r3, r1
 80104b2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80104b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80104b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104bc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80104c0:	653b      	str	r3, [r7, #80]	; 0x50
 80104c2:	2300      	movs	r3, #0
 80104c4:	657b      	str	r3, [r7, #84]	; 0x54
 80104c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80104ca:	460b      	mov	r3, r1
 80104cc:	4313      	orrs	r3, r2
 80104ce:	d009      	beq.n	80104e4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80104d0:	4b9e      	ldr	r3, [pc, #632]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80104d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104d4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80104d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80104dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104de:	4a9b      	ldr	r2, [pc, #620]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80104e0:	430b      	orrs	r3, r1
 80104e2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80104e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80104e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ec:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80104f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80104f2:	2300      	movs	r3, #0
 80104f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104f6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80104fa:	460b      	mov	r3, r1
 80104fc:	4313      	orrs	r3, r2
 80104fe:	d009      	beq.n	8010514 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8010500:	4b92      	ldr	r3, [pc, #584]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8010502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010504:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8010508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801050c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801050e:	4a8f      	ldr	r2, [pc, #572]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8010510:	430b      	orrs	r3, r1
 8010512:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8010520:	643b      	str	r3, [r7, #64]	; 0x40
 8010522:	2300      	movs	r3, #0
 8010524:	647b      	str	r3, [r7, #68]	; 0x44
 8010526:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801052a:	460b      	mov	r3, r1
 801052c:	4313      	orrs	r3, r2
 801052e:	d00e      	beq.n	801054e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010530:	4b86      	ldr	r3, [pc, #536]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8010532:	691b      	ldr	r3, [r3, #16]
 8010534:	4a85      	ldr	r2, [pc, #532]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8010536:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801053a:	6113      	str	r3, [r2, #16]
 801053c:	4b83      	ldr	r3, [pc, #524]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801053e:	6919      	ldr	r1, [r3, #16]
 8010540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010544:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010548:	4a80      	ldr	r2, [pc, #512]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801054a:	430b      	orrs	r3, r1
 801054c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801054e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010556:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 801055a:	63bb      	str	r3, [r7, #56]	; 0x38
 801055c:	2300      	movs	r3, #0
 801055e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010560:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8010564:	460b      	mov	r3, r1
 8010566:	4313      	orrs	r3, r2
 8010568:	d009      	beq.n	801057e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801056a:	4b78      	ldr	r3, [pc, #480]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801056e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8010572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010578:	4a74      	ldr	r2, [pc, #464]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801057a:	430b      	orrs	r3, r1
 801057c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801057e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010586:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 801058a:	633b      	str	r3, [r7, #48]	; 0x30
 801058c:	2300      	movs	r3, #0
 801058e:	637b      	str	r3, [r7, #52]	; 0x34
 8010590:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8010594:	460b      	mov	r3, r1
 8010596:	4313      	orrs	r3, r2
 8010598:	d00a      	beq.n	80105b0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801059a:	4b6c      	ldr	r3, [pc, #432]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 801059c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801059e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80105a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80105a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80105aa:	4a68      	ldr	r2, [pc, #416]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80105ac:	430b      	orrs	r3, r1
 80105ae:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80105b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80105b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b8:	2100      	movs	r1, #0
 80105ba:	62b9      	str	r1, [r7, #40]	; 0x28
 80105bc:	f003 0301 	and.w	r3, r3, #1
 80105c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105c2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80105c6:	460b      	mov	r3, r1
 80105c8:	4313      	orrs	r3, r2
 80105ca:	d011      	beq.n	80105f0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80105cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80105d0:	3308      	adds	r3, #8
 80105d2:	2100      	movs	r1, #0
 80105d4:	4618      	mov	r0, r3
 80105d6:	f001 f9a3 	bl	8011920 <RCCEx_PLL2_Config>
 80105da:	4603      	mov	r3, r0
 80105dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80105e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d003      	beq.n	80105f0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80105ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80105f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80105f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f8:	2100      	movs	r1, #0
 80105fa:	6239      	str	r1, [r7, #32]
 80105fc:	f003 0302 	and.w	r3, r3, #2
 8010600:	627b      	str	r3, [r7, #36]	; 0x24
 8010602:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8010606:	460b      	mov	r3, r1
 8010608:	4313      	orrs	r3, r2
 801060a:	d011      	beq.n	8010630 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801060c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010610:	3308      	adds	r3, #8
 8010612:	2101      	movs	r1, #1
 8010614:	4618      	mov	r0, r3
 8010616:	f001 f983 	bl	8011920 <RCCEx_PLL2_Config>
 801061a:	4603      	mov	r3, r0
 801061c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8010620:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010624:	2b00      	cmp	r3, #0
 8010626:	d003      	beq.n	8010630 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010628:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801062c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8010630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010638:	2100      	movs	r1, #0
 801063a:	61b9      	str	r1, [r7, #24]
 801063c:	f003 0304 	and.w	r3, r3, #4
 8010640:	61fb      	str	r3, [r7, #28]
 8010642:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010646:	460b      	mov	r3, r1
 8010648:	4313      	orrs	r3, r2
 801064a:	d011      	beq.n	8010670 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801064c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010650:	3308      	adds	r3, #8
 8010652:	2102      	movs	r1, #2
 8010654:	4618      	mov	r0, r3
 8010656:	f001 f963 	bl	8011920 <RCCEx_PLL2_Config>
 801065a:	4603      	mov	r3, r0
 801065c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8010660:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010664:	2b00      	cmp	r3, #0
 8010666:	d003      	beq.n	8010670 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010668:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801066c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8010670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010678:	2100      	movs	r1, #0
 801067a:	6139      	str	r1, [r7, #16]
 801067c:	f003 0308 	and.w	r3, r3, #8
 8010680:	617b      	str	r3, [r7, #20]
 8010682:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010686:	460b      	mov	r3, r1
 8010688:	4313      	orrs	r3, r2
 801068a:	d011      	beq.n	80106b0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801068c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010690:	3328      	adds	r3, #40	; 0x28
 8010692:	2100      	movs	r1, #0
 8010694:	4618      	mov	r0, r3
 8010696:	f001 f9f5 	bl	8011a84 <RCCEx_PLL3_Config>
 801069a:	4603      	mov	r3, r0
 801069c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80106a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d003      	beq.n	80106b0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80106ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80106b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80106b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b8:	2100      	movs	r1, #0
 80106ba:	60b9      	str	r1, [r7, #8]
 80106bc:	f003 0310 	and.w	r3, r3, #16
 80106c0:	60fb      	str	r3, [r7, #12]
 80106c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80106c6:	460b      	mov	r3, r1
 80106c8:	4313      	orrs	r3, r2
 80106ca:	d011      	beq.n	80106f0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80106cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80106d0:	3328      	adds	r3, #40	; 0x28
 80106d2:	2101      	movs	r1, #1
 80106d4:	4618      	mov	r0, r3
 80106d6:	f001 f9d5 	bl	8011a84 <RCCEx_PLL3_Config>
 80106da:	4603      	mov	r3, r0
 80106dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80106e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d003      	beq.n	80106f0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80106ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80106f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80106f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f8:	2100      	movs	r1, #0
 80106fa:	6039      	str	r1, [r7, #0]
 80106fc:	f003 0320 	and.w	r3, r3, #32
 8010700:	607b      	str	r3, [r7, #4]
 8010702:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010706:	460b      	mov	r3, r1
 8010708:	4313      	orrs	r3, r2
 801070a:	d011      	beq.n	8010730 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801070c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010710:	3328      	adds	r3, #40	; 0x28
 8010712:	2102      	movs	r1, #2
 8010714:	4618      	mov	r0, r3
 8010716:	f001 f9b5 	bl	8011a84 <RCCEx_PLL3_Config>
 801071a:	4603      	mov	r3, r0
 801071c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8010720:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8010724:	2b00      	cmp	r3, #0
 8010726:	d003      	beq.n	8010730 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010728:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801072c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8010730:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8010734:	2b00      	cmp	r3, #0
 8010736:	d101      	bne.n	801073c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8010738:	2300      	movs	r3, #0
 801073a:	e000      	b.n	801073e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 801073c:	2301      	movs	r3, #1
}
 801073e:	4618      	mov	r0, r3
 8010740:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8010744:	46bd      	mov	sp, r7
 8010746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801074a:	bf00      	nop
 801074c:	58024400 	.word	0x58024400

08010750 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b090      	sub	sp, #64	; 0x40
 8010754:	af00      	add	r7, sp, #0
 8010756:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801075a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801075e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8010762:	430b      	orrs	r3, r1
 8010764:	f040 8094 	bne.w	8010890 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8010768:	4b97      	ldr	r3, [pc, #604]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801076a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801076c:	f003 0307 	and.w	r3, r3, #7
 8010770:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010774:	2b04      	cmp	r3, #4
 8010776:	f200 8087 	bhi.w	8010888 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801077a:	a201      	add	r2, pc, #4	; (adr r2, 8010780 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010780:	08010795 	.word	0x08010795
 8010784:	080107bd 	.word	0x080107bd
 8010788:	080107e5 	.word	0x080107e5
 801078c:	08010881 	.word	0x08010881
 8010790:	0801080d 	.word	0x0801080d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010794:	4b8c      	ldr	r3, [pc, #560]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801079c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80107a0:	d108      	bne.n	80107b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80107a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107a6:	4618      	mov	r0, r3
 80107a8:	f000 ff68 	bl	801167c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80107ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107b0:	f000 bc97 	b.w	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80107b4:	2300      	movs	r3, #0
 80107b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107b8:	f000 bc93 	b.w	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80107bc:	4b82      	ldr	r3, [pc, #520]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80107c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80107c8:	d108      	bne.n	80107dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107ca:	f107 0318 	add.w	r3, r7, #24
 80107ce:	4618      	mov	r0, r3
 80107d0:	f000 fcac 	bl	801112c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80107d4:	69bb      	ldr	r3, [r7, #24]
 80107d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107d8:	f000 bc83 	b.w	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80107dc:	2300      	movs	r3, #0
 80107de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107e0:	f000 bc7f 	b.w	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80107e4:	4b78      	ldr	r3, [pc, #480]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80107ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107f0:	d108      	bne.n	8010804 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80107f2:	f107 030c 	add.w	r3, r7, #12
 80107f6:	4618      	mov	r0, r3
 80107f8:	f000 fdec 	bl	80113d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010800:	f000 bc6f 	b.w	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010804:	2300      	movs	r3, #0
 8010806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010808:	f000 bc6b 	b.w	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801080c:	4b6e      	ldr	r3, [pc, #440]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801080e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010810:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010814:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010816:	4b6c      	ldr	r3, [pc, #432]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f003 0304 	and.w	r3, r3, #4
 801081e:	2b04      	cmp	r3, #4
 8010820:	d10c      	bne.n	801083c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8010822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010824:	2b00      	cmp	r3, #0
 8010826:	d109      	bne.n	801083c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010828:	4b67      	ldr	r3, [pc, #412]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	08db      	lsrs	r3, r3, #3
 801082e:	f003 0303 	and.w	r3, r3, #3
 8010832:	4a66      	ldr	r2, [pc, #408]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8010834:	fa22 f303 	lsr.w	r3, r2, r3
 8010838:	63fb      	str	r3, [r7, #60]	; 0x3c
 801083a:	e01f      	b.n	801087c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801083c:	4b62      	ldr	r3, [pc, #392]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010848:	d106      	bne.n	8010858 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801084a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801084c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010850:	d102      	bne.n	8010858 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010852:	4b5f      	ldr	r3, [pc, #380]	; (80109d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8010854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010856:	e011      	b.n	801087c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010858:	4b5b      	ldr	r3, [pc, #364]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010860:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010864:	d106      	bne.n	8010874 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8010866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801086c:	d102      	bne.n	8010874 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801086e:	4b59      	ldr	r3, [pc, #356]	; (80109d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8010870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010872:	e003      	b.n	801087c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010874:	2300      	movs	r3, #0
 8010876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010878:	f000 bc33 	b.w	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 801087c:	f000 bc31 	b.w	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010880:	4b55      	ldr	r3, [pc, #340]	; (80109d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010884:	f000 bc2d 	b.w	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8010888:	2300      	movs	r3, #0
 801088a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801088c:	f000 bc29 	b.w	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8010890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010894:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8010898:	430b      	orrs	r3, r1
 801089a:	f040 809f 	bne.w	80109dc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 801089e:	4b4a      	ldr	r3, [pc, #296]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80108a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80108a6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80108a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108ae:	d04d      	beq.n	801094c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80108b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108b6:	f200 8084 	bhi.w	80109c2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80108ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108bc:	2bc0      	cmp	r3, #192	; 0xc0
 80108be:	d07d      	beq.n	80109bc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80108c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c2:	2bc0      	cmp	r3, #192	; 0xc0
 80108c4:	d87d      	bhi.n	80109c2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80108c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c8:	2b80      	cmp	r3, #128	; 0x80
 80108ca:	d02d      	beq.n	8010928 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80108cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ce:	2b80      	cmp	r3, #128	; 0x80
 80108d0:	d877      	bhi.n	80109c2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80108d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d003      	beq.n	80108e0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80108d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108da:	2b40      	cmp	r3, #64	; 0x40
 80108dc:	d012      	beq.n	8010904 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80108de:	e070      	b.n	80109c2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80108e0:	4b39      	ldr	r3, [pc, #228]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80108e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80108ec:	d107      	bne.n	80108fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80108ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80108f2:	4618      	mov	r0, r3
 80108f4:	f000 fec2 	bl	801167c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80108f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108fc:	e3f1      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80108fe:	2300      	movs	r3, #0
 8010900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010902:	e3ee      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010904:	4b30      	ldr	r3, [pc, #192]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801090c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010910:	d107      	bne.n	8010922 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010912:	f107 0318 	add.w	r3, r7, #24
 8010916:	4618      	mov	r0, r3
 8010918:	f000 fc08 	bl	801112c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010920:	e3df      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010922:	2300      	movs	r3, #0
 8010924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010926:	e3dc      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010928:	4b27      	ldr	r3, [pc, #156]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010934:	d107      	bne.n	8010946 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010936:	f107 030c 	add.w	r3, r7, #12
 801093a:	4618      	mov	r0, r3
 801093c:	f000 fd4a 	bl	80113d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010944:	e3cd      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010946:	2300      	movs	r3, #0
 8010948:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801094a:	e3ca      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801094c:	4b1e      	ldr	r3, [pc, #120]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801094e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010950:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010954:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010956:	4b1c      	ldr	r3, [pc, #112]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	f003 0304 	and.w	r3, r3, #4
 801095e:	2b04      	cmp	r3, #4
 8010960:	d10c      	bne.n	801097c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8010962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010964:	2b00      	cmp	r3, #0
 8010966:	d109      	bne.n	801097c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010968:	4b17      	ldr	r3, [pc, #92]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	08db      	lsrs	r3, r3, #3
 801096e:	f003 0303 	and.w	r3, r3, #3
 8010972:	4a16      	ldr	r2, [pc, #88]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8010974:	fa22 f303 	lsr.w	r3, r2, r3
 8010978:	63fb      	str	r3, [r7, #60]	; 0x3c
 801097a:	e01e      	b.n	80109ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801097c:	4b12      	ldr	r3, [pc, #72]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010988:	d106      	bne.n	8010998 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 801098a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801098c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010990:	d102      	bne.n	8010998 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010992:	4b0f      	ldr	r3, [pc, #60]	; (80109d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8010994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010996:	e010      	b.n	80109ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010998:	4b0b      	ldr	r3, [pc, #44]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80109a4:	d106      	bne.n	80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80109a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109ac:	d102      	bne.n	80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80109ae:	4b09      	ldr	r3, [pc, #36]	; (80109d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80109b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109b2:	e002      	b.n	80109ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80109b4:	2300      	movs	r3, #0
 80109b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80109b8:	e393      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80109ba:	e392      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80109bc:	4b06      	ldr	r3, [pc, #24]	; (80109d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80109be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109c0:	e38f      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109c6:	e38c      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80109c8:	58024400 	.word	0x58024400
 80109cc:	03d09000 	.word	0x03d09000
 80109d0:	003d0900 	.word	0x003d0900
 80109d4:	016e3600 	.word	0x016e3600
 80109d8:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80109dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109e0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80109e4:	430b      	orrs	r3, r1
 80109e6:	f040 809c 	bne.w	8010b22 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80109ea:	4b9e      	ldr	r3, [pc, #632]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80109ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109ee:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80109f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80109f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80109fa:	d054      	beq.n	8010aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80109fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a02:	f200 808b 	bhi.w	8010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8010a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010a0c:	f000 8083 	beq.w	8010b16 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8010a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010a16:	f200 8081 	bhi.w	8010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8010a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a20:	d02f      	beq.n	8010a82 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8010a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a28:	d878      	bhi.n	8010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8010a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d004      	beq.n	8010a3a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8010a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a36:	d012      	beq.n	8010a5e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8010a38:	e070      	b.n	8010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010a3a:	4b8a      	ldr	r3, [pc, #552]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010a46:	d107      	bne.n	8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f000 fe15 	bl	801167c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a56:	e344      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a5c:	e341      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010a5e:	4b81      	ldr	r3, [pc, #516]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a6a:	d107      	bne.n	8010a7c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a6c:	f107 0318 	add.w	r3, r7, #24
 8010a70:	4618      	mov	r0, r3
 8010a72:	f000 fb5b 	bl	801112c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010a76:	69bb      	ldr	r3, [r7, #24]
 8010a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a7a:	e332      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a80:	e32f      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010a82:	4b78      	ldr	r3, [pc, #480]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a8e:	d107      	bne.n	8010aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a90:	f107 030c 	add.w	r3, r7, #12
 8010a94:	4618      	mov	r0, r3
 8010a96:	f000 fc9d 	bl	80113d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a9e:	e320      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010aa4:	e31d      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010aa6:	4b6f      	ldr	r3, [pc, #444]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010aaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010aae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010ab0:	4b6c      	ldr	r3, [pc, #432]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f003 0304 	and.w	r3, r3, #4
 8010ab8:	2b04      	cmp	r3, #4
 8010aba:	d10c      	bne.n	8010ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8010abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d109      	bne.n	8010ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ac2:	4b68      	ldr	r3, [pc, #416]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	08db      	lsrs	r3, r3, #3
 8010ac8:	f003 0303 	and.w	r3, r3, #3
 8010acc:	4a66      	ldr	r2, [pc, #408]	; (8010c68 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8010ace:	fa22 f303 	lsr.w	r3, r2, r3
 8010ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ad4:	e01e      	b.n	8010b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010ad6:	4b63      	ldr	r3, [pc, #396]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ae2:	d106      	bne.n	8010af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8010ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010aea:	d102      	bne.n	8010af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010aec:	4b5f      	ldr	r3, [pc, #380]	; (8010c6c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8010aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010af0:	e010      	b.n	8010b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010af2:	4b5c      	ldr	r3, [pc, #368]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010afa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010afe:	d106      	bne.n	8010b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8010b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b06:	d102      	bne.n	8010b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010b08:	4b59      	ldr	r3, [pc, #356]	; (8010c70 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8010b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b0c:	e002      	b.n	8010b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8010b12:	e2e6      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8010b14:	e2e5      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010b16:	4b57      	ldr	r3, [pc, #348]	; (8010c74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b1a:	e2e2      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b20:	e2df      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b26:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8010b2a:	430b      	orrs	r3, r1
 8010b2c:	f040 80a7 	bne.w	8010c7e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010b30:	4b4c      	ldr	r3, [pc, #304]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b34:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010b38:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010b40:	d055      	beq.n	8010bee <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8010b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010b48:	f200 8096 	bhi.w	8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8010b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010b52:	f000 8084 	beq.w	8010c5e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8010b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010b5c:	f200 808c 	bhi.w	8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8010b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b66:	d030      	beq.n	8010bca <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8010b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b6e:	f200 8083 	bhi.w	8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8010b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d004      	beq.n	8010b82 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8010b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b7e:	d012      	beq.n	8010ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8010b80:	e07a      	b.n	8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010b82:	4b38      	ldr	r3, [pc, #224]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010b8e:	d107      	bne.n	8010ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b94:	4618      	mov	r0, r3
 8010b96:	f000 fd71 	bl	801167c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b9e:	e2a0      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ba4:	e29d      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010ba6:	4b2f      	ldr	r3, [pc, #188]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010bb2:	d107      	bne.n	8010bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010bb4:	f107 0318 	add.w	r3, r7, #24
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f000 fab7 	bl	801112c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010bbe:	69bb      	ldr	r3, [r7, #24]
 8010bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bc2:	e28e      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bc8:	e28b      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010bca:	4b26      	ldr	r3, [pc, #152]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010bd6:	d107      	bne.n	8010be8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010bd8:	f107 030c 	add.w	r3, r7, #12
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f000 fbf9 	bl	80113d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010be6:	e27c      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010be8:	2300      	movs	r3, #0
 8010bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bec:	e279      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010bee:	4b1d      	ldr	r3, [pc, #116]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010bf6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010bf8:	4b1a      	ldr	r3, [pc, #104]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	f003 0304 	and.w	r3, r3, #4
 8010c00:	2b04      	cmp	r3, #4
 8010c02:	d10c      	bne.n	8010c1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8010c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d109      	bne.n	8010c1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010c0a:	4b16      	ldr	r3, [pc, #88]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	08db      	lsrs	r3, r3, #3
 8010c10:	f003 0303 	and.w	r3, r3, #3
 8010c14:	4a14      	ldr	r2, [pc, #80]	; (8010c68 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8010c16:	fa22 f303 	lsr.w	r3, r2, r3
 8010c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c1c:	e01e      	b.n	8010c5c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010c1e:	4b11      	ldr	r3, [pc, #68]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c2a:	d106      	bne.n	8010c3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010c32:	d102      	bne.n	8010c3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010c34:	4b0d      	ldr	r3, [pc, #52]	; (8010c6c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8010c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c38:	e010      	b.n	8010c5c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010c3a:	4b0a      	ldr	r3, [pc, #40]	; (8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c46:	d106      	bne.n	8010c56 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c4e:	d102      	bne.n	8010c56 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010c50:	4b07      	ldr	r3, [pc, #28]	; (8010c70 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8010c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c54:	e002      	b.n	8010c5c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010c56:	2300      	movs	r3, #0
 8010c58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010c5a:	e242      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8010c5c:	e241      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010c5e:	4b05      	ldr	r3, [pc, #20]	; (8010c74 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c62:	e23e      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8010c64:	58024400 	.word	0x58024400
 8010c68:	03d09000 	.word	0x03d09000
 8010c6c:	003d0900 	.word	0x003d0900
 8010c70:	016e3600 	.word	0x016e3600
 8010c74:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c7c:	e231      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c82:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010c86:	430b      	orrs	r3, r1
 8010c88:	f040 8085 	bne.w	8010d96 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8010c8c:	4b9c      	ldr	r3, [pc, #624]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c90:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010c94:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010c9c:	d06b      	beq.n	8010d76 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8010c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010ca4:	d874      	bhi.n	8010d90 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8010ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010cac:	d056      	beq.n	8010d5c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8010cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010cb4:	d86c      	bhi.n	8010d90 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8010cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010cbc:	d03b      	beq.n	8010d36 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8010cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010cc4:	d864      	bhi.n	8010d90 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8010cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ccc:	d021      	beq.n	8010d12 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8010cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010cd4:	d85c      	bhi.n	8010d90 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8010cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d004      	beq.n	8010ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8010cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ce2:	d004      	beq.n	8010cee <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8010ce4:	e054      	b.n	8010d90 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010ce6:	f7fe fb5f 	bl	800f3a8 <HAL_RCC_GetPCLK1Freq>
 8010cea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010cec:	e1f9      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010cee:	4b84      	ldr	r3, [pc, #528]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010cf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010cfa:	d107      	bne.n	8010d0c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010cfc:	f107 0318 	add.w	r3, r7, #24
 8010d00:	4618      	mov	r0, r3
 8010d02:	f000 fa13 	bl	801112c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d0a:	e1ea      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d10:	e1e7      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010d12:	4b7b      	ldr	r3, [pc, #492]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d1e:	d107      	bne.n	8010d30 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d20:	f107 030c 	add.w	r3, r7, #12
 8010d24:	4618      	mov	r0, r3
 8010d26:	f000 fb55 	bl	80113d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d2e:	e1d8      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010d30:	2300      	movs	r3, #0
 8010d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d34:	e1d5      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010d36:	4b72      	ldr	r3, [pc, #456]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f003 0304 	and.w	r3, r3, #4
 8010d3e:	2b04      	cmp	r3, #4
 8010d40:	d109      	bne.n	8010d56 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010d42:	4b6f      	ldr	r3, [pc, #444]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	08db      	lsrs	r3, r3, #3
 8010d48:	f003 0303 	and.w	r3, r3, #3
 8010d4c:	4a6d      	ldr	r2, [pc, #436]	; (8010f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8010d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d54:	e1c5      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010d56:	2300      	movs	r3, #0
 8010d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d5a:	e1c2      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010d5c:	4b68      	ldr	r3, [pc, #416]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d68:	d102      	bne.n	8010d70 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8010d6a:	4b67      	ldr	r3, [pc, #412]	; (8010f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d6e:	e1b8      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010d70:	2300      	movs	r3, #0
 8010d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d74:	e1b5      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010d76:	4b62      	ldr	r3, [pc, #392]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010d82:	d102      	bne.n	8010d8a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8010d84:	4b61      	ldr	r3, [pc, #388]	; (8010f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8010d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d88:	e1ab      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d8e:	e1a8      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8010d90:	2300      	movs	r3, #0
 8010d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d94:	e1a5      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d9a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010d9e:	430b      	orrs	r3, r1
 8010da0:	d173      	bne.n	8010e8a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010da2:	4b57      	ldr	r3, [pc, #348]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010daa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010db2:	d02f      	beq.n	8010e14 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8010db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010dba:	d863      	bhi.n	8010e84 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8010dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d004      	beq.n	8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8010dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010dc8:	d012      	beq.n	8010df0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8010dca:	e05b      	b.n	8010e84 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010dcc:	4b4c      	ldr	r3, [pc, #304]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010dd8:	d107      	bne.n	8010dea <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010dda:	f107 0318 	add.w	r3, r7, #24
 8010dde:	4618      	mov	r0, r3
 8010de0:	f000 f9a4 	bl	801112c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010de4:	69bb      	ldr	r3, [r7, #24]
 8010de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010de8:	e17b      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010dea:	2300      	movs	r3, #0
 8010dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dee:	e178      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010df0:	4b43      	ldr	r3, [pc, #268]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010dfc:	d107      	bne.n	8010e0e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010dfe:	f107 030c 	add.w	r3, r7, #12
 8010e02:	4618      	mov	r0, r3
 8010e04:	f000 fae6 	bl	80113d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e0c:	e169      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e12:	e166      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010e14:	4b3a      	ldr	r3, [pc, #232]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010e1c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010e1e:	4b38      	ldr	r3, [pc, #224]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f003 0304 	and.w	r3, r3, #4
 8010e26:	2b04      	cmp	r3, #4
 8010e28:	d10c      	bne.n	8010e44 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8010e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d109      	bne.n	8010e44 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e30:	4b33      	ldr	r3, [pc, #204]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	08db      	lsrs	r3, r3, #3
 8010e36:	f003 0303 	and.w	r3, r3, #3
 8010e3a:	4a32      	ldr	r2, [pc, #200]	; (8010f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8010e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e42:	e01e      	b.n	8010e82 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010e44:	4b2e      	ldr	r3, [pc, #184]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e50:	d106      	bne.n	8010e60 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8010e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010e58:	d102      	bne.n	8010e60 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010e5a:	4b2b      	ldr	r3, [pc, #172]	; (8010f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e5e:	e010      	b.n	8010e82 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010e60:	4b27      	ldr	r3, [pc, #156]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010e6c:	d106      	bne.n	8010e7c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8010e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010e74:	d102      	bne.n	8010e7c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010e76:	4b25      	ldr	r3, [pc, #148]	; (8010f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8010e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e7a:	e002      	b.n	8010e82 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010e80:	e12f      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8010e82:	e12e      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8010e84:	2300      	movs	r3, #0
 8010e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e88:	e12b      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e8e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010e92:	430b      	orrs	r3, r1
 8010e94:	d13c      	bne.n	8010f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010e96:	4b1a      	ldr	r3, [pc, #104]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e9e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d004      	beq.n	8010eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010eac:	d012      	beq.n	8010ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8010eae:	e023      	b.n	8010ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010eb0:	4b13      	ldr	r3, [pc, #76]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010ebc:	d107      	bne.n	8010ece <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f000 fbda 	bl	801167c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ecc:	e109      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ed2:	e106      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010ed4:	4b0a      	ldr	r3, [pc, #40]	; (8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010ee0:	d107      	bne.n	8010ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ee2:	f107 0318 	add.w	r3, r7, #24
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f000 f920 	bl	801112c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010eec:	6a3b      	ldr	r3, [r7, #32]
 8010eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ef0:	e0f7      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ef6:	e0f4      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010efc:	e0f1      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8010efe:	bf00      	nop
 8010f00:	58024400 	.word	0x58024400
 8010f04:	03d09000 	.word	0x03d09000
 8010f08:	003d0900 	.word	0x003d0900
 8010f0c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f14:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8010f18:	430b      	orrs	r3, r1
 8010f1a:	f040 8091 	bne.w	8011040 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010f1e:	4b73      	ldr	r3, [pc, #460]	; (80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8010f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f22:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010f26:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8010f2e:	f000 8081 	beq.w	8011034 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8010f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f34:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8010f38:	d87f      	bhi.n	801103a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8010f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010f40:	d06b      	beq.n	801101a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8010f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010f48:	d877      	bhi.n	801103a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8010f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f50:	d056      	beq.n	8011000 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8010f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f58:	d86f      	bhi.n	801103a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8010f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010f60:	d03b      	beq.n	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8010f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010f68:	d867      	bhi.n	801103a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8010f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010f70:	d021      	beq.n	8010fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8010f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010f78:	d85f      	bhi.n	801103a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8010f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d004      	beq.n	8010f8a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010f86:	d004      	beq.n	8010f92 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8010f88:	e057      	b.n	801103a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010f8a:	f000 f8b9 	bl	8011100 <HAL_RCCEx_GetD3PCLK1Freq>
 8010f8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f90:	e0a7      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010f92:	4b56      	ldr	r3, [pc, #344]	; (80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010f9e:	d107      	bne.n	8010fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010fa0:	f107 0318 	add.w	r3, r7, #24
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f000 f8c1 	bl	801112c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010faa:	69fb      	ldr	r3, [r7, #28]
 8010fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010fae:	e098      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fb4:	e095      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010fb6:	4b4d      	ldr	r3, [pc, #308]	; (80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010fc2:	d107      	bne.n	8010fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010fc4:	f107 030c 	add.w	r3, r7, #12
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f000 fa03 	bl	80113d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010fd2:	e086      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fd8:	e083      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010fda:	4b44      	ldr	r3, [pc, #272]	; (80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f003 0304 	and.w	r3, r3, #4
 8010fe2:	2b04      	cmp	r3, #4
 8010fe4:	d109      	bne.n	8010ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010fe6:	4b41      	ldr	r3, [pc, #260]	; (80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	08db      	lsrs	r3, r3, #3
 8010fec:	f003 0303 	and.w	r3, r3, #3
 8010ff0:	4a3f      	ldr	r2, [pc, #252]	; (80110f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8010ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8010ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ff8:	e073      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ffe:	e070      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8011000:	4b3a      	ldr	r3, [pc, #232]	; (80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801100c:	d102      	bne.n	8011014 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 801100e:	4b39      	ldr	r3, [pc, #228]	; (80110f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8011010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011012:	e066      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8011014:	2300      	movs	r3, #0
 8011016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011018:	e063      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801101a:	4b34      	ldr	r3, [pc, #208]	; (80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011026:	d102      	bne.n	801102e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8011028:	4b33      	ldr	r3, [pc, #204]	; (80110f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 801102a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801102c:	e059      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 801102e:	2300      	movs	r3, #0
 8011030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011032:	e056      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011034:	4b31      	ldr	r3, [pc, #196]	; (80110fc <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8011036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011038:	e053      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801103a:	2300      	movs	r3, #0
 801103c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801103e:	e050      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8011040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011044:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8011048:	430b      	orrs	r3, r1
 801104a:	d148      	bne.n	80110de <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801104c:	4b27      	ldr	r3, [pc, #156]	; (80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801104e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011054:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801105c:	d02a      	beq.n	80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 801105e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011064:	d838      	bhi.n	80110d8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8011066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011068:	2b00      	cmp	r3, #0
 801106a:	d004      	beq.n	8011076 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 801106c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011072:	d00d      	beq.n	8011090 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8011074:	e030      	b.n	80110d8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011076:	4b1d      	ldr	r3, [pc, #116]	; (80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801107e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011082:	d102      	bne.n	801108a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8011084:	4b1c      	ldr	r3, [pc, #112]	; (80110f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8011086:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011088:	e02b      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 801108a:	2300      	movs	r3, #0
 801108c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801108e:	e028      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011090:	4b16      	ldr	r3, [pc, #88]	; (80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801109c:	d107      	bne.n	80110ae <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110a2:	4618      	mov	r0, r3
 80110a4:	f000 faea 	bl	801167c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80110a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80110ac:	e019      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80110ae:	2300      	movs	r3, #0
 80110b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110b2:	e016      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80110b4:	4b0d      	ldr	r3, [pc, #52]	; (80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80110bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80110c0:	d107      	bne.n	80110d2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110c2:	f107 0318 	add.w	r3, r7, #24
 80110c6:	4618      	mov	r0, r3
 80110c8:	f000 f830 	bl	801112c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80110cc:	69fb      	ldr	r3, [r7, #28]
 80110ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80110d0:	e007      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80110d2:	2300      	movs	r3, #0
 80110d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110d6:	e004      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80110d8:	2300      	movs	r3, #0
 80110da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110dc:	e001      	b.n	80110e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80110de:	2300      	movs	r3, #0
 80110e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80110e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3740      	adds	r7, #64	; 0x40
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}
 80110ec:	58024400 	.word	0x58024400
 80110f0:	03d09000 	.word	0x03d09000
 80110f4:	003d0900 	.word	0x003d0900
 80110f8:	016e3600 	.word	0x016e3600
 80110fc:	00bb8000 	.word	0x00bb8000

08011100 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8011104:	f7fe f920 	bl	800f348 <HAL_RCC_GetHCLKFreq>
 8011108:	4602      	mov	r2, r0
 801110a:	4b06      	ldr	r3, [pc, #24]	; (8011124 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801110c:	6a1b      	ldr	r3, [r3, #32]
 801110e:	091b      	lsrs	r3, r3, #4
 8011110:	f003 0307 	and.w	r3, r3, #7
 8011114:	4904      	ldr	r1, [pc, #16]	; (8011128 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8011116:	5ccb      	ldrb	r3, [r1, r3]
 8011118:	f003 031f 	and.w	r3, r3, #31
 801111c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8011120:	4618      	mov	r0, r3
 8011122:	bd80      	pop	{r7, pc}
 8011124:	58024400 	.word	0x58024400
 8011128:	08019d10 	.word	0x08019d10

0801112c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801112c:	b480      	push	{r7}
 801112e:	b089      	sub	sp, #36	; 0x24
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011134:	4ba1      	ldr	r3, [pc, #644]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011138:	f003 0303 	and.w	r3, r3, #3
 801113c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801113e:	4b9f      	ldr	r3, [pc, #636]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011142:	0b1b      	lsrs	r3, r3, #12
 8011144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011148:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801114a:	4b9c      	ldr	r3, [pc, #624]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801114e:	091b      	lsrs	r3, r3, #4
 8011150:	f003 0301 	and.w	r3, r3, #1
 8011154:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8011156:	4b99      	ldr	r3, [pc, #612]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801115a:	08db      	lsrs	r3, r3, #3
 801115c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011160:	693a      	ldr	r2, [r7, #16]
 8011162:	fb02 f303 	mul.w	r3, r2, r3
 8011166:	ee07 3a90 	vmov	s15, r3
 801116a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801116e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	2b00      	cmp	r3, #0
 8011176:	f000 8111 	beq.w	801139c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801117a:	69bb      	ldr	r3, [r7, #24]
 801117c:	2b02      	cmp	r3, #2
 801117e:	f000 8083 	beq.w	8011288 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8011182:	69bb      	ldr	r3, [r7, #24]
 8011184:	2b02      	cmp	r3, #2
 8011186:	f200 80a1 	bhi.w	80112cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d003      	beq.n	8011198 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8011190:	69bb      	ldr	r3, [r7, #24]
 8011192:	2b01      	cmp	r3, #1
 8011194:	d056      	beq.n	8011244 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8011196:	e099      	b.n	80112cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011198:	4b88      	ldr	r3, [pc, #544]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	f003 0320 	and.w	r3, r3, #32
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d02d      	beq.n	8011200 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80111a4:	4b85      	ldr	r3, [pc, #532]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	08db      	lsrs	r3, r3, #3
 80111aa:	f003 0303 	and.w	r3, r3, #3
 80111ae:	4a84      	ldr	r2, [pc, #528]	; (80113c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80111b0:	fa22 f303 	lsr.w	r3, r2, r3
 80111b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	ee07 3a90 	vmov	s15, r3
 80111bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	ee07 3a90 	vmov	s15, r3
 80111c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111ce:	4b7b      	ldr	r3, [pc, #492]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80111d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111d6:	ee07 3a90 	vmov	s15, r3
 80111da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111de:	ed97 6a03 	vldr	s12, [r7, #12]
 80111e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80113c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80111e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80111fe:	e087      	b.n	8011310 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	ee07 3a90 	vmov	s15, r3
 8011206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801120a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80113c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801120e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011212:	4b6a      	ldr	r3, [pc, #424]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801121a:	ee07 3a90 	vmov	s15, r3
 801121e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011222:	ed97 6a03 	vldr	s12, [r7, #12]
 8011226:	eddf 5a67 	vldr	s11, [pc, #412]	; 80113c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801122a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801122e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801123a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801123e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011242:	e065      	b.n	8011310 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	ee07 3a90 	vmov	s15, r3
 801124a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801124e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80113cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8011252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011256:	4b59      	ldr	r3, [pc, #356]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801125a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801125e:	ee07 3a90 	vmov	s15, r3
 8011262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011266:	ed97 6a03 	vldr	s12, [r7, #12]
 801126a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80113c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801126e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801127a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801127e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011286:	e043      	b.n	8011310 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	ee07 3a90 	vmov	s15, r3
 801128e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011292:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80113d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8011296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801129a:	4b48      	ldr	r3, [pc, #288]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801129c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801129e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112a2:	ee07 3a90 	vmov	s15, r3
 80112a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80112ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80113c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80112b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80112b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80112ca:	e021      	b.n	8011310 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	ee07 3a90 	vmov	s15, r3
 80112d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80113cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80112da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112de:	4b37      	ldr	r3, [pc, #220]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80112e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112e6:	ee07 3a90 	vmov	s15, r3
 80112ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80112f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80113c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80112f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80112fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011306:	ee67 7a27 	vmul.f32	s15, s14, s15
 801130a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801130e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8011310:	4b2a      	ldr	r3, [pc, #168]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011314:	0a5b      	lsrs	r3, r3, #9
 8011316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801131a:	ee07 3a90 	vmov	s15, r3
 801131e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011326:	ee37 7a87 	vadd.f32	s14, s15, s14
 801132a:	edd7 6a07 	vldr	s13, [r7, #28]
 801132e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011336:	ee17 2a90 	vmov	r2, s15
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801133e:	4b1f      	ldr	r3, [pc, #124]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011342:	0c1b      	lsrs	r3, r3, #16
 8011344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011348:	ee07 3a90 	vmov	s15, r3
 801134c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011354:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011358:	edd7 6a07 	vldr	s13, [r7, #28]
 801135c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011364:	ee17 2a90 	vmov	r2, s15
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801136c:	4b13      	ldr	r3, [pc, #76]	; (80113bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801136e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011370:	0e1b      	lsrs	r3, r3, #24
 8011372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011376:	ee07 3a90 	vmov	s15, r3
 801137a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801137e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011382:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011386:	edd7 6a07 	vldr	s13, [r7, #28]
 801138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801138e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011392:	ee17 2a90 	vmov	r2, s15
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801139a:	e008      	b.n	80113ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2200      	movs	r2, #0
 80113a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2200      	movs	r2, #0
 80113a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2200      	movs	r2, #0
 80113ac:	609a      	str	r2, [r3, #8]
}
 80113ae:	bf00      	nop
 80113b0:	3724      	adds	r7, #36	; 0x24
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop
 80113bc:	58024400 	.word	0x58024400
 80113c0:	03d09000 	.word	0x03d09000
 80113c4:	46000000 	.word	0x46000000
 80113c8:	4c742400 	.word	0x4c742400
 80113cc:	4a742400 	.word	0x4a742400
 80113d0:	4bb71b00 	.word	0x4bb71b00

080113d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80113d4:	b480      	push	{r7}
 80113d6:	b089      	sub	sp, #36	; 0x24
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80113dc:	4ba1      	ldr	r3, [pc, #644]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80113de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113e0:	f003 0303 	and.w	r3, r3, #3
 80113e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80113e6:	4b9f      	ldr	r3, [pc, #636]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80113e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ea:	0d1b      	lsrs	r3, r3, #20
 80113ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80113f2:	4b9c      	ldr	r3, [pc, #624]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80113f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f6:	0a1b      	lsrs	r3, r3, #8
 80113f8:	f003 0301 	and.w	r3, r3, #1
 80113fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80113fe:	4b99      	ldr	r3, [pc, #612]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011402:	08db      	lsrs	r3, r3, #3
 8011404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011408:	693a      	ldr	r2, [r7, #16]
 801140a:	fb02 f303 	mul.w	r3, r2, r3
 801140e:	ee07 3a90 	vmov	s15, r3
 8011412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011416:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	2b00      	cmp	r3, #0
 801141e:	f000 8111 	beq.w	8011644 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	2b02      	cmp	r3, #2
 8011426:	f000 8083 	beq.w	8011530 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	2b02      	cmp	r3, #2
 801142e:	f200 80a1 	bhi.w	8011574 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d003      	beq.n	8011440 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8011438:	69bb      	ldr	r3, [r7, #24]
 801143a:	2b01      	cmp	r3, #1
 801143c:	d056      	beq.n	80114ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801143e:	e099      	b.n	8011574 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011440:	4b88      	ldr	r3, [pc, #544]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f003 0320 	and.w	r3, r3, #32
 8011448:	2b00      	cmp	r3, #0
 801144a:	d02d      	beq.n	80114a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801144c:	4b85      	ldr	r3, [pc, #532]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	08db      	lsrs	r3, r3, #3
 8011452:	f003 0303 	and.w	r3, r3, #3
 8011456:	4a84      	ldr	r2, [pc, #528]	; (8011668 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8011458:	fa22 f303 	lsr.w	r3, r2, r3
 801145c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	ee07 3a90 	vmov	s15, r3
 8011464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	ee07 3a90 	vmov	s15, r3
 801146e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011476:	4b7b      	ldr	r3, [pc, #492]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801147a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801147e:	ee07 3a90 	vmov	s15, r3
 8011482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011486:	ed97 6a03 	vldr	s12, [r7, #12]
 801148a:	eddf 5a78 	vldr	s11, [pc, #480]	; 801166c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801148e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801149a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801149e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80114a6:	e087      	b.n	80115b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	ee07 3a90 	vmov	s15, r3
 80114ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8011670 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80114b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114ba:	4b6a      	ldr	r3, [pc, #424]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80114bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114c2:	ee07 3a90 	vmov	s15, r3
 80114c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80114ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80114ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 801166c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80114d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80114d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80114de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80114ea:	e065      	b.n	80115b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	ee07 3a90 	vmov	s15, r3
 80114f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011674 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80114fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114fe:	4b59      	ldr	r3, [pc, #356]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011506:	ee07 3a90 	vmov	s15, r3
 801150a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801150e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011512:	eddf 5a56 	vldr	s11, [pc, #344]	; 801166c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801151a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801151e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011526:	ee67 7a27 	vmul.f32	s15, s14, s15
 801152a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801152e:	e043      	b.n	80115b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	ee07 3a90 	vmov	s15, r3
 8011536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801153a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8011678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801153e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011542:	4b48      	ldr	r3, [pc, #288]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801154a:	ee07 3a90 	vmov	s15, r3
 801154e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011552:	ed97 6a03 	vldr	s12, [r7, #12]
 8011556:	eddf 5a45 	vldr	s11, [pc, #276]	; 801166c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801155a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801155e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801156a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801156e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011572:	e021      	b.n	80115b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	ee07 3a90 	vmov	s15, r3
 801157a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801157e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011674 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8011582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011586:	4b37      	ldr	r3, [pc, #220]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801158a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801158e:	ee07 3a90 	vmov	s15, r3
 8011592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011596:	ed97 6a03 	vldr	s12, [r7, #12]
 801159a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801166c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801159e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80115a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80115a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80115aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80115b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80115b8:	4b2a      	ldr	r3, [pc, #168]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80115ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115bc:	0a5b      	lsrs	r3, r3, #9
 80115be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115c2:	ee07 3a90 	vmov	s15, r3
 80115c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80115ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80115d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80115d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80115da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115de:	ee17 2a90 	vmov	r2, s15
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80115e6:	4b1f      	ldr	r3, [pc, #124]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80115e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115ea:	0c1b      	lsrs	r3, r3, #16
 80115ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115f0:	ee07 3a90 	vmov	s15, r3
 80115f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80115fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011600:	edd7 6a07 	vldr	s13, [r7, #28]
 8011604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801160c:	ee17 2a90 	vmov	r2, s15
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8011614:	4b13      	ldr	r3, [pc, #76]	; (8011664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011618:	0e1b      	lsrs	r3, r3, #24
 801161a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801161e:	ee07 3a90 	vmov	s15, r3
 8011622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801162a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801162e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801163a:	ee17 2a90 	vmov	r2, s15
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8011642:	e008      	b.n	8011656 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2200      	movs	r2, #0
 8011648:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2200      	movs	r2, #0
 8011654:	609a      	str	r2, [r3, #8]
}
 8011656:	bf00      	nop
 8011658:	3724      	adds	r7, #36	; 0x24
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr
 8011662:	bf00      	nop
 8011664:	58024400 	.word	0x58024400
 8011668:	03d09000 	.word	0x03d09000
 801166c:	46000000 	.word	0x46000000
 8011670:	4c742400 	.word	0x4c742400
 8011674:	4a742400 	.word	0x4a742400
 8011678:	4bb71b00 	.word	0x4bb71b00

0801167c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801167c:	b480      	push	{r7}
 801167e:	b089      	sub	sp, #36	; 0x24
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011684:	4ba0      	ldr	r3, [pc, #640]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011688:	f003 0303 	and.w	r3, r3, #3
 801168c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801168e:	4b9e      	ldr	r3, [pc, #632]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011692:	091b      	lsrs	r3, r3, #4
 8011694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011698:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801169a:	4b9b      	ldr	r3, [pc, #620]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801169e:	f003 0301 	and.w	r3, r3, #1
 80116a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80116a4:	4b98      	ldr	r3, [pc, #608]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80116a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116a8:	08db      	lsrs	r3, r3, #3
 80116aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80116ae:	693a      	ldr	r2, [r7, #16]
 80116b0:	fb02 f303 	mul.w	r3, r2, r3
 80116b4:	ee07 3a90 	vmov	s15, r3
 80116b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	f000 8111 	beq.w	80118ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80116c8:	69bb      	ldr	r3, [r7, #24]
 80116ca:	2b02      	cmp	r3, #2
 80116cc:	f000 8083 	beq.w	80117d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	2b02      	cmp	r3, #2
 80116d4:	f200 80a1 	bhi.w	801181a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80116d8:	69bb      	ldr	r3, [r7, #24]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d003      	beq.n	80116e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80116de:	69bb      	ldr	r3, [r7, #24]
 80116e0:	2b01      	cmp	r3, #1
 80116e2:	d056      	beq.n	8011792 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80116e4:	e099      	b.n	801181a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116e6:	4b88      	ldr	r3, [pc, #544]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	f003 0320 	and.w	r3, r3, #32
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d02d      	beq.n	801174e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80116f2:	4b85      	ldr	r3, [pc, #532]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	08db      	lsrs	r3, r3, #3
 80116f8:	f003 0303 	and.w	r3, r3, #3
 80116fc:	4a83      	ldr	r2, [pc, #524]	; (801190c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80116fe:	fa22 f303 	lsr.w	r3, r2, r3
 8011702:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	ee07 3a90 	vmov	s15, r3
 801170a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	ee07 3a90 	vmov	s15, r3
 8011714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801171c:	4b7a      	ldr	r3, [pc, #488]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011724:	ee07 3a90 	vmov	s15, r3
 8011728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801172c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011730:	eddf 5a77 	vldr	s11, [pc, #476]	; 8011910 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011734:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011738:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801173c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011740:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011748:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801174c:	e087      	b.n	801185e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801174e:	697b      	ldr	r3, [r7, #20]
 8011750:	ee07 3a90 	vmov	s15, r3
 8011754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011758:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011914 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801175c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011760:	4b69      	ldr	r3, [pc, #420]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011768:	ee07 3a90 	vmov	s15, r3
 801176c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011770:	ed97 6a03 	vldr	s12, [r7, #12]
 8011774:	eddf 5a66 	vldr	s11, [pc, #408]	; 8011910 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011778:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801177c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011780:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011788:	ee67 7a27 	vmul.f32	s15, s14, s15
 801178c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011790:	e065      	b.n	801185e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	ee07 3a90 	vmov	s15, r3
 8011798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801179c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011918 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80117a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80117a4:	4b58      	ldr	r3, [pc, #352]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80117a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117ac:	ee07 3a90 	vmov	s15, r3
 80117b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80117b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80117b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8011910 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80117bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80117c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80117c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80117c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80117cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80117d4:	e043      	b.n	801185e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	ee07 3a90 	vmov	s15, r3
 80117dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80117e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801191c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80117e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80117e8:	4b47      	ldr	r3, [pc, #284]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80117ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117f0:	ee07 3a90 	vmov	s15, r3
 80117f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80117f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80117fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011910 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011800:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011804:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011808:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801180c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011814:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011818:	e021      	b.n	801185e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	ee07 3a90 	vmov	s15, r3
 8011820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011824:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011914 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801182c:	4b36      	ldr	r3, [pc, #216]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011834:	ee07 3a90 	vmov	s15, r3
 8011838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801183c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011840:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011910 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011844:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801184c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011858:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801185c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801185e:	4b2a      	ldr	r3, [pc, #168]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011862:	0a5b      	lsrs	r3, r3, #9
 8011864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011868:	ee07 3a90 	vmov	s15, r3
 801186c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011874:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011878:	edd7 6a07 	vldr	s13, [r7, #28]
 801187c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011884:	ee17 2a90 	vmov	r2, s15
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801188c:	4b1e      	ldr	r3, [pc, #120]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011890:	0c1b      	lsrs	r3, r3, #16
 8011892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011896:	ee07 3a90 	vmov	s15, r3
 801189a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801189e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80118a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80118a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80118aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80118ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80118b2:	ee17 2a90 	vmov	r2, s15
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80118ba:	4b13      	ldr	r3, [pc, #76]	; (8011908 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80118bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118be:	0e1b      	lsrs	r3, r3, #24
 80118c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118c4:	ee07 3a90 	vmov	s15, r3
 80118c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80118d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80118d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80118d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80118dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80118e0:	ee17 2a90 	vmov	r2, s15
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80118e8:	e008      	b.n	80118fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2200      	movs	r2, #0
 80118ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2200      	movs	r2, #0
 80118f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2200      	movs	r2, #0
 80118fa:	609a      	str	r2, [r3, #8]
}
 80118fc:	bf00      	nop
 80118fe:	3724      	adds	r7, #36	; 0x24
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr
 8011908:	58024400 	.word	0x58024400
 801190c:	03d09000 	.word	0x03d09000
 8011910:	46000000 	.word	0x46000000
 8011914:	4c742400 	.word	0x4c742400
 8011918:	4a742400 	.word	0x4a742400
 801191c:	4bb71b00 	.word	0x4bb71b00

08011920 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b084      	sub	sp, #16
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801192a:	2300      	movs	r3, #0
 801192c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801192e:	4b53      	ldr	r3, [pc, #332]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011932:	f003 0303 	and.w	r3, r3, #3
 8011936:	2b03      	cmp	r3, #3
 8011938:	d101      	bne.n	801193e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801193a:	2301      	movs	r3, #1
 801193c:	e099      	b.n	8011a72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801193e:	4b4f      	ldr	r3, [pc, #316]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	4a4e      	ldr	r2, [pc, #312]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011944:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801194a:	f7f5 f9e7 	bl	8006d1c <HAL_GetTick>
 801194e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011950:	e008      	b.n	8011964 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011952:	f7f5 f9e3 	bl	8006d1c <HAL_GetTick>
 8011956:	4602      	mov	r2, r0
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	1ad3      	subs	r3, r2, r3
 801195c:	2b02      	cmp	r3, #2
 801195e:	d901      	bls.n	8011964 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011960:	2303      	movs	r3, #3
 8011962:	e086      	b.n	8011a72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011964:	4b45      	ldr	r3, [pc, #276]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801196c:	2b00      	cmp	r3, #0
 801196e:	d1f0      	bne.n	8011952 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011970:	4b42      	ldr	r3, [pc, #264]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011974:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	031b      	lsls	r3, r3, #12
 801197e:	493f      	ldr	r1, [pc, #252]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011980:	4313      	orrs	r3, r2
 8011982:	628b      	str	r3, [r1, #40]	; 0x28
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	3b01      	subs	r3, #1
 801198a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	689b      	ldr	r3, [r3, #8]
 8011992:	3b01      	subs	r3, #1
 8011994:	025b      	lsls	r3, r3, #9
 8011996:	b29b      	uxth	r3, r3
 8011998:	431a      	orrs	r2, r3
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	68db      	ldr	r3, [r3, #12]
 801199e:	3b01      	subs	r3, #1
 80119a0:	041b      	lsls	r3, r3, #16
 80119a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80119a6:	431a      	orrs	r2, r3
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	691b      	ldr	r3, [r3, #16]
 80119ac:	3b01      	subs	r3, #1
 80119ae:	061b      	lsls	r3, r3, #24
 80119b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80119b4:	4931      	ldr	r1, [pc, #196]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 80119b6:	4313      	orrs	r3, r2
 80119b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80119ba:	4b30      	ldr	r3, [pc, #192]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 80119bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	695b      	ldr	r3, [r3, #20]
 80119c6:	492d      	ldr	r1, [pc, #180]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 80119c8:	4313      	orrs	r3, r2
 80119ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80119cc:	4b2b      	ldr	r3, [pc, #172]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 80119ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119d0:	f023 0220 	bic.w	r2, r3, #32
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	699b      	ldr	r3, [r3, #24]
 80119d8:	4928      	ldr	r1, [pc, #160]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 80119da:	4313      	orrs	r3, r2
 80119dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80119de:	4b27      	ldr	r3, [pc, #156]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 80119e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e2:	4a26      	ldr	r2, [pc, #152]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 80119e4:	f023 0310 	bic.w	r3, r3, #16
 80119e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80119ea:	4b24      	ldr	r3, [pc, #144]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 80119ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80119ee:	4b24      	ldr	r3, [pc, #144]	; (8011a80 <RCCEx_PLL2_Config+0x160>)
 80119f0:	4013      	ands	r3, r2
 80119f2:	687a      	ldr	r2, [r7, #4]
 80119f4:	69d2      	ldr	r2, [r2, #28]
 80119f6:	00d2      	lsls	r2, r2, #3
 80119f8:	4920      	ldr	r1, [pc, #128]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 80119fa:	4313      	orrs	r3, r2
 80119fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80119fe:	4b1f      	ldr	r3, [pc, #124]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a02:	4a1e      	ldr	r2, [pc, #120]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011a04:	f043 0310 	orr.w	r3, r3, #16
 8011a08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d106      	bne.n	8011a1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011a10:	4b1a      	ldr	r3, [pc, #104]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a14:	4a19      	ldr	r2, [pc, #100]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011a16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011a1c:	e00f      	b.n	8011a3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	2b01      	cmp	r3, #1
 8011a22:	d106      	bne.n	8011a32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011a24:	4b15      	ldr	r3, [pc, #84]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a28:	4a14      	ldr	r2, [pc, #80]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011a2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011a30:	e005      	b.n	8011a3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011a32:	4b12      	ldr	r3, [pc, #72]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a36:	4a11      	ldr	r2, [pc, #68]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011a38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011a3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011a3e:	4b0f      	ldr	r3, [pc, #60]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	4a0e      	ldr	r2, [pc, #56]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011a44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011a4a:	f7f5 f967 	bl	8006d1c <HAL_GetTick>
 8011a4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011a50:	e008      	b.n	8011a64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011a52:	f7f5 f963 	bl	8006d1c <HAL_GetTick>
 8011a56:	4602      	mov	r2, r0
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	1ad3      	subs	r3, r2, r3
 8011a5c:	2b02      	cmp	r3, #2
 8011a5e:	d901      	bls.n	8011a64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011a60:	2303      	movs	r3, #3
 8011a62:	e006      	b.n	8011a72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011a64:	4b05      	ldr	r3, [pc, #20]	; (8011a7c <RCCEx_PLL2_Config+0x15c>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d0f0      	beq.n	8011a52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3710      	adds	r7, #16
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	58024400 	.word	0x58024400
 8011a80:	ffff0007 	.word	0xffff0007

08011a84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b084      	sub	sp, #16
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011a92:	4b53      	ldr	r3, [pc, #332]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a96:	f003 0303 	and.w	r3, r3, #3
 8011a9a:	2b03      	cmp	r3, #3
 8011a9c:	d101      	bne.n	8011aa2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	e099      	b.n	8011bd6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8011aa2:	4b4f      	ldr	r3, [pc, #316]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	4a4e      	ldr	r2, [pc, #312]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011aae:	f7f5 f935 	bl	8006d1c <HAL_GetTick>
 8011ab2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011ab4:	e008      	b.n	8011ac8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011ab6:	f7f5 f931 	bl	8006d1c <HAL_GetTick>
 8011aba:	4602      	mov	r2, r0
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	1ad3      	subs	r3, r2, r3
 8011ac0:	2b02      	cmp	r3, #2
 8011ac2:	d901      	bls.n	8011ac8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011ac4:	2303      	movs	r3, #3
 8011ac6:	e086      	b.n	8011bd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011ac8:	4b45      	ldr	r3, [pc, #276]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d1f0      	bne.n	8011ab6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011ad4:	4b42      	ldr	r3, [pc, #264]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ad8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	051b      	lsls	r3, r3, #20
 8011ae2:	493f      	ldr	r1, [pc, #252]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011ae4:	4313      	orrs	r3, r2
 8011ae6:	628b      	str	r3, [r1, #40]	; 0x28
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	685b      	ldr	r3, [r3, #4]
 8011aec:	3b01      	subs	r3, #1
 8011aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	689b      	ldr	r3, [r3, #8]
 8011af6:	3b01      	subs	r3, #1
 8011af8:	025b      	lsls	r3, r3, #9
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	431a      	orrs	r2, r3
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	68db      	ldr	r3, [r3, #12]
 8011b02:	3b01      	subs	r3, #1
 8011b04:	041b      	lsls	r3, r3, #16
 8011b06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011b0a:	431a      	orrs	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	691b      	ldr	r3, [r3, #16]
 8011b10:	3b01      	subs	r3, #1
 8011b12:	061b      	lsls	r3, r3, #24
 8011b14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011b18:	4931      	ldr	r1, [pc, #196]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b1a:	4313      	orrs	r3, r2
 8011b1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011b1e:	4b30      	ldr	r3, [pc, #192]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	695b      	ldr	r3, [r3, #20]
 8011b2a:	492d      	ldr	r1, [pc, #180]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b2c:	4313      	orrs	r3, r2
 8011b2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011b30:	4b2b      	ldr	r3, [pc, #172]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	699b      	ldr	r3, [r3, #24]
 8011b3c:	4928      	ldr	r1, [pc, #160]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b3e:	4313      	orrs	r3, r2
 8011b40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011b42:	4b27      	ldr	r3, [pc, #156]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b46:	4a26      	ldr	r2, [pc, #152]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011b4e:	4b24      	ldr	r3, [pc, #144]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b52:	4b24      	ldr	r3, [pc, #144]	; (8011be4 <RCCEx_PLL3_Config+0x160>)
 8011b54:	4013      	ands	r3, r2
 8011b56:	687a      	ldr	r2, [r7, #4]
 8011b58:	69d2      	ldr	r2, [r2, #28]
 8011b5a:	00d2      	lsls	r2, r2, #3
 8011b5c:	4920      	ldr	r1, [pc, #128]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b5e:	4313      	orrs	r3, r2
 8011b60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011b62:	4b1f      	ldr	r3, [pc, #124]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b66:	4a1e      	ldr	r2, [pc, #120]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d106      	bne.n	8011b82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011b74:	4b1a      	ldr	r3, [pc, #104]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b78:	4a19      	ldr	r2, [pc, #100]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011b7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011b80:	e00f      	b.n	8011ba2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	2b01      	cmp	r3, #1
 8011b86:	d106      	bne.n	8011b96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011b88:	4b15      	ldr	r3, [pc, #84]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b8c:	4a14      	ldr	r2, [pc, #80]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011b92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011b94:	e005      	b.n	8011ba2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011b96:	4b12      	ldr	r3, [pc, #72]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b9a:	4a11      	ldr	r2, [pc, #68]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011b9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8011ba2:	4b0f      	ldr	r3, [pc, #60]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	4a0e      	ldr	r2, [pc, #56]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011bae:	f7f5 f8b5 	bl	8006d1c <HAL_GetTick>
 8011bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011bb4:	e008      	b.n	8011bc8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011bb6:	f7f5 f8b1 	bl	8006d1c <HAL_GetTick>
 8011bba:	4602      	mov	r2, r0
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	1ad3      	subs	r3, r2, r3
 8011bc0:	2b02      	cmp	r3, #2
 8011bc2:	d901      	bls.n	8011bc8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011bc4:	2303      	movs	r3, #3
 8011bc6:	e006      	b.n	8011bd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011bc8:	4b05      	ldr	r3, [pc, #20]	; (8011be0 <RCCEx_PLL3_Config+0x15c>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d0f0      	beq.n	8011bb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3710      	adds	r7, #16
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	58024400 	.word	0x58024400
 8011be4:	ffff0007 	.word	0xffff0007

08011be8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b084      	sub	sp, #16
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d074      	beq.n	8011ce4 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8011c00:	b2db      	uxtb	r3, r3
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d106      	bne.n	8011c14 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f7f4 fc86 	bl	8006520 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2202      	movs	r2, #2
 8011c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	68db      	ldr	r3, [r3, #12]
 8011c22:	f003 0310 	and.w	r3, r3, #16
 8011c26:	2b10      	cmp	r3, #16
 8011c28:	d053      	beq.n	8011cd2 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	22ca      	movs	r2, #202	; 0xca
 8011c30:	625a      	str	r2, [r3, #36]	; 0x24
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	2253      	movs	r2, #83	; 0x53
 8011c38:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f000 fa4e 	bl	80120dc <RTC_EnterInitMode>
 8011c40:	4603      	mov	r3, r0
 8011c42:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011c44:	7bfb      	ldrb	r3, [r7, #15]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d124      	bne.n	8011c94 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	6999      	ldr	r1, [r3, #24]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681a      	ldr	r2, [r3, #0]
 8011c54:	4b26      	ldr	r3, [pc, #152]	; (8011cf0 <HAL_RTC_Init+0x108>)
 8011c56:	400b      	ands	r3, r1
 8011c58:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	6999      	ldr	r1, [r3, #24]
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	685a      	ldr	r2, [r3, #4]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	691b      	ldr	r3, [r3, #16]
 8011c68:	431a      	orrs	r2, r3
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	699b      	ldr	r3, [r3, #24]
 8011c6e:	431a      	orrs	r2, r3
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	430a      	orrs	r2, r1
 8011c76:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	689b      	ldr	r3, [r3, #8]
 8011c7c:	0419      	lsls	r1, r3, #16
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	68da      	ldr	r2, [r3, #12]
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	430a      	orrs	r2, r1
 8011c88:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f000 fa5c 	bl	8012148 <RTC_ExitInitMode>
 8011c90:	4603      	mov	r3, r0
 8011c92:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8011c94:	7bfb      	ldrb	r3, [r7, #15]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d116      	bne.n	8011cc8 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	699a      	ldr	r2, [r3, #24]
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8011ca8:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	6999      	ldr	r1, [r3, #24]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6a1a      	ldr	r2, [r3, #32]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	69db      	ldr	r3, [r3, #28]
 8011cb8:	431a      	orrs	r2, r3
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	695b      	ldr	r3, [r3, #20]
 8011cbe:	431a      	orrs	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	430a      	orrs	r2, r1
 8011cc6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	22ff      	movs	r2, #255	; 0xff
 8011cce:	625a      	str	r2, [r3, #36]	; 0x24
 8011cd0:	e001      	b.n	8011cd6 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011cd6:	7bfb      	ldrb	r3, [r7, #15]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d103      	bne.n	8011ce4 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2201      	movs	r2, #1
 8011ce0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 8011ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3710      	adds	r7, #16
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
 8011cee:	bf00      	nop
 8011cf0:	fb8fffbf 	.word	0xfb8fffbf

08011cf4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011cf4:	b590      	push	{r4, r7, lr}
 8011cf6:	b087      	sub	sp, #28
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d101      	bne.n	8011d0e <HAL_RTC_SetTime+0x1a>
 8011d0a:	2302      	movs	r3, #2
 8011d0c:	e089      	b.n	8011e22 <HAL_RTC_SetTime+0x12e>
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2201      	movs	r2, #1
 8011d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	2202      	movs	r2, #2
 8011d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	22ca      	movs	r2, #202	; 0xca
 8011d24:	625a      	str	r2, [r3, #36]	; 0x24
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	2253      	movs	r2, #83	; 0x53
 8011d2c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011d2e:	68f8      	ldr	r0, [r7, #12]
 8011d30:	f000 f9d4 	bl	80120dc <RTC_EnterInitMode>
 8011d34:	4603      	mov	r3, r0
 8011d36:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011d38:	7cfb      	ldrb	r3, [r7, #19]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d161      	bne.n	8011e02 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d126      	bne.n	8011d92 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	699b      	ldr	r3, [r3, #24]
 8011d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d102      	bne.n	8011d58 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	2200      	movs	r2, #0
 8011d56:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	781b      	ldrb	r3, [r3, #0]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f000 fa31 	bl	80121c4 <RTC_ByteToBcd2>
 8011d62:	4603      	mov	r3, r0
 8011d64:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	785b      	ldrb	r3, [r3, #1]
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f000 fa2a 	bl	80121c4 <RTC_ByteToBcd2>
 8011d70:	4603      	mov	r3, r0
 8011d72:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011d74:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	789b      	ldrb	r3, [r3, #2]
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f000 fa22 	bl	80121c4 <RTC_ByteToBcd2>
 8011d80:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011d82:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	78db      	ldrb	r3, [r3, #3]
 8011d8a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	617b      	str	r3, [r7, #20]
 8011d90:	e018      	b.n	8011dc4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	699b      	ldr	r3, [r3, #24]
 8011d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d102      	bne.n	8011da6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	2200      	movs	r2, #0
 8011da4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	785b      	ldrb	r3, [r3, #1]
 8011db0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011db2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011db4:	68ba      	ldr	r2, [r7, #8]
 8011db6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011db8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	78db      	ldrb	r3, [r3, #3]
 8011dbe:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011dc0:	4313      	orrs	r3, r2
 8011dc2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	681a      	ldr	r2, [r3, #0]
 8011dc8:	6979      	ldr	r1, [r7, #20]
 8011dca:	4b18      	ldr	r3, [pc, #96]	; (8011e2c <HAL_RTC_SetTime+0x138>)
 8011dcc:	400b      	ands	r3, r1
 8011dce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	699a      	ldr	r2, [r3, #24]
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011dde:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	6999      	ldr	r1, [r3, #24]
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	68da      	ldr	r2, [r3, #12]
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	691b      	ldr	r3, [r3, #16]
 8011dee:	431a      	orrs	r2, r3
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	430a      	orrs	r2, r1
 8011df6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011df8:	68f8      	ldr	r0, [r7, #12]
 8011dfa:	f000 f9a5 	bl	8012148 <RTC_ExitInitMode>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	22ff      	movs	r2, #255	; 0xff
 8011e08:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011e0a:	7cfb      	ldrb	r3, [r7, #19]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d103      	bne.n	8011e18 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	2201      	movs	r2, #1
 8011e14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8011e20:	7cfb      	ldrb	r3, [r7, #19]
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	371c      	adds	r7, #28
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd90      	pop	{r4, r7, pc}
 8011e2a:	bf00      	nop
 8011e2c:	007f7f7f 	.word	0x007f7f7f

08011e30 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b086      	sub	sp, #24
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	689a      	ldr	r2, [r3, #8]
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	691b      	ldr	r3, [r3, #16]
 8011e4c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	4b22      	ldr	r3, [pc, #136]	; (8011ee4 <HAL_RTC_GetTime+0xb4>)
 8011e5c:	4013      	ands	r3, r2
 8011e5e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	0c1b      	lsrs	r3, r3, #16
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011e6a:	b2da      	uxtb	r2, r3
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	0a1b      	lsrs	r3, r3, #8
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e7a:	b2da      	uxtb	r2, r3
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e88:	b2da      	uxtb	r2, r3
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	0d9b      	lsrs	r3, r3, #22
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	f003 0301 	and.w	r3, r3, #1
 8011e98:	b2da      	uxtb	r2, r3
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d11a      	bne.n	8011eda <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011ea4:	68bb      	ldr	r3, [r7, #8]
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f000 f9ab 	bl	8012204 <RTC_Bcd2ToByte>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	785b      	ldrb	r3, [r3, #1]
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f000 f9a2 	bl	8012204 <RTC_Bcd2ToByte>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	789b      	ldrb	r3, [r3, #2]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f000 f999 	bl	8012204 <RTC_Bcd2ToByte>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011eda:	2300      	movs	r3, #0
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3718      	adds	r7, #24
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	007f7f7f 	.word	0x007f7f7f

08011ee8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011ee8:	b590      	push	{r4, r7, lr}
 8011eea:	b087      	sub	sp, #28
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	60f8      	str	r0, [r7, #12]
 8011ef0:	60b9      	str	r1, [r7, #8]
 8011ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011efa:	2b01      	cmp	r3, #1
 8011efc:	d101      	bne.n	8011f02 <HAL_RTC_SetDate+0x1a>
 8011efe:	2302      	movs	r3, #2
 8011f00:	e073      	b.n	8011fea <HAL_RTC_SetDate+0x102>
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2201      	movs	r2, #1
 8011f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	2202      	movs	r2, #2
 8011f0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d10e      	bne.n	8011f36 <HAL_RTC_SetDate+0x4e>
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	785b      	ldrb	r3, [r3, #1]
 8011f1c:	f003 0310 	and.w	r3, r3, #16
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d008      	beq.n	8011f36 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	785b      	ldrb	r3, [r3, #1]
 8011f28:	f023 0310 	bic.w	r3, r3, #16
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	330a      	adds	r3, #10
 8011f30:	b2da      	uxtb	r2, r3
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d11c      	bne.n	8011f76 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	78db      	ldrb	r3, [r3, #3]
 8011f40:	4618      	mov	r0, r3
 8011f42:	f000 f93f 	bl	80121c4 <RTC_ByteToBcd2>
 8011f46:	4603      	mov	r3, r0
 8011f48:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	785b      	ldrb	r3, [r3, #1]
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f000 f938 	bl	80121c4 <RTC_ByteToBcd2>
 8011f54:	4603      	mov	r3, r0
 8011f56:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011f58:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	789b      	ldrb	r3, [r3, #2]
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f000 f930 	bl	80121c4 <RTC_ByteToBcd2>
 8011f64:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011f66:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	781b      	ldrb	r3, [r3, #0]
 8011f6e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011f70:	4313      	orrs	r3, r2
 8011f72:	617b      	str	r3, [r7, #20]
 8011f74:	e00e      	b.n	8011f94 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	78db      	ldrb	r3, [r3, #3]
 8011f7a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	785b      	ldrb	r3, [r3, #1]
 8011f80:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011f82:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8011f84:	68ba      	ldr	r2, [r7, #8]
 8011f86:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011f88:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011f90:	4313      	orrs	r3, r2
 8011f92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	22ca      	movs	r2, #202	; 0xca
 8011f9a:	625a      	str	r2, [r3, #36]	; 0x24
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	2253      	movs	r2, #83	; 0x53
 8011fa2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011fa4:	68f8      	ldr	r0, [r7, #12]
 8011fa6:	f000 f899 	bl	80120dc <RTC_EnterInitMode>
 8011faa:	4603      	mov	r3, r0
 8011fac:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011fae:	7cfb      	ldrb	r3, [r7, #19]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d10a      	bne.n	8011fca <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681a      	ldr	r2, [r3, #0]
 8011fb8:	6979      	ldr	r1, [r7, #20]
 8011fba:	4b0e      	ldr	r3, [pc, #56]	; (8011ff4 <HAL_RTC_SetDate+0x10c>)
 8011fbc:	400b      	ands	r3, r1
 8011fbe:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011fc0:	68f8      	ldr	r0, [r7, #12]
 8011fc2:	f000 f8c1 	bl	8012148 <RTC_ExitInitMode>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	22ff      	movs	r2, #255	; 0xff
 8011fd0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011fd2:	7cfb      	ldrb	r3, [r7, #19]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d103      	bne.n	8011fe0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	2201      	movs	r2, #1
 8011fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8011fe8:	7cfb      	ldrb	r3, [r7, #19]


}
 8011fea:	4618      	mov	r0, r3
 8011fec:	371c      	adds	r7, #28
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd90      	pop	{r4, r7, pc}
 8011ff2:	bf00      	nop
 8011ff4:	00ffff3f 	.word	0x00ffff3f

08011ff8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b086      	sub	sp, #24
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	60f8      	str	r0, [r7, #12]
 8012000:	60b9      	str	r1, [r7, #8]
 8012002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	685a      	ldr	r2, [r3, #4]
 801200a:	4b21      	ldr	r3, [pc, #132]	; (8012090 <HAL_RTC_GetDate+0x98>)
 801200c:	4013      	ands	r3, r2
 801200e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	0c1b      	lsrs	r3, r3, #16
 8012014:	b2da      	uxtb	r2, r3
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	0a1b      	lsrs	r3, r3, #8
 801201e:	b2db      	uxtb	r3, r3
 8012020:	f003 031f 	and.w	r3, r3, #31
 8012024:	b2da      	uxtb	r2, r3
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	b2db      	uxtb	r3, r3
 801202e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012032:	b2da      	uxtb	r2, r3
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	0b5b      	lsrs	r3, r3, #13
 801203c:	b2db      	uxtb	r3, r3
 801203e:	f003 0307 	and.w	r3, r3, #7
 8012042:	b2da      	uxtb	r2, r3
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d11a      	bne.n	8012084 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	78db      	ldrb	r3, [r3, #3]
 8012052:	4618      	mov	r0, r3
 8012054:	f000 f8d6 	bl	8012204 <RTC_Bcd2ToByte>
 8012058:	4603      	mov	r3, r0
 801205a:	461a      	mov	r2, r3
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	785b      	ldrb	r3, [r3, #1]
 8012064:	4618      	mov	r0, r3
 8012066:	f000 f8cd 	bl	8012204 <RTC_Bcd2ToByte>
 801206a:	4603      	mov	r3, r0
 801206c:	461a      	mov	r2, r3
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	789b      	ldrb	r3, [r3, #2]
 8012076:	4618      	mov	r0, r3
 8012078:	f000 f8c4 	bl	8012204 <RTC_Bcd2ToByte>
 801207c:	4603      	mov	r3, r0
 801207e:	461a      	mov	r2, r3
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8012084:	2300      	movs	r3, #0
}
 8012086:	4618      	mov	r0, r3
 8012088:	3718      	adds	r7, #24
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}
 801208e:	bf00      	nop
 8012090:	00ffff3f 	.word	0x00ffff3f

08012094 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	4a0d      	ldr	r2, [pc, #52]	; (80120d8 <HAL_RTC_WaitForSynchro+0x44>)
 80120a2:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80120a4:	f7f4 fe3a 	bl	8006d1c <HAL_GetTick>
 80120a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80120aa:	e009      	b.n	80120c0 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80120ac:	f7f4 fe36 	bl	8006d1c <HAL_GetTick>
 80120b0:	4602      	mov	r2, r0
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	1ad3      	subs	r3, r2, r3
 80120b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80120ba:	d901      	bls.n	80120c0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80120bc:	2303      	movs	r3, #3
 80120be:	e007      	b.n	80120d0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	f003 0320 	and.w	r3, r3, #32
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d0ee      	beq.n	80120ac <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80120ce:	2300      	movs	r3, #0
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3710      	adds	r7, #16
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	0001005f 	.word	0x0001005f

080120dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b084      	sub	sp, #16
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80120e4:	2300      	movs	r3, #0
 80120e6:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	68db      	ldr	r3, [r3, #12]
 80120ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d123      	bne.n	801213e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	68da      	ldr	r2, [r3, #12]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012104:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8012106:	f7f4 fe09 	bl	8006d1c <HAL_GetTick>
 801210a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801210c:	e00d      	b.n	801212a <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801210e:	f7f4 fe05 	bl	8006d1c <HAL_GetTick>
 8012112:	4602      	mov	r2, r0
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	1ad3      	subs	r3, r2, r3
 8012118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801211c:	d905      	bls.n	801212a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 801211e:	2303      	movs	r3, #3
 8012120:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2203      	movs	r2, #3
 8012126:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	68db      	ldr	r3, [r3, #12]
 8012130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012134:	2b00      	cmp	r3, #0
 8012136:	d102      	bne.n	801213e <RTC_EnterInitMode+0x62>
 8012138:	7bfb      	ldrb	r3, [r7, #15]
 801213a:	2b03      	cmp	r3, #3
 801213c:	d1e7      	bne.n	801210e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 801213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012140:	4618      	mov	r0, r3
 8012142:	3710      	adds	r7, #16
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012150:	2300      	movs	r3, #0
 8012152:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8012154:	4b1a      	ldr	r3, [pc, #104]	; (80121c0 <RTC_ExitInitMode+0x78>)
 8012156:	68db      	ldr	r3, [r3, #12]
 8012158:	4a19      	ldr	r2, [pc, #100]	; (80121c0 <RTC_ExitInitMode+0x78>)
 801215a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801215e:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8012160:	4b17      	ldr	r3, [pc, #92]	; (80121c0 <RTC_ExitInitMode+0x78>)
 8012162:	699b      	ldr	r3, [r3, #24]
 8012164:	f003 0320 	and.w	r3, r3, #32
 8012168:	2b00      	cmp	r3, #0
 801216a:	d10c      	bne.n	8012186 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7ff ff91 	bl	8012094 <HAL_RTC_WaitForSynchro>
 8012172:	4603      	mov	r3, r0
 8012174:	2b00      	cmp	r3, #0
 8012176:	d01e      	beq.n	80121b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2203      	movs	r2, #3
 801217c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8012180:	2303      	movs	r3, #3
 8012182:	73fb      	strb	r3, [r7, #15]
 8012184:	e017      	b.n	80121b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012186:	4b0e      	ldr	r3, [pc, #56]	; (80121c0 <RTC_ExitInitMode+0x78>)
 8012188:	699b      	ldr	r3, [r3, #24]
 801218a:	4a0d      	ldr	r2, [pc, #52]	; (80121c0 <RTC_ExitInitMode+0x78>)
 801218c:	f023 0320 	bic.w	r3, r3, #32
 8012190:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f7ff ff7e 	bl	8012094 <HAL_RTC_WaitForSynchro>
 8012198:	4603      	mov	r3, r0
 801219a:	2b00      	cmp	r3, #0
 801219c:	d005      	beq.n	80121aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2203      	movs	r2, #3
 80121a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80121a6:	2303      	movs	r3, #3
 80121a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80121aa:	4b05      	ldr	r3, [pc, #20]	; (80121c0 <RTC_ExitInitMode+0x78>)
 80121ac:	699b      	ldr	r3, [r3, #24]
 80121ae:	4a04      	ldr	r2, [pc, #16]	; (80121c0 <RTC_ExitInitMode+0x78>)
 80121b0:	f043 0320 	orr.w	r3, r3, #32
 80121b4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80121b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3710      	adds	r7, #16
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	58004000 	.word	0x58004000

080121c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80121c4:	b480      	push	{r7}
 80121c6:	b085      	sub	sp, #20
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	4603      	mov	r3, r0
 80121cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80121ce:	2300      	movs	r3, #0
 80121d0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80121d2:	79fb      	ldrb	r3, [r7, #7]
 80121d4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80121d6:	e005      	b.n	80121e4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	3301      	adds	r3, #1
 80121dc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80121de:	7afb      	ldrb	r3, [r7, #11]
 80121e0:	3b0a      	subs	r3, #10
 80121e2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80121e4:	7afb      	ldrb	r3, [r7, #11]
 80121e6:	2b09      	cmp	r3, #9
 80121e8:	d8f6      	bhi.n	80121d8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	b2db      	uxtb	r3, r3
 80121ee:	011b      	lsls	r3, r3, #4
 80121f0:	b2da      	uxtb	r2, r3
 80121f2:	7afb      	ldrb	r3, [r7, #11]
 80121f4:	4313      	orrs	r3, r2
 80121f6:	b2db      	uxtb	r3, r3
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3714      	adds	r7, #20
 80121fc:	46bd      	mov	sp, r7
 80121fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012202:	4770      	bx	lr

08012204 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012204:	b480      	push	{r7}
 8012206:	b085      	sub	sp, #20
 8012208:	af00      	add	r7, sp, #0
 801220a:	4603      	mov	r3, r0
 801220c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801220e:	79fb      	ldrb	r3, [r7, #7]
 8012210:	091b      	lsrs	r3, r3, #4
 8012212:	b2db      	uxtb	r3, r3
 8012214:	461a      	mov	r2, r3
 8012216:	0092      	lsls	r2, r2, #2
 8012218:	4413      	add	r3, r2
 801221a:	005b      	lsls	r3, r3, #1
 801221c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801221e:	79fb      	ldrb	r3, [r7, #7]
 8012220:	f003 030f 	and.w	r3, r3, #15
 8012224:	b2da      	uxtb	r2, r3
 8012226:	7bfb      	ldrb	r3, [r7, #15]
 8012228:	4413      	add	r3, r2
 801222a:	b2db      	uxtb	r3, r3
}
 801222c:	4618      	mov	r0, r3
 801222e:	3714      	adds	r7, #20
 8012230:	46bd      	mov	sp, r7
 8012232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012236:	4770      	bx	lr

08012238 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b086      	sub	sp, #24
 801223c:	af00      	add	r7, sp, #0
 801223e:	60f8      	str	r0, [r7, #12]
 8012240:	60b9      	str	r1, [r7, #8]
 8012242:	607a      	str	r2, [r7, #4]
 8012244:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	2b02      	cmp	r3, #2
 801224a:	d904      	bls.n	8012256 <HAL_SAI_InitProtocol+0x1e>
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	3b03      	subs	r3, #3
 8012250:	2b01      	cmp	r3, #1
 8012252:	d812      	bhi.n	801227a <HAL_SAI_InitProtocol+0x42>
 8012254:	e008      	b.n	8012268 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	687a      	ldr	r2, [r7, #4]
 801225a:	68b9      	ldr	r1, [r7, #8]
 801225c:	68f8      	ldr	r0, [r7, #12]
 801225e:	f000 fd2d 	bl	8012cbc <SAI_InitI2S>
 8012262:	4603      	mov	r3, r0
 8012264:	75fb      	strb	r3, [r7, #23]
      break;
 8012266:	e00b      	b.n	8012280 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	687a      	ldr	r2, [r7, #4]
 801226c:	68b9      	ldr	r1, [r7, #8]
 801226e:	68f8      	ldr	r0, [r7, #12]
 8012270:	f000 fdd6 	bl	8012e20 <SAI_InitPCM>
 8012274:	4603      	mov	r3, r0
 8012276:	75fb      	strb	r3, [r7, #23]
      break;
 8012278:	e002      	b.n	8012280 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 801227a:	2301      	movs	r3, #1
 801227c:	75fb      	strb	r3, [r7, #23]
      break;
 801227e:	bf00      	nop
  }

  if (status == HAL_OK)
 8012280:	7dfb      	ldrb	r3, [r7, #23]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d104      	bne.n	8012290 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8012286:	68f8      	ldr	r0, [r7, #12]
 8012288:	f000 f808 	bl	801229c <HAL_SAI_Init>
 801228c:	4603      	mov	r3, r0
 801228e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8012290:	7dfb      	ldrb	r3, [r7, #23]
}
 8012292:	4618      	mov	r0, r3
 8012294:	3718      	adds	r7, #24
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
	...

0801229c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b08a      	sub	sp, #40	; 0x28
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d101      	bne.n	80122ae <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80122aa:	2301      	movs	r3, #1
 80122ac:	e1f2      	b.n	8012694 <HAL_SAI_Init+0x3f8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80122b4:	2b01      	cmp	r3, #1
 80122b6:	d10e      	bne.n	80122d6 <HAL_SAI_Init+0x3a>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
    {
      return HAL_ERROR;
    }
#else
    if ((hsai->Instance != SAI1_Block_A) ||
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	4a94      	ldr	r2, [pc, #592]	; (8012510 <HAL_SAI_Init+0x274>)
 80122be:	4293      	cmp	r3, r2
 80122c0:	d107      	bne.n	80122d2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80122c6:	2b01      	cmp	r3, #1
 80122c8:	d103      	bne.n	80122d2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d001      	beq.n	80122d6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80122d2:	2301      	movs	r3, #1
 80122d4:	e1de      	b.n	8012694 <HAL_SAI_Init+0x3f8>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	4a8d      	ldr	r2, [pc, #564]	; (8012510 <HAL_SAI_Init+0x274>)
 80122dc:	4293      	cmp	r3, r2
 80122de:	d004      	beq.n	80122ea <HAL_SAI_Init+0x4e>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	4a8b      	ldr	r2, [pc, #556]	; (8012514 <HAL_SAI_Init+0x278>)
 80122e6:	4293      	cmp	r3, r2
 80122e8:	d102      	bne.n	80122f0 <HAL_SAI_Init+0x54>
  {
    SaiBaseAddress = SAI1;
 80122ea:	4b8b      	ldr	r3, [pc, #556]	; (8012518 <HAL_SAI_Init+0x27c>)
 80122ec:	61bb      	str	r3, [r7, #24]
 80122ee:	e00e      	b.n	801230e <HAL_SAI_Init+0x72>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	4a89      	ldr	r2, [pc, #548]	; (801251c <HAL_SAI_Init+0x280>)
 80122f6:	4293      	cmp	r3, r2
 80122f8:	d004      	beq.n	8012304 <HAL_SAI_Init+0x68>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	4a88      	ldr	r2, [pc, #544]	; (8012520 <HAL_SAI_Init+0x284>)
 8012300:	4293      	cmp	r3, r2
 8012302:	d102      	bne.n	801230a <HAL_SAI_Init+0x6e>
  {
    SaiBaseAddress = SAI2;
 8012304:	4b87      	ldr	r3, [pc, #540]	; (8012524 <HAL_SAI_Init+0x288>)
 8012306:	61bb      	str	r3, [r7, #24]
 8012308:	e001      	b.n	801230e <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 801230a:	2301      	movs	r3, #1
 801230c:	e1c2      	b.n	8012694 <HAL_SAI_Init+0x3f8>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8012314:	b2db      	uxtb	r3, r3
 8012316:	2b00      	cmp	r3, #0
 8012318:	d106      	bne.n	8012328 <HAL_SAI_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2200      	movs	r2, #0
 801231e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f7f4 f9c0 	bl	80066a8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f000 fe33 	bl	8012f94 <SAI_Disable>
 801232e:	4603      	mov	r3, r0
 8012330:	2b00      	cmp	r3, #0
 8012332:	d001      	beq.n	8012338 <HAL_SAI_Init+0x9c>
  {
    return HAL_ERROR;
 8012334:	2301      	movs	r3, #1
 8012336:	e1ad      	b.n	8012694 <HAL_SAI_Init+0x3f8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2202      	movs	r2, #2
 801233c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	68db      	ldr	r3, [r3, #12]
 8012344:	2b02      	cmp	r3, #2
 8012346:	d00c      	beq.n	8012362 <HAL_SAI_Init+0xc6>
 8012348:	2b02      	cmp	r3, #2
 801234a:	d80d      	bhi.n	8012368 <HAL_SAI_Init+0xcc>
 801234c:	2b00      	cmp	r3, #0
 801234e:	d002      	beq.n	8012356 <HAL_SAI_Init+0xba>
 8012350:	2b01      	cmp	r3, #1
 8012352:	d003      	beq.n	801235c <HAL_SAI_Init+0xc0>
 8012354:	e008      	b.n	8012368 <HAL_SAI_Init+0xcc>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8012356:	2300      	movs	r3, #0
 8012358:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801235a:	e008      	b.n	801236e <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 801235c:	2310      	movs	r3, #16
 801235e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8012360:	e005      	b.n	801236e <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8012362:	2320      	movs	r3, #32
 8012364:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8012366:	e002      	b.n	801236e <HAL_SAI_Init+0xd2>
    default:
      tmpregisterGCR = 0;
 8012368:	2300      	movs	r3, #0
 801236a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801236c:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	689b      	ldr	r3, [r3, #8]
 8012372:	2b03      	cmp	r3, #3
 8012374:	d81d      	bhi.n	80123b2 <HAL_SAI_Init+0x116>
 8012376:	a201      	add	r2, pc, #4	; (adr r2, 801237c <HAL_SAI_Init+0xe0>)
 8012378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801237c:	0801238d 	.word	0x0801238d
 8012380:	08012393 	.word	0x08012393
 8012384:	0801239b 	.word	0x0801239b
 8012388:	080123a3 	.word	0x080123a3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 801238c:	2300      	movs	r3, #0
 801238e:	61fb      	str	r3, [r7, #28]
      break;
 8012390:	e012      	b.n	80123b8 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8012392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012396:	61fb      	str	r3, [r7, #28]
      break;
 8012398:	e00e      	b.n	80123b8 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801239a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801239e:	61fb      	str	r3, [r7, #28]
      break;
 80123a0:	e00a      	b.n	80123b8 <HAL_SAI_Init+0x11c>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80123a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80123a6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80123a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123aa:	f043 0301 	orr.w	r3, r3, #1
 80123ae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80123b0:	e002      	b.n	80123b8 <HAL_SAI_Init+0x11c>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
      break;
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80123b2:	2300      	movs	r3, #0
 80123b4:	61fb      	str	r3, [r7, #28]
      break;
 80123b6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123bc:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6a1b      	ldr	r3, [r3, #32]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	f000 808a 	beq.w	80124dc <HAL_SAI_Init+0x240>
  {
    uint32_t freq = 0;
 80123c8:	2300      	movs	r3, #0
 80123ca:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	4a4f      	ldr	r2, [pc, #316]	; (8012510 <HAL_SAI_Init+0x274>)
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d004      	beq.n	80123e0 <HAL_SAI_Init+0x144>
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	4a4e      	ldr	r2, [pc, #312]	; (8012514 <HAL_SAI_Init+0x278>)
 80123dc:	4293      	cmp	r3, r2
 80123de:	d106      	bne.n	80123ee <HAL_SAI_Init+0x152>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80123e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80123e4:	f04f 0100 	mov.w	r1, #0
 80123e8:	f7fe f9b2 	bl	8010750 <HAL_RCCEx_GetPeriphCLKFreq>
 80123ec:	6178      	str	r0, [r7, #20]
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }
#else
    if (hsai->Instance == SAI2_Block_A)
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	4a4a      	ldr	r2, [pc, #296]	; (801251c <HAL_SAI_Init+0x280>)
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d106      	bne.n	8012406 <HAL_SAI_Init+0x16a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2A);
 80123f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80123fc:	f04f 0100 	mov.w	r1, #0
 8012400:	f7fe f9a6 	bl	8010750 <HAL_RCCEx_GetPeriphCLKFreq>
 8012404:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI2_Block_B)
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	4a45      	ldr	r2, [pc, #276]	; (8012520 <HAL_SAI_Init+0x284>)
 801240c:	4293      	cmp	r3, r2
 801240e:	d106      	bne.n	801241e <HAL_SAI_Init+0x182>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2B);
 8012410:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012414:	f04f 0100 	mov.w	r1, #0
 8012418:	f7fe f99a 	bl	8010750 <HAL_RCCEx_GetPeriphCLKFreq>
 801241c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	699b      	ldr	r3, [r3, #24]
 8012422:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012426:	d120      	bne.n	801246a <HAL_SAI_Init+0x1ce>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801242c:	2b04      	cmp	r3, #4
 801242e:	d102      	bne.n	8012436 <HAL_SAI_Init+0x19a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8012430:	2340      	movs	r3, #64	; 0x40
 8012432:	60fb      	str	r3, [r7, #12]
 8012434:	e00a      	b.n	801244c <HAL_SAI_Init+0x1b0>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801243a:	2b08      	cmp	r3, #8
 801243c:	d103      	bne.n	8012446 <HAL_SAI_Init+0x1aa>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 801243e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012442:	60fb      	str	r3, [r7, #12]
 8012444:	e002      	b.n	801244c <HAL_SAI_Init+0x1b0>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801244a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 801244c:	697a      	ldr	r2, [r7, #20]
 801244e:	4613      	mov	r3, r2
 8012450:	009b      	lsls	r3, r3, #2
 8012452:	4413      	add	r3, r2
 8012454:	005b      	lsls	r3, r3, #1
 8012456:	4619      	mov	r1, r3
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6a1b      	ldr	r3, [r3, #32]
 801245c:	68fa      	ldr	r2, [r7, #12]
 801245e:	fb02 f303 	mul.w	r3, r2, r3
 8012462:	fbb1 f3f3 	udiv	r3, r1, r3
 8012466:	613b      	str	r3, [r7, #16]
 8012468:	e017      	b.n	801249a <HAL_SAI_Init+0x1fe>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801246e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012472:	d101      	bne.n	8012478 <HAL_SAI_Init+0x1dc>
 8012474:	2302      	movs	r3, #2
 8012476:	e000      	b.n	801247a <HAL_SAI_Init+0x1de>
 8012478:	2301      	movs	r3, #1
 801247a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 801247c:	697a      	ldr	r2, [r7, #20]
 801247e:	4613      	mov	r3, r2
 8012480:	009b      	lsls	r3, r3, #2
 8012482:	4413      	add	r3, r2
 8012484:	005b      	lsls	r3, r3, #1
 8012486:	4619      	mov	r1, r3
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6a1b      	ldr	r3, [r3, #32]
 801248c:	68ba      	ldr	r2, [r7, #8]
 801248e:	fb02 f303 	mul.w	r3, r2, r3
 8012492:	021b      	lsls	r3, r3, #8
 8012494:	fbb1 f3f3 	udiv	r3, r1, r3
 8012498:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	4a22      	ldr	r2, [pc, #136]	; (8012528 <HAL_SAI_Init+0x28c>)
 801249e:	fba2 2303 	umull	r2, r3, r2, r3
 80124a2:	08da      	lsrs	r2, r3, #3
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80124a8:	6939      	ldr	r1, [r7, #16]
 80124aa:	4b1f      	ldr	r3, [pc, #124]	; (8012528 <HAL_SAI_Init+0x28c>)
 80124ac:	fba3 2301 	umull	r2, r3, r3, r1
 80124b0:	08da      	lsrs	r2, r3, #3
 80124b2:	4613      	mov	r3, r2
 80124b4:	009b      	lsls	r3, r3, #2
 80124b6:	4413      	add	r3, r2
 80124b8:	005b      	lsls	r3, r3, #1
 80124ba:	1aca      	subs	r2, r1, r3
 80124bc:	2a08      	cmp	r2, #8
 80124be:	d904      	bls.n	80124ca <HAL_SAI_Init+0x22e>
    {
      hsai->Init.Mckdiv += 1U;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124c4:	1c5a      	adds	r2, r3, #1
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124ce:	2b04      	cmp	r3, #4
 80124d0:	d104      	bne.n	80124dc <HAL_SAI_Init+0x240>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d6:	085a      	lsrs	r2, r3, #1
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d003      	beq.n	80124ec <HAL_SAI_Init+0x250>
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	2b02      	cmp	r3, #2
 80124ea:	d109      	bne.n	8012500 <HAL_SAI_Init+0x264>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124f0:	2b01      	cmp	r3, #1
 80124f2:	d101      	bne.n	80124f8 <HAL_SAI_Init+0x25c>
 80124f4:	2300      	movs	r3, #0
 80124f6:	e001      	b.n	80124fc <HAL_SAI_Init+0x260>
 80124f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124fc:	623b      	str	r3, [r7, #32]
 80124fe:	e017      	b.n	8012530 <HAL_SAI_Init+0x294>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012504:	2b01      	cmp	r3, #1
 8012506:	d111      	bne.n	801252c <HAL_SAI_Init+0x290>
 8012508:	f44f 7300 	mov.w	r3, #512	; 0x200
 801250c:	e00f      	b.n	801252e <HAL_SAI_Init+0x292>
 801250e:	bf00      	nop
 8012510:	40015804 	.word	0x40015804
 8012514:	40015824 	.word	0x40015824
 8012518:	40015800 	.word	0x40015800
 801251c:	40015c04 	.word	0x40015c04
 8012520:	40015c24 	.word	0x40015c24
 8012524:	40015c00 	.word	0x40015c00
 8012528:	cccccccd 	.word	0xcccccccd
 801252c:	2300      	movs	r3, #0
 801252e:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	6819      	ldr	r1, [r3, #0]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681a      	ldr	r2, [r3, #0]
 801253a:	4b58      	ldr	r3, [pc, #352]	; (801269c <HAL_SAI_Init+0x400>)
 801253c:	400b      	ands	r3, r1
 801253e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	6819      	ldr	r1, [r3, #0]
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	685a      	ldr	r2, [r3, #4]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801254e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012554:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801255a:	431a      	orrs	r2, r3
 801255c:	6a3b      	ldr	r3, [r7, #32]
 801255e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8012568:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	695b      	ldr	r3, [r3, #20]
 801256e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012574:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801257a:	051b      	lsls	r3, r3, #20
 801257c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8012582:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	691b      	ldr	r3, [r3, #16]
 8012588:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	430a      	orrs	r2, r1
 8012590:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	6859      	ldr	r1, [r3, #4]
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681a      	ldr	r2, [r3, #0]
 801259c:	4b40      	ldr	r3, [pc, #256]	; (80126a0 <HAL_SAI_Init+0x404>)
 801259e:	400b      	ands	r3, r1
 80125a0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	6859      	ldr	r1, [r3, #4]
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	69da      	ldr	r2, [r3, #28]
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125b0:	431a      	orrs	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125b6:	431a      	orrs	r2, r3
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	430a      	orrs	r2, r1
 80125be:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	6899      	ldr	r1, [r3, #8]
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681a      	ldr	r2, [r3, #0]
 80125ca:	4b36      	ldr	r3, [pc, #216]	; (80126a4 <HAL_SAI_Init+0x408>)
 80125cc:	400b      	ands	r3, r1
 80125ce:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	6899      	ldr	r1, [r3, #8]
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125da:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80125e0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80125e6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80125ec:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125f2:	3b01      	subs	r3, #1
 80125f4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80125f6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	430a      	orrs	r2, r1
 80125fe:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	68d9      	ldr	r1, [r3, #12]
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681a      	ldr	r2, [r3, #0]
 801260a:	f24f 0320 	movw	r3, #61472	; 0xf020
 801260e:	400b      	ands	r3, r1
 8012610:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	68d9      	ldr	r1, [r3, #12]
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012620:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012626:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8012628:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801262e:	3b01      	subs	r3, #1
 8012630:	021b      	lsls	r3, r3, #8
 8012632:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	430a      	orrs	r2, r1
 801263a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
#else
  if (hsai->Instance == SAI1_Block_A)
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	4a19      	ldr	r2, [pc, #100]	; (80126a8 <HAL_SAI_Init+0x40c>)
 8012642:	4293      	cmp	r3, r2
 8012644:	d119      	bne.n	801267a <HAL_SAI_Init+0x3de>
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801264a:	f023 0201 	bic.w	r2, r3, #1
 801264e:	69bb      	ldr	r3, [r7, #24]
 8012650:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012658:	2b01      	cmp	r3, #1
 801265a:	d10e      	bne.n	801267a <HAL_SAI_Init+0x3de>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012664:	3b01      	subs	r3, #1
 8012666:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8012668:	431a      	orrs	r2, r3
 801266a:	69bb      	ldr	r3, [r7, #24]
 801266c:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 801266e:	69bb      	ldr	r3, [r7, #24]
 8012670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012672:	f043 0201 	orr.w	r2, r3, #1
 8012676:	69bb      	ldr	r3, [r7, #24]
 8012678:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2200      	movs	r2, #0
 801267e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2201      	movs	r2, #1
 8012686:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2200      	movs	r2, #0
 801268e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8012692:	2300      	movs	r3, #0
}
 8012694:	4618      	mov	r0, r3
 8012696:	3728      	adds	r7, #40	; 0x28
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}
 801269c:	f005c010 	.word	0xf005c010
 80126a0:	ffff1ff0 	.word	0xffff1ff0
 80126a4:	fff88000 	.word	0xfff88000
 80126a8:	40015804 	.word	0x40015804

080126ac <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b084      	sub	sp, #16
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80126b4:	2300      	movs	r3, #0
 80126b6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80126be:	2b01      	cmp	r3, #1
 80126c0:	d101      	bne.n	80126c6 <HAL_SAI_Abort+0x1a>
 80126c2:	2302      	movs	r3, #2
 80126c4:	e07d      	b.n	80127c2 <HAL_SAI_Abort+0x116>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2201      	movs	r2, #1
 80126ca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80126d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80126dc:	d14f      	bne.n	801277e <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	681a      	ldr	r2, [r3, #0]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80126ec:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	2b12      	cmp	r3, #18
 80126f8:	d11d      	bne.n	8012736 <HAL_SAI_Abort+0x8a>
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012700:	2b00      	cmp	r3, #0
 8012702:	d018      	beq.n	8012736 <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801270a:	4618      	mov	r0, r3
 801270c:	f7f7 fb46 	bl	8009d9c <HAL_DMA_Abort>
 8012710:	4603      	mov	r3, r0
 8012712:	2b00      	cmp	r3, #0
 8012714:	d00f      	beq.n	8012736 <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801271e:	2b80      	cmp	r3, #128	; 0x80
 8012720:	d009      	beq.n	8012736 <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 8012722:	2301      	movs	r3, #1
 8012724:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801272c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 801273c:	b2db      	uxtb	r3, r3
 801273e:	2b22      	cmp	r3, #34	; 0x22
 8012740:	d11d      	bne.n	801277e <HAL_SAI_Abort+0xd2>
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012748:	2b00      	cmp	r3, #0
 801274a:	d018      	beq.n	801277e <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012752:	4618      	mov	r0, r3
 8012754:	f7f7 fb22 	bl	8009d9c <HAL_DMA_Abort>
 8012758:	4603      	mov	r3, r0
 801275a:	2b00      	cmp	r3, #0
 801275c:	d00f      	beq.n	801277e <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012766:	2b80      	cmp	r3, #128	; 0x80
 8012768:	d009      	beq.n	801277e <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 801276a:	2301      	movs	r3, #1
 801276c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012774:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	2200      	movs	r2, #0
 8012784:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	f04f 32ff 	mov.w	r2, #4294967295
 801278e:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 fbff 	bl	8012f94 <SAI_Disable>
 8012796:	4603      	mov	r3, r0
 8012798:	2b00      	cmp	r3, #0
 801279a:	d001      	beq.n	80127a0 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 801279c:	2301      	movs	r3, #1
 801279e:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	685a      	ldr	r2, [r3, #4]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	f042 0208 	orr.w	r2, r2, #8
 80127ae:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2201      	movs	r2, #1
 80127b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2200      	movs	r2, #0
 80127bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 80127c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3710      	adds	r7, #16
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
	...

080127cc <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b086      	sub	sp, #24
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	60f8      	str	r0, [r7, #12]
 80127d4:	60b9      	str	r1, [r7, #8]
 80127d6:	4613      	mov	r3, r2
 80127d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80127da:	f7f4 fa9f 	bl	8006d1c <HAL_GetTick>
 80127de:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d002      	beq.n	80127ec <HAL_SAI_Transmit_DMA+0x20>
 80127e6:	88fb      	ldrh	r3, [r7, #6]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d101      	bne.n	80127f0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80127ec:	2301      	movs	r3, #1
 80127ee:	e098      	b.n	8012922 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	f040 8091 	bne.w	8012920 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8012804:	2b01      	cmp	r3, #1
 8012806:	d101      	bne.n	801280c <HAL_SAI_Transmit_DMA+0x40>
 8012808:	2302      	movs	r3, #2
 801280a:	e08a      	b.n	8012922 <HAL_SAI_Transmit_DMA+0x156>
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	2201      	movs	r2, #1
 8012810:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	68ba      	ldr	r2, [r7, #8]
 8012818:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	88fa      	ldrh	r2, [r7, #6]
 801281e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	88fa      	ldrh	r2, [r7, #6]
 8012826:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	2200      	movs	r2, #0
 801282e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	2212      	movs	r2, #18
 8012836:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012840:	4a3a      	ldr	r2, [pc, #232]	; (801292c <HAL_SAI_Transmit_DMA+0x160>)
 8012842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801284a:	4a39      	ldr	r2, [pc, #228]	; (8012930 <HAL_SAI_Transmit_DMA+0x164>)
 801284c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012854:	4a37      	ldr	r2, [pc, #220]	; (8012934 <HAL_SAI_Transmit_DMA+0x168>)
 8012856:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801285e:	2200      	movs	r2, #0
 8012860:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801286c:	4619      	mov	r1, r3
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	331c      	adds	r3, #28
 8012874:	461a      	mov	r2, r3
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 801287c:	f7f7 f824 	bl	80098c8 <HAL_DMA_Start_IT>
 8012880:	4603      	mov	r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	d005      	beq.n	8012892 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2200      	movs	r2, #0
 801288a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 801288e:	2301      	movs	r3, #1
 8012890:	e047      	b.n	8012922 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8012892:	2100      	movs	r1, #0
 8012894:	68f8      	ldr	r0, [r7, #12]
 8012896:	f000 fb45 	bl	8012f24 <SAI_InterruptFlag>
 801289a:	4601      	mov	r1, r0
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	691a      	ldr	r2, [r3, #16]
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	430a      	orrs	r2, r1
 80128a8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	681a      	ldr	r2, [r3, #0]
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80128b8:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80128ba:	e015      	b.n	80128e8 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80128bc:	f7f4 fa2e 	bl	8006d1c <HAL_GetTick>
 80128c0:	4602      	mov	r2, r0
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	1ad3      	subs	r3, r2, r3
 80128c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80128ca:	d90d      	bls.n	80128e8 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80128d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	2200      	movs	r2, #0
 80128e0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 80128e4:	2303      	movs	r3, #3
 80128e6:	e01c      	b.n	8012922 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	695b      	ldr	r3, [r3, #20]
 80128ee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d0e2      	beq.n	80128bc <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012900:	2b00      	cmp	r3, #0
 8012902:	d107      	bne.n	8012914 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8012912:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	2200      	movs	r2, #0
 8012918:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 801291c:	2300      	movs	r3, #0
 801291e:	e000      	b.n	8012922 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8012920:	2302      	movs	r3, #2
  }
}
 8012922:	4618      	mov	r0, r3
 8012924:	3718      	adds	r7, #24
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop
 801292c:	08013069 	.word	0x08013069
 8012930:	08013009 	.word	0x08013009
 8012934:	08013085 	.word	0x08013085

08012938 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b086      	sub	sp, #24
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8012946:	b2db      	uxtb	r3, r3
 8012948:	2b00      	cmp	r3, #0
 801294a:	f000 81a7 	beq.w	8012c9c <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	695b      	ldr	r3, [r3, #20]
 8012954:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	691b      	ldr	r3, [r3, #16]
 801295c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	f003 0308 	and.w	r3, r3, #8
 801296c:	2b00      	cmp	r3, #0
 801296e:	d00a      	beq.n	8012986 <HAL_SAI_IRQHandler+0x4e>
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	f003 0308 	and.w	r3, r3, #8
 8012976:	2b00      	cmp	r3, #0
 8012978:	d005      	beq.n	8012986 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	4798      	blx	r3
 8012984:	e18a      	b.n	8012c9c <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	f003 0301 	and.w	r3, r3, #1
 801298c:	2b00      	cmp	r3, #0
 801298e:	d01e      	beq.n	80129ce <HAL_SAI_IRQHandler+0x96>
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	f003 0301 	and.w	r3, r3, #1
 8012996:	2b00      	cmp	r3, #0
 8012998:	d019      	beq.n	80129ce <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	2201      	movs	r2, #1
 80129a0:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80129a8:	b2db      	uxtb	r3, r3
 80129aa:	2b22      	cmp	r3, #34	; 0x22
 80129ac:	d101      	bne.n	80129b2 <HAL_SAI_IRQHandler+0x7a>
 80129ae:	2301      	movs	r3, #1
 80129b0:	e000      	b.n	80129b4 <HAL_SAI_IRQHandler+0x7c>
 80129b2:	2302      	movs	r3, #2
 80129b4:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	431a      	orrs	r2, r3
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f000 f96e 	bl	8012ca8 <HAL_SAI_ErrorCallback>
 80129cc:	e166      	b.n	8012c9c <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	f003 0302 	and.w	r3, r3, #2
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d013      	beq.n	8012a00 <HAL_SAI_IRQHandler+0xc8>
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	f003 0302 	and.w	r3, r3, #2
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d00e      	beq.n	8012a00 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	2202      	movs	r2, #2
 80129e8:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	f000 8153 	beq.w	8012c9c <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80129fc:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80129fe:	e14d      	b.n	8012c9c <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	f003 0320 	and.w	r3, r3, #32
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d05b      	beq.n	8012ac2 <HAL_SAI_IRQHandler+0x18a>
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	f003 0320 	and.w	r3, r3, #32
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d056      	beq.n	8012ac2 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2220      	movs	r2, #32
 8012a1a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012a22:	f043 0204 	orr.w	r2, r3, #4
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d03e      	beq.n	8012ab4 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d018      	beq.n	8012a72 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a46:	4a97      	ldr	r2, [pc, #604]	; (8012ca4 <HAL_SAI_IRQHandler+0x36c>)
 8012a48:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7f7 fcc1 	bl	800a3d8 <HAL_DMA_Abort_IT>
 8012a56:	4603      	mov	r3, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d00a      	beq.n	8012a72 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012a62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f000 f91b 	bl	8012ca8 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f000 810a 	beq.w	8012c92 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a84:	4a87      	ldr	r2, [pc, #540]	; (8012ca4 <HAL_SAI_IRQHandler+0x36c>)
 8012a86:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7f7 fca2 	bl	800a3d8 <HAL_DMA_Abort_IT>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f000 80fb 	beq.w	8012c92 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012aa2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8012aac:	6878      	ldr	r0, [r7, #4]
 8012aae:	f000 f8fb 	bl	8012ca8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8012ab2:	e0ee      	b.n	8012c92 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f7ff fdf9 	bl	80126ac <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f000 f8f4 	bl	8012ca8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8012ac0:	e0e7      	b.n	8012c92 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d05b      	beq.n	8012b84 <HAL_SAI_IRQHandler+0x24c>
 8012acc:	693b      	ldr	r3, [r7, #16]
 8012ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d056      	beq.n	8012b84 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	2240      	movs	r2, #64	; 0x40
 8012adc:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012ae4:	f043 0208 	orr.w	r2, r3, #8
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d03e      	beq.n	8012b76 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d018      	beq.n	8012b34 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b08:	4a66      	ldr	r2, [pc, #408]	; (8012ca4 <HAL_SAI_IRQHandler+0x36c>)
 8012b0a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7f7 fc60 	bl	800a3d8 <HAL_DMA_Abort_IT>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d00a      	beq.n	8012b34 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012b24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f000 f8ba 	bl	8012ca8 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	f000 80ab 	beq.w	8012c96 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b46:	4a57      	ldr	r2, [pc, #348]	; (8012ca4 <HAL_SAI_IRQHandler+0x36c>)
 8012b48:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7f7 fc41 	bl	800a3d8 <HAL_DMA_Abort_IT>
 8012b56:	4603      	mov	r3, r0
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	f000 809c 	beq.w	8012c96 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012b64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	f000 f89a 	bl	8012ca8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8012b74:	e08f      	b.n	8012c96 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f7ff fd98 	bl	80126ac <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f000 f893 	bl	8012ca8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8012b82:	e088      	b.n	8012c96 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	f003 0304 	and.w	r3, r3, #4
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d067      	beq.n	8012c5e <HAL_SAI_IRQHandler+0x326>
 8012b8e:	693b      	ldr	r3, [r7, #16]
 8012b90:	f003 0304 	and.w	r3, r3, #4
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d062      	beq.n	8012c5e <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	2204      	movs	r2, #4
 8012b9e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012ba6:	f043 0220 	orr.w	r2, r3, #32
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d03c      	beq.n	8012c34 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d018      	beq.n	8012bf6 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bca:	4a36      	ldr	r2, [pc, #216]	; (8012ca4 <HAL_SAI_IRQHandler+0x36c>)
 8012bcc:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7f7 fbff 	bl	800a3d8 <HAL_DMA_Abort_IT>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d00a      	beq.n	8012bf6 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012be6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f000 f859 	bl	8012ca8 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d04c      	beq.n	8012c9a <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c06:	4a27      	ldr	r2, [pc, #156]	; (8012ca4 <HAL_SAI_IRQHandler+0x36c>)
 8012c08:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7f7 fbe1 	bl	800a3d8 <HAL_DMA_Abort_IT>
 8012c16:	4603      	mov	r3, r0
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d03e      	beq.n	8012c9a <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012c22:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f000 f83b 	bl	8012ca8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8012c32:	e032      	b.n	8012c9a <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	2200      	movs	r2, #0
 8012c3a:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	f04f 32ff 	mov.w	r2, #4294967295
 8012c44:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2201      	movs	r2, #1
 8012c4a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2200      	movs	r2, #0
 8012c52:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 f826 	bl	8012ca8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8012c5c:	e01d      	b.n	8012c9a <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	f003 0310 	and.w	r3, r3, #16
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d019      	beq.n	8012c9c <HAL_SAI_IRQHandler+0x364>
 8012c68:	693b      	ldr	r3, [r7, #16]
 8012c6a:	f003 0310 	and.w	r3, r3, #16
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d014      	beq.n	8012c9c <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	2210      	movs	r2, #16
 8012c78:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012c80:	f043 0210 	orr.w	r2, r3, #16
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f000 f80c 	bl	8012ca8 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8012c90:	e004      	b.n	8012c9c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8012c92:	bf00      	nop
 8012c94:	e002      	b.n	8012c9c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8012c96:	bf00      	nop
 8012c98:	e000      	b.n	8012c9c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8012c9a:	bf00      	nop
}
 8012c9c:	bf00      	nop
 8012c9e:	3718      	adds	r7, #24
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}
 8012ca4:	080130e3 	.word	0x080130e3

08012ca8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b083      	sub	sp, #12
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8012cb0:	bf00      	nop
 8012cb2:	370c      	adds	r7, #12
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cba:	4770      	bx	lr

08012cbc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b087      	sub	sp, #28
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	60f8      	str	r0, [r7, #12]
 8012cc4:	60b9      	str	r1, [r7, #8]
 8012cc6:	607a      	str	r2, [r7, #4]
 8012cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	685b      	ldr	r3, [r3, #4]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d003      	beq.n	8012cea <SAI_InitI2S+0x2e>
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	685b      	ldr	r3, [r3, #4]
 8012ce6:	2b02      	cmp	r3, #2
 8012ce8:	d103      	bne.n	8012cf2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	2200      	movs	r2, #0
 8012cee:	651a      	str	r2, [r3, #80]	; 0x50
 8012cf0:	e002      	b.n	8012cf8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	2201      	movs	r2, #1
 8012cf6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012cfe:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d06:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	683a      	ldr	r2, [r7, #0]
 8012d12:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	f003 0301 	and.w	r3, r3, #1
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d001      	beq.n	8012d22 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e077      	b.n	8012e12 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8012d22:	68bb      	ldr	r3, [r7, #8]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d107      	bne.n	8012d38 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8012d34:	665a      	str	r2, [r3, #100]	; 0x64
 8012d36:	e006      	b.n	8012d46 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8012d3e:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	2200      	movs	r2, #0
 8012d44:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2b03      	cmp	r3, #3
 8012d4a:	d84f      	bhi.n	8012dec <SAI_InitI2S+0x130>
 8012d4c:	a201      	add	r2, pc, #4	; (adr r2, 8012d54 <SAI_InitI2S+0x98>)
 8012d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d52:	bf00      	nop
 8012d54:	08012d65 	.word	0x08012d65
 8012d58:	08012d87 	.word	0x08012d87
 8012d5c:	08012da9 	.word	0x08012da9
 8012d60:	08012dcb 	.word	0x08012dcb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	2280      	movs	r2, #128	; 0x80
 8012d68:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	085b      	lsrs	r3, r3, #1
 8012d6e:	015a      	lsls	r2, r3, #5
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	085b      	lsrs	r3, r3, #1
 8012d78:	011a      	lsls	r2, r3, #4
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	2240      	movs	r2, #64	; 0x40
 8012d82:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8012d84:	e035      	b.n	8012df2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2280      	movs	r2, #128	; 0x80
 8012d8a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	085b      	lsrs	r3, r3, #1
 8012d90:	019a      	lsls	r2, r3, #6
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	085b      	lsrs	r3, r3, #1
 8012d9a:	015a      	lsls	r2, r3, #5
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	2280      	movs	r2, #128	; 0x80
 8012da4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8012da6:	e024      	b.n	8012df2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	22c0      	movs	r2, #192	; 0xc0
 8012dac:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	085b      	lsrs	r3, r3, #1
 8012db2:	019a      	lsls	r2, r3, #6
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	085b      	lsrs	r3, r3, #1
 8012dbc:	015a      	lsls	r2, r3, #5
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	2280      	movs	r2, #128	; 0x80
 8012dc6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8012dc8:	e013      	b.n	8012df2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	22e0      	movs	r2, #224	; 0xe0
 8012dce:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	085b      	lsrs	r3, r3, #1
 8012dd4:	019a      	lsls	r2, r3, #6
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	085b      	lsrs	r3, r3, #1
 8012dde:	015a      	lsls	r2, r3, #5
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	2280      	movs	r2, #128	; 0x80
 8012de8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8012dea:	e002      	b.n	8012df2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8012dec:	2301      	movs	r3, #1
 8012dee:	75fb      	strb	r3, [r7, #23]
      break;
 8012df0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	2b02      	cmp	r3, #2
 8012df6:	d10b      	bne.n	8012e10 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2b01      	cmp	r3, #1
 8012dfc:	d102      	bne.n	8012e04 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	2210      	movs	r2, #16
 8012e02:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	2b02      	cmp	r3, #2
 8012e08:	d102      	bne.n	8012e10 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	2208      	movs	r2, #8
 8012e0e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8012e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	371c      	adds	r7, #28
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr
 8012e1e:	bf00      	nop

08012e20 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8012e20:	b480      	push	{r7}
 8012e22:	b087      	sub	sp, #28
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	60f8      	str	r0, [r7, #12]
 8012e28:	60b9      	str	r1, [r7, #8]
 8012e2a:	607a      	str	r2, [r7, #4]
 8012e2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	2200      	movs	r2, #0
 8012e36:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d003      	beq.n	8012e4e <SAI_InitPCM+0x2e>
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	685b      	ldr	r3, [r3, #4]
 8012e4a:	2b02      	cmp	r3, #2
 8012e4c:	d103      	bne.n	8012e56 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	2201      	movs	r2, #1
 8012e52:	651a      	str	r2, [r3, #80]	; 0x50
 8012e54:	e002      	b.n	8012e5c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2200      	movs	r2, #0
 8012e60:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8012e68:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8012e70:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	2200      	movs	r2, #0
 8012e76:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	683a      	ldr	r2, [r7, #0]
 8012e7c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e84:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	2b04      	cmp	r3, #4
 8012e8a:	d103      	bne.n	8012e94 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	2201      	movs	r2, #1
 8012e90:	659a      	str	r2, [r3, #88]	; 0x58
 8012e92:	e002      	b.n	8012e9a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	220d      	movs	r2, #13
 8012e98:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2b03      	cmp	r3, #3
 8012e9e:	d837      	bhi.n	8012f10 <SAI_InitPCM+0xf0>
 8012ea0:	a201      	add	r2, pc, #4	; (adr r2, 8012ea8 <SAI_InitPCM+0x88>)
 8012ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ea6:	bf00      	nop
 8012ea8:	08012eb9 	.word	0x08012eb9
 8012eac:	08012ecf 	.word	0x08012ecf
 8012eb0:	08012ee5 	.word	0x08012ee5
 8012eb4:	08012efb 	.word	0x08012efb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	2280      	movs	r2, #128	; 0x80
 8012ebc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	011a      	lsls	r2, r3, #4
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	2240      	movs	r2, #64	; 0x40
 8012eca:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8012ecc:	e023      	b.n	8012f16 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2280      	movs	r2, #128	; 0x80
 8012ed2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	015a      	lsls	r2, r3, #5
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	2280      	movs	r2, #128	; 0x80
 8012ee0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8012ee2:	e018      	b.n	8012f16 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	22c0      	movs	r2, #192	; 0xc0
 8012ee8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	015a      	lsls	r2, r3, #5
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	2280      	movs	r2, #128	; 0x80
 8012ef6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8012ef8:	e00d      	b.n	8012f16 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	22e0      	movs	r2, #224	; 0xe0
 8012efe:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	015a      	lsls	r2, r3, #5
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	2280      	movs	r2, #128	; 0x80
 8012f0c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8012f0e:	e002      	b.n	8012f16 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8012f10:	2301      	movs	r3, #1
 8012f12:	75fb      	strb	r3, [r7, #23]
      break;
 8012f14:	bf00      	nop
  }

  return status;
 8012f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	371c      	adds	r7, #28
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f22:	4770      	bx	lr

08012f24 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8012f24:	b480      	push	{r7}
 8012f26:	b085      	sub	sp, #20
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	460b      	mov	r3, r1
 8012f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8012f30:	2301      	movs	r3, #1
 8012f32:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8012f34:	78fb      	ldrb	r3, [r7, #3]
 8012f36:	2b01      	cmp	r3, #1
 8012f38:	d103      	bne.n	8012f42 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	f043 0308 	orr.w	r3, r3, #8
 8012f40:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f46:	2b08      	cmp	r3, #8
 8012f48:	d10b      	bne.n	8012f62 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8012f4e:	2b03      	cmp	r3, #3
 8012f50:	d003      	beq.n	8012f5a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	2b01      	cmp	r3, #1
 8012f58:	d103      	bne.n	8012f62 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	f043 0310 	orr.w	r3, r3, #16
 8012f60:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	685b      	ldr	r3, [r3, #4]
 8012f66:	2b03      	cmp	r3, #3
 8012f68:	d003      	beq.n	8012f72 <SAI_InterruptFlag+0x4e>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	685b      	ldr	r3, [r3, #4]
 8012f6e:	2b02      	cmp	r3, #2
 8012f70:	d104      	bne.n	8012f7c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012f78:	60fb      	str	r3, [r7, #12]
 8012f7a:	e003      	b.n	8012f84 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	f043 0304 	orr.w	r3, r3, #4
 8012f82:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8012f84:	68fb      	ldr	r3, [r7, #12]
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	3714      	adds	r7, #20
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f90:	4770      	bx	lr
	...

08012f94 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8012f94:	b480      	push	{r7}
 8012f96:	b085      	sub	sp, #20
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8012f9c:	4b18      	ldr	r3, [pc, #96]	; (8013000 <SAI_Disable+0x6c>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4a18      	ldr	r2, [pc, #96]	; (8013004 <SAI_Disable+0x70>)
 8012fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8012fa6:	0b1b      	lsrs	r3, r3, #12
 8012fa8:	009b      	lsls	r3, r3, #2
 8012faa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8012fac:	2300      	movs	r3, #0
 8012fae:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	681a      	ldr	r2, [r3, #0]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8012fbe:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d10a      	bne.n	8012fdc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012fcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8012fd6:	2303      	movs	r3, #3
 8012fd8:	72fb      	strb	r3, [r7, #11]
      break;
 8012fda:	e009      	b.n	8012ff0 <SAI_Disable+0x5c>
    }
    count--;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	3b01      	subs	r3, #1
 8012fe0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d1e7      	bne.n	8012fc0 <SAI_Disable+0x2c>

  return status;
 8012ff0:	7afb      	ldrb	r3, [r7, #11]
}
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3714      	adds	r7, #20
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffc:	4770      	bx	lr
 8012ffe:	bf00      	nop
 8013000:	200000e0 	.word	0x200000e0
 8013004:	95cbec1b 	.word	0x95cbec1b

08013008 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013014:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	69db      	ldr	r3, [r3, #28]
 801301a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801301e:	d01c      	beq.n	801305a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	2200      	movs	r2, #0
 8013024:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	681a      	ldr	r2, [r3, #0]
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8013036:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8013038:	2100      	movs	r1, #0
 801303a:	68f8      	ldr	r0, [r7, #12]
 801303c:	f7ff ff72 	bl	8012f24 <SAI_InterruptFlag>
 8013040:	4603      	mov	r3, r0
 8013042:	43d9      	mvns	r1, r3
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	691a      	ldr	r2, [r3, #16]
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	400a      	ands	r2, r1
 8013050:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	2201      	movs	r2, #1
 8013056:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 801305a:	68f8      	ldr	r0, [r7, #12]
 801305c:	f7ef ff18 	bl	8002e90 <HAL_SAI_TxCpltCallback>
#endif
}
 8013060:	bf00      	nop
 8013062:	3710      	adds	r7, #16
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}

08013068 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b084      	sub	sp, #16
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013074:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8013076:	68f8      	ldr	r0, [r7, #12]
 8013078:	f7ef fea8 	bl	8002dcc <HAL_SAI_TxHalfCpltCallback>
#endif
}
 801307c:	bf00      	nop
 801307e:	3710      	adds	r7, #16
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b084      	sub	sp, #16
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013090:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f7f8 fb48 	bl	800b728 <HAL_DMA_GetError>
 8013098:	4603      	mov	r3, r0
 801309a:	2b02      	cmp	r3, #2
 801309c:	d01d      	beq.n	80130da <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80130a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	681a      	ldr	r2, [r3, #0]
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80130bc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80130be:	68f8      	ldr	r0, [r7, #12]
 80130c0:	f7ff ff68 	bl	8012f94 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	2201      	movs	r2, #1
 80130c8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2200      	movs	r2, #0
 80130d0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80130d4:	68f8      	ldr	r0, [r7, #12]
 80130d6:	f7ff fde7 	bl	8012ca8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80130da:	bf00      	nop
 80130dc:	3710      	adds	r7, #16
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}

080130e2 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80130e2:	b580      	push	{r7, lr}
 80130e4:	b084      	sub	sp, #16
 80130e6:	af00      	add	r7, sp, #0
 80130e8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130ee:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	681a      	ldr	r2, [r3, #0]
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80130fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	2200      	movs	r2, #0
 8013106:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	f04f 32ff 	mov.w	r2, #4294967295
 8013110:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013118:	2b20      	cmp	r3, #32
 801311a:	d00a      	beq.n	8013132 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 801311c:	68f8      	ldr	r0, [r7, #12]
 801311e:	f7ff ff39 	bl	8012f94 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	685a      	ldr	r2, [r3, #4]
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	f042 0208 	orr.w	r2, r2, #8
 8013130:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	2201      	movs	r2, #1
 8013136:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	2200      	movs	r2, #0
 801313e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8013142:	68f8      	ldr	r0, [r7, #12]
 8013144:	f7ff fdb0 	bl	8012ca8 <HAL_SAI_ErrorCallback>
#endif
}
 8013148:	bf00      	nop
 801314a:	3710      	adds	r7, #16
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d101      	bne.n	8013162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801315e:	2301      	movs	r3, #1
 8013160:	e10f      	b.n	8013382 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2200      	movs	r2, #0
 8013166:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	4a87      	ldr	r2, [pc, #540]	; (801338c <HAL_SPI_Init+0x23c>)
 801316e:	4293      	cmp	r3, r2
 8013170:	d00f      	beq.n	8013192 <HAL_SPI_Init+0x42>
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	4a86      	ldr	r2, [pc, #536]	; (8013390 <HAL_SPI_Init+0x240>)
 8013178:	4293      	cmp	r3, r2
 801317a:	d00a      	beq.n	8013192 <HAL_SPI_Init+0x42>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	4a84      	ldr	r2, [pc, #528]	; (8013394 <HAL_SPI_Init+0x244>)
 8013182:	4293      	cmp	r3, r2
 8013184:	d005      	beq.n	8013192 <HAL_SPI_Init+0x42>
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	68db      	ldr	r3, [r3, #12]
 801318a:	2b0f      	cmp	r3, #15
 801318c:	d901      	bls.n	8013192 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801318e:	2301      	movs	r3, #1
 8013190:	e0f7      	b.n	8013382 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8013192:	6878      	ldr	r0, [r7, #4]
 8013194:	f000 fbca 	bl	801392c <SPI_GetPacketSize>
 8013198:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	4a7b      	ldr	r2, [pc, #492]	; (801338c <HAL_SPI_Init+0x23c>)
 80131a0:	4293      	cmp	r3, r2
 80131a2:	d00c      	beq.n	80131be <HAL_SPI_Init+0x6e>
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	4a79      	ldr	r2, [pc, #484]	; (8013390 <HAL_SPI_Init+0x240>)
 80131aa:	4293      	cmp	r3, r2
 80131ac:	d007      	beq.n	80131be <HAL_SPI_Init+0x6e>
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	4a78      	ldr	r2, [pc, #480]	; (8013394 <HAL_SPI_Init+0x244>)
 80131b4:	4293      	cmp	r3, r2
 80131b6:	d002      	beq.n	80131be <HAL_SPI_Init+0x6e>
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	2b08      	cmp	r3, #8
 80131bc:	d811      	bhi.n	80131e2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80131c2:	4a72      	ldr	r2, [pc, #456]	; (801338c <HAL_SPI_Init+0x23c>)
 80131c4:	4293      	cmp	r3, r2
 80131c6:	d009      	beq.n	80131dc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	4a70      	ldr	r2, [pc, #448]	; (8013390 <HAL_SPI_Init+0x240>)
 80131ce:	4293      	cmp	r3, r2
 80131d0:	d004      	beq.n	80131dc <HAL_SPI_Init+0x8c>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	4a6f      	ldr	r2, [pc, #444]	; (8013394 <HAL_SPI_Init+0x244>)
 80131d8:	4293      	cmp	r3, r2
 80131da:	d104      	bne.n	80131e6 <HAL_SPI_Init+0x96>
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	2b10      	cmp	r3, #16
 80131e0:	d901      	bls.n	80131e6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80131e2:	2301      	movs	r3, #1
 80131e4:	e0cd      	b.n	8013382 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80131ec:	b2db      	uxtb	r3, r3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d106      	bne.n	8013200 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2200      	movs	r2, #0
 80131f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f7f3 f9c2 	bl	8006584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2202      	movs	r2, #2
 8013204:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	681a      	ldr	r2, [r3, #0]
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	f022 0201 	bic.w	r2, r2, #1
 8013216:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	689b      	ldr	r3, [r3, #8]
 801321e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8013222:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	699b      	ldr	r3, [r3, #24]
 8013228:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801322c:	d119      	bne.n	8013262 <HAL_SPI_Init+0x112>
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	685b      	ldr	r3, [r3, #4]
 8013232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013236:	d103      	bne.n	8013240 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801323c:	2b00      	cmp	r3, #0
 801323e:	d008      	beq.n	8013252 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8013244:	2b00      	cmp	r3, #0
 8013246:	d10c      	bne.n	8013262 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801324c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013250:	d107      	bne.n	8013262 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	681a      	ldr	r2, [r3, #0]
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013260:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801326a:	2b00      	cmp	r3, #0
 801326c:	d00f      	beq.n	801328e <HAL_SPI_Init+0x13e>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	68db      	ldr	r3, [r3, #12]
 8013272:	2b06      	cmp	r3, #6
 8013274:	d90b      	bls.n	801328e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	430a      	orrs	r2, r1
 801328a:	601a      	str	r2, [r3, #0]
 801328c:	e007      	b.n	801329e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	681a      	ldr	r2, [r3, #0]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801329c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	69da      	ldr	r2, [r3, #28]
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132a6:	431a      	orrs	r2, r3
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	431a      	orrs	r2, r3
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132b0:	ea42 0103 	orr.w	r1, r2, r3
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	68da      	ldr	r2, [r3, #12]
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	430a      	orrs	r2, r1
 80132be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132c8:	431a      	orrs	r2, r3
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132ce:	431a      	orrs	r2, r3
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	699b      	ldr	r3, [r3, #24]
 80132d4:	431a      	orrs	r2, r3
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	691b      	ldr	r3, [r3, #16]
 80132da:	431a      	orrs	r2, r3
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	695b      	ldr	r3, [r3, #20]
 80132e0:	431a      	orrs	r2, r3
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6a1b      	ldr	r3, [r3, #32]
 80132e6:	431a      	orrs	r2, r3
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	685b      	ldr	r3, [r3, #4]
 80132ec:	431a      	orrs	r2, r3
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132f2:	431a      	orrs	r2, r3
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	689b      	ldr	r3, [r3, #8]
 80132f8:	431a      	orrs	r2, r3
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132fe:	ea42 0103 	orr.w	r1, r2, r3
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	430a      	orrs	r2, r1
 801330c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	685b      	ldr	r3, [r3, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d113      	bne.n	801333e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	689b      	ldr	r3, [r3, #8]
 801331c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013328:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	689b      	ldr	r3, [r3, #8]
 8013330:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801333c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	f022 0201 	bic.w	r2, r2, #1
 801334c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013356:	2b00      	cmp	r3, #0
 8013358:	d00a      	beq.n	8013370 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	68db      	ldr	r3, [r3, #12]
 8013360:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	430a      	orrs	r2, r1
 801336e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2200      	movs	r2, #0
 8013374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2201      	movs	r2, #1
 801337c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8013380:	2300      	movs	r3, #0
}
 8013382:	4618      	mov	r0, r3
 8013384:	3710      	adds	r7, #16
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	40013000 	.word	0x40013000
 8013390:	40003800 	.word	0x40003800
 8013394:	40003c00 	.word	0x40003c00

08013398 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b08a      	sub	sp, #40	; 0x28
 801339c:	af02      	add	r7, sp, #8
 801339e:	60f8      	str	r0, [r7, #12]
 80133a0:	60b9      	str	r1, [r7, #8]
 80133a2:	603b      	str	r3, [r7, #0]
 80133a4:	4613      	mov	r3, r2
 80133a6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	3320      	adds	r3, #32
 80133ae:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80133b0:	2300      	movs	r3, #0
 80133b2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d101      	bne.n	80133c2 <HAL_SPI_Transmit+0x2a>
 80133be:	2302      	movs	r3, #2
 80133c0:	e1e1      	b.n	8013786 <HAL_SPI_Transmit+0x3ee>
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2201      	movs	r2, #1
 80133c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80133ca:	f7f3 fca7 	bl	8006d1c <HAL_GetTick>
 80133ce:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80133d6:	b2db      	uxtb	r3, r3
 80133d8:	2b01      	cmp	r3, #1
 80133da:	d007      	beq.n	80133ec <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80133dc:	2302      	movs	r3, #2
 80133de:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	2200      	movs	r2, #0
 80133e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80133e8:	7efb      	ldrb	r3, [r7, #27]
 80133ea:	e1cc      	b.n	8013786 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d002      	beq.n	80133f8 <HAL_SPI_Transmit+0x60>
 80133f2:	88fb      	ldrh	r3, [r7, #6]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d107      	bne.n	8013408 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80133f8:	2301      	movs	r3, #1
 80133fa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2200      	movs	r2, #0
 8013400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8013404:	7efb      	ldrb	r3, [r7, #27]
 8013406:	e1be      	b.n	8013786 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2203      	movs	r2, #3
 801340c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	2200      	movs	r2, #0
 8013414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	68ba      	ldr	r2, [r7, #8]
 801341c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	88fa      	ldrh	r2, [r7, #6]
 8013422:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	88fa      	ldrh	r2, [r7, #6]
 801342a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2200      	movs	r2, #0
 8013432:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2200      	movs	r2, #0
 8013438:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2200      	movs	r2, #0
 8013440:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	2200      	movs	r2, #0
 8013448:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2200      	movs	r2, #0
 801344e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	689b      	ldr	r3, [r3, #8]
 8013454:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8013458:	d108      	bne.n	801346c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	681a      	ldr	r2, [r3, #0]
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013468:	601a      	str	r2, [r3, #0]
 801346a:	e009      	b.n	8013480 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	68db      	ldr	r3, [r3, #12]
 8013472:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801347e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	685a      	ldr	r2, [r3, #4]
 8013486:	4b96      	ldr	r3, [pc, #600]	; (80136e0 <HAL_SPI_Transmit+0x348>)
 8013488:	4013      	ands	r3, r2
 801348a:	88f9      	ldrh	r1, [r7, #6]
 801348c:	68fa      	ldr	r2, [r7, #12]
 801348e:	6812      	ldr	r2, [r2, #0]
 8013490:	430b      	orrs	r3, r1
 8013492:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	f042 0201 	orr.w	r2, r2, #1
 80134a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	685b      	ldr	r3, [r3, #4]
 80134a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80134ac:	d107      	bne.n	80134be <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	681a      	ldr	r2, [r3, #0]
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80134bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	68db      	ldr	r3, [r3, #12]
 80134c2:	2b0f      	cmp	r3, #15
 80134c4:	d947      	bls.n	8013556 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80134c6:	e03f      	b.n	8013548 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	695b      	ldr	r3, [r3, #20]
 80134ce:	f003 0302 	and.w	r3, r3, #2
 80134d2:	2b02      	cmp	r3, #2
 80134d4:	d114      	bne.n	8013500 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	6812      	ldr	r2, [r2, #0]
 80134e0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80134e6:	1d1a      	adds	r2, r3, #4
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80134f2:	b29b      	uxth	r3, r3
 80134f4:	3b01      	subs	r3, #1
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80134fe:	e023      	b.n	8013548 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013500:	f7f3 fc0c 	bl	8006d1c <HAL_GetTick>
 8013504:	4602      	mov	r2, r0
 8013506:	697b      	ldr	r3, [r7, #20]
 8013508:	1ad3      	subs	r3, r2, r3
 801350a:	683a      	ldr	r2, [r7, #0]
 801350c:	429a      	cmp	r2, r3
 801350e:	d803      	bhi.n	8013518 <HAL_SPI_Transmit+0x180>
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013516:	d102      	bne.n	801351e <HAL_SPI_Transmit+0x186>
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d114      	bne.n	8013548 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801351e:	68f8      	ldr	r0, [r7, #12]
 8013520:	f000 f936 	bl	8013790 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	2200      	movs	r2, #0
 8013528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013532:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	2201      	movs	r2, #1
 8013540:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8013544:	2303      	movs	r3, #3
 8013546:	e11e      	b.n	8013786 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801354e:	b29b      	uxth	r3, r3
 8013550:	2b00      	cmp	r3, #0
 8013552:	d1b9      	bne.n	80134c8 <HAL_SPI_Transmit+0x130>
 8013554:	e0f1      	b.n	801373a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	68db      	ldr	r3, [r3, #12]
 801355a:	2b07      	cmp	r3, #7
 801355c:	f240 80e6 	bls.w	801372c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8013560:	e05d      	b.n	801361e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	695b      	ldr	r3, [r3, #20]
 8013568:	f003 0302 	and.w	r3, r3, #2
 801356c:	2b02      	cmp	r3, #2
 801356e:	d132      	bne.n	80135d6 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013576:	b29b      	uxth	r3, r3
 8013578:	2b01      	cmp	r3, #1
 801357a:	d918      	bls.n	80135ae <HAL_SPI_Transmit+0x216>
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013580:	2b00      	cmp	r3, #0
 8013582:	d014      	beq.n	80135ae <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	6812      	ldr	r2, [r2, #0]
 801358e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013594:	1d1a      	adds	r2, r3, #4
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80135a0:	b29b      	uxth	r3, r3
 80135a2:	3b02      	subs	r3, #2
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80135ac:	e037      	b.n	801361e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80135b2:	881a      	ldrh	r2, [r3, #0]
 80135b4:	69fb      	ldr	r3, [r7, #28]
 80135b6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80135bc:	1c9a      	adds	r2, r3, #2
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80135c8:	b29b      	uxth	r3, r3
 80135ca:	3b01      	subs	r3, #1
 80135cc:	b29a      	uxth	r2, r3
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80135d4:	e023      	b.n	801361e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80135d6:	f7f3 fba1 	bl	8006d1c <HAL_GetTick>
 80135da:	4602      	mov	r2, r0
 80135dc:	697b      	ldr	r3, [r7, #20]
 80135de:	1ad3      	subs	r3, r2, r3
 80135e0:	683a      	ldr	r2, [r7, #0]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d803      	bhi.n	80135ee <HAL_SPI_Transmit+0x256>
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ec:	d102      	bne.n	80135f4 <HAL_SPI_Transmit+0x25c>
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d114      	bne.n	801361e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80135f4:	68f8      	ldr	r0, [r7, #12]
 80135f6:	f000 f8cb 	bl	8013790 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	2200      	movs	r2, #0
 80135fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013608:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	2201      	movs	r2, #1
 8013616:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801361a:	2303      	movs	r3, #3
 801361c:	e0b3      	b.n	8013786 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013624:	b29b      	uxth	r3, r3
 8013626:	2b00      	cmp	r3, #0
 8013628:	d19b      	bne.n	8013562 <HAL_SPI_Transmit+0x1ca>
 801362a:	e086      	b.n	801373a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	695b      	ldr	r3, [r3, #20]
 8013632:	f003 0302 	and.w	r3, r3, #2
 8013636:	2b02      	cmp	r3, #2
 8013638:	d154      	bne.n	80136e4 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013640:	b29b      	uxth	r3, r3
 8013642:	2b03      	cmp	r3, #3
 8013644:	d918      	bls.n	8013678 <HAL_SPI_Transmit+0x2e0>
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801364a:	2b40      	cmp	r3, #64	; 0x40
 801364c:	d914      	bls.n	8013678 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	6812      	ldr	r2, [r2, #0]
 8013658:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801365e:	1d1a      	adds	r2, r3, #4
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801366a:	b29b      	uxth	r3, r3
 801366c:	3b04      	subs	r3, #4
 801366e:	b29a      	uxth	r2, r3
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8013676:	e059      	b.n	801372c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801367e:	b29b      	uxth	r3, r3
 8013680:	2b01      	cmp	r3, #1
 8013682:	d917      	bls.n	80136b4 <HAL_SPI_Transmit+0x31c>
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013688:	2b00      	cmp	r3, #0
 801368a:	d013      	beq.n	80136b4 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013690:	881a      	ldrh	r2, [r3, #0]
 8013692:	69fb      	ldr	r3, [r7, #28]
 8013694:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801369a:	1c9a      	adds	r2, r3, #2
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80136a6:	b29b      	uxth	r3, r3
 80136a8:	3b02      	subs	r3, #2
 80136aa:	b29a      	uxth	r2, r3
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80136b2:	e03b      	b.n	801372c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	3320      	adds	r3, #32
 80136be:	7812      	ldrb	r2, [r2, #0]
 80136c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80136c6:	1c5a      	adds	r2, r3, #1
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	3b01      	subs	r3, #1
 80136d6:	b29a      	uxth	r2, r3
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80136de:	e025      	b.n	801372c <HAL_SPI_Transmit+0x394>
 80136e0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80136e4:	f7f3 fb1a 	bl	8006d1c <HAL_GetTick>
 80136e8:	4602      	mov	r2, r0
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	1ad3      	subs	r3, r2, r3
 80136ee:	683a      	ldr	r2, [r7, #0]
 80136f0:	429a      	cmp	r2, r3
 80136f2:	d803      	bhi.n	80136fc <HAL_SPI_Transmit+0x364>
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136fa:	d102      	bne.n	8013702 <HAL_SPI_Transmit+0x36a>
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d114      	bne.n	801372c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8013702:	68f8      	ldr	r0, [r7, #12]
 8013704:	f000 f844 	bl	8013790 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	2200      	movs	r2, #0
 801370c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013716:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	2201      	movs	r2, #1
 8013724:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8013728:	2303      	movs	r3, #3
 801372a:	e02c      	b.n	8013786 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013732:	b29b      	uxth	r3, r3
 8013734:	2b00      	cmp	r3, #0
 8013736:	f47f af79 	bne.w	801362c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	9300      	str	r3, [sp, #0]
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	2200      	movs	r2, #0
 8013742:	2108      	movs	r1, #8
 8013744:	68f8      	ldr	r0, [r7, #12]
 8013746:	f000 f8c3 	bl	80138d0 <SPI_WaitOnFlagUntilTimeout>
 801374a:	4603      	mov	r3, r0
 801374c:	2b00      	cmp	r3, #0
 801374e:	d007      	beq.n	8013760 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013756:	f043 0220 	orr.w	r2, r3, #32
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8013760:	68f8      	ldr	r0, [r7, #12]
 8013762:	f000 f815 	bl	8013790 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2200      	movs	r2, #0
 801376a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	2201      	movs	r2, #1
 8013772:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801377c:	2b00      	cmp	r3, #0
 801377e:	d001      	beq.n	8013784 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8013780:	2301      	movs	r3, #1
 8013782:	e000      	b.n	8013786 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8013784:	7efb      	ldrb	r3, [r7, #27]
}
 8013786:	4618      	mov	r0, r3
 8013788:	3720      	adds	r7, #32
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
 801378e:	bf00      	nop

08013790 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8013790:	b480      	push	{r7}
 8013792:	b085      	sub	sp, #20
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	695b      	ldr	r3, [r3, #20]
 801379e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	699a      	ldr	r2, [r3, #24]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	f042 0208 	orr.w	r2, r2, #8
 80137ae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	699a      	ldr	r2, [r3, #24]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	f042 0210 	orr.w	r2, r2, #16
 80137be:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	681a      	ldr	r2, [r3, #0]
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f022 0201 	bic.w	r2, r2, #1
 80137ce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	6919      	ldr	r1, [r3, #16]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	4b3c      	ldr	r3, [pc, #240]	; (80138cc <SPI_CloseTransfer+0x13c>)
 80137dc:	400b      	ands	r3, r1
 80137de:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	689a      	ldr	r2, [r3, #8]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80137ee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80137f6:	b2db      	uxtb	r3, r3
 80137f8:	2b04      	cmp	r3, #4
 80137fa:	d014      	beq.n	8013826 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	f003 0320 	and.w	r3, r3, #32
 8013802:	2b00      	cmp	r3, #0
 8013804:	d00f      	beq.n	8013826 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801380c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	699a      	ldr	r2, [r3, #24]
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	f042 0220 	orr.w	r2, r2, #32
 8013824:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801382c:	b2db      	uxtb	r3, r3
 801382e:	2b03      	cmp	r3, #3
 8013830:	d014      	beq.n	801385c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013838:	2b00      	cmp	r3, #0
 801383a:	d00f      	beq.n	801385c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013842:	f043 0204 	orr.w	r2, r3, #4
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	699a      	ldr	r2, [r3, #24]
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801385a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013862:	2b00      	cmp	r3, #0
 8013864:	d00f      	beq.n	8013886 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801386c:	f043 0201 	orr.w	r2, r3, #1
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	699a      	ldr	r2, [r3, #24]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013884:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801388c:	2b00      	cmp	r3, #0
 801388e:	d00f      	beq.n	80138b0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013896:	f043 0208 	orr.w	r2, r3, #8
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	699a      	ldr	r2, [r3, #24]
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80138ae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2200      	movs	r2, #0
 80138b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2200      	movs	r2, #0
 80138bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80138c0:	bf00      	nop
 80138c2:	3714      	adds	r7, #20
 80138c4:	46bd      	mov	sp, r7
 80138c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ca:	4770      	bx	lr
 80138cc:	fffffc90 	.word	0xfffffc90

080138d0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b084      	sub	sp, #16
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	60f8      	str	r0, [r7, #12]
 80138d8:	60b9      	str	r1, [r7, #8]
 80138da:	603b      	str	r3, [r7, #0]
 80138dc:	4613      	mov	r3, r2
 80138de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80138e0:	e010      	b.n	8013904 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80138e2:	f7f3 fa1b 	bl	8006d1c <HAL_GetTick>
 80138e6:	4602      	mov	r2, r0
 80138e8:	69bb      	ldr	r3, [r7, #24]
 80138ea:	1ad3      	subs	r3, r2, r3
 80138ec:	683a      	ldr	r2, [r7, #0]
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d803      	bhi.n	80138fa <SPI_WaitOnFlagUntilTimeout+0x2a>
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138f8:	d102      	bne.n	8013900 <SPI_WaitOnFlagUntilTimeout+0x30>
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d101      	bne.n	8013904 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8013900:	2303      	movs	r3, #3
 8013902:	e00f      	b.n	8013924 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	695a      	ldr	r2, [r3, #20]
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	4013      	ands	r3, r2
 801390e:	68ba      	ldr	r2, [r7, #8]
 8013910:	429a      	cmp	r2, r3
 8013912:	bf0c      	ite	eq
 8013914:	2301      	moveq	r3, #1
 8013916:	2300      	movne	r3, #0
 8013918:	b2db      	uxtb	r3, r3
 801391a:	461a      	mov	r2, r3
 801391c:	79fb      	ldrb	r3, [r7, #7]
 801391e:	429a      	cmp	r2, r3
 8013920:	d0df      	beq.n	80138e2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8013922:	2300      	movs	r3, #0
}
 8013924:	4618      	mov	r0, r3
 8013926:	3710      	adds	r7, #16
 8013928:	46bd      	mov	sp, r7
 801392a:	bd80      	pop	{r7, pc}

0801392c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 801392c:	b480      	push	{r7}
 801392e:	b085      	sub	sp, #20
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013938:	095b      	lsrs	r3, r3, #5
 801393a:	3301      	adds	r3, #1
 801393c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	68db      	ldr	r3, [r3, #12]
 8013942:	3301      	adds	r3, #1
 8013944:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	3307      	adds	r3, #7
 801394a:	08db      	lsrs	r3, r3, #3
 801394c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	68fa      	ldr	r2, [r7, #12]
 8013952:	fb02 f303 	mul.w	r3, r2, r3
}
 8013956:	4618      	mov	r0, r3
 8013958:	3714      	adds	r7, #20
 801395a:	46bd      	mov	sp, r7
 801395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013960:	4770      	bx	lr

08013962 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013962:	b580      	push	{r7, lr}
 8013964:	b082      	sub	sp, #8
 8013966:	af00      	add	r7, sp, #0
 8013968:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d101      	bne.n	8013974 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013970:	2301      	movs	r3, #1
 8013972:	e049      	b.n	8013a08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801397a:	b2db      	uxtb	r3, r3
 801397c:	2b00      	cmp	r3, #0
 801397e:	d106      	bne.n	801398e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2200      	movs	r2, #0
 8013984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	f7f2 fe65 	bl	8006658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2202      	movs	r2, #2
 8013992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681a      	ldr	r2, [r3, #0]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	3304      	adds	r3, #4
 801399e:	4619      	mov	r1, r3
 80139a0:	4610      	mov	r0, r2
 80139a2:	f000 faf7 	bl	8013f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2201      	movs	r2, #1
 80139aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2201      	movs	r2, #1
 80139b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2201      	movs	r2, #1
 80139ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2201      	movs	r2, #1
 80139c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	2201      	movs	r2, #1
 80139ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2201      	movs	r2, #1
 80139d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2201      	movs	r2, #1
 80139da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2201      	movs	r2, #1
 80139e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2201      	movs	r2, #1
 80139ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2201      	movs	r2, #1
 80139f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2201      	movs	r2, #1
 80139fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2201      	movs	r2, #1
 8013a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013a06:	2300      	movs	r3, #0
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	3708      	adds	r7, #8
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}

08013a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013a10:	b480      	push	{r7}
 8013a12:	b085      	sub	sp, #20
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013a1e:	b2db      	uxtb	r3, r3
 8013a20:	2b01      	cmp	r3, #1
 8013a22:	d001      	beq.n	8013a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013a24:	2301      	movs	r3, #1
 8013a26:	e054      	b.n	8013ad2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2202      	movs	r2, #2
 8013a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	68da      	ldr	r2, [r3, #12]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	f042 0201 	orr.w	r2, r2, #1
 8013a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	4a26      	ldr	r2, [pc, #152]	; (8013ae0 <HAL_TIM_Base_Start_IT+0xd0>)
 8013a46:	4293      	cmp	r3, r2
 8013a48:	d022      	beq.n	8013a90 <HAL_TIM_Base_Start_IT+0x80>
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013a52:	d01d      	beq.n	8013a90 <HAL_TIM_Base_Start_IT+0x80>
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	4a22      	ldr	r2, [pc, #136]	; (8013ae4 <HAL_TIM_Base_Start_IT+0xd4>)
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	d018      	beq.n	8013a90 <HAL_TIM_Base_Start_IT+0x80>
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	4a21      	ldr	r2, [pc, #132]	; (8013ae8 <HAL_TIM_Base_Start_IT+0xd8>)
 8013a64:	4293      	cmp	r3, r2
 8013a66:	d013      	beq.n	8013a90 <HAL_TIM_Base_Start_IT+0x80>
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	4a1f      	ldr	r2, [pc, #124]	; (8013aec <HAL_TIM_Base_Start_IT+0xdc>)
 8013a6e:	4293      	cmp	r3, r2
 8013a70:	d00e      	beq.n	8013a90 <HAL_TIM_Base_Start_IT+0x80>
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	4a1e      	ldr	r2, [pc, #120]	; (8013af0 <HAL_TIM_Base_Start_IT+0xe0>)
 8013a78:	4293      	cmp	r3, r2
 8013a7a:	d009      	beq.n	8013a90 <HAL_TIM_Base_Start_IT+0x80>
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	4a1c      	ldr	r2, [pc, #112]	; (8013af4 <HAL_TIM_Base_Start_IT+0xe4>)
 8013a82:	4293      	cmp	r3, r2
 8013a84:	d004      	beq.n	8013a90 <HAL_TIM_Base_Start_IT+0x80>
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	4a1b      	ldr	r2, [pc, #108]	; (8013af8 <HAL_TIM_Base_Start_IT+0xe8>)
 8013a8c:	4293      	cmp	r3, r2
 8013a8e:	d115      	bne.n	8013abc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	689a      	ldr	r2, [r3, #8]
 8013a96:	4b19      	ldr	r3, [pc, #100]	; (8013afc <HAL_TIM_Base_Start_IT+0xec>)
 8013a98:	4013      	ands	r3, r2
 8013a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	2b06      	cmp	r3, #6
 8013aa0:	d015      	beq.n	8013ace <HAL_TIM_Base_Start_IT+0xbe>
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013aa8:	d011      	beq.n	8013ace <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	681a      	ldr	r2, [r3, #0]
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	f042 0201 	orr.w	r2, r2, #1
 8013ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013aba:	e008      	b.n	8013ace <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	f042 0201 	orr.w	r2, r2, #1
 8013aca:	601a      	str	r2, [r3, #0]
 8013acc:	e000      	b.n	8013ad0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013ace:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013ad0:	2300      	movs	r3, #0
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3714      	adds	r7, #20
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013adc:	4770      	bx	lr
 8013ade:	bf00      	nop
 8013ae0:	40010000 	.word	0x40010000
 8013ae4:	40000400 	.word	0x40000400
 8013ae8:	40000800 	.word	0x40000800
 8013aec:	40000c00 	.word	0x40000c00
 8013af0:	40010400 	.word	0x40010400
 8013af4:	40001800 	.word	0x40001800
 8013af8:	40014000 	.word	0x40014000
 8013afc:	00010007 	.word	0x00010007

08013b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b082      	sub	sp, #8
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	691b      	ldr	r3, [r3, #16]
 8013b0e:	f003 0302 	and.w	r3, r3, #2
 8013b12:	2b02      	cmp	r3, #2
 8013b14:	d122      	bne.n	8013b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	68db      	ldr	r3, [r3, #12]
 8013b1c:	f003 0302 	and.w	r3, r3, #2
 8013b20:	2b02      	cmp	r3, #2
 8013b22:	d11b      	bne.n	8013b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	f06f 0202 	mvn.w	r2, #2
 8013b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	2201      	movs	r2, #1
 8013b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	699b      	ldr	r3, [r3, #24]
 8013b3a:	f003 0303 	and.w	r3, r3, #3
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d003      	beq.n	8013b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f000 fa08 	bl	8013f58 <HAL_TIM_IC_CaptureCallback>
 8013b48:	e005      	b.n	8013b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f000 f9fa 	bl	8013f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f000 fa0b 	bl	8013f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	691b      	ldr	r3, [r3, #16]
 8013b62:	f003 0304 	and.w	r3, r3, #4
 8013b66:	2b04      	cmp	r3, #4
 8013b68:	d122      	bne.n	8013bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	68db      	ldr	r3, [r3, #12]
 8013b70:	f003 0304 	and.w	r3, r3, #4
 8013b74:	2b04      	cmp	r3, #4
 8013b76:	d11b      	bne.n	8013bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	f06f 0204 	mvn.w	r2, #4
 8013b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2202      	movs	r2, #2
 8013b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	699b      	ldr	r3, [r3, #24]
 8013b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d003      	beq.n	8013b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	f000 f9de 	bl	8013f58 <HAL_TIM_IC_CaptureCallback>
 8013b9c:	e005      	b.n	8013baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f000 f9d0 	bl	8013f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 f9e1 	bl	8013f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	2200      	movs	r2, #0
 8013bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	691b      	ldr	r3, [r3, #16]
 8013bb6:	f003 0308 	and.w	r3, r3, #8
 8013bba:	2b08      	cmp	r3, #8
 8013bbc:	d122      	bne.n	8013c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	68db      	ldr	r3, [r3, #12]
 8013bc4:	f003 0308 	and.w	r3, r3, #8
 8013bc8:	2b08      	cmp	r3, #8
 8013bca:	d11b      	bne.n	8013c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	f06f 0208 	mvn.w	r2, #8
 8013bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	2204      	movs	r2, #4
 8013bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	69db      	ldr	r3, [r3, #28]
 8013be2:	f003 0303 	and.w	r3, r3, #3
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d003      	beq.n	8013bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f000 f9b4 	bl	8013f58 <HAL_TIM_IC_CaptureCallback>
 8013bf0:	e005      	b.n	8013bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f000 f9a6 	bl	8013f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f000 f9b7 	bl	8013f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	2200      	movs	r2, #0
 8013c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	691b      	ldr	r3, [r3, #16]
 8013c0a:	f003 0310 	and.w	r3, r3, #16
 8013c0e:	2b10      	cmp	r3, #16
 8013c10:	d122      	bne.n	8013c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	f003 0310 	and.w	r3, r3, #16
 8013c1c:	2b10      	cmp	r3, #16
 8013c1e:	d11b      	bne.n	8013c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	f06f 0210 	mvn.w	r2, #16
 8013c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2208      	movs	r2, #8
 8013c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	69db      	ldr	r3, [r3, #28]
 8013c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d003      	beq.n	8013c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f000 f98a 	bl	8013f58 <HAL_TIM_IC_CaptureCallback>
 8013c44:	e005      	b.n	8013c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f000 f97c 	bl	8013f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013c4c:	6878      	ldr	r0, [r7, #4]
 8013c4e:	f000 f98d 	bl	8013f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	2200      	movs	r2, #0
 8013c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	691b      	ldr	r3, [r3, #16]
 8013c5e:	f003 0301 	and.w	r3, r3, #1
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d10e      	bne.n	8013c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	68db      	ldr	r3, [r3, #12]
 8013c6c:	f003 0301 	and.w	r3, r3, #1
 8013c70:	2b01      	cmp	r3, #1
 8013c72:	d107      	bne.n	8013c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	f06f 0201 	mvn.w	r2, #1
 8013c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f000 f956 	bl	8013f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	691b      	ldr	r3, [r3, #16]
 8013c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c8e:	2b80      	cmp	r3, #128	; 0x80
 8013c90:	d10e      	bne.n	8013cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c9c:	2b80      	cmp	r3, #128	; 0x80
 8013c9e:	d107      	bne.n	8013cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8013ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f000 fb42 	bl	8014334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	691b      	ldr	r3, [r3, #16]
 8013cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013cbe:	d10e      	bne.n	8013cde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013cca:	2b80      	cmp	r3, #128	; 0x80
 8013ccc:	d107      	bne.n	8013cde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8013cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f000 fb35 	bl	8014348 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	691b      	ldr	r3, [r3, #16]
 8013ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ce8:	2b40      	cmp	r3, #64	; 0x40
 8013cea:	d10e      	bne.n	8013d0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	68db      	ldr	r3, [r3, #12]
 8013cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cf6:	2b40      	cmp	r3, #64	; 0x40
 8013cf8:	d107      	bne.n	8013d0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f000 f93b 	bl	8013f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	691b      	ldr	r3, [r3, #16]
 8013d10:	f003 0320 	and.w	r3, r3, #32
 8013d14:	2b20      	cmp	r3, #32
 8013d16:	d10e      	bne.n	8013d36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	68db      	ldr	r3, [r3, #12]
 8013d1e:	f003 0320 	and.w	r3, r3, #32
 8013d22:	2b20      	cmp	r3, #32
 8013d24:	d107      	bne.n	8013d36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	f06f 0220 	mvn.w	r2, #32
 8013d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f000 faf5 	bl	8014320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013d36:	bf00      	nop
 8013d38:	3708      	adds	r7, #8
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
	...

08013d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b084      	sub	sp, #16
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013d54:	2b01      	cmp	r3, #1
 8013d56:	d101      	bne.n	8013d5c <HAL_TIM_ConfigClockSource+0x1c>
 8013d58:	2302      	movs	r3, #2
 8013d5a:	e0dc      	b.n	8013f16 <HAL_TIM_ConfigClockSource+0x1d6>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2201      	movs	r2, #1
 8013d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2202      	movs	r2, #2
 8013d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	689b      	ldr	r3, [r3, #8]
 8013d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013d74:	68ba      	ldr	r2, [r7, #8]
 8013d76:	4b6a      	ldr	r3, [pc, #424]	; (8013f20 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013d78:	4013      	ands	r3, r2
 8013d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013d82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	68ba      	ldr	r2, [r7, #8]
 8013d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	4a64      	ldr	r2, [pc, #400]	; (8013f24 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013d92:	4293      	cmp	r3, r2
 8013d94:	f000 80a9 	beq.w	8013eea <HAL_TIM_ConfigClockSource+0x1aa>
 8013d98:	4a62      	ldr	r2, [pc, #392]	; (8013f24 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	f200 80ae 	bhi.w	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013da0:	4a61      	ldr	r2, [pc, #388]	; (8013f28 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013da2:	4293      	cmp	r3, r2
 8013da4:	f000 80a1 	beq.w	8013eea <HAL_TIM_ConfigClockSource+0x1aa>
 8013da8:	4a5f      	ldr	r2, [pc, #380]	; (8013f28 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013daa:	4293      	cmp	r3, r2
 8013dac:	f200 80a6 	bhi.w	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013db0:	4a5e      	ldr	r2, [pc, #376]	; (8013f2c <HAL_TIM_ConfigClockSource+0x1ec>)
 8013db2:	4293      	cmp	r3, r2
 8013db4:	f000 8099 	beq.w	8013eea <HAL_TIM_ConfigClockSource+0x1aa>
 8013db8:	4a5c      	ldr	r2, [pc, #368]	; (8013f2c <HAL_TIM_ConfigClockSource+0x1ec>)
 8013dba:	4293      	cmp	r3, r2
 8013dbc:	f200 809e 	bhi.w	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013dc0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013dc4:	f000 8091 	beq.w	8013eea <HAL_TIM_ConfigClockSource+0x1aa>
 8013dc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013dcc:	f200 8096 	bhi.w	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013dd4:	f000 8089 	beq.w	8013eea <HAL_TIM_ConfigClockSource+0x1aa>
 8013dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013ddc:	f200 808e 	bhi.w	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013de4:	d03e      	beq.n	8013e64 <HAL_TIM_ConfigClockSource+0x124>
 8013de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013dea:	f200 8087 	bhi.w	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013df2:	f000 8086 	beq.w	8013f02 <HAL_TIM_ConfigClockSource+0x1c2>
 8013df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013dfa:	d87f      	bhi.n	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013dfc:	2b70      	cmp	r3, #112	; 0x70
 8013dfe:	d01a      	beq.n	8013e36 <HAL_TIM_ConfigClockSource+0xf6>
 8013e00:	2b70      	cmp	r3, #112	; 0x70
 8013e02:	d87b      	bhi.n	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013e04:	2b60      	cmp	r3, #96	; 0x60
 8013e06:	d050      	beq.n	8013eaa <HAL_TIM_ConfigClockSource+0x16a>
 8013e08:	2b60      	cmp	r3, #96	; 0x60
 8013e0a:	d877      	bhi.n	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013e0c:	2b50      	cmp	r3, #80	; 0x50
 8013e0e:	d03c      	beq.n	8013e8a <HAL_TIM_ConfigClockSource+0x14a>
 8013e10:	2b50      	cmp	r3, #80	; 0x50
 8013e12:	d873      	bhi.n	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013e14:	2b40      	cmp	r3, #64	; 0x40
 8013e16:	d058      	beq.n	8013eca <HAL_TIM_ConfigClockSource+0x18a>
 8013e18:	2b40      	cmp	r3, #64	; 0x40
 8013e1a:	d86f      	bhi.n	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013e1c:	2b30      	cmp	r3, #48	; 0x30
 8013e1e:	d064      	beq.n	8013eea <HAL_TIM_ConfigClockSource+0x1aa>
 8013e20:	2b30      	cmp	r3, #48	; 0x30
 8013e22:	d86b      	bhi.n	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013e24:	2b20      	cmp	r3, #32
 8013e26:	d060      	beq.n	8013eea <HAL_TIM_ConfigClockSource+0x1aa>
 8013e28:	2b20      	cmp	r3, #32
 8013e2a:	d867      	bhi.n	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d05c      	beq.n	8013eea <HAL_TIM_ConfigClockSource+0x1aa>
 8013e30:	2b10      	cmp	r3, #16
 8013e32:	d05a      	beq.n	8013eea <HAL_TIM_ConfigClockSource+0x1aa>
 8013e34:	e062      	b.n	8013efc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013e46:	f000 f9bd 	bl	80141c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	689b      	ldr	r3, [r3, #8]
 8013e50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013e58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	68ba      	ldr	r2, [r7, #8]
 8013e60:	609a      	str	r2, [r3, #8]
      break;
 8013e62:	e04f      	b.n	8013f04 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013e74:	f000 f9a6 	bl	80141c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	689a      	ldr	r2, [r3, #8]
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013e86:	609a      	str	r2, [r3, #8]
      break;
 8013e88:	e03c      	b.n	8013f04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013e92:	683b      	ldr	r3, [r7, #0]
 8013e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013e96:	461a      	mov	r2, r3
 8013e98:	f000 f916 	bl	80140c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	2150      	movs	r1, #80	; 0x50
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f000 f970 	bl	8014188 <TIM_ITRx_SetConfig>
      break;
 8013ea8:	e02c      	b.n	8013f04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013eb6:	461a      	mov	r2, r3
 8013eb8:	f000 f935 	bl	8014126 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	2160      	movs	r1, #96	; 0x60
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f000 f960 	bl	8014188 <TIM_ITRx_SetConfig>
      break;
 8013ec8:	e01c      	b.n	8013f04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013ed6:	461a      	mov	r2, r3
 8013ed8:	f000 f8f6 	bl	80140c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	2140      	movs	r1, #64	; 0x40
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f000 f950 	bl	8014188 <TIM_ITRx_SetConfig>
      break;
 8013ee8:	e00c      	b.n	8013f04 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681a      	ldr	r2, [r3, #0]
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	4619      	mov	r1, r3
 8013ef4:	4610      	mov	r0, r2
 8013ef6:	f000 f947 	bl	8014188 <TIM_ITRx_SetConfig>
      break;
 8013efa:	e003      	b.n	8013f04 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013efc:	2301      	movs	r3, #1
 8013efe:	73fb      	strb	r3, [r7, #15]
      break;
 8013f00:	e000      	b.n	8013f04 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013f02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2201      	movs	r2, #1
 8013f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	3710      	adds	r7, #16
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	ffceff88 	.word	0xffceff88
 8013f24:	00100040 	.word	0x00100040
 8013f28:	00100030 	.word	0x00100030
 8013f2c:	00100020 	.word	0x00100020

08013f30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013f30:	b480      	push	{r7}
 8013f32:	b083      	sub	sp, #12
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8013f38:	bf00      	nop
 8013f3a:	370c      	adds	r7, #12
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr

08013f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013f44:	b480      	push	{r7}
 8013f46:	b083      	sub	sp, #12
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013f4c:	bf00      	nop
 8013f4e:	370c      	adds	r7, #12
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr

08013f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b083      	sub	sp, #12
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013f60:	bf00      	nop
 8013f62:	370c      	adds	r7, #12
 8013f64:	46bd      	mov	sp, r7
 8013f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6a:	4770      	bx	lr

08013f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013f6c:	b480      	push	{r7}
 8013f6e:	b083      	sub	sp, #12
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013f74:	bf00      	nop
 8013f76:	370c      	adds	r7, #12
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7e:	4770      	bx	lr

08013f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013f80:	b480      	push	{r7}
 8013f82:	b083      	sub	sp, #12
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013f88:	bf00      	nop
 8013f8a:	370c      	adds	r7, #12
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f92:	4770      	bx	lr

08013f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013f94:	b480      	push	{r7}
 8013f96:	b085      	sub	sp, #20
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	4a40      	ldr	r2, [pc, #256]	; (80140a8 <TIM_Base_SetConfig+0x114>)
 8013fa8:	4293      	cmp	r3, r2
 8013faa:	d013      	beq.n	8013fd4 <TIM_Base_SetConfig+0x40>
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013fb2:	d00f      	beq.n	8013fd4 <TIM_Base_SetConfig+0x40>
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	4a3d      	ldr	r2, [pc, #244]	; (80140ac <TIM_Base_SetConfig+0x118>)
 8013fb8:	4293      	cmp	r3, r2
 8013fba:	d00b      	beq.n	8013fd4 <TIM_Base_SetConfig+0x40>
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	4a3c      	ldr	r2, [pc, #240]	; (80140b0 <TIM_Base_SetConfig+0x11c>)
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	d007      	beq.n	8013fd4 <TIM_Base_SetConfig+0x40>
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	4a3b      	ldr	r2, [pc, #236]	; (80140b4 <TIM_Base_SetConfig+0x120>)
 8013fc8:	4293      	cmp	r3, r2
 8013fca:	d003      	beq.n	8013fd4 <TIM_Base_SetConfig+0x40>
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	4a3a      	ldr	r2, [pc, #232]	; (80140b8 <TIM_Base_SetConfig+0x124>)
 8013fd0:	4293      	cmp	r3, r2
 8013fd2:	d108      	bne.n	8013fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	685b      	ldr	r3, [r3, #4]
 8013fe0:	68fa      	ldr	r2, [r7, #12]
 8013fe2:	4313      	orrs	r3, r2
 8013fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	4a2f      	ldr	r2, [pc, #188]	; (80140a8 <TIM_Base_SetConfig+0x114>)
 8013fea:	4293      	cmp	r3, r2
 8013fec:	d01f      	beq.n	801402e <TIM_Base_SetConfig+0x9a>
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013ff4:	d01b      	beq.n	801402e <TIM_Base_SetConfig+0x9a>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	4a2c      	ldr	r2, [pc, #176]	; (80140ac <TIM_Base_SetConfig+0x118>)
 8013ffa:	4293      	cmp	r3, r2
 8013ffc:	d017      	beq.n	801402e <TIM_Base_SetConfig+0x9a>
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	4a2b      	ldr	r2, [pc, #172]	; (80140b0 <TIM_Base_SetConfig+0x11c>)
 8014002:	4293      	cmp	r3, r2
 8014004:	d013      	beq.n	801402e <TIM_Base_SetConfig+0x9a>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	4a2a      	ldr	r2, [pc, #168]	; (80140b4 <TIM_Base_SetConfig+0x120>)
 801400a:	4293      	cmp	r3, r2
 801400c:	d00f      	beq.n	801402e <TIM_Base_SetConfig+0x9a>
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	4a29      	ldr	r2, [pc, #164]	; (80140b8 <TIM_Base_SetConfig+0x124>)
 8014012:	4293      	cmp	r3, r2
 8014014:	d00b      	beq.n	801402e <TIM_Base_SetConfig+0x9a>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	4a28      	ldr	r2, [pc, #160]	; (80140bc <TIM_Base_SetConfig+0x128>)
 801401a:	4293      	cmp	r3, r2
 801401c:	d007      	beq.n	801402e <TIM_Base_SetConfig+0x9a>
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	4a27      	ldr	r2, [pc, #156]	; (80140c0 <TIM_Base_SetConfig+0x12c>)
 8014022:	4293      	cmp	r3, r2
 8014024:	d003      	beq.n	801402e <TIM_Base_SetConfig+0x9a>
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	4a26      	ldr	r2, [pc, #152]	; (80140c4 <TIM_Base_SetConfig+0x130>)
 801402a:	4293      	cmp	r3, r2
 801402c:	d108      	bne.n	8014040 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	68db      	ldr	r3, [r3, #12]
 801403a:	68fa      	ldr	r2, [r7, #12]
 801403c:	4313      	orrs	r3, r2
 801403e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	695b      	ldr	r3, [r3, #20]
 801404a:	4313      	orrs	r3, r2
 801404c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	68fa      	ldr	r2, [r7, #12]
 8014052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	689a      	ldr	r2, [r3, #8]
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	681a      	ldr	r2, [r3, #0]
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	4a10      	ldr	r2, [pc, #64]	; (80140a8 <TIM_Base_SetConfig+0x114>)
 8014068:	4293      	cmp	r3, r2
 801406a:	d00f      	beq.n	801408c <TIM_Base_SetConfig+0xf8>
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	4a12      	ldr	r2, [pc, #72]	; (80140b8 <TIM_Base_SetConfig+0x124>)
 8014070:	4293      	cmp	r3, r2
 8014072:	d00b      	beq.n	801408c <TIM_Base_SetConfig+0xf8>
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	4a11      	ldr	r2, [pc, #68]	; (80140bc <TIM_Base_SetConfig+0x128>)
 8014078:	4293      	cmp	r3, r2
 801407a:	d007      	beq.n	801408c <TIM_Base_SetConfig+0xf8>
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	4a10      	ldr	r2, [pc, #64]	; (80140c0 <TIM_Base_SetConfig+0x12c>)
 8014080:	4293      	cmp	r3, r2
 8014082:	d003      	beq.n	801408c <TIM_Base_SetConfig+0xf8>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	4a0f      	ldr	r2, [pc, #60]	; (80140c4 <TIM_Base_SetConfig+0x130>)
 8014088:	4293      	cmp	r3, r2
 801408a:	d103      	bne.n	8014094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	691a      	ldr	r2, [r3, #16]
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2201      	movs	r2, #1
 8014098:	615a      	str	r2, [r3, #20]
}
 801409a:	bf00      	nop
 801409c:	3714      	adds	r7, #20
 801409e:	46bd      	mov	sp, r7
 80140a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a4:	4770      	bx	lr
 80140a6:	bf00      	nop
 80140a8:	40010000 	.word	0x40010000
 80140ac:	40000400 	.word	0x40000400
 80140b0:	40000800 	.word	0x40000800
 80140b4:	40000c00 	.word	0x40000c00
 80140b8:	40010400 	.word	0x40010400
 80140bc:	40014000 	.word	0x40014000
 80140c0:	40014400 	.word	0x40014400
 80140c4:	40014800 	.word	0x40014800

080140c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80140c8:	b480      	push	{r7}
 80140ca:	b087      	sub	sp, #28
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	60f8      	str	r0, [r7, #12]
 80140d0:	60b9      	str	r1, [r7, #8]
 80140d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	6a1b      	ldr	r3, [r3, #32]
 80140d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	6a1b      	ldr	r3, [r3, #32]
 80140de:	f023 0201 	bic.w	r2, r3, #1
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	699b      	ldr	r3, [r3, #24]
 80140ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80140ec:	693b      	ldr	r3, [r7, #16]
 80140ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80140f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	011b      	lsls	r3, r3, #4
 80140f8:	693a      	ldr	r2, [r7, #16]
 80140fa:	4313      	orrs	r3, r2
 80140fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80140fe:	697b      	ldr	r3, [r7, #20]
 8014100:	f023 030a 	bic.w	r3, r3, #10
 8014104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014106:	697a      	ldr	r2, [r7, #20]
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	4313      	orrs	r3, r2
 801410c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	693a      	ldr	r2, [r7, #16]
 8014112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	697a      	ldr	r2, [r7, #20]
 8014118:	621a      	str	r2, [r3, #32]
}
 801411a:	bf00      	nop
 801411c:	371c      	adds	r7, #28
 801411e:	46bd      	mov	sp, r7
 8014120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014124:	4770      	bx	lr

08014126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014126:	b480      	push	{r7}
 8014128:	b087      	sub	sp, #28
 801412a:	af00      	add	r7, sp, #0
 801412c:	60f8      	str	r0, [r7, #12]
 801412e:	60b9      	str	r1, [r7, #8]
 8014130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	6a1b      	ldr	r3, [r3, #32]
 8014136:	f023 0210 	bic.w	r2, r3, #16
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	699b      	ldr	r3, [r3, #24]
 8014142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	6a1b      	ldr	r3, [r3, #32]
 8014148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801414a:	697b      	ldr	r3, [r7, #20]
 801414c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	031b      	lsls	r3, r3, #12
 8014156:	697a      	ldr	r2, [r7, #20]
 8014158:	4313      	orrs	r3, r2
 801415a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014162:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014164:	68bb      	ldr	r3, [r7, #8]
 8014166:	011b      	lsls	r3, r3, #4
 8014168:	693a      	ldr	r2, [r7, #16]
 801416a:	4313      	orrs	r3, r2
 801416c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	697a      	ldr	r2, [r7, #20]
 8014172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	693a      	ldr	r2, [r7, #16]
 8014178:	621a      	str	r2, [r3, #32]
}
 801417a:	bf00      	nop
 801417c:	371c      	adds	r7, #28
 801417e:	46bd      	mov	sp, r7
 8014180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014184:	4770      	bx	lr
	...

08014188 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014188:	b480      	push	{r7}
 801418a:	b085      	sub	sp, #20
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	689b      	ldr	r3, [r3, #8]
 8014196:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014198:	68fa      	ldr	r2, [r7, #12]
 801419a:	4b09      	ldr	r3, [pc, #36]	; (80141c0 <TIM_ITRx_SetConfig+0x38>)
 801419c:	4013      	ands	r3, r2
 801419e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80141a0:	683a      	ldr	r2, [r7, #0]
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	4313      	orrs	r3, r2
 80141a6:	f043 0307 	orr.w	r3, r3, #7
 80141aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	68fa      	ldr	r2, [r7, #12]
 80141b0:	609a      	str	r2, [r3, #8]
}
 80141b2:	bf00      	nop
 80141b4:	3714      	adds	r7, #20
 80141b6:	46bd      	mov	sp, r7
 80141b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141bc:	4770      	bx	lr
 80141be:	bf00      	nop
 80141c0:	ffcfff8f 	.word	0xffcfff8f

080141c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80141c4:	b480      	push	{r7}
 80141c6:	b087      	sub	sp, #28
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	60f8      	str	r0, [r7, #12]
 80141cc:	60b9      	str	r1, [r7, #8]
 80141ce:	607a      	str	r2, [r7, #4]
 80141d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	689b      	ldr	r3, [r3, #8]
 80141d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80141de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	021a      	lsls	r2, r3, #8
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	431a      	orrs	r2, r3
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	4313      	orrs	r3, r2
 80141ec:	697a      	ldr	r2, [r7, #20]
 80141ee:	4313      	orrs	r3, r2
 80141f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	697a      	ldr	r2, [r7, #20]
 80141f6:	609a      	str	r2, [r3, #8]
}
 80141f8:	bf00      	nop
 80141fa:	371c      	adds	r7, #28
 80141fc:	46bd      	mov	sp, r7
 80141fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014202:	4770      	bx	lr

08014204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014204:	b480      	push	{r7}
 8014206:	b085      	sub	sp, #20
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
 801420c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014214:	2b01      	cmp	r3, #1
 8014216:	d101      	bne.n	801421c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014218:	2302      	movs	r3, #2
 801421a:	e06d      	b.n	80142f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2201      	movs	r2, #1
 8014220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2202      	movs	r2, #2
 8014228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	685b      	ldr	r3, [r3, #4]
 8014232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	689b      	ldr	r3, [r3, #8]
 801423a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	4a30      	ldr	r2, [pc, #192]	; (8014304 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014242:	4293      	cmp	r3, r2
 8014244:	d004      	beq.n	8014250 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	4a2f      	ldr	r2, [pc, #188]	; (8014308 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801424c:	4293      	cmp	r3, r2
 801424e:	d108      	bne.n	8014262 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8014256:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014258:	683b      	ldr	r3, [r7, #0]
 801425a:	685b      	ldr	r3, [r3, #4]
 801425c:	68fa      	ldr	r2, [r7, #12]
 801425e:	4313      	orrs	r3, r2
 8014260:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014268:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	68fa      	ldr	r2, [r7, #12]
 8014270:	4313      	orrs	r3, r2
 8014272:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	68fa      	ldr	r2, [r7, #12]
 801427a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	4a20      	ldr	r2, [pc, #128]	; (8014304 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014282:	4293      	cmp	r3, r2
 8014284:	d022      	beq.n	80142cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801428e:	d01d      	beq.n	80142cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	4a1d      	ldr	r2, [pc, #116]	; (801430c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014296:	4293      	cmp	r3, r2
 8014298:	d018      	beq.n	80142cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	4a1c      	ldr	r2, [pc, #112]	; (8014310 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80142a0:	4293      	cmp	r3, r2
 80142a2:	d013      	beq.n	80142cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	4a1a      	ldr	r2, [pc, #104]	; (8014314 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80142aa:	4293      	cmp	r3, r2
 80142ac:	d00e      	beq.n	80142cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	4a15      	ldr	r2, [pc, #84]	; (8014308 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80142b4:	4293      	cmp	r3, r2
 80142b6:	d009      	beq.n	80142cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	4a16      	ldr	r2, [pc, #88]	; (8014318 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80142be:	4293      	cmp	r3, r2
 80142c0:	d004      	beq.n	80142cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	4a15      	ldr	r2, [pc, #84]	; (801431c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80142c8:	4293      	cmp	r3, r2
 80142ca:	d10c      	bne.n	80142e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80142d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	689b      	ldr	r3, [r3, #8]
 80142d8:	68ba      	ldr	r2, [r7, #8]
 80142da:	4313      	orrs	r3, r2
 80142dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	68ba      	ldr	r2, [r7, #8]
 80142e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2201      	movs	r2, #1
 80142ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2200      	movs	r2, #0
 80142f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80142f6:	2300      	movs	r3, #0
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3714      	adds	r7, #20
 80142fc:	46bd      	mov	sp, r7
 80142fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014302:	4770      	bx	lr
 8014304:	40010000 	.word	0x40010000
 8014308:	40010400 	.word	0x40010400
 801430c:	40000400 	.word	0x40000400
 8014310:	40000800 	.word	0x40000800
 8014314:	40000c00 	.word	0x40000c00
 8014318:	40001800 	.word	0x40001800
 801431c:	40014000 	.word	0x40014000

08014320 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014320:	b480      	push	{r7}
 8014322:	b083      	sub	sp, #12
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014328:	bf00      	nop
 801432a:	370c      	adds	r7, #12
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr

08014334 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014334:	b480      	push	{r7}
 8014336:	b083      	sub	sp, #12
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801433c:	bf00      	nop
 801433e:	370c      	adds	r7, #12
 8014340:	46bd      	mov	sp, r7
 8014342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014346:	4770      	bx	lr

08014348 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014348:	b480      	push	{r7}
 801434a:	b083      	sub	sp, #12
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014350:	bf00      	nop
 8014352:	370c      	adds	r7, #12
 8014354:	46bd      	mov	sp, r7
 8014356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435a:	4770      	bx	lr

0801435c <__assert_func>:
 801435c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801435e:	4614      	mov	r4, r2
 8014360:	461a      	mov	r2, r3
 8014362:	4b09      	ldr	r3, [pc, #36]	; (8014388 <__assert_func+0x2c>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	4605      	mov	r5, r0
 8014368:	68d8      	ldr	r0, [r3, #12]
 801436a:	b14c      	cbz	r4, 8014380 <__assert_func+0x24>
 801436c:	4b07      	ldr	r3, [pc, #28]	; (801438c <__assert_func+0x30>)
 801436e:	9100      	str	r1, [sp, #0]
 8014370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014374:	4906      	ldr	r1, [pc, #24]	; (8014390 <__assert_func+0x34>)
 8014376:	462b      	mov	r3, r5
 8014378:	f000 fa0a 	bl	8014790 <fiprintf>
 801437c:	f000 fc37 	bl	8014bee <abort>
 8014380:	4b04      	ldr	r3, [pc, #16]	; (8014394 <__assert_func+0x38>)
 8014382:	461c      	mov	r4, r3
 8014384:	e7f3      	b.n	801436e <__assert_func+0x12>
 8014386:	bf00      	nop
 8014388:	20000148 	.word	0x20000148
 801438c:	08019d28 	.word	0x08019d28
 8014390:	08019d35 	.word	0x08019d35
 8014394:	08019d63 	.word	0x08019d63

08014398 <malloc>:
 8014398:	4b02      	ldr	r3, [pc, #8]	; (80143a4 <malloc+0xc>)
 801439a:	4601      	mov	r1, r0
 801439c:	6818      	ldr	r0, [r3, #0]
 801439e:	f000 b82b 	b.w	80143f8 <_malloc_r>
 80143a2:	bf00      	nop
 80143a4:	20000148 	.word	0x20000148

080143a8 <free>:
 80143a8:	4b02      	ldr	r3, [pc, #8]	; (80143b4 <free+0xc>)
 80143aa:	4601      	mov	r1, r0
 80143ac:	6818      	ldr	r0, [r3, #0]
 80143ae:	f000 bc25 	b.w	8014bfc <_free_r>
 80143b2:	bf00      	nop
 80143b4:	20000148 	.word	0x20000148

080143b8 <sbrk_aligned>:
 80143b8:	b570      	push	{r4, r5, r6, lr}
 80143ba:	4e0e      	ldr	r6, [pc, #56]	; (80143f4 <sbrk_aligned+0x3c>)
 80143bc:	460c      	mov	r4, r1
 80143be:	6831      	ldr	r1, [r6, #0]
 80143c0:	4605      	mov	r5, r0
 80143c2:	b911      	cbnz	r1, 80143ca <sbrk_aligned+0x12>
 80143c4:	f000 fbb6 	bl	8014b34 <_sbrk_r>
 80143c8:	6030      	str	r0, [r6, #0]
 80143ca:	4621      	mov	r1, r4
 80143cc:	4628      	mov	r0, r5
 80143ce:	f000 fbb1 	bl	8014b34 <_sbrk_r>
 80143d2:	1c43      	adds	r3, r0, #1
 80143d4:	d00a      	beq.n	80143ec <sbrk_aligned+0x34>
 80143d6:	1cc4      	adds	r4, r0, #3
 80143d8:	f024 0403 	bic.w	r4, r4, #3
 80143dc:	42a0      	cmp	r0, r4
 80143de:	d007      	beq.n	80143f0 <sbrk_aligned+0x38>
 80143e0:	1a21      	subs	r1, r4, r0
 80143e2:	4628      	mov	r0, r5
 80143e4:	f000 fba6 	bl	8014b34 <_sbrk_r>
 80143e8:	3001      	adds	r0, #1
 80143ea:	d101      	bne.n	80143f0 <sbrk_aligned+0x38>
 80143ec:	f04f 34ff 	mov.w	r4, #4294967295
 80143f0:	4620      	mov	r0, r4
 80143f2:	bd70      	pop	{r4, r5, r6, pc}
 80143f4:	20000688 	.word	0x20000688

080143f8 <_malloc_r>:
 80143f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143fc:	1ccd      	adds	r5, r1, #3
 80143fe:	f025 0503 	bic.w	r5, r5, #3
 8014402:	3508      	adds	r5, #8
 8014404:	2d0c      	cmp	r5, #12
 8014406:	bf38      	it	cc
 8014408:	250c      	movcc	r5, #12
 801440a:	2d00      	cmp	r5, #0
 801440c:	4607      	mov	r7, r0
 801440e:	db01      	blt.n	8014414 <_malloc_r+0x1c>
 8014410:	42a9      	cmp	r1, r5
 8014412:	d905      	bls.n	8014420 <_malloc_r+0x28>
 8014414:	230c      	movs	r3, #12
 8014416:	603b      	str	r3, [r7, #0]
 8014418:	2600      	movs	r6, #0
 801441a:	4630      	mov	r0, r6
 801441c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014420:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80144f4 <_malloc_r+0xfc>
 8014424:	f000 f868 	bl	80144f8 <__malloc_lock>
 8014428:	f8d8 3000 	ldr.w	r3, [r8]
 801442c:	461c      	mov	r4, r3
 801442e:	bb5c      	cbnz	r4, 8014488 <_malloc_r+0x90>
 8014430:	4629      	mov	r1, r5
 8014432:	4638      	mov	r0, r7
 8014434:	f7ff ffc0 	bl	80143b8 <sbrk_aligned>
 8014438:	1c43      	adds	r3, r0, #1
 801443a:	4604      	mov	r4, r0
 801443c:	d155      	bne.n	80144ea <_malloc_r+0xf2>
 801443e:	f8d8 4000 	ldr.w	r4, [r8]
 8014442:	4626      	mov	r6, r4
 8014444:	2e00      	cmp	r6, #0
 8014446:	d145      	bne.n	80144d4 <_malloc_r+0xdc>
 8014448:	2c00      	cmp	r4, #0
 801444a:	d048      	beq.n	80144de <_malloc_r+0xe6>
 801444c:	6823      	ldr	r3, [r4, #0]
 801444e:	4631      	mov	r1, r6
 8014450:	4638      	mov	r0, r7
 8014452:	eb04 0903 	add.w	r9, r4, r3
 8014456:	f000 fb6d 	bl	8014b34 <_sbrk_r>
 801445a:	4581      	cmp	r9, r0
 801445c:	d13f      	bne.n	80144de <_malloc_r+0xe6>
 801445e:	6821      	ldr	r1, [r4, #0]
 8014460:	1a6d      	subs	r5, r5, r1
 8014462:	4629      	mov	r1, r5
 8014464:	4638      	mov	r0, r7
 8014466:	f7ff ffa7 	bl	80143b8 <sbrk_aligned>
 801446a:	3001      	adds	r0, #1
 801446c:	d037      	beq.n	80144de <_malloc_r+0xe6>
 801446e:	6823      	ldr	r3, [r4, #0]
 8014470:	442b      	add	r3, r5
 8014472:	6023      	str	r3, [r4, #0]
 8014474:	f8d8 3000 	ldr.w	r3, [r8]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d038      	beq.n	80144ee <_malloc_r+0xf6>
 801447c:	685a      	ldr	r2, [r3, #4]
 801447e:	42a2      	cmp	r2, r4
 8014480:	d12b      	bne.n	80144da <_malloc_r+0xe2>
 8014482:	2200      	movs	r2, #0
 8014484:	605a      	str	r2, [r3, #4]
 8014486:	e00f      	b.n	80144a8 <_malloc_r+0xb0>
 8014488:	6822      	ldr	r2, [r4, #0]
 801448a:	1b52      	subs	r2, r2, r5
 801448c:	d41f      	bmi.n	80144ce <_malloc_r+0xd6>
 801448e:	2a0b      	cmp	r2, #11
 8014490:	d917      	bls.n	80144c2 <_malloc_r+0xca>
 8014492:	1961      	adds	r1, r4, r5
 8014494:	42a3      	cmp	r3, r4
 8014496:	6025      	str	r5, [r4, #0]
 8014498:	bf18      	it	ne
 801449a:	6059      	strne	r1, [r3, #4]
 801449c:	6863      	ldr	r3, [r4, #4]
 801449e:	bf08      	it	eq
 80144a0:	f8c8 1000 	streq.w	r1, [r8]
 80144a4:	5162      	str	r2, [r4, r5]
 80144a6:	604b      	str	r3, [r1, #4]
 80144a8:	4638      	mov	r0, r7
 80144aa:	f104 060b 	add.w	r6, r4, #11
 80144ae:	f000 f829 	bl	8014504 <__malloc_unlock>
 80144b2:	f026 0607 	bic.w	r6, r6, #7
 80144b6:	1d23      	adds	r3, r4, #4
 80144b8:	1af2      	subs	r2, r6, r3
 80144ba:	d0ae      	beq.n	801441a <_malloc_r+0x22>
 80144bc:	1b9b      	subs	r3, r3, r6
 80144be:	50a3      	str	r3, [r4, r2]
 80144c0:	e7ab      	b.n	801441a <_malloc_r+0x22>
 80144c2:	42a3      	cmp	r3, r4
 80144c4:	6862      	ldr	r2, [r4, #4]
 80144c6:	d1dd      	bne.n	8014484 <_malloc_r+0x8c>
 80144c8:	f8c8 2000 	str.w	r2, [r8]
 80144cc:	e7ec      	b.n	80144a8 <_malloc_r+0xb0>
 80144ce:	4623      	mov	r3, r4
 80144d0:	6864      	ldr	r4, [r4, #4]
 80144d2:	e7ac      	b.n	801442e <_malloc_r+0x36>
 80144d4:	4634      	mov	r4, r6
 80144d6:	6876      	ldr	r6, [r6, #4]
 80144d8:	e7b4      	b.n	8014444 <_malloc_r+0x4c>
 80144da:	4613      	mov	r3, r2
 80144dc:	e7cc      	b.n	8014478 <_malloc_r+0x80>
 80144de:	230c      	movs	r3, #12
 80144e0:	603b      	str	r3, [r7, #0]
 80144e2:	4638      	mov	r0, r7
 80144e4:	f000 f80e 	bl	8014504 <__malloc_unlock>
 80144e8:	e797      	b.n	801441a <_malloc_r+0x22>
 80144ea:	6025      	str	r5, [r4, #0]
 80144ec:	e7dc      	b.n	80144a8 <_malloc_r+0xb0>
 80144ee:	605b      	str	r3, [r3, #4]
 80144f0:	deff      	udf	#255	; 0xff
 80144f2:	bf00      	nop
 80144f4:	20000684 	.word	0x20000684

080144f8 <__malloc_lock>:
 80144f8:	4801      	ldr	r0, [pc, #4]	; (8014500 <__malloc_lock+0x8>)
 80144fa:	f000 bb68 	b.w	8014bce <__retarget_lock_acquire_recursive>
 80144fe:	bf00      	nop
 8014500:	200007cc 	.word	0x200007cc

08014504 <__malloc_unlock>:
 8014504:	4801      	ldr	r0, [pc, #4]	; (801450c <__malloc_unlock+0x8>)
 8014506:	f000 bb63 	b.w	8014bd0 <__retarget_lock_release_recursive>
 801450a:	bf00      	nop
 801450c:	200007cc 	.word	0x200007cc

08014510 <srand>:
 8014510:	b538      	push	{r3, r4, r5, lr}
 8014512:	4b10      	ldr	r3, [pc, #64]	; (8014554 <srand+0x44>)
 8014514:	681d      	ldr	r5, [r3, #0]
 8014516:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014518:	4604      	mov	r4, r0
 801451a:	b9b3      	cbnz	r3, 801454a <srand+0x3a>
 801451c:	2018      	movs	r0, #24
 801451e:	f7ff ff3b 	bl	8014398 <malloc>
 8014522:	4602      	mov	r2, r0
 8014524:	6328      	str	r0, [r5, #48]	; 0x30
 8014526:	b920      	cbnz	r0, 8014532 <srand+0x22>
 8014528:	4b0b      	ldr	r3, [pc, #44]	; (8014558 <srand+0x48>)
 801452a:	480c      	ldr	r0, [pc, #48]	; (801455c <srand+0x4c>)
 801452c:	2146      	movs	r1, #70	; 0x46
 801452e:	f7ff ff15 	bl	801435c <__assert_func>
 8014532:	490b      	ldr	r1, [pc, #44]	; (8014560 <srand+0x50>)
 8014534:	4b0b      	ldr	r3, [pc, #44]	; (8014564 <srand+0x54>)
 8014536:	e9c0 1300 	strd	r1, r3, [r0]
 801453a:	4b0b      	ldr	r3, [pc, #44]	; (8014568 <srand+0x58>)
 801453c:	6083      	str	r3, [r0, #8]
 801453e:	230b      	movs	r3, #11
 8014540:	8183      	strh	r3, [r0, #12]
 8014542:	2100      	movs	r1, #0
 8014544:	2001      	movs	r0, #1
 8014546:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801454a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801454c:	2200      	movs	r2, #0
 801454e:	611c      	str	r4, [r3, #16]
 8014550:	615a      	str	r2, [r3, #20]
 8014552:	bd38      	pop	{r3, r4, r5, pc}
 8014554:	20000148 	.word	0x20000148
 8014558:	08019d64 	.word	0x08019d64
 801455c:	08019d7b 	.word	0x08019d7b
 8014560:	abcd330e 	.word	0xabcd330e
 8014564:	e66d1234 	.word	0xe66d1234
 8014568:	0005deec 	.word	0x0005deec

0801456c <rand>:
 801456c:	4b16      	ldr	r3, [pc, #88]	; (80145c8 <rand+0x5c>)
 801456e:	b510      	push	{r4, lr}
 8014570:	681c      	ldr	r4, [r3, #0]
 8014572:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014574:	b9b3      	cbnz	r3, 80145a4 <rand+0x38>
 8014576:	2018      	movs	r0, #24
 8014578:	f7ff ff0e 	bl	8014398 <malloc>
 801457c:	4602      	mov	r2, r0
 801457e:	6320      	str	r0, [r4, #48]	; 0x30
 8014580:	b920      	cbnz	r0, 801458c <rand+0x20>
 8014582:	4b12      	ldr	r3, [pc, #72]	; (80145cc <rand+0x60>)
 8014584:	4812      	ldr	r0, [pc, #72]	; (80145d0 <rand+0x64>)
 8014586:	2152      	movs	r1, #82	; 0x52
 8014588:	f7ff fee8 	bl	801435c <__assert_func>
 801458c:	4911      	ldr	r1, [pc, #68]	; (80145d4 <rand+0x68>)
 801458e:	4b12      	ldr	r3, [pc, #72]	; (80145d8 <rand+0x6c>)
 8014590:	e9c0 1300 	strd	r1, r3, [r0]
 8014594:	4b11      	ldr	r3, [pc, #68]	; (80145dc <rand+0x70>)
 8014596:	6083      	str	r3, [r0, #8]
 8014598:	230b      	movs	r3, #11
 801459a:	8183      	strh	r3, [r0, #12]
 801459c:	2100      	movs	r1, #0
 801459e:	2001      	movs	r0, #1
 80145a0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80145a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80145a6:	480e      	ldr	r0, [pc, #56]	; (80145e0 <rand+0x74>)
 80145a8:	690b      	ldr	r3, [r1, #16]
 80145aa:	694c      	ldr	r4, [r1, #20]
 80145ac:	4a0d      	ldr	r2, [pc, #52]	; (80145e4 <rand+0x78>)
 80145ae:	4358      	muls	r0, r3
 80145b0:	fb02 0004 	mla	r0, r2, r4, r0
 80145b4:	fba3 3202 	umull	r3, r2, r3, r2
 80145b8:	3301      	adds	r3, #1
 80145ba:	eb40 0002 	adc.w	r0, r0, r2
 80145be:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80145c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80145c6:	bd10      	pop	{r4, pc}
 80145c8:	20000148 	.word	0x20000148
 80145cc:	08019d64 	.word	0x08019d64
 80145d0:	08019d7b 	.word	0x08019d7b
 80145d4:	abcd330e 	.word	0xabcd330e
 80145d8:	e66d1234 	.word	0xe66d1234
 80145dc:	0005deec 	.word	0x0005deec
 80145e0:	5851f42d 	.word	0x5851f42d
 80145e4:	4c957f2d 	.word	0x4c957f2d

080145e8 <_realloc_r>:
 80145e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145ec:	4680      	mov	r8, r0
 80145ee:	4614      	mov	r4, r2
 80145f0:	460e      	mov	r6, r1
 80145f2:	b921      	cbnz	r1, 80145fe <_realloc_r+0x16>
 80145f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145f8:	4611      	mov	r1, r2
 80145fa:	f7ff befd 	b.w	80143f8 <_malloc_r>
 80145fe:	b92a      	cbnz	r2, 801460c <_realloc_r+0x24>
 8014600:	f000 fafc 	bl	8014bfc <_free_r>
 8014604:	4625      	mov	r5, r4
 8014606:	4628      	mov	r0, r5
 8014608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801460c:	f000 fb42 	bl	8014c94 <_malloc_usable_size_r>
 8014610:	4284      	cmp	r4, r0
 8014612:	4607      	mov	r7, r0
 8014614:	d802      	bhi.n	801461c <_realloc_r+0x34>
 8014616:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801461a:	d812      	bhi.n	8014642 <_realloc_r+0x5a>
 801461c:	4621      	mov	r1, r4
 801461e:	4640      	mov	r0, r8
 8014620:	f7ff feea 	bl	80143f8 <_malloc_r>
 8014624:	4605      	mov	r5, r0
 8014626:	2800      	cmp	r0, #0
 8014628:	d0ed      	beq.n	8014606 <_realloc_r+0x1e>
 801462a:	42bc      	cmp	r4, r7
 801462c:	4622      	mov	r2, r4
 801462e:	4631      	mov	r1, r6
 8014630:	bf28      	it	cs
 8014632:	463a      	movcs	r2, r7
 8014634:	f000 facd 	bl	8014bd2 <memcpy>
 8014638:	4631      	mov	r1, r6
 801463a:	4640      	mov	r0, r8
 801463c:	f000 fade 	bl	8014bfc <_free_r>
 8014640:	e7e1      	b.n	8014606 <_realloc_r+0x1e>
 8014642:	4635      	mov	r5, r6
 8014644:	e7df      	b.n	8014606 <_realloc_r+0x1e>
	...

08014648 <std>:
 8014648:	2300      	movs	r3, #0
 801464a:	b510      	push	{r4, lr}
 801464c:	4604      	mov	r4, r0
 801464e:	e9c0 3300 	strd	r3, r3, [r0]
 8014652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014656:	6083      	str	r3, [r0, #8]
 8014658:	8181      	strh	r1, [r0, #12]
 801465a:	6643      	str	r3, [r0, #100]	; 0x64
 801465c:	81c2      	strh	r2, [r0, #14]
 801465e:	6183      	str	r3, [r0, #24]
 8014660:	4619      	mov	r1, r3
 8014662:	2208      	movs	r2, #8
 8014664:	305c      	adds	r0, #92	; 0x5c
 8014666:	f000 fa29 	bl	8014abc <memset>
 801466a:	4b0d      	ldr	r3, [pc, #52]	; (80146a0 <std+0x58>)
 801466c:	6263      	str	r3, [r4, #36]	; 0x24
 801466e:	4b0d      	ldr	r3, [pc, #52]	; (80146a4 <std+0x5c>)
 8014670:	62a3      	str	r3, [r4, #40]	; 0x28
 8014672:	4b0d      	ldr	r3, [pc, #52]	; (80146a8 <std+0x60>)
 8014674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014676:	4b0d      	ldr	r3, [pc, #52]	; (80146ac <std+0x64>)
 8014678:	6323      	str	r3, [r4, #48]	; 0x30
 801467a:	4b0d      	ldr	r3, [pc, #52]	; (80146b0 <std+0x68>)
 801467c:	6224      	str	r4, [r4, #32]
 801467e:	429c      	cmp	r4, r3
 8014680:	d006      	beq.n	8014690 <std+0x48>
 8014682:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014686:	4294      	cmp	r4, r2
 8014688:	d002      	beq.n	8014690 <std+0x48>
 801468a:	33d0      	adds	r3, #208	; 0xd0
 801468c:	429c      	cmp	r4, r3
 801468e:	d105      	bne.n	801469c <std+0x54>
 8014690:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014698:	f000 ba98 	b.w	8014bcc <__retarget_lock_init_recursive>
 801469c:	bd10      	pop	{r4, pc}
 801469e:	bf00      	nop
 80146a0:	0801490d 	.word	0x0801490d
 80146a4:	0801492f 	.word	0x0801492f
 80146a8:	08014967 	.word	0x08014967
 80146ac:	0801498b 	.word	0x0801498b
 80146b0:	2000068c 	.word	0x2000068c

080146b4 <stdio_exit_handler>:
 80146b4:	4a02      	ldr	r2, [pc, #8]	; (80146c0 <stdio_exit_handler+0xc>)
 80146b6:	4903      	ldr	r1, [pc, #12]	; (80146c4 <stdio_exit_handler+0x10>)
 80146b8:	4803      	ldr	r0, [pc, #12]	; (80146c8 <stdio_exit_handler+0x14>)
 80146ba:	f000 b87b 	b.w	80147b4 <_fwalk_sglue>
 80146be:	bf00      	nop
 80146c0:	200000f0 	.word	0x200000f0
 80146c4:	08015609 	.word	0x08015609
 80146c8:	200000fc 	.word	0x200000fc

080146cc <cleanup_stdio>:
 80146cc:	6841      	ldr	r1, [r0, #4]
 80146ce:	4b0c      	ldr	r3, [pc, #48]	; (8014700 <cleanup_stdio+0x34>)
 80146d0:	4299      	cmp	r1, r3
 80146d2:	b510      	push	{r4, lr}
 80146d4:	4604      	mov	r4, r0
 80146d6:	d001      	beq.n	80146dc <cleanup_stdio+0x10>
 80146d8:	f000 ff96 	bl	8015608 <_fflush_r>
 80146dc:	68a1      	ldr	r1, [r4, #8]
 80146de:	4b09      	ldr	r3, [pc, #36]	; (8014704 <cleanup_stdio+0x38>)
 80146e0:	4299      	cmp	r1, r3
 80146e2:	d002      	beq.n	80146ea <cleanup_stdio+0x1e>
 80146e4:	4620      	mov	r0, r4
 80146e6:	f000 ff8f 	bl	8015608 <_fflush_r>
 80146ea:	68e1      	ldr	r1, [r4, #12]
 80146ec:	4b06      	ldr	r3, [pc, #24]	; (8014708 <cleanup_stdio+0x3c>)
 80146ee:	4299      	cmp	r1, r3
 80146f0:	d004      	beq.n	80146fc <cleanup_stdio+0x30>
 80146f2:	4620      	mov	r0, r4
 80146f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146f8:	f000 bf86 	b.w	8015608 <_fflush_r>
 80146fc:	bd10      	pop	{r4, pc}
 80146fe:	bf00      	nop
 8014700:	2000068c 	.word	0x2000068c
 8014704:	200006f4 	.word	0x200006f4
 8014708:	2000075c 	.word	0x2000075c

0801470c <global_stdio_init.part.0>:
 801470c:	b510      	push	{r4, lr}
 801470e:	4b0b      	ldr	r3, [pc, #44]	; (801473c <global_stdio_init.part.0+0x30>)
 8014710:	4c0b      	ldr	r4, [pc, #44]	; (8014740 <global_stdio_init.part.0+0x34>)
 8014712:	4a0c      	ldr	r2, [pc, #48]	; (8014744 <global_stdio_init.part.0+0x38>)
 8014714:	601a      	str	r2, [r3, #0]
 8014716:	4620      	mov	r0, r4
 8014718:	2200      	movs	r2, #0
 801471a:	2104      	movs	r1, #4
 801471c:	f7ff ff94 	bl	8014648 <std>
 8014720:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014724:	2201      	movs	r2, #1
 8014726:	2109      	movs	r1, #9
 8014728:	f7ff ff8e 	bl	8014648 <std>
 801472c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014730:	2202      	movs	r2, #2
 8014732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014736:	2112      	movs	r1, #18
 8014738:	f7ff bf86 	b.w	8014648 <std>
 801473c:	200007c4 	.word	0x200007c4
 8014740:	2000068c 	.word	0x2000068c
 8014744:	080146b5 	.word	0x080146b5

08014748 <__sfp_lock_acquire>:
 8014748:	4801      	ldr	r0, [pc, #4]	; (8014750 <__sfp_lock_acquire+0x8>)
 801474a:	f000 ba40 	b.w	8014bce <__retarget_lock_acquire_recursive>
 801474e:	bf00      	nop
 8014750:	200007cd 	.word	0x200007cd

08014754 <__sfp_lock_release>:
 8014754:	4801      	ldr	r0, [pc, #4]	; (801475c <__sfp_lock_release+0x8>)
 8014756:	f000 ba3b 	b.w	8014bd0 <__retarget_lock_release_recursive>
 801475a:	bf00      	nop
 801475c:	200007cd 	.word	0x200007cd

08014760 <__sinit>:
 8014760:	b510      	push	{r4, lr}
 8014762:	4604      	mov	r4, r0
 8014764:	f7ff fff0 	bl	8014748 <__sfp_lock_acquire>
 8014768:	6a23      	ldr	r3, [r4, #32]
 801476a:	b11b      	cbz	r3, 8014774 <__sinit+0x14>
 801476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014770:	f7ff bff0 	b.w	8014754 <__sfp_lock_release>
 8014774:	4b04      	ldr	r3, [pc, #16]	; (8014788 <__sinit+0x28>)
 8014776:	6223      	str	r3, [r4, #32]
 8014778:	4b04      	ldr	r3, [pc, #16]	; (801478c <__sinit+0x2c>)
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d1f5      	bne.n	801476c <__sinit+0xc>
 8014780:	f7ff ffc4 	bl	801470c <global_stdio_init.part.0>
 8014784:	e7f2      	b.n	801476c <__sinit+0xc>
 8014786:	bf00      	nop
 8014788:	080146cd 	.word	0x080146cd
 801478c:	200007c4 	.word	0x200007c4

08014790 <fiprintf>:
 8014790:	b40e      	push	{r1, r2, r3}
 8014792:	b503      	push	{r0, r1, lr}
 8014794:	4601      	mov	r1, r0
 8014796:	ab03      	add	r3, sp, #12
 8014798:	4805      	ldr	r0, [pc, #20]	; (80147b0 <fiprintf+0x20>)
 801479a:	f853 2b04 	ldr.w	r2, [r3], #4
 801479e:	6800      	ldr	r0, [r0, #0]
 80147a0:	9301      	str	r3, [sp, #4]
 80147a2:	f000 fc01 	bl	8014fa8 <_vfiprintf_r>
 80147a6:	b002      	add	sp, #8
 80147a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80147ac:	b003      	add	sp, #12
 80147ae:	4770      	bx	lr
 80147b0:	20000148 	.word	0x20000148

080147b4 <_fwalk_sglue>:
 80147b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147b8:	4607      	mov	r7, r0
 80147ba:	4688      	mov	r8, r1
 80147bc:	4614      	mov	r4, r2
 80147be:	2600      	movs	r6, #0
 80147c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80147c4:	f1b9 0901 	subs.w	r9, r9, #1
 80147c8:	d505      	bpl.n	80147d6 <_fwalk_sglue+0x22>
 80147ca:	6824      	ldr	r4, [r4, #0]
 80147cc:	2c00      	cmp	r4, #0
 80147ce:	d1f7      	bne.n	80147c0 <_fwalk_sglue+0xc>
 80147d0:	4630      	mov	r0, r6
 80147d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147d6:	89ab      	ldrh	r3, [r5, #12]
 80147d8:	2b01      	cmp	r3, #1
 80147da:	d907      	bls.n	80147ec <_fwalk_sglue+0x38>
 80147dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80147e0:	3301      	adds	r3, #1
 80147e2:	d003      	beq.n	80147ec <_fwalk_sglue+0x38>
 80147e4:	4629      	mov	r1, r5
 80147e6:	4638      	mov	r0, r7
 80147e8:	47c0      	blx	r8
 80147ea:	4306      	orrs	r6, r0
 80147ec:	3568      	adds	r5, #104	; 0x68
 80147ee:	e7e9      	b.n	80147c4 <_fwalk_sglue+0x10>

080147f0 <iprintf>:
 80147f0:	b40f      	push	{r0, r1, r2, r3}
 80147f2:	b507      	push	{r0, r1, r2, lr}
 80147f4:	4906      	ldr	r1, [pc, #24]	; (8014810 <iprintf+0x20>)
 80147f6:	ab04      	add	r3, sp, #16
 80147f8:	6808      	ldr	r0, [r1, #0]
 80147fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80147fe:	6881      	ldr	r1, [r0, #8]
 8014800:	9301      	str	r3, [sp, #4]
 8014802:	f000 fbd1 	bl	8014fa8 <_vfiprintf_r>
 8014806:	b003      	add	sp, #12
 8014808:	f85d eb04 	ldr.w	lr, [sp], #4
 801480c:	b004      	add	sp, #16
 801480e:	4770      	bx	lr
 8014810:	20000148 	.word	0x20000148

08014814 <_puts_r>:
 8014814:	6a03      	ldr	r3, [r0, #32]
 8014816:	b570      	push	{r4, r5, r6, lr}
 8014818:	6884      	ldr	r4, [r0, #8]
 801481a:	4605      	mov	r5, r0
 801481c:	460e      	mov	r6, r1
 801481e:	b90b      	cbnz	r3, 8014824 <_puts_r+0x10>
 8014820:	f7ff ff9e 	bl	8014760 <__sinit>
 8014824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014826:	07db      	lsls	r3, r3, #31
 8014828:	d405      	bmi.n	8014836 <_puts_r+0x22>
 801482a:	89a3      	ldrh	r3, [r4, #12]
 801482c:	0598      	lsls	r0, r3, #22
 801482e:	d402      	bmi.n	8014836 <_puts_r+0x22>
 8014830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014832:	f000 f9cc 	bl	8014bce <__retarget_lock_acquire_recursive>
 8014836:	89a3      	ldrh	r3, [r4, #12]
 8014838:	0719      	lsls	r1, r3, #28
 801483a:	d513      	bpl.n	8014864 <_puts_r+0x50>
 801483c:	6923      	ldr	r3, [r4, #16]
 801483e:	b18b      	cbz	r3, 8014864 <_puts_r+0x50>
 8014840:	3e01      	subs	r6, #1
 8014842:	68a3      	ldr	r3, [r4, #8]
 8014844:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014848:	3b01      	subs	r3, #1
 801484a:	60a3      	str	r3, [r4, #8]
 801484c:	b9e9      	cbnz	r1, 801488a <_puts_r+0x76>
 801484e:	2b00      	cmp	r3, #0
 8014850:	da2e      	bge.n	80148b0 <_puts_r+0x9c>
 8014852:	4622      	mov	r2, r4
 8014854:	210a      	movs	r1, #10
 8014856:	4628      	mov	r0, r5
 8014858:	f000 f89b 	bl	8014992 <__swbuf_r>
 801485c:	3001      	adds	r0, #1
 801485e:	d007      	beq.n	8014870 <_puts_r+0x5c>
 8014860:	250a      	movs	r5, #10
 8014862:	e007      	b.n	8014874 <_puts_r+0x60>
 8014864:	4621      	mov	r1, r4
 8014866:	4628      	mov	r0, r5
 8014868:	f000 f8d0 	bl	8014a0c <__swsetup_r>
 801486c:	2800      	cmp	r0, #0
 801486e:	d0e7      	beq.n	8014840 <_puts_r+0x2c>
 8014870:	f04f 35ff 	mov.w	r5, #4294967295
 8014874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014876:	07da      	lsls	r2, r3, #31
 8014878:	d405      	bmi.n	8014886 <_puts_r+0x72>
 801487a:	89a3      	ldrh	r3, [r4, #12]
 801487c:	059b      	lsls	r3, r3, #22
 801487e:	d402      	bmi.n	8014886 <_puts_r+0x72>
 8014880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014882:	f000 f9a5 	bl	8014bd0 <__retarget_lock_release_recursive>
 8014886:	4628      	mov	r0, r5
 8014888:	bd70      	pop	{r4, r5, r6, pc}
 801488a:	2b00      	cmp	r3, #0
 801488c:	da04      	bge.n	8014898 <_puts_r+0x84>
 801488e:	69a2      	ldr	r2, [r4, #24]
 8014890:	429a      	cmp	r2, r3
 8014892:	dc06      	bgt.n	80148a2 <_puts_r+0x8e>
 8014894:	290a      	cmp	r1, #10
 8014896:	d004      	beq.n	80148a2 <_puts_r+0x8e>
 8014898:	6823      	ldr	r3, [r4, #0]
 801489a:	1c5a      	adds	r2, r3, #1
 801489c:	6022      	str	r2, [r4, #0]
 801489e:	7019      	strb	r1, [r3, #0]
 80148a0:	e7cf      	b.n	8014842 <_puts_r+0x2e>
 80148a2:	4622      	mov	r2, r4
 80148a4:	4628      	mov	r0, r5
 80148a6:	f000 f874 	bl	8014992 <__swbuf_r>
 80148aa:	3001      	adds	r0, #1
 80148ac:	d1c9      	bne.n	8014842 <_puts_r+0x2e>
 80148ae:	e7df      	b.n	8014870 <_puts_r+0x5c>
 80148b0:	6823      	ldr	r3, [r4, #0]
 80148b2:	250a      	movs	r5, #10
 80148b4:	1c5a      	adds	r2, r3, #1
 80148b6:	6022      	str	r2, [r4, #0]
 80148b8:	701d      	strb	r5, [r3, #0]
 80148ba:	e7db      	b.n	8014874 <_puts_r+0x60>

080148bc <puts>:
 80148bc:	4b02      	ldr	r3, [pc, #8]	; (80148c8 <puts+0xc>)
 80148be:	4601      	mov	r1, r0
 80148c0:	6818      	ldr	r0, [r3, #0]
 80148c2:	f7ff bfa7 	b.w	8014814 <_puts_r>
 80148c6:	bf00      	nop
 80148c8:	20000148 	.word	0x20000148

080148cc <siprintf>:
 80148cc:	b40e      	push	{r1, r2, r3}
 80148ce:	b500      	push	{lr}
 80148d0:	b09c      	sub	sp, #112	; 0x70
 80148d2:	ab1d      	add	r3, sp, #116	; 0x74
 80148d4:	9002      	str	r0, [sp, #8]
 80148d6:	9006      	str	r0, [sp, #24]
 80148d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80148dc:	4809      	ldr	r0, [pc, #36]	; (8014904 <siprintf+0x38>)
 80148de:	9107      	str	r1, [sp, #28]
 80148e0:	9104      	str	r1, [sp, #16]
 80148e2:	4909      	ldr	r1, [pc, #36]	; (8014908 <siprintf+0x3c>)
 80148e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80148e8:	9105      	str	r1, [sp, #20]
 80148ea:	6800      	ldr	r0, [r0, #0]
 80148ec:	9301      	str	r3, [sp, #4]
 80148ee:	a902      	add	r1, sp, #8
 80148f0:	f000 fa32 	bl	8014d58 <_svfiprintf_r>
 80148f4:	9b02      	ldr	r3, [sp, #8]
 80148f6:	2200      	movs	r2, #0
 80148f8:	701a      	strb	r2, [r3, #0]
 80148fa:	b01c      	add	sp, #112	; 0x70
 80148fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014900:	b003      	add	sp, #12
 8014902:	4770      	bx	lr
 8014904:	20000148 	.word	0x20000148
 8014908:	ffff0208 	.word	0xffff0208

0801490c <__sread>:
 801490c:	b510      	push	{r4, lr}
 801490e:	460c      	mov	r4, r1
 8014910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014914:	f000 f8fc 	bl	8014b10 <_read_r>
 8014918:	2800      	cmp	r0, #0
 801491a:	bfab      	itete	ge
 801491c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801491e:	89a3      	ldrhlt	r3, [r4, #12]
 8014920:	181b      	addge	r3, r3, r0
 8014922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014926:	bfac      	ite	ge
 8014928:	6563      	strge	r3, [r4, #84]	; 0x54
 801492a:	81a3      	strhlt	r3, [r4, #12]
 801492c:	bd10      	pop	{r4, pc}

0801492e <__swrite>:
 801492e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014932:	461f      	mov	r7, r3
 8014934:	898b      	ldrh	r3, [r1, #12]
 8014936:	05db      	lsls	r3, r3, #23
 8014938:	4605      	mov	r5, r0
 801493a:	460c      	mov	r4, r1
 801493c:	4616      	mov	r6, r2
 801493e:	d505      	bpl.n	801494c <__swrite+0x1e>
 8014940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014944:	2302      	movs	r3, #2
 8014946:	2200      	movs	r2, #0
 8014948:	f000 f8d0 	bl	8014aec <_lseek_r>
 801494c:	89a3      	ldrh	r3, [r4, #12]
 801494e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014956:	81a3      	strh	r3, [r4, #12]
 8014958:	4632      	mov	r2, r6
 801495a:	463b      	mov	r3, r7
 801495c:	4628      	mov	r0, r5
 801495e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014962:	f000 b8f7 	b.w	8014b54 <_write_r>

08014966 <__sseek>:
 8014966:	b510      	push	{r4, lr}
 8014968:	460c      	mov	r4, r1
 801496a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801496e:	f000 f8bd 	bl	8014aec <_lseek_r>
 8014972:	1c43      	adds	r3, r0, #1
 8014974:	89a3      	ldrh	r3, [r4, #12]
 8014976:	bf15      	itete	ne
 8014978:	6560      	strne	r0, [r4, #84]	; 0x54
 801497a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801497e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014982:	81a3      	strheq	r3, [r4, #12]
 8014984:	bf18      	it	ne
 8014986:	81a3      	strhne	r3, [r4, #12]
 8014988:	bd10      	pop	{r4, pc}

0801498a <__sclose>:
 801498a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801498e:	f000 b89d 	b.w	8014acc <_close_r>

08014992 <__swbuf_r>:
 8014992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014994:	460e      	mov	r6, r1
 8014996:	4614      	mov	r4, r2
 8014998:	4605      	mov	r5, r0
 801499a:	b118      	cbz	r0, 80149a4 <__swbuf_r+0x12>
 801499c:	6a03      	ldr	r3, [r0, #32]
 801499e:	b90b      	cbnz	r3, 80149a4 <__swbuf_r+0x12>
 80149a0:	f7ff fede 	bl	8014760 <__sinit>
 80149a4:	69a3      	ldr	r3, [r4, #24]
 80149a6:	60a3      	str	r3, [r4, #8]
 80149a8:	89a3      	ldrh	r3, [r4, #12]
 80149aa:	071a      	lsls	r2, r3, #28
 80149ac:	d525      	bpl.n	80149fa <__swbuf_r+0x68>
 80149ae:	6923      	ldr	r3, [r4, #16]
 80149b0:	b31b      	cbz	r3, 80149fa <__swbuf_r+0x68>
 80149b2:	6823      	ldr	r3, [r4, #0]
 80149b4:	6922      	ldr	r2, [r4, #16]
 80149b6:	1a98      	subs	r0, r3, r2
 80149b8:	6963      	ldr	r3, [r4, #20]
 80149ba:	b2f6      	uxtb	r6, r6
 80149bc:	4283      	cmp	r3, r0
 80149be:	4637      	mov	r7, r6
 80149c0:	dc04      	bgt.n	80149cc <__swbuf_r+0x3a>
 80149c2:	4621      	mov	r1, r4
 80149c4:	4628      	mov	r0, r5
 80149c6:	f000 fe1f 	bl	8015608 <_fflush_r>
 80149ca:	b9e0      	cbnz	r0, 8014a06 <__swbuf_r+0x74>
 80149cc:	68a3      	ldr	r3, [r4, #8]
 80149ce:	3b01      	subs	r3, #1
 80149d0:	60a3      	str	r3, [r4, #8]
 80149d2:	6823      	ldr	r3, [r4, #0]
 80149d4:	1c5a      	adds	r2, r3, #1
 80149d6:	6022      	str	r2, [r4, #0]
 80149d8:	701e      	strb	r6, [r3, #0]
 80149da:	6962      	ldr	r2, [r4, #20]
 80149dc:	1c43      	adds	r3, r0, #1
 80149de:	429a      	cmp	r2, r3
 80149e0:	d004      	beq.n	80149ec <__swbuf_r+0x5a>
 80149e2:	89a3      	ldrh	r3, [r4, #12]
 80149e4:	07db      	lsls	r3, r3, #31
 80149e6:	d506      	bpl.n	80149f6 <__swbuf_r+0x64>
 80149e8:	2e0a      	cmp	r6, #10
 80149ea:	d104      	bne.n	80149f6 <__swbuf_r+0x64>
 80149ec:	4621      	mov	r1, r4
 80149ee:	4628      	mov	r0, r5
 80149f0:	f000 fe0a 	bl	8015608 <_fflush_r>
 80149f4:	b938      	cbnz	r0, 8014a06 <__swbuf_r+0x74>
 80149f6:	4638      	mov	r0, r7
 80149f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149fa:	4621      	mov	r1, r4
 80149fc:	4628      	mov	r0, r5
 80149fe:	f000 f805 	bl	8014a0c <__swsetup_r>
 8014a02:	2800      	cmp	r0, #0
 8014a04:	d0d5      	beq.n	80149b2 <__swbuf_r+0x20>
 8014a06:	f04f 37ff 	mov.w	r7, #4294967295
 8014a0a:	e7f4      	b.n	80149f6 <__swbuf_r+0x64>

08014a0c <__swsetup_r>:
 8014a0c:	b538      	push	{r3, r4, r5, lr}
 8014a0e:	4b2a      	ldr	r3, [pc, #168]	; (8014ab8 <__swsetup_r+0xac>)
 8014a10:	4605      	mov	r5, r0
 8014a12:	6818      	ldr	r0, [r3, #0]
 8014a14:	460c      	mov	r4, r1
 8014a16:	b118      	cbz	r0, 8014a20 <__swsetup_r+0x14>
 8014a18:	6a03      	ldr	r3, [r0, #32]
 8014a1a:	b90b      	cbnz	r3, 8014a20 <__swsetup_r+0x14>
 8014a1c:	f7ff fea0 	bl	8014760 <__sinit>
 8014a20:	89a3      	ldrh	r3, [r4, #12]
 8014a22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a26:	0718      	lsls	r0, r3, #28
 8014a28:	d422      	bmi.n	8014a70 <__swsetup_r+0x64>
 8014a2a:	06d9      	lsls	r1, r3, #27
 8014a2c:	d407      	bmi.n	8014a3e <__swsetup_r+0x32>
 8014a2e:	2309      	movs	r3, #9
 8014a30:	602b      	str	r3, [r5, #0]
 8014a32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014a36:	81a3      	strh	r3, [r4, #12]
 8014a38:	f04f 30ff 	mov.w	r0, #4294967295
 8014a3c:	e034      	b.n	8014aa8 <__swsetup_r+0x9c>
 8014a3e:	0758      	lsls	r0, r3, #29
 8014a40:	d512      	bpl.n	8014a68 <__swsetup_r+0x5c>
 8014a42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a44:	b141      	cbz	r1, 8014a58 <__swsetup_r+0x4c>
 8014a46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a4a:	4299      	cmp	r1, r3
 8014a4c:	d002      	beq.n	8014a54 <__swsetup_r+0x48>
 8014a4e:	4628      	mov	r0, r5
 8014a50:	f000 f8d4 	bl	8014bfc <_free_r>
 8014a54:	2300      	movs	r3, #0
 8014a56:	6363      	str	r3, [r4, #52]	; 0x34
 8014a58:	89a3      	ldrh	r3, [r4, #12]
 8014a5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014a5e:	81a3      	strh	r3, [r4, #12]
 8014a60:	2300      	movs	r3, #0
 8014a62:	6063      	str	r3, [r4, #4]
 8014a64:	6923      	ldr	r3, [r4, #16]
 8014a66:	6023      	str	r3, [r4, #0]
 8014a68:	89a3      	ldrh	r3, [r4, #12]
 8014a6a:	f043 0308 	orr.w	r3, r3, #8
 8014a6e:	81a3      	strh	r3, [r4, #12]
 8014a70:	6923      	ldr	r3, [r4, #16]
 8014a72:	b94b      	cbnz	r3, 8014a88 <__swsetup_r+0x7c>
 8014a74:	89a3      	ldrh	r3, [r4, #12]
 8014a76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a7e:	d003      	beq.n	8014a88 <__swsetup_r+0x7c>
 8014a80:	4621      	mov	r1, r4
 8014a82:	4628      	mov	r0, r5
 8014a84:	f000 fe0e 	bl	80156a4 <__smakebuf_r>
 8014a88:	89a0      	ldrh	r0, [r4, #12]
 8014a8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a8e:	f010 0301 	ands.w	r3, r0, #1
 8014a92:	d00a      	beq.n	8014aaa <__swsetup_r+0x9e>
 8014a94:	2300      	movs	r3, #0
 8014a96:	60a3      	str	r3, [r4, #8]
 8014a98:	6963      	ldr	r3, [r4, #20]
 8014a9a:	425b      	negs	r3, r3
 8014a9c:	61a3      	str	r3, [r4, #24]
 8014a9e:	6923      	ldr	r3, [r4, #16]
 8014aa0:	b943      	cbnz	r3, 8014ab4 <__swsetup_r+0xa8>
 8014aa2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014aa6:	d1c4      	bne.n	8014a32 <__swsetup_r+0x26>
 8014aa8:	bd38      	pop	{r3, r4, r5, pc}
 8014aaa:	0781      	lsls	r1, r0, #30
 8014aac:	bf58      	it	pl
 8014aae:	6963      	ldrpl	r3, [r4, #20]
 8014ab0:	60a3      	str	r3, [r4, #8]
 8014ab2:	e7f4      	b.n	8014a9e <__swsetup_r+0x92>
 8014ab4:	2000      	movs	r0, #0
 8014ab6:	e7f7      	b.n	8014aa8 <__swsetup_r+0x9c>
 8014ab8:	20000148 	.word	0x20000148

08014abc <memset>:
 8014abc:	4402      	add	r2, r0
 8014abe:	4603      	mov	r3, r0
 8014ac0:	4293      	cmp	r3, r2
 8014ac2:	d100      	bne.n	8014ac6 <memset+0xa>
 8014ac4:	4770      	bx	lr
 8014ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8014aca:	e7f9      	b.n	8014ac0 <memset+0x4>

08014acc <_close_r>:
 8014acc:	b538      	push	{r3, r4, r5, lr}
 8014ace:	4d06      	ldr	r5, [pc, #24]	; (8014ae8 <_close_r+0x1c>)
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	4604      	mov	r4, r0
 8014ad4:	4608      	mov	r0, r1
 8014ad6:	602b      	str	r3, [r5, #0]
 8014ad8:	f7f1 ff8d 	bl	80069f6 <_close>
 8014adc:	1c43      	adds	r3, r0, #1
 8014ade:	d102      	bne.n	8014ae6 <_close_r+0x1a>
 8014ae0:	682b      	ldr	r3, [r5, #0]
 8014ae2:	b103      	cbz	r3, 8014ae6 <_close_r+0x1a>
 8014ae4:	6023      	str	r3, [r4, #0]
 8014ae6:	bd38      	pop	{r3, r4, r5, pc}
 8014ae8:	200007c8 	.word	0x200007c8

08014aec <_lseek_r>:
 8014aec:	b538      	push	{r3, r4, r5, lr}
 8014aee:	4d07      	ldr	r5, [pc, #28]	; (8014b0c <_lseek_r+0x20>)
 8014af0:	4604      	mov	r4, r0
 8014af2:	4608      	mov	r0, r1
 8014af4:	4611      	mov	r1, r2
 8014af6:	2200      	movs	r2, #0
 8014af8:	602a      	str	r2, [r5, #0]
 8014afa:	461a      	mov	r2, r3
 8014afc:	f7f1 ffa2 	bl	8006a44 <_lseek>
 8014b00:	1c43      	adds	r3, r0, #1
 8014b02:	d102      	bne.n	8014b0a <_lseek_r+0x1e>
 8014b04:	682b      	ldr	r3, [r5, #0]
 8014b06:	b103      	cbz	r3, 8014b0a <_lseek_r+0x1e>
 8014b08:	6023      	str	r3, [r4, #0]
 8014b0a:	bd38      	pop	{r3, r4, r5, pc}
 8014b0c:	200007c8 	.word	0x200007c8

08014b10 <_read_r>:
 8014b10:	b538      	push	{r3, r4, r5, lr}
 8014b12:	4d07      	ldr	r5, [pc, #28]	; (8014b30 <_read_r+0x20>)
 8014b14:	4604      	mov	r4, r0
 8014b16:	4608      	mov	r0, r1
 8014b18:	4611      	mov	r1, r2
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	602a      	str	r2, [r5, #0]
 8014b1e:	461a      	mov	r2, r3
 8014b20:	f7f1 ff30 	bl	8006984 <_read>
 8014b24:	1c43      	adds	r3, r0, #1
 8014b26:	d102      	bne.n	8014b2e <_read_r+0x1e>
 8014b28:	682b      	ldr	r3, [r5, #0]
 8014b2a:	b103      	cbz	r3, 8014b2e <_read_r+0x1e>
 8014b2c:	6023      	str	r3, [r4, #0]
 8014b2e:	bd38      	pop	{r3, r4, r5, pc}
 8014b30:	200007c8 	.word	0x200007c8

08014b34 <_sbrk_r>:
 8014b34:	b538      	push	{r3, r4, r5, lr}
 8014b36:	4d06      	ldr	r5, [pc, #24]	; (8014b50 <_sbrk_r+0x1c>)
 8014b38:	2300      	movs	r3, #0
 8014b3a:	4604      	mov	r4, r0
 8014b3c:	4608      	mov	r0, r1
 8014b3e:	602b      	str	r3, [r5, #0]
 8014b40:	f7f1 ff8e 	bl	8006a60 <_sbrk>
 8014b44:	1c43      	adds	r3, r0, #1
 8014b46:	d102      	bne.n	8014b4e <_sbrk_r+0x1a>
 8014b48:	682b      	ldr	r3, [r5, #0]
 8014b4a:	b103      	cbz	r3, 8014b4e <_sbrk_r+0x1a>
 8014b4c:	6023      	str	r3, [r4, #0]
 8014b4e:	bd38      	pop	{r3, r4, r5, pc}
 8014b50:	200007c8 	.word	0x200007c8

08014b54 <_write_r>:
 8014b54:	b538      	push	{r3, r4, r5, lr}
 8014b56:	4d07      	ldr	r5, [pc, #28]	; (8014b74 <_write_r+0x20>)
 8014b58:	4604      	mov	r4, r0
 8014b5a:	4608      	mov	r0, r1
 8014b5c:	4611      	mov	r1, r2
 8014b5e:	2200      	movs	r2, #0
 8014b60:	602a      	str	r2, [r5, #0]
 8014b62:	461a      	mov	r2, r3
 8014b64:	f7f1 ff2b 	bl	80069be <_write>
 8014b68:	1c43      	adds	r3, r0, #1
 8014b6a:	d102      	bne.n	8014b72 <_write_r+0x1e>
 8014b6c:	682b      	ldr	r3, [r5, #0]
 8014b6e:	b103      	cbz	r3, 8014b72 <_write_r+0x1e>
 8014b70:	6023      	str	r3, [r4, #0]
 8014b72:	bd38      	pop	{r3, r4, r5, pc}
 8014b74:	200007c8 	.word	0x200007c8

08014b78 <__errno>:
 8014b78:	4b01      	ldr	r3, [pc, #4]	; (8014b80 <__errno+0x8>)
 8014b7a:	6818      	ldr	r0, [r3, #0]
 8014b7c:	4770      	bx	lr
 8014b7e:	bf00      	nop
 8014b80:	20000148 	.word	0x20000148

08014b84 <__libc_init_array>:
 8014b84:	b570      	push	{r4, r5, r6, lr}
 8014b86:	4d0d      	ldr	r5, [pc, #52]	; (8014bbc <__libc_init_array+0x38>)
 8014b88:	4c0d      	ldr	r4, [pc, #52]	; (8014bc0 <__libc_init_array+0x3c>)
 8014b8a:	1b64      	subs	r4, r4, r5
 8014b8c:	10a4      	asrs	r4, r4, #2
 8014b8e:	2600      	movs	r6, #0
 8014b90:	42a6      	cmp	r6, r4
 8014b92:	d109      	bne.n	8014ba8 <__libc_init_array+0x24>
 8014b94:	4d0b      	ldr	r5, [pc, #44]	; (8014bc4 <__libc_init_array+0x40>)
 8014b96:	4c0c      	ldr	r4, [pc, #48]	; (8014bc8 <__libc_init_array+0x44>)
 8014b98:	f000 fe40 	bl	801581c <_init>
 8014b9c:	1b64      	subs	r4, r4, r5
 8014b9e:	10a4      	asrs	r4, r4, #2
 8014ba0:	2600      	movs	r6, #0
 8014ba2:	42a6      	cmp	r6, r4
 8014ba4:	d105      	bne.n	8014bb2 <__libc_init_array+0x2e>
 8014ba6:	bd70      	pop	{r4, r5, r6, pc}
 8014ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bac:	4798      	blx	r3
 8014bae:	3601      	adds	r6, #1
 8014bb0:	e7ee      	b.n	8014b90 <__libc_init_array+0xc>
 8014bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bb6:	4798      	blx	r3
 8014bb8:	3601      	adds	r6, #1
 8014bba:	e7f2      	b.n	8014ba2 <__libc_init_array+0x1e>
 8014bbc:	08019e08 	.word	0x08019e08
 8014bc0:	08019e08 	.word	0x08019e08
 8014bc4:	08019e08 	.word	0x08019e08
 8014bc8:	08019e0c 	.word	0x08019e0c

08014bcc <__retarget_lock_init_recursive>:
 8014bcc:	4770      	bx	lr

08014bce <__retarget_lock_acquire_recursive>:
 8014bce:	4770      	bx	lr

08014bd0 <__retarget_lock_release_recursive>:
 8014bd0:	4770      	bx	lr

08014bd2 <memcpy>:
 8014bd2:	440a      	add	r2, r1
 8014bd4:	4291      	cmp	r1, r2
 8014bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8014bda:	d100      	bne.n	8014bde <memcpy+0xc>
 8014bdc:	4770      	bx	lr
 8014bde:	b510      	push	{r4, lr}
 8014be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014be8:	4291      	cmp	r1, r2
 8014bea:	d1f9      	bne.n	8014be0 <memcpy+0xe>
 8014bec:	bd10      	pop	{r4, pc}

08014bee <abort>:
 8014bee:	b508      	push	{r3, lr}
 8014bf0:	2006      	movs	r0, #6
 8014bf2:	f000 fdd5 	bl	80157a0 <raise>
 8014bf6:	2001      	movs	r0, #1
 8014bf8:	f7f1 feba 	bl	8006970 <_exit>

08014bfc <_free_r>:
 8014bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014bfe:	2900      	cmp	r1, #0
 8014c00:	d044      	beq.n	8014c8c <_free_r+0x90>
 8014c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c06:	9001      	str	r0, [sp, #4]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8014c0e:	bfb8      	it	lt
 8014c10:	18e4      	addlt	r4, r4, r3
 8014c12:	f7ff fc71 	bl	80144f8 <__malloc_lock>
 8014c16:	4a1e      	ldr	r2, [pc, #120]	; (8014c90 <_free_r+0x94>)
 8014c18:	9801      	ldr	r0, [sp, #4]
 8014c1a:	6813      	ldr	r3, [r2, #0]
 8014c1c:	b933      	cbnz	r3, 8014c2c <_free_r+0x30>
 8014c1e:	6063      	str	r3, [r4, #4]
 8014c20:	6014      	str	r4, [r2, #0]
 8014c22:	b003      	add	sp, #12
 8014c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c28:	f7ff bc6c 	b.w	8014504 <__malloc_unlock>
 8014c2c:	42a3      	cmp	r3, r4
 8014c2e:	d908      	bls.n	8014c42 <_free_r+0x46>
 8014c30:	6825      	ldr	r5, [r4, #0]
 8014c32:	1961      	adds	r1, r4, r5
 8014c34:	428b      	cmp	r3, r1
 8014c36:	bf01      	itttt	eq
 8014c38:	6819      	ldreq	r1, [r3, #0]
 8014c3a:	685b      	ldreq	r3, [r3, #4]
 8014c3c:	1949      	addeq	r1, r1, r5
 8014c3e:	6021      	streq	r1, [r4, #0]
 8014c40:	e7ed      	b.n	8014c1e <_free_r+0x22>
 8014c42:	461a      	mov	r2, r3
 8014c44:	685b      	ldr	r3, [r3, #4]
 8014c46:	b10b      	cbz	r3, 8014c4c <_free_r+0x50>
 8014c48:	42a3      	cmp	r3, r4
 8014c4a:	d9fa      	bls.n	8014c42 <_free_r+0x46>
 8014c4c:	6811      	ldr	r1, [r2, #0]
 8014c4e:	1855      	adds	r5, r2, r1
 8014c50:	42a5      	cmp	r5, r4
 8014c52:	d10b      	bne.n	8014c6c <_free_r+0x70>
 8014c54:	6824      	ldr	r4, [r4, #0]
 8014c56:	4421      	add	r1, r4
 8014c58:	1854      	adds	r4, r2, r1
 8014c5a:	42a3      	cmp	r3, r4
 8014c5c:	6011      	str	r1, [r2, #0]
 8014c5e:	d1e0      	bne.n	8014c22 <_free_r+0x26>
 8014c60:	681c      	ldr	r4, [r3, #0]
 8014c62:	685b      	ldr	r3, [r3, #4]
 8014c64:	6053      	str	r3, [r2, #4]
 8014c66:	440c      	add	r4, r1
 8014c68:	6014      	str	r4, [r2, #0]
 8014c6a:	e7da      	b.n	8014c22 <_free_r+0x26>
 8014c6c:	d902      	bls.n	8014c74 <_free_r+0x78>
 8014c6e:	230c      	movs	r3, #12
 8014c70:	6003      	str	r3, [r0, #0]
 8014c72:	e7d6      	b.n	8014c22 <_free_r+0x26>
 8014c74:	6825      	ldr	r5, [r4, #0]
 8014c76:	1961      	adds	r1, r4, r5
 8014c78:	428b      	cmp	r3, r1
 8014c7a:	bf04      	itt	eq
 8014c7c:	6819      	ldreq	r1, [r3, #0]
 8014c7e:	685b      	ldreq	r3, [r3, #4]
 8014c80:	6063      	str	r3, [r4, #4]
 8014c82:	bf04      	itt	eq
 8014c84:	1949      	addeq	r1, r1, r5
 8014c86:	6021      	streq	r1, [r4, #0]
 8014c88:	6054      	str	r4, [r2, #4]
 8014c8a:	e7ca      	b.n	8014c22 <_free_r+0x26>
 8014c8c:	b003      	add	sp, #12
 8014c8e:	bd30      	pop	{r4, r5, pc}
 8014c90:	20000684 	.word	0x20000684

08014c94 <_malloc_usable_size_r>:
 8014c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c98:	1f18      	subs	r0, r3, #4
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	bfbc      	itt	lt
 8014c9e:	580b      	ldrlt	r3, [r1, r0]
 8014ca0:	18c0      	addlt	r0, r0, r3
 8014ca2:	4770      	bx	lr

08014ca4 <__ssputs_r>:
 8014ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ca8:	688e      	ldr	r6, [r1, #8]
 8014caa:	461f      	mov	r7, r3
 8014cac:	42be      	cmp	r6, r7
 8014cae:	680b      	ldr	r3, [r1, #0]
 8014cb0:	4682      	mov	sl, r0
 8014cb2:	460c      	mov	r4, r1
 8014cb4:	4690      	mov	r8, r2
 8014cb6:	d82c      	bhi.n	8014d12 <__ssputs_r+0x6e>
 8014cb8:	898a      	ldrh	r2, [r1, #12]
 8014cba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014cbe:	d026      	beq.n	8014d0e <__ssputs_r+0x6a>
 8014cc0:	6965      	ldr	r5, [r4, #20]
 8014cc2:	6909      	ldr	r1, [r1, #16]
 8014cc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014cc8:	eba3 0901 	sub.w	r9, r3, r1
 8014ccc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014cd0:	1c7b      	adds	r3, r7, #1
 8014cd2:	444b      	add	r3, r9
 8014cd4:	106d      	asrs	r5, r5, #1
 8014cd6:	429d      	cmp	r5, r3
 8014cd8:	bf38      	it	cc
 8014cda:	461d      	movcc	r5, r3
 8014cdc:	0553      	lsls	r3, r2, #21
 8014cde:	d527      	bpl.n	8014d30 <__ssputs_r+0x8c>
 8014ce0:	4629      	mov	r1, r5
 8014ce2:	f7ff fb89 	bl	80143f8 <_malloc_r>
 8014ce6:	4606      	mov	r6, r0
 8014ce8:	b360      	cbz	r0, 8014d44 <__ssputs_r+0xa0>
 8014cea:	6921      	ldr	r1, [r4, #16]
 8014cec:	464a      	mov	r2, r9
 8014cee:	f7ff ff70 	bl	8014bd2 <memcpy>
 8014cf2:	89a3      	ldrh	r3, [r4, #12]
 8014cf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014cfc:	81a3      	strh	r3, [r4, #12]
 8014cfe:	6126      	str	r6, [r4, #16]
 8014d00:	6165      	str	r5, [r4, #20]
 8014d02:	444e      	add	r6, r9
 8014d04:	eba5 0509 	sub.w	r5, r5, r9
 8014d08:	6026      	str	r6, [r4, #0]
 8014d0a:	60a5      	str	r5, [r4, #8]
 8014d0c:	463e      	mov	r6, r7
 8014d0e:	42be      	cmp	r6, r7
 8014d10:	d900      	bls.n	8014d14 <__ssputs_r+0x70>
 8014d12:	463e      	mov	r6, r7
 8014d14:	6820      	ldr	r0, [r4, #0]
 8014d16:	4632      	mov	r2, r6
 8014d18:	4641      	mov	r1, r8
 8014d1a:	f000 fcff 	bl	801571c <memmove>
 8014d1e:	68a3      	ldr	r3, [r4, #8]
 8014d20:	1b9b      	subs	r3, r3, r6
 8014d22:	60a3      	str	r3, [r4, #8]
 8014d24:	6823      	ldr	r3, [r4, #0]
 8014d26:	4433      	add	r3, r6
 8014d28:	6023      	str	r3, [r4, #0]
 8014d2a:	2000      	movs	r0, #0
 8014d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d30:	462a      	mov	r2, r5
 8014d32:	f7ff fc59 	bl	80145e8 <_realloc_r>
 8014d36:	4606      	mov	r6, r0
 8014d38:	2800      	cmp	r0, #0
 8014d3a:	d1e0      	bne.n	8014cfe <__ssputs_r+0x5a>
 8014d3c:	6921      	ldr	r1, [r4, #16]
 8014d3e:	4650      	mov	r0, sl
 8014d40:	f7ff ff5c 	bl	8014bfc <_free_r>
 8014d44:	230c      	movs	r3, #12
 8014d46:	f8ca 3000 	str.w	r3, [sl]
 8014d4a:	89a3      	ldrh	r3, [r4, #12]
 8014d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d50:	81a3      	strh	r3, [r4, #12]
 8014d52:	f04f 30ff 	mov.w	r0, #4294967295
 8014d56:	e7e9      	b.n	8014d2c <__ssputs_r+0x88>

08014d58 <_svfiprintf_r>:
 8014d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d5c:	4698      	mov	r8, r3
 8014d5e:	898b      	ldrh	r3, [r1, #12]
 8014d60:	061b      	lsls	r3, r3, #24
 8014d62:	b09d      	sub	sp, #116	; 0x74
 8014d64:	4607      	mov	r7, r0
 8014d66:	460d      	mov	r5, r1
 8014d68:	4614      	mov	r4, r2
 8014d6a:	d50e      	bpl.n	8014d8a <_svfiprintf_r+0x32>
 8014d6c:	690b      	ldr	r3, [r1, #16]
 8014d6e:	b963      	cbnz	r3, 8014d8a <_svfiprintf_r+0x32>
 8014d70:	2140      	movs	r1, #64	; 0x40
 8014d72:	f7ff fb41 	bl	80143f8 <_malloc_r>
 8014d76:	6028      	str	r0, [r5, #0]
 8014d78:	6128      	str	r0, [r5, #16]
 8014d7a:	b920      	cbnz	r0, 8014d86 <_svfiprintf_r+0x2e>
 8014d7c:	230c      	movs	r3, #12
 8014d7e:	603b      	str	r3, [r7, #0]
 8014d80:	f04f 30ff 	mov.w	r0, #4294967295
 8014d84:	e0d0      	b.n	8014f28 <_svfiprintf_r+0x1d0>
 8014d86:	2340      	movs	r3, #64	; 0x40
 8014d88:	616b      	str	r3, [r5, #20]
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8014d8e:	2320      	movs	r3, #32
 8014d90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d98:	2330      	movs	r3, #48	; 0x30
 8014d9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014f40 <_svfiprintf_r+0x1e8>
 8014d9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014da2:	f04f 0901 	mov.w	r9, #1
 8014da6:	4623      	mov	r3, r4
 8014da8:	469a      	mov	sl, r3
 8014daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dae:	b10a      	cbz	r2, 8014db4 <_svfiprintf_r+0x5c>
 8014db0:	2a25      	cmp	r2, #37	; 0x25
 8014db2:	d1f9      	bne.n	8014da8 <_svfiprintf_r+0x50>
 8014db4:	ebba 0b04 	subs.w	fp, sl, r4
 8014db8:	d00b      	beq.n	8014dd2 <_svfiprintf_r+0x7a>
 8014dba:	465b      	mov	r3, fp
 8014dbc:	4622      	mov	r2, r4
 8014dbe:	4629      	mov	r1, r5
 8014dc0:	4638      	mov	r0, r7
 8014dc2:	f7ff ff6f 	bl	8014ca4 <__ssputs_r>
 8014dc6:	3001      	adds	r0, #1
 8014dc8:	f000 80a9 	beq.w	8014f1e <_svfiprintf_r+0x1c6>
 8014dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014dce:	445a      	add	r2, fp
 8014dd0:	9209      	str	r2, [sp, #36]	; 0x24
 8014dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	f000 80a1 	beq.w	8014f1e <_svfiprintf_r+0x1c6>
 8014ddc:	2300      	movs	r3, #0
 8014dde:	f04f 32ff 	mov.w	r2, #4294967295
 8014de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014de6:	f10a 0a01 	add.w	sl, sl, #1
 8014dea:	9304      	str	r3, [sp, #16]
 8014dec:	9307      	str	r3, [sp, #28]
 8014dee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014df2:	931a      	str	r3, [sp, #104]	; 0x68
 8014df4:	4654      	mov	r4, sl
 8014df6:	2205      	movs	r2, #5
 8014df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dfc:	4850      	ldr	r0, [pc, #320]	; (8014f40 <_svfiprintf_r+0x1e8>)
 8014dfe:	f7eb fa77 	bl	80002f0 <memchr>
 8014e02:	9a04      	ldr	r2, [sp, #16]
 8014e04:	b9d8      	cbnz	r0, 8014e3e <_svfiprintf_r+0xe6>
 8014e06:	06d0      	lsls	r0, r2, #27
 8014e08:	bf44      	itt	mi
 8014e0a:	2320      	movmi	r3, #32
 8014e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e10:	0711      	lsls	r1, r2, #28
 8014e12:	bf44      	itt	mi
 8014e14:	232b      	movmi	r3, #43	; 0x2b
 8014e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8014e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8014e20:	d015      	beq.n	8014e4e <_svfiprintf_r+0xf6>
 8014e22:	9a07      	ldr	r2, [sp, #28]
 8014e24:	4654      	mov	r4, sl
 8014e26:	2000      	movs	r0, #0
 8014e28:	f04f 0c0a 	mov.w	ip, #10
 8014e2c:	4621      	mov	r1, r4
 8014e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e32:	3b30      	subs	r3, #48	; 0x30
 8014e34:	2b09      	cmp	r3, #9
 8014e36:	d94d      	bls.n	8014ed4 <_svfiprintf_r+0x17c>
 8014e38:	b1b0      	cbz	r0, 8014e68 <_svfiprintf_r+0x110>
 8014e3a:	9207      	str	r2, [sp, #28]
 8014e3c:	e014      	b.n	8014e68 <_svfiprintf_r+0x110>
 8014e3e:	eba0 0308 	sub.w	r3, r0, r8
 8014e42:	fa09 f303 	lsl.w	r3, r9, r3
 8014e46:	4313      	orrs	r3, r2
 8014e48:	9304      	str	r3, [sp, #16]
 8014e4a:	46a2      	mov	sl, r4
 8014e4c:	e7d2      	b.n	8014df4 <_svfiprintf_r+0x9c>
 8014e4e:	9b03      	ldr	r3, [sp, #12]
 8014e50:	1d19      	adds	r1, r3, #4
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	9103      	str	r1, [sp, #12]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	bfbb      	ittet	lt
 8014e5a:	425b      	neglt	r3, r3
 8014e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8014e60:	9307      	strge	r3, [sp, #28]
 8014e62:	9307      	strlt	r3, [sp, #28]
 8014e64:	bfb8      	it	lt
 8014e66:	9204      	strlt	r2, [sp, #16]
 8014e68:	7823      	ldrb	r3, [r4, #0]
 8014e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8014e6c:	d10c      	bne.n	8014e88 <_svfiprintf_r+0x130>
 8014e6e:	7863      	ldrb	r3, [r4, #1]
 8014e70:	2b2a      	cmp	r3, #42	; 0x2a
 8014e72:	d134      	bne.n	8014ede <_svfiprintf_r+0x186>
 8014e74:	9b03      	ldr	r3, [sp, #12]
 8014e76:	1d1a      	adds	r2, r3, #4
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	9203      	str	r2, [sp, #12]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	bfb8      	it	lt
 8014e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8014e84:	3402      	adds	r4, #2
 8014e86:	9305      	str	r3, [sp, #20]
 8014e88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014f50 <_svfiprintf_r+0x1f8>
 8014e8c:	7821      	ldrb	r1, [r4, #0]
 8014e8e:	2203      	movs	r2, #3
 8014e90:	4650      	mov	r0, sl
 8014e92:	f7eb fa2d 	bl	80002f0 <memchr>
 8014e96:	b138      	cbz	r0, 8014ea8 <_svfiprintf_r+0x150>
 8014e98:	9b04      	ldr	r3, [sp, #16]
 8014e9a:	eba0 000a 	sub.w	r0, r0, sl
 8014e9e:	2240      	movs	r2, #64	; 0x40
 8014ea0:	4082      	lsls	r2, r0
 8014ea2:	4313      	orrs	r3, r2
 8014ea4:	3401      	adds	r4, #1
 8014ea6:	9304      	str	r3, [sp, #16]
 8014ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014eac:	4825      	ldr	r0, [pc, #148]	; (8014f44 <_svfiprintf_r+0x1ec>)
 8014eae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014eb2:	2206      	movs	r2, #6
 8014eb4:	f7eb fa1c 	bl	80002f0 <memchr>
 8014eb8:	2800      	cmp	r0, #0
 8014eba:	d038      	beq.n	8014f2e <_svfiprintf_r+0x1d6>
 8014ebc:	4b22      	ldr	r3, [pc, #136]	; (8014f48 <_svfiprintf_r+0x1f0>)
 8014ebe:	bb1b      	cbnz	r3, 8014f08 <_svfiprintf_r+0x1b0>
 8014ec0:	9b03      	ldr	r3, [sp, #12]
 8014ec2:	3307      	adds	r3, #7
 8014ec4:	f023 0307 	bic.w	r3, r3, #7
 8014ec8:	3308      	adds	r3, #8
 8014eca:	9303      	str	r3, [sp, #12]
 8014ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ece:	4433      	add	r3, r6
 8014ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8014ed2:	e768      	b.n	8014da6 <_svfiprintf_r+0x4e>
 8014ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ed8:	460c      	mov	r4, r1
 8014eda:	2001      	movs	r0, #1
 8014edc:	e7a6      	b.n	8014e2c <_svfiprintf_r+0xd4>
 8014ede:	2300      	movs	r3, #0
 8014ee0:	3401      	adds	r4, #1
 8014ee2:	9305      	str	r3, [sp, #20]
 8014ee4:	4619      	mov	r1, r3
 8014ee6:	f04f 0c0a 	mov.w	ip, #10
 8014eea:	4620      	mov	r0, r4
 8014eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ef0:	3a30      	subs	r2, #48	; 0x30
 8014ef2:	2a09      	cmp	r2, #9
 8014ef4:	d903      	bls.n	8014efe <_svfiprintf_r+0x1a6>
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d0c6      	beq.n	8014e88 <_svfiprintf_r+0x130>
 8014efa:	9105      	str	r1, [sp, #20]
 8014efc:	e7c4      	b.n	8014e88 <_svfiprintf_r+0x130>
 8014efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f02:	4604      	mov	r4, r0
 8014f04:	2301      	movs	r3, #1
 8014f06:	e7f0      	b.n	8014eea <_svfiprintf_r+0x192>
 8014f08:	ab03      	add	r3, sp, #12
 8014f0a:	9300      	str	r3, [sp, #0]
 8014f0c:	462a      	mov	r2, r5
 8014f0e:	4b0f      	ldr	r3, [pc, #60]	; (8014f4c <_svfiprintf_r+0x1f4>)
 8014f10:	a904      	add	r1, sp, #16
 8014f12:	4638      	mov	r0, r7
 8014f14:	f3af 8000 	nop.w
 8014f18:	1c42      	adds	r2, r0, #1
 8014f1a:	4606      	mov	r6, r0
 8014f1c:	d1d6      	bne.n	8014ecc <_svfiprintf_r+0x174>
 8014f1e:	89ab      	ldrh	r3, [r5, #12]
 8014f20:	065b      	lsls	r3, r3, #25
 8014f22:	f53f af2d 	bmi.w	8014d80 <_svfiprintf_r+0x28>
 8014f26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f28:	b01d      	add	sp, #116	; 0x74
 8014f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f2e:	ab03      	add	r3, sp, #12
 8014f30:	9300      	str	r3, [sp, #0]
 8014f32:	462a      	mov	r2, r5
 8014f34:	4b05      	ldr	r3, [pc, #20]	; (8014f4c <_svfiprintf_r+0x1f4>)
 8014f36:	a904      	add	r1, sp, #16
 8014f38:	4638      	mov	r0, r7
 8014f3a:	f000 f9bd 	bl	80152b8 <_printf_i>
 8014f3e:	e7eb      	b.n	8014f18 <_svfiprintf_r+0x1c0>
 8014f40:	08019dd3 	.word	0x08019dd3
 8014f44:	08019ddd 	.word	0x08019ddd
 8014f48:	00000000 	.word	0x00000000
 8014f4c:	08014ca5 	.word	0x08014ca5
 8014f50:	08019dd9 	.word	0x08019dd9

08014f54 <__sfputc_r>:
 8014f54:	6893      	ldr	r3, [r2, #8]
 8014f56:	3b01      	subs	r3, #1
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	b410      	push	{r4}
 8014f5c:	6093      	str	r3, [r2, #8]
 8014f5e:	da08      	bge.n	8014f72 <__sfputc_r+0x1e>
 8014f60:	6994      	ldr	r4, [r2, #24]
 8014f62:	42a3      	cmp	r3, r4
 8014f64:	db01      	blt.n	8014f6a <__sfputc_r+0x16>
 8014f66:	290a      	cmp	r1, #10
 8014f68:	d103      	bne.n	8014f72 <__sfputc_r+0x1e>
 8014f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f6e:	f7ff bd10 	b.w	8014992 <__swbuf_r>
 8014f72:	6813      	ldr	r3, [r2, #0]
 8014f74:	1c58      	adds	r0, r3, #1
 8014f76:	6010      	str	r0, [r2, #0]
 8014f78:	7019      	strb	r1, [r3, #0]
 8014f7a:	4608      	mov	r0, r1
 8014f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f80:	4770      	bx	lr

08014f82 <__sfputs_r>:
 8014f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f84:	4606      	mov	r6, r0
 8014f86:	460f      	mov	r7, r1
 8014f88:	4614      	mov	r4, r2
 8014f8a:	18d5      	adds	r5, r2, r3
 8014f8c:	42ac      	cmp	r4, r5
 8014f8e:	d101      	bne.n	8014f94 <__sfputs_r+0x12>
 8014f90:	2000      	movs	r0, #0
 8014f92:	e007      	b.n	8014fa4 <__sfputs_r+0x22>
 8014f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f98:	463a      	mov	r2, r7
 8014f9a:	4630      	mov	r0, r6
 8014f9c:	f7ff ffda 	bl	8014f54 <__sfputc_r>
 8014fa0:	1c43      	adds	r3, r0, #1
 8014fa2:	d1f3      	bne.n	8014f8c <__sfputs_r+0xa>
 8014fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014fa8 <_vfiprintf_r>:
 8014fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fac:	460d      	mov	r5, r1
 8014fae:	b09d      	sub	sp, #116	; 0x74
 8014fb0:	4614      	mov	r4, r2
 8014fb2:	4698      	mov	r8, r3
 8014fb4:	4606      	mov	r6, r0
 8014fb6:	b118      	cbz	r0, 8014fc0 <_vfiprintf_r+0x18>
 8014fb8:	6a03      	ldr	r3, [r0, #32]
 8014fba:	b90b      	cbnz	r3, 8014fc0 <_vfiprintf_r+0x18>
 8014fbc:	f7ff fbd0 	bl	8014760 <__sinit>
 8014fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014fc2:	07d9      	lsls	r1, r3, #31
 8014fc4:	d405      	bmi.n	8014fd2 <_vfiprintf_r+0x2a>
 8014fc6:	89ab      	ldrh	r3, [r5, #12]
 8014fc8:	059a      	lsls	r2, r3, #22
 8014fca:	d402      	bmi.n	8014fd2 <_vfiprintf_r+0x2a>
 8014fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014fce:	f7ff fdfe 	bl	8014bce <__retarget_lock_acquire_recursive>
 8014fd2:	89ab      	ldrh	r3, [r5, #12]
 8014fd4:	071b      	lsls	r3, r3, #28
 8014fd6:	d501      	bpl.n	8014fdc <_vfiprintf_r+0x34>
 8014fd8:	692b      	ldr	r3, [r5, #16]
 8014fda:	b99b      	cbnz	r3, 8015004 <_vfiprintf_r+0x5c>
 8014fdc:	4629      	mov	r1, r5
 8014fde:	4630      	mov	r0, r6
 8014fe0:	f7ff fd14 	bl	8014a0c <__swsetup_r>
 8014fe4:	b170      	cbz	r0, 8015004 <_vfiprintf_r+0x5c>
 8014fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014fe8:	07dc      	lsls	r4, r3, #31
 8014fea:	d504      	bpl.n	8014ff6 <_vfiprintf_r+0x4e>
 8014fec:	f04f 30ff 	mov.w	r0, #4294967295
 8014ff0:	b01d      	add	sp, #116	; 0x74
 8014ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ff6:	89ab      	ldrh	r3, [r5, #12]
 8014ff8:	0598      	lsls	r0, r3, #22
 8014ffa:	d4f7      	bmi.n	8014fec <_vfiprintf_r+0x44>
 8014ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ffe:	f7ff fde7 	bl	8014bd0 <__retarget_lock_release_recursive>
 8015002:	e7f3      	b.n	8014fec <_vfiprintf_r+0x44>
 8015004:	2300      	movs	r3, #0
 8015006:	9309      	str	r3, [sp, #36]	; 0x24
 8015008:	2320      	movs	r3, #32
 801500a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801500e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015012:	2330      	movs	r3, #48	; 0x30
 8015014:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80151c8 <_vfiprintf_r+0x220>
 8015018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801501c:	f04f 0901 	mov.w	r9, #1
 8015020:	4623      	mov	r3, r4
 8015022:	469a      	mov	sl, r3
 8015024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015028:	b10a      	cbz	r2, 801502e <_vfiprintf_r+0x86>
 801502a:	2a25      	cmp	r2, #37	; 0x25
 801502c:	d1f9      	bne.n	8015022 <_vfiprintf_r+0x7a>
 801502e:	ebba 0b04 	subs.w	fp, sl, r4
 8015032:	d00b      	beq.n	801504c <_vfiprintf_r+0xa4>
 8015034:	465b      	mov	r3, fp
 8015036:	4622      	mov	r2, r4
 8015038:	4629      	mov	r1, r5
 801503a:	4630      	mov	r0, r6
 801503c:	f7ff ffa1 	bl	8014f82 <__sfputs_r>
 8015040:	3001      	adds	r0, #1
 8015042:	f000 80a9 	beq.w	8015198 <_vfiprintf_r+0x1f0>
 8015046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015048:	445a      	add	r2, fp
 801504a:	9209      	str	r2, [sp, #36]	; 0x24
 801504c:	f89a 3000 	ldrb.w	r3, [sl]
 8015050:	2b00      	cmp	r3, #0
 8015052:	f000 80a1 	beq.w	8015198 <_vfiprintf_r+0x1f0>
 8015056:	2300      	movs	r3, #0
 8015058:	f04f 32ff 	mov.w	r2, #4294967295
 801505c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015060:	f10a 0a01 	add.w	sl, sl, #1
 8015064:	9304      	str	r3, [sp, #16]
 8015066:	9307      	str	r3, [sp, #28]
 8015068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801506c:	931a      	str	r3, [sp, #104]	; 0x68
 801506e:	4654      	mov	r4, sl
 8015070:	2205      	movs	r2, #5
 8015072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015076:	4854      	ldr	r0, [pc, #336]	; (80151c8 <_vfiprintf_r+0x220>)
 8015078:	f7eb f93a 	bl	80002f0 <memchr>
 801507c:	9a04      	ldr	r2, [sp, #16]
 801507e:	b9d8      	cbnz	r0, 80150b8 <_vfiprintf_r+0x110>
 8015080:	06d1      	lsls	r1, r2, #27
 8015082:	bf44      	itt	mi
 8015084:	2320      	movmi	r3, #32
 8015086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801508a:	0713      	lsls	r3, r2, #28
 801508c:	bf44      	itt	mi
 801508e:	232b      	movmi	r3, #43	; 0x2b
 8015090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015094:	f89a 3000 	ldrb.w	r3, [sl]
 8015098:	2b2a      	cmp	r3, #42	; 0x2a
 801509a:	d015      	beq.n	80150c8 <_vfiprintf_r+0x120>
 801509c:	9a07      	ldr	r2, [sp, #28]
 801509e:	4654      	mov	r4, sl
 80150a0:	2000      	movs	r0, #0
 80150a2:	f04f 0c0a 	mov.w	ip, #10
 80150a6:	4621      	mov	r1, r4
 80150a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150ac:	3b30      	subs	r3, #48	; 0x30
 80150ae:	2b09      	cmp	r3, #9
 80150b0:	d94d      	bls.n	801514e <_vfiprintf_r+0x1a6>
 80150b2:	b1b0      	cbz	r0, 80150e2 <_vfiprintf_r+0x13a>
 80150b4:	9207      	str	r2, [sp, #28]
 80150b6:	e014      	b.n	80150e2 <_vfiprintf_r+0x13a>
 80150b8:	eba0 0308 	sub.w	r3, r0, r8
 80150bc:	fa09 f303 	lsl.w	r3, r9, r3
 80150c0:	4313      	orrs	r3, r2
 80150c2:	9304      	str	r3, [sp, #16]
 80150c4:	46a2      	mov	sl, r4
 80150c6:	e7d2      	b.n	801506e <_vfiprintf_r+0xc6>
 80150c8:	9b03      	ldr	r3, [sp, #12]
 80150ca:	1d19      	adds	r1, r3, #4
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	9103      	str	r1, [sp, #12]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	bfbb      	ittet	lt
 80150d4:	425b      	neglt	r3, r3
 80150d6:	f042 0202 	orrlt.w	r2, r2, #2
 80150da:	9307      	strge	r3, [sp, #28]
 80150dc:	9307      	strlt	r3, [sp, #28]
 80150de:	bfb8      	it	lt
 80150e0:	9204      	strlt	r2, [sp, #16]
 80150e2:	7823      	ldrb	r3, [r4, #0]
 80150e4:	2b2e      	cmp	r3, #46	; 0x2e
 80150e6:	d10c      	bne.n	8015102 <_vfiprintf_r+0x15a>
 80150e8:	7863      	ldrb	r3, [r4, #1]
 80150ea:	2b2a      	cmp	r3, #42	; 0x2a
 80150ec:	d134      	bne.n	8015158 <_vfiprintf_r+0x1b0>
 80150ee:	9b03      	ldr	r3, [sp, #12]
 80150f0:	1d1a      	adds	r2, r3, #4
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	9203      	str	r2, [sp, #12]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	bfb8      	it	lt
 80150fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80150fe:	3402      	adds	r4, #2
 8015100:	9305      	str	r3, [sp, #20]
 8015102:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80151d8 <_vfiprintf_r+0x230>
 8015106:	7821      	ldrb	r1, [r4, #0]
 8015108:	2203      	movs	r2, #3
 801510a:	4650      	mov	r0, sl
 801510c:	f7eb f8f0 	bl	80002f0 <memchr>
 8015110:	b138      	cbz	r0, 8015122 <_vfiprintf_r+0x17a>
 8015112:	9b04      	ldr	r3, [sp, #16]
 8015114:	eba0 000a 	sub.w	r0, r0, sl
 8015118:	2240      	movs	r2, #64	; 0x40
 801511a:	4082      	lsls	r2, r0
 801511c:	4313      	orrs	r3, r2
 801511e:	3401      	adds	r4, #1
 8015120:	9304      	str	r3, [sp, #16]
 8015122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015126:	4829      	ldr	r0, [pc, #164]	; (80151cc <_vfiprintf_r+0x224>)
 8015128:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801512c:	2206      	movs	r2, #6
 801512e:	f7eb f8df 	bl	80002f0 <memchr>
 8015132:	2800      	cmp	r0, #0
 8015134:	d03f      	beq.n	80151b6 <_vfiprintf_r+0x20e>
 8015136:	4b26      	ldr	r3, [pc, #152]	; (80151d0 <_vfiprintf_r+0x228>)
 8015138:	bb1b      	cbnz	r3, 8015182 <_vfiprintf_r+0x1da>
 801513a:	9b03      	ldr	r3, [sp, #12]
 801513c:	3307      	adds	r3, #7
 801513e:	f023 0307 	bic.w	r3, r3, #7
 8015142:	3308      	adds	r3, #8
 8015144:	9303      	str	r3, [sp, #12]
 8015146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015148:	443b      	add	r3, r7
 801514a:	9309      	str	r3, [sp, #36]	; 0x24
 801514c:	e768      	b.n	8015020 <_vfiprintf_r+0x78>
 801514e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015152:	460c      	mov	r4, r1
 8015154:	2001      	movs	r0, #1
 8015156:	e7a6      	b.n	80150a6 <_vfiprintf_r+0xfe>
 8015158:	2300      	movs	r3, #0
 801515a:	3401      	adds	r4, #1
 801515c:	9305      	str	r3, [sp, #20]
 801515e:	4619      	mov	r1, r3
 8015160:	f04f 0c0a 	mov.w	ip, #10
 8015164:	4620      	mov	r0, r4
 8015166:	f810 2b01 	ldrb.w	r2, [r0], #1
 801516a:	3a30      	subs	r2, #48	; 0x30
 801516c:	2a09      	cmp	r2, #9
 801516e:	d903      	bls.n	8015178 <_vfiprintf_r+0x1d0>
 8015170:	2b00      	cmp	r3, #0
 8015172:	d0c6      	beq.n	8015102 <_vfiprintf_r+0x15a>
 8015174:	9105      	str	r1, [sp, #20]
 8015176:	e7c4      	b.n	8015102 <_vfiprintf_r+0x15a>
 8015178:	fb0c 2101 	mla	r1, ip, r1, r2
 801517c:	4604      	mov	r4, r0
 801517e:	2301      	movs	r3, #1
 8015180:	e7f0      	b.n	8015164 <_vfiprintf_r+0x1bc>
 8015182:	ab03      	add	r3, sp, #12
 8015184:	9300      	str	r3, [sp, #0]
 8015186:	462a      	mov	r2, r5
 8015188:	4b12      	ldr	r3, [pc, #72]	; (80151d4 <_vfiprintf_r+0x22c>)
 801518a:	a904      	add	r1, sp, #16
 801518c:	4630      	mov	r0, r6
 801518e:	f3af 8000 	nop.w
 8015192:	4607      	mov	r7, r0
 8015194:	1c78      	adds	r0, r7, #1
 8015196:	d1d6      	bne.n	8015146 <_vfiprintf_r+0x19e>
 8015198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801519a:	07d9      	lsls	r1, r3, #31
 801519c:	d405      	bmi.n	80151aa <_vfiprintf_r+0x202>
 801519e:	89ab      	ldrh	r3, [r5, #12]
 80151a0:	059a      	lsls	r2, r3, #22
 80151a2:	d402      	bmi.n	80151aa <_vfiprintf_r+0x202>
 80151a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151a6:	f7ff fd13 	bl	8014bd0 <__retarget_lock_release_recursive>
 80151aa:	89ab      	ldrh	r3, [r5, #12]
 80151ac:	065b      	lsls	r3, r3, #25
 80151ae:	f53f af1d 	bmi.w	8014fec <_vfiprintf_r+0x44>
 80151b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80151b4:	e71c      	b.n	8014ff0 <_vfiprintf_r+0x48>
 80151b6:	ab03      	add	r3, sp, #12
 80151b8:	9300      	str	r3, [sp, #0]
 80151ba:	462a      	mov	r2, r5
 80151bc:	4b05      	ldr	r3, [pc, #20]	; (80151d4 <_vfiprintf_r+0x22c>)
 80151be:	a904      	add	r1, sp, #16
 80151c0:	4630      	mov	r0, r6
 80151c2:	f000 f879 	bl	80152b8 <_printf_i>
 80151c6:	e7e4      	b.n	8015192 <_vfiprintf_r+0x1ea>
 80151c8:	08019dd3 	.word	0x08019dd3
 80151cc:	08019ddd 	.word	0x08019ddd
 80151d0:	00000000 	.word	0x00000000
 80151d4:	08014f83 	.word	0x08014f83
 80151d8:	08019dd9 	.word	0x08019dd9

080151dc <_printf_common>:
 80151dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151e0:	4616      	mov	r6, r2
 80151e2:	4699      	mov	r9, r3
 80151e4:	688a      	ldr	r2, [r1, #8]
 80151e6:	690b      	ldr	r3, [r1, #16]
 80151e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80151ec:	4293      	cmp	r3, r2
 80151ee:	bfb8      	it	lt
 80151f0:	4613      	movlt	r3, r2
 80151f2:	6033      	str	r3, [r6, #0]
 80151f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80151f8:	4607      	mov	r7, r0
 80151fa:	460c      	mov	r4, r1
 80151fc:	b10a      	cbz	r2, 8015202 <_printf_common+0x26>
 80151fe:	3301      	adds	r3, #1
 8015200:	6033      	str	r3, [r6, #0]
 8015202:	6823      	ldr	r3, [r4, #0]
 8015204:	0699      	lsls	r1, r3, #26
 8015206:	bf42      	ittt	mi
 8015208:	6833      	ldrmi	r3, [r6, #0]
 801520a:	3302      	addmi	r3, #2
 801520c:	6033      	strmi	r3, [r6, #0]
 801520e:	6825      	ldr	r5, [r4, #0]
 8015210:	f015 0506 	ands.w	r5, r5, #6
 8015214:	d106      	bne.n	8015224 <_printf_common+0x48>
 8015216:	f104 0a19 	add.w	sl, r4, #25
 801521a:	68e3      	ldr	r3, [r4, #12]
 801521c:	6832      	ldr	r2, [r6, #0]
 801521e:	1a9b      	subs	r3, r3, r2
 8015220:	42ab      	cmp	r3, r5
 8015222:	dc26      	bgt.n	8015272 <_printf_common+0x96>
 8015224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015228:	1e13      	subs	r3, r2, #0
 801522a:	6822      	ldr	r2, [r4, #0]
 801522c:	bf18      	it	ne
 801522e:	2301      	movne	r3, #1
 8015230:	0692      	lsls	r2, r2, #26
 8015232:	d42b      	bmi.n	801528c <_printf_common+0xb0>
 8015234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015238:	4649      	mov	r1, r9
 801523a:	4638      	mov	r0, r7
 801523c:	47c0      	blx	r8
 801523e:	3001      	adds	r0, #1
 8015240:	d01e      	beq.n	8015280 <_printf_common+0xa4>
 8015242:	6823      	ldr	r3, [r4, #0]
 8015244:	6922      	ldr	r2, [r4, #16]
 8015246:	f003 0306 	and.w	r3, r3, #6
 801524a:	2b04      	cmp	r3, #4
 801524c:	bf02      	ittt	eq
 801524e:	68e5      	ldreq	r5, [r4, #12]
 8015250:	6833      	ldreq	r3, [r6, #0]
 8015252:	1aed      	subeq	r5, r5, r3
 8015254:	68a3      	ldr	r3, [r4, #8]
 8015256:	bf0c      	ite	eq
 8015258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801525c:	2500      	movne	r5, #0
 801525e:	4293      	cmp	r3, r2
 8015260:	bfc4      	itt	gt
 8015262:	1a9b      	subgt	r3, r3, r2
 8015264:	18ed      	addgt	r5, r5, r3
 8015266:	2600      	movs	r6, #0
 8015268:	341a      	adds	r4, #26
 801526a:	42b5      	cmp	r5, r6
 801526c:	d11a      	bne.n	80152a4 <_printf_common+0xc8>
 801526e:	2000      	movs	r0, #0
 8015270:	e008      	b.n	8015284 <_printf_common+0xa8>
 8015272:	2301      	movs	r3, #1
 8015274:	4652      	mov	r2, sl
 8015276:	4649      	mov	r1, r9
 8015278:	4638      	mov	r0, r7
 801527a:	47c0      	blx	r8
 801527c:	3001      	adds	r0, #1
 801527e:	d103      	bne.n	8015288 <_printf_common+0xac>
 8015280:	f04f 30ff 	mov.w	r0, #4294967295
 8015284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015288:	3501      	adds	r5, #1
 801528a:	e7c6      	b.n	801521a <_printf_common+0x3e>
 801528c:	18e1      	adds	r1, r4, r3
 801528e:	1c5a      	adds	r2, r3, #1
 8015290:	2030      	movs	r0, #48	; 0x30
 8015292:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015296:	4422      	add	r2, r4
 8015298:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801529c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80152a0:	3302      	adds	r3, #2
 80152a2:	e7c7      	b.n	8015234 <_printf_common+0x58>
 80152a4:	2301      	movs	r3, #1
 80152a6:	4622      	mov	r2, r4
 80152a8:	4649      	mov	r1, r9
 80152aa:	4638      	mov	r0, r7
 80152ac:	47c0      	blx	r8
 80152ae:	3001      	adds	r0, #1
 80152b0:	d0e6      	beq.n	8015280 <_printf_common+0xa4>
 80152b2:	3601      	adds	r6, #1
 80152b4:	e7d9      	b.n	801526a <_printf_common+0x8e>
	...

080152b8 <_printf_i>:
 80152b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152bc:	7e0f      	ldrb	r7, [r1, #24]
 80152be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80152c0:	2f78      	cmp	r7, #120	; 0x78
 80152c2:	4691      	mov	r9, r2
 80152c4:	4680      	mov	r8, r0
 80152c6:	460c      	mov	r4, r1
 80152c8:	469a      	mov	sl, r3
 80152ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80152ce:	d807      	bhi.n	80152e0 <_printf_i+0x28>
 80152d0:	2f62      	cmp	r7, #98	; 0x62
 80152d2:	d80a      	bhi.n	80152ea <_printf_i+0x32>
 80152d4:	2f00      	cmp	r7, #0
 80152d6:	f000 80d4 	beq.w	8015482 <_printf_i+0x1ca>
 80152da:	2f58      	cmp	r7, #88	; 0x58
 80152dc:	f000 80c0 	beq.w	8015460 <_printf_i+0x1a8>
 80152e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80152e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80152e8:	e03a      	b.n	8015360 <_printf_i+0xa8>
 80152ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80152ee:	2b15      	cmp	r3, #21
 80152f0:	d8f6      	bhi.n	80152e0 <_printf_i+0x28>
 80152f2:	a101      	add	r1, pc, #4	; (adr r1, 80152f8 <_printf_i+0x40>)
 80152f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80152f8:	08015351 	.word	0x08015351
 80152fc:	08015365 	.word	0x08015365
 8015300:	080152e1 	.word	0x080152e1
 8015304:	080152e1 	.word	0x080152e1
 8015308:	080152e1 	.word	0x080152e1
 801530c:	080152e1 	.word	0x080152e1
 8015310:	08015365 	.word	0x08015365
 8015314:	080152e1 	.word	0x080152e1
 8015318:	080152e1 	.word	0x080152e1
 801531c:	080152e1 	.word	0x080152e1
 8015320:	080152e1 	.word	0x080152e1
 8015324:	08015469 	.word	0x08015469
 8015328:	08015391 	.word	0x08015391
 801532c:	08015423 	.word	0x08015423
 8015330:	080152e1 	.word	0x080152e1
 8015334:	080152e1 	.word	0x080152e1
 8015338:	0801548b 	.word	0x0801548b
 801533c:	080152e1 	.word	0x080152e1
 8015340:	08015391 	.word	0x08015391
 8015344:	080152e1 	.word	0x080152e1
 8015348:	080152e1 	.word	0x080152e1
 801534c:	0801542b 	.word	0x0801542b
 8015350:	682b      	ldr	r3, [r5, #0]
 8015352:	1d1a      	adds	r2, r3, #4
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	602a      	str	r2, [r5, #0]
 8015358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801535c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015360:	2301      	movs	r3, #1
 8015362:	e09f      	b.n	80154a4 <_printf_i+0x1ec>
 8015364:	6820      	ldr	r0, [r4, #0]
 8015366:	682b      	ldr	r3, [r5, #0]
 8015368:	0607      	lsls	r7, r0, #24
 801536a:	f103 0104 	add.w	r1, r3, #4
 801536e:	6029      	str	r1, [r5, #0]
 8015370:	d501      	bpl.n	8015376 <_printf_i+0xbe>
 8015372:	681e      	ldr	r6, [r3, #0]
 8015374:	e003      	b.n	801537e <_printf_i+0xc6>
 8015376:	0646      	lsls	r6, r0, #25
 8015378:	d5fb      	bpl.n	8015372 <_printf_i+0xba>
 801537a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801537e:	2e00      	cmp	r6, #0
 8015380:	da03      	bge.n	801538a <_printf_i+0xd2>
 8015382:	232d      	movs	r3, #45	; 0x2d
 8015384:	4276      	negs	r6, r6
 8015386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801538a:	485a      	ldr	r0, [pc, #360]	; (80154f4 <_printf_i+0x23c>)
 801538c:	230a      	movs	r3, #10
 801538e:	e012      	b.n	80153b6 <_printf_i+0xfe>
 8015390:	682b      	ldr	r3, [r5, #0]
 8015392:	6820      	ldr	r0, [r4, #0]
 8015394:	1d19      	adds	r1, r3, #4
 8015396:	6029      	str	r1, [r5, #0]
 8015398:	0605      	lsls	r5, r0, #24
 801539a:	d501      	bpl.n	80153a0 <_printf_i+0xe8>
 801539c:	681e      	ldr	r6, [r3, #0]
 801539e:	e002      	b.n	80153a6 <_printf_i+0xee>
 80153a0:	0641      	lsls	r1, r0, #25
 80153a2:	d5fb      	bpl.n	801539c <_printf_i+0xe4>
 80153a4:	881e      	ldrh	r6, [r3, #0]
 80153a6:	4853      	ldr	r0, [pc, #332]	; (80154f4 <_printf_i+0x23c>)
 80153a8:	2f6f      	cmp	r7, #111	; 0x6f
 80153aa:	bf0c      	ite	eq
 80153ac:	2308      	moveq	r3, #8
 80153ae:	230a      	movne	r3, #10
 80153b0:	2100      	movs	r1, #0
 80153b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80153b6:	6865      	ldr	r5, [r4, #4]
 80153b8:	60a5      	str	r5, [r4, #8]
 80153ba:	2d00      	cmp	r5, #0
 80153bc:	bfa2      	ittt	ge
 80153be:	6821      	ldrge	r1, [r4, #0]
 80153c0:	f021 0104 	bicge.w	r1, r1, #4
 80153c4:	6021      	strge	r1, [r4, #0]
 80153c6:	b90e      	cbnz	r6, 80153cc <_printf_i+0x114>
 80153c8:	2d00      	cmp	r5, #0
 80153ca:	d04b      	beq.n	8015464 <_printf_i+0x1ac>
 80153cc:	4615      	mov	r5, r2
 80153ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80153d2:	fb03 6711 	mls	r7, r3, r1, r6
 80153d6:	5dc7      	ldrb	r7, [r0, r7]
 80153d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80153dc:	4637      	mov	r7, r6
 80153de:	42bb      	cmp	r3, r7
 80153e0:	460e      	mov	r6, r1
 80153e2:	d9f4      	bls.n	80153ce <_printf_i+0x116>
 80153e4:	2b08      	cmp	r3, #8
 80153e6:	d10b      	bne.n	8015400 <_printf_i+0x148>
 80153e8:	6823      	ldr	r3, [r4, #0]
 80153ea:	07de      	lsls	r6, r3, #31
 80153ec:	d508      	bpl.n	8015400 <_printf_i+0x148>
 80153ee:	6923      	ldr	r3, [r4, #16]
 80153f0:	6861      	ldr	r1, [r4, #4]
 80153f2:	4299      	cmp	r1, r3
 80153f4:	bfde      	ittt	le
 80153f6:	2330      	movle	r3, #48	; 0x30
 80153f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80153fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015400:	1b52      	subs	r2, r2, r5
 8015402:	6122      	str	r2, [r4, #16]
 8015404:	f8cd a000 	str.w	sl, [sp]
 8015408:	464b      	mov	r3, r9
 801540a:	aa03      	add	r2, sp, #12
 801540c:	4621      	mov	r1, r4
 801540e:	4640      	mov	r0, r8
 8015410:	f7ff fee4 	bl	80151dc <_printf_common>
 8015414:	3001      	adds	r0, #1
 8015416:	d14a      	bne.n	80154ae <_printf_i+0x1f6>
 8015418:	f04f 30ff 	mov.w	r0, #4294967295
 801541c:	b004      	add	sp, #16
 801541e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015422:	6823      	ldr	r3, [r4, #0]
 8015424:	f043 0320 	orr.w	r3, r3, #32
 8015428:	6023      	str	r3, [r4, #0]
 801542a:	4833      	ldr	r0, [pc, #204]	; (80154f8 <_printf_i+0x240>)
 801542c:	2778      	movs	r7, #120	; 0x78
 801542e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015432:	6823      	ldr	r3, [r4, #0]
 8015434:	6829      	ldr	r1, [r5, #0]
 8015436:	061f      	lsls	r7, r3, #24
 8015438:	f851 6b04 	ldr.w	r6, [r1], #4
 801543c:	d402      	bmi.n	8015444 <_printf_i+0x18c>
 801543e:	065f      	lsls	r7, r3, #25
 8015440:	bf48      	it	mi
 8015442:	b2b6      	uxthmi	r6, r6
 8015444:	07df      	lsls	r7, r3, #31
 8015446:	bf48      	it	mi
 8015448:	f043 0320 	orrmi.w	r3, r3, #32
 801544c:	6029      	str	r1, [r5, #0]
 801544e:	bf48      	it	mi
 8015450:	6023      	strmi	r3, [r4, #0]
 8015452:	b91e      	cbnz	r6, 801545c <_printf_i+0x1a4>
 8015454:	6823      	ldr	r3, [r4, #0]
 8015456:	f023 0320 	bic.w	r3, r3, #32
 801545a:	6023      	str	r3, [r4, #0]
 801545c:	2310      	movs	r3, #16
 801545e:	e7a7      	b.n	80153b0 <_printf_i+0xf8>
 8015460:	4824      	ldr	r0, [pc, #144]	; (80154f4 <_printf_i+0x23c>)
 8015462:	e7e4      	b.n	801542e <_printf_i+0x176>
 8015464:	4615      	mov	r5, r2
 8015466:	e7bd      	b.n	80153e4 <_printf_i+0x12c>
 8015468:	682b      	ldr	r3, [r5, #0]
 801546a:	6826      	ldr	r6, [r4, #0]
 801546c:	6961      	ldr	r1, [r4, #20]
 801546e:	1d18      	adds	r0, r3, #4
 8015470:	6028      	str	r0, [r5, #0]
 8015472:	0635      	lsls	r5, r6, #24
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	d501      	bpl.n	801547c <_printf_i+0x1c4>
 8015478:	6019      	str	r1, [r3, #0]
 801547a:	e002      	b.n	8015482 <_printf_i+0x1ca>
 801547c:	0670      	lsls	r0, r6, #25
 801547e:	d5fb      	bpl.n	8015478 <_printf_i+0x1c0>
 8015480:	8019      	strh	r1, [r3, #0]
 8015482:	2300      	movs	r3, #0
 8015484:	6123      	str	r3, [r4, #16]
 8015486:	4615      	mov	r5, r2
 8015488:	e7bc      	b.n	8015404 <_printf_i+0x14c>
 801548a:	682b      	ldr	r3, [r5, #0]
 801548c:	1d1a      	adds	r2, r3, #4
 801548e:	602a      	str	r2, [r5, #0]
 8015490:	681d      	ldr	r5, [r3, #0]
 8015492:	6862      	ldr	r2, [r4, #4]
 8015494:	2100      	movs	r1, #0
 8015496:	4628      	mov	r0, r5
 8015498:	f7ea ff2a 	bl	80002f0 <memchr>
 801549c:	b108      	cbz	r0, 80154a2 <_printf_i+0x1ea>
 801549e:	1b40      	subs	r0, r0, r5
 80154a0:	6060      	str	r0, [r4, #4]
 80154a2:	6863      	ldr	r3, [r4, #4]
 80154a4:	6123      	str	r3, [r4, #16]
 80154a6:	2300      	movs	r3, #0
 80154a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154ac:	e7aa      	b.n	8015404 <_printf_i+0x14c>
 80154ae:	6923      	ldr	r3, [r4, #16]
 80154b0:	462a      	mov	r2, r5
 80154b2:	4649      	mov	r1, r9
 80154b4:	4640      	mov	r0, r8
 80154b6:	47d0      	blx	sl
 80154b8:	3001      	adds	r0, #1
 80154ba:	d0ad      	beq.n	8015418 <_printf_i+0x160>
 80154bc:	6823      	ldr	r3, [r4, #0]
 80154be:	079b      	lsls	r3, r3, #30
 80154c0:	d413      	bmi.n	80154ea <_printf_i+0x232>
 80154c2:	68e0      	ldr	r0, [r4, #12]
 80154c4:	9b03      	ldr	r3, [sp, #12]
 80154c6:	4298      	cmp	r0, r3
 80154c8:	bfb8      	it	lt
 80154ca:	4618      	movlt	r0, r3
 80154cc:	e7a6      	b.n	801541c <_printf_i+0x164>
 80154ce:	2301      	movs	r3, #1
 80154d0:	4632      	mov	r2, r6
 80154d2:	4649      	mov	r1, r9
 80154d4:	4640      	mov	r0, r8
 80154d6:	47d0      	blx	sl
 80154d8:	3001      	adds	r0, #1
 80154da:	d09d      	beq.n	8015418 <_printf_i+0x160>
 80154dc:	3501      	adds	r5, #1
 80154de:	68e3      	ldr	r3, [r4, #12]
 80154e0:	9903      	ldr	r1, [sp, #12]
 80154e2:	1a5b      	subs	r3, r3, r1
 80154e4:	42ab      	cmp	r3, r5
 80154e6:	dcf2      	bgt.n	80154ce <_printf_i+0x216>
 80154e8:	e7eb      	b.n	80154c2 <_printf_i+0x20a>
 80154ea:	2500      	movs	r5, #0
 80154ec:	f104 0619 	add.w	r6, r4, #25
 80154f0:	e7f5      	b.n	80154de <_printf_i+0x226>
 80154f2:	bf00      	nop
 80154f4:	08019de4 	.word	0x08019de4
 80154f8:	08019df5 	.word	0x08019df5

080154fc <__sflush_r>:
 80154fc:	898a      	ldrh	r2, [r1, #12]
 80154fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015502:	4605      	mov	r5, r0
 8015504:	0710      	lsls	r0, r2, #28
 8015506:	460c      	mov	r4, r1
 8015508:	d458      	bmi.n	80155bc <__sflush_r+0xc0>
 801550a:	684b      	ldr	r3, [r1, #4]
 801550c:	2b00      	cmp	r3, #0
 801550e:	dc05      	bgt.n	801551c <__sflush_r+0x20>
 8015510:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015512:	2b00      	cmp	r3, #0
 8015514:	dc02      	bgt.n	801551c <__sflush_r+0x20>
 8015516:	2000      	movs	r0, #0
 8015518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801551c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801551e:	2e00      	cmp	r6, #0
 8015520:	d0f9      	beq.n	8015516 <__sflush_r+0x1a>
 8015522:	2300      	movs	r3, #0
 8015524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015528:	682f      	ldr	r7, [r5, #0]
 801552a:	6a21      	ldr	r1, [r4, #32]
 801552c:	602b      	str	r3, [r5, #0]
 801552e:	d032      	beq.n	8015596 <__sflush_r+0x9a>
 8015530:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015532:	89a3      	ldrh	r3, [r4, #12]
 8015534:	075a      	lsls	r2, r3, #29
 8015536:	d505      	bpl.n	8015544 <__sflush_r+0x48>
 8015538:	6863      	ldr	r3, [r4, #4]
 801553a:	1ac0      	subs	r0, r0, r3
 801553c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801553e:	b10b      	cbz	r3, 8015544 <__sflush_r+0x48>
 8015540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015542:	1ac0      	subs	r0, r0, r3
 8015544:	2300      	movs	r3, #0
 8015546:	4602      	mov	r2, r0
 8015548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801554a:	6a21      	ldr	r1, [r4, #32]
 801554c:	4628      	mov	r0, r5
 801554e:	47b0      	blx	r6
 8015550:	1c43      	adds	r3, r0, #1
 8015552:	89a3      	ldrh	r3, [r4, #12]
 8015554:	d106      	bne.n	8015564 <__sflush_r+0x68>
 8015556:	6829      	ldr	r1, [r5, #0]
 8015558:	291d      	cmp	r1, #29
 801555a:	d82b      	bhi.n	80155b4 <__sflush_r+0xb8>
 801555c:	4a29      	ldr	r2, [pc, #164]	; (8015604 <__sflush_r+0x108>)
 801555e:	410a      	asrs	r2, r1
 8015560:	07d6      	lsls	r6, r2, #31
 8015562:	d427      	bmi.n	80155b4 <__sflush_r+0xb8>
 8015564:	2200      	movs	r2, #0
 8015566:	6062      	str	r2, [r4, #4]
 8015568:	04d9      	lsls	r1, r3, #19
 801556a:	6922      	ldr	r2, [r4, #16]
 801556c:	6022      	str	r2, [r4, #0]
 801556e:	d504      	bpl.n	801557a <__sflush_r+0x7e>
 8015570:	1c42      	adds	r2, r0, #1
 8015572:	d101      	bne.n	8015578 <__sflush_r+0x7c>
 8015574:	682b      	ldr	r3, [r5, #0]
 8015576:	b903      	cbnz	r3, 801557a <__sflush_r+0x7e>
 8015578:	6560      	str	r0, [r4, #84]	; 0x54
 801557a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801557c:	602f      	str	r7, [r5, #0]
 801557e:	2900      	cmp	r1, #0
 8015580:	d0c9      	beq.n	8015516 <__sflush_r+0x1a>
 8015582:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015586:	4299      	cmp	r1, r3
 8015588:	d002      	beq.n	8015590 <__sflush_r+0x94>
 801558a:	4628      	mov	r0, r5
 801558c:	f7ff fb36 	bl	8014bfc <_free_r>
 8015590:	2000      	movs	r0, #0
 8015592:	6360      	str	r0, [r4, #52]	; 0x34
 8015594:	e7c0      	b.n	8015518 <__sflush_r+0x1c>
 8015596:	2301      	movs	r3, #1
 8015598:	4628      	mov	r0, r5
 801559a:	47b0      	blx	r6
 801559c:	1c41      	adds	r1, r0, #1
 801559e:	d1c8      	bne.n	8015532 <__sflush_r+0x36>
 80155a0:	682b      	ldr	r3, [r5, #0]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d0c5      	beq.n	8015532 <__sflush_r+0x36>
 80155a6:	2b1d      	cmp	r3, #29
 80155a8:	d001      	beq.n	80155ae <__sflush_r+0xb2>
 80155aa:	2b16      	cmp	r3, #22
 80155ac:	d101      	bne.n	80155b2 <__sflush_r+0xb6>
 80155ae:	602f      	str	r7, [r5, #0]
 80155b0:	e7b1      	b.n	8015516 <__sflush_r+0x1a>
 80155b2:	89a3      	ldrh	r3, [r4, #12]
 80155b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155b8:	81a3      	strh	r3, [r4, #12]
 80155ba:	e7ad      	b.n	8015518 <__sflush_r+0x1c>
 80155bc:	690f      	ldr	r7, [r1, #16]
 80155be:	2f00      	cmp	r7, #0
 80155c0:	d0a9      	beq.n	8015516 <__sflush_r+0x1a>
 80155c2:	0793      	lsls	r3, r2, #30
 80155c4:	680e      	ldr	r6, [r1, #0]
 80155c6:	bf08      	it	eq
 80155c8:	694b      	ldreq	r3, [r1, #20]
 80155ca:	600f      	str	r7, [r1, #0]
 80155cc:	bf18      	it	ne
 80155ce:	2300      	movne	r3, #0
 80155d0:	eba6 0807 	sub.w	r8, r6, r7
 80155d4:	608b      	str	r3, [r1, #8]
 80155d6:	f1b8 0f00 	cmp.w	r8, #0
 80155da:	dd9c      	ble.n	8015516 <__sflush_r+0x1a>
 80155dc:	6a21      	ldr	r1, [r4, #32]
 80155de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80155e0:	4643      	mov	r3, r8
 80155e2:	463a      	mov	r2, r7
 80155e4:	4628      	mov	r0, r5
 80155e6:	47b0      	blx	r6
 80155e8:	2800      	cmp	r0, #0
 80155ea:	dc06      	bgt.n	80155fa <__sflush_r+0xfe>
 80155ec:	89a3      	ldrh	r3, [r4, #12]
 80155ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155f2:	81a3      	strh	r3, [r4, #12]
 80155f4:	f04f 30ff 	mov.w	r0, #4294967295
 80155f8:	e78e      	b.n	8015518 <__sflush_r+0x1c>
 80155fa:	4407      	add	r7, r0
 80155fc:	eba8 0800 	sub.w	r8, r8, r0
 8015600:	e7e9      	b.n	80155d6 <__sflush_r+0xda>
 8015602:	bf00      	nop
 8015604:	dfbffffe 	.word	0xdfbffffe

08015608 <_fflush_r>:
 8015608:	b538      	push	{r3, r4, r5, lr}
 801560a:	690b      	ldr	r3, [r1, #16]
 801560c:	4605      	mov	r5, r0
 801560e:	460c      	mov	r4, r1
 8015610:	b913      	cbnz	r3, 8015618 <_fflush_r+0x10>
 8015612:	2500      	movs	r5, #0
 8015614:	4628      	mov	r0, r5
 8015616:	bd38      	pop	{r3, r4, r5, pc}
 8015618:	b118      	cbz	r0, 8015622 <_fflush_r+0x1a>
 801561a:	6a03      	ldr	r3, [r0, #32]
 801561c:	b90b      	cbnz	r3, 8015622 <_fflush_r+0x1a>
 801561e:	f7ff f89f 	bl	8014760 <__sinit>
 8015622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d0f3      	beq.n	8015612 <_fflush_r+0xa>
 801562a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801562c:	07d0      	lsls	r0, r2, #31
 801562e:	d404      	bmi.n	801563a <_fflush_r+0x32>
 8015630:	0599      	lsls	r1, r3, #22
 8015632:	d402      	bmi.n	801563a <_fflush_r+0x32>
 8015634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015636:	f7ff faca 	bl	8014bce <__retarget_lock_acquire_recursive>
 801563a:	4628      	mov	r0, r5
 801563c:	4621      	mov	r1, r4
 801563e:	f7ff ff5d 	bl	80154fc <__sflush_r>
 8015642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015644:	07da      	lsls	r2, r3, #31
 8015646:	4605      	mov	r5, r0
 8015648:	d4e4      	bmi.n	8015614 <_fflush_r+0xc>
 801564a:	89a3      	ldrh	r3, [r4, #12]
 801564c:	059b      	lsls	r3, r3, #22
 801564e:	d4e1      	bmi.n	8015614 <_fflush_r+0xc>
 8015650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015652:	f7ff fabd 	bl	8014bd0 <__retarget_lock_release_recursive>
 8015656:	e7dd      	b.n	8015614 <_fflush_r+0xc>

08015658 <__swhatbuf_r>:
 8015658:	b570      	push	{r4, r5, r6, lr}
 801565a:	460c      	mov	r4, r1
 801565c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015660:	2900      	cmp	r1, #0
 8015662:	b096      	sub	sp, #88	; 0x58
 8015664:	4615      	mov	r5, r2
 8015666:	461e      	mov	r6, r3
 8015668:	da0d      	bge.n	8015686 <__swhatbuf_r+0x2e>
 801566a:	89a3      	ldrh	r3, [r4, #12]
 801566c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015670:	f04f 0100 	mov.w	r1, #0
 8015674:	bf0c      	ite	eq
 8015676:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801567a:	2340      	movne	r3, #64	; 0x40
 801567c:	2000      	movs	r0, #0
 801567e:	6031      	str	r1, [r6, #0]
 8015680:	602b      	str	r3, [r5, #0]
 8015682:	b016      	add	sp, #88	; 0x58
 8015684:	bd70      	pop	{r4, r5, r6, pc}
 8015686:	466a      	mov	r2, sp
 8015688:	f000 f892 	bl	80157b0 <_fstat_r>
 801568c:	2800      	cmp	r0, #0
 801568e:	dbec      	blt.n	801566a <__swhatbuf_r+0x12>
 8015690:	9901      	ldr	r1, [sp, #4]
 8015692:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015696:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801569a:	4259      	negs	r1, r3
 801569c:	4159      	adcs	r1, r3
 801569e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80156a2:	e7eb      	b.n	801567c <__swhatbuf_r+0x24>

080156a4 <__smakebuf_r>:
 80156a4:	898b      	ldrh	r3, [r1, #12]
 80156a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80156a8:	079d      	lsls	r5, r3, #30
 80156aa:	4606      	mov	r6, r0
 80156ac:	460c      	mov	r4, r1
 80156ae:	d507      	bpl.n	80156c0 <__smakebuf_r+0x1c>
 80156b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80156b4:	6023      	str	r3, [r4, #0]
 80156b6:	6123      	str	r3, [r4, #16]
 80156b8:	2301      	movs	r3, #1
 80156ba:	6163      	str	r3, [r4, #20]
 80156bc:	b002      	add	sp, #8
 80156be:	bd70      	pop	{r4, r5, r6, pc}
 80156c0:	ab01      	add	r3, sp, #4
 80156c2:	466a      	mov	r2, sp
 80156c4:	f7ff ffc8 	bl	8015658 <__swhatbuf_r>
 80156c8:	9900      	ldr	r1, [sp, #0]
 80156ca:	4605      	mov	r5, r0
 80156cc:	4630      	mov	r0, r6
 80156ce:	f7fe fe93 	bl	80143f8 <_malloc_r>
 80156d2:	b948      	cbnz	r0, 80156e8 <__smakebuf_r+0x44>
 80156d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156d8:	059a      	lsls	r2, r3, #22
 80156da:	d4ef      	bmi.n	80156bc <__smakebuf_r+0x18>
 80156dc:	f023 0303 	bic.w	r3, r3, #3
 80156e0:	f043 0302 	orr.w	r3, r3, #2
 80156e4:	81a3      	strh	r3, [r4, #12]
 80156e6:	e7e3      	b.n	80156b0 <__smakebuf_r+0xc>
 80156e8:	89a3      	ldrh	r3, [r4, #12]
 80156ea:	6020      	str	r0, [r4, #0]
 80156ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156f0:	81a3      	strh	r3, [r4, #12]
 80156f2:	9b00      	ldr	r3, [sp, #0]
 80156f4:	6163      	str	r3, [r4, #20]
 80156f6:	9b01      	ldr	r3, [sp, #4]
 80156f8:	6120      	str	r0, [r4, #16]
 80156fa:	b15b      	cbz	r3, 8015714 <__smakebuf_r+0x70>
 80156fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015700:	4630      	mov	r0, r6
 8015702:	f000 f867 	bl	80157d4 <_isatty_r>
 8015706:	b128      	cbz	r0, 8015714 <__smakebuf_r+0x70>
 8015708:	89a3      	ldrh	r3, [r4, #12]
 801570a:	f023 0303 	bic.w	r3, r3, #3
 801570e:	f043 0301 	orr.w	r3, r3, #1
 8015712:	81a3      	strh	r3, [r4, #12]
 8015714:	89a3      	ldrh	r3, [r4, #12]
 8015716:	431d      	orrs	r5, r3
 8015718:	81a5      	strh	r5, [r4, #12]
 801571a:	e7cf      	b.n	80156bc <__smakebuf_r+0x18>

0801571c <memmove>:
 801571c:	4288      	cmp	r0, r1
 801571e:	b510      	push	{r4, lr}
 8015720:	eb01 0402 	add.w	r4, r1, r2
 8015724:	d902      	bls.n	801572c <memmove+0x10>
 8015726:	4284      	cmp	r4, r0
 8015728:	4623      	mov	r3, r4
 801572a:	d807      	bhi.n	801573c <memmove+0x20>
 801572c:	1e43      	subs	r3, r0, #1
 801572e:	42a1      	cmp	r1, r4
 8015730:	d008      	beq.n	8015744 <memmove+0x28>
 8015732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015736:	f803 2f01 	strb.w	r2, [r3, #1]!
 801573a:	e7f8      	b.n	801572e <memmove+0x12>
 801573c:	4402      	add	r2, r0
 801573e:	4601      	mov	r1, r0
 8015740:	428a      	cmp	r2, r1
 8015742:	d100      	bne.n	8015746 <memmove+0x2a>
 8015744:	bd10      	pop	{r4, pc}
 8015746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801574a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801574e:	e7f7      	b.n	8015740 <memmove+0x24>

08015750 <_raise_r>:
 8015750:	291f      	cmp	r1, #31
 8015752:	b538      	push	{r3, r4, r5, lr}
 8015754:	4604      	mov	r4, r0
 8015756:	460d      	mov	r5, r1
 8015758:	d904      	bls.n	8015764 <_raise_r+0x14>
 801575a:	2316      	movs	r3, #22
 801575c:	6003      	str	r3, [r0, #0]
 801575e:	f04f 30ff 	mov.w	r0, #4294967295
 8015762:	bd38      	pop	{r3, r4, r5, pc}
 8015764:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015766:	b112      	cbz	r2, 801576e <_raise_r+0x1e>
 8015768:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801576c:	b94b      	cbnz	r3, 8015782 <_raise_r+0x32>
 801576e:	4620      	mov	r0, r4
 8015770:	f000 f852 	bl	8015818 <_getpid_r>
 8015774:	462a      	mov	r2, r5
 8015776:	4601      	mov	r1, r0
 8015778:	4620      	mov	r0, r4
 801577a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801577e:	f000 b839 	b.w	80157f4 <_kill_r>
 8015782:	2b01      	cmp	r3, #1
 8015784:	d00a      	beq.n	801579c <_raise_r+0x4c>
 8015786:	1c59      	adds	r1, r3, #1
 8015788:	d103      	bne.n	8015792 <_raise_r+0x42>
 801578a:	2316      	movs	r3, #22
 801578c:	6003      	str	r3, [r0, #0]
 801578e:	2001      	movs	r0, #1
 8015790:	e7e7      	b.n	8015762 <_raise_r+0x12>
 8015792:	2400      	movs	r4, #0
 8015794:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015798:	4628      	mov	r0, r5
 801579a:	4798      	blx	r3
 801579c:	2000      	movs	r0, #0
 801579e:	e7e0      	b.n	8015762 <_raise_r+0x12>

080157a0 <raise>:
 80157a0:	4b02      	ldr	r3, [pc, #8]	; (80157ac <raise+0xc>)
 80157a2:	4601      	mov	r1, r0
 80157a4:	6818      	ldr	r0, [r3, #0]
 80157a6:	f7ff bfd3 	b.w	8015750 <_raise_r>
 80157aa:	bf00      	nop
 80157ac:	20000148 	.word	0x20000148

080157b0 <_fstat_r>:
 80157b0:	b538      	push	{r3, r4, r5, lr}
 80157b2:	4d07      	ldr	r5, [pc, #28]	; (80157d0 <_fstat_r+0x20>)
 80157b4:	2300      	movs	r3, #0
 80157b6:	4604      	mov	r4, r0
 80157b8:	4608      	mov	r0, r1
 80157ba:	4611      	mov	r1, r2
 80157bc:	602b      	str	r3, [r5, #0]
 80157be:	f7f1 f926 	bl	8006a0e <_fstat>
 80157c2:	1c43      	adds	r3, r0, #1
 80157c4:	d102      	bne.n	80157cc <_fstat_r+0x1c>
 80157c6:	682b      	ldr	r3, [r5, #0]
 80157c8:	b103      	cbz	r3, 80157cc <_fstat_r+0x1c>
 80157ca:	6023      	str	r3, [r4, #0]
 80157cc:	bd38      	pop	{r3, r4, r5, pc}
 80157ce:	bf00      	nop
 80157d0:	200007c8 	.word	0x200007c8

080157d4 <_isatty_r>:
 80157d4:	b538      	push	{r3, r4, r5, lr}
 80157d6:	4d06      	ldr	r5, [pc, #24]	; (80157f0 <_isatty_r+0x1c>)
 80157d8:	2300      	movs	r3, #0
 80157da:	4604      	mov	r4, r0
 80157dc:	4608      	mov	r0, r1
 80157de:	602b      	str	r3, [r5, #0]
 80157e0:	f7f1 f925 	bl	8006a2e <_isatty>
 80157e4:	1c43      	adds	r3, r0, #1
 80157e6:	d102      	bne.n	80157ee <_isatty_r+0x1a>
 80157e8:	682b      	ldr	r3, [r5, #0]
 80157ea:	b103      	cbz	r3, 80157ee <_isatty_r+0x1a>
 80157ec:	6023      	str	r3, [r4, #0]
 80157ee:	bd38      	pop	{r3, r4, r5, pc}
 80157f0:	200007c8 	.word	0x200007c8

080157f4 <_kill_r>:
 80157f4:	b538      	push	{r3, r4, r5, lr}
 80157f6:	4d07      	ldr	r5, [pc, #28]	; (8015814 <_kill_r+0x20>)
 80157f8:	2300      	movs	r3, #0
 80157fa:	4604      	mov	r4, r0
 80157fc:	4608      	mov	r0, r1
 80157fe:	4611      	mov	r1, r2
 8015800:	602b      	str	r3, [r5, #0]
 8015802:	f7f1 f8a5 	bl	8006950 <_kill>
 8015806:	1c43      	adds	r3, r0, #1
 8015808:	d102      	bne.n	8015810 <_kill_r+0x1c>
 801580a:	682b      	ldr	r3, [r5, #0]
 801580c:	b103      	cbz	r3, 8015810 <_kill_r+0x1c>
 801580e:	6023      	str	r3, [r4, #0]
 8015810:	bd38      	pop	{r3, r4, r5, pc}
 8015812:	bf00      	nop
 8015814:	200007c8 	.word	0x200007c8

08015818 <_getpid_r>:
 8015818:	f7f1 b892 	b.w	8006940 <_getpid>

0801581c <_init>:
 801581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801581e:	bf00      	nop
 8015820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015822:	bc08      	pop	{r3}
 8015824:	469e      	mov	lr, r3
 8015826:	4770      	bx	lr

08015828 <_fini>:
 8015828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801582a:	bf00      	nop
 801582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801582e:	bc08      	pop	{r3}
 8015830:	469e      	mov	lr, r3
 8015832:	4770      	bx	lr
