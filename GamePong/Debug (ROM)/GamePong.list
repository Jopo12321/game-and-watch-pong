
GamePong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 ._itcram      00000000  00000100  00000100  000300a4  2**0
                  CONTENTS
  1 ._itcram_hot  00000000  00000100  00000100  000300a4  2**0
                  CONTENTS
  2 ._ram_uc      0004b000  24000000  24000000  00040000  2**4
                  ALLOC
  3 ._ram_exec    00000000  24050000  24050000  000300a4  2**0
                  CONTENTS
  4 ._extflash    00000000  90000000  90000000  000300a4  2**0
                  CONTENTS
  5 ._configflash 00000000  900ff000  900ff000  000300a4  2**0
                  CONTENTS
  6 ._ram         00000000  24050000  24050000  000300a4  2**0
                  CONTENTS
  7 ._ahbram      00017700  30000000  30000000  00040000  2**2
                  ALLOC
  8 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .text         0000fe94  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .rodata       000011ec  08010144  08010144  00020144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init_array   00000004  08011330  08011330  00021330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .fini_array   00000004  08011334  08011334  00021334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         000000a4  20000000  08011338  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 ._flash_end   00000000  08011338  08011338  000300a4  2**0
                  CONTENTS
 15 .bss          00000548  200000a4  200000a4  000300a4  2**2
                  ALLOC
 16 ._persistent  00000004  200005ec  200005ec  000300a4  2**0
                  ALLOC
 17 ._user_heap   00008000  200005f0  200005f0  000300a4  2**0
                  ALLOC
 18 ._user_stack  00017a10  200085f0  200085f0  000300a4  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 20 .debug_info   0003511f  00000000  00000000  000300d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 000053c9  00000000  00000000  000651f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 000019b0  00000000  00000000  0006a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000017c0  00000000  00000000  0006bf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00037b80  00000000  00000000  0006d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   000224c6  00000000  00000000  000a52b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0015da60  00000000  00000000  000c7776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      00000053  00000000  00000000  002251d6  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000076cc  00000000  00000000  0022522c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	200000a4 	.word	0x200000a4
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801012c 	.word	0x0801012c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	200000a8 	.word	0x200000a8
 80002ec:	0801012c 	.word	0x0801012c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <buttons_get>:
#define B_TIME (1 << 6)
#define B_GAME (1 << 7)
#define B_PAUSE (1 << 8)
#define B_POWER (1 << 9)

uint32_t buttons_get() {
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
    bool left = HAL_GPIO_ReadPin(BTN_Left_GPIO_Port, BTN_Left_Pin) == GPIO_PIN_RESET;
 8000396:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800039a:	4843      	ldr	r0, [pc, #268]	; (80004a8 <buttons_get+0x118>)
 800039c:	f007 fe84 	bl	80080a8 <HAL_GPIO_ReadPin>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	bf0c      	ite	eq
 80003a6:	2301      	moveq	r3, #1
 80003a8:	2300      	movne	r3, #0
 80003aa:	73fb      	strb	r3, [r7, #15]
    bool right = HAL_GPIO_ReadPin(BTN_Right_GPIO_Port, BTN_Right_Pin) == GPIO_PIN_RESET;
 80003ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b0:	483d      	ldr	r0, [pc, #244]	; (80004a8 <buttons_get+0x118>)
 80003b2:	f007 fe79 	bl	80080a8 <HAL_GPIO_ReadPin>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	bf0c      	ite	eq
 80003bc:	2301      	moveq	r3, #1
 80003be:	2300      	movne	r3, #0
 80003c0:	73bb      	strb	r3, [r7, #14]
    bool up = HAL_GPIO_ReadPin(BTN_Up_GPIO_Port, BTN_Up_Pin) == GPIO_PIN_RESET ;
 80003c2:	2101      	movs	r1, #1
 80003c4:	4838      	ldr	r0, [pc, #224]	; (80004a8 <buttons_get+0x118>)
 80003c6:	f007 fe6f 	bl	80080a8 <HAL_GPIO_ReadPin>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	bf0c      	ite	eq
 80003d0:	2301      	moveq	r3, #1
 80003d2:	2300      	movne	r3, #0
 80003d4:	737b      	strb	r3, [r7, #13]
    bool down = HAL_GPIO_ReadPin(BTN_Down_GPIO_Port, BTN_Down_Pin) == GPIO_PIN_RESET;
 80003d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003da:	4833      	ldr	r0, [pc, #204]	; (80004a8 <buttons_get+0x118>)
 80003dc:	f007 fe64 	bl	80080a8 <HAL_GPIO_ReadPin>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	bf0c      	ite	eq
 80003e6:	2301      	moveq	r3, #1
 80003e8:	2300      	movne	r3, #0
 80003ea:	733b      	strb	r3, [r7, #12]
    bool a = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin) == GPIO_PIN_RESET;
 80003ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f0:	482d      	ldr	r0, [pc, #180]	; (80004a8 <buttons_get+0x118>)
 80003f2:	f007 fe59 	bl	80080a8 <HAL_GPIO_ReadPin>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	bf0c      	ite	eq
 80003fc:	2301      	moveq	r3, #1
 80003fe:	2300      	movne	r3, #0
 8000400:	72fb      	strb	r3, [r7, #11]
    bool b = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_B_Pin) == GPIO_PIN_RESET;
 8000402:	2120      	movs	r1, #32
 8000404:	4828      	ldr	r0, [pc, #160]	; (80004a8 <buttons_get+0x118>)
 8000406:	f007 fe4f 	bl	80080a8 <HAL_GPIO_ReadPin>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	bf0c      	ite	eq
 8000410:	2301      	moveq	r3, #1
 8000412:	2300      	movne	r3, #0
 8000414:	72bb      	strb	r3, [r7, #10]
    bool time = HAL_GPIO_ReadPin(BTN_TIME_GPIO_Port, BTN_TIME_Pin) == GPIO_PIN_RESET;
 8000416:	2120      	movs	r1, #32
 8000418:	4824      	ldr	r0, [pc, #144]	; (80004ac <buttons_get+0x11c>)
 800041a:	f007 fe45 	bl	80080a8 <HAL_GPIO_ReadPin>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	bf0c      	ite	eq
 8000424:	2301      	moveq	r3, #1
 8000426:	2300      	movne	r3, #0
 8000428:	727b      	strb	r3, [r7, #9]
    bool game = HAL_GPIO_ReadPin(BTN_GAME_GPIO_Port, BTN_GAME_Pin) == GPIO_PIN_RESET;
 800042a:	2102      	movs	r1, #2
 800042c:	481f      	ldr	r0, [pc, #124]	; (80004ac <buttons_get+0x11c>)
 800042e:	f007 fe3b 	bl	80080a8 <HAL_GPIO_ReadPin>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	bf0c      	ite	eq
 8000438:	2301      	moveq	r3, #1
 800043a:	2300      	movne	r3, #0
 800043c:	723b      	strb	r3, [r7, #8]
    bool pause = HAL_GPIO_ReadPin(BTN_PAUSE_GPIO_Port, BTN_PAUSE_Pin) == GPIO_PIN_RESET;
 800043e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000442:	481a      	ldr	r0, [pc, #104]	; (80004ac <buttons_get+0x11c>)
 8000444:	f007 fe30 	bl	80080a8 <HAL_GPIO_ReadPin>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	bf0c      	ite	eq
 800044e:	2301      	moveq	r3, #1
 8000450:	2300      	movne	r3, #0
 8000452:	71fb      	strb	r3, [r7, #7]
    bool power = HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == GPIO_PIN_RESET;
 8000454:	2101      	movs	r1, #1
 8000456:	4816      	ldr	r0, [pc, #88]	; (80004b0 <buttons_get+0x120>)
 8000458:	f007 fe26 	bl	80080a8 <HAL_GPIO_ReadPin>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	bf0c      	ite	eq
 8000462:	2301      	moveq	r3, #1
 8000464:	2300      	movne	r3, #0
 8000466:	71bb      	strb	r3, [r7, #6]

    return (
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) | (time << 6) | (game << 7) | (pause << 8) | (power << 9)
 8000468:	7bfa      	ldrb	r2, [r7, #15]
 800046a:	7b7b      	ldrb	r3, [r7, #13]
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	431a      	orrs	r2, r3
 8000470:	7bbb      	ldrb	r3, [r7, #14]
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	431a      	orrs	r2, r3
 8000476:	7b3b      	ldrb	r3, [r7, #12]
 8000478:	00db      	lsls	r3, r3, #3
 800047a:	431a      	orrs	r2, r3
 800047c:	7afb      	ldrb	r3, [r7, #11]
 800047e:	011b      	lsls	r3, r3, #4
 8000480:	431a      	orrs	r2, r3
 8000482:	7abb      	ldrb	r3, [r7, #10]
 8000484:	015b      	lsls	r3, r3, #5
 8000486:	431a      	orrs	r2, r3
 8000488:	7a7b      	ldrb	r3, [r7, #9]
 800048a:	019b      	lsls	r3, r3, #6
 800048c:	431a      	orrs	r2, r3
 800048e:	7a3b      	ldrb	r3, [r7, #8]
 8000490:	01db      	lsls	r3, r3, #7
 8000492:	431a      	orrs	r2, r3
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	021b      	lsls	r3, r3, #8
 8000498:	431a      	orrs	r2, r3
 800049a:	79bb      	ldrb	r3, [r7, #6]
 800049c:	025b      	lsls	r3, r3, #9
 800049e:	4313      	orrs	r3, r2
    );


}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	58020c00 	.word	0x58020c00
 80004ac:	58020800 	.word	0x58020800
 80004b0:	58020000 	.word	0x58020000

080004b4 <flash_memory_map>:
#include "flash.h"
#include "main.h"

void flash_memory_map(OSPI_HandleTypeDef *spi) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b0ac      	sub	sp, #176	; 0xb0
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef cmd = {
 80004bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80004c0:	2250      	movs	r2, #80	; 0x50
 80004c2:	2100      	movs	r1, #0
 80004c4:	4618      	mov	r0, r3
 80004c6:	f00e fc35 	bl	800ed34 <memset>
 80004ca:	23eb      	movs	r3, #235	; 0xeb
 80004cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80004ce:	2301      	movs	r3, #1
 80004d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80004d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80004d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80004e0:	2304      	movs	r3, #4
 80004e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80004e6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80004ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80004ee:	2301      	movs	r3, #1
 80004f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80004f4:	2304      	movs	r3, #4
 80004f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    .AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_8_BITS, // ??? firmware uses '1' ??
    .NbData = 1, // Data length
    .AlternateBytes = 0b000100, //0xa5, // Hmmmm
  };

  HAL_Delay(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f002 fd76 	bl	8002fec <HAL_Delay>
  
  if(HAL_OSPI_Command(spi, &cmd, 1000) != HAL_OK) {
 8000500:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000508:	4619      	mov	r1, r3
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f008 fbec 	bl	8008ce8 <HAL_OSPI_Command>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <flash_memory_map+0x66>
      Error_Handler();
 8000516:	f001 fe43 	bl	80021a0 <Error_Handler>
  }
  HAL_Delay(50);
 800051a:	2032      	movs	r0, #50	; 0x32
 800051c:	f002 fd66 	bl	8002fec <HAL_Delay>


  OSPI_MemoryMappedTypeDef sMemMappedCfg;

  OSPI_RegularCmdTypeDef sCommand = {
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	2250      	movs	r2, #80	; 0x50
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f00e fc03 	bl	800ed34 <memset>
 800052e:	2301      	movs	r3, #1
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	23eb      	movs	r3, #235	; 0xeb
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	2301      	movs	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
 8000540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
 8000546:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800054a:	643b      	str	r3, [r7, #64]	; 0x40
 800054c:	2301      	movs	r3, #1
 800054e:	647b      	str	r3, [r7, #68]	; 0x44
 8000550:	2304      	movs	r3, #4
 8000552:	64fb      	str	r3, [r7, #76]	; 0x4c
  // }
  // HAL_Delay(100);



  sCommand.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8000554:	2302      	movs	r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
  sCommand.Instruction = 0x38; /* 4PP / 4 x page program */ // LINEAR_BURST_WRITE;
 8000558:	2338      	movs	r3, #56	; 0x38
 800055a:	613b      	str	r3, [r7, #16]
  sCommand.DummyCycles = 0; //DUMMY_CLOCK_CYCLES_SRAM_WRITE;
 800055c:	2300      	movs	r3, #0
 800055e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_OSPI_Command(spi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) !=
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	f241 3288 	movw	r2, #5000	; 0x1388
 8000568:	4619      	mov	r1, r3
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f008 fbbc 	bl	8008ce8 <HAL_OSPI_Command>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <flash_memory_map+0xc6>
      HAL_OK) {
    Error_Handler();
 8000576:	f001 fe13 	bl	80021a0 <Error_Handler>
  }
  /* Memory-mapped mode configuration for Linear burst read operations */
  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 800057a:	2301      	movs	r3, #1
 800057c:	60bb      	str	r3, [r7, #8]
  sCommand.Instruction = 0xEB; /* 4READ */  //LINEAR_BURST_READ;
 800057e:	23eb      	movs	r3, #235	; 0xeb
 8000580:	613b      	str	r3, [r7, #16]
  sCommand.DummyCycles = 6; //DUMMY_CLOCK_CYCLES_SRAM_READ;
 8000582:	2306      	movs	r3, #6
 8000584:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(spi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) !=
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	f241 3288 	movw	r2, #5000	; 0x1388
 800058e:	4619      	mov	r1, r3
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f008 fba9 	bl	8008ce8 <HAL_OSPI_Command>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <flash_memory_map+0xec>
      HAL_OK) {
    Error_Handler();
 800059c:	f001 fe00 	bl	80021a0 <Error_Handler>
  }
  /*Disable timeout counter for memory mapped mode*/
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMemMappedCfg.TimeOutPeriod = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  /*Enable memory mapped mode*/
  if (HAL_OSPI_MemoryMapped(spi, &sMemMappedCfg) != HAL_OK) {
 80005a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005ac:	4619      	mov	r1, r3
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f008 fc28 	bl	8008e04 <HAL_OSPI_MemoryMapped>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <flash_memory_map+0x10a>
    Error_Handler();
 80005ba:	f001 fdf1 	bl	80021a0 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	37b0      	adds	r7, #176	; 0xb0
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <game_init>:
int ball_xspeed;
int ball_yspeed;
int ball_x;
int ball_y;

void game_init(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
 80005ce:	f001 f8ab 	bl	8001728 <lcd_get_active_buffer>
 80005d2:	6078      	str	r0, [r7, #4]
	draw_background(buf);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f000 f887 	bl	80006e8 <draw_background>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80005da:	2200      	movs	r2, #0
 80005dc:	492c      	ldr	r1, [pc, #176]	; (8000690 <game_init+0xc8>)
 80005de:	482d      	ldr	r0, [pc, #180]	; (8000694 <game_init+0xcc>)
 80005e0:	f00c fdee 	bl	800d1c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80005e4:	2200      	movs	r2, #0
 80005e6:	492c      	ldr	r1, [pc, #176]	; (8000698 <game_init+0xd0>)
 80005e8:	482a      	ldr	r0, [pc, #168]	; (8000694 <game_init+0xcc>)
 80005ea:	f00c fecd 	bl	800d388 <HAL_RTC_GetDate>
	HAL_ADC_Start(&hadc1);
 80005ee:	482b      	ldr	r0, [pc, #172]	; (800069c <game_init+0xd4>)
 80005f0:	f003 f870 	bl	80036d4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005f4:	f04f 31ff 	mov.w	r1, #4294967295
 80005f8:	4828      	ldr	r0, [pc, #160]	; (800069c <game_init+0xd4>)
 80005fa:	f003 f925 	bl	8003848 <HAL_ADC_PollForConversion>
	srand(HAL_ADC_GetValue(&hadc1) ^ sTime.SubSeconds);
 80005fe:	4827      	ldr	r0, [pc, #156]	; (800069c <game_init+0xd4>)
 8000600:	f003 f9fa 	bl	80039f8 <HAL_ADC_GetValue>
 8000604:	4602      	mov	r2, r0
 8000606:	4b22      	ldr	r3, [pc, #136]	; (8000690 <game_init+0xc8>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	4053      	eors	r3, r2
 800060c:	4618      	mov	r0, r3
 800060e:	f00e fb99 	bl	800ed44 <srand>
	ball_xspeed = randsing() * ball_speed;
 8000612:	f00e fbc5 	bl	800eda0 <rand>
 8000616:	4603      	mov	r3, r0
 8000618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800061c:	db02      	blt.n	8000624 <game_init+0x5c>
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	e000      	b.n	8000626 <game_init+0x5e>
 8000624:	2301      	movs	r3, #1
 8000626:	2203      	movs	r2, #3
 8000628:	fb02 f303 	mul.w	r3, r2, r3
 800062c:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <game_init+0xd8>)
 800062e:	6013      	str	r3, [r2, #0]
	ball_yspeed = randsing() * ball_speed;
 8000630:	f00e fbb6 	bl	800eda0 <rand>
 8000634:	4603      	mov	r3, r0
 8000636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800063a:	db02      	blt.n	8000642 <game_init+0x7a>
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	e000      	b.n	8000644 <game_init+0x7c>
 8000642:	2301      	movs	r3, #1
 8000644:	2203      	movs	r2, #3
 8000646:	fb02 f303 	mul.w	r3, r2, r3
 800064a:	4a16      	ldr	r2, [pc, #88]	; (80006a4 <game_init+0xdc>)
 800064c:	6013      	str	r3, [r2, #0]
	ball_x = 160;
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <game_init+0xe0>)
 8000650:	22a0      	movs	r2, #160	; 0xa0
 8000652:	601a      	str	r2, [r3, #0]
	ball_y = randint(190, 70);
 8000654:	f00e fba4 	bl	800eda0 <rand>
 8000658:	4601      	mov	r1, r0
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <game_init+0xe4>)
 800065c:	fb83 2301 	smull	r2, r3, r3, r1
 8000660:	105a      	asrs	r2, r3, #1
 8000662:	17cb      	asrs	r3, r1, #31
 8000664:	1ad2      	subs	r2, r2, r3
 8000666:	4613      	mov	r3, r2
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	4413      	add	r3, r2
 8000670:	1aca      	subs	r2, r1, r3
 8000672:	f102 0346 	add.w	r3, r2, #70	; 0x46
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <game_init+0xe8>)
 8000678:	6013      	str	r3, [r2, #0]
	lcd_sync();
 800067a:	f001 f83d 	bl	80016f8 <lcd_sync>
	lcd_swap();
 800067e:	f001 f825 	bl	80016cc <lcd_swap>
	lcd_wait_for_vblank();
 8000682:	f001 f87d 	bl	8001780 <lcd_wait_for_vblank>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000c0 	.word	0x200000c0
 8000694:	200004b0 	.word	0x200004b0
 8000698:	200000d4 	.word	0x200000d4
 800069c:	2000044c 	.word	0x2000044c
 80006a0:	20000204 	.word	0x20000204
 80006a4:	20000200 	.word	0x20000200
 80006a8:	20000208 	.word	0x20000208
 80006ac:	043b3d5b 	.word	0x043b3d5b
 80006b0:	200001fc 	.word	0x200001fc

080006b4 <game_loop>:

void game_loop(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
 80006ba:	f001 f835 	bl	8001728 <lcd_get_active_buffer>
 80006be:	6078      	str	r0, [r7, #4]
	draw_background(buf);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f811 	bl	80006e8 <draw_background>
	update_player(buf);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 f878 	bl	80007bc <update_player>
	update_ai(buf);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f9e1 	bl	8000a94 <update_ai>
	update_ball(buf);
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f8ec 	bl	80008b0 <update_ball>
	lcd_swap();
 80006d8:	f000 fff8 	bl	80016cc <lcd_swap>
	lcd_wait_for_vblank();
 80006dc:	f001 f850 	bl	8001780 <lcd_wait_for_vblank>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <draw_background>:

void draw_background(uint16_t *buf) {
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af02      	add	r7, sp, #8
 80006ee:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
 80006f0:	2100      	movs	r1, #0
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f000 fa6a 	bl	8000bcc <LCD_Clear>
	LCD_DrawRect(buf, 0, 20, LCD_GetXSize() - 1, LCD_GetYSize() - 21,
 80006f8:	f000 fa26 	bl	8000b48 <LCD_GetXSize>
 80006fc:	4603      	mov	r3, r0
 80006fe:	3b01      	subs	r3, #1
 8000700:	b29c      	uxth	r4, r3
 8000702:	f000 fa2a 	bl	8000b5a <LCD_GetYSize>
 8000706:	4603      	mov	r3, r0
 8000708:	3b15      	subs	r3, #21
 800070a:	b29b      	uxth	r3, r3
 800070c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	4623      	mov	r3, r4
 8000716:	2214      	movs	r2, #20
 8000718:	2100      	movs	r1, #0
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f000 fb84 	bl	8000e28 <LCD_DrawRect>
	LCD_COLOR_WHITE);
	draw_score(buf);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f805 	bl	8000730 <draw_score>
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	bd90      	pop	{r4, r7, pc}
	...

08000730 <draw_score>:

void draw_score(uint16_t *buf) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af02      	add	r7, sp, #8
 8000736:	6078      	str	r0, [r7, #4]
	LCD_SetFont(&Font16);
 8000738:	4818      	ldr	r0, [pc, #96]	; (800079c <draw_score+0x6c>)
 800073a:	f000 fa17 	bl	8000b6c <LCD_SetFont>
	sprintf(score_p1_buf, "%d", score_p1);
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <draw_score+0x70>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	4917      	ldr	r1, [pc, #92]	; (80007a4 <draw_score+0x74>)
 8000746:	4818      	ldr	r0, [pc, #96]	; (80007a8 <draw_score+0x78>)
 8000748:	f00e fb6a 	bl	800ee20 <siprintf>
	LCD_DisplayStringAt(buf, 0, 4, (uint8_t*) score_p1_buf, LEFT_MODE);
 800074c:	2303      	movs	r3, #3
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <draw_score+0x78>)
 8000752:	2204      	movs	r2, #4
 8000754:	2100      	movs	r1, #0
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 fa52 	bl	8000c00 <LCD_DisplayStringAt>
	sprintf(score_p2_buf, "%d", score_p2);
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <draw_score+0x7c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4910      	ldr	r1, [pc, #64]	; (80007a4 <draw_score+0x74>)
 8000764:	4812      	ldr	r0, [pc, #72]	; (80007b0 <draw_score+0x80>)
 8000766:	f00e fb5b 	bl	800ee20 <siprintf>
	LCD_DisplayStringAt(buf, 2, 4, (uint8_t*) score_p2_buf, RIGHT_MODE);
 800076a:	2302      	movs	r3, #2
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <draw_score+0x80>)
 8000770:	2204      	movs	r2, #4
 8000772:	2102      	movs	r1, #2
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 fa43 	bl	8000c00 <LCD_DisplayStringAt>
	sprintf(text_buf, "SCORE");
 800077a:	490e      	ldr	r1, [pc, #56]	; (80007b4 <draw_score+0x84>)
 800077c:	480e      	ldr	r0, [pc, #56]	; (80007b8 <draw_score+0x88>)
 800077e:	f00e fb4f 	bl	800ee20 <siprintf>
	LCD_DisplayStringAt(buf, 1, 4, (uint8_t*) text_buf, CENTER_MODE);
 8000782:	2301      	movs	r3, #1
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <draw_score+0x88>)
 8000788:	2204      	movs	r2, #4
 800078a:	2101      	movs	r1, #1
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 fa37 	bl	8000c00 <LCD_DisplayStringAt>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000008 	.word	0x20000008
 80007a0:	200000d8 	.word	0x200000d8
 80007a4:	08010144 	.word	0x08010144
 80007a8:	2000020c 	.word	0x2000020c
 80007ac:	200000dc 	.word	0x200000dc
 80007b0:	200001f4 	.word	0x200001f4
 80007b4:	08010148 	.word	0x08010148
 80007b8:	200000f4 	.word	0x200000f4

080007bc <update_player>:

void update_player(uint16_t *buf) {
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b087      	sub	sp, #28
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	6078      	str	r0, [r7, #4]
	uint32_t buttons = buttons_get();
 80007c4:	f7ff fde4 	bl	8000390 <buttons_get>
 80007c8:	60f8      	str	r0, [r7, #12]
	if (buttons & B_Up) {
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00c      	beq.n	80007ee <update_player+0x32>
		if (p1_y >= 20 + p1_speed + 2) {
 80007d4:	2302      	movs	r3, #2
 80007d6:	f103 0215 	add.w	r2, r3, #21
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <update_player+0xdc>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	429a      	cmp	r2, r3
 80007e0:	da05      	bge.n	80007ee <update_player+0x32>
			p1_y = p1_y - p1_speed;
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <update_player+0xdc>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2202      	movs	r2, #2
 80007e8:	1a9b      	subs	r3, r3, r2
 80007ea:	4a2b      	ldr	r2, [pc, #172]	; (8000898 <update_player+0xdc>)
 80007ec:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_Down) {
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f003 0308 	and.w	r3, r3, #8
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d012      	beq.n	800081e <update_player+0x62>
		if (p1_y <= LCD_GetYSize() - p1_height - p1_speed - 2) {
 80007f8:	f000 f9af 	bl	8000b5a <LCD_GetYSize>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	2328      	movs	r3, #40	; 0x28
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	2202      	movs	r2, #2
 8000806:	1a9b      	subs	r3, r3, r2
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <update_player+0xdc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	429a      	cmp	r2, r3
 8000810:	dd05      	ble.n	800081e <update_player+0x62>
			p1_y = p1_y + p1_speed;
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <update_player+0xdc>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2202      	movs	r2, #2
 8000818:	4413      	add	r3, r2
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <update_player+0xdc>)
 800081c:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_GAME) {
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000824:	2b00      	cmp	r3, #0
 8000826:	d01a      	beq.n	800085e <update_player+0xa2>
		score_p1 = 0;
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <update_player+0xe0>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
		score_p2 = 0;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <update_player+0xe4>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
		p1_x = 3;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <update_player+0xe8>)
 8000836:	2203      	movs	r2, #3
 8000838:	601a      	str	r2, [r3, #0]
		p1_y = 110;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <update_player+0xdc>)
 800083c:	226e      	movs	r2, #110	; 0x6e
 800083e:	601a      	str	r2, [r3, #0]
		p2_x = 320 - 3 - p2_width;
 8000840:	2205      	movs	r2, #5
 8000842:	f240 133d 	movw	r3, #317	; 0x13d
 8000846:	1a9b      	subs	r3, r3, r2
 8000848:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <update_player+0xec>)
 800084a:	6013      	str	r3, [r2, #0]
		p2_y = 110;
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <update_player+0xf0>)
 800084e:	226e      	movs	r2, #110	; 0x6e
 8000850:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
 8000852:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000856:	f002 fbc9 	bl	8002fec <HAL_Delay>
		game_init();
 800085a:	f7ff feb5 	bl	80005c8 <game_init>
	}
	if (buttons & B_POWER) {
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <update_player+0xb0>
		HAL_NVIC_SystemReset();
 8000868:	f004 f947 	bl	8004afa <HAL_NVIC_SystemReset>
	}
	LCD_FillRect(buf, p1_x, p1_y, p1_width, p1_height, LCD_COLOR_WHITE);
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <update_player+0xe8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	b299      	uxth	r1, r3
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <update_player+0xdc>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	b29a      	uxth	r2, r3
 8000878:	2305      	movs	r3, #5
 800087a:	b298      	uxth	r0, r3
 800087c:	2328      	movs	r3, #40	; 0x28
 800087e:	b29b      	uxth	r3, r3
 8000880:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8000884:	9401      	str	r4, [sp, #4]
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	4603      	mov	r3, r0
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 fbb0 	bl	8000ff0 <LCD_FillRect>
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	bd90      	pop	{r4, r7, pc}
 8000898:	20000014 	.word	0x20000014
 800089c:	200000d8 	.word	0x200000d8
 80008a0:	200000dc 	.word	0x200000dc
 80008a4:	20000010 	.word	0x20000010
 80008a8:	20000018 	.word	0x20000018
 80008ac:	2000001c 	.word	0x2000001c

080008b0 <update_ball>:

void update_ball(uint16_t *buf) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	6078      	str	r0, [r7, #4]

	if (ball_x <= ball_r + ball_speed + p1_x + p1_width / 2
 80008b8:	2208      	movs	r2, #8
 80008ba:	2303      	movs	r3, #3
 80008bc:	441a      	add	r2, r3
 80008be:	4b6b      	ldr	r3, [pc, #428]	; (8000a6c <update_ball+0x1bc>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	441a      	add	r2, r3
 80008c4:	2305      	movs	r3, #5
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	da00      	bge.n	80008cc <update_ball+0x1c>
 80008ca:	3301      	adds	r3, #1
 80008cc:	105b      	asrs	r3, r3, #1
 80008ce:	441a      	add	r2, r3
 80008d0:	4b67      	ldr	r3, [pc, #412]	; (8000a70 <update_ball+0x1c0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	db38      	blt.n	800094a <update_ball+0x9a>
			&& ball_xspeed == -ball_speed) {
 80008d8:	2303      	movs	r3, #3
 80008da:	425a      	negs	r2, r3
 80008dc:	4b65      	ldr	r3, [pc, #404]	; (8000a74 <update_ball+0x1c4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d132      	bne.n	800094a <update_ball+0x9a>
		ball_xspeed = ball_speed;
 80008e4:	2203      	movs	r2, #3
 80008e6:	4b63      	ldr	r3, [pc, #396]	; (8000a74 <update_ball+0x1c4>)
 80008e8:	601a      	str	r2, [r3, #0]
		if (ball_y >= p1_y - 2 && ball_y <= p1_y + p1_height + 2) {
 80008ea:	4b63      	ldr	r3, [pc, #396]	; (8000a78 <update_ball+0x1c8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	1e9a      	subs	r2, r3, #2
 80008f0:	4b62      	ldr	r3, [pc, #392]	; (8000a7c <update_ball+0x1cc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dc08      	bgt.n	800090a <update_ball+0x5a>
 80008f8:	4b5f      	ldr	r3, [pc, #380]	; (8000a78 <update_ball+0x1c8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2228      	movs	r2, #40	; 0x28
 80008fe:	4413      	add	r3, r2
 8000900:	1c9a      	adds	r2, r3, #2
 8000902:	4b5e      	ldr	r3, [pc, #376]	; (8000a7c <update_ball+0x1cc>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	da1f      	bge.n	800094a <update_ball+0x9a>

		} else {
			score_p2++;
 800090a:	4b5d      	ldr	r3, [pc, #372]	; (8000a80 <update_ball+0x1d0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3301      	adds	r3, #1
 8000910:	4a5b      	ldr	r2, [pc, #364]	; (8000a80 <update_ball+0x1d0>)
 8000912:	6013      	str	r3, [r2, #0]
			draw_score(buf);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff0b 	bl	8000730 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
 800091a:	4b55      	ldr	r3, [pc, #340]	; (8000a70 <update_ball+0x1c0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	b299      	uxth	r1, r3
 8000920:	4b56      	ldr	r3, [pc, #344]	; (8000a7c <update_ball+0x1cc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	b29a      	uxth	r2, r3
 8000926:	2308      	movs	r3, #8
 8000928:	b29b      	uxth	r3, r3
 800092a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800092e:	9000      	str	r0, [sp, #0]
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 fb8e 	bl	8001052 <LCD_FillCircle>
			lcd_swap();
 8000936:	f000 fec9 	bl	80016cc <lcd_swap>
			lcd_wait_for_vblank();
 800093a:	f000 ff21 	bl	8001780 <lcd_wait_for_vblank>
			HAL_Delay(1000);
 800093e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000942:	f002 fb53 	bl	8002fec <HAL_Delay>
			game_init();
 8000946:	f7ff fe3f 	bl	80005c8 <game_init>
		}
	}
	if (ball_x >= p2_x + p2_width / 2 - ball_r - ball_speed
 800094a:	2305      	movs	r3, #5
 800094c:	2b00      	cmp	r3, #0
 800094e:	da00      	bge.n	8000952 <update_ball+0xa2>
 8000950:	3301      	adds	r3, #1
 8000952:	105b      	asrs	r3, r3, #1
 8000954:	461a      	mov	r2, r3
 8000956:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <update_ball+0x1d4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4413      	add	r3, r2
 800095c:	2208      	movs	r2, #8
 800095e:	1a9b      	subs	r3, r3, r2
 8000960:	2203      	movs	r2, #3
 8000962:	1a9a      	subs	r2, r3, r2
 8000964:	4b42      	ldr	r3, [pc, #264]	; (8000a70 <update_ball+0x1c0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	dc38      	bgt.n	80009de <update_ball+0x12e>
			&& ball_xspeed == ball_speed) {
 800096c:	4b41      	ldr	r3, [pc, #260]	; (8000a74 <update_ball+0x1c4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2203      	movs	r2, #3
 8000972:	4293      	cmp	r3, r2
 8000974:	d133      	bne.n	80009de <update_ball+0x12e>
		ball_xspeed = -ball_speed;
 8000976:	2303      	movs	r3, #3
 8000978:	425b      	negs	r3, r3
 800097a:	4a3e      	ldr	r2, [pc, #248]	; (8000a74 <update_ball+0x1c4>)
 800097c:	6013      	str	r3, [r2, #0]
		if (ball_y >= p2_y - 2 && ball_y <= p2_y + p2_height + 2) {
 800097e:	4b42      	ldr	r3, [pc, #264]	; (8000a88 <update_ball+0x1d8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	1e9a      	subs	r2, r3, #2
 8000984:	4b3d      	ldr	r3, [pc, #244]	; (8000a7c <update_ball+0x1cc>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	429a      	cmp	r2, r3
 800098a:	dc08      	bgt.n	800099e <update_ball+0xee>
 800098c:	4b3e      	ldr	r3, [pc, #248]	; (8000a88 <update_ball+0x1d8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2228      	movs	r2, #40	; 0x28
 8000992:	4413      	add	r3, r2
 8000994:	1c9a      	adds	r2, r3, #2
 8000996:	4b39      	ldr	r3, [pc, #228]	; (8000a7c <update_ball+0x1cc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	429a      	cmp	r2, r3
 800099c:	da1f      	bge.n	80009de <update_ball+0x12e>

		} else {
			score_p1++;
 800099e:	4b3b      	ldr	r3, [pc, #236]	; (8000a8c <update_ball+0x1dc>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a39      	ldr	r2, [pc, #228]	; (8000a8c <update_ball+0x1dc>)
 80009a6:	6013      	str	r3, [r2, #0]
			draw_score(buf);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fec1 	bl	8000730 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
 80009ae:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <update_ball+0x1c0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	b299      	uxth	r1, r3
 80009b4:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <update_ball+0x1cc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	2308      	movs	r3, #8
 80009bc:	b29b      	uxth	r3, r3
 80009be:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80009c2:	9000      	str	r0, [sp, #0]
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 fb44 	bl	8001052 <LCD_FillCircle>
			lcd_swap();
 80009ca:	f000 fe7f 	bl	80016cc <lcd_swap>
			lcd_wait_for_vblank();
 80009ce:	f000 fed7 	bl	8001780 <lcd_wait_for_vblank>
			HAL_Delay(1000);
 80009d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d6:	f002 fb09 	bl	8002fec <HAL_Delay>
			game_init();
 80009da:	f7ff fdf5 	bl	80005c8 <game_init>
		}
	}
	if (ball_y <= 20 + ball_r + ball_speed && ball_yspeed == -ball_speed) {
 80009de:	2308      	movs	r3, #8
 80009e0:	3314      	adds	r3, #20
 80009e2:	2203      	movs	r2, #3
 80009e4:	441a      	add	r2, r3
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <update_ball+0x1cc>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	db08      	blt.n	8000a00 <update_ball+0x150>
 80009ee:	2303      	movs	r3, #3
 80009f0:	425a      	negs	r2, r3
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <update_ball+0x1e0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d102      	bne.n	8000a00 <update_ball+0x150>
		ball_yspeed = ball_speed;
 80009fa:	2203      	movs	r2, #3
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <update_ball+0x1e0>)
 80009fe:	601a      	str	r2, [r3, #0]
	}
	if (ball_y >= LCD_GetYSize() - ball_r - ball_speed
 8000a00:	f000 f8ab 	bl	8000b5a <LCD_GetYSize>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	2308      	movs	r3, #8
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	1a9a      	subs	r2, r3, r2
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <update_ball+0x1cc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dc08      	bgt.n	8000a2a <update_ball+0x17a>
			&& ball_yspeed == ball_speed) {
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <update_ball+0x1e0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d103      	bne.n	8000a2a <update_ball+0x17a>
		ball_yspeed = -ball_speed;
 8000a22:	2303      	movs	r3, #3
 8000a24:	425b      	negs	r3, r3
 8000a26:	4a1a      	ldr	r2, [pc, #104]	; (8000a90 <update_ball+0x1e0>)
 8000a28:	6013      	str	r3, [r2, #0]
	}
	ball_x = ball_x + ball_xspeed;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <update_ball+0x1c0>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <update_ball+0x1c4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <update_ball+0x1c0>)
 8000a36:	6013      	str	r3, [r2, #0]
	ball_y = ball_y + ball_yspeed;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <update_ball+0x1cc>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <update_ball+0x1e0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <update_ball+0x1cc>)
 8000a44:	6013      	str	r3, [r2, #0]

	LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_WHITE);
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <update_ball+0x1c0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	b299      	uxth	r1, r3
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <update_ball+0x1cc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	2308      	movs	r3, #8
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a5a:	9000      	str	r0, [sp, #0]
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 faf8 	bl	8001052 <LCD_FillCircle>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000010 	.word	0x20000010
 8000a70:	20000208 	.word	0x20000208
 8000a74:	20000204 	.word	0x20000204
 8000a78:	20000014 	.word	0x20000014
 8000a7c:	200001fc 	.word	0x200001fc
 8000a80:	200000dc 	.word	0x200000dc
 8000a84:	20000018 	.word	0x20000018
 8000a88:	2000001c 	.word	0x2000001c
 8000a8c:	200000d8 	.word	0x200000d8
 8000a90:	20000200 	.word	0x20000200

08000a94 <update_ai>:

void update_ai(uint16_t *buf) {
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af02      	add	r7, sp, #8
 8000a9a:	6078      	str	r0, [r7, #4]
	if (ball_y < (p2_y + (p2_height / 2))) {
 8000a9c:	2328      	movs	r3, #40	; 0x28
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	da00      	bge.n	8000aa4 <update_ai+0x10>
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	105b      	asrs	r3, r3, #1
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <update_ai+0xa8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	441a      	add	r2, r3
 8000aae:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <update_ai+0xac>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	dd0c      	ble.n	8000ad0 <update_ai+0x3c>
		if (p2_y >= 20 + p2_speed + 2) {
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f103 0215 	add.w	r2, r3, #21
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <update_ai+0xa8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	da05      	bge.n	8000ad0 <update_ai+0x3c>
			p2_y = p2_y - p2_speed;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <update_ai+0xa8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2202      	movs	r2, #2
 8000aca:	1a9b      	subs	r3, r3, r2
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <update_ai+0xa8>)
 8000ace:	6013      	str	r3, [r2, #0]
		}
	}
	if (ball_y > (p2_y + (p2_height / 2))) {
 8000ad0:	2328      	movs	r3, #40	; 0x28
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	da00      	bge.n	8000ad8 <update_ai+0x44>
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	105b      	asrs	r3, r3, #1
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <update_ai+0xa8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	441a      	add	r2, r3
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <update_ai+0xac>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	da12      	bge.n	8000b10 <update_ai+0x7c>
		if (p2_y <= LCD_GetYSize() - p2_height - p2_speed - 2) {
 8000aea:	f000 f836 	bl	8000b5a <LCD_GetYSize>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	2328      	movs	r3, #40	; 0x28
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2202      	movs	r2, #2
 8000af8:	1a9b      	subs	r3, r3, r2
 8000afa:	1e5a      	subs	r2, r3, #1
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <update_ai+0xa8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dd05      	ble.n	8000b10 <update_ai+0x7c>
			p2_y = p2_y + p2_speed;
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <update_ai+0xa8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2202      	movs	r2, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <update_ai+0xa8>)
 8000b0e:	6013      	str	r3, [r2, #0]
		}
	}
	LCD_FillRect(buf, p2_x, p2_y, p2_width, p2_height, LCD_COLOR_WHITE);
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <update_ai+0xb0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	b299      	uxth	r1, r3
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <update_ai+0xa8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	b298      	uxth	r0, r3
 8000b20:	2328      	movs	r3, #40	; 0x28
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8000b28:	9401      	str	r4, [sp, #4]
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 fa5e 	bl	8000ff0 <LCD_FillRect>
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	2000001c 	.word	0x2000001c
 8000b40:	200001fc 	.word	0x200001fc
 8000b44:	20000018 	.word	0x20000018

08000b48 <LCD_GetXSize>:
/**
 * @brief  Gets the LCD X size.
 * @param  None
 * @retval The used LCD X size
 */
uint16_t LCD_GetXSize(void) {
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	return GW_LCD_WIDTH;
 8000b4c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <LCD_GetYSize>:
/**
 * @brief  Gets the LCD Y size.
 * @param  None
 * @retval The used LCD Y size
 */
uint16_t LCD_GetYSize(void) {
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
	return GW_LCD_HEIGHT;
 8000b5e:	23f0      	movs	r3, #240	; 0xf0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <LCD_SetFont>:
/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *pFonts) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	font = pFonts;
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <LCD_SetFont+0x1c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000020 	.word	0x20000020

08000b8c <LCD_DrawPixel>:
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in RGB(5-6-5)
 * @retval None
 */
void LCD_DrawPixel(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t pixel) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	4608      	mov	r0, r1
 8000b96:	4611      	mov	r1, r2
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	817b      	strh	r3, [r7, #10]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	813b      	strh	r3, [r7, #8]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	80fb      	strh	r3, [r7, #6]
	buf[PPOS(Xpos, Ypos)] = pixel;
 8000ba6:	893a      	ldrh	r2, [r7, #8]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	019b      	lsls	r3, r3, #6
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	897b      	ldrh	r3, [r7, #10]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	4413      	add	r3, r2
 8000bbc:	88fa      	ldrh	r2, [r7, #6]
 8000bbe:	801a      	strh	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <LCD_Clear>:
/**
 * @brief  Clears the whole LCD.
 * @param  Color: the color of the background
 * @retval None
 */
void LCD_Clear(uint16_t *buf, uint16_t color) {
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
	FillBuffer((uint32_t*) buf, LCD_GetXSize(), LCD_GetYSize(), 0, color);
 8000bd8:	f7ff ffb6 	bl	8000b48 <LCD_GetXSize>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461c      	mov	r4, r3
 8000be0:	f7ff ffbb 	bl	8000b5a <LCD_GetYSize>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2300      	movs	r3, #0
 8000bee:	4621      	mov	r1, r4
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fb63 	bl	80012bc <FillBuffer>
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd90      	pop	{r4, r7, pc}
	...

08000c00 <LCD_DisplayStringAt>:
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 * @retval None
 */
void LCD_DisplayStringAt(uint16_t *buf, uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	817b      	strh	r3, [r7, #10]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	813b      	strh	r3, [r7, #8]
	uint16_t refcolumn = 1, i = 0;
 8000c12:	2301      	movs	r3, #1
 8000c14:	83fb      	strh	r3, [r7, #30]
 8000c16:	2300      	movs	r3, #0
 8000c18:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = pText;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++)
 8000c26:	e002      	b.n	8000c2e <LCD_DisplayStringAt+0x2e>
		size++;
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
	while (*ptr++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	617a      	str	r2, [r7, #20]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f6      	bne.n	8000c28 <LCD_DisplayStringAt+0x28>

	/* Characters number per line */
	xsize = (LCD_GetXSize() / font->Width);
 8000c3a:	f7ff ff85 	bl	8000b48 <LCD_GetXSize>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <LCD_DisplayStringAt+0x11c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	889b      	ldrh	r3, [r3, #4]
 8000c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	613b      	str	r3, [r7, #16]

	switch (mode) {
 8000c50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d014      	beq.n	8000c82 <LCD_DisplayStringAt+0x82>
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	dc23      	bgt.n	8000ca4 <LCD_DisplayStringAt+0xa4>
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d002      	beq.n	8000c66 <LCD_DisplayStringAt+0x66>
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d011      	beq.n	8000c88 <LCD_DisplayStringAt+0x88>
 8000c64:	e01e      	b.n	8000ca4 <LCD_DisplayStringAt+0xa4>
	case CENTER_MODE: {
		refcolumn = X + ((xsize - size) * font->Width) / 2;
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <LCD_DisplayStringAt+0x11c>)
 8000c6e:	6812      	ldr	r2, [r2, #0]
 8000c70:	8892      	ldrh	r2, [r2, #4]
 8000c72:	fb02 f303 	mul.w	r3, r2, r3
 8000c76:	085b      	lsrs	r3, r3, #1
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	897b      	ldrh	r3, [r7, #10]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	83fb      	strh	r3, [r7, #30]
		break;
 8000c80:	e013      	b.n	8000caa <LCD_DisplayStringAt+0xaa>
	}
	case LEFT_MODE: {
		refcolumn = X;
 8000c82:	897b      	ldrh	r3, [r7, #10]
 8000c84:	83fb      	strh	r3, [r7, #30]
		break;
 8000c86:	e010      	b.n	8000caa <LCD_DisplayStringAt+0xaa>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * font->Width);
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <LCD_DisplayStringAt+0x11c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	889b      	ldrh	r3, [r3, #4]
 8000c96:	fb12 f303 	smulbb	r3, r2, r3
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	897b      	ldrh	r3, [r7, #10]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	83fb      	strh	r3, [r7, #30]
		break;
 8000ca2:	e002      	b.n	8000caa <LCD_DisplayStringAt+0xaa>
	}
	default: {
		refcolumn = X;
 8000ca4:	897b      	ldrh	r3, [r7, #10]
 8000ca6:	83fb      	strh	r3, [r7, #30]
		break;
 8000ca8:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
 8000caa:	e012      	b.n	8000cd2 <LCD_DisplayStringAt+0xd2>
			& (((LCD_GetXSize() - (i * font->Width)) & 0xFFFF) >= font->Width)) {
		/* Display one character on LCD */
		LCD_DisplayChar(buf, refcolumn, Y, *pText);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	893a      	ldrh	r2, [r7, #8]
 8000cb2:	8bf9      	ldrh	r1, [r7, #30]
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f000 f833 	bl	8000d20 <LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += font->Width;
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <LCD_DisplayStringAt+0x11c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	889a      	ldrh	r2, [r3, #4]
 8000cc0:	8bfb      	ldrh	r3, [r7, #30]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		pText++;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
		i++;
 8000ccc:	8bbb      	ldrh	r3, [r7, #28]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	83bb      	strh	r3, [r7, #28]
	while ((*pText != 0)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
			& (((LCD_GetXSize() - (i * font->Width)) & 0xFFFF) >= font->Width)) {
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bf14      	ite	ne
 8000cda:	2301      	movne	r3, #1
 8000cdc:	2300      	moveq	r3, #0
 8000cde:	b2dc      	uxtb	r4, r3
 8000ce0:	f7ff ff32 	bl	8000b48 <LCD_GetXSize>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	8bbb      	ldrh	r3, [r7, #28]
 8000cea:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <LCD_DisplayStringAt+0x11c>)
 8000cec:	6812      	ldr	r2, [r2, #0]
 8000cee:	8892      	ldrh	r2, [r2, #4]
 8000cf0:	fb02 f303 	mul.w	r3, r2, r3
 8000cf4:	1acb      	subs	r3, r1, r3
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <LCD_DisplayStringAt+0x11c>)
 8000cfa:	6812      	ldr	r2, [r2, #0]
 8000cfc:	8892      	ldrh	r2, [r2, #4]
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	bfac      	ite	ge
 8000d02:	2301      	movge	r3, #1
 8000d04:	2300      	movlt	r3, #0
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4023      	ands	r3, r4
 8000d0a:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1cd      	bne.n	8000cac <LCD_DisplayStringAt+0xac>
	}
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd90      	pop	{r4, r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000020 	.word	0x20000020

08000d20 <LCD_DisplayChar>:
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 * @retval None
 */
void LCD_DisplayChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	4608      	mov	r0, r1
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	817b      	strh	r3, [r7, #10]
 8000d32:	460b      	mov	r3, r1
 8000d34:	813b      	strh	r3, [r7, #8]
 8000d36:	4613      	mov	r3, r2
 8000d38:	71fb      	strb	r3, [r7, #7]
	DrawChar(buf, Xpos, Ypos,
			&font->table[(Ascii - ' ') * font->Height * ((font->Width + 7) / 8)]);
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <LCD_DisplayChar+0x58>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	3b20      	subs	r3, #32
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <LCD_DisplayChar+0x58>)
 8000d46:	6809      	ldr	r1, [r1, #0]
 8000d48:	88c9      	ldrh	r1, [r1, #6]
 8000d4a:	fb01 f103 	mul.w	r1, r1, r3
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <LCD_DisplayChar+0x58>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	889b      	ldrh	r3, [r3, #4]
 8000d54:	3307      	adds	r3, #7
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	da00      	bge.n	8000d5c <LCD_DisplayChar+0x3c>
 8000d5a:	3307      	adds	r3, #7
 8000d5c:	10db      	asrs	r3, r3, #3
 8000d5e:	fb03 f301 	mul.w	r3, r3, r1
	DrawChar(buf, Xpos, Ypos,
 8000d62:	4413      	add	r3, r2
 8000d64:	893a      	ldrh	r2, [r7, #8]
 8000d66:	8979      	ldrh	r1, [r7, #10]
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f000 fa09 	bl	8001180 <DrawChar>
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000020 	.word	0x20000020

08000d7c <LCD_DrawHLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawHLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	4608      	mov	r0, r1
 8000d86:	4611      	mov	r1, r2
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	817b      	strh	r3, [r7, #10]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	813b      	strh	r3, [r7, #8]
 8000d92:	4613      	mov	r3, r2
 8000d94:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
 8000d9a:	f7ff fed5 	bl	8000b48 <LCD_GetXSize>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	893b      	ldrh	r3, [r7, #8]
 8000da4:	fb03 f202 	mul.w	r2, r3, r2
 8000da8:	897b      	ldrh	r3, [r7, #10]
 8000daa:	4413      	add	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	4413      	add	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, Length, 1, 0, color);
 8000db4:	88f9      	ldrh	r1, [r7, #6]
 8000db6:	8c3b      	ldrh	r3, [r7, #32]
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f000 fa7c 	bl	80012bc <FillBuffer>
}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LCD_DrawVLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawVLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4603      	mov	r3, r0
 8000ddc:	817b      	strh	r3, [r7, #10]
 8000dde:	460b      	mov	r3, r1
 8000de0:	813b      	strh	r3, [r7, #8]
 8000de2:	4613      	mov	r3, r2
 8000de4:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
 8000dea:	f7ff fead 	bl	8000b48 <LCD_GetXSize>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	893b      	ldrh	r3, [r7, #8]
 8000df4:	fb03 f202 	mul.w	r2, r3, r2
 8000df8:	897b      	ldrh	r3, [r7, #10]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	4413      	add	r3, r2
 8000e02:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, 1, Length, (LCD_GetXSize() - 1), color);
 8000e04:	88fc      	ldrh	r4, [r7, #6]
 8000e06:	f7ff fe9f 	bl	8000b48 <LCD_GetXSize>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	461a      	mov	r2, r3
 8000e10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	4613      	mov	r3, r2
 8000e16:	4622      	mov	r2, r4
 8000e18:	2101      	movs	r1, #1
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f000 fa4e 	bl	80012bc <FillBuffer>
}
 8000e20:	bf00      	nop
 8000e22:	371c      	adds	r7, #28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd90      	pop	{r4, r7, pc}

08000e28 <LCD_DrawRect>:
 * @param  Height: display rectangle height
 * @param  Width: display rectangle width
 * @retval None
 */
void LCD_DrawRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	4603      	mov	r3, r0
 8000e38:	817b      	strh	r3, [r7, #10]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	813b      	strh	r3, [r7, #8]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	80fb      	strh	r3, [r7, #6]
	/* Draw horizontal lines */
	LCD_DrawHLine(buf, Xpos, Ypos, Width, color);
 8000e42:	88f8      	ldrh	r0, [r7, #6]
 8000e44:	893a      	ldrh	r2, [r7, #8]
 8000e46:	8979      	ldrh	r1, [r7, #10]
 8000e48:	8bbb      	ldrh	r3, [r7, #28]
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f7ff ff94 	bl	8000d7c <LCD_DrawHLine>
	LCD_DrawHLine(buf, Xpos, (Ypos + Height), Width, color);
 8000e54:	893a      	ldrh	r2, [r7, #8]
 8000e56:	8b3b      	ldrh	r3, [r7, #24]
 8000e58:	4413      	add	r3, r2
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	88f8      	ldrh	r0, [r7, #6]
 8000e5e:	8979      	ldrh	r1, [r7, #10]
 8000e60:	8bbb      	ldrh	r3, [r7, #28]
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	4603      	mov	r3, r0
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f7ff ff88 	bl	8000d7c <LCD_DrawHLine>

	/* Draw vertical lines */
	LCD_DrawVLine(buf, Xpos, Ypos, Height, color);
 8000e6c:	8b38      	ldrh	r0, [r7, #24]
 8000e6e:	893a      	ldrh	r2, [r7, #8]
 8000e70:	8979      	ldrh	r1, [r7, #10]
 8000e72:	8bbb      	ldrh	r3, [r7, #28]
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	4603      	mov	r3, r0
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff ffa7 	bl	8000dcc <LCD_DrawVLine>
	LCD_DrawVLine(buf, (Xpos + Width), Ypos, Height, color);
 8000e7e:	897a      	ldrh	r2, [r7, #10]
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	4413      	add	r3, r2
 8000e84:	b299      	uxth	r1, r3
 8000e86:	8b38      	ldrh	r0, [r7, #24]
 8000e88:	893a      	ldrh	r2, [r7, #8]
 8000e8a:	8bbb      	ldrh	r3, [r7, #28]
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	4603      	mov	r3, r0
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f7ff ff9b 	bl	8000dcc <LCD_DrawVLine>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <LCD_DrawCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_DrawCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b088      	sub	sp, #32
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4603      	mov	r3, r0
 8000eae:	817b      	strh	r3, [r7, #10]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	813b      	strh	r3, [r7, #8]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	80fb      	strh	r3, [r7, #6]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	f1c3 0303 	rsb	r3, r3, #3
 8000ec0:	61fb      	str	r3, [r7, #28]
	curx = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
	cury = Radius;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
 8000eca:	e087      	b.n	8000fdc <LCD_DrawCircle+0x13e>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos - cury), color);
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	897b      	ldrh	r3, [r7, #10]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	893a      	ldrh	r2, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f7ff fe52 	bl	8000b8c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos - cury), color);
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	897a      	ldrh	r2, [r7, #10]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	b299      	uxth	r1, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	893a      	ldrh	r2, [r7, #8]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f7ff fe44 	bl	8000b8c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos - curx), color);
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	897b      	ldrh	r3, [r7, #10]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	893a      	ldrh	r2, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f7ff fe36 	bl	8000b8c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos - curx), color);
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	897a      	ldrh	r2, [r7, #10]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	b299      	uxth	r1, r3
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	893a      	ldrh	r2, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f7ff fe28 	bl	8000b8c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos + cury), color);
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	897b      	ldrh	r3, [r7, #10]
 8000f42:	4413      	add	r3, r2
 8000f44:	b299      	uxth	r1, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	893b      	ldrh	r3, [r7, #8]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f7ff fe1a 	bl	8000b8c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos + cury), color);
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	897a      	ldrh	r2, [r7, #10]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	b299      	uxth	r1, r3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	893b      	ldrh	r3, [r7, #8]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff fe0c 	bl	8000b8c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos + curx), color);
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	897b      	ldrh	r3, [r7, #10]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b299      	uxth	r1, r3
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	893b      	ldrh	r3, [r7, #8]
 8000f84:	4413      	add	r3, r2
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff fdfe 	bl	8000b8c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos + curx), color);
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	897a      	ldrh	r2, [r7, #10]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	b299      	uxth	r1, r3
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	893b      	ldrh	r3, [r7, #8]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f7ff fdf0 	bl	8000b8c <LCD_DrawPixel>

		if (d < 0) {
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	da06      	bge.n	8000fc0 <LCD_DrawCircle+0x122>
			d += (curx << 2) + 6;
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	009a      	lsls	r2, r3, #2
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	4413      	add	r3, r2
 8000fba:	3306      	adds	r3, #6
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e00a      	b.n	8000fd6 <LCD_DrawCircle+0x138>
		} else {
			d += ((curx - cury) << 2) + 10;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	009a      	lsls	r2, r3, #2
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	4413      	add	r3, r2
 8000fcc:	330a      	adds	r3, #10
 8000fce:	61fb      	str	r3, [r7, #28]
			cury--;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
		}
		curx++;
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f67f af73 	bls.w	8000ecc <LCD_DrawCircle+0x2e>
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <LCD_FillRect>:
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 * @retval None
 */
void LCD_FillRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4603      	mov	r3, r0
 8001000:	817b      	strh	r3, [r7, #10]
 8001002:	460b      	mov	r3, r1
 8001004:	813b      	strh	r3, [r7, #8]
 8001006:	4613      	mov	r3, r2
 8001008:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]

	/* Get the rectangle start address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
 800100e:	f7ff fd9b 	bl	8000b48 <LCD_GetXSize>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	893b      	ldrh	r3, [r7, #8]
 8001018:	fb03 f202 	mul.w	r2, r3, r2
 800101c:	897b      	ldrh	r3, [r7, #10]
 800101e:	4413      	add	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	617b      	str	r3, [r7, #20]

	/* Fill the rectangle */
	FillBuffer((uint32_t*) xaddress, Width, Height, (LCD_GetXSize() - Width),
 8001028:	88fc      	ldrh	r4, [r7, #6]
 800102a:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 800102c:	f7ff fd8c 	bl	8000b48 <LCD_GetXSize>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	461a      	mov	r2, r3
 800103a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	4613      	mov	r3, r2
 8001040:	462a      	mov	r2, r5
 8001042:	4621      	mov	r1, r4
 8001044:	6978      	ldr	r0, [r7, #20]
 8001046:	f000 f939 	bl	80012bc <FillBuffer>
			color);
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bdb0      	pop	{r4, r5, r7, pc}

08001052 <LCD_FillCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_FillCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b08a      	sub	sp, #40	; 0x28
 8001056:	af02      	add	r7, sp, #8
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	4608      	mov	r0, r1
 800105c:	4611      	mov	r1, r2
 800105e:	461a      	mov	r2, r3
 8001060:	4603      	mov	r3, r0
 8001062:	817b      	strh	r3, [r7, #10]
 8001064:	460b      	mov	r3, r1
 8001066:	813b      	strh	r3, [r7, #8]
 8001068:	4613      	mov	r3, r2
 800106a:	80fb      	strh	r3, [r7, #6]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	f1c3 0303 	rsb	r3, r3, #3
 8001074:	61fb      	str	r3, [r7, #28]

	curx = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
	cury = Radius;
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
 800107e:	e06d      	b.n	800115c <LCD_FillCircle+0x10a>
		if (cury > 0) {
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d027      	beq.n	80010d6 <LCD_FillCircle+0x84>
			LCD_DrawHLine(buf, Xpos - cury, Ypos + curx, 2 * cury, color);
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	b29b      	uxth	r3, r3
 800108a:	897a      	ldrh	r2, [r7, #10]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	b299      	uxth	r1, r3
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	b29a      	uxth	r2, r3
 8001094:	893b      	ldrh	r3, [r7, #8]
 8001096:	4413      	add	r3, r2
 8001098:	b29a      	uxth	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	b29b      	uxth	r3, r3
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	b298      	uxth	r0, r3
 80010a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4603      	mov	r3, r0
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f7ff fe67 	bl	8000d7c <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - cury, Ypos - curx, 2 * cury, color);
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	897a      	ldrh	r2, [r7, #10]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b299      	uxth	r1, r3
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	893a      	ldrh	r2, [r7, #8]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	b298      	uxth	r0, r3
 80010ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	4603      	mov	r3, r0
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f7ff fe53 	bl	8000d7c <LCD_DrawHLine>
		}

		if (curx > 0) {
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d027      	beq.n	800112c <LCD_FillCircle+0xda>
			LCD_DrawHLine(buf, Xpos - curx, Ypos - cury, 2 * curx, color);
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	897a      	ldrh	r2, [r7, #10]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	b299      	uxth	r1, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	893a      	ldrh	r2, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	b298      	uxth	r0, r3
 80010f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	4603      	mov	r3, r0
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff fe3c 	bl	8000d7c <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - curx, Ypos + cury, 2 * curx, color);
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	b29b      	uxth	r3, r3
 8001108:	897a      	ldrh	r2, [r7, #10]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	b299      	uxth	r1, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	b29a      	uxth	r2, r3
 8001112:	893b      	ldrh	r3, [r7, #8]
 8001114:	4413      	add	r3, r2
 8001116:	b29a      	uxth	r2, r3
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	b29b      	uxth	r3, r3
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	b298      	uxth	r0, r3
 8001120:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4603      	mov	r3, r0
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f7ff fe28 	bl	8000d7c <LCD_DrawHLine>
		}
		if (d < 0) {
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2b00      	cmp	r3, #0
 8001130:	da06      	bge.n	8001140 <LCD_FillCircle+0xee>
			d += (curx << 2) + 6;
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	009a      	lsls	r2, r3, #2
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	4413      	add	r3, r2
 800113a:	3306      	adds	r3, #6
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e00a      	b.n	8001156 <LCD_FillCircle+0x104>
		} else {
			d += ((curx - cury) << 2) + 10;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	009a      	lsls	r2, r3, #2
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	4413      	add	r3, r2
 800114c:	330a      	adds	r3, #10
 800114e:	61fb      	str	r3, [r7, #28]
			cury--;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	3b01      	subs	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
		}
		curx++;
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	3301      	adds	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	429a      	cmp	r2, r3
 8001162:	d98d      	bls.n	8001080 <LCD_FillCircle+0x2e>
	}
	LCD_DrawCircle(buf, Xpos, Ypos, Radius, color);
 8001164:	88f8      	ldrh	r0, [r7, #6]
 8001166:	893a      	ldrh	r2, [r7, #8]
 8001168:	8979      	ldrh	r1, [r7, #10]
 800116a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	4603      	mov	r3, r0
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff fe94 	bl	8000e9e <LCD_DrawCircle>
}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <DrawChar>:
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		const uint8_t *c) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	817b      	strh	r3, [r7, #10]
 800118e:	4613      	mov	r3, r2
 8001190:	813b      	strh	r3, [r7, #8]
	uint32_t i = 0, j = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]

	height = font->Height;
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <DrawChar+0x130>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	88db      	ldrh	r3, [r3, #6]
 80011a4:	837b      	strh	r3, [r7, #26]
	width = font->Width;
 80011a6:	4b42      	ldr	r3, [pc, #264]	; (80012b0 <DrawChar+0x130>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	889b      	ldrh	r3, [r3, #4]
 80011ac:	833b      	strh	r3, [r7, #24]

	offset = 8 * ((width + 7) / 8) - width;
 80011ae:	8b3b      	ldrh	r3, [r7, #24]
 80011b0:	3307      	adds	r3, #7
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da00      	bge.n	80011b8 <DrawChar+0x38>
 80011b6:	3307      	adds	r3, #7
 80011b8:	10db      	asrs	r3, r3, #3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	8b3b      	ldrh	r3, [r7, #24]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	75fb      	strb	r3, [r7, #23]

	for (i = 0; i < height; i++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
 80011cc:	e067      	b.n	800129e <DrawChar+0x11e>
		pchar = ((uint8_t*) c + (width + 7) / 8 * i);
 80011ce:	8b3b      	ldrh	r3, [r7, #24]
 80011d0:	3307      	adds	r3, #7
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	da00      	bge.n	80011d8 <DrawChar+0x58>
 80011d6:	3307      	adds	r3, #7
 80011d8:	10db      	asrs	r3, r3, #3
 80011da:	461a      	mov	r2, r3
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	fb03 f302 	mul.w	r3, r3, r2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]

		switch (((width + 7) / 8)) {
 80011e8:	8b3b      	ldrh	r3, [r7, #24]
 80011ea:	3307      	adds	r3, #7
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	da00      	bge.n	80011f2 <DrawChar+0x72>
 80011f0:	3307      	adds	r3, #7
 80011f2:	10db      	asrs	r3, r3, #3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d002      	beq.n	80011fe <DrawChar+0x7e>
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d004      	beq.n	8001206 <DrawChar+0x86>
 80011fc:	e00c      	b.n	8001218 <DrawChar+0x98>
		case 1:
			line = pchar[0];
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	61fb      	str	r3, [r7, #28]
			break;
 8001204:	e016      	b.n	8001234 <DrawChar+0xb4>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	3201      	adds	r2, #1
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	4313      	orrs	r3, r2
 8001214:	61fb      	str	r3, [r7, #28]
			break;
 8001216:	e00d      	b.n	8001234 <DrawChar+0xb4>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	3301      	adds	r3, #1
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	4313      	orrs	r3, r2
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	3202      	adds	r2, #2
 800122c:	7812      	ldrb	r2, [r2, #0]
 800122e:	4313      	orrs	r3, r2
 8001230:	61fb      	str	r3, [r7, #28]
			break;
 8001232:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
 8001238:	e027      	b.n	800128a <DrawChar+0x10a>
			if (line & (1 << (width - j + offset - 1))) {
 800123a:	8b3a      	ldrh	r2, [r7, #24]
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	1ad2      	subs	r2, r2, r3
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	4413      	add	r3, r2
 8001244:	3b01      	subs	r3, #1
 8001246:	2201      	movs	r2, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	461a      	mov	r2, r3
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	4013      	ands	r3, r2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00b      	beq.n	800126e <DrawChar+0xee>
				LCD_DrawPixel(buf, (Xpos + j), Ypos, font_color);
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	b29a      	uxth	r2, r3
 800125a:	897b      	ldrh	r3, [r7, #10]
 800125c:	4413      	add	r3, r2
 800125e:	b299      	uxth	r1, r3
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <DrawChar+0x134>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	893a      	ldrh	r2, [r7, #8]
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f7ff fc90 	bl	8000b8c <LCD_DrawPixel>
 800126c:	e00a      	b.n	8001284 <DrawChar+0x104>
			} else {
				LCD_DrawPixel(buf, (Xpos + j), Ypos, font_bcolor);
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	b29a      	uxth	r2, r3
 8001272:	897b      	ldrh	r3, [r7, #10]
 8001274:	4413      	add	r3, r2
 8001276:	b299      	uxth	r1, r3
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <DrawChar+0x138>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	893a      	ldrh	r2, [r7, #8]
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff fc84 	bl	8000b8c <LCD_DrawPixel>
		for (j = 0; j < width; j++) {
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	3301      	adds	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
 800128a:	8b3b      	ldrh	r3, [r7, #24]
 800128c:	6a3a      	ldr	r2, [r7, #32]
 800128e:	429a      	cmp	r2, r3
 8001290:	d3d3      	bcc.n	800123a <DrawChar+0xba>
			}
		}
		Ypos++;
 8001292:	893b      	ldrh	r3, [r7, #8]
 8001294:	3301      	adds	r3, #1
 8001296:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	3301      	adds	r3, #1
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	8b7b      	ldrh	r3, [r7, #26]
 80012a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d393      	bcc.n	80011ce <DrawChar+0x4e>
	}
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	; 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000020 	.word	0x20000020
 80012b4:	20000024 	.word	0x20000024
 80012b8:	200000e0 	.word	0x200000e0

080012bc <FillBuffer>:
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 * @retval None
 */
static void FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize,
		uint32_t OffLine, uint16_t ColorIndex) {
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]

	DMA2D->CR = DMA2D_R2M;
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <FillBuffer+0x68>)
 80012cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012d0:	601a      	str	r2, [r3, #0]
	DMA2D->OCOLR = 0x0000FFFF & ColorIndex;
 80012d2:	4a14      	ldr	r2, [pc, #80]	; (8001324 <FillBuffer+0x68>)
 80012d4:	8b3b      	ldrh	r3, [r7, #24]
 80012d6:	6393      	str	r3, [r2, #56]	; 0x38
	DMA2D->OMAR = (uint32_t) pDst;
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <FillBuffer+0x68>)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	63d3      	str	r3, [r2, #60]	; 0x3c
	DMA2D->OOR = OffLine;
 80012de:	4a11      	ldr	r2, [pc, #68]	; (8001324 <FillBuffer+0x68>)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
	DMA2D->OPFCCR = LTDC_PIXEL_FORMAT_RGB565;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <FillBuffer+0x68>)
 80012e6:	2202      	movs	r2, #2
 80012e8:	635a      	str	r2, [r3, #52]	; 0x34
	DMA2D->NLR = (uint32_t) (xSize << 16) | (uint16_t) ySize;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	b292      	uxth	r2, r2
 80012f2:	4611      	mov	r1, r2
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <FillBuffer+0x68>)
 80012f6:	430b      	orrs	r3, r1
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44

	DMA2D->CR |= DMA2D_CR_START;
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <FillBuffer+0x68>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <FillBuffer+0x68>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6013      	str	r3, [r2, #0]

	while (DMA2D->CR & DMA2D_CR_START) {
 8001306:	bf00      	nop
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <FillBuffer+0x68>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f9      	bne.n	8001308 <FillBuffer+0x4c>

	}
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	52001000 	.word	0x52001000

08001328 <lcd_backlight_set>:
  HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
  HAL_DAC_Stop(&hdac2, DAC_CHANNEL_1);
}

void lcd_backlight_set(uint8_t brightness)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2208      	movs	r2, #8
 8001336:	2100      	movs	r1, #0
 8001338:	480f      	ldr	r0, [pc, #60]	; (8001378 <lcd_backlight_set+0x50>)
 800133a:	f003 fc62 	bl	8004c02 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, brightness);
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2208      	movs	r2, #8
 8001342:	2110      	movs	r1, #16
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <lcd_backlight_set+0x50>)
 8001346:	f003 fc5c 	bl	8004c02 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2208      	movs	r2, #8
 800134e:	2100      	movs	r1, #0
 8001350:	480a      	ldr	r0, [pc, #40]	; (800137c <lcd_backlight_set+0x54>)
 8001352:	f003 fc56 	bl	8004c02 <HAL_DAC_SetValue>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001356:	2100      	movs	r1, #0
 8001358:	4807      	ldr	r0, [pc, #28]	; (8001378 <lcd_backlight_set+0x50>)
 800135a:	f003 fc00 	bl	8004b5e <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800135e:	2110      	movs	r1, #16
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <lcd_backlight_set+0x50>)
 8001362:	f003 fbfc 	bl	8004b5e <HAL_DAC_Start>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8001366:	2100      	movs	r1, #0
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <lcd_backlight_set+0x54>)
 800136a:	f003 fbf8 	bl	8004b5e <HAL_DAC_Start>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200002b8 	.word	0x200002b8
 800137c:	2000021c 	.word	0x2000021c

08001380 <lcd_deinit>:
{
  lcd_backlight_set(255);
}

void lcd_deinit(SPI_HandleTypeDef *spi)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  // Chip select low.
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138e:	480b      	ldr	r0, [pc, #44]	; (80013bc <lcd_deinit+0x3c>)
 8001390:	f006 fea2 	bl	80080d8 <HAL_GPIO_WritePin>
  // 3.3v power to display *SET* to disable supply.
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2102      	movs	r1, #2
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <lcd_deinit+0x40>)
 800139a:	f006 fe9d 	bl	80080d8 <HAL_GPIO_WritePin>
  // Disable 1.8v.
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2110      	movs	r1, #16
 80013a2:	4807      	ldr	r0, [pc, #28]	; (80013c0 <lcd_deinit+0x40>)
 80013a4:	f006 fe98 	bl	80080d8 <HAL_GPIO_WritePin>
  // Pull reset line(?) low. (Flakey without this)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ae:	4804      	ldr	r0, [pc, #16]	; (80013c0 <lcd_deinit+0x40>)
 80013b0:	f006 fe92 	bl	80080d8 <HAL_GPIO_WritePin>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	58020400 	.word	0x58020400
 80013c0:	58020c00 	.word	0x58020c00

080013c4 <lcd_init>:

void lcd_init(SPI_HandleTypeDef *spi, LTDC_HandleTypeDef *ltdc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
// Wake
// Enable 3.3v
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2102      	movs	r1, #2
 80013d2:	489c      	ldr	r0, [pc, #624]	; (8001644 <lcd_init+0x280>)
 80013d4:	f006 fe80 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f001 fe07 	bl	8002fec <HAL_Delay>
  // Enable 1.8V
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80013de:	2201      	movs	r2, #1
 80013e0:	2110      	movs	r1, #16
 80013e2:	4898      	ldr	r0, [pc, #608]	; (8001644 <lcd_init+0x280>)
 80013e4:	f006 fe78 	bl	80080d8 <HAL_GPIO_WritePin>
  // also assert CS, not sure where to put this yet
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ee:	4896      	ldr	r0, [pc, #600]	; (8001648 <lcd_init+0x284>)
 80013f0:	f006 fe72 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(7);
 80013f4:	2007      	movs	r0, #7
 80013f6:	f001 fdf9 	bl	8002fec <HAL_Delay>


// HAL_SPI_Transmit(spi, (uint8_t *)"\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55", 10, 100);
  // Lets go, bootup sequence.
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001400:	4890      	ldr	r0, [pc, #576]	; (8001644 <lcd_init+0x280>)
 8001402:	f006 fe69 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8001406:	2002      	movs	r0, #2
 8001408:	f001 fdf0 	bl	8002fec <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001412:	488c      	ldr	r0, [pc, #560]	; (8001644 <lcd_init+0x280>)
 8001414:	f006 fe60 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8001418:	2002      	movs	r0, #2
 800141a:	f001 fde7 	bl	8002fec <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001424:	4887      	ldr	r0, [pc, #540]	; (8001644 <lcd_init+0x280>)
 8001426:	f006 fe57 	bl	80080d8 <HAL_GPIO_WritePin>

  HAL_Delay(10);
 800142a:	200a      	movs	r0, #10
 800142c:	f001 fdde 	bl	8002fec <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001436:	4884      	ldr	r0, [pc, #528]	; (8001648 <lcd_init+0x284>)
 8001438:	f006 fe4e 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(45);
 800143c:	202d      	movs	r0, #45	; 0x2d
 800143e:	f001 fdd5 	bl	8002fec <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x08\x80", 2, 100);
 8001442:	2364      	movs	r3, #100	; 0x64
 8001444:	2202      	movs	r2, #2
 8001446:	4981      	ldr	r1, [pc, #516]	; (800164c <lcd_init+0x288>)
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f00d f95f 	bl	800e70c <HAL_SPI_Transmit>
  HAL_Delay(2);
 800144e:	2002      	movs	r0, #2
 8001450:	f001 fdcc 	bl	8002fec <HAL_Delay>

  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145a:	487b      	ldr	r0, [pc, #492]	; (8001648 <lcd_init+0x284>)
 800145c:	f006 fe3c 	bl	80080d8 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001466:	4878      	ldr	r0, [pc, #480]	; (8001648 <lcd_init+0x284>)
 8001468:	f006 fe36 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800146c:	2002      	movs	r0, #2
 800146e:	f001 fdbd 	bl	8002fec <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x6E\x80", 2, 100);
 8001472:	2364      	movs	r3, #100	; 0x64
 8001474:	2202      	movs	r2, #2
 8001476:	4976      	ldr	r1, [pc, #472]	; (8001650 <lcd_init+0x28c>)
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f00d f947 	bl	800e70c <HAL_SPI_Transmit>
  HAL_Delay(2);
 800147e:	2002      	movs	r0, #2
 8001480:	f001 fdb4 	bl	8002fec <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800148a:	486f      	ldr	r0, [pc, #444]	; (8001648 <lcd_init+0x284>)
 800148c:	f006 fe24 	bl	80080d8 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001496:	486c      	ldr	r0, [pc, #432]	; (8001648 <lcd_init+0x284>)
 8001498:	f006 fe1e 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800149c:	2002      	movs	r0, #2
 800149e:	f001 fda5 	bl	8002fec <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x80\x80", 2, 100);
 80014a2:	2364      	movs	r3, #100	; 0x64
 80014a4:	2202      	movs	r2, #2
 80014a6:	496b      	ldr	r1, [pc, #428]	; (8001654 <lcd_init+0x290>)
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f00d f92f 	bl	800e70c <HAL_SPI_Transmit>

  HAL_Delay(2);
 80014ae:	2002      	movs	r0, #2
 80014b0:	f001 fd9c 	bl	8002fec <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ba:	4863      	ldr	r0, [pc, #396]	; (8001648 <lcd_init+0x284>)
 80014bc:	f006 fe0c 	bl	80080d8 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c6:	4860      	ldr	r0, [pc, #384]	; (8001648 <lcd_init+0x284>)
 80014c8:	f006 fe06 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80014cc:	2002      	movs	r0, #2
 80014ce:	f001 fd8d 	bl	8002fec <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x68\x00", 2, 100);
 80014d2:	2364      	movs	r3, #100	; 0x64
 80014d4:	2202      	movs	r2, #2
 80014d6:	4960      	ldr	r1, [pc, #384]	; (8001658 <lcd_init+0x294>)
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f00d f917 	bl	800e70c <HAL_SPI_Transmit>
  HAL_Delay(2);
 80014de:	2002      	movs	r0, #2
 80014e0:	f001 fd84 	bl	8002fec <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ea:	4857      	ldr	r0, [pc, #348]	; (8001648 <lcd_init+0x284>)
 80014ec:	f006 fdf4 	bl	80080d8 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f6:	4854      	ldr	r0, [pc, #336]	; (8001648 <lcd_init+0x284>)
 80014f8:	f006 fdee 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80014fc:	2002      	movs	r0, #2
 80014fe:	f001 fd75 	bl	8002fec <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\xd0\x00", 2, 100);
 8001502:	2364      	movs	r3, #100	; 0x64
 8001504:	2202      	movs	r2, #2
 8001506:	4955      	ldr	r1, [pc, #340]	; (800165c <lcd_init+0x298>)
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f00d f8ff 	bl	800e70c <HAL_SPI_Transmit>
  HAL_Delay(2);
 800150e:	2002      	movs	r0, #2
 8001510:	f001 fd6c 	bl	8002fec <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151a:	484b      	ldr	r0, [pc, #300]	; (8001648 <lcd_init+0x284>)
 800151c:	f006 fddc 	bl	80080d8 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001526:	4848      	ldr	r0, [pc, #288]	; (8001648 <lcd_init+0x284>)
 8001528:	f006 fdd6 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800152c:	2002      	movs	r0, #2
 800152e:	f001 fd5d 	bl	8002fec <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x1b\x00", 2, 100);
 8001532:	2364      	movs	r3, #100	; 0x64
 8001534:	2202      	movs	r2, #2
 8001536:	494a      	ldr	r1, [pc, #296]	; (8001660 <lcd_init+0x29c>)
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f00d f8e7 	bl	800e70c <HAL_SPI_Transmit>

  HAL_Delay(2);
 800153e:	2002      	movs	r0, #2
 8001540:	f001 fd54 	bl	8002fec <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800154a:	483f      	ldr	r0, [pc, #252]	; (8001648 <lcd_init+0x284>)
 800154c:	f006 fdc4 	bl	80080d8 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001556:	483c      	ldr	r0, [pc, #240]	; (8001648 <lcd_init+0x284>)
 8001558:	f006 fdbe 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800155c:	2002      	movs	r0, #2
 800155e:	f001 fd45 	bl	8002fec <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\xe0\x00", 2, 100);
 8001562:	2364      	movs	r3, #100	; 0x64
 8001564:	2202      	movs	r2, #2
 8001566:	493f      	ldr	r1, [pc, #252]	; (8001664 <lcd_init+0x2a0>)
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f00d f8cf 	bl	800e70c <HAL_SPI_Transmit>


  HAL_Delay(2);
 800156e:	2002      	movs	r0, #2
 8001570:	f001 fd3c 	bl	8002fec <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157a:	4833      	ldr	r0, [pc, #204]	; (8001648 <lcd_init+0x284>)
 800157c:	f006 fdac 	bl	80080d8 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001586:	4830      	ldr	r0, [pc, #192]	; (8001648 <lcd_init+0x284>)
 8001588:	f006 fda6 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800158c:	2002      	movs	r0, #2
 800158e:	f001 fd2d 	bl	8002fec <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x6a\x80", 2, 100);
 8001592:	2364      	movs	r3, #100	; 0x64
 8001594:	2202      	movs	r2, #2
 8001596:	4934      	ldr	r1, [pc, #208]	; (8001668 <lcd_init+0x2a4>)
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f00d f8b7 	bl	800e70c <HAL_SPI_Transmit>

  HAL_Delay(2);
 800159e:	2002      	movs	r0, #2
 80015a0:	f001 fd24 	bl	8002fec <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015aa:	4827      	ldr	r0, [pc, #156]	; (8001648 <lcd_init+0x284>)
 80015ac:	f006 fd94 	bl	80080d8 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b6:	4824      	ldr	r0, [pc, #144]	; (8001648 <lcd_init+0x284>)
 80015b8:	f006 fd8e 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80015bc:	2002      	movs	r0, #2
 80015be:	f001 fd15 	bl	8002fec <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x80\x00", 2, 100);
 80015c2:	2364      	movs	r3, #100	; 0x64
 80015c4:	2202      	movs	r2, #2
 80015c6:	4929      	ldr	r1, [pc, #164]	; (800166c <lcd_init+0x2a8>)
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f00d f89f 	bl	800e70c <HAL_SPI_Transmit>
  HAL_Delay(2);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f001 fd0c 	bl	8002fec <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015da:	481b      	ldr	r0, [pc, #108]	; (8001648 <lcd_init+0x284>)
 80015dc:	f006 fd7c 	bl	80080d8 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e6:	4818      	ldr	r0, [pc, #96]	; (8001648 <lcd_init+0x284>)
 80015e8:	f006 fd76 	bl	80080d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80015ec:	2002      	movs	r0, #2
 80015ee:	f001 fcfd 	bl	8002fec <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x14\x80", 2, 100);
 80015f2:	2364      	movs	r3, #100	; 0x64
 80015f4:	2202      	movs	r2, #2
 80015f6:	491e      	ldr	r1, [pc, #120]	; (8001670 <lcd_init+0x2ac>)
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f00d f887 	bl	800e70c <HAL_SPI_Transmit>
  HAL_Delay(2);
 80015fe:	2002      	movs	r0, #2
 8001600:	f001 fcf4 	bl	8002fec <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800160a:	480f      	ldr	r0, [pc, #60]	; (8001648 <lcd_init+0x284>)
 800160c:	f006 fd64 	bl	80080d8 <HAL_GPIO_WritePin>

  HAL_LTDC_SetAddress(ltdc,(uint32_t) &fb1, 0);
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <lcd_init+0x2b0>)
 8001612:	2200      	movs	r2, #0
 8001614:	4619      	mov	r1, r3
 8001616:	6838      	ldr	r0, [r7, #0]
 8001618:	f006 ff3e 	bl	8008498 <HAL_LTDC_SetAddress>

  memset(fb1, 0, sizeof(framebuffer1));
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <lcd_init+0x2b0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f00d fb84 	bl	800ed34 <memset>
  memset(fb2, 0, sizeof(framebuffer1));
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <lcd_init+0x2b4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f00d fb7c 	bl	800ed34 <memset>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	58020c00 	.word	0x58020c00
 8001648:	58020400 	.word	0x58020400
 800164c:	08010150 	.word	0x08010150
 8001650:	08010154 	.word	0x08010154
 8001654:	08010158 	.word	0x08010158
 8001658:	0801015c 	.word	0x0801015c
 800165c:	08010160 	.word	0x08010160
 8001660:	08010164 	.word	0x08010164
 8001664:	08010168 	.word	0x08010168
 8001668:	0801016c 	.word	0x0801016c
 800166c:	08010170 	.word	0x08010170
 8001670:	08010174 	.word	0x08010174
 8001674:	20000028 	.word	0x20000028
 8001678:	2000002c 	.word	0x2000002c

0800167c <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback (LTDC_HandleTypeDef *hltdc) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  frame_counter++;
 8001684:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_LTDC_ReloadEventCallback+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	4a0c      	ldr	r2, [pc, #48]	; (80016bc <HAL_LTDC_ReloadEventCallback+0x40>)
 800168c:	6013      	str	r3, [r2, #0]
  if (active_framebuffer == 0) {
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_LTDC_ReloadEventCallback+0x44>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d107      	bne.n	80016a6 <HAL_LTDC_ReloadEventCallback+0x2a>
    HAL_LTDC_SetAddress(hltdc, (uint32_t) fb2, 0);
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_LTDC_ReloadEventCallback+0x48>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f006 fefa 	bl	8008498 <HAL_LTDC_SetAddress>
  } else {
    HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
  }
}
 80016a4:	e006      	b.n	80016b4 <HAL_LTDC_ReloadEventCallback+0x38>
    HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_LTDC_ReloadEventCallback+0x4c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2200      	movs	r2, #0
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f006 fef2 	bl	8008498 <HAL_LTDC_SetAddress>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000214 	.word	0x20000214
 80016c0:	20000218 	.word	0x20000218
 80016c4:	2000002c 	.word	0x2000002c
 80016c8:	20000028 	.word	0x20000028

080016cc <lcd_swap>:
{
  return (uint32_t) ((hltdc.Instance->SRCR) & (LTDC_SRCR_VBR | LTDC_SRCR_IMR));
}

void lcd_swap(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80016d0:	2102      	movs	r1, #2
 80016d2:	4807      	ldr	r0, [pc, #28]	; (80016f0 <lcd_swap+0x24>)
 80016d4:	f006 ff16 	bl	8008504 <HAL_LTDC_Reload>
  active_framebuffer = active_framebuffer ? 0 : 1;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <lcd_swap+0x28>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <lcd_swap+0x28>)
 80016ea:	601a      	str	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000032c 	.word	0x2000032c
 80016f4:	20000218 	.word	0x20000218

080016f8 <lcd_sync>:

void lcd_sync(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
  void *active = lcd_get_active_buffer();
 80016fe:	f000 f813 	bl	8001728 <lcd_get_active_buffer>
 8001702:	6078      	str	r0, [r7, #4]
  void *inactive = lcd_get_inactive_buffer();
 8001704:	f000 f826 	bl	8001754 <lcd_get_inactive_buffer>
 8001708:	6038      	str	r0, [r7, #0]

  if (active != inactive) {
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d005      	beq.n	800171e <lcd_sync+0x26>
    memcpy(inactive, active, sizeof(framebuffer1));
 8001712:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f00d fafd 	bl	800ed18 <memcpy>
  }
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <lcd_get_active_buffer>:

void* lcd_get_active_buffer(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return active_framebuffer ? fb2 : fb1;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <lcd_get_active_buffer+0x20>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <lcd_get_active_buffer+0x12>
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <lcd_get_active_buffer+0x24>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	e001      	b.n	800173e <lcd_get_active_buffer+0x16>
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <lcd_get_active_buffer+0x28>)
 800173c:	681b      	ldr	r3, [r3, #0]
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	20000218 	.word	0x20000218
 800174c:	2000002c 	.word	0x2000002c
 8001750:	20000028 	.word	0x20000028

08001754 <lcd_get_inactive_buffer>:

void* lcd_get_inactive_buffer(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return active_framebuffer ? fb1 : fb2;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <lcd_get_inactive_buffer+0x20>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <lcd_get_inactive_buffer+0x12>
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <lcd_get_inactive_buffer+0x24>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	e001      	b.n	800176a <lcd_get_inactive_buffer+0x16>
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <lcd_get_inactive_buffer+0x28>)
 8001768:	681b      	ldr	r3, [r3, #0]
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	20000218 	.word	0x20000218
 8001778:	20000028 	.word	0x20000028
 800177c:	2000002c 	.word	0x2000002c

08001780 <lcd_wait_for_vblank>:
  fb1 = buf1;
  fb2 = buf2;
}

void lcd_wait_for_vblank(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
  uint32_t old_counter = frame_counter;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <lcd_wait_for_vblank+0x28>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	607b      	str	r3, [r7, #4]
  while (old_counter == frame_counter) {
 800178c:	e000      	b.n	8001790 <lcd_wait_for_vblank+0x10>
    __asm("nop");
 800178e:	bf00      	nop
  while (old_counter == frame_counter) {
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <lcd_wait_for_vblank+0x28>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	d0f9      	beq.n	800178e <lcd_wait_for_vblank+0xe>
  }
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20000214 	.word	0x20000214

080017ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017b2:	f001 fb89 	bl	8002ec8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017b6:	f000 f84f 	bl	8001858 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80017ba:	f000 f8cf 	bl	800195c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017be:	f000 fbff 	bl	8001fc0 <MX_GPIO_Init>
	MX_DMA_Init();
 80017c2:	f000 fbdd 	bl	8001f80 <MX_DMA_Init>
	MX_LTDC_Init();
 80017c6:	f000 fa0f 	bl	8001be8 <MX_LTDC_Init>
	MX_SPI2_Init();
 80017ca:	f000 fb83 	bl	8001ed4 <MX_SPI2_Init>
	MX_OCTOSPI1_Init();
 80017ce:	f000 fa8b 	bl	8001ce8 <MX_OCTOSPI1_Init>
	MX_SAI1_Init();
 80017d2:	f000 fb49 	bl	8001e68 <MX_SAI1_Init>
	MX_ADC1_Init();
 80017d6:	f000 f903 	bl	80019e0 <MX_ADC1_Init>
	MX_DAC1_Init();
 80017da:	f000 f979 	bl	8001ad0 <MX_DAC1_Init>
	MX_DAC2_Init();
 80017de:	f000 f9b3 	bl	8001b48 <MX_DAC2_Init>
	MX_DMA2D_Init();
 80017e2:	f000 f9e3 	bl	8001bac <MX_DMA2D_Init>
	MX_RTC_Init();
 80017e6:	f000 fae1 	bl	8001dac <MX_RTC_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80017ea:	f000 f8ed 	bl	80019c8 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	lcd_deinit(&hspi2);
 80017ee:	4814      	ldr	r0, [pc, #80]	; (8001840 <main+0x94>)
 80017f0:	f7ff fdc6 	bl	8001380 <lcd_deinit>
	lcd_init(&hspi2, &hltdc);
 80017f4:	4913      	ldr	r1, [pc, #76]	; (8001844 <main+0x98>)
 80017f6:	4812      	ldr	r0, [pc, #72]	; (8001840 <main+0x94>)
 80017f8:	f7ff fde4 	bl	80013c4 <lcd_init>
	lcd_backlight_set(175);
 80017fc:	20af      	movs	r0, #175	; 0xaf
 80017fe:	f7ff fd93 	bl	8001328 <lcd_backlight_set>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	flash_memory_map(&hospi1);
 8001802:	4811      	ldr	r0, [pc, #68]	; (8001848 <main+0x9c>)
 8001804:	f7fe fe56 	bl	80004b4 <flash_memory_map>

	// Sanity check, sometimes this is triggered
	uint32_t add = 0x90000000;
 8001808:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800180c:	607b      	str	r3, [r7, #4]
	uint32_t *ptr = (uint32_t*) add;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
	if (*ptr == 0x88888888) {
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 800181a:	d101      	bne.n	8001820 <main+0x74>
		Error_Handler();
 800181c:	f000 fcc0 	bl	80021a0 <Error_Handler>
	}

	// Create a continuous square wave and loop it using DMA in circular mode
	memset(audiobuffer, 0x00, sizeof(audiobuffer));
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <main+0xa0>)
 8001822:	2100      	movs	r1, #0
 8001824:	480a      	ldr	r0, [pc, #40]	; (8001850 <main+0xa4>)
 8001826:	f00d fa85 	bl	800ed34 <memset>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) audiobuffer,
 800182a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <main+0xa4>)
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <main+0xa8>)
 8001832:	f00c f98f 	bl	800db54 <HAL_SAI_Transmit_DMA>
			sizeof(audiobuffer) / sizeof(audiobuffer[0]));

	game_init();
 8001836:	f7fe fec7 	bl	80005c8 <game_init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		game_loop();
 800183a:	f7fe ff3b 	bl	80006b4 <game_loop>
 800183e:	e7fc      	b.n	800183a <main+0x8e>
 8001840:	20000230 	.word	0x20000230
 8001844:	2000032c 	.word	0x2000032c
 8001848:	200002cc 	.word	0x200002cc
 800184c:	00017700 	.word	0x00017700
 8001850:	30000000 	.word	0x30000000
 8001854:	20000540 	.word	0x20000540

08001858 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b09c      	sub	sp, #112	; 0x70
 800185c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800185e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001862:	224c      	movs	r2, #76	; 0x4c
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f00d fa64 	bl	800ed34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2220      	movs	r2, #32
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f00d fa5e 	bl	800ed34 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001878:	2002      	movs	r0, #2
 800187a:	f008 fb3f 	bl	8009efc <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4b34      	ldr	r3, [pc, #208]	; (8001954 <SystemClock_Config+0xfc>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	4a33      	ldr	r2, [pc, #204]	; (8001954 <SystemClock_Config+0xfc>)
 8001888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800188c:	6193      	str	r3, [r2, #24]
 800188e:	4b31      	ldr	r3, [pc, #196]	; (8001954 <SystemClock_Config+0xfc>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800189a:	bf00      	nop
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <SystemClock_Config+0xfc>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018a8:	d1f8      	bne.n	800189c <SystemClock_Config+0x44>
	}
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80018aa:	f008 fb17 	bl	8009edc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018ae:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <SystemClock_Config+0x100>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a29      	ldr	r2, [pc, #164]	; (8001958 <SystemClock_Config+0x100>)
 80018b4:	f023 0318 	bic.w	r3, r3, #24
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80018ba:	4b27      	ldr	r3, [pc, #156]	; (8001958 <SystemClock_Config+0x100>)
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	4a26      	ldr	r2, [pc, #152]	; (8001958 <SystemClock_Config+0x100>)
 80018c0:	f023 0303 	bic.w	r3, r3, #3
 80018c4:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80018c6:	230e      	movs	r3, #14
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018ca:	2301      	movs	r3, #1
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d2:	2340      	movs	r3, #64	; 0x40
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018d6:	2301      	movs	r3, #1
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018da:	2302      	movs	r3, #2
 80018dc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018de:	2300      	movs	r3, #0
 80018e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80018e2:	2310      	movs	r3, #16
 80018e4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 140;
 80018e6:	238c      	movs	r3, #140	; 0x8c
 80018e8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80018ea:	2302      	movs	r3, #2
 80018ec:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80018ee:	2302      	movs	r3, #2
 80018f0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80018f2:	2302      	movs	r3, #2
 80018f4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80018f6:	2308      	movs	r3, #8
 80018f8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	4618      	mov	r0, r3
 8001908:	f008 fb32 	bl	8009f70 <HAL_RCC_OscConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0xbe>
		Error_Handler();
 8001912:	f000 fc45 	bl	80021a0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001916:	233f      	movs	r3, #63	; 0x3f
 8001918:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800191a:	2303      	movs	r3, #3
 800191c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001926:	2340      	movs	r3, #64	; 0x40
 8001928:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800192a:	2340      	movs	r3, #64	; 0x40
 800192c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800192e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001932:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001934:	2340      	movs	r3, #64	; 0x40
 8001936:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2107      	movs	r1, #7
 800193c:	4618      	mov	r0, r3
 800193e:	f008 ff1b 	bl	800a778 <HAL_RCC_ClockConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0xf4>
		Error_Handler();
 8001948:	f000 fc2a 	bl	80021a0 <Error_Handler>
	}
}
 800194c:	bf00      	nop
 800194e:	3770      	adds	r7, #112	; 0x70
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	58024800 	.word	0x58024800
 8001958:	58024400 	.word	0x58024400

0800195c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b0ae      	sub	sp, #184	; 0xb8
 8001960:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001962:	463b      	mov	r3, r7
 8001964:	22b8      	movs	r2, #184	; 0xb8
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f00d f9e3 	bl	800ed34 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <PeriphCommonClock_Config+0x68>)
 8001970:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_SAI1 | RCC_PERIPHCLK_CKPER;
	PeriphClkInitStruct.PLL2.PLL2M = 25;
 8001972:	2319      	movs	r3, #25
 8001974:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLL2.PLL2N = 192;
 8001976:	23c0      	movs	r3, #192	; 0xc0
 8001978:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2P = 5;
 800197a:	2305      	movs	r3, #5
 800197c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800197e:	2302      	movs	r3, #2
 8001980:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2R = 5;
 8001982:	2305      	movs	r3, #5
 8001984:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001986:	2340      	movs	r3, #64	; 0x40
 8001988:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001992:	2300      	movs	r3, #0
 8001994:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001996:	2301      	movs	r3, #1
 8001998:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80019a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80019a8:	463b      	mov	r3, r7
 80019aa:	4618      	mov	r0, r3
 80019ac:	f009 fa44 	bl	800ae38 <HAL_RCCEx_PeriphCLKConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <PeriphCommonClock_Config+0x5e>
		Error_Handler();
 80019b6:	f000 fbf3 	bl	80021a0 <Error_Handler>
	}
}
 80019ba:	bf00      	nop
 80019bc:	37b8      	adds	r7, #184	; 0xb8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	80080100 	.word	0x80080100

080019c8 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	/* OCTOSPI1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	205c      	movs	r0, #92	; 0x5c
 80019d2:	f003 f86a 	bl	8004aaa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80019d6:	205c      	movs	r0, #92	; 0x5c
 80019d8:	f003 f881 	bl	8004ade <HAL_NVIC_EnableIRQ>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80019f2:	463b      	mov	r3, r7
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	615a      	str	r2, [r3, #20]
 8001a02:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001a04:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a06:	4a30      	ldr	r2, [pc, #192]	; (8001ac8 <MX_ADC1_Init+0xe8>)
 8001a08:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001a10:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a16:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a1e:	2204      	movs	r2, #4
 8001a20:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a22:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 1;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001a60:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a62:	f001 fcdd 	bl	8003420 <HAL_ADC_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001a6c:	f000 fb98 	bl	80021a0 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4812      	ldr	r0, [pc, #72]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001a7c:	f002 fe88 	bl	8004790 <HAL_ADCEx_MultiModeConfigChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_ADC1_Init+0xaa>
		Error_Handler();
 8001a86:	f000 fb8b 	bl	80021a0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_ADC1_Init+0xec>)
 8001a8c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a8e:	2306      	movs	r3, #6
 8001a90:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a96:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a9a:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_ADC1_Init+0xe4>)
 8001aae:	f002 f9e9 	bl	8003e84 <HAL_ADC_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_ADC1_Init+0xdc>
		Error_Handler();
 8001ab8:	f000 fb72 	bl	80021a0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000044c 	.word	0x2000044c
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	10c00010 	.word	0x10c00010

08001ad0 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	2224      	movs	r2, #36	; 0x24
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00d f929 	bl	800ed34 <memset>
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_DAC1_Init+0x70>)
 8001ae4:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <MX_DAC1_Init+0x74>)
 8001ae6:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8001ae8:	4815      	ldr	r0, [pc, #84]	; (8001b40 <MX_DAC1_Init+0x70>)
 8001aea:	f003 f816 	bl	8004b1a <HAL_DAC_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_DAC1_Init+0x28>
		Error_Handler();
 8001af4:	f000 fb54 	bl	80021a0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001b04:	2301      	movs	r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	4619      	mov	r1, r3
 8001b12:	480b      	ldr	r0, [pc, #44]	; (8001b40 <MX_DAC1_Init+0x70>)
 8001b14:	f003 f89a 	bl	8004c4c <HAL_DAC_ConfigChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_DAC1_Init+0x52>
		Error_Handler();
 8001b1e:	f000 fb3f 	bl	80021a0 <Error_Handler>
	}
	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2210      	movs	r2, #16
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_DAC1_Init+0x70>)
 8001b2a:	f003 f88f 	bl	8004c4c <HAL_DAC_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_DAC1_Init+0x68>
		Error_Handler();
 8001b34:	f000 fb34 	bl	80021a0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200002b8 	.word	0x200002b8
 8001b44:	40007400 	.word	0x40007400

08001b48 <MX_DAC2_Init>:
/**
 * @brief DAC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC2_Init(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC2_Init 0 */

	/* USER CODE END DAC2_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2224      	movs	r2, #36	; 0x24
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00d f8ed 	bl	800ed34 <memset>
	/* USER CODE BEGIN DAC2_Init 1 */

	/* USER CODE END DAC2_Init 1 */
	/** DAC Initialization
	 */
	hdac2.Instance = DAC2;
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_DAC2_Init+0x5c>)
 8001b5c:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MX_DAC2_Init+0x60>)
 8001b5e:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac2) != HAL_OK) {
 8001b60:	4810      	ldr	r0, [pc, #64]	; (8001ba4 <MX_DAC2_Init+0x5c>)
 8001b62:	f002 ffda 	bl	8004b1a <HAL_DAC_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_DAC2_Init+0x28>
		Error_Handler();
 8001b6c:	f000 fb18 	bl	80021a0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2200      	movs	r2, #0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_DAC2_Init+0x5c>)
 8001b8c:	f003 f85e 	bl	8004c4c <HAL_DAC_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_DAC2_Init+0x52>
		Error_Handler();
 8001b96:	f000 fb03 	bl	80021a0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC2_Init 2 */

	/* USER CODE END DAC2_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000021c 	.word	0x2000021c
 8001ba8:	58003400 	.word	0x58003400

08001bac <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <MX_DMA2D_Init+0x34>)
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <MX_DMA2D_Init+0x38>)
 8001bb4:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_R2M;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <MX_DMA2D_Init+0x34>)
 8001bb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bbc:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <MX_DMA2D_Init+0x34>)
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_DMA2D_Init+0x34>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_DMA2D_Init+0x34>)
 8001bcc:	f006 f858 	bl	8007c80 <HAL_DMA2D_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_DMA2D_Init+0x2e>
		Error_Handler();
 8001bd6:	f000 fae3 	bl	80021a0 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200004d8 	.word	0x200004d8
 8001be4:	52001000 	.word	0x52001000

08001be8 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08e      	sub	sp, #56	; 0x38
 8001bec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2234      	movs	r2, #52	; 0x34
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00d f89d 	bl	800ed34 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8001bfa:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001bfc:	4a39      	ldr	r2, [pc, #228]	; (8001ce4 <MX_LTDC_Init+0xfc>)
 8001bfe:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001c00:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001c06:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001c0c:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IIPC;
 8001c12:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c18:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 9;
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c1c:	2209      	movs	r2, #9
 8001c1e:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
 8001c20:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 60;
 8001c26:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c28:	223c      	movs	r2, #60	; 0x3c
 8001c2a:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 7;
 8001c2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c2e:	2207      	movs	r2, #7
 8001c30:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 380;
 8001c32:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c34:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 247;
 8001c3a:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c3c:	22f7      	movs	r2, #247	; 0xf7
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 392;
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c42:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 255;
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c4a:	22ff      	movs	r2, #255	; 0xff
 8001c4c:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8001c66:	481e      	ldr	r0, [pc, #120]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001c68:	f006 fa50 	bl	800810c <HAL_LTDC_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_LTDC_Init+0x8e>
		Error_Handler();
 8001c72:	f000 fa95 	bl	80021a0 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 320;
 8001c7a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c7e:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 240;
 8001c84:	23f0      	movs	r3, #240	; 0xf0
 8001c86:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001c8c:	23ff      	movs	r3, #255	; 0xff
 8001c8e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 255;
 8001c90:	23ff      	movs	r3, #255	; 0xff
 8001c92:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c98:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0x24000000;
 8001c9e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 320;
 8001ca4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 240;
 8001caa:	23f0      	movs	r3, #240	; 0xf0
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 255;
 8001cb4:	23ff      	movs	r3, #255	; 0xff
 8001cb6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4806      	ldr	r0, [pc, #24]	; (8001ce0 <MX_LTDC_Init+0xf8>)
 8001cc8:	f006 fba8 	bl	800841c <HAL_LTDC_ConfigLayer>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_LTDC_Init+0xee>
		Error_Handler();
 8001cd2:	f000 fa65 	bl	80021a0 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	3738      	adds	r7, #56	; 0x38
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000032c 	.word	0x2000032c
 8001ce4:	50001000 	.word	0x50001000

08001ce8 <MX_OCTOSPI1_Init>:
/**
 * @brief OCTOSPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OCTOSPI1_Init(void) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN OCTOSPI1_Init 0 */

	/* USER CODE END OCTOSPI1_Init 0 */

	OSPIM_CfgTypeDef sOspiManagerCfg = { 0 };
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN OCTOSPI1_Init 1 */

	/* USER CODE END OCTOSPI1_Init 1 */
	/* OCTOSPI1 parameter configuration*/
	hospi1.Instance = OCTOSPI1;
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d00:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <MX_OCTOSPI1_Init+0xc0>)
 8001d02:	601a      	str	r2, [r3, #0]
	hospi1.Init.FifoThreshold = 4;
 8001d04:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d06:	2204      	movs	r2, #4
 8001d08:	605a      	str	r2, [r3, #4]
	hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
	hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d16:	60da      	str	r2, [r3, #12]
	hospi1.Init.DeviceSize = 20;
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d1a:	2214      	movs	r2, #20
 8001d1c:	611a      	str	r2, [r3, #16]
	hospi1.Init.ChipSelectHighTime = 2;
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d20:	2202      	movs	r2, #2
 8001d22:	615a      	str	r2, [r3, #20]
	hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001d24:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
	hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	61da      	str	r2, [r3, #28]
	hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	621a      	str	r2, [r3, #32]
	hospi1.Init.ClockPrescaler = 1;
 8001d36:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
	hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
	hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
	hospi1.Init.ChipSelectBoundary = 0;
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
	hospi1.Init.ClkChipSelectHighTime = 0;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34
	hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d56:	2208      	movs	r2, #8
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
	hospi1.Init.MaxTran = 0;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c
	hospi1.Init.Refresh = 0;
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_OSPI_Init(&hospi1) != HAL_OK) {
 8001d66:	480f      	ldr	r0, [pc, #60]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d68:	f006 fdbe 	bl	80088e8 <HAL_OSPI_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_OCTOSPI1_Init+0x8e>
		Error_Handler();
 8001d72:	f000 fa15 	bl	80021a0 <Error_Handler>
	}
	sOspiManagerCfg.ClkPort = 1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	603b      	str	r3, [r7, #0]
	sOspiManagerCfg.NCSPort = 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
	sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001d7e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001d82:	60fb      	str	r3, [r7, #12]
	if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg,
 8001d84:	463b      	mov	r3, r7
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_OCTOSPI1_Init+0xbc>)
 8001d8e:	f007 f8e7 	bl	8008f60 <HAL_OSPIM_Config>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_OCTOSPI1_Init+0xb4>
			HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8001d98:	f000 fa02 	bl	80021a0 <Error_Handler>
	}
	/* USER CODE BEGIN OCTOSPI1_Init 2 */

	/* USER CODE END OCTOSPI1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200002cc 	.word	0x200002cc
 8001da8:	52005000 	.word	0x52005000

08001dac <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001dc4:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <MX_RTC_Init+0xb4>)
 8001dc6:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <MX_RTC_Init+0xb8>)
 8001dc8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <MX_RTC_Init+0xb4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <MX_RTC_Init+0xb4>)
 8001dd2:	227f      	movs	r2, #127	; 0x7f
 8001dd4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001dd6:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <MX_RTC_Init+0xb4>)
 8001dd8:	22ff      	movs	r2, #255	; 0xff
 8001dda:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ddc:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <MX_RTC_Init+0xb4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <MX_RTC_Init+0xb4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <MX_RTC_Init+0xb4>)
 8001dea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dee:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <MX_RTC_Init+0xb4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001df6:	481a      	ldr	r0, [pc, #104]	; (8001e60 <MX_RTC_Init+0xb4>)
 8001df8:	f00b f8c8 	bl	800cf8c <HAL_RTC_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_RTC_Init+0x5a>
		Error_Handler();
 8001e02:	f000 f9cd 	bl	80021a0 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4619      	mov	r1, r3
 8001e20:	480f      	ldr	r0, [pc, #60]	; (8001e60 <MX_RTC_Init+0xb4>)
 8001e22:	f00b f92f 	bl	800d084 <HAL_RTC_SetTime>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_RTC_Init+0x84>
		Error_Handler();
 8001e2c:	f000 f9b8 	bl	80021a0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e30:	2301      	movs	r3, #1
 8001e32:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001e34:	2301      	movs	r3, #1
 8001e36:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001e40:	463b      	mov	r3, r7
 8001e42:	2201      	movs	r2, #1
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <MX_RTC_Init+0xb4>)
 8001e48:	f00b fa16 	bl	800d278 <HAL_RTC_SetDate>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_RTC_Init+0xaa>
		Error_Handler();
 8001e52:	f000 f9a5 	bl	80021a0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200004b0 	.word	0x200004b0
 8001e64:	58004000 	.word	0x58004000

08001e68 <MX_SAI1_Init>:
/**
 * @brief SAI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI1_Init(void) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	/* USER CODE END SAI1_Init 0 */

	/* USER CODE BEGIN SAI1_Init 1 */

	/* USER CODE END SAI1_Init 1 */
	hsai_BlockA1.Instance = SAI1_Block_A;
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <MX_SAI1_Init+0x64>)
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <MX_SAI1_Init+0x68>)
 8001e70:	601a      	str	r2, [r3, #0]
	hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <MX_SAI1_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	605a      	str	r2, [r3, #4]
	hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <MX_SAI1_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
	hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <MX_SAI1_Init+0x64>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]
	hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_SAI1_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
	hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <MX_SAI1_Init+0x64>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	61da      	str	r2, [r3, #28]
	hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_SAI1_Init+0x64>)
 8001e92:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001e96:	621a      	str	r2, [r3, #32]
	hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_SAI1_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
	hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MX_SAI1_Init+0x64>)
 8001ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_SAI1_Init+0x64>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <MX_SAI1_Init+0x64>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD,
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4804      	ldr	r0, [pc, #16]	; (8001ecc <MX_SAI1_Init+0x64>)
 8001eba:	f00b fb87 	bl	800d5cc <HAL_SAI_InitProtocol>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_SAI1_Init+0x60>
			SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK) {
		Error_Handler();
 8001ec4:	f000 f96c 	bl	80021a0 <Error_Handler>
	}
	/* USER CODE BEGIN SAI1_Init 2 */

	/* USER CODE END SAI1_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000540 	.word	0x20000540
 8001ed0:	40015804 	.word	0x40015804

08001ed4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001eda:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <MX_SPI2_Init+0xa8>)
 8001edc:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ede:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001ee0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ee4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001ee8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eec:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef4:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001efa:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f06:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f0a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001f0e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001f64:	4804      	ldr	r0, [pc, #16]	; (8001f78 <MX_SPI2_Init+0xa4>)
 8001f66:	f00c facb 	bl	800e500 <HAL_SPI_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_SPI2_Init+0xa0>
		Error_Handler();
 8001f70:	f000 f916 	bl	80021a0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000230 	.word	0x20000230
 8001f7c:	40003800 	.word	0x40003800

08001f80 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <MX_DMA_Init+0x3c>)
 8001f88:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001f8c:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <MX_DMA_Init+0x3c>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_DMA_Init+0x3c>)
 8001f98:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	200b      	movs	r0, #11
 8001faa:	f002 fd7e 	bl	8004aaa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001fae:	200b      	movs	r0, #11
 8001fb0:	f002 fd95 	bl	8004ade <HAL_NVIC_EnableIRQ>

}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	58024400 	.word	0x58024400

08001fc0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd6:	4b6c      	ldr	r3, [pc, #432]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8001fd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001fdc:	4a6a      	ldr	r2, [pc, #424]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8001fde:	f043 0310 	orr.w	r3, r3, #16
 8001fe2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001fe6:	4b68      	ldr	r3, [pc, #416]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8001fe8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff4:	4b64      	ldr	r3, [pc, #400]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8001ff6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ffa:	4a63      	ldr	r2, [pc, #396]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002004:	4b60      	ldr	r3, [pc, #384]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8002006:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8002014:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002018:	4a5b      	ldr	r2, [pc, #364]	; (8002188 <MX_GPIO_Init+0x1c8>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002022:	4b59      	ldr	r3, [pc, #356]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8002024:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002030:	4b55      	ldr	r3, [pc, #340]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8002032:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002036:	4a54      	ldr	r2, [pc, #336]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002040:	4b51      	ldr	r3, [pc, #324]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8002042:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800204e:	4b4e      	ldr	r3, [pc, #312]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8002050:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002054:	4a4c      	ldr	r2, [pc, #304]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8002056:	f043 0308 	orr.w	r3, r3, #8
 800205a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800205e:	4b4a      	ldr	r3, [pc, #296]	; (8002188 <MX_GPIO_Init+0x1c8>)
 8002060:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIO_Speaker_enable_GPIO_Port, GPIO_Speaker_enable_Pin,
 800206c:	2201      	movs	r2, #1
 800206e:	2108      	movs	r1, #8
 8002070:	4846      	ldr	r0, [pc, #280]	; (800218c <MX_GPIO_Init+0x1cc>)
 8002072:	f006 f831 	bl	80080d8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8002076:	2200      	movs	r2, #0
 8002078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207c:	4843      	ldr	r0, [pc, #268]	; (800218c <MX_GPIO_Init+0x1cc>)
 800207e:	f006 f82b 	bl	80080d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002088:	4841      	ldr	r0, [pc, #260]	; (8002190 <MX_GPIO_Init+0x1d0>)
 800208a:	f006 f825 	bl	80080d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_4, GPIO_PIN_SET);
 800208e:	2201      	movs	r2, #1
 8002090:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002094:	483f      	ldr	r0, [pc, #252]	; (8002194 <MX_GPIO_Init+0x1d4>)
 8002096:	f006 f81f 	bl	80080d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	2102      	movs	r1, #2
 800209e:	483d      	ldr	r0, [pc, #244]	; (8002194 <MX_GPIO_Init+0x1d4>)
 80020a0:	f006 f81a 	bl	80080d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPIO_Speaker_enable_Pin PE8 */
	GPIO_InitStruct.Pin = GPIO_Speaker_enable_Pin | GPIO_PIN_8;
 80020a4:	f44f 7384 	mov.w	r3, #264	; 0x108
 80020a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	4833      	ldr	r0, [pc, #204]	; (800218c <MX_GPIO_Init+0x1cc>)
 80020be:	f005 fe43 	bl	8007d48 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_PAUSE_Pin BTN_GAME_Pin BTN_TIME_Pin */
	GPIO_InitStruct.Pin = BTN_PAUSE_Pin | BTN_GAME_Pin | BTN_TIME_Pin;
 80020c2:	f242 0322 	movw	r3, #8226	; 0x2022
 80020c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	4830      	ldr	r0, [pc, #192]	; (8002198 <MX_GPIO_Init+0x1d8>)
 80020d8:	f005 fe36 	bl	8007d48 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_PWR_Pin */
	GPIO_InitStruct.Pin = BTN_PWR_Pin;
 80020dc:	2301      	movs	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN_PWR_GPIO_Port, &GPIO_InitStruct);
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4619      	mov	r1, r3
 80020ee:	482b      	ldr	r0, [pc, #172]	; (800219c <MX_GPIO_Init+0x1dc>)
 80020f0:	f005 fe2a 	bl	8007d48 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020f4:	2304      	movs	r3, #4
 80020f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4619      	mov	r1, r3
 8002108:	4824      	ldr	r0, [pc, #144]	; (800219c <MX_GPIO_Init+0x1dc>)
 800210a:	f005 fe1d 	bl	8007d48 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002112:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002116:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	481a      	ldr	r0, [pc, #104]	; (800218c <MX_GPIO_Init+0x1cc>)
 8002124:	f005 fe10 	bl	8007d48 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4619      	mov	r1, r3
 8002140:	4813      	ldr	r0, [pc, #76]	; (8002190 <MX_GPIO_Init+0x1d0>)
 8002142:	f005 fe01 	bl	8007d48 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD1 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_1 | GPIO_PIN_4;
 8002146:	f44f 7389 	mov.w	r3, #274	; 0x112
 800214a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214c:	2301      	movs	r3, #1
 800214e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4619      	mov	r1, r3
 800215e:	480d      	ldr	r0, [pc, #52]	; (8002194 <MX_GPIO_Init+0x1d4>)
 8002160:	f005 fdf2 	bl	8007d48 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_A_Pin BTN_Left_Pin BTN_Down_Pin BTN_Right_Pin
	 BTN_Up_Pin BTN_B_Pin */
	GPIO_InitStruct.Pin = BTN_A_Pin | BTN_Left_Pin | BTN_Down_Pin
 8002164:	f64c 2321 	movw	r3, #51745	; 0xca21
 8002168:	617b      	str	r3, [r7, #20]
			| BTN_Right_Pin | BTN_Up_Pin | BTN_B_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800216e:	2301      	movs	r3, #1
 8002170:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	4806      	ldr	r0, [pc, #24]	; (8002194 <MX_GPIO_Init+0x1d4>)
 800217a:	f005 fde5 	bl	8007d48 <HAL_GPIO_Init>

}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	; 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	58024400 	.word	0x58024400
 800218c:	58021000 	.word	0x58021000
 8002190:	58020400 	.word	0x58020400
 8002194:	58020c00 	.word	0x58020c00
 8002198:	58020800 	.word	0x58020800
 800219c:	58020000 	.word	0x58020000

080021a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a4:	b672      	cpsid	i
}
 80021a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021a8:	e7fe      	b.n	80021a8 <Error_Handler+0x8>
	...

080021ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_MspInit+0x30>)
 80021b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80021b8:	4a08      	ldr	r2, [pc, #32]	; (80021dc <HAL_MspInit+0x30>)
 80021ba:	f043 0302 	orr.w	r3, r3, #2
 80021be:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_MspInit+0x30>)
 80021c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	58024400 	.word	0x58024400

080021e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1c      	ldr	r2, [pc, #112]	; (8002270 <HAL_ADC_MspInit+0x90>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d131      	bne.n	8002266 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_ADC_MspInit+0x94>)
 8002204:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002208:	4a1a      	ldr	r2, [pc, #104]	; (8002274 <HAL_ADC_MspInit+0x94>)
 800220a:	f043 0320 	orr.w	r3, r3, #32
 800220e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <HAL_ADC_MspInit+0x94>)
 8002214:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_ADC_MspInit+0x94>)
 8002222:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002226:	4a13      	ldr	r2, [pc, #76]	; (8002274 <HAL_ADC_MspInit+0x94>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_ADC_MspInit+0x94>)
 8002232:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800223e:	2310      	movs	r3, #16
 8002240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002242:	2303      	movs	r3, #3
 8002244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	4809      	ldr	r0, [pc, #36]	; (8002278 <HAL_ADC_MspInit+0x98>)
 8002252:	f005 fd79 	bl	8007d48 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	2012      	movs	r0, #18
 800225c:	f002 fc25 	bl	8004aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002260:	2012      	movs	r0, #18
 8002262:	f002 fc3c 	bl	8004ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3728      	adds	r7, #40	; 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40022000 	.word	0x40022000
 8002274:	58024400 	.word	0x58024400
 8002278:	58020800 	.word	0x58020800

0800227c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a30      	ldr	r2, [pc, #192]	; (800235c <HAL_DAC_MspInit+0xe0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d12a      	bne.n	80022f4 <HAL_DAC_MspInit+0x78>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800229e:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_DAC_MspInit+0xe4>)
 80022a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80022a4:	4a2e      	ldr	r2, [pc, #184]	; (8002360 <HAL_DAC_MspInit+0xe4>)
 80022a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022aa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80022ae:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_DAC_MspInit+0xe4>)
 80022b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80022b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022bc:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_DAC_MspInit+0xe4>)
 80022be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80022c2:	4a27      	ldr	r2, [pc, #156]	; (8002360 <HAL_DAC_MspInit+0xe4>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_DAC_MspInit+0xe4>)
 80022ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022da:	2330      	movs	r3, #48	; 0x30
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022de:	2303      	movs	r3, #3
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	4619      	mov	r1, r3
 80022ec:	481d      	ldr	r0, [pc, #116]	; (8002364 <HAL_DAC_MspInit+0xe8>)
 80022ee:	f005 fd2b 	bl	8007d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80022f2:	e02e      	b.n	8002352 <HAL_DAC_MspInit+0xd6>
  else if(hdac->Instance==DAC2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <HAL_DAC_MspInit+0xec>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d129      	bne.n	8002352 <HAL_DAC_MspInit+0xd6>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_DAC_MspInit+0xe4>)
 8002300:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002304:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_DAC_MspInit+0xe4>)
 8002306:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800230a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_DAC_MspInit+0xe4>)
 8002310:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_DAC_MspInit+0xe4>)
 800231e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002322:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <HAL_DAC_MspInit+0xe4>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_DAC_MspInit+0xe4>)
 800232e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800233a:	2340      	movs	r3, #64	; 0x40
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800233e:	2303      	movs	r3, #3
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <HAL_DAC_MspInit+0xe8>)
 800234e:	f005 fcfb 	bl	8007d48 <HAL_GPIO_Init>
}
 8002352:	bf00      	nop
 8002354:	3730      	adds	r7, #48	; 0x30
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40007400 	.word	0x40007400
 8002360:	58024400 	.word	0x58024400
 8002364:	58020000 	.word	0x58020000
 8002368:	58003400 	.word	0x58003400

0800236c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <HAL_DMA2D_MspInit+0x3c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10e      	bne.n	800239c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_DMA2D_MspInit+0x40>)
 8002380:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002384:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_DMA2D_MspInit+0x40>)
 8002386:	f043 0310 	orr.w	r3, r3, #16
 800238a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_DMA2D_MspInit+0x40>)
 8002390:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	52001000 	.word	0x52001000
 80023ac:	58024400 	.word	0x58024400

080023b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0bc      	sub	sp, #240	; 0xf0
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	22b8      	movs	r2, #184	; 0xb8
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f00c fcaf 	bl	800ed34 <memset>
  if(hltdc->Instance==LTDC)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4abb      	ldr	r2, [pc, #748]	; (80026c8 <HAL_LTDC_MspInit+0x318>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	f040 816e 	bne.w	80026be <HAL_LTDC_MspInit+0x30e>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80023e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 80023e8:	2304      	movs	r3, #4
 80023ea:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 9;
 80023ec:	2309      	movs	r3, #9
 80023ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80023f0:	2302      	movs	r3, #2
 80023f2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80023f4:	2302      	movs	r3, #2
 80023f6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 24;
 80023f8:	2318      	movs	r3, #24
 80023fa:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80023fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002400:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002402:	2300      	movs	r3, #0
 8002404:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800240a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240e:	4618      	mov	r0, r3
 8002410:	f008 fd12 	bl	800ae38 <HAL_RCCEx_PeriphCLKConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 800241a:	f7ff fec1 	bl	80021a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800241e:	4bab      	ldr	r3, [pc, #684]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 8002420:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002424:	4aa9      	ldr	r2, [pc, #676]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 8002426:	f043 0308 	orr.w	r3, r3, #8
 800242a:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800242e:	4ba7      	ldr	r3, [pc, #668]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 8002430:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	623b      	str	r3, [r7, #32]
 800243a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800243c:	4ba3      	ldr	r3, [pc, #652]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 800243e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002442:	4aa2      	ldr	r2, [pc, #648]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800244c:	4b9f      	ldr	r3, [pc, #636]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 800244e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b9c      	ldr	r3, [pc, #624]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 800245c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002460:	4a9a      	ldr	r2, [pc, #616]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800246a:	4b98      	ldr	r3, [pc, #608]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 800246c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002478:	4b94      	ldr	r3, [pc, #592]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 800247a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800247e:	4a93      	ldr	r2, [pc, #588]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002488:	4b90      	ldr	r3, [pc, #576]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 800248a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002496:	4b8d      	ldr	r3, [pc, #564]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 8002498:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800249c:	4a8b      	ldr	r2, [pc, #556]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 800249e:	f043 0310 	orr.w	r3, r3, #16
 80024a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80024a6:	4b89      	ldr	r3, [pc, #548]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 80024a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b4:	4b85      	ldr	r3, [pc, #532]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 80024b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80024ba:	4a84      	ldr	r2, [pc, #528]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 80024bc:	f043 0308 	orr.w	r3, r3, #8
 80024c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80024c4:	4b81      	ldr	r3, [pc, #516]	; (80026cc <HAL_LTDC_MspInit+0x31c>)
 80024c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PD6     ------> LTDC_B2
    PB5     ------> LTDC_B5
    PB8     ------> LTDC_B6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 80024ea:	230b      	movs	r3, #11
 80024ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024f4:	4619      	mov	r1, r3
 80024f6:	4876      	ldr	r0, [pc, #472]	; (80026d0 <HAL_LTDC_MspInit+0x320>)
 80024f8:	f005 fc26 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 80024fc:	f44f 6338 	mov.w	r3, #2944	; 0xb80
 8002500:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002516:	230e      	movs	r3, #14
 8002518:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002520:	4619      	mov	r1, r3
 8002522:	486c      	ldr	r0, [pc, #432]	; (80026d4 <HAL_LTDC_MspInit+0x324>)
 8002524:	f005 fc10 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002528:	2301      	movs	r3, #1
 800252a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002540:	2309      	movs	r3, #9
 8002542:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002546:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800254a:	4619      	mov	r1, r3
 800254c:	4862      	ldr	r0, [pc, #392]	; (80026d8 <HAL_LTDC_MspInit+0x328>)
 800254e:	f005 fbfb 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002552:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800256c:	230e      	movs	r3, #14
 800256e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002572:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002576:	4619      	mov	r1, r3
 8002578:	4858      	ldr	r0, [pc, #352]	; (80026dc <HAL_LTDC_MspInit+0x32c>)
 800257a:	f005 fbe5 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_8;
 800257e:	f44f 439a 	mov.w	r3, #19712	; 0x4d00
 8002582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002598:	230e      	movs	r3, #14
 800259a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025a2:	4619      	mov	r1, r3
 80025a4:	484c      	ldr	r0, [pc, #304]	; (80026d8 <HAL_LTDC_MspInit+0x328>)
 80025a6:	f005 fbcf 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
 80025aa:	f44f 6389 	mov.w	r3, #1096	; 0x448
 80025ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025c4:	230e      	movs	r3, #14
 80025c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025ce:	4619      	mov	r1, r3
 80025d0:	4843      	ldr	r0, [pc, #268]	; (80026e0 <HAL_LTDC_MspInit+0x330>)
 80025d2:	f005 fbb9 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80025d6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80025da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025f0:	230e      	movs	r3, #14
 80025f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025fa:	4619      	mov	r1, r3
 80025fc:	4834      	ldr	r0, [pc, #208]	; (80026d0 <HAL_LTDC_MspInit+0x320>)
 80025fe:	f005 fba3 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
 800261c:	230a      	movs	r3, #10
 800261e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002622:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002626:	4619      	mov	r1, r3
 8002628:	4829      	ldr	r0, [pc, #164]	; (80026d0 <HAL_LTDC_MspInit+0x320>)
 800262a:	f005 fb8d 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800262e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
 8002648:	230c      	movs	r3, #12
 800264a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002652:	4619      	mov	r1, r3
 8002654:	481f      	ldr	r0, [pc, #124]	; (80026d4 <HAL_LTDC_MspInit+0x324>)
 8002656:	f005 fb77 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800265a:	2304      	movs	r3, #4
 800265c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002672:	2309      	movs	r3, #9
 8002674:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002678:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800267c:	4619      	mov	r1, r3
 800267e:	4818      	ldr	r0, [pc, #96]	; (80026e0 <HAL_LTDC_MspInit+0x330>)
 8002680:	f005 fb62 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002684:	2320      	movs	r3, #32
 8002686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 800269c:	230b      	movs	r3, #11
 800269e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026a6:	4619      	mov	r1, r3
 80026a8:	480b      	ldr	r0, [pc, #44]	; (80026d8 <HAL_LTDC_MspInit+0x328>)
 80026aa:	f005 fb4d 	bl	8007d48 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	2058      	movs	r0, #88	; 0x58
 80026b4:	f002 f9f9 	bl	8004aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80026b8:	2058      	movs	r0, #88	; 0x58
 80026ba:	f002 fa10 	bl	8004ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80026be:	bf00      	nop
 80026c0:	37f0      	adds	r7, #240	; 0xf0
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	50001000 	.word	0x50001000
 80026cc:	58024400 	.word	0x58024400
 80026d0:	58020800 	.word	0x58020800
 80026d4:	58020000 	.word	0x58020000
 80026d8:	58020400 	.word	0x58020400
 80026dc:	58021000 	.word	0x58021000
 80026e0:	58020c00 	.word	0x58020c00

080026e4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b0bc      	sub	sp, #240	; 0xf0
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002700:	22b8      	movs	r2, #184	; 0xb8
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f00c fb15 	bl	800ed34 <memset>
  if(hospi->Instance==OCTOSPI1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a78      	ldr	r2, [pc, #480]	; (80028f0 <HAL_OSPI_MspInit+0x20c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	f040 80e9 	bne.w	80028e8 <HAL_OSPI_MspInit+0x204>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
 800271c:	2330      	movs	r3, #48	; 0x30
 800271e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002724:	4618      	mov	r0, r3
 8002726:	f008 fb87 	bl	800ae38 <HAL_RCCEx_PeriphCLKConfig>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002730:	f7ff fd36 	bl	80021a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8002734:	4b6f      	ldr	r3, [pc, #444]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 8002736:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800273a:	4a6e      	ldr	r2, [pc, #440]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 800273c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002740:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002744:	4b6b      	ldr	r3, [pc, #428]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 8002746:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800274a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274e:	623b      	str	r3, [r7, #32]
 8002750:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002752:	4b68      	ldr	r3, [pc, #416]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 8002754:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002758:	4a66      	ldr	r2, [pc, #408]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 800275a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002762:	4b64      	ldr	r3, [pc, #400]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 8002764:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002770:	4b60      	ldr	r3, [pc, #384]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 8002772:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002776:	4a5f      	ldr	r2, [pc, #380]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 8002778:	f043 0310 	orr.w	r3, r3, #16
 800277c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002780:	4b5c      	ldr	r3, [pc, #368]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 8002782:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278e:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 8002790:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002794:	4a57      	ldr	r2, [pc, #348]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800279e:	4b55      	ldr	r3, [pc, #340]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 80027a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ac:	4b51      	ldr	r3, [pc, #324]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 80027ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80027b2:	4a50      	ldr	r2, [pc, #320]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80027bc:	4b4d      	ldr	r3, [pc, #308]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 80027be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ca:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 80027cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80027d0:	4a48      	ldr	r2, [pc, #288]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 80027d2:	f043 0308 	orr.w	r3, r3, #8
 80027d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80027da:	4b46      	ldr	r3, [pc, #280]	; (80028f4 <HAL_OSPI_MspInit+0x210>)
 80027dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    PD12     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027e8:	2304      	movs	r3, #4
 80027ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002800:	2309      	movs	r3, #9
 8002802:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002806:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800280a:	4619      	mov	r1, r3
 800280c:	483a      	ldr	r0, [pc, #232]	; (80028f8 <HAL_OSPI_MspInit+0x214>)
 800280e:	f005 fa9b 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002812:	2302      	movs	r3, #2
 8002814:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002824:	2303      	movs	r3, #3
 8002826:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800282a:	2309      	movs	r3, #9
 800282c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002830:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002834:	4619      	mov	r1, r3
 8002836:	4831      	ldr	r0, [pc, #196]	; (80028fc <HAL_OSPI_MspInit+0x218>)
 8002838:	f005 fa86 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800283c:	2302      	movs	r3, #2
 800283e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284e:	2303      	movs	r3, #3
 8002850:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8002854:	230b      	movs	r3, #11
 8002856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800285e:	4619      	mov	r1, r3
 8002860:	4827      	ldr	r0, [pc, #156]	; (8002900 <HAL_OSPI_MspInit+0x21c>)
 8002862:	f005 fa71 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002866:	2304      	movs	r3, #4
 8002868:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800287e:	2309      	movs	r3, #9
 8002880:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002888:	4619      	mov	r1, r3
 800288a:	481d      	ldr	r0, [pc, #116]	; (8002900 <HAL_OSPI_MspInit+0x21c>)
 800288c:	f005 fa5c 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002890:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002894:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 80028aa:	230b      	movs	r3, #11
 80028ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028b4:	4619      	mov	r1, r3
 80028b6:	4810      	ldr	r0, [pc, #64]	; (80028f8 <HAL_OSPI_MspInit+0x214>)
 80028b8:	f005 fa46 	bl	8007d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80028d6:	2309      	movs	r3, #9
 80028d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028e0:	4619      	mov	r1, r3
 80028e2:	4808      	ldr	r0, [pc, #32]	; (8002904 <HAL_OSPI_MspInit+0x220>)
 80028e4:	f005 fa30 	bl	8007d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80028e8:	bf00      	nop
 80028ea:	37f0      	adds	r7, #240	; 0xf0
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	52005000 	.word	0x52005000
 80028f4:	58024400 	.word	0x58024400
 80028f8:	58021000 	.word	0x58021000
 80028fc:	58020000 	.word	0x58020000
 8002900:	58020400 	.word	0x58020400
 8002904:	58020c00 	.word	0x58020c00

08002908 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b0b0      	sub	sp, #192	; 0xc0
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	22b8      	movs	r2, #184	; 0xb8
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f00c fa0b 	bl	800ed34 <memset>
  if(hrtc->Instance==RTC)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <HAL_RTC_MspInit+0x58>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d116      	bne.n	8002956 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002928:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800292c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800292e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002932:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002936:	f107 0308 	add.w	r3, r7, #8
 800293a:	4618      	mov	r0, r3
 800293c:	f008 fa7c 	bl	800ae38 <HAL_RCCEx_PeriphCLKConfig>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002946:	f7ff fc2b 	bl	80021a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_RTC_MspInit+0x5c>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	4a05      	ldr	r2, [pc, #20]	; (8002964 <HAL_RTC_MspInit+0x5c>)
 8002950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002954:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002956:	bf00      	nop
 8002958:	37c0      	adds	r7, #192	; 0xc0
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	58004000 	.word	0x58004000
 8002964:	58024400 	.word	0x58024400

08002968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0b8      	sub	sp, #224	; 0xe0
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	22b8      	movs	r2, #184	; 0xb8
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f00c f9d3 	bl	800ed34 <memset>
  if(hspi->Instance==SPI2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <HAL_SPI_MspInit+0xc0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d143      	bne.n	8002a20 <HAL_SPI_MspInit+0xb8>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800299e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029a2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4618      	mov	r0, r3
 80029aa:	f008 fa45 	bl	800ae38 <HAL_RCCEx_PeriphCLKConfig>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80029b4:	f7ff fbf4 	bl	80021a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029b8:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <HAL_SPI_MspInit+0xc4>)
 80029ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <HAL_SPI_MspInit+0xc4>)
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80029c8:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <HAL_SPI_MspInit+0xc4>)
 80029ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_SPI_MspInit+0xc4>)
 80029d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80029dc:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <HAL_SPI_MspInit+0xc4>)
 80029de:	f043 0302 	orr.w	r3, r3, #2
 80029e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_SPI_MspInit+0xc4>)
 80029e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80029f4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80029f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a0e:	2305      	movs	r3, #5
 8002a10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <HAL_SPI_MspInit+0xc8>)
 8002a1c:	f005 f994 	bl	8007d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a20:	bf00      	nop
 8002a22:	37e0      	adds	r7, #224	; 0xe0
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40003800 	.word	0x40003800
 8002a2c:	58024400 	.word	0x58024400
 8002a30:	58020400 	.word	0x58020400

08002a34 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a37      	ldr	r2, [pc, #220]	; (8002b20 <HAL_SAI_MspInit+0xec>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d167      	bne.n	8002b16 <HAL_SAI_MspInit+0xe2>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002a46:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <HAL_SAI_MspInit+0xf0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <HAL_SAI_MspInit+0x48>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002a4e:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <HAL_SAI_MspInit+0xf4>)
 8002a50:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002a54:	4a34      	ldr	r2, [pc, #208]	; (8002b28 <HAL_SAI_MspInit+0xf4>)
 8002a56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a5a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002a5e:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <HAL_SAI_MspInit+0xf4>)
 8002a60:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2057      	movs	r0, #87	; 0x57
 8002a72:	f002 f81a 	bl	8004aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8002a76:	2057      	movs	r0, #87	; 0x57
 8002a78:	f002 f831 	bl	8004ade <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8002a7c:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_SAI_MspInit+0xf0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <HAL_SAI_MspInit+0xf0>)
 8002a84:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002a86:	2370      	movs	r3, #112	; 0x70
 8002a88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002a96:	2306      	movs	r3, #6
 8002a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4822      	ldr	r0, [pc, #136]	; (8002b2c <HAL_SAI_MspInit+0xf8>)
 8002aa2:	f005 f951 	bl	8007d48 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002aa8:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <HAL_SAI_MspInit+0x100>)
 8002aaa:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002aac:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002aae:	2257      	movs	r2, #87	; 0x57
 8002ab0:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002ab4:	2240      	movs	r2, #64	; 0x40
 8002ab6:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002abe:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ac4:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002acc:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002ad0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ad4:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002adc:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002aea:	4811      	ldr	r0, [pc, #68]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002aec:	f002 f9de 	bl	8004eac <HAL_DMA_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_SAI_MspInit+0xc6>
    {
      Error_Handler();
 8002af6:	f7ff fb53 	bl	80021a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <HAL_SAI_MspInit+0xfc>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8002b16:	bf00      	nop
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40015804 	.word	0x40015804
 8002b24:	200000e4 	.word	0x200000e4
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	58021000 	.word	0x58021000
 8002b30:	200003d4 	.word	0x200003d4
 8002b34:	40020010 	.word	0x40020010

08002b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <NMI_Handler+0x4>

08002b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b42:	e7fe      	b.n	8002b42 <HardFault_Handler+0x4>

08002b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <MemManage_Handler+0x4>

08002b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b4e:	e7fe      	b.n	8002b4e <BusFault_Handler+0x4>

08002b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <UsageFault_Handler+0x4>

08002b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b84:	f000 fa12 	bl	8002fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <DMA1_Stream0_IRQHandler+0x10>)
 8002b92:	f003 fce7 	bl	8006564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200003d4 	.word	0x200003d4

08002ba0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <ADC_IRQHandler+0x10>)
 8002ba6:	f000 ff35 	bl	8003a14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	2000044c 	.word	0x2000044c

08002bb4 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <SAI1_IRQHandler+0x10>)
 8002bba:	f00b f881 	bl	800dcc0 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000540 	.word	0x20000540

08002bc8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <LTDC_IRQHandler+0x10>)
 8002bce:	f005 fb6d 	bl	80082ac <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000032c 	.word	0x2000032c

08002bdc <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <OCTOSPI1_IRQHandler+0x10>)
 8002be2:	f005 ff3f 	bl	8008a64 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200002cc 	.word	0x200002cc

08002bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
	return 1;
 8002bf4:	2301      	movs	r3, #1
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <_kill>:

int _kill(int pid, int sig)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c0a:	f00c f85b 	bl	800ecc4 <__errno>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2216      	movs	r2, #22
 8002c12:	601a      	str	r2, [r3, #0]
	return -1;
 8002c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_exit>:

void _exit (int status)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ffe7 	bl	8002c00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c32:	e7fe      	b.n	8002c32 <_exit+0x12>

08002c34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e00a      	b.n	8002c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c46:	f3af 8000 	nop.w
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	60ba      	str	r2, [r7, #8]
 8002c52:	b2ca      	uxtb	r2, r1
 8002c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	dbf0      	blt.n	8002c46 <_read+0x12>
	}

return len;
 8002c64:	687b      	ldr	r3, [r7, #4]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	e009      	b.n	8002c94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	60ba      	str	r2, [r7, #8]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3301      	adds	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	dbf1      	blt.n	8002c80 <_write+0x12>
	}
	return len;
 8002c9c:	687b      	ldr	r3, [r7, #4]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <_close>:

int _close(int file)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
	return -1;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cce:	605a      	str	r2, [r3, #4]
	return 0;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <_isatty>:

int _isatty(int file)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
	return 0;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d18:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <_sbrk+0x5c>)
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <_sbrk+0x60>)
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <_sbrk+0x64>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <_sbrk+0x64>)
 8002d2e:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <_sbrk+0x68>)
 8002d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <_sbrk+0x64>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d207      	bcs.n	8002d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d40:	f00b ffc0 	bl	800ecc4 <__errno>
 8002d44:	4603      	mov	r3, r0
 8002d46:	220c      	movs	r2, #12
 8002d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	e009      	b.n	8002d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <_sbrk+0x64>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <_sbrk+0x64>)
 8002d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20020000 	.word	0x20020000
 8002d70:	00005000 	.word	0x00005000
 8002d74:	200000e8 	.word	0x200000e8
 8002d78:	200005f0 	.word	0x200005f0

08002d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d80:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <SystemInit+0xd8>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	4a33      	ldr	r2, [pc, #204]	; (8002e54 <SystemInit+0xd8>)
 8002d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d90:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <SystemInit+0xdc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d807      	bhi.n	8002dac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d9c:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <SystemInit+0xdc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 030f 	bic.w	r3, r3, #15
 8002da4:	4a2c      	ldr	r2, [pc, #176]	; (8002e58 <SystemInit+0xdc>)
 8002da6:	f043 0303 	orr.w	r3, r3, #3
 8002daa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002dac:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <SystemInit+0xe0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <SystemInit+0xe0>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002db8:	4b28      	ldr	r3, [pc, #160]	; (8002e5c <SystemInit+0xe0>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002dbe:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <SystemInit+0xe0>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4926      	ldr	r1, [pc, #152]	; (8002e5c <SystemInit+0xe0>)
 8002dc4:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <SystemInit+0xe4>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dca:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <SystemInit+0xdc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <SystemInit+0xdc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 030f 	bic.w	r3, r3, #15
 8002dde:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <SystemInit+0xdc>)
 8002de0:	f043 0303 	orr.w	r3, r3, #3
 8002de4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002de6:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <SystemInit+0xe0>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002dec:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <SystemInit+0xe0>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <SystemInit+0xe0>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002df8:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <SystemInit+0xe0>)
 8002dfa:	4a1a      	ldr	r2, [pc, #104]	; (8002e64 <SystemInit+0xe8>)
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <SystemInit+0xe0>)
 8002e00:	4a19      	ldr	r2, [pc, #100]	; (8002e68 <SystemInit+0xec>)
 8002e02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e04:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <SystemInit+0xe0>)
 8002e06:	4a19      	ldr	r2, [pc, #100]	; (8002e6c <SystemInit+0xf0>)
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e0a:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <SystemInit+0xe0>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <SystemInit+0xe0>)
 8002e12:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <SystemInit+0xf0>)
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <SystemInit+0xe0>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <SystemInit+0xe0>)
 8002e1e:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <SystemInit+0xf0>)
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <SystemInit+0xe0>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <SystemInit+0xe0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <SystemInit+0xe0>)
 8002e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <SystemInit+0xe0>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <SystemInit+0xf4>)
 8002e3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e40:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <SystemInit+0xd8>)
 8002e44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e48:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00
 8002e58:	52002000 	.word	0x52002000
 8002e5c:	58024400 	.word	0x58024400
 8002e60:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e64:	02020200 	.word	0x02020200
 8002e68:	01ff0000 	.word	0x01ff0000
 8002e6c:	01010280 	.word	0x01010280
 8002e70:	52004000 	.word	0x52004000

08002e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e78:	f7ff ff80 	bl	8002d7c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e7c:	480c      	ldr	r0, [pc, #48]	; (8002eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e7e:	490d      	ldr	r1, [pc, #52]	; (8002eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e80:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e84:	e002      	b.n	8002e8c <LoopCopyDataInit>

08002e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8a:	3304      	adds	r3, #4

08002e8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e90:	d3f9      	bcc.n	8002e86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e94:	4c0a      	ldr	r4, [pc, #40]	; (8002ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e98:	e001      	b.n	8002e9e <LoopFillZerobss>

08002e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e9c:	3204      	adds	r2, #4

08002e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea0:	d3fb      	bcc.n	8002e9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ea2:	f00b ff15 	bl	800ecd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ea6:	f7fe fc81 	bl	80017ac <main>
  bx  lr
 8002eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002eb8:	08011338 	.word	0x08011338
  ldr r2, =_sbss
 8002ebc:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002ec0:	200005ec 	.word	0x200005ec

08002ec4 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ec4:	e7fe      	b.n	8002ec4 <BDMA1_IRQHandler>
	...

08002ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ece:	2003      	movs	r0, #3
 8002ed0:	f001 fde0 	bl	8004a94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002ed4:	f007 fe06 	bl	800aae4 <HAL_RCC_GetSysClockFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_Init+0x68>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	4913      	ldr	r1, [pc, #76]	; (8002f34 <HAL_Init+0x6c>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_Init+0x68>)
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <HAL_Init+0x6c>)
 8002efc:	5cd3      	ldrb	r3, [r2, r3]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <HAL_Init+0x70>)
 8002f0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f0c:	4a0b      	ldr	r2, [pc, #44]	; (8002f3c <HAL_Init+0x74>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f12:	2000      	movs	r0, #0
 8002f14:	f000 f814 	bl	8002f40 <HAL_InitTick>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e002      	b.n	8002f28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f22:	f7ff f943 	bl	80021ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	58024400 	.word	0x58024400
 8002f34:	080111cc 	.word	0x080111cc
 8002f38:	20000034 	.word	0x20000034
 8002f3c:	20000030 	.word	0x20000030

08002f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f48:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <HAL_InitTick+0x60>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e021      	b.n	8002f98 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <HAL_InitTick+0x64>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_InitTick+0x60>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 fdc9 	bl	8004b02 <HAL_SYSTICK_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00e      	b.n	8002f98 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d80a      	bhi.n	8002f96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f80:	2200      	movs	r2, #0
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295
 8002f88:	f001 fd8f 	bl	8004aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f8c:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <HAL_InitTick+0x68>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e000      	b.n	8002f98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	2000003c 	.word	0x2000003c
 8002fa4:	20000030 	.word	0x20000030
 8002fa8:	20000038 	.word	0x20000038

08002fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_IncTick+0x20>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	2000003c 	.word	0x2000003c
 8002fd0:	200005d8 	.word	0x200005d8

08002fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_GetTick+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	200005d8 	.word	0x200005d8

08002fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff4:	f7ff ffee 	bl	8002fd4 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d005      	beq.n	8003012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HAL_Delay+0x44>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003012:	bf00      	nop
 8003014:	f7ff ffde 	bl	8002fd4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	429a      	cmp	r2, r3
 8003022:	d8f7      	bhi.n	8003014 <HAL_Delay+0x28>
  {
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	2000003c 	.word	0x2000003c

08003034 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	609a      	str	r2, [r3, #8]
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3360      	adds	r3, #96	; 0x60
 80030ae:	461a      	mov	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	431a      	orrs	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80030d0:	bf00      	nop
 80030d2:	371c      	adds	r7, #28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	431a      	orrs	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	611a      	str	r2, [r3, #16]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800310e:	b480      	push	{r7}
 8003110:	b087      	sub	sp, #28
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	3360      	adds	r3, #96	; 0x60
 800311e:	461a      	mov	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	431a      	orrs	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	601a      	str	r2, [r3, #0]
  }
}
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800316a:	b480      	push	{r7}
 800316c:	b087      	sub	sp, #28
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3330      	adds	r3, #48	; 0x30
 800317a:	461a      	mov	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	4413      	add	r3, r2
 8003188:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	211f      	movs	r1, #31
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	401a      	ands	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	0e9b      	lsrs	r3, r3, #26
 80031a2:	f003 011f 	and.w	r1, r3, #31
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa01 f303 	lsl.w	r3, r1, r3
 80031b0:	431a      	orrs	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3314      	adds	r3, #20
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	0e5b      	lsrs	r3, r3, #25
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	4413      	add	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	0d1b      	lsrs	r3, r3, #20
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	2107      	movs	r1, #7
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	401a      	ands	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	0d1b      	lsrs	r3, r3, #20
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	431a      	orrs	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003258:	43db      	mvns	r3, r3
 800325a:	401a      	ands	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0318 	and.w	r3, r3, #24
 8003262:	4908      	ldr	r1, [pc, #32]	; (8003284 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003264:	40d9      	lsrs	r1, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	400b      	ands	r3, r1
 800326a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800326e:	431a      	orrs	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	000fffff 	.word	0x000fffff

08003288 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 031f 	and.w	r3, r3, #31
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6093      	str	r3, [r2, #8]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	5fffffc0 	.word	0x5fffffc0

080032e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f8:	d101      	bne.n	80032fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <LL_ADC_EnableInternalRegulator+0x24>)
 800331a:	4013      	ands	r3, r2
 800331c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	6fffffc0 	.word	0x6fffffc0

08003334 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003348:	d101      	bne.n	800334e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <LL_ADC_Enable+0x24>)
 800336a:	4013      	ands	r3, r2
 800336c:	f043 0201 	orr.w	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	7fffffc0 	.word	0x7fffffc0

08003384 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <LL_ADC_IsEnabled+0x18>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <LL_ADC_IsEnabled+0x1a>
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <LL_ADC_REG_StartConversion+0x24>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	7fffffc0 	.word	0x7fffffc0

080033d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d101      	bne.n	80033ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b08      	cmp	r3, #8
 800340c:	d101      	bne.n	8003412 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e138      	b.n	80036ac <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7fe fec9 	bl	80021e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff3f 	bl	80032e4 <LL_ADC_IsDeepPowerDownEnabled>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff25 	bl	80032c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ff5a 	bl	8003334 <LL_ADC_IsInternalRegulatorEnabled>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d114      	bne.n	80034b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff ff3e 	bl	800330c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003490:	4b88      	ldr	r3, [pc, #544]	; (80036b4 <HAL_ADC_Init+0x294>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	099b      	lsrs	r3, r3, #6
 8003496:	4a88      	ldr	r2, [pc, #544]	; (80036b8 <HAL_ADC_Init+0x298>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	099b      	lsrs	r3, r3, #6
 800349e:	3301      	adds	r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034a2:	e002      	b.n	80034aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f9      	bne.n	80034a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff3d 	bl	8003334 <LL_ADC_IsInternalRegulatorEnabled>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10d      	bne.n	80034dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	f043 0210 	orr.w	r2, r3, #16
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d0:	f043 0201 	orr.w	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff77 	bl	80033d4 <LL_ADC_REG_IsConversionOngoing>
 80034e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f040 80d2 	bne.w	800369a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f040 80ce 	bne.w	800369a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003506:	f043 0202 	orr.w	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff36 	bl	8003384 <LL_ADC_IsEnabled>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d110      	bne.n	8003540 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800351e:	4867      	ldr	r0, [pc, #412]	; (80036bc <HAL_ADC_Init+0x29c>)
 8003520:	f7ff ff30 	bl	8003384 <LL_ADC_IsEnabled>
 8003524:	4604      	mov	r4, r0
 8003526:	4866      	ldr	r0, [pc, #408]	; (80036c0 <HAL_ADC_Init+0x2a0>)
 8003528:	f7ff ff2c 	bl	8003384 <LL_ADC_IsEnabled>
 800352c:	4603      	mov	r3, r0
 800352e:	4323      	orrs	r3, r4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4619      	mov	r1, r3
 800353a:	4862      	ldr	r0, [pc, #392]	; (80036c4 <HAL_ADC_Init+0x2a4>)
 800353c:	f7ff fd7a 	bl	8003034 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7d5b      	ldrb	r3, [r3, #21]
 8003544:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800354a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8003550:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	7f1b      	ldrb	r3, [r3, #28]
 8003556:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	7f1b      	ldrb	r3, [r3, #28]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d106      	bne.n	8003572 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	3b01      	subs	r3, #1
 800356a:	045b      	lsls	r3, r3, #17
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	4b4c      	ldr	r3, [pc, #304]	; (80036c8 <HAL_ADC_Init+0x2a8>)
 8003596:	4013      	ands	r3, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	69b9      	ldr	r1, [r7, #24]
 800359e:	430b      	orrs	r3, r1
 80035a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff14 	bl	80033d4 <LL_ADC_REG_IsConversionOngoing>
 80035ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff ff21 	bl	80033fa <LL_ADC_INJ_IsConversionOngoing>
 80035b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d14a      	bne.n	8003656 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d147      	bne.n	8003656 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7d1b      	ldrb	r3, [r3, #20]
 80035ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	4b3c      	ldr	r3, [pc, #240]	; (80036cc <HAL_ADC_Init+0x2ac>)
 80035dc:	4013      	ands	r3, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	69b9      	ldr	r1, [r7, #24]
 80035e4:	430b      	orrs	r3, r1
 80035e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d11b      	bne.n	800362a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <HAL_ADC_Init+0x2b0>)
 8003600:	4013      	ands	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003606:	3a01      	subs	r2, #1
 8003608:	0411      	lsls	r1, r2, #16
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800360e:	4311      	orrs	r1, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003614:	4311      	orrs	r1, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800361a:	430a      	orrs	r2, r1
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	611a      	str	r2, [r3, #16]
 8003628:	e007      	b.n	800363a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 ff79 	bl	8004548 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d10c      	bne.n	8003678 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	f023 010f 	bic.w	r1, r3, #15
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	1e5a      	subs	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	631a      	str	r2, [r3, #48]	; 0x30
 8003676:	e007      	b.n	8003688 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 020f 	bic.w	r2, r2, #15
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	f023 0303 	bic.w	r3, r3, #3
 8003690:	f043 0201 	orr.w	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
 8003698:	e007      	b.n	80036aa <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369e:	f043 0210 	orr.w	r2, r3, #16
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3724      	adds	r7, #36	; 0x24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd90      	pop	{r4, r7, pc}
 80036b4:	20000030 	.word	0x20000030
 80036b8:	053e2d63 	.word	0x053e2d63
 80036bc:	40022000 	.word	0x40022000
 80036c0:	40022100 	.word	0x40022100
 80036c4:	40022300 	.word	0x40022300
 80036c8:	fff0c003 	.word	0xfff0c003
 80036cc:	ffffbffc 	.word	0xffffbffc
 80036d0:	fc00f81e 	.word	0xfc00f81e

080036d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036dc:	4856      	ldr	r0, [pc, #344]	; (8003838 <HAL_ADC_Start+0x164>)
 80036de:	f7ff fdd3 	bl	8003288 <LL_ADC_GetMultimode>
 80036e2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fe73 	bl	80033d4 <LL_ADC_REG_IsConversionOngoing>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f040 809a 	bne.w	800382a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_Start+0x30>
 8003700:	2302      	movs	r3, #2
 8003702:	e095      	b.n	8003830 <HAL_ADC_Start+0x15c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fe9f 	bl	8004450 <ADC_Enable>
 8003712:	4603      	mov	r3, r0
 8003714:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 8081 	bne.w	8003820 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003722:	4b46      	ldr	r3, [pc, #280]	; (800383c <HAL_ADC_Start+0x168>)
 8003724:	4013      	ands	r3, r2
 8003726:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a43      	ldr	r2, [pc, #268]	; (8003840 <HAL_ADC_Start+0x16c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d002      	beq.n	800373e <HAL_ADC_Start+0x6a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	e000      	b.n	8003740 <HAL_ADC_Start+0x6c>
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_ADC_Start+0x170>)
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	4293      	cmp	r3, r2
 8003746:	d002      	beq.n	800374e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003766:	d106      	bne.n	8003776 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	f023 0206 	bic.w	r2, r3, #6
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	659a      	str	r2, [r3, #88]	; 0x58
 8003774:	e002      	b.n	800377c <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	221c      	movs	r2, #28
 8003782:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a2b      	ldr	r2, [pc, #172]	; (8003840 <HAL_ADC_Start+0x16c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d002      	beq.n	800379c <HAL_ADC_Start+0xc8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	e000      	b.n	800379e <HAL_ADC_Start+0xca>
 800379c:	4b29      	ldr	r3, [pc, #164]	; (8003844 <HAL_ADC_Start+0x170>)
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d008      	beq.n	80037b8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d002      	beq.n	80037b8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b09      	cmp	r3, #9
 80037b6:	d114      	bne.n	80037e2 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fde6 	bl	80033ac <LL_ADC_REG_StartConversion>
 80037e0:	e025      	b.n	800382e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a13      	ldr	r2, [pc, #76]	; (8003840 <HAL_ADC_Start+0x16c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d002      	beq.n	80037fe <HAL_ADC_Start+0x12a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	e000      	b.n	8003800 <HAL_ADC_Start+0x12c>
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_ADC_Start+0x170>)
 8003800:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00f      	beq.n	800382e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003812:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003816:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
 800381e:	e006      	b.n	800382e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003828:	e001      	b.n	800382e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800382a:	2302      	movs	r3, #2
 800382c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800382e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40022300 	.word	0x40022300
 800383c:	fffff0fe 	.word	0xfffff0fe
 8003840:	40022100 	.word	0x40022100
 8003844:	40022000 	.word	0x40022000

08003848 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003852:	4866      	ldr	r0, [pc, #408]	; (80039ec <HAL_ADC_PollForConversion+0x1a4>)
 8003854:	f7ff fd18 	bl	8003288 <LL_ADC_GetMultimode>
 8003858:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b08      	cmp	r3, #8
 8003860:	d102      	bne.n	8003868 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003862:	2308      	movs	r3, #8
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	e02a      	b.n	80038be <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d002      	beq.n	800387a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b09      	cmp	r3, #9
 8003878:	d111      	bne.n	800389e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	f043 0220 	orr.w	r2, r3, #32
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0a4      	b.n	80039e2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003898:	2304      	movs	r3, #4
 800389a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800389c:	e00f      	b.n	80038be <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800389e:	4853      	ldr	r0, [pc, #332]	; (80039ec <HAL_ADC_PollForConversion+0x1a4>)
 80038a0:	f7ff fd00 	bl	80032a4 <LL_ADC_GetMultiDMATransfer>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	f043 0220 	orr.w	r2, r3, #32
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e093      	b.n	80039e2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80038ba:	2304      	movs	r3, #4
 80038bc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80038be:	f7ff fb89 	bl	8002fd4 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80038c4:	e021      	b.n	800390a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d01d      	beq.n	800390a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80038ce:	f7ff fb81 	bl	8002fd4 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <HAL_ADC_PollForConversion+0x9c>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d112      	bne.n	800390a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10b      	bne.n	800390a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	f043 0204 	orr.w	r2, r3, #4
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e06b      	b.n	80039e2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0d6      	beq.n	80038c6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fc0b 	bl	8003144 <LL_ADC_REG_IsTriggerSourceSWStart>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01c      	beq.n	800396e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	7d5b      	ldrb	r3, [r3, #21]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d118      	bne.n	800396e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b08      	cmp	r3, #8
 8003948:	d111      	bne.n	800396e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d105      	bne.n	800396e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1f      	ldr	r2, [pc, #124]	; (80039f0 <HAL_ADC_PollForConversion+0x1a8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d002      	beq.n	800397e <HAL_ADC_PollForConversion+0x136>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	e000      	b.n	8003980 <HAL_ADC_PollForConversion+0x138>
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_ADC_PollForConversion+0x1ac>)
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	4293      	cmp	r3, r2
 8003986:	d008      	beq.n	800399a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b05      	cmp	r3, #5
 8003992:	d002      	beq.n	800399a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b09      	cmp	r3, #9
 8003998:	d104      	bne.n	80039a4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	e00c      	b.n	80039be <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <HAL_ADC_PollForConversion+0x1a8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d002      	beq.n	80039b4 <HAL_ADC_PollForConversion+0x16c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_PollForConversion+0x16e>
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <HAL_ADC_PollForConversion+0x1ac>)
 80039b6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d104      	bne.n	80039ce <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2208      	movs	r2, #8
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e008      	b.n	80039e0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	220c      	movs	r2, #12
 80039de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40022300 	.word	0x40022300
 80039f0:	40022100 	.word	0x40022100
 80039f4:	40022000 	.word	0x40022000

080039f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a30:	4882      	ldr	r0, [pc, #520]	; (8003c3c <HAL_ADC_IRQHandler+0x228>)
 8003a32:	f7ff fc29 	bl	8003288 <LL_ADC_GetMultimode>
 8003a36:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d017      	beq.n	8003a72 <HAL_ADC_IRQHandler+0x5e>
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d012      	beq.n	8003a72 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d105      	bne.n	8003a64 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fe89 	bl	800477c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <HAL_ADC_IRQHandler+0x72>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8083 	beq.w	8003b98 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d07d      	beq.n	8003b98 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d105      	bne.n	8003ab4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fb43 	bl	8003144 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d062      	beq.n	8003b8a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a5d      	ldr	r2, [pc, #372]	; (8003c40 <HAL_ADC_IRQHandler+0x22c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d002      	beq.n	8003ad4 <HAL_ADC_IRQHandler+0xc0>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	e000      	b.n	8003ad6 <HAL_ADC_IRQHandler+0xc2>
 8003ad4:	4b5b      	ldr	r3, [pc, #364]	; (8003c44 <HAL_ADC_IRQHandler+0x230>)
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d008      	beq.n	8003af0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b05      	cmp	r3, #5
 8003ae8:	d002      	beq.n	8003af0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b09      	cmp	r3, #9
 8003aee:	d104      	bne.n	8003afa <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	e00c      	b.n	8003b14 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a50      	ldr	r2, [pc, #320]	; (8003c40 <HAL_ADC_IRQHandler+0x22c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d002      	beq.n	8003b0a <HAL_ADC_IRQHandler+0xf6>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	e000      	b.n	8003b0c <HAL_ADC_IRQHandler+0xf8>
 8003b0a:	4b4e      	ldr	r3, [pc, #312]	; (8003c44 <HAL_ADC_IRQHandler+0x230>)
 8003b0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d135      	bne.n	8003b8a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d12e      	bne.n	8003b8a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fc4f 	bl	80033d4 <LL_ADC_REG_IsConversionOngoing>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d11a      	bne.n	8003b72 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 020c 	bic.w	r2, r2, #12
 8003b4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d112      	bne.n	8003b8a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b68:	f043 0201 	orr.w	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
 8003b70:	e00b      	b.n	8003b8a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f043 0210 	orr.w	r2, r3, #16
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f95c 	bl	8003e48 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	220c      	movs	r2, #12
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_ADC_IRQHandler+0x198>
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 809f 	beq.w	8003cf6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8099 	beq.w	8003cf6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff faee 	bl	80031c2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003be6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff faa9 	bl	8003144 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bf2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a11      	ldr	r2, [pc, #68]	; (8003c40 <HAL_ADC_IRQHandler+0x22c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d002      	beq.n	8003c04 <HAL_ADC_IRQHandler+0x1f0>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	e000      	b.n	8003c06 <HAL_ADC_IRQHandler+0x1f2>
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <HAL_ADC_IRQHandler+0x230>)
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d008      	beq.n	8003c20 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d002      	beq.n	8003c20 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b07      	cmp	r3, #7
 8003c1e:	d104      	bne.n	8003c2a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	623b      	str	r3, [r7, #32]
 8003c28:	e013      	b.n	8003c52 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <HAL_ADC_IRQHandler+0x22c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d009      	beq.n	8003c48 <HAL_ADC_IRQHandler+0x234>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	e007      	b.n	8003c4a <HAL_ADC_IRQHandler+0x236>
 8003c3a:	bf00      	nop
 8003c3c:	40022300 	.word	0x40022300
 8003c40:	40022100 	.word	0x40022100
 8003c44:	40022000 	.word	0x40022000
 8003c48:	4b7d      	ldr	r3, [pc, #500]	; (8003e40 <HAL_ADC_IRQHandler+0x42c>)
 8003c4a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d047      	beq.n	8003ce8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x25e>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d03f      	beq.n	8003ce8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d13a      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d133      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d12e      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fbb3 	bl	80033fa <LL_ADC_INJ_IsConversionOngoing>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11a      	bne.n	8003cd0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ca8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d112      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc6:	f043 0201 	orr.w	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	655a      	str	r2, [r3, #84]	; 0x54
 8003cce:	e00b      	b.n	8003ce8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	f043 0210 	orr.w	r2, r3, #16
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fd1f 	bl	800472c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2260      	movs	r2, #96	; 0x60
 8003cf4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d011      	beq.n	8003d24 <HAL_ADC_IRQHandler+0x310>
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00c      	beq.n	8003d24 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f8a0 	bl	8003e5c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d012      	beq.n	8003d54 <HAL_ADC_IRQHandler+0x340>
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00d      	beq.n	8003d54 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fd05 	bl	8004754 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d012      	beq.n	8003d84 <HAL_ADC_IRQHandler+0x370>
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00d      	beq.n	8003d84 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fcf7 	bl	8004768 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d036      	beq.n	8003dfc <HAL_ADC_IRQHandler+0x3e8>
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d031      	beq.n	8003dfc <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003da0:	2301      	movs	r3, #1
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
 8003da4:	e014      	b.n	8003dd0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003dac:	4825      	ldr	r0, [pc, #148]	; (8003e44 <HAL_ADC_IRQHandler+0x430>)
 8003dae:	f7ff fa79 	bl	80032a4 <LL_ADC_GetMultiDMATransfer>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00b      	beq.n	8003dd0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003db8:	2301      	movs	r3, #1
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbc:	e008      	b.n	8003dd0 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d10e      	bne.n	8003df4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de6:	f043 0202 	orr.w	r2, r3, #2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f83e 	bl	8003e70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2210      	movs	r2, #16
 8003dfa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d018      	beq.n	8003e38 <HAL_ADC_IRQHandler+0x424>
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d013      	beq.n	8003e38 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	f043 0208 	orr.w	r2, r3, #8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e30:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fc84 	bl	8004740 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003e38:	bf00      	nop
 8003e3a:	3728      	adds	r7, #40	; 0x28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40022000 	.word	0x40022000
 8003e44:	40022300 	.word	0x40022300

08003e48 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b0a1      	sub	sp, #132	; 0x84
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a9a      	ldr	r2, [pc, #616]	; (8004108 <HAL_ADC_ConfigChannel+0x284>)
 8003e9e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x2a>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e2bc      	b.n	8004428 <HAL_ADC_ConfigChannel+0x5a4>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fa8a 	bl	80033d4 <LL_ADC_REG_IsConversionOngoing>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 82a1 	bne.w	800440a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d108      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x62>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	0e9b      	lsrs	r3, r3, #26
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2201      	movs	r2, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	e016      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x90>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ef8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003efe:	2320      	movs	r3, #32
 8003f00:	e003      	b.n	8003f0a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f04:	fab3 f383 	clz	r3, r3
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f003 031f 	and.w	r3, r3, #31
 8003f0e:	2201      	movs	r2, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	69d1      	ldr	r1, [r2, #28]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f7ff f91b 	bl	800316a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fa4b 	bl	80033d4 <LL_ADC_REG_IsConversionOngoing>
 8003f3e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fa58 	bl	80033fa <LL_ADC_INJ_IsConversionOngoing>
 8003f4a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 80a0 	bne.w	8004094 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 809c 	bne.w	8004094 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6819      	ldr	r1, [r3, #0]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f7ff f93d 	bl	80031e8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10b      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x110>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	089b      	lsrs	r3, r3, #2
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	e00a      	b.n	8003faa <HAL_ADC_ConfigChannel+0x126>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695a      	ldr	r2, [r3, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d027      	beq.n	8004004 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6919      	ldr	r1, [r3, #16]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fc2:	f7ff f86b 	bl	800309c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6919      	ldr	r1, [r3, #16]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	7e5b      	ldrb	r3, [r3, #25]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d102      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x158>
 8003fd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fda:	e000      	b.n	8003fde <HAL_ADC_ConfigChannel+0x15a>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f7ff f895 	bl	800310e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6919      	ldr	r1, [r3, #16]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	7e1b      	ldrb	r3, [r3, #24]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d102      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x176>
 8003ff4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ff8:	e000      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x178>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f7ff f86d 	bl	80030dc <LL_ADC_SetDataRightShift>
 8004002:	e047      	b.n	8004094 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	069b      	lsls	r3, r3, #26
 8004014:	429a      	cmp	r2, r3
 8004016:	d107      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004026:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800402e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	069b      	lsls	r3, r3, #26
 8004038:	429a      	cmp	r2, r3
 800403a:	d107      	bne.n	800404c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800404a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	069b      	lsls	r3, r3, #26
 800405c:	429a      	cmp	r2, r3
 800405e:	d107      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800406e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	069b      	lsls	r3, r3, #26
 8004080:	429a      	cmp	r2, r3
 8004082:	d107      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004092:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff f973 	bl	8003384 <LL_ADC_IsEnabled>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 81bb 	bne.w	800441c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6819      	ldr	r1, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f7ff f8c4 	bl	8003240 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a12      	ldr	r2, [pc, #72]	; (8004108 <HAL_ADC_ConfigChannel+0x284>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	f040 8130 	bne.w	8004324 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x268>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	0e9b      	lsrs	r3, r3, #26
 80040da:	3301      	adds	r3, #1
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	2b09      	cmp	r3, #9
 80040e2:	bf94      	ite	ls
 80040e4:	2301      	movls	r3, #1
 80040e6:	2300      	movhi	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e01b      	b.n	8004124 <HAL_ADC_ConfigChannel+0x2a0>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040f4:	fa93 f3a3 	rbit	r3, r3
 80040f8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80040fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80040fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8004104:	2320      	movs	r3, #32
 8004106:	e005      	b.n	8004114 <HAL_ADC_ConfigChannel+0x290>
 8004108:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 800410c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410e:	fab3 f383 	clz	r3, r3
 8004112:	b2db      	uxtb	r3, r3
 8004114:	3301      	adds	r3, #1
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	2b09      	cmp	r3, #9
 800411c:	bf94      	ite	ls
 800411e:	2301      	movls	r3, #1
 8004120:	2300      	movhi	r3, #0
 8004122:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004124:	2b00      	cmp	r3, #0
 8004126:	d079      	beq.n	800421c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004130:	2b00      	cmp	r3, #0
 8004132:	d107      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x2c0>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0e9b      	lsrs	r3, r3, #26
 800413a:	3301      	adds	r3, #1
 800413c:	069b      	lsls	r3, r3, #26
 800413e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004142:	e015      	b.n	8004170 <HAL_ADC_ConfigChannel+0x2ec>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414c:	fa93 f3a3 	rbit	r3, r3
 8004150:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004154:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800415c:	2320      	movs	r3, #32
 800415e:	e003      	b.n	8004168 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8004160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	3301      	adds	r3, #1
 800416a:	069b      	lsls	r3, r3, #26
 800416c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x30c>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	0e9b      	lsrs	r3, r3, #26
 8004182:	3301      	adds	r3, #1
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2101      	movs	r1, #1
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	e017      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x33c>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800419e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80041a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80041a8:	2320      	movs	r3, #32
 80041aa:	e003      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80041ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	3301      	adds	r3, #1
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	2101      	movs	r1, #1
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	ea42 0103 	orr.w	r1, r2, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x362>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	0e9b      	lsrs	r3, r3, #26
 80041d6:	3301      	adds	r3, #1
 80041d8:	f003 021f 	and.w	r2, r3, #31
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	051b      	lsls	r3, r3, #20
 80041e4:	e018      	b.n	8004218 <HAL_ADC_ConfigChannel+0x394>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80041fe:	2320      	movs	r3, #32
 8004200:	e003      	b.n	800420a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	fab3 f383 	clz	r3, r3
 8004208:	b2db      	uxtb	r3, r3
 800420a:	3301      	adds	r3, #1
 800420c:	f003 021f 	and.w	r2, r3, #31
 8004210:	4613      	mov	r3, r2
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	4413      	add	r3, r2
 8004216:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004218:	430b      	orrs	r3, r1
 800421a:	e07e      	b.n	800431a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004224:	2b00      	cmp	r3, #0
 8004226:	d107      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x3b4>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	3301      	adds	r3, #1
 8004230:	069b      	lsls	r3, r3, #26
 8004232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004236:	e015      	b.n	8004264 <HAL_ADC_ConfigChannel+0x3e0>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004250:	2320      	movs	r3, #32
 8004252:	e003      	b.n	800425c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	3301      	adds	r3, #1
 800425e:	069b      	lsls	r3, r3, #26
 8004260:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x400>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	0e9b      	lsrs	r3, r3, #26
 8004276:	3301      	adds	r3, #1
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	2101      	movs	r1, #1
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	e017      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x430>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	fa93 f3a3 	rbit	r3, r3
 8004290:	61bb      	str	r3, [r7, #24]
  return result;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800429c:	2320      	movs	r3, #32
 800429e:	e003      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	3301      	adds	r3, #1
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	2101      	movs	r1, #1
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	ea42 0103 	orr.w	r1, r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10d      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x45c>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	0e9b      	lsrs	r3, r3, #26
 80042ca:	3301      	adds	r3, #1
 80042cc:	f003 021f 	and.w	r2, r3, #31
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	3b1e      	subs	r3, #30
 80042d8:	051b      	lsls	r3, r3, #20
 80042da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042de:	e01b      	b.n	8004318 <HAL_ADC_ConfigChannel+0x494>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	fa93 f3a3 	rbit	r3, r3
 80042ec:	60fb      	str	r3, [r7, #12]
  return result;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80042f8:	2320      	movs	r3, #32
 80042fa:	e003      	b.n	8004304 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	3301      	adds	r3, #1
 8004306:	f003 021f 	and.w	r2, r3, #31
 800430a:	4613      	mov	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	4413      	add	r3, r2
 8004310:	3b1e      	subs	r3, #30
 8004312:	051b      	lsls	r3, r3, #20
 8004314:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004318:	430b      	orrs	r3, r1
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	6892      	ldr	r2, [r2, #8]
 800431e:	4619      	mov	r1, r3
 8004320:	f7fe ff62 	bl	80031e8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	da77      	bge.n	800441c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800432c:	4840      	ldr	r0, [pc, #256]	; (8004430 <HAL_ADC_ConfigChannel+0x5ac>)
 800432e:	f7fe fea7 	bl	8003080 <LL_ADC_GetCommonPathInternalCh>
 8004332:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004334:	483f      	ldr	r0, [pc, #252]	; (8004434 <HAL_ADC_ConfigChannel+0x5b0>)
 8004336:	f7ff f825 	bl	8003384 <LL_ADC_IsEnabled>
 800433a:	4604      	mov	r4, r0
 800433c:	483e      	ldr	r0, [pc, #248]	; (8004438 <HAL_ADC_ConfigChannel+0x5b4>)
 800433e:	f7ff f821 	bl	8003384 <LL_ADC_IsEnabled>
 8004342:	4603      	mov	r3, r0
 8004344:	4323      	orrs	r3, r4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d155      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3b      	ldr	r2, [pc, #236]	; (800443c <HAL_ADC_ConfigChannel+0x5b8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d122      	bne.n	800439a <HAL_ADC_ConfigChannel+0x516>
 8004354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d11d      	bne.n	800439a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a35      	ldr	r2, [pc, #212]	; (8004438 <HAL_ADC_ConfigChannel+0x5b4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d159      	bne.n	800441c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800436e:	4619      	mov	r1, r3
 8004370:	482f      	ldr	r0, [pc, #188]	; (8004430 <HAL_ADC_ConfigChannel+0x5ac>)
 8004372:	f7fe fe72 	bl	800305a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004376:	4b32      	ldr	r3, [pc, #200]	; (8004440 <HAL_ADC_ConfigChannel+0x5bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	099b      	lsrs	r3, r3, #6
 800437c:	4a31      	ldr	r2, [pc, #196]	; (8004444 <HAL_ADC_ConfigChannel+0x5c0>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	099b      	lsrs	r3, r3, #6
 8004384:	3301      	adds	r3, #1
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800438a:	e002      	b.n	8004392 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	3b01      	subs	r3, #1
 8004390:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f9      	bne.n	800438c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004398:	e040      	b.n	800441c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a2a      	ldr	r2, [pc, #168]	; (8004448 <HAL_ADC_ConfigChannel+0x5c4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d111      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x544>
 80043a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10c      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a21      	ldr	r2, [pc, #132]	; (8004438 <HAL_ADC_ConfigChannel+0x5b4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d131      	bne.n	800441c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80043b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043be:	4619      	mov	r1, r3
 80043c0:	481b      	ldr	r0, [pc, #108]	; (8004430 <HAL_ADC_ConfigChannel+0x5ac>)
 80043c2:	f7fe fe4a 	bl	800305a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043c6:	e029      	b.n	800441c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1f      	ldr	r2, [pc, #124]	; (800444c <HAL_ADC_ConfigChannel+0x5c8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d124      	bne.n	800441c <HAL_ADC_ConfigChannel+0x598>
 80043d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d11f      	bne.n	800441c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <HAL_ADC_ConfigChannel+0x5b4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d11a      	bne.n	800441c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80043e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043ec:	4619      	mov	r1, r3
 80043ee:	4810      	ldr	r0, [pc, #64]	; (8004430 <HAL_ADC_ConfigChannel+0x5ac>)
 80043f0:	f7fe fe33 	bl	800305a <LL_ADC_SetCommonPathInternalCh>
 80043f4:	e012      	b.n	800441c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004408:	e008      	b.n	800441c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	f043 0220 	orr.w	r2, r3, #32
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004424:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004428:	4618      	mov	r0, r3
 800442a:	3784      	adds	r7, #132	; 0x84
 800442c:	46bd      	mov	sp, r7
 800442e:	bd90      	pop	{r4, r7, pc}
 8004430:	40022300 	.word	0x40022300
 8004434:	40022000 	.word	0x40022000
 8004438:	40022100 	.word	0x40022100
 800443c:	cb840000 	.word	0xcb840000
 8004440:	20000030 	.word	0x20000030
 8004444:	053e2d63 	.word	0x053e2d63
 8004448:	bac04000 	.word	0xbac04000
 800444c:	cfb80000 	.word	0xcfb80000

08004450 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe ff91 	bl	8003384 <LL_ADC_IsEnabled>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d161      	bne.n	800452c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	4b32      	ldr	r3, [pc, #200]	; (8004538 <ADC_Enable+0xe8>)
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f043 0210 	orr.w	r2, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	f043 0201 	orr.w	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e04d      	b.n	800452e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe ff60 	bl	800335c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800449c:	f7fe fd9a 	bl	8002fd4 <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044a2:	4826      	ldr	r0, [pc, #152]	; (800453c <ADC_Enable+0xec>)
 80044a4:	f7fe fef0 	bl	8003288 <LL_ADC_GetMultimode>
 80044a8:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a24      	ldr	r2, [pc, #144]	; (8004540 <ADC_Enable+0xf0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d002      	beq.n	80044ba <ADC_Enable+0x6a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	e000      	b.n	80044bc <ADC_Enable+0x6c>
 80044ba:	4b22      	ldr	r3, [pc, #136]	; (8004544 <ADC_Enable+0xf4>)
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d02c      	beq.n	800451e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d130      	bne.n	800452c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044ca:	e028      	b.n	800451e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fe ff57 	bl	8003384 <LL_ADC_IsEnabled>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe ff3b 	bl	800335c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044e6:	f7fe fd75 	bl	8002fd4 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d914      	bls.n	800451e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d00d      	beq.n	800451e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	f043 0210 	orr.w	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	f043 0201 	orr.w	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e007      	b.n	800452e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b01      	cmp	r3, #1
 800452a:	d1cf      	bne.n	80044cc <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	8000003f 	.word	0x8000003f
 800453c:	40022300 	.word	0x40022300
 8004540:	40022100 	.word	0x40022100
 8004544:	40022000 	.word	0x40022000

08004548 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004550:	4b5f      	ldr	r3, [pc, #380]	; (80046d0 <ADC_ConfigureBoostMode+0x188>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01c      	beq.n	8004596 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800455c:	f006 fc3c 	bl	800add8 <HAL_RCC_GetHCLKFreq>
 8004560:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800456a:	d010      	beq.n	800458e <ADC_ConfigureBoostMode+0x46>
 800456c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004570:	d871      	bhi.n	8004656 <ADC_ConfigureBoostMode+0x10e>
 8004572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004576:	d002      	beq.n	800457e <ADC_ConfigureBoostMode+0x36>
 8004578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800457c:	d16b      	bne.n	8004656 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	0c1b      	lsrs	r3, r3, #16
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	60fb      	str	r3, [r7, #12]
        break;
 800458c:	e066      	b.n	800465c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	60fb      	str	r3, [r7, #12]
        break;
 8004594:	e062      	b.n	800465c <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004596:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800459a:	f007 fb59 	bl	800bc50 <HAL_RCCEx_GetPeriphCLKFreq>
 800459e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80045a8:	d051      	beq.n	800464e <ADC_ConfigureBoostMode+0x106>
 80045aa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80045ae:	d854      	bhi.n	800465a <ADC_ConfigureBoostMode+0x112>
 80045b0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80045b4:	d047      	beq.n	8004646 <ADC_ConfigureBoostMode+0xfe>
 80045b6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80045ba:	d84e      	bhi.n	800465a <ADC_ConfigureBoostMode+0x112>
 80045bc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80045c0:	d03d      	beq.n	800463e <ADC_ConfigureBoostMode+0xf6>
 80045c2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80045c6:	d848      	bhi.n	800465a <ADC_ConfigureBoostMode+0x112>
 80045c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045cc:	d033      	beq.n	8004636 <ADC_ConfigureBoostMode+0xee>
 80045ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045d2:	d842      	bhi.n	800465a <ADC_ConfigureBoostMode+0x112>
 80045d4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80045d8:	d029      	beq.n	800462e <ADC_ConfigureBoostMode+0xe6>
 80045da:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80045de:	d83c      	bhi.n	800465a <ADC_ConfigureBoostMode+0x112>
 80045e0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80045e4:	d01a      	beq.n	800461c <ADC_ConfigureBoostMode+0xd4>
 80045e6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80045ea:	d836      	bhi.n	800465a <ADC_ConfigureBoostMode+0x112>
 80045ec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80045f0:	d014      	beq.n	800461c <ADC_ConfigureBoostMode+0xd4>
 80045f2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80045f6:	d830      	bhi.n	800465a <ADC_ConfigureBoostMode+0x112>
 80045f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fc:	d00e      	beq.n	800461c <ADC_ConfigureBoostMode+0xd4>
 80045fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004602:	d82a      	bhi.n	800465a <ADC_ConfigureBoostMode+0x112>
 8004604:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004608:	d008      	beq.n	800461c <ADC_ConfigureBoostMode+0xd4>
 800460a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800460e:	d824      	bhi.n	800465a <ADC_ConfigureBoostMode+0x112>
 8004610:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004614:	d002      	beq.n	800461c <ADC_ConfigureBoostMode+0xd4>
 8004616:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800461a:	d11e      	bne.n	800465a <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	0c9b      	lsrs	r3, r3, #18
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	fbb2 f3f3 	udiv	r3, r2, r3
 800462a:	60fb      	str	r3, [r7, #12]
        break;
 800462c:	e016      	b.n	800465c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	60fb      	str	r3, [r7, #12]
        break;
 8004634:	e012      	b.n	800465c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	60fb      	str	r3, [r7, #12]
        break;
 800463c:	e00e      	b.n	800465c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	099b      	lsrs	r3, r3, #6
 8004642:	60fb      	str	r3, [r7, #12]
        break;
 8004644:	e00a      	b.n	800465c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	09db      	lsrs	r3, r3, #7
 800464a:	60fb      	str	r3, [r7, #12]
        break;
 800464c:	e006      	b.n	800465c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	60fb      	str	r3, [r7, #12]
        break;
 8004654:	e002      	b.n	800465c <ADC_ConfigureBoostMode+0x114>
        break;
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 800465a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a1b      	ldr	r2, [pc, #108]	; (80046d4 <ADC_ConfigureBoostMode+0x18c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d808      	bhi.n	800467c <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004678:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800467a:	e025      	b.n	80046c8 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <ADC_ConfigureBoostMode+0x190>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d80a      	bhi.n	800469a <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004696:	609a      	str	r2, [r3, #8]
}
 8004698:	e016      	b.n	80046c8 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4a0f      	ldr	r2, [pc, #60]	; (80046dc <ADC_ConfigureBoostMode+0x194>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d80a      	bhi.n	80046b8 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b4:	609a      	str	r2, [r3, #8]
}
 80046b6:	e007      	b.n	80046c8 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80046c6:	609a      	str	r2, [r3, #8]
}
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40022300 	.word	0x40022300
 80046d4:	005f5e10 	.word	0x005f5e10
 80046d8:	00bebc20 	.word	0x00bebc20
 80046dc:	017d7840 	.word	0x017d7840

080046e0 <LL_ADC_IsEnabled>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <LL_ADC_IsEnabled+0x18>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <LL_ADC_IsEnabled+0x1a>
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <LL_ADC_REG_IsConversionOngoing>:
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d101      	bne.n	800471e <LL_ADC_REG_IsConversionOngoing+0x18>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b09f      	sub	sp, #124	; 0x7c
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e080      	b.n	80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80047b6:	2300      	movs	r3, #0
 80047b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a3d      	ldr	r2, [pc, #244]	; (80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d102      	bne.n	80047ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047c8:	4b3c      	ldr	r3, [pc, #240]	; (80048bc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	e001      	b.n	80047d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e05f      	b.n	80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff ff87 	bl	8004706 <LL_ADC_REG_IsConversionOngoing>
 80047f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff ff81 	bl	8004706 <LL_ADC_REG_IsConversionOngoing>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d141      	bne.n	800488e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800480a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800480c:	2b00      	cmp	r3, #0
 800480e:	d13e      	bne.n	800488e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004810:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8004812:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d020      	beq.n	800485e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800481c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	431a      	orrs	r2, r3
 800482a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800482e:	4822      	ldr	r0, [pc, #136]	; (80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8004830:	f7ff ff56 	bl	80046e0 <LL_ADC_IsEnabled>
 8004834:	4604      	mov	r4, r0
 8004836:	4821      	ldr	r0, [pc, #132]	; (80048bc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8004838:	f7ff ff52 	bl	80046e0 <LL_ADC_IsEnabled>
 800483c:	4603      	mov	r3, r0
 800483e:	4323      	orrs	r3, r4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d12e      	bne.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800484a:	4013      	ands	r3, r2
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	6811      	ldr	r1, [r2, #0]
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	6892      	ldr	r2, [r2, #8]
 8004854:	430a      	orrs	r2, r1
 8004856:	431a      	orrs	r2, r3
 8004858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800485c:	e021      	b.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800485e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004868:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800486a:	4813      	ldr	r0, [pc, #76]	; (80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800486c:	f7ff ff38 	bl	80046e0 <LL_ADC_IsEnabled>
 8004870:	4604      	mov	r4, r0
 8004872:	4812      	ldr	r0, [pc, #72]	; (80048bc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8004874:	f7ff ff34 	bl	80046e0 <LL_ADC_IsEnabled>
 8004878:	4603      	mov	r3, r0
 800487a:	4323      	orrs	r3, r4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d110      	bne.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8004886:	4013      	ands	r3, r2
 8004888:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800488a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800488c:	e009      	b.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	f043 0220 	orr.w	r2, r3, #32
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80048a0:	e000      	b.n	80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048a2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80048ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	377c      	adds	r7, #124	; 0x7c
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd90      	pop	{r4, r7, pc}
 80048b8:	40022000 	.word	0x40022000
 80048bc:	40022100 	.word	0x40022100
 80048c0:	40022300 	.word	0x40022300
 80048c4:	fffff0e0 	.word	0xfffff0e0

080048c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <__NVIC_SetPriorityGrouping+0x40>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048e4:	4013      	ands	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <__NVIC_SetPriorityGrouping+0x44>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048f6:	4a04      	ldr	r2, [pc, #16]	; (8004908 <__NVIC_SetPriorityGrouping+0x40>)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	60d3      	str	r3, [r2, #12]
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	e000ed00 	.word	0xe000ed00
 800490c:	05fa0000 	.word	0x05fa0000

08004910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004914:	4b04      	ldr	r3, [pc, #16]	; (8004928 <__NVIC_GetPriorityGrouping+0x18>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	f003 0307 	and.w	r3, r3, #7
}
 800491e:	4618      	mov	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	e000ed00 	.word	0xe000ed00

0800492c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800493a:	2b00      	cmp	r3, #0
 800493c:	db0b      	blt.n	8004956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	f003 021f 	and.w	r2, r3, #31
 8004944:	4907      	ldr	r1, [pc, #28]	; (8004964 <__NVIC_EnableIRQ+0x38>)
 8004946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	2001      	movs	r0, #1
 800494e:	fa00 f202 	lsl.w	r2, r0, r2
 8004952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	e000e100 	.word	0xe000e100

08004968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004974:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004978:	2b00      	cmp	r3, #0
 800497a:	db0a      	blt.n	8004992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	b2da      	uxtb	r2, r3
 8004980:	490c      	ldr	r1, [pc, #48]	; (80049b4 <__NVIC_SetPriority+0x4c>)
 8004982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004986:	0112      	lsls	r2, r2, #4
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	440b      	add	r3, r1
 800498c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004990:	e00a      	b.n	80049a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	4908      	ldr	r1, [pc, #32]	; (80049b8 <__NVIC_SetPriority+0x50>)
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	3b04      	subs	r3, #4
 80049a0:	0112      	lsls	r2, r2, #4
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	440b      	add	r3, r1
 80049a6:	761a      	strb	r2, [r3, #24]
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000e100 	.word	0xe000e100
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049bc:	b480      	push	{r7}
 80049be:	b089      	sub	sp, #36	; 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f1c3 0307 	rsb	r3, r3, #7
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	bf28      	it	cs
 80049da:	2304      	movcs	r3, #4
 80049dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3304      	adds	r3, #4
 80049e2:	2b06      	cmp	r3, #6
 80049e4:	d902      	bls.n	80049ec <NVIC_EncodePriority+0x30>
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3b03      	subs	r3, #3
 80049ea:	e000      	b.n	80049ee <NVIC_EncodePriority+0x32>
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43da      	mvns	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	401a      	ands	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a04:	f04f 31ff 	mov.w	r1, #4294967295
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	43d9      	mvns	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a14:	4313      	orrs	r3, r2
         );
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3724      	adds	r7, #36	; 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004a28:	f3bf 8f4f 	dsb	sy
}
 8004a2c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004a2e:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <__NVIC_SystemReset+0x24>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004a36:	4904      	ldr	r1, [pc, #16]	; (8004a48 <__NVIC_SystemReset+0x24>)
 8004a38:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <__NVIC_SystemReset+0x28>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a3e:	f3bf 8f4f 	dsb	sy
}
 8004a42:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004a44:	bf00      	nop
 8004a46:	e7fd      	b.n	8004a44 <__NVIC_SystemReset+0x20>
 8004a48:	e000ed00 	.word	0xe000ed00
 8004a4c:	05fa0004 	.word	0x05fa0004

08004a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a60:	d301      	bcc.n	8004a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a62:	2301      	movs	r3, #1
 8004a64:	e00f      	b.n	8004a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a66:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <SysTick_Config+0x40>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a6e:	210f      	movs	r1, #15
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	f7ff ff78 	bl	8004968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <SysTick_Config+0x40>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a7e:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <SysTick_Config+0x40>)
 8004a80:	2207      	movs	r2, #7
 8004a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	e000e010 	.word	0xe000e010

08004a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ff13 	bl	80048c8 <__NVIC_SetPriorityGrouping>
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b086      	sub	sp, #24
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ab8:	f7ff ff2a 	bl	8004910 <__NVIC_GetPriorityGrouping>
 8004abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f7ff ff7a 	bl	80049bc <NVIC_EncodePriority>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff ff49 	bl	8004968 <__NVIC_SetPriority>
}
 8004ad6:	bf00      	nop
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff ff1d 	bl	800492c <__NVIC_EnableIRQ>
}
 8004af2:	bf00      	nop
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004afe:	f7ff ff91 	bl	8004a24 <__NVIC_SystemReset>

08004b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b082      	sub	sp, #8
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff ffa0 	bl	8004a50 <SysTick_Config>
 8004b10:	4603      	mov	r3, r0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e014      	b.n	8004b56 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	791b      	ldrb	r3, [r3, #4]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d105      	bne.n	8004b42 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fd fb9d 	bl	800227c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	795b      	ldrb	r3, [r3, #5]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_DAC_Start+0x16>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e040      	b.n	8004bf6 <HAL_DAC_Start+0x98>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6819      	ldr	r1, [r3, #0]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10f      	bne.n	8004bbe <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d11d      	bne.n	8004be8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	e014      	b.n	8004be8 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2102      	movs	r1, #2
 8004bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d107      	bne.n	8004be8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0202 	orr.w	r2, r2, #2
 8004be6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b087      	sub	sp, #28
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d105      	bne.n	8004c2c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4413      	add	r3, r2
 8004c26:	3308      	adds	r3, #8
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	e004      	b.n	8004c36 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	3314      	adds	r3, #20
 8004c34:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	795b      	ldrb	r3, [r3, #5]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_DAC_ConfigChannel+0x18>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e11d      	b.n	8004ea0 <HAL_DAC_ConfigChannel+0x254>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d174      	bne.n	8004d62 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004c78:	f7fe f9ac 	bl	8002fd4 <HAL_GetTick>
 8004c7c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d134      	bne.n	8004cee <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c84:	e011      	b.n	8004caa <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c86:	f7fe f9a5 	bl	8002fd4 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d90a      	bls.n	8004caa <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f043 0208 	orr.w	r2, r3, #8
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e0fa      	b.n	8004ea0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb0:	4b7d      	ldr	r3, [pc, #500]	; (8004ea8 <HAL_DAC_ConfigChannel+0x25c>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e6      	bne.n	8004c86 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004cb8:	2001      	movs	r0, #1
 8004cba:	f7fe f997 	bl	8002fec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	6992      	ldr	r2, [r2, #24]
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8004cc8:	e01e      	b.n	8004d08 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004cca:	f7fe f983 	bl	8002fd4 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d90a      	bls.n	8004cee <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f043 0208 	orr.w	r2, r3, #8
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e0d8      	b.n	8004ea0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	dbe8      	blt.n	8004cca <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	f7fe f977 	bl	8002fec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	6992      	ldr	r2, [r2, #24]
 8004d06:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004d18:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	ea02 0103 	and.w	r1, r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f003 0310 	and.w	r3, r3, #16
 8004d42:	21ff      	movs	r1, #255	; 0xff
 8004d44:	fa01 f303 	lsl.w	r3, r1, r3
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	ea02 0103 	and.w	r1, r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6a1a      	ldr	r2, [r3, #32]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d11d      	bne.n	8004da6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	221f      	movs	r2, #31
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4013      	ands	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dac:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	2207      	movs	r2, #7
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d102      	bne.n	8004dd0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e00f      	b.n	8004df0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d102      	bne.n	8004dde <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	e008      	b.n	8004df0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e001      	b.n	8004df0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f003 0310 	and.w	r3, r3, #16
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6819      	ldr	r1, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43da      	mvns	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	400a      	ands	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4013      	ands	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6819      	ldr	r1, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	22c0      	movs	r2, #192	; 0xc0
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	400a      	ands	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3720      	adds	r7, #32
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20008000 	.word	0x20008000

08004eac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004eb4:	f7fe f88e 	bl	8002fd4 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e37f      	b.n	80055c4 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a66      	ldr	r2, [pc, #408]	; (8005064 <HAL_DMA_Init+0x1b8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d04a      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a65      	ldr	r2, [pc, #404]	; (8005068 <HAL_DMA_Init+0x1bc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d045      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a63      	ldr	r2, [pc, #396]	; (800506c <HAL_DMA_Init+0x1c0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d040      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a62      	ldr	r2, [pc, #392]	; (8005070 <HAL_DMA_Init+0x1c4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d03b      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a60      	ldr	r2, [pc, #384]	; (8005074 <HAL_DMA_Init+0x1c8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d036      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a5f      	ldr	r2, [pc, #380]	; (8005078 <HAL_DMA_Init+0x1cc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d031      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a5d      	ldr	r2, [pc, #372]	; (800507c <HAL_DMA_Init+0x1d0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d02c      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a5c      	ldr	r2, [pc, #368]	; (8005080 <HAL_DMA_Init+0x1d4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d027      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a5a      	ldr	r2, [pc, #360]	; (8005084 <HAL_DMA_Init+0x1d8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d022      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a59      	ldr	r2, [pc, #356]	; (8005088 <HAL_DMA_Init+0x1dc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d01d      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a57      	ldr	r2, [pc, #348]	; (800508c <HAL_DMA_Init+0x1e0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d018      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a56      	ldr	r2, [pc, #344]	; (8005090 <HAL_DMA_Init+0x1e4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d013      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a54      	ldr	r2, [pc, #336]	; (8005094 <HAL_DMA_Init+0x1e8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00e      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a53      	ldr	r2, [pc, #332]	; (8005098 <HAL_DMA_Init+0x1ec>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d009      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a51      	ldr	r2, [pc, #324]	; (800509c <HAL_DMA_Init+0x1f0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d004      	beq.n	8004f64 <HAL_DMA_Init+0xb8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a50      	ldr	r2, [pc, #320]	; (80050a0 <HAL_DMA_Init+0x1f4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d101      	bne.n	8004f68 <HAL_DMA_Init+0xbc>
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <HAL_DMA_Init+0xbe>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 813c 	beq.w	80051e8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a37      	ldr	r2, [pc, #220]	; (8005064 <HAL_DMA_Init+0x1b8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d04a      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a36      	ldr	r2, [pc, #216]	; (8005068 <HAL_DMA_Init+0x1bc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d045      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a34      	ldr	r2, [pc, #208]	; (800506c <HAL_DMA_Init+0x1c0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d040      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a33      	ldr	r2, [pc, #204]	; (8005070 <HAL_DMA_Init+0x1c4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d03b      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a31      	ldr	r2, [pc, #196]	; (8005074 <HAL_DMA_Init+0x1c8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d036      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a30      	ldr	r2, [pc, #192]	; (8005078 <HAL_DMA_Init+0x1cc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d031      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a2e      	ldr	r2, [pc, #184]	; (800507c <HAL_DMA_Init+0x1d0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d02c      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2d      	ldr	r2, [pc, #180]	; (8005080 <HAL_DMA_Init+0x1d4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d027      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2b      	ldr	r2, [pc, #172]	; (8005084 <HAL_DMA_Init+0x1d8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d022      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a2a      	ldr	r2, [pc, #168]	; (8005088 <HAL_DMA_Init+0x1dc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d01d      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a28      	ldr	r2, [pc, #160]	; (800508c <HAL_DMA_Init+0x1e0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d018      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a27      	ldr	r2, [pc, #156]	; (8005090 <HAL_DMA_Init+0x1e4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d013      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a25      	ldr	r2, [pc, #148]	; (8005094 <HAL_DMA_Init+0x1e8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00e      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a24      	ldr	r2, [pc, #144]	; (8005098 <HAL_DMA_Init+0x1ec>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d009      	beq.n	8005020 <HAL_DMA_Init+0x174>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a22      	ldr	r2, [pc, #136]	; (800509c <HAL_DMA_Init+0x1f0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_DMA_Init+0x174>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a21      	ldr	r2, [pc, #132]	; (80050a0 <HAL_DMA_Init+0x1f4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d108      	bne.n	8005032 <HAL_DMA_Init+0x186>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e007      	b.n	8005042 <HAL_DMA_Init+0x196>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0201 	bic.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005042:	e02f      	b.n	80050a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005044:	f7fd ffc6 	bl	8002fd4 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b05      	cmp	r3, #5
 8005050:	d928      	bls.n	80050a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2203      	movs	r2, #3
 800505c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e2af      	b.n	80055c4 <HAL_DMA_Init+0x718>
 8005064:	40020010 	.word	0x40020010
 8005068:	40020028 	.word	0x40020028
 800506c:	40020040 	.word	0x40020040
 8005070:	40020058 	.word	0x40020058
 8005074:	40020070 	.word	0x40020070
 8005078:	40020088 	.word	0x40020088
 800507c:	400200a0 	.word	0x400200a0
 8005080:	400200b8 	.word	0x400200b8
 8005084:	40020410 	.word	0x40020410
 8005088:	40020428 	.word	0x40020428
 800508c:	40020440 	.word	0x40020440
 8005090:	40020458 	.word	0x40020458
 8005094:	40020470 	.word	0x40020470
 8005098:	40020488 	.word	0x40020488
 800509c:	400204a0 	.word	0x400204a0
 80050a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1c8      	bne.n	8005044 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4b73      	ldr	r3, [pc, #460]	; (800528c <HAL_DMA_Init+0x3e0>)
 80050be:	4013      	ands	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80050ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d107      	bne.n	8005108 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	4313      	orrs	r3, r2
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b28      	cmp	r3, #40	; 0x28
 800510e:	d903      	bls.n	8005118 <HAL_DMA_Init+0x26c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b2e      	cmp	r3, #46	; 0x2e
 8005116:	d91f      	bls.n	8005158 <HAL_DMA_Init+0x2ac>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b3e      	cmp	r3, #62	; 0x3e
 800511e:	d903      	bls.n	8005128 <HAL_DMA_Init+0x27c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b42      	cmp	r3, #66	; 0x42
 8005126:	d917      	bls.n	8005158 <HAL_DMA_Init+0x2ac>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b46      	cmp	r3, #70	; 0x46
 800512e:	d903      	bls.n	8005138 <HAL_DMA_Init+0x28c>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b48      	cmp	r3, #72	; 0x48
 8005136:	d90f      	bls.n	8005158 <HAL_DMA_Init+0x2ac>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b4e      	cmp	r3, #78	; 0x4e
 800513e:	d903      	bls.n	8005148 <HAL_DMA_Init+0x29c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b52      	cmp	r3, #82	; 0x52
 8005146:	d907      	bls.n	8005158 <HAL_DMA_Init+0x2ac>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b73      	cmp	r3, #115	; 0x73
 800514e:	d905      	bls.n	800515c <HAL_DMA_Init+0x2b0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b77      	cmp	r3, #119	; 0x77
 8005156:	d801      	bhi.n	800515c <HAL_DMA_Init+0x2b0>
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <HAL_DMA_Init+0x2b2>
 800515c:	2300      	movs	r3, #0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005168:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f023 0307 	bic.w	r3, r3, #7
 8005180:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b04      	cmp	r3, #4
 8005192:	d117      	bne.n	80051c4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00e      	beq.n	80051c4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f002 fbe0 	bl	800796c <DMA_CheckFifoParam>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d008      	beq.n	80051c4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2240      	movs	r2, #64	; 0x40
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e1ff      	b.n	80055c4 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f002 fb1b 	bl	8007808 <DMA_CalcBaseAndBitshift>
 80051d2:	4603      	mov	r3, r0
 80051d4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051da:	f003 031f 	and.w	r3, r3, #31
 80051de:	223f      	movs	r2, #63	; 0x3f
 80051e0:	409a      	lsls	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	609a      	str	r2, [r3, #8]
 80051e6:	e0fe      	b.n	80053e6 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a28      	ldr	r2, [pc, #160]	; (8005290 <HAL_DMA_Init+0x3e4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d04a      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a27      	ldr	r2, [pc, #156]	; (8005294 <HAL_DMA_Init+0x3e8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d045      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a25      	ldr	r2, [pc, #148]	; (8005298 <HAL_DMA_Init+0x3ec>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d040      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a24      	ldr	r2, [pc, #144]	; (800529c <HAL_DMA_Init+0x3f0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d03b      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a22      	ldr	r2, [pc, #136]	; (80052a0 <HAL_DMA_Init+0x3f4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d036      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_DMA_Init+0x3f8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d031      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1f      	ldr	r2, [pc, #124]	; (80052a8 <HAL_DMA_Init+0x3fc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d02c      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <HAL_DMA_Init+0x400>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d027      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1c      	ldr	r2, [pc, #112]	; (80052b0 <HAL_DMA_Init+0x404>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d022      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1b      	ldr	r2, [pc, #108]	; (80052b4 <HAL_DMA_Init+0x408>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d01d      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <HAL_DMA_Init+0x40c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d018      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a18      	ldr	r2, [pc, #96]	; (80052bc <HAL_DMA_Init+0x410>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a16      	ldr	r2, [pc, #88]	; (80052c0 <HAL_DMA_Init+0x414>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00e      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <HAL_DMA_Init+0x418>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d009      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <HAL_DMA_Init+0x41c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <HAL_DMA_Init+0x3dc>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a12      	ldr	r2, [pc, #72]	; (80052cc <HAL_DMA_Init+0x420>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d123      	bne.n	80052d0 <HAL_DMA_Init+0x424>
 8005288:	2301      	movs	r3, #1
 800528a:	e022      	b.n	80052d2 <HAL_DMA_Init+0x426>
 800528c:	fe10803f 	.word	0xfe10803f
 8005290:	48022c08 	.word	0x48022c08
 8005294:	48022c1c 	.word	0x48022c1c
 8005298:	48022c30 	.word	0x48022c30
 800529c:	48022c44 	.word	0x48022c44
 80052a0:	48022c58 	.word	0x48022c58
 80052a4:	48022c6c 	.word	0x48022c6c
 80052a8:	48022c80 	.word	0x48022c80
 80052ac:	48022c94 	.word	0x48022c94
 80052b0:	58025408 	.word	0x58025408
 80052b4:	5802541c 	.word	0x5802541c
 80052b8:	58025430 	.word	0x58025430
 80052bc:	58025444 	.word	0x58025444
 80052c0:	58025458 	.word	0x58025458
 80052c4:	5802546c 	.word	0x5802546c
 80052c8:	58025480 	.word	0x58025480
 80052cc:	58025494 	.word	0x58025494
 80052d0:	2300      	movs	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d07e      	beq.n	80053d4 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a80      	ldr	r2, [pc, #512]	; (80054dc <HAL_DMA_Init+0x630>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d021      	beq.n	8005324 <HAL_DMA_Init+0x478>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a7e      	ldr	r2, [pc, #504]	; (80054e0 <HAL_DMA_Init+0x634>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01c      	beq.n	8005324 <HAL_DMA_Init+0x478>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a7d      	ldr	r2, [pc, #500]	; (80054e4 <HAL_DMA_Init+0x638>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d017      	beq.n	8005324 <HAL_DMA_Init+0x478>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a7b      	ldr	r2, [pc, #492]	; (80054e8 <HAL_DMA_Init+0x63c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d012      	beq.n	8005324 <HAL_DMA_Init+0x478>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a7a      	ldr	r2, [pc, #488]	; (80054ec <HAL_DMA_Init+0x640>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00d      	beq.n	8005324 <HAL_DMA_Init+0x478>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a78      	ldr	r2, [pc, #480]	; (80054f0 <HAL_DMA_Init+0x644>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d008      	beq.n	8005324 <HAL_DMA_Init+0x478>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a77      	ldr	r2, [pc, #476]	; (80054f4 <HAL_DMA_Init+0x648>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <HAL_DMA_Init+0x478>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a75      	ldr	r2, [pc, #468]	; (80054f8 <HAL_DMA_Init+0x64c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4b6e      	ldr	r3, [pc, #440]	; (80054fc <HAL_DMA_Init+0x650>)
 8005342:	4013      	ands	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b40      	cmp	r3, #64	; 0x40
 800534c:	d008      	beq.n	8005360 <HAL_DMA_Init+0x4b4>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2b80      	cmp	r3, #128	; 0x80
 8005354:	d102      	bne.n	800535c <HAL_DMA_Init+0x4b0>
 8005356:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800535a:	e002      	b.n	8005362 <HAL_DMA_Init+0x4b6>
 800535c:	2300      	movs	r3, #0
 800535e:	e000      	b.n	8005362 <HAL_DMA_Init+0x4b6>
 8005360:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	68d2      	ldr	r2, [r2, #12]
 8005366:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005370:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005380:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005388:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005390:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	4b56      	ldr	r3, [pc, #344]	; (8005500 <HAL_DMA_Init+0x654>)
 80053a8:	4413      	add	r3, r2
 80053aa:	4a56      	ldr	r2, [pc, #344]	; (8005504 <HAL_DMA_Init+0x658>)
 80053ac:	fba2 2303 	umull	r2, r3, r2, r3
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	009a      	lsls	r2, r3, #2
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f002 fa25 	bl	8007808 <DMA_CalcBaseAndBitshift>
 80053be:	4603      	mov	r3, r0
 80053c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	2201      	movs	r2, #1
 80053cc:	409a      	lsls	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	e008      	b.n	80053e6 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2240      	movs	r2, #64	; 0x40
 80053d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2203      	movs	r2, #3
 80053de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e0ee      	b.n	80055c4 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a47      	ldr	r2, [pc, #284]	; (8005508 <HAL_DMA_Init+0x65c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d072      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a45      	ldr	r2, [pc, #276]	; (800550c <HAL_DMA_Init+0x660>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d06d      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a44      	ldr	r2, [pc, #272]	; (8005510 <HAL_DMA_Init+0x664>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d068      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a42      	ldr	r2, [pc, #264]	; (8005514 <HAL_DMA_Init+0x668>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d063      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a41      	ldr	r2, [pc, #260]	; (8005518 <HAL_DMA_Init+0x66c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d05e      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a3f      	ldr	r2, [pc, #252]	; (800551c <HAL_DMA_Init+0x670>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d059      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a3e      	ldr	r2, [pc, #248]	; (8005520 <HAL_DMA_Init+0x674>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d054      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a3c      	ldr	r2, [pc, #240]	; (8005524 <HAL_DMA_Init+0x678>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d04f      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a3b      	ldr	r2, [pc, #236]	; (8005528 <HAL_DMA_Init+0x67c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d04a      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a39      	ldr	r2, [pc, #228]	; (800552c <HAL_DMA_Init+0x680>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d045      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a38      	ldr	r2, [pc, #224]	; (8005530 <HAL_DMA_Init+0x684>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d040      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a36      	ldr	r2, [pc, #216]	; (8005534 <HAL_DMA_Init+0x688>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d03b      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a35      	ldr	r2, [pc, #212]	; (8005538 <HAL_DMA_Init+0x68c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d036      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a33      	ldr	r2, [pc, #204]	; (800553c <HAL_DMA_Init+0x690>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d031      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a32      	ldr	r2, [pc, #200]	; (8005540 <HAL_DMA_Init+0x694>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d02c      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a30      	ldr	r2, [pc, #192]	; (8005544 <HAL_DMA_Init+0x698>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d027      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a14      	ldr	r2, [pc, #80]	; (80054dc <HAL_DMA_Init+0x630>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d022      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a12      	ldr	r2, [pc, #72]	; (80054e0 <HAL_DMA_Init+0x634>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d01d      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a11      	ldr	r2, [pc, #68]	; (80054e4 <HAL_DMA_Init+0x638>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d018      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a0f      	ldr	r2, [pc, #60]	; (80054e8 <HAL_DMA_Init+0x63c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a0e      	ldr	r2, [pc, #56]	; (80054ec <HAL_DMA_Init+0x640>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00e      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a0c      	ldr	r2, [pc, #48]	; (80054f0 <HAL_DMA_Init+0x644>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d009      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a0b      	ldr	r2, [pc, #44]	; (80054f4 <HAL_DMA_Init+0x648>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_DMA_Init+0x62a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a09      	ldr	r2, [pc, #36]	; (80054f8 <HAL_DMA_Init+0x64c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d138      	bne.n	8005548 <HAL_DMA_Init+0x69c>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e037      	b.n	800554a <HAL_DMA_Init+0x69e>
 80054da:	bf00      	nop
 80054dc:	58025408 	.word	0x58025408
 80054e0:	5802541c 	.word	0x5802541c
 80054e4:	58025430 	.word	0x58025430
 80054e8:	58025444 	.word	0x58025444
 80054ec:	58025458 	.word	0x58025458
 80054f0:	5802546c 	.word	0x5802546c
 80054f4:	58025480 	.word	0x58025480
 80054f8:	58025494 	.word	0x58025494
 80054fc:	fffe000f 	.word	0xfffe000f
 8005500:	a7fdabf8 	.word	0xa7fdabf8
 8005504:	cccccccd 	.word	0xcccccccd
 8005508:	40020010 	.word	0x40020010
 800550c:	40020028 	.word	0x40020028
 8005510:	40020040 	.word	0x40020040
 8005514:	40020058 	.word	0x40020058
 8005518:	40020070 	.word	0x40020070
 800551c:	40020088 	.word	0x40020088
 8005520:	400200a0 	.word	0x400200a0
 8005524:	400200b8 	.word	0x400200b8
 8005528:	40020410 	.word	0x40020410
 800552c:	40020428 	.word	0x40020428
 8005530:	40020440 	.word	0x40020440
 8005534:	40020458 	.word	0x40020458
 8005538:	40020470 	.word	0x40020470
 800553c:	40020488 	.word	0x40020488
 8005540:	400204a0 	.word	0x400204a0
 8005544:	400204b8 	.word	0x400204b8
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d032      	beq.n	80055b4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f002 fa88 	bl	8007a64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2b80      	cmp	r3, #128	; 0x80
 800555a:	d102      	bne.n	8005562 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005576:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <HAL_DMA_Init+0x6f6>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b08      	cmp	r3, #8
 8005586:	d80c      	bhi.n	80055a2 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f002 fb05 	bl	8007b98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800559e:	605a      	str	r2, [r3, #4]
 80055a0:	e008      	b.n	80055b4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e226      	b.n	8005a36 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_DMA_Start_IT+0x2a>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e21f      	b.n	8005a36 <HAL_DMA_Start_IT+0x46a>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b01      	cmp	r3, #1
 8005608:	f040 820a 	bne.w	8005a20 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a68      	ldr	r2, [pc, #416]	; (80057c0 <HAL_DMA_Start_IT+0x1f4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d04a      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a66      	ldr	r2, [pc, #408]	; (80057c4 <HAL_DMA_Start_IT+0x1f8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d045      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a65      	ldr	r2, [pc, #404]	; (80057c8 <HAL_DMA_Start_IT+0x1fc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d040      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a63      	ldr	r2, [pc, #396]	; (80057cc <HAL_DMA_Start_IT+0x200>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d03b      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a62      	ldr	r2, [pc, #392]	; (80057d0 <HAL_DMA_Start_IT+0x204>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d036      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a60      	ldr	r2, [pc, #384]	; (80057d4 <HAL_DMA_Start_IT+0x208>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d031      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a5f      	ldr	r2, [pc, #380]	; (80057d8 <HAL_DMA_Start_IT+0x20c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d02c      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a5d      	ldr	r2, [pc, #372]	; (80057dc <HAL_DMA_Start_IT+0x210>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d027      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a5c      	ldr	r2, [pc, #368]	; (80057e0 <HAL_DMA_Start_IT+0x214>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d022      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a5a      	ldr	r2, [pc, #360]	; (80057e4 <HAL_DMA_Start_IT+0x218>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d01d      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a59      	ldr	r2, [pc, #356]	; (80057e8 <HAL_DMA_Start_IT+0x21c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d018      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a57      	ldr	r2, [pc, #348]	; (80057ec <HAL_DMA_Start_IT+0x220>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a56      	ldr	r2, [pc, #344]	; (80057f0 <HAL_DMA_Start_IT+0x224>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00e      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a54      	ldr	r2, [pc, #336]	; (80057f4 <HAL_DMA_Start_IT+0x228>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d009      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a53      	ldr	r2, [pc, #332]	; (80057f8 <HAL_DMA_Start_IT+0x22c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <HAL_DMA_Start_IT+0xee>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a51      	ldr	r2, [pc, #324]	; (80057fc <HAL_DMA_Start_IT+0x230>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d108      	bne.n	80056cc <HAL_DMA_Start_IT+0x100>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	e007      	b.n	80056dc <HAL_DMA_Start_IT+0x110>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0201 	bic.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f001 feac 	bl	8007440 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a34      	ldr	r2, [pc, #208]	; (80057c0 <HAL_DMA_Start_IT+0x1f4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d04a      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a33      	ldr	r2, [pc, #204]	; (80057c4 <HAL_DMA_Start_IT+0x1f8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d045      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a31      	ldr	r2, [pc, #196]	; (80057c8 <HAL_DMA_Start_IT+0x1fc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d040      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a30      	ldr	r2, [pc, #192]	; (80057cc <HAL_DMA_Start_IT+0x200>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d03b      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2e      	ldr	r2, [pc, #184]	; (80057d0 <HAL_DMA_Start_IT+0x204>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d036      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2d      	ldr	r2, [pc, #180]	; (80057d4 <HAL_DMA_Start_IT+0x208>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d031      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2b      	ldr	r2, [pc, #172]	; (80057d8 <HAL_DMA_Start_IT+0x20c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d02c      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2a      	ldr	r2, [pc, #168]	; (80057dc <HAL_DMA_Start_IT+0x210>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d027      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a28      	ldr	r2, [pc, #160]	; (80057e0 <HAL_DMA_Start_IT+0x214>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d022      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a27      	ldr	r2, [pc, #156]	; (80057e4 <HAL_DMA_Start_IT+0x218>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d01d      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a25      	ldr	r2, [pc, #148]	; (80057e8 <HAL_DMA_Start_IT+0x21c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d018      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a24      	ldr	r2, [pc, #144]	; (80057ec <HAL_DMA_Start_IT+0x220>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d013      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a22      	ldr	r2, [pc, #136]	; (80057f0 <HAL_DMA_Start_IT+0x224>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00e      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a21      	ldr	r2, [pc, #132]	; (80057f4 <HAL_DMA_Start_IT+0x228>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <HAL_DMA_Start_IT+0x22c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_DMA_Start_IT+0x1bc>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <HAL_DMA_Start_IT+0x230>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d101      	bne.n	800578c <HAL_DMA_Start_IT+0x1c0>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <HAL_DMA_Start_IT+0x1c2>
 800578c:	2300      	movs	r3, #0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d036      	beq.n	8005800 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f023 021e 	bic.w	r2, r3, #30
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0216 	orr.w	r2, r2, #22
 80057a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d03e      	beq.n	800582c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0208 	orr.w	r2, r2, #8
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	e035      	b.n	800582c <HAL_DMA_Start_IT+0x260>
 80057c0:	40020010 	.word	0x40020010
 80057c4:	40020028 	.word	0x40020028
 80057c8:	40020040 	.word	0x40020040
 80057cc:	40020058 	.word	0x40020058
 80057d0:	40020070 	.word	0x40020070
 80057d4:	40020088 	.word	0x40020088
 80057d8:	400200a0 	.word	0x400200a0
 80057dc:	400200b8 	.word	0x400200b8
 80057e0:	40020410 	.word	0x40020410
 80057e4:	40020428 	.word	0x40020428
 80057e8:	40020440 	.word	0x40020440
 80057ec:	40020458 	.word	0x40020458
 80057f0:	40020470 	.word	0x40020470
 80057f4:	40020488 	.word	0x40020488
 80057f8:	400204a0 	.word	0x400204a0
 80057fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f023 020e 	bic.w	r2, r3, #14
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 020a 	orr.w	r2, r2, #10
 8005812:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0204 	orr.w	r2, r2, #4
 800582a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a83      	ldr	r2, [pc, #524]	; (8005a40 <HAL_DMA_Start_IT+0x474>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d072      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a82      	ldr	r2, [pc, #520]	; (8005a44 <HAL_DMA_Start_IT+0x478>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d06d      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a80      	ldr	r2, [pc, #512]	; (8005a48 <HAL_DMA_Start_IT+0x47c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d068      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a7f      	ldr	r2, [pc, #508]	; (8005a4c <HAL_DMA_Start_IT+0x480>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d063      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a7d      	ldr	r2, [pc, #500]	; (8005a50 <HAL_DMA_Start_IT+0x484>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d05e      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a7c      	ldr	r2, [pc, #496]	; (8005a54 <HAL_DMA_Start_IT+0x488>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d059      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a7a      	ldr	r2, [pc, #488]	; (8005a58 <HAL_DMA_Start_IT+0x48c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d054      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a79      	ldr	r2, [pc, #484]	; (8005a5c <HAL_DMA_Start_IT+0x490>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d04f      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a77      	ldr	r2, [pc, #476]	; (8005a60 <HAL_DMA_Start_IT+0x494>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d04a      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a76      	ldr	r2, [pc, #472]	; (8005a64 <HAL_DMA_Start_IT+0x498>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d045      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a74      	ldr	r2, [pc, #464]	; (8005a68 <HAL_DMA_Start_IT+0x49c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d040      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a73      	ldr	r2, [pc, #460]	; (8005a6c <HAL_DMA_Start_IT+0x4a0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d03b      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a71      	ldr	r2, [pc, #452]	; (8005a70 <HAL_DMA_Start_IT+0x4a4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d036      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a70      	ldr	r2, [pc, #448]	; (8005a74 <HAL_DMA_Start_IT+0x4a8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d031      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a6e      	ldr	r2, [pc, #440]	; (8005a78 <HAL_DMA_Start_IT+0x4ac>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d02c      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a6d      	ldr	r2, [pc, #436]	; (8005a7c <HAL_DMA_Start_IT+0x4b0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d027      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a6b      	ldr	r2, [pc, #428]	; (8005a80 <HAL_DMA_Start_IT+0x4b4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d022      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6a      	ldr	r2, [pc, #424]	; (8005a84 <HAL_DMA_Start_IT+0x4b8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d01d      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a68      	ldr	r2, [pc, #416]	; (8005a88 <HAL_DMA_Start_IT+0x4bc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d018      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a67      	ldr	r2, [pc, #412]	; (8005a8c <HAL_DMA_Start_IT+0x4c0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d013      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a65      	ldr	r2, [pc, #404]	; (8005a90 <HAL_DMA_Start_IT+0x4c4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00e      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a64      	ldr	r2, [pc, #400]	; (8005a94 <HAL_DMA_Start_IT+0x4c8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a62      	ldr	r2, [pc, #392]	; (8005a98 <HAL_DMA_Start_IT+0x4cc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_DMA_Start_IT+0x350>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a61      	ldr	r2, [pc, #388]	; (8005a9c <HAL_DMA_Start_IT+0x4d0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d101      	bne.n	8005920 <HAL_DMA_Start_IT+0x354>
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <HAL_DMA_Start_IT+0x356>
 8005920:	2300      	movs	r3, #0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d01a      	beq.n	800595c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005942:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800595a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a37      	ldr	r2, [pc, #220]	; (8005a40 <HAL_DMA_Start_IT+0x474>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d04a      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a36      	ldr	r2, [pc, #216]	; (8005a44 <HAL_DMA_Start_IT+0x478>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d045      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a34      	ldr	r2, [pc, #208]	; (8005a48 <HAL_DMA_Start_IT+0x47c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d040      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a33      	ldr	r2, [pc, #204]	; (8005a4c <HAL_DMA_Start_IT+0x480>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d03b      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a31      	ldr	r2, [pc, #196]	; (8005a50 <HAL_DMA_Start_IT+0x484>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d036      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a30      	ldr	r2, [pc, #192]	; (8005a54 <HAL_DMA_Start_IT+0x488>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d031      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a2e      	ldr	r2, [pc, #184]	; (8005a58 <HAL_DMA_Start_IT+0x48c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d02c      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a2d      	ldr	r2, [pc, #180]	; (8005a5c <HAL_DMA_Start_IT+0x490>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d027      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a2b      	ldr	r2, [pc, #172]	; (8005a60 <HAL_DMA_Start_IT+0x494>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d022      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a2a      	ldr	r2, [pc, #168]	; (8005a64 <HAL_DMA_Start_IT+0x498>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d01d      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a28      	ldr	r2, [pc, #160]	; (8005a68 <HAL_DMA_Start_IT+0x49c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a27      	ldr	r2, [pc, #156]	; (8005a6c <HAL_DMA_Start_IT+0x4a0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a25      	ldr	r2, [pc, #148]	; (8005a70 <HAL_DMA_Start_IT+0x4a4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a24      	ldr	r2, [pc, #144]	; (8005a74 <HAL_DMA_Start_IT+0x4a8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a22      	ldr	r2, [pc, #136]	; (8005a78 <HAL_DMA_Start_IT+0x4ac>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_DMA_Start_IT+0x430>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a21      	ldr	r2, [pc, #132]	; (8005a7c <HAL_DMA_Start_IT+0x4b0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d108      	bne.n	8005a0e <HAL_DMA_Start_IT+0x442>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	e012      	b.n	8005a34 <HAL_DMA_Start_IT+0x468>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e009      	b.n	8005a34 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40020010 	.word	0x40020010
 8005a44:	40020028 	.word	0x40020028
 8005a48:	40020040 	.word	0x40020040
 8005a4c:	40020058 	.word	0x40020058
 8005a50:	40020070 	.word	0x40020070
 8005a54:	40020088 	.word	0x40020088
 8005a58:	400200a0 	.word	0x400200a0
 8005a5c:	400200b8 	.word	0x400200b8
 8005a60:	40020410 	.word	0x40020410
 8005a64:	40020428 	.word	0x40020428
 8005a68:	40020440 	.word	0x40020440
 8005a6c:	40020458 	.word	0x40020458
 8005a70:	40020470 	.word	0x40020470
 8005a74:	40020488 	.word	0x40020488
 8005a78:	400204a0 	.word	0x400204a0
 8005a7c:	400204b8 	.word	0x400204b8
 8005a80:	58025408 	.word	0x58025408
 8005a84:	5802541c 	.word	0x5802541c
 8005a88:	58025430 	.word	0x58025430
 8005a8c:	58025444 	.word	0x58025444
 8005a90:	58025458 	.word	0x58025458
 8005a94:	5802546c 	.word	0x5802546c
 8005a98:	58025480 	.word	0x58025480
 8005a9c:	58025494 	.word	0x58025494

08005aa0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005aa8:	f7fd fa94 	bl	8002fd4 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e2dc      	b.n	8006072 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d008      	beq.n	8005ad6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2280      	movs	r2, #128	; 0x80
 8005ac8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e2cd      	b.n	8006072 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a76      	ldr	r2, [pc, #472]	; (8005cb4 <HAL_DMA_Abort+0x214>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d04a      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a74      	ldr	r2, [pc, #464]	; (8005cb8 <HAL_DMA_Abort+0x218>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d045      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a73      	ldr	r2, [pc, #460]	; (8005cbc <HAL_DMA_Abort+0x21c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d040      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a71      	ldr	r2, [pc, #452]	; (8005cc0 <HAL_DMA_Abort+0x220>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d03b      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a70      	ldr	r2, [pc, #448]	; (8005cc4 <HAL_DMA_Abort+0x224>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d036      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a6e      	ldr	r2, [pc, #440]	; (8005cc8 <HAL_DMA_Abort+0x228>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d031      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a6d      	ldr	r2, [pc, #436]	; (8005ccc <HAL_DMA_Abort+0x22c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d02c      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a6b      	ldr	r2, [pc, #428]	; (8005cd0 <HAL_DMA_Abort+0x230>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d027      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a6a      	ldr	r2, [pc, #424]	; (8005cd4 <HAL_DMA_Abort+0x234>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d022      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a68      	ldr	r2, [pc, #416]	; (8005cd8 <HAL_DMA_Abort+0x238>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01d      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a67      	ldr	r2, [pc, #412]	; (8005cdc <HAL_DMA_Abort+0x23c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d018      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a65      	ldr	r2, [pc, #404]	; (8005ce0 <HAL_DMA_Abort+0x240>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a64      	ldr	r2, [pc, #400]	; (8005ce4 <HAL_DMA_Abort+0x244>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a62      	ldr	r2, [pc, #392]	; (8005ce8 <HAL_DMA_Abort+0x248>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a61      	ldr	r2, [pc, #388]	; (8005cec <HAL_DMA_Abort+0x24c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_DMA_Abort+0xd6>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a5f      	ldr	r2, [pc, #380]	; (8005cf0 <HAL_DMA_Abort+0x250>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d101      	bne.n	8005b7a <HAL_DMA_Abort+0xda>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_DMA_Abort+0xdc>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d013      	beq.n	8005ba8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 021e 	bic.w	r2, r2, #30
 8005b8e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b9e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e00a      	b.n	8005bbe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 020e 	bic.w	r2, r2, #14
 8005bb6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a3c      	ldr	r2, [pc, #240]	; (8005cb4 <HAL_DMA_Abort+0x214>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d072      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a3a      	ldr	r2, [pc, #232]	; (8005cb8 <HAL_DMA_Abort+0x218>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d06d      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a39      	ldr	r2, [pc, #228]	; (8005cbc <HAL_DMA_Abort+0x21c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d068      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a37      	ldr	r2, [pc, #220]	; (8005cc0 <HAL_DMA_Abort+0x220>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d063      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a36      	ldr	r2, [pc, #216]	; (8005cc4 <HAL_DMA_Abort+0x224>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d05e      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a34      	ldr	r2, [pc, #208]	; (8005cc8 <HAL_DMA_Abort+0x228>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d059      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a33      	ldr	r2, [pc, #204]	; (8005ccc <HAL_DMA_Abort+0x22c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d054      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a31      	ldr	r2, [pc, #196]	; (8005cd0 <HAL_DMA_Abort+0x230>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d04f      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a30      	ldr	r2, [pc, #192]	; (8005cd4 <HAL_DMA_Abort+0x234>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d04a      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2e      	ldr	r2, [pc, #184]	; (8005cd8 <HAL_DMA_Abort+0x238>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d045      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2d      	ldr	r2, [pc, #180]	; (8005cdc <HAL_DMA_Abort+0x23c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d040      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2b      	ldr	r2, [pc, #172]	; (8005ce0 <HAL_DMA_Abort+0x240>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d03b      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <HAL_DMA_Abort+0x244>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d036      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a28      	ldr	r2, [pc, #160]	; (8005ce8 <HAL_DMA_Abort+0x248>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d031      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a27      	ldr	r2, [pc, #156]	; (8005cec <HAL_DMA_Abort+0x24c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d02c      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a25      	ldr	r2, [pc, #148]	; (8005cf0 <HAL_DMA_Abort+0x250>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d027      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a24      	ldr	r2, [pc, #144]	; (8005cf4 <HAL_DMA_Abort+0x254>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d022      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a22      	ldr	r2, [pc, #136]	; (8005cf8 <HAL_DMA_Abort+0x258>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01d      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <HAL_DMA_Abort+0x25c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d018      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <HAL_DMA_Abort+0x260>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d013      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1e      	ldr	r2, [pc, #120]	; (8005d04 <HAL_DMA_Abort+0x264>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00e      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1c      	ldr	r2, [pc, #112]	; (8005d08 <HAL_DMA_Abort+0x268>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d009      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1b      	ldr	r2, [pc, #108]	; (8005d0c <HAL_DMA_Abort+0x26c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d004      	beq.n	8005cae <HAL_DMA_Abort+0x20e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a19      	ldr	r2, [pc, #100]	; (8005d10 <HAL_DMA_Abort+0x270>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d132      	bne.n	8005d14 <HAL_DMA_Abort+0x274>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e031      	b.n	8005d16 <HAL_DMA_Abort+0x276>
 8005cb2:	bf00      	nop
 8005cb4:	40020010 	.word	0x40020010
 8005cb8:	40020028 	.word	0x40020028
 8005cbc:	40020040 	.word	0x40020040
 8005cc0:	40020058 	.word	0x40020058
 8005cc4:	40020070 	.word	0x40020070
 8005cc8:	40020088 	.word	0x40020088
 8005ccc:	400200a0 	.word	0x400200a0
 8005cd0:	400200b8 	.word	0x400200b8
 8005cd4:	40020410 	.word	0x40020410
 8005cd8:	40020428 	.word	0x40020428
 8005cdc:	40020440 	.word	0x40020440
 8005ce0:	40020458 	.word	0x40020458
 8005ce4:	40020470 	.word	0x40020470
 8005ce8:	40020488 	.word	0x40020488
 8005cec:	400204a0 	.word	0x400204a0
 8005cf0:	400204b8 	.word	0x400204b8
 8005cf4:	58025408 	.word	0x58025408
 8005cf8:	5802541c 	.word	0x5802541c
 8005cfc:	58025430 	.word	0x58025430
 8005d00:	58025444 	.word	0x58025444
 8005d04:	58025458 	.word	0x58025458
 8005d08:	5802546c 	.word	0x5802546c
 8005d0c:	58025480 	.word	0x58025480
 8005d10:	58025494 	.word	0x58025494
 8005d14:	2300      	movs	r3, #0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d007      	beq.n	8005d2a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d28:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a6d      	ldr	r2, [pc, #436]	; (8005ee4 <HAL_DMA_Abort+0x444>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d04a      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a6b      	ldr	r2, [pc, #428]	; (8005ee8 <HAL_DMA_Abort+0x448>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d045      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a6a      	ldr	r2, [pc, #424]	; (8005eec <HAL_DMA_Abort+0x44c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d040      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a68      	ldr	r2, [pc, #416]	; (8005ef0 <HAL_DMA_Abort+0x450>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d03b      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a67      	ldr	r2, [pc, #412]	; (8005ef4 <HAL_DMA_Abort+0x454>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d036      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a65      	ldr	r2, [pc, #404]	; (8005ef8 <HAL_DMA_Abort+0x458>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d031      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a64      	ldr	r2, [pc, #400]	; (8005efc <HAL_DMA_Abort+0x45c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d02c      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a62      	ldr	r2, [pc, #392]	; (8005f00 <HAL_DMA_Abort+0x460>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d027      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a61      	ldr	r2, [pc, #388]	; (8005f04 <HAL_DMA_Abort+0x464>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d022      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a5f      	ldr	r2, [pc, #380]	; (8005f08 <HAL_DMA_Abort+0x468>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d01d      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a5e      	ldr	r2, [pc, #376]	; (8005f0c <HAL_DMA_Abort+0x46c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d018      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a5c      	ldr	r2, [pc, #368]	; (8005f10 <HAL_DMA_Abort+0x470>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a5b      	ldr	r2, [pc, #364]	; (8005f14 <HAL_DMA_Abort+0x474>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00e      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a59      	ldr	r2, [pc, #356]	; (8005f18 <HAL_DMA_Abort+0x478>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d009      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a58      	ldr	r2, [pc, #352]	; (8005f1c <HAL_DMA_Abort+0x47c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <HAL_DMA_Abort+0x32a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a56      	ldr	r2, [pc, #344]	; (8005f20 <HAL_DMA_Abort+0x480>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d108      	bne.n	8005ddc <HAL_DMA_Abort+0x33c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e007      	b.n	8005dec <HAL_DMA_Abort+0x34c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005dec:	e013      	b.n	8005e16 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dee:	f7fd f8f1 	bl	8002fd4 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	d90c      	bls.n	8005e16 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2203      	movs	r2, #3
 8005e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e12d      	b.n	8006072 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e5      	bne.n	8005dee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a2f      	ldr	r2, [pc, #188]	; (8005ee4 <HAL_DMA_Abort+0x444>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d04a      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a2d      	ldr	r2, [pc, #180]	; (8005ee8 <HAL_DMA_Abort+0x448>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d045      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2c      	ldr	r2, [pc, #176]	; (8005eec <HAL_DMA_Abort+0x44c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d040      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a2a      	ldr	r2, [pc, #168]	; (8005ef0 <HAL_DMA_Abort+0x450>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d03b      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a29      	ldr	r2, [pc, #164]	; (8005ef4 <HAL_DMA_Abort+0x454>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d036      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a27      	ldr	r2, [pc, #156]	; (8005ef8 <HAL_DMA_Abort+0x458>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d031      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a26      	ldr	r2, [pc, #152]	; (8005efc <HAL_DMA_Abort+0x45c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d02c      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a24      	ldr	r2, [pc, #144]	; (8005f00 <HAL_DMA_Abort+0x460>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d027      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a23      	ldr	r2, [pc, #140]	; (8005f04 <HAL_DMA_Abort+0x464>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d022      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a21      	ldr	r2, [pc, #132]	; (8005f08 <HAL_DMA_Abort+0x468>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01d      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a20      	ldr	r2, [pc, #128]	; (8005f0c <HAL_DMA_Abort+0x46c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d018      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1e      	ldr	r2, [pc, #120]	; (8005f10 <HAL_DMA_Abort+0x470>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <HAL_DMA_Abort+0x474>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1b      	ldr	r2, [pc, #108]	; (8005f18 <HAL_DMA_Abort+0x478>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1a      	ldr	r2, [pc, #104]	; (8005f1c <HAL_DMA_Abort+0x47c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <HAL_DMA_Abort+0x422>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <HAL_DMA_Abort+0x480>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d101      	bne.n	8005ec6 <HAL_DMA_Abort+0x426>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <HAL_DMA_Abort+0x428>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d02b      	beq.n	8005f24 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	223f      	movs	r2, #63	; 0x3f
 8005edc:	409a      	lsls	r2, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	609a      	str	r2, [r3, #8]
 8005ee2:	e02a      	b.n	8005f3a <HAL_DMA_Abort+0x49a>
 8005ee4:	40020010 	.word	0x40020010
 8005ee8:	40020028 	.word	0x40020028
 8005eec:	40020040 	.word	0x40020040
 8005ef0:	40020058 	.word	0x40020058
 8005ef4:	40020070 	.word	0x40020070
 8005ef8:	40020088 	.word	0x40020088
 8005efc:	400200a0 	.word	0x400200a0
 8005f00:	400200b8 	.word	0x400200b8
 8005f04:	40020410 	.word	0x40020410
 8005f08:	40020428 	.word	0x40020428
 8005f0c:	40020440 	.word	0x40020440
 8005f10:	40020458 	.word	0x40020458
 8005f14:	40020470 	.word	0x40020470
 8005f18:	40020488 	.word	0x40020488
 8005f1c:	400204a0 	.word	0x400204a0
 8005f20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f28:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	2201      	movs	r2, #1
 8005f34:	409a      	lsls	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a4f      	ldr	r2, [pc, #316]	; (800607c <HAL_DMA_Abort+0x5dc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d072      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a4d      	ldr	r2, [pc, #308]	; (8006080 <HAL_DMA_Abort+0x5e0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d06d      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a4c      	ldr	r2, [pc, #304]	; (8006084 <HAL_DMA_Abort+0x5e4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d068      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a4a      	ldr	r2, [pc, #296]	; (8006088 <HAL_DMA_Abort+0x5e8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d063      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a49      	ldr	r2, [pc, #292]	; (800608c <HAL_DMA_Abort+0x5ec>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d05e      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a47      	ldr	r2, [pc, #284]	; (8006090 <HAL_DMA_Abort+0x5f0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d059      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a46      	ldr	r2, [pc, #280]	; (8006094 <HAL_DMA_Abort+0x5f4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d054      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a44      	ldr	r2, [pc, #272]	; (8006098 <HAL_DMA_Abort+0x5f8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d04f      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a43      	ldr	r2, [pc, #268]	; (800609c <HAL_DMA_Abort+0x5fc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d04a      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a41      	ldr	r2, [pc, #260]	; (80060a0 <HAL_DMA_Abort+0x600>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d045      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a40      	ldr	r2, [pc, #256]	; (80060a4 <HAL_DMA_Abort+0x604>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d040      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a3e      	ldr	r2, [pc, #248]	; (80060a8 <HAL_DMA_Abort+0x608>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d03b      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a3d      	ldr	r2, [pc, #244]	; (80060ac <HAL_DMA_Abort+0x60c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d036      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a3b      	ldr	r2, [pc, #236]	; (80060b0 <HAL_DMA_Abort+0x610>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d031      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a3a      	ldr	r2, [pc, #232]	; (80060b4 <HAL_DMA_Abort+0x614>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d02c      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a38      	ldr	r2, [pc, #224]	; (80060b8 <HAL_DMA_Abort+0x618>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d027      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a37      	ldr	r2, [pc, #220]	; (80060bc <HAL_DMA_Abort+0x61c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d022      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a35      	ldr	r2, [pc, #212]	; (80060c0 <HAL_DMA_Abort+0x620>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d01d      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a34      	ldr	r2, [pc, #208]	; (80060c4 <HAL_DMA_Abort+0x624>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d018      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a32      	ldr	r2, [pc, #200]	; (80060c8 <HAL_DMA_Abort+0x628>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d013      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a31      	ldr	r2, [pc, #196]	; (80060cc <HAL_DMA_Abort+0x62c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00e      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2f      	ldr	r2, [pc, #188]	; (80060d0 <HAL_DMA_Abort+0x630>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d009      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2e      	ldr	r2, [pc, #184]	; (80060d4 <HAL_DMA_Abort+0x634>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d004      	beq.n	800602a <HAL_DMA_Abort+0x58a>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a2c      	ldr	r2, [pc, #176]	; (80060d8 <HAL_DMA_Abort+0x638>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d101      	bne.n	800602e <HAL_DMA_Abort+0x58e>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <HAL_DMA_Abort+0x590>
 800602e:	2300      	movs	r3, #0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d015      	beq.n	8006060 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800603c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006054:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800605e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40020010 	.word	0x40020010
 8006080:	40020028 	.word	0x40020028
 8006084:	40020040 	.word	0x40020040
 8006088:	40020058 	.word	0x40020058
 800608c:	40020070 	.word	0x40020070
 8006090:	40020088 	.word	0x40020088
 8006094:	400200a0 	.word	0x400200a0
 8006098:	400200b8 	.word	0x400200b8
 800609c:	40020410 	.word	0x40020410
 80060a0:	40020428 	.word	0x40020428
 80060a4:	40020440 	.word	0x40020440
 80060a8:	40020458 	.word	0x40020458
 80060ac:	40020470 	.word	0x40020470
 80060b0:	40020488 	.word	0x40020488
 80060b4:	400204a0 	.word	0x400204a0
 80060b8:	400204b8 	.word	0x400204b8
 80060bc:	58025408 	.word	0x58025408
 80060c0:	5802541c 	.word	0x5802541c
 80060c4:	58025430 	.word	0x58025430
 80060c8:	58025444 	.word	0x58025444
 80060cc:	58025458 	.word	0x58025458
 80060d0:	5802546c 	.word	0x5802546c
 80060d4:	58025480 	.word	0x58025480
 80060d8:	58025494 	.word	0x58025494

080060dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e205      	b.n	80064fa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d004      	beq.n	8006104 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2280      	movs	r2, #128	; 0x80
 80060fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e1fa      	b.n	80064fa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a8c      	ldr	r2, [pc, #560]	; (800633c <HAL_DMA_Abort_IT+0x260>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d04a      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a8b      	ldr	r2, [pc, #556]	; (8006340 <HAL_DMA_Abort_IT+0x264>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d045      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a89      	ldr	r2, [pc, #548]	; (8006344 <HAL_DMA_Abort_IT+0x268>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d040      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a88      	ldr	r2, [pc, #544]	; (8006348 <HAL_DMA_Abort_IT+0x26c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d03b      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a86      	ldr	r2, [pc, #536]	; (800634c <HAL_DMA_Abort_IT+0x270>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d036      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a85      	ldr	r2, [pc, #532]	; (8006350 <HAL_DMA_Abort_IT+0x274>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d031      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a83      	ldr	r2, [pc, #524]	; (8006354 <HAL_DMA_Abort_IT+0x278>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d02c      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a82      	ldr	r2, [pc, #520]	; (8006358 <HAL_DMA_Abort_IT+0x27c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d027      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a80      	ldr	r2, [pc, #512]	; (800635c <HAL_DMA_Abort_IT+0x280>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d022      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a7f      	ldr	r2, [pc, #508]	; (8006360 <HAL_DMA_Abort_IT+0x284>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d01d      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a7d      	ldr	r2, [pc, #500]	; (8006364 <HAL_DMA_Abort_IT+0x288>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d018      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a7c      	ldr	r2, [pc, #496]	; (8006368 <HAL_DMA_Abort_IT+0x28c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d013      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a7a      	ldr	r2, [pc, #488]	; (800636c <HAL_DMA_Abort_IT+0x290>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00e      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a79      	ldr	r2, [pc, #484]	; (8006370 <HAL_DMA_Abort_IT+0x294>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d009      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a77      	ldr	r2, [pc, #476]	; (8006374 <HAL_DMA_Abort_IT+0x298>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d004      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a76      	ldr	r2, [pc, #472]	; (8006378 <HAL_DMA_Abort_IT+0x29c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d101      	bne.n	80061a8 <HAL_DMA_Abort_IT+0xcc>
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <HAL_DMA_Abort_IT+0xce>
 80061a8:	2300      	movs	r3, #0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d065      	beq.n	800627a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2204      	movs	r2, #4
 80061b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a60      	ldr	r2, [pc, #384]	; (800633c <HAL_DMA_Abort_IT+0x260>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d04a      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a5e      	ldr	r2, [pc, #376]	; (8006340 <HAL_DMA_Abort_IT+0x264>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d045      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a5d      	ldr	r2, [pc, #372]	; (8006344 <HAL_DMA_Abort_IT+0x268>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d040      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a5b      	ldr	r2, [pc, #364]	; (8006348 <HAL_DMA_Abort_IT+0x26c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d03b      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a5a      	ldr	r2, [pc, #360]	; (800634c <HAL_DMA_Abort_IT+0x270>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d036      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a58      	ldr	r2, [pc, #352]	; (8006350 <HAL_DMA_Abort_IT+0x274>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d031      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a57      	ldr	r2, [pc, #348]	; (8006354 <HAL_DMA_Abort_IT+0x278>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d02c      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a55      	ldr	r2, [pc, #340]	; (8006358 <HAL_DMA_Abort_IT+0x27c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d027      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a54      	ldr	r2, [pc, #336]	; (800635c <HAL_DMA_Abort_IT+0x280>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d022      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a52      	ldr	r2, [pc, #328]	; (8006360 <HAL_DMA_Abort_IT+0x284>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d01d      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a51      	ldr	r2, [pc, #324]	; (8006364 <HAL_DMA_Abort_IT+0x288>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d018      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a4f      	ldr	r2, [pc, #316]	; (8006368 <HAL_DMA_Abort_IT+0x28c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d013      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a4e      	ldr	r2, [pc, #312]	; (800636c <HAL_DMA_Abort_IT+0x290>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00e      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a4c      	ldr	r2, [pc, #304]	; (8006370 <HAL_DMA_Abort_IT+0x294>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d009      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a4b      	ldr	r2, [pc, #300]	; (8006374 <HAL_DMA_Abort_IT+0x298>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d004      	beq.n	8006256 <HAL_DMA_Abort_IT+0x17a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a49      	ldr	r2, [pc, #292]	; (8006378 <HAL_DMA_Abort_IT+0x29c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d108      	bne.n	8006268 <HAL_DMA_Abort_IT+0x18c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	e147      	b.n	80064f8 <HAL_DMA_Abort_IT+0x41c>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0201 	bic.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	e13e      	b.n	80064f8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 020e 	bic.w	r2, r2, #14
 8006288:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a2b      	ldr	r2, [pc, #172]	; (800633c <HAL_DMA_Abort_IT+0x260>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d04a      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a29      	ldr	r2, [pc, #164]	; (8006340 <HAL_DMA_Abort_IT+0x264>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d045      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a28      	ldr	r2, [pc, #160]	; (8006344 <HAL_DMA_Abort_IT+0x268>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d040      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a26      	ldr	r2, [pc, #152]	; (8006348 <HAL_DMA_Abort_IT+0x26c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d03b      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a25      	ldr	r2, [pc, #148]	; (800634c <HAL_DMA_Abort_IT+0x270>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d036      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a23      	ldr	r2, [pc, #140]	; (8006350 <HAL_DMA_Abort_IT+0x274>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d031      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a22      	ldr	r2, [pc, #136]	; (8006354 <HAL_DMA_Abort_IT+0x278>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d02c      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a20      	ldr	r2, [pc, #128]	; (8006358 <HAL_DMA_Abort_IT+0x27c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d027      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a1f      	ldr	r2, [pc, #124]	; (800635c <HAL_DMA_Abort_IT+0x280>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d022      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1d      	ldr	r2, [pc, #116]	; (8006360 <HAL_DMA_Abort_IT+0x284>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01d      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1c      	ldr	r2, [pc, #112]	; (8006364 <HAL_DMA_Abort_IT+0x288>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d018      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1a      	ldr	r2, [pc, #104]	; (8006368 <HAL_DMA_Abort_IT+0x28c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a19      	ldr	r2, [pc, #100]	; (800636c <HAL_DMA_Abort_IT+0x290>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00e      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a17      	ldr	r2, [pc, #92]	; (8006370 <HAL_DMA_Abort_IT+0x294>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d009      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a16      	ldr	r2, [pc, #88]	; (8006374 <HAL_DMA_Abort_IT+0x298>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d004      	beq.n	800632a <HAL_DMA_Abort_IT+0x24e>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a14      	ldr	r2, [pc, #80]	; (8006378 <HAL_DMA_Abort_IT+0x29c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d128      	bne.n	800637c <HAL_DMA_Abort_IT+0x2a0>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0201 	bic.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e027      	b.n	800638c <HAL_DMA_Abort_IT+0x2b0>
 800633c:	40020010 	.word	0x40020010
 8006340:	40020028 	.word	0x40020028
 8006344:	40020040 	.word	0x40020040
 8006348:	40020058 	.word	0x40020058
 800634c:	40020070 	.word	0x40020070
 8006350:	40020088 	.word	0x40020088
 8006354:	400200a0 	.word	0x400200a0
 8006358:	400200b8 	.word	0x400200b8
 800635c:	40020410 	.word	0x40020410
 8006360:	40020428 	.word	0x40020428
 8006364:	40020440 	.word	0x40020440
 8006368:	40020458 	.word	0x40020458
 800636c:	40020470 	.word	0x40020470
 8006370:	40020488 	.word	0x40020488
 8006374:	400204a0 	.word	0x400204a0
 8006378:	400204b8 	.word	0x400204b8
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0201 	bic.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a5c      	ldr	r2, [pc, #368]	; (8006504 <HAL_DMA_Abort_IT+0x428>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d072      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a5b      	ldr	r2, [pc, #364]	; (8006508 <HAL_DMA_Abort_IT+0x42c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d06d      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a59      	ldr	r2, [pc, #356]	; (800650c <HAL_DMA_Abort_IT+0x430>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d068      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a58      	ldr	r2, [pc, #352]	; (8006510 <HAL_DMA_Abort_IT+0x434>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d063      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a56      	ldr	r2, [pc, #344]	; (8006514 <HAL_DMA_Abort_IT+0x438>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d05e      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a55      	ldr	r2, [pc, #340]	; (8006518 <HAL_DMA_Abort_IT+0x43c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d059      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a53      	ldr	r2, [pc, #332]	; (800651c <HAL_DMA_Abort_IT+0x440>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d054      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a52      	ldr	r2, [pc, #328]	; (8006520 <HAL_DMA_Abort_IT+0x444>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d04f      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a50      	ldr	r2, [pc, #320]	; (8006524 <HAL_DMA_Abort_IT+0x448>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d04a      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a4f      	ldr	r2, [pc, #316]	; (8006528 <HAL_DMA_Abort_IT+0x44c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d045      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a4d      	ldr	r2, [pc, #308]	; (800652c <HAL_DMA_Abort_IT+0x450>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d040      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a4c      	ldr	r2, [pc, #304]	; (8006530 <HAL_DMA_Abort_IT+0x454>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d03b      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a4a      	ldr	r2, [pc, #296]	; (8006534 <HAL_DMA_Abort_IT+0x458>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d036      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a49      	ldr	r2, [pc, #292]	; (8006538 <HAL_DMA_Abort_IT+0x45c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d031      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a47      	ldr	r2, [pc, #284]	; (800653c <HAL_DMA_Abort_IT+0x460>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d02c      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a46      	ldr	r2, [pc, #280]	; (8006540 <HAL_DMA_Abort_IT+0x464>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d027      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a44      	ldr	r2, [pc, #272]	; (8006544 <HAL_DMA_Abort_IT+0x468>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d022      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a43      	ldr	r2, [pc, #268]	; (8006548 <HAL_DMA_Abort_IT+0x46c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d01d      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a41      	ldr	r2, [pc, #260]	; (800654c <HAL_DMA_Abort_IT+0x470>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d018      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a40      	ldr	r2, [pc, #256]	; (8006550 <HAL_DMA_Abort_IT+0x474>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d013      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a3e      	ldr	r2, [pc, #248]	; (8006554 <HAL_DMA_Abort_IT+0x478>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00e      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a3d      	ldr	r2, [pc, #244]	; (8006558 <HAL_DMA_Abort_IT+0x47c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d009      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a3b      	ldr	r2, [pc, #236]	; (800655c <HAL_DMA_Abort_IT+0x480>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <HAL_DMA_Abort_IT+0x3a0>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a3a      	ldr	r2, [pc, #232]	; (8006560 <HAL_DMA_Abort_IT+0x484>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d101      	bne.n	8006480 <HAL_DMA_Abort_IT+0x3a4>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <HAL_DMA_Abort_IT+0x3a6>
 8006480:	2300      	movs	r3, #0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d028      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006494:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a0:	f003 031f 	and.w	r3, r3, #31
 80064a4:	2201      	movs	r2, #1
 80064a6:	409a      	lsls	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40020010 	.word	0x40020010
 8006508:	40020028 	.word	0x40020028
 800650c:	40020040 	.word	0x40020040
 8006510:	40020058 	.word	0x40020058
 8006514:	40020070 	.word	0x40020070
 8006518:	40020088 	.word	0x40020088
 800651c:	400200a0 	.word	0x400200a0
 8006520:	400200b8 	.word	0x400200b8
 8006524:	40020410 	.word	0x40020410
 8006528:	40020428 	.word	0x40020428
 800652c:	40020440 	.word	0x40020440
 8006530:	40020458 	.word	0x40020458
 8006534:	40020470 	.word	0x40020470
 8006538:	40020488 	.word	0x40020488
 800653c:	400204a0 	.word	0x400204a0
 8006540:	400204b8 	.word	0x400204b8
 8006544:	58025408 	.word	0x58025408
 8006548:	5802541c 	.word	0x5802541c
 800654c:	58025430 	.word	0x58025430
 8006550:	58025444 	.word	0x58025444
 8006554:	58025458 	.word	0x58025458
 8006558:	5802546c 	.word	0x5802546c
 800655c:	58025480 	.word	0x58025480
 8006560:	58025494 	.word	0x58025494

08006564 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08a      	sub	sp, #40	; 0x28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006570:	4b67      	ldr	r3, [pc, #412]	; (8006710 <HAL_DMA_IRQHandler+0x1ac>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a67      	ldr	r2, [pc, #412]	; (8006714 <HAL_DMA_IRQHandler+0x1b0>)
 8006576:	fba2 2303 	umull	r2, r3, r2, r3
 800657a:	0a9b      	lsrs	r3, r3, #10
 800657c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006582:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006588:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a5f      	ldr	r2, [pc, #380]	; (8006718 <HAL_DMA_IRQHandler+0x1b4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d04a      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a5d      	ldr	r2, [pc, #372]	; (800671c <HAL_DMA_IRQHandler+0x1b8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d045      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a5c      	ldr	r2, [pc, #368]	; (8006720 <HAL_DMA_IRQHandler+0x1bc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d040      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a5a      	ldr	r2, [pc, #360]	; (8006724 <HAL_DMA_IRQHandler+0x1c0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d03b      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a59      	ldr	r2, [pc, #356]	; (8006728 <HAL_DMA_IRQHandler+0x1c4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d036      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a57      	ldr	r2, [pc, #348]	; (800672c <HAL_DMA_IRQHandler+0x1c8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d031      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a56      	ldr	r2, [pc, #344]	; (8006730 <HAL_DMA_IRQHandler+0x1cc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d02c      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a54      	ldr	r2, [pc, #336]	; (8006734 <HAL_DMA_IRQHandler+0x1d0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d027      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a53      	ldr	r2, [pc, #332]	; (8006738 <HAL_DMA_IRQHandler+0x1d4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d022      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a51      	ldr	r2, [pc, #324]	; (800673c <HAL_DMA_IRQHandler+0x1d8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d01d      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a50      	ldr	r2, [pc, #320]	; (8006740 <HAL_DMA_IRQHandler+0x1dc>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d018      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a4e      	ldr	r2, [pc, #312]	; (8006744 <HAL_DMA_IRQHandler+0x1e0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a4d      	ldr	r2, [pc, #308]	; (8006748 <HAL_DMA_IRQHandler+0x1e4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00e      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a4b      	ldr	r2, [pc, #300]	; (800674c <HAL_DMA_IRQHandler+0x1e8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a4a      	ldr	r2, [pc, #296]	; (8006750 <HAL_DMA_IRQHandler+0x1ec>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d004      	beq.n	8006636 <HAL_DMA_IRQHandler+0xd2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a48      	ldr	r2, [pc, #288]	; (8006754 <HAL_DMA_IRQHandler+0x1f0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d101      	bne.n	800663a <HAL_DMA_IRQHandler+0xd6>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <HAL_DMA_IRQHandler+0xd8>
 800663a:	2300      	movs	r3, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 842b 	beq.w	8006e98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006646:	f003 031f 	and.w	r3, r3, #31
 800664a:	2208      	movs	r2, #8
 800664c:	409a      	lsls	r2, r3
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	4013      	ands	r3, r2
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 80a2 	beq.w	800679c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a2e      	ldr	r2, [pc, #184]	; (8006718 <HAL_DMA_IRQHandler+0x1b4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d04a      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a2d      	ldr	r2, [pc, #180]	; (800671c <HAL_DMA_IRQHandler+0x1b8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d045      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a2b      	ldr	r2, [pc, #172]	; (8006720 <HAL_DMA_IRQHandler+0x1bc>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d040      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2a      	ldr	r2, [pc, #168]	; (8006724 <HAL_DMA_IRQHandler+0x1c0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d03b      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a28      	ldr	r2, [pc, #160]	; (8006728 <HAL_DMA_IRQHandler+0x1c4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d036      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a27      	ldr	r2, [pc, #156]	; (800672c <HAL_DMA_IRQHandler+0x1c8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d031      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a25      	ldr	r2, [pc, #148]	; (8006730 <HAL_DMA_IRQHandler+0x1cc>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d02c      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a24      	ldr	r2, [pc, #144]	; (8006734 <HAL_DMA_IRQHandler+0x1d0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d027      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a22      	ldr	r2, [pc, #136]	; (8006738 <HAL_DMA_IRQHandler+0x1d4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d022      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a21      	ldr	r2, [pc, #132]	; (800673c <HAL_DMA_IRQHandler+0x1d8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d01d      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <HAL_DMA_IRQHandler+0x1dc>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d018      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <HAL_DMA_IRQHandler+0x1e0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d013      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <HAL_DMA_IRQHandler+0x1e4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00e      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1b      	ldr	r2, [pc, #108]	; (800674c <HAL_DMA_IRQHandler+0x1e8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d009      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a19      	ldr	r2, [pc, #100]	; (8006750 <HAL_DMA_IRQHandler+0x1ec>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d004      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x194>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a18      	ldr	r2, [pc, #96]	; (8006754 <HAL_DMA_IRQHandler+0x1f0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d12f      	bne.n	8006758 <HAL_DMA_IRQHandler+0x1f4>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	bf14      	ite	ne
 8006706:	2301      	movne	r3, #1
 8006708:	2300      	moveq	r3, #0
 800670a:	b2db      	uxtb	r3, r3
 800670c:	e02e      	b.n	800676c <HAL_DMA_IRQHandler+0x208>
 800670e:	bf00      	nop
 8006710:	20000030 	.word	0x20000030
 8006714:	1b4e81b5 	.word	0x1b4e81b5
 8006718:	40020010 	.word	0x40020010
 800671c:	40020028 	.word	0x40020028
 8006720:	40020040 	.word	0x40020040
 8006724:	40020058 	.word	0x40020058
 8006728:	40020070 	.word	0x40020070
 800672c:	40020088 	.word	0x40020088
 8006730:	400200a0 	.word	0x400200a0
 8006734:	400200b8 	.word	0x400200b8
 8006738:	40020410 	.word	0x40020410
 800673c:	40020428 	.word	0x40020428
 8006740:	40020440 	.word	0x40020440
 8006744:	40020458 	.word	0x40020458
 8006748:	40020470 	.word	0x40020470
 800674c:	40020488 	.word	0x40020488
 8006750:	400204a0 	.word	0x400204a0
 8006754:	400204b8 	.word	0x400204b8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	bf14      	ite	ne
 8006766:	2301      	movne	r3, #1
 8006768:	2300      	moveq	r3, #0
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d015      	beq.n	800679c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0204 	bic.w	r2, r2, #4
 800677e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	2208      	movs	r2, #8
 800678a:	409a      	lsls	r2, r3
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006794:	f043 0201 	orr.w	r2, r3, #1
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	fa22 f303 	lsr.w	r3, r2, r3
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d06e      	beq.n	8006890 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a69      	ldr	r2, [pc, #420]	; (800695c <HAL_DMA_IRQHandler+0x3f8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d04a      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a67      	ldr	r2, [pc, #412]	; (8006960 <HAL_DMA_IRQHandler+0x3fc>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d045      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a66      	ldr	r2, [pc, #408]	; (8006964 <HAL_DMA_IRQHandler+0x400>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d040      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a64      	ldr	r2, [pc, #400]	; (8006968 <HAL_DMA_IRQHandler+0x404>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d03b      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a63      	ldr	r2, [pc, #396]	; (800696c <HAL_DMA_IRQHandler+0x408>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d036      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a61      	ldr	r2, [pc, #388]	; (8006970 <HAL_DMA_IRQHandler+0x40c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d031      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a60      	ldr	r2, [pc, #384]	; (8006974 <HAL_DMA_IRQHandler+0x410>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d02c      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a5e      	ldr	r2, [pc, #376]	; (8006978 <HAL_DMA_IRQHandler+0x414>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d027      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a5d      	ldr	r2, [pc, #372]	; (800697c <HAL_DMA_IRQHandler+0x418>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d022      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a5b      	ldr	r2, [pc, #364]	; (8006980 <HAL_DMA_IRQHandler+0x41c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01d      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a5a      	ldr	r2, [pc, #360]	; (8006984 <HAL_DMA_IRQHandler+0x420>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d018      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a58      	ldr	r2, [pc, #352]	; (8006988 <HAL_DMA_IRQHandler+0x424>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a57      	ldr	r2, [pc, #348]	; (800698c <HAL_DMA_IRQHandler+0x428>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00e      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a55      	ldr	r2, [pc, #340]	; (8006990 <HAL_DMA_IRQHandler+0x42c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d009      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a54      	ldr	r2, [pc, #336]	; (8006994 <HAL_DMA_IRQHandler+0x430>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d004      	beq.n	8006852 <HAL_DMA_IRQHandler+0x2ee>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a52      	ldr	r2, [pc, #328]	; (8006998 <HAL_DMA_IRQHandler+0x434>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d10a      	bne.n	8006868 <HAL_DMA_IRQHandler+0x304>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685c:	2b00      	cmp	r3, #0
 800685e:	bf14      	ite	ne
 8006860:	2301      	movne	r3, #1
 8006862:	2300      	moveq	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	e003      	b.n	8006870 <HAL_DMA_IRQHandler+0x30c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2300      	movs	r3, #0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00d      	beq.n	8006890 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006878:	f003 031f 	and.w	r3, r3, #31
 800687c:	2201      	movs	r2, #1
 800687e:	409a      	lsls	r2, r3
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006888:	f043 0202 	orr.w	r2, r3, #2
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006894:	f003 031f 	and.w	r3, r3, #31
 8006898:	2204      	movs	r2, #4
 800689a:	409a      	lsls	r2, r3
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	4013      	ands	r3, r2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 808f 	beq.w	80069c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a2c      	ldr	r2, [pc, #176]	; (800695c <HAL_DMA_IRQHandler+0x3f8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d04a      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a2a      	ldr	r2, [pc, #168]	; (8006960 <HAL_DMA_IRQHandler+0x3fc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d045      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a29      	ldr	r2, [pc, #164]	; (8006964 <HAL_DMA_IRQHandler+0x400>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d040      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a27      	ldr	r2, [pc, #156]	; (8006968 <HAL_DMA_IRQHandler+0x404>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d03b      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a26      	ldr	r2, [pc, #152]	; (800696c <HAL_DMA_IRQHandler+0x408>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d036      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a24      	ldr	r2, [pc, #144]	; (8006970 <HAL_DMA_IRQHandler+0x40c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d031      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a23      	ldr	r2, [pc, #140]	; (8006974 <HAL_DMA_IRQHandler+0x410>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d02c      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a21      	ldr	r2, [pc, #132]	; (8006978 <HAL_DMA_IRQHandler+0x414>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d027      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a20      	ldr	r2, [pc, #128]	; (800697c <HAL_DMA_IRQHandler+0x418>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d022      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1e      	ldr	r2, [pc, #120]	; (8006980 <HAL_DMA_IRQHandler+0x41c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01d      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <HAL_DMA_IRQHandler+0x420>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d018      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a1b      	ldr	r2, [pc, #108]	; (8006988 <HAL_DMA_IRQHandler+0x424>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1a      	ldr	r2, [pc, #104]	; (800698c <HAL_DMA_IRQHandler+0x428>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00e      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a18      	ldr	r2, [pc, #96]	; (8006990 <HAL_DMA_IRQHandler+0x42c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d009      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a17      	ldr	r2, [pc, #92]	; (8006994 <HAL_DMA_IRQHandler+0x430>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <HAL_DMA_IRQHandler+0x3e2>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a15      	ldr	r2, [pc, #84]	; (8006998 <HAL_DMA_IRQHandler+0x434>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d12a      	bne.n	800699c <HAL_DMA_IRQHandler+0x438>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	bf14      	ite	ne
 8006954:	2301      	movne	r3, #1
 8006956:	2300      	moveq	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	e023      	b.n	80069a4 <HAL_DMA_IRQHandler+0x440>
 800695c:	40020010 	.word	0x40020010
 8006960:	40020028 	.word	0x40020028
 8006964:	40020040 	.word	0x40020040
 8006968:	40020058 	.word	0x40020058
 800696c:	40020070 	.word	0x40020070
 8006970:	40020088 	.word	0x40020088
 8006974:	400200a0 	.word	0x400200a0
 8006978:	400200b8 	.word	0x400200b8
 800697c:	40020410 	.word	0x40020410
 8006980:	40020428 	.word	0x40020428
 8006984:	40020440 	.word	0x40020440
 8006988:	40020458 	.word	0x40020458
 800698c:	40020470 	.word	0x40020470
 8006990:	40020488 	.word	0x40020488
 8006994:	400204a0 	.word	0x400204a0
 8006998:	400204b8 	.word	0x400204b8
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2300      	movs	r3, #0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00d      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	f003 031f 	and.w	r3, r3, #31
 80069b0:	2204      	movs	r2, #4
 80069b2:	409a      	lsls	r2, r3
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	f043 0204 	orr.w	r2, r3, #4
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	2210      	movs	r2, #16
 80069ce:	409a      	lsls	r2, r3
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 80a6 	beq.w	8006b26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a85      	ldr	r2, [pc, #532]	; (8006bf4 <HAL_DMA_IRQHandler+0x690>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d04a      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a83      	ldr	r2, [pc, #524]	; (8006bf8 <HAL_DMA_IRQHandler+0x694>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d045      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a82      	ldr	r2, [pc, #520]	; (8006bfc <HAL_DMA_IRQHandler+0x698>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d040      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a80      	ldr	r2, [pc, #512]	; (8006c00 <HAL_DMA_IRQHandler+0x69c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d03b      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a7f      	ldr	r2, [pc, #508]	; (8006c04 <HAL_DMA_IRQHandler+0x6a0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d036      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a7d      	ldr	r2, [pc, #500]	; (8006c08 <HAL_DMA_IRQHandler+0x6a4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d031      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a7c      	ldr	r2, [pc, #496]	; (8006c0c <HAL_DMA_IRQHandler+0x6a8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d02c      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a7a      	ldr	r2, [pc, #488]	; (8006c10 <HAL_DMA_IRQHandler+0x6ac>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d027      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a79      	ldr	r2, [pc, #484]	; (8006c14 <HAL_DMA_IRQHandler+0x6b0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d022      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a77      	ldr	r2, [pc, #476]	; (8006c18 <HAL_DMA_IRQHandler+0x6b4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01d      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a76      	ldr	r2, [pc, #472]	; (8006c1c <HAL_DMA_IRQHandler+0x6b8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d018      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a74      	ldr	r2, [pc, #464]	; (8006c20 <HAL_DMA_IRQHandler+0x6bc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a73      	ldr	r2, [pc, #460]	; (8006c24 <HAL_DMA_IRQHandler+0x6c0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00e      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a71      	ldr	r2, [pc, #452]	; (8006c28 <HAL_DMA_IRQHandler+0x6c4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d009      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a70      	ldr	r2, [pc, #448]	; (8006c2c <HAL_DMA_IRQHandler+0x6c8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d004      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x516>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a6e      	ldr	r2, [pc, #440]	; (8006c30 <HAL_DMA_IRQHandler+0x6cc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d10a      	bne.n	8006a90 <HAL_DMA_IRQHandler+0x52c>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0308 	and.w	r3, r3, #8
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf14      	ite	ne
 8006a88:	2301      	movne	r3, #1
 8006a8a:	2300      	moveq	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	e009      	b.n	8006aa4 <HAL_DMA_IRQHandler+0x540>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0304 	and.w	r3, r3, #4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	bf14      	ite	ne
 8006a9e:	2301      	movne	r3, #1
 8006aa0:	2300      	moveq	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d03e      	beq.n	8006b26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2210      	movs	r2, #16
 8006ab2:	409a      	lsls	r2, r3
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d018      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d108      	bne.n	8006ae6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d024      	beq.n	8006b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	4798      	blx	r3
 8006ae4:	e01f      	b.n	8006b26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d01b      	beq.n	8006b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	4798      	blx	r3
 8006af6:	e016      	b.n	8006b26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d107      	bne.n	8006b16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 0208 	bic.w	r2, r2, #8
 8006b14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	2220      	movs	r2, #32
 8006b30:	409a      	lsls	r2, r3
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	4013      	ands	r3, r2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 8110 	beq.w	8006d5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a2c      	ldr	r2, [pc, #176]	; (8006bf4 <HAL_DMA_IRQHandler+0x690>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d04a      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a2b      	ldr	r2, [pc, #172]	; (8006bf8 <HAL_DMA_IRQHandler+0x694>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d045      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a29      	ldr	r2, [pc, #164]	; (8006bfc <HAL_DMA_IRQHandler+0x698>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d040      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a28      	ldr	r2, [pc, #160]	; (8006c00 <HAL_DMA_IRQHandler+0x69c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d03b      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a26      	ldr	r2, [pc, #152]	; (8006c04 <HAL_DMA_IRQHandler+0x6a0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d036      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a25      	ldr	r2, [pc, #148]	; (8006c08 <HAL_DMA_IRQHandler+0x6a4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d031      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a23      	ldr	r2, [pc, #140]	; (8006c0c <HAL_DMA_IRQHandler+0x6a8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d02c      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a22      	ldr	r2, [pc, #136]	; (8006c10 <HAL_DMA_IRQHandler+0x6ac>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d027      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a20      	ldr	r2, [pc, #128]	; (8006c14 <HAL_DMA_IRQHandler+0x6b0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d022      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a1f      	ldr	r2, [pc, #124]	; (8006c18 <HAL_DMA_IRQHandler+0x6b4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d01d      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a1d      	ldr	r2, [pc, #116]	; (8006c1c <HAL_DMA_IRQHandler+0x6b8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d018      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a1c      	ldr	r2, [pc, #112]	; (8006c20 <HAL_DMA_IRQHandler+0x6bc>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d013      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <HAL_DMA_IRQHandler+0x6c0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00e      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a19      	ldr	r2, [pc, #100]	; (8006c28 <HAL_DMA_IRQHandler+0x6c4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d009      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a17      	ldr	r2, [pc, #92]	; (8006c2c <HAL_DMA_IRQHandler+0x6c8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d004      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x678>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <HAL_DMA_IRQHandler+0x6cc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d12b      	bne.n	8006c34 <HAL_DMA_IRQHandler+0x6d0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0310 	and.w	r3, r3, #16
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bf14      	ite	ne
 8006bea:	2301      	movne	r3, #1
 8006bec:	2300      	moveq	r3, #0
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	e02a      	b.n	8006c48 <HAL_DMA_IRQHandler+0x6e4>
 8006bf2:	bf00      	nop
 8006bf4:	40020010 	.word	0x40020010
 8006bf8:	40020028 	.word	0x40020028
 8006bfc:	40020040 	.word	0x40020040
 8006c00:	40020058 	.word	0x40020058
 8006c04:	40020070 	.word	0x40020070
 8006c08:	40020088 	.word	0x40020088
 8006c0c:	400200a0 	.word	0x400200a0
 8006c10:	400200b8 	.word	0x400200b8
 8006c14:	40020410 	.word	0x40020410
 8006c18:	40020428 	.word	0x40020428
 8006c1c:	40020440 	.word	0x40020440
 8006c20:	40020458 	.word	0x40020458
 8006c24:	40020470 	.word	0x40020470
 8006c28:	40020488 	.word	0x40020488
 8006c2c:	400204a0 	.word	0x400204a0
 8006c30:	400204b8 	.word	0x400204b8
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bf14      	ite	ne
 8006c42:	2301      	movne	r3, #1
 8006c44:	2300      	moveq	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 8087 	beq.w	8006d5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c52:	f003 031f 	and.w	r3, r3, #31
 8006c56:	2220      	movs	r2, #32
 8006c58:	409a      	lsls	r2, r3
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d139      	bne.n	8006cde <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0216 	bic.w	r2, r2, #22
 8006c78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	695a      	ldr	r2, [r3, #20]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d103      	bne.n	8006c9a <HAL_DMA_IRQHandler+0x736>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d007      	beq.n	8006caa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0208 	bic.w	r2, r2, #8
 8006ca8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	223f      	movs	r2, #63	; 0x3f
 8006cb4:	409a      	lsls	r2, r3
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 8382 	beq.w	80073d8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
          }
          return;
 8006cdc:	e37c      	b.n	80073d8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d018      	beq.n	8006d1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d108      	bne.n	8006d0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d02c      	beq.n	8006d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	4798      	blx	r3
 8006d0a:	e027      	b.n	8006d5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d023      	beq.n	8006d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	4798      	blx	r3
 8006d1c:	e01e      	b.n	8006d5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10f      	bne.n	8006d4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0210 	bic.w	r2, r2, #16
 8006d3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 833e 	beq.w	80073e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8088 	beq.w	8006e84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2204      	movs	r2, #4
 8006d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a8e      	ldr	r2, [pc, #568]	; (8006fbc <HAL_DMA_IRQHandler+0xa58>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d04a      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a8d      	ldr	r2, [pc, #564]	; (8006fc0 <HAL_DMA_IRQHandler+0xa5c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d045      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a8b      	ldr	r2, [pc, #556]	; (8006fc4 <HAL_DMA_IRQHandler+0xa60>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d040      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a8a      	ldr	r2, [pc, #552]	; (8006fc8 <HAL_DMA_IRQHandler+0xa64>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d03b      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a88      	ldr	r2, [pc, #544]	; (8006fcc <HAL_DMA_IRQHandler+0xa68>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d036      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a87      	ldr	r2, [pc, #540]	; (8006fd0 <HAL_DMA_IRQHandler+0xa6c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d031      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a85      	ldr	r2, [pc, #532]	; (8006fd4 <HAL_DMA_IRQHandler+0xa70>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d02c      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a84      	ldr	r2, [pc, #528]	; (8006fd8 <HAL_DMA_IRQHandler+0xa74>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d027      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a82      	ldr	r2, [pc, #520]	; (8006fdc <HAL_DMA_IRQHandler+0xa78>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d022      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a81      	ldr	r2, [pc, #516]	; (8006fe0 <HAL_DMA_IRQHandler+0xa7c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d01d      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a7f      	ldr	r2, [pc, #508]	; (8006fe4 <HAL_DMA_IRQHandler+0xa80>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d018      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a7e      	ldr	r2, [pc, #504]	; (8006fe8 <HAL_DMA_IRQHandler+0xa84>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d013      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a7c      	ldr	r2, [pc, #496]	; (8006fec <HAL_DMA_IRQHandler+0xa88>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00e      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a7b      	ldr	r2, [pc, #492]	; (8006ff0 <HAL_DMA_IRQHandler+0xa8c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d009      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a79      	ldr	r2, [pc, #484]	; (8006ff4 <HAL_DMA_IRQHandler+0xa90>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x8b8>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a78      	ldr	r2, [pc, #480]	; (8006ff8 <HAL_DMA_IRQHandler+0xa94>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d108      	bne.n	8006e2e <HAL_DMA_IRQHandler+0x8ca>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0201 	bic.w	r2, r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	e007      	b.n	8006e3e <HAL_DMA_IRQHandler+0x8da>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0201 	bic.w	r2, r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3301      	adds	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d307      	bcc.n	8006e5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f2      	bne.n	8006e3e <HAL_DMA_IRQHandler+0x8da>
 8006e58:	e000      	b.n	8006e5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006e5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d004      	beq.n	8006e74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2203      	movs	r2, #3
 8006e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006e72:	e003      	b.n	8006e7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 82aa 	beq.w	80073e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
 8006e96:	e2a4      	b.n	80073e2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a57      	ldr	r2, [pc, #348]	; (8006ffc <HAL_DMA_IRQHandler+0xa98>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d04a      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a56      	ldr	r2, [pc, #344]	; (8007000 <HAL_DMA_IRQHandler+0xa9c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d045      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a54      	ldr	r2, [pc, #336]	; (8007004 <HAL_DMA_IRQHandler+0xaa0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d040      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a53      	ldr	r2, [pc, #332]	; (8007008 <HAL_DMA_IRQHandler+0xaa4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d03b      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a51      	ldr	r2, [pc, #324]	; (800700c <HAL_DMA_IRQHandler+0xaa8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d036      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a50      	ldr	r2, [pc, #320]	; (8007010 <HAL_DMA_IRQHandler+0xaac>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d031      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a4e      	ldr	r2, [pc, #312]	; (8007014 <HAL_DMA_IRQHandler+0xab0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d02c      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a4d      	ldr	r2, [pc, #308]	; (8007018 <HAL_DMA_IRQHandler+0xab4>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d027      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a4b      	ldr	r2, [pc, #300]	; (800701c <HAL_DMA_IRQHandler+0xab8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d022      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a4a      	ldr	r2, [pc, #296]	; (8007020 <HAL_DMA_IRQHandler+0xabc>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d01d      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a48      	ldr	r2, [pc, #288]	; (8007024 <HAL_DMA_IRQHandler+0xac0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d018      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a47      	ldr	r2, [pc, #284]	; (8007028 <HAL_DMA_IRQHandler+0xac4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d013      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a45      	ldr	r2, [pc, #276]	; (800702c <HAL_DMA_IRQHandler+0xac8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00e      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a44      	ldr	r2, [pc, #272]	; (8007030 <HAL_DMA_IRQHandler+0xacc>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d009      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a42      	ldr	r2, [pc, #264]	; (8007034 <HAL_DMA_IRQHandler+0xad0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d004      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x9d4>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a41      	ldr	r2, [pc, #260]	; (8007038 <HAL_DMA_IRQHandler+0xad4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d101      	bne.n	8006f3c <HAL_DMA_IRQHandler+0x9d8>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <HAL_DMA_IRQHandler+0x9da>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 824f 	beq.w	80073e2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	2204      	movs	r2, #4
 8006f56:	409a      	lsls	r2, r3
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 80dd 	beq.w	800711c <HAL_DMA_IRQHandler+0xbb8>
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80d7 	beq.w	800711c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	2204      	movs	r2, #4
 8006f78:	409a      	lsls	r2, r3
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d059      	beq.n	800703c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 8220 	beq.w	80073dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fa4:	e21a      	b.n	80073dc <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 8216 	beq.w	80073dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fb8:	e210      	b.n	80073dc <HAL_DMA_IRQHandler+0xe78>
 8006fba:	bf00      	nop
 8006fbc:	40020010 	.word	0x40020010
 8006fc0:	40020028 	.word	0x40020028
 8006fc4:	40020040 	.word	0x40020040
 8006fc8:	40020058 	.word	0x40020058
 8006fcc:	40020070 	.word	0x40020070
 8006fd0:	40020088 	.word	0x40020088
 8006fd4:	400200a0 	.word	0x400200a0
 8006fd8:	400200b8 	.word	0x400200b8
 8006fdc:	40020410 	.word	0x40020410
 8006fe0:	40020428 	.word	0x40020428
 8006fe4:	40020440 	.word	0x40020440
 8006fe8:	40020458 	.word	0x40020458
 8006fec:	40020470 	.word	0x40020470
 8006ff0:	40020488 	.word	0x40020488
 8006ff4:	400204a0 	.word	0x400204a0
 8006ff8:	400204b8 	.word	0x400204b8
 8006ffc:	48022c08 	.word	0x48022c08
 8007000:	48022c1c 	.word	0x48022c1c
 8007004:	48022c30 	.word	0x48022c30
 8007008:	48022c44 	.word	0x48022c44
 800700c:	48022c58 	.word	0x48022c58
 8007010:	48022c6c 	.word	0x48022c6c
 8007014:	48022c80 	.word	0x48022c80
 8007018:	48022c94 	.word	0x48022c94
 800701c:	58025408 	.word	0x58025408
 8007020:	5802541c 	.word	0x5802541c
 8007024:	58025430 	.word	0x58025430
 8007028:	58025444 	.word	0x58025444
 800702c:	58025458 	.word	0x58025458
 8007030:	5802546c 	.word	0x5802546c
 8007034:	58025480 	.word	0x58025480
 8007038:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d160      	bne.n	8007108 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a8c      	ldr	r2, [pc, #560]	; (800727c <HAL_DMA_IRQHandler+0xd18>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d04a      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a8a      	ldr	r2, [pc, #552]	; (8007280 <HAL_DMA_IRQHandler+0xd1c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d045      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a89      	ldr	r2, [pc, #548]	; (8007284 <HAL_DMA_IRQHandler+0xd20>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d040      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a87      	ldr	r2, [pc, #540]	; (8007288 <HAL_DMA_IRQHandler+0xd24>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d03b      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a86      	ldr	r2, [pc, #536]	; (800728c <HAL_DMA_IRQHandler+0xd28>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d036      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a84      	ldr	r2, [pc, #528]	; (8007290 <HAL_DMA_IRQHandler+0xd2c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d031      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a83      	ldr	r2, [pc, #524]	; (8007294 <HAL_DMA_IRQHandler+0xd30>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d02c      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a81      	ldr	r2, [pc, #516]	; (8007298 <HAL_DMA_IRQHandler+0xd34>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d027      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a80      	ldr	r2, [pc, #512]	; (800729c <HAL_DMA_IRQHandler+0xd38>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d022      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a7e      	ldr	r2, [pc, #504]	; (80072a0 <HAL_DMA_IRQHandler+0xd3c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d01d      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a7d      	ldr	r2, [pc, #500]	; (80072a4 <HAL_DMA_IRQHandler+0xd40>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d018      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a7b      	ldr	r2, [pc, #492]	; (80072a8 <HAL_DMA_IRQHandler+0xd44>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d013      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a7a      	ldr	r2, [pc, #488]	; (80072ac <HAL_DMA_IRQHandler+0xd48>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00e      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a78      	ldr	r2, [pc, #480]	; (80072b0 <HAL_DMA_IRQHandler+0xd4c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d009      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a77      	ldr	r2, [pc, #476]	; (80072b4 <HAL_DMA_IRQHandler+0xd50>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d004      	beq.n	80070e6 <HAL_DMA_IRQHandler+0xb82>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a75      	ldr	r2, [pc, #468]	; (80072b8 <HAL_DMA_IRQHandler+0xd54>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d108      	bne.n	80070f8 <HAL_DMA_IRQHandler+0xb94>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 0208 	bic.w	r2, r2, #8
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	e007      	b.n	8007108 <HAL_DMA_IRQHandler+0xba4>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0204 	bic.w	r2, r2, #4
 8007106:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 8165 	beq.w	80073dc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800711a:	e15f      	b.n	80073dc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007120:	f003 031f 	and.w	r3, r3, #31
 8007124:	2202      	movs	r2, #2
 8007126:	409a      	lsls	r2, r3
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	4013      	ands	r3, r2
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 80c5 	beq.w	80072bc <HAL_DMA_IRQHandler+0xd58>
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 80bf 	beq.w	80072bc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	2202      	movs	r2, #2
 8007148:	409a      	lsls	r2, r3
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d018      	beq.n	800718a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 813a 	beq.w	80073e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007174:	e134      	b.n	80073e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 8130 	beq.w	80073e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007188:	e12a      	b.n	80073e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d168      	bne.n	8007266 <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a38      	ldr	r2, [pc, #224]	; (800727c <HAL_DMA_IRQHandler+0xd18>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d04a      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a37      	ldr	r2, [pc, #220]	; (8007280 <HAL_DMA_IRQHandler+0xd1c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d045      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a35      	ldr	r2, [pc, #212]	; (8007284 <HAL_DMA_IRQHandler+0xd20>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d040      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a34      	ldr	r2, [pc, #208]	; (8007288 <HAL_DMA_IRQHandler+0xd24>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d03b      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a32      	ldr	r2, [pc, #200]	; (800728c <HAL_DMA_IRQHandler+0xd28>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d036      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a31      	ldr	r2, [pc, #196]	; (8007290 <HAL_DMA_IRQHandler+0xd2c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d031      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2f      	ldr	r2, [pc, #188]	; (8007294 <HAL_DMA_IRQHandler+0xd30>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d02c      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a2e      	ldr	r2, [pc, #184]	; (8007298 <HAL_DMA_IRQHandler+0xd34>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d027      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2c      	ldr	r2, [pc, #176]	; (800729c <HAL_DMA_IRQHandler+0xd38>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d022      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2b      	ldr	r2, [pc, #172]	; (80072a0 <HAL_DMA_IRQHandler+0xd3c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d01d      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a29      	ldr	r2, [pc, #164]	; (80072a4 <HAL_DMA_IRQHandler+0xd40>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d018      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a28      	ldr	r2, [pc, #160]	; (80072a8 <HAL_DMA_IRQHandler+0xd44>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d013      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a26      	ldr	r2, [pc, #152]	; (80072ac <HAL_DMA_IRQHandler+0xd48>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00e      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a25      	ldr	r2, [pc, #148]	; (80072b0 <HAL_DMA_IRQHandler+0xd4c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d009      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a23      	ldr	r2, [pc, #140]	; (80072b4 <HAL_DMA_IRQHandler+0xd50>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_DMA_IRQHandler+0xcd0>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a22      	ldr	r2, [pc, #136]	; (80072b8 <HAL_DMA_IRQHandler+0xd54>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d108      	bne.n	8007246 <HAL_DMA_IRQHandler+0xce2>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0214 	bic.w	r2, r2, #20
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	e007      	b.n	8007256 <HAL_DMA_IRQHandler+0xcf2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 020a 	bic.w	r2, r2, #10
 8007254:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 80b8 	beq.w	80073e0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007278:	e0b2      	b.n	80073e0 <HAL_DMA_IRQHandler+0xe7c>
 800727a:	bf00      	nop
 800727c:	40020010 	.word	0x40020010
 8007280:	40020028 	.word	0x40020028
 8007284:	40020040 	.word	0x40020040
 8007288:	40020058 	.word	0x40020058
 800728c:	40020070 	.word	0x40020070
 8007290:	40020088 	.word	0x40020088
 8007294:	400200a0 	.word	0x400200a0
 8007298:	400200b8 	.word	0x400200b8
 800729c:	40020410 	.word	0x40020410
 80072a0:	40020428 	.word	0x40020428
 80072a4:	40020440 	.word	0x40020440
 80072a8:	40020458 	.word	0x40020458
 80072ac:	40020470 	.word	0x40020470
 80072b0:	40020488 	.word	0x40020488
 80072b4:	400204a0 	.word	0x400204a0
 80072b8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c0:	f003 031f 	and.w	r3, r3, #31
 80072c4:	2208      	movs	r2, #8
 80072c6:	409a      	lsls	r2, r3
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8088 	beq.w	80073e2 <HAL_DMA_IRQHandler+0xe7e>
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 8082 	beq.w	80073e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a41      	ldr	r2, [pc, #260]	; (80073e8 <HAL_DMA_IRQHandler+0xe84>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d04a      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a3f      	ldr	r2, [pc, #252]	; (80073ec <HAL_DMA_IRQHandler+0xe88>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d045      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a3e      	ldr	r2, [pc, #248]	; (80073f0 <HAL_DMA_IRQHandler+0xe8c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d040      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a3c      	ldr	r2, [pc, #240]	; (80073f4 <HAL_DMA_IRQHandler+0xe90>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d03b      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a3b      	ldr	r2, [pc, #236]	; (80073f8 <HAL_DMA_IRQHandler+0xe94>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d036      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a39      	ldr	r2, [pc, #228]	; (80073fc <HAL_DMA_IRQHandler+0xe98>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d031      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a38      	ldr	r2, [pc, #224]	; (8007400 <HAL_DMA_IRQHandler+0xe9c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d02c      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a36      	ldr	r2, [pc, #216]	; (8007404 <HAL_DMA_IRQHandler+0xea0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d027      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a35      	ldr	r2, [pc, #212]	; (8007408 <HAL_DMA_IRQHandler+0xea4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d022      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a33      	ldr	r2, [pc, #204]	; (800740c <HAL_DMA_IRQHandler+0xea8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d01d      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a32      	ldr	r2, [pc, #200]	; (8007410 <HAL_DMA_IRQHandler+0xeac>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d018      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a30      	ldr	r2, [pc, #192]	; (8007414 <HAL_DMA_IRQHandler+0xeb0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d013      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a2f      	ldr	r2, [pc, #188]	; (8007418 <HAL_DMA_IRQHandler+0xeb4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00e      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a2d      	ldr	r2, [pc, #180]	; (800741c <HAL_DMA_IRQHandler+0xeb8>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d009      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a2c      	ldr	r2, [pc, #176]	; (8007420 <HAL_DMA_IRQHandler+0xebc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d004      	beq.n	800737e <HAL_DMA_IRQHandler+0xe1a>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2a      	ldr	r2, [pc, #168]	; (8007424 <HAL_DMA_IRQHandler+0xec0>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d108      	bne.n	8007390 <HAL_DMA_IRQHandler+0xe2c>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 021c 	bic.w	r2, r2, #28
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e007      	b.n	80073a0 <HAL_DMA_IRQHandler+0xe3c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 020e 	bic.w	r2, r2, #14
 800739e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a4:	f003 031f 	and.w	r3, r3, #31
 80073a8:	2201      	movs	r2, #1
 80073aa:	409a      	lsls	r2, r3
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d009      	beq.n	80073e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	4798      	blx	r3
 80073d6:	e004      	b.n	80073e2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80073d8:	bf00      	nop
 80073da:	e002      	b.n	80073e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073dc:	bf00      	nop
 80073de:	e000      	b.n	80073e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073e2:	3728      	adds	r7, #40	; 0x28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	40020010 	.word	0x40020010
 80073ec:	40020028 	.word	0x40020028
 80073f0:	40020040 	.word	0x40020040
 80073f4:	40020058 	.word	0x40020058
 80073f8:	40020070 	.word	0x40020070
 80073fc:	40020088 	.word	0x40020088
 8007400:	400200a0 	.word	0x400200a0
 8007404:	400200b8 	.word	0x400200b8
 8007408:	40020410 	.word	0x40020410
 800740c:	40020428 	.word	0x40020428
 8007410:	40020440 	.word	0x40020440
 8007414:	40020458 	.word	0x40020458
 8007418:	40020470 	.word	0x40020470
 800741c:	40020488 	.word	0x40020488
 8007420:	400204a0 	.word	0x400204a0
 8007424:	400204b8 	.word	0x400204b8

08007428 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007452:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007458:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a84      	ldr	r2, [pc, #528]	; (8007670 <DMA_SetConfig+0x230>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d072      	beq.n	800754a <DMA_SetConfig+0x10a>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a82      	ldr	r2, [pc, #520]	; (8007674 <DMA_SetConfig+0x234>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d06d      	beq.n	800754a <DMA_SetConfig+0x10a>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a81      	ldr	r2, [pc, #516]	; (8007678 <DMA_SetConfig+0x238>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d068      	beq.n	800754a <DMA_SetConfig+0x10a>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a7f      	ldr	r2, [pc, #508]	; (800767c <DMA_SetConfig+0x23c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d063      	beq.n	800754a <DMA_SetConfig+0x10a>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a7e      	ldr	r2, [pc, #504]	; (8007680 <DMA_SetConfig+0x240>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d05e      	beq.n	800754a <DMA_SetConfig+0x10a>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a7c      	ldr	r2, [pc, #496]	; (8007684 <DMA_SetConfig+0x244>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d059      	beq.n	800754a <DMA_SetConfig+0x10a>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a7b      	ldr	r2, [pc, #492]	; (8007688 <DMA_SetConfig+0x248>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d054      	beq.n	800754a <DMA_SetConfig+0x10a>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a79      	ldr	r2, [pc, #484]	; (800768c <DMA_SetConfig+0x24c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d04f      	beq.n	800754a <DMA_SetConfig+0x10a>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a78      	ldr	r2, [pc, #480]	; (8007690 <DMA_SetConfig+0x250>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d04a      	beq.n	800754a <DMA_SetConfig+0x10a>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a76      	ldr	r2, [pc, #472]	; (8007694 <DMA_SetConfig+0x254>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d045      	beq.n	800754a <DMA_SetConfig+0x10a>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a75      	ldr	r2, [pc, #468]	; (8007698 <DMA_SetConfig+0x258>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d040      	beq.n	800754a <DMA_SetConfig+0x10a>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a73      	ldr	r2, [pc, #460]	; (800769c <DMA_SetConfig+0x25c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d03b      	beq.n	800754a <DMA_SetConfig+0x10a>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a72      	ldr	r2, [pc, #456]	; (80076a0 <DMA_SetConfig+0x260>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d036      	beq.n	800754a <DMA_SetConfig+0x10a>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a70      	ldr	r2, [pc, #448]	; (80076a4 <DMA_SetConfig+0x264>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d031      	beq.n	800754a <DMA_SetConfig+0x10a>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a6f      	ldr	r2, [pc, #444]	; (80076a8 <DMA_SetConfig+0x268>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d02c      	beq.n	800754a <DMA_SetConfig+0x10a>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a6d      	ldr	r2, [pc, #436]	; (80076ac <DMA_SetConfig+0x26c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d027      	beq.n	800754a <DMA_SetConfig+0x10a>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a6c      	ldr	r2, [pc, #432]	; (80076b0 <DMA_SetConfig+0x270>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d022      	beq.n	800754a <DMA_SetConfig+0x10a>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a6a      	ldr	r2, [pc, #424]	; (80076b4 <DMA_SetConfig+0x274>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d01d      	beq.n	800754a <DMA_SetConfig+0x10a>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a69      	ldr	r2, [pc, #420]	; (80076b8 <DMA_SetConfig+0x278>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d018      	beq.n	800754a <DMA_SetConfig+0x10a>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a67      	ldr	r2, [pc, #412]	; (80076bc <DMA_SetConfig+0x27c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d013      	beq.n	800754a <DMA_SetConfig+0x10a>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a66      	ldr	r2, [pc, #408]	; (80076c0 <DMA_SetConfig+0x280>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00e      	beq.n	800754a <DMA_SetConfig+0x10a>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a64      	ldr	r2, [pc, #400]	; (80076c4 <DMA_SetConfig+0x284>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d009      	beq.n	800754a <DMA_SetConfig+0x10a>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a63      	ldr	r2, [pc, #396]	; (80076c8 <DMA_SetConfig+0x288>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d004      	beq.n	800754a <DMA_SetConfig+0x10a>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a61      	ldr	r2, [pc, #388]	; (80076cc <DMA_SetConfig+0x28c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d101      	bne.n	800754e <DMA_SetConfig+0x10e>
 800754a:	2301      	movs	r3, #1
 800754c:	e000      	b.n	8007550 <DMA_SetConfig+0x110>
 800754e:	2300      	movs	r3, #0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00d      	beq.n	8007570 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800755c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800756e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a3e      	ldr	r2, [pc, #248]	; (8007670 <DMA_SetConfig+0x230>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d04a      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a3d      	ldr	r2, [pc, #244]	; (8007674 <DMA_SetConfig+0x234>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d045      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a3b      	ldr	r2, [pc, #236]	; (8007678 <DMA_SetConfig+0x238>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d040      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a3a      	ldr	r2, [pc, #232]	; (800767c <DMA_SetConfig+0x23c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d03b      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a38      	ldr	r2, [pc, #224]	; (8007680 <DMA_SetConfig+0x240>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d036      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a37      	ldr	r2, [pc, #220]	; (8007684 <DMA_SetConfig+0x244>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d031      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a35      	ldr	r2, [pc, #212]	; (8007688 <DMA_SetConfig+0x248>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d02c      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a34      	ldr	r2, [pc, #208]	; (800768c <DMA_SetConfig+0x24c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d027      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a32      	ldr	r2, [pc, #200]	; (8007690 <DMA_SetConfig+0x250>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d022      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a31      	ldr	r2, [pc, #196]	; (8007694 <DMA_SetConfig+0x254>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d01d      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a2f      	ldr	r2, [pc, #188]	; (8007698 <DMA_SetConfig+0x258>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d018      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a2e      	ldr	r2, [pc, #184]	; (800769c <DMA_SetConfig+0x25c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d013      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a2c      	ldr	r2, [pc, #176]	; (80076a0 <DMA_SetConfig+0x260>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00e      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a2b      	ldr	r2, [pc, #172]	; (80076a4 <DMA_SetConfig+0x264>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d009      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a29      	ldr	r2, [pc, #164]	; (80076a8 <DMA_SetConfig+0x268>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d004      	beq.n	8007610 <DMA_SetConfig+0x1d0>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a28      	ldr	r2, [pc, #160]	; (80076ac <DMA_SetConfig+0x26c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d101      	bne.n	8007614 <DMA_SetConfig+0x1d4>
 8007610:	2301      	movs	r3, #1
 8007612:	e000      	b.n	8007616 <DMA_SetConfig+0x1d6>
 8007614:	2300      	movs	r3, #0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d05a      	beq.n	80076d0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761e:	f003 031f 	and.w	r3, r3, #31
 8007622:	223f      	movs	r2, #63	; 0x3f
 8007624:	409a      	lsls	r2, r3
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007638:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	2b40      	cmp	r3, #64	; 0x40
 8007648:	d108      	bne.n	800765c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800765a:	e0af      	b.n	80077bc <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	60da      	str	r2, [r3, #12]
}
 800766c:	e0a6      	b.n	80077bc <DMA_SetConfig+0x37c>
 800766e:	bf00      	nop
 8007670:	40020010 	.word	0x40020010
 8007674:	40020028 	.word	0x40020028
 8007678:	40020040 	.word	0x40020040
 800767c:	40020058 	.word	0x40020058
 8007680:	40020070 	.word	0x40020070
 8007684:	40020088 	.word	0x40020088
 8007688:	400200a0 	.word	0x400200a0
 800768c:	400200b8 	.word	0x400200b8
 8007690:	40020410 	.word	0x40020410
 8007694:	40020428 	.word	0x40020428
 8007698:	40020440 	.word	0x40020440
 800769c:	40020458 	.word	0x40020458
 80076a0:	40020470 	.word	0x40020470
 80076a4:	40020488 	.word	0x40020488
 80076a8:	400204a0 	.word	0x400204a0
 80076ac:	400204b8 	.word	0x400204b8
 80076b0:	58025408 	.word	0x58025408
 80076b4:	5802541c 	.word	0x5802541c
 80076b8:	58025430 	.word	0x58025430
 80076bc:	58025444 	.word	0x58025444
 80076c0:	58025458 	.word	0x58025458
 80076c4:	5802546c 	.word	0x5802546c
 80076c8:	58025480 	.word	0x58025480
 80076cc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a3c      	ldr	r2, [pc, #240]	; (80077c8 <DMA_SetConfig+0x388>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d04a      	beq.n	8007770 <DMA_SetConfig+0x330>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a3b      	ldr	r2, [pc, #236]	; (80077cc <DMA_SetConfig+0x38c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d045      	beq.n	8007770 <DMA_SetConfig+0x330>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a39      	ldr	r2, [pc, #228]	; (80077d0 <DMA_SetConfig+0x390>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d040      	beq.n	8007770 <DMA_SetConfig+0x330>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a38      	ldr	r2, [pc, #224]	; (80077d4 <DMA_SetConfig+0x394>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d03b      	beq.n	8007770 <DMA_SetConfig+0x330>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a36      	ldr	r2, [pc, #216]	; (80077d8 <DMA_SetConfig+0x398>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d036      	beq.n	8007770 <DMA_SetConfig+0x330>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a35      	ldr	r2, [pc, #212]	; (80077dc <DMA_SetConfig+0x39c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d031      	beq.n	8007770 <DMA_SetConfig+0x330>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a33      	ldr	r2, [pc, #204]	; (80077e0 <DMA_SetConfig+0x3a0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d02c      	beq.n	8007770 <DMA_SetConfig+0x330>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a32      	ldr	r2, [pc, #200]	; (80077e4 <DMA_SetConfig+0x3a4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d027      	beq.n	8007770 <DMA_SetConfig+0x330>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a30      	ldr	r2, [pc, #192]	; (80077e8 <DMA_SetConfig+0x3a8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d022      	beq.n	8007770 <DMA_SetConfig+0x330>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a2f      	ldr	r2, [pc, #188]	; (80077ec <DMA_SetConfig+0x3ac>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d01d      	beq.n	8007770 <DMA_SetConfig+0x330>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a2d      	ldr	r2, [pc, #180]	; (80077f0 <DMA_SetConfig+0x3b0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d018      	beq.n	8007770 <DMA_SetConfig+0x330>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a2c      	ldr	r2, [pc, #176]	; (80077f4 <DMA_SetConfig+0x3b4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d013      	beq.n	8007770 <DMA_SetConfig+0x330>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a2a      	ldr	r2, [pc, #168]	; (80077f8 <DMA_SetConfig+0x3b8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00e      	beq.n	8007770 <DMA_SetConfig+0x330>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a29      	ldr	r2, [pc, #164]	; (80077fc <DMA_SetConfig+0x3bc>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d009      	beq.n	8007770 <DMA_SetConfig+0x330>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a27      	ldr	r2, [pc, #156]	; (8007800 <DMA_SetConfig+0x3c0>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d004      	beq.n	8007770 <DMA_SetConfig+0x330>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a26      	ldr	r2, [pc, #152]	; (8007804 <DMA_SetConfig+0x3c4>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d101      	bne.n	8007774 <DMA_SetConfig+0x334>
 8007770:	2301      	movs	r3, #1
 8007772:	e000      	b.n	8007776 <DMA_SetConfig+0x336>
 8007774:	2300      	movs	r3, #0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d020      	beq.n	80077bc <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777e:	f003 031f 	and.w	r3, r3, #31
 8007782:	2201      	movs	r2, #1
 8007784:	409a      	lsls	r2, r3
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d108      	bne.n	80077ac <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	60da      	str	r2, [r3, #12]
}
 80077aa:	e007      	b.n	80077bc <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	60da      	str	r2, [r3, #12]
}
 80077bc:	bf00      	nop
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	48022c08 	.word	0x48022c08
 80077cc:	48022c1c 	.word	0x48022c1c
 80077d0:	48022c30 	.word	0x48022c30
 80077d4:	48022c44 	.word	0x48022c44
 80077d8:	48022c58 	.word	0x48022c58
 80077dc:	48022c6c 	.word	0x48022c6c
 80077e0:	48022c80 	.word	0x48022c80
 80077e4:	48022c94 	.word	0x48022c94
 80077e8:	58025408 	.word	0x58025408
 80077ec:	5802541c 	.word	0x5802541c
 80077f0:	58025430 	.word	0x58025430
 80077f4:	58025444 	.word	0x58025444
 80077f8:	58025458 	.word	0x58025458
 80077fc:	5802546c 	.word	0x5802546c
 8007800:	58025480 	.word	0x58025480
 8007804:	58025494 	.word	0x58025494

08007808 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a42      	ldr	r2, [pc, #264]	; (8007920 <DMA_CalcBaseAndBitshift+0x118>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d04a      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a41      	ldr	r2, [pc, #260]	; (8007924 <DMA_CalcBaseAndBitshift+0x11c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d045      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a3f      	ldr	r2, [pc, #252]	; (8007928 <DMA_CalcBaseAndBitshift+0x120>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d040      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a3e      	ldr	r2, [pc, #248]	; (800792c <DMA_CalcBaseAndBitshift+0x124>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d03b      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a3c      	ldr	r2, [pc, #240]	; (8007930 <DMA_CalcBaseAndBitshift+0x128>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d036      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a3b      	ldr	r2, [pc, #236]	; (8007934 <DMA_CalcBaseAndBitshift+0x12c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d031      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a39      	ldr	r2, [pc, #228]	; (8007938 <DMA_CalcBaseAndBitshift+0x130>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d02c      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a38      	ldr	r2, [pc, #224]	; (800793c <DMA_CalcBaseAndBitshift+0x134>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d027      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a36      	ldr	r2, [pc, #216]	; (8007940 <DMA_CalcBaseAndBitshift+0x138>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d022      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a35      	ldr	r2, [pc, #212]	; (8007944 <DMA_CalcBaseAndBitshift+0x13c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d01d      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a33      	ldr	r2, [pc, #204]	; (8007948 <DMA_CalcBaseAndBitshift+0x140>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d018      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a32      	ldr	r2, [pc, #200]	; (800794c <DMA_CalcBaseAndBitshift+0x144>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d013      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a30      	ldr	r2, [pc, #192]	; (8007950 <DMA_CalcBaseAndBitshift+0x148>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00e      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a2f      	ldr	r2, [pc, #188]	; (8007954 <DMA_CalcBaseAndBitshift+0x14c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d009      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a2d      	ldr	r2, [pc, #180]	; (8007958 <DMA_CalcBaseAndBitshift+0x150>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d004      	beq.n	80078b0 <DMA_CalcBaseAndBitshift+0xa8>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a2c      	ldr	r2, [pc, #176]	; (800795c <DMA_CalcBaseAndBitshift+0x154>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d101      	bne.n	80078b4 <DMA_CalcBaseAndBitshift+0xac>
 80078b0:	2301      	movs	r3, #1
 80078b2:	e000      	b.n	80078b6 <DMA_CalcBaseAndBitshift+0xae>
 80078b4:	2300      	movs	r3, #0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d024      	beq.n	8007904 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	3b10      	subs	r3, #16
 80078c2:	4a27      	ldr	r2, [pc, #156]	; (8007960 <DMA_CalcBaseAndBitshift+0x158>)
 80078c4:	fba2 2303 	umull	r2, r3, r2, r3
 80078c8:	091b      	lsrs	r3, r3, #4
 80078ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f003 0307 	and.w	r3, r3, #7
 80078d2:	4a24      	ldr	r2, [pc, #144]	; (8007964 <DMA_CalcBaseAndBitshift+0x15c>)
 80078d4:	5cd3      	ldrb	r3, [r2, r3]
 80078d6:	461a      	mov	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d908      	bls.n	80078f4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	4b1f      	ldr	r3, [pc, #124]	; (8007968 <DMA_CalcBaseAndBitshift+0x160>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	1d1a      	adds	r2, r3, #4
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	659a      	str	r2, [r3, #88]	; 0x58
 80078f2:	e00d      	b.n	8007910 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	4b1b      	ldr	r3, [pc, #108]	; (8007968 <DMA_CalcBaseAndBitshift+0x160>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6593      	str	r3, [r2, #88]	; 0x58
 8007902:	e005      	b.n	8007910 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	40020010 	.word	0x40020010
 8007924:	40020028 	.word	0x40020028
 8007928:	40020040 	.word	0x40020040
 800792c:	40020058 	.word	0x40020058
 8007930:	40020070 	.word	0x40020070
 8007934:	40020088 	.word	0x40020088
 8007938:	400200a0 	.word	0x400200a0
 800793c:	400200b8 	.word	0x400200b8
 8007940:	40020410 	.word	0x40020410
 8007944:	40020428 	.word	0x40020428
 8007948:	40020440 	.word	0x40020440
 800794c:	40020458 	.word	0x40020458
 8007950:	40020470 	.word	0x40020470
 8007954:	40020488 	.word	0x40020488
 8007958:	400204a0 	.word	0x400204a0
 800795c:	400204b8 	.word	0x400204b8
 8007960:	aaaaaaab 	.word	0xaaaaaaab
 8007964:	080111dc 	.word	0x080111dc
 8007968:	fffffc00 	.word	0xfffffc00

0800796c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d120      	bne.n	80079c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	2b03      	cmp	r3, #3
 8007986:	d858      	bhi.n	8007a3a <DMA_CheckFifoParam+0xce>
 8007988:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <DMA_CheckFifoParam+0x24>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	080079a1 	.word	0x080079a1
 8007994:	080079b3 	.word	0x080079b3
 8007998:	080079a1 	.word	0x080079a1
 800799c:	08007a3b 	.word	0x08007a3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d048      	beq.n	8007a3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079b0:	e045      	b.n	8007a3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079ba:	d142      	bne.n	8007a42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079c0:	e03f      	b.n	8007a42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ca:	d123      	bne.n	8007a14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d838      	bhi.n	8007a46 <DMA_CheckFifoParam+0xda>
 80079d4:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <DMA_CheckFifoParam+0x70>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	080079ed 	.word	0x080079ed
 80079e0:	080079f3 	.word	0x080079f3
 80079e4:	080079ed 	.word	0x080079ed
 80079e8:	08007a05 	.word	0x08007a05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	73fb      	strb	r3, [r7, #15]
        break;
 80079f0:	e030      	b.n	8007a54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d025      	beq.n	8007a4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a02:	e022      	b.n	8007a4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a0c:	d11f      	bne.n	8007a4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a12:	e01c      	b.n	8007a4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d902      	bls.n	8007a22 <DMA_CheckFifoParam+0xb6>
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d003      	beq.n	8007a28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007a20:	e018      	b.n	8007a54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	73fb      	strb	r3, [r7, #15]
        break;
 8007a26:	e015      	b.n	8007a54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00e      	beq.n	8007a52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	73fb      	strb	r3, [r7, #15]
    break;
 8007a38:	e00b      	b.n	8007a52 <DMA_CheckFifoParam+0xe6>
        break;
 8007a3a:	bf00      	nop
 8007a3c:	e00a      	b.n	8007a54 <DMA_CheckFifoParam+0xe8>
        break;
 8007a3e:	bf00      	nop
 8007a40:	e008      	b.n	8007a54 <DMA_CheckFifoParam+0xe8>
        break;
 8007a42:	bf00      	nop
 8007a44:	e006      	b.n	8007a54 <DMA_CheckFifoParam+0xe8>
        break;
 8007a46:	bf00      	nop
 8007a48:	e004      	b.n	8007a54 <DMA_CheckFifoParam+0xe8>
        break;
 8007a4a:	bf00      	nop
 8007a4c:	e002      	b.n	8007a54 <DMA_CheckFifoParam+0xe8>
        break;
 8007a4e:	bf00      	nop
 8007a50:	e000      	b.n	8007a54 <DMA_CheckFifoParam+0xe8>
    break;
 8007a52:	bf00      	nop
    }
  }

  return status;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop

08007a64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a38      	ldr	r2, [pc, #224]	; (8007b58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d022      	beq.n	8007ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a36      	ldr	r2, [pc, #216]	; (8007b5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d01d      	beq.n	8007ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a35      	ldr	r2, [pc, #212]	; (8007b60 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d018      	beq.n	8007ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a33      	ldr	r2, [pc, #204]	; (8007b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d013      	beq.n	8007ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a32      	ldr	r2, [pc, #200]	; (8007b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d00e      	beq.n	8007ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a30      	ldr	r2, [pc, #192]	; (8007b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d009      	beq.n	8007ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a2f      	ldr	r2, [pc, #188]	; (8007b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d004      	beq.n	8007ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a2d      	ldr	r2, [pc, #180]	; (8007b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d101      	bne.n	8007ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e000      	b.n	8007ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01a      	beq.n	8007b02 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	3b08      	subs	r3, #8
 8007ad4:	4a28      	ldr	r2, [pc, #160]	; (8007b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ada:	091b      	lsrs	r3, r3, #4
 8007adc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	4b26      	ldr	r3, [pc, #152]	; (8007b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a24      	ldr	r2, [pc, #144]	; (8007b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007af0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f003 031f 	and.w	r3, r3, #31
 8007af8:	2201      	movs	r2, #1
 8007afa:	409a      	lsls	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007b00:	e024      	b.n	8007b4c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	3b10      	subs	r3, #16
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	; (8007b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b10:	091b      	lsrs	r3, r3, #4
 8007b12:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4a1c      	ldr	r2, [pc, #112]	; (8007b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d806      	bhi.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	4a1b      	ldr	r2, [pc, #108]	; (8007b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d902      	bls.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3308      	adds	r3, #8
 8007b28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4b18      	ldr	r3, [pc, #96]	; (8007b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b2e:	4413      	add	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	461a      	mov	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f003 031f 	and.w	r3, r3, #31
 8007b44:	2201      	movs	r2, #1
 8007b46:	409a      	lsls	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b4c:	bf00      	nop
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	58025408 	.word	0x58025408
 8007b5c:	5802541c 	.word	0x5802541c
 8007b60:	58025430 	.word	0x58025430
 8007b64:	58025444 	.word	0x58025444
 8007b68:	58025458 	.word	0x58025458
 8007b6c:	5802546c 	.word	0x5802546c
 8007b70:	58025480 	.word	0x58025480
 8007b74:	58025494 	.word	0x58025494
 8007b78:	cccccccd 	.word	0xcccccccd
 8007b7c:	16009600 	.word	0x16009600
 8007b80:	58025880 	.word	0x58025880
 8007b84:	aaaaaaab 	.word	0xaaaaaaab
 8007b88:	400204b8 	.word	0x400204b8
 8007b8c:	4002040f 	.word	0x4002040f
 8007b90:	10008200 	.word	0x10008200
 8007b94:	40020880 	.word	0x40020880

08007b98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d04a      	beq.n	8007c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b08      	cmp	r3, #8
 8007bb2:	d847      	bhi.n	8007c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a25      	ldr	r2, [pc, #148]	; (8007c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d022      	beq.n	8007c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a24      	ldr	r2, [pc, #144]	; (8007c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d01d      	beq.n	8007c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a22      	ldr	r2, [pc, #136]	; (8007c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d018      	beq.n	8007c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a21      	ldr	r2, [pc, #132]	; (8007c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d013      	beq.n	8007c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a1f      	ldr	r2, [pc, #124]	; (8007c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d00e      	beq.n	8007c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a1e      	ldr	r2, [pc, #120]	; (8007c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d009      	beq.n	8007c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a1c      	ldr	r2, [pc, #112]	; (8007c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d004      	beq.n	8007c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1b      	ldr	r2, [pc, #108]	; (8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d101      	bne.n	8007c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007c04:	2301      	movs	r3, #1
 8007c06:	e000      	b.n	8007c0a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4b17      	ldr	r3, [pc, #92]	; (8007c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007c12:	4413      	add	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	461a      	mov	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a15      	ldr	r2, [pc, #84]	; (8007c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007c20:	671a      	str	r2, [r3, #112]	; 0x70
 8007c22:	e009      	b.n	8007c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4b14      	ldr	r3, [pc, #80]	; (8007c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c28:	4413      	add	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a11      	ldr	r2, [pc, #68]	; (8007c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c36:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	409a      	lsls	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007c44:	bf00      	nop
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	58025408 	.word	0x58025408
 8007c54:	5802541c 	.word	0x5802541c
 8007c58:	58025430 	.word	0x58025430
 8007c5c:	58025444 	.word	0x58025444
 8007c60:	58025458 	.word	0x58025458
 8007c64:	5802546c 	.word	0x5802546c
 8007c68:	58025480 	.word	0x58025480
 8007c6c:	58025494 	.word	0x58025494
 8007c70:	1600963f 	.word	0x1600963f
 8007c74:	58025940 	.word	0x58025940
 8007c78:	1000823f 	.word	0x1000823f
 8007c7c:	40020940 	.word	0x40020940

08007c80 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e04f      	b.n	8007d32 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7fa fb60 	bl	800236c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4b20      	ldr	r3, [pc, #128]	; (8007d3c <HAL_DMA2D_Init+0xbc>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	6851      	ldr	r1, [r2, #4]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	69d2      	ldr	r2, [r2, #28]
 8007cc6:	4311      	orrs	r1, r2
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6812      	ldr	r2, [r2, #0]
 8007ccc:	430b      	orrs	r3, r1
 8007cce:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cd6:	4b1a      	ldr	r3, [pc, #104]	; (8007d40 <HAL_DMA2D_Init+0xc0>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	6891      	ldr	r1, [r2, #8]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	6992      	ldr	r2, [r2, #24]
 8007ce2:	4311      	orrs	r1, r2
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6812      	ldr	r2, [r2, #0]
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cf2:	4b14      	ldr	r3, [pc, #80]	; (8007d44 <HAL_DMA2D_Init+0xc4>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	68d1      	ldr	r1, [r2, #12]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6812      	ldr	r2, [r2, #0]
 8007cfe:	430b      	orrs	r3, r1
 8007d00:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d08:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	051a      	lsls	r2, r3, #20
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	055b      	lsls	r3, r3, #21
 8007d18:	431a      	orrs	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	fff8ffbf 	.word	0xfff8ffbf
 8007d40:	fffffef8 	.word	0xfffffef8
 8007d44:	ffff0000 	.word	0xffff0000

08007d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b089      	sub	sp, #36	; 0x24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d56:	4b89      	ldr	r3, [pc, #548]	; (8007f7c <HAL_GPIO_Init+0x234>)
 8007d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d5a:	e194      	b.n	8008086 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	2101      	movs	r1, #1
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	fa01 f303 	lsl.w	r3, r1, r3
 8007d68:	4013      	ands	r3, r2
 8007d6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 8186 	beq.w	8008080 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f003 0303 	and.w	r3, r3, #3
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d005      	beq.n	8007d8c <HAL_GPIO_Init+0x44>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d130      	bne.n	8007dee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	2203      	movs	r2, #3
 8007d98:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9c:	43db      	mvns	r3, r3
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	4013      	ands	r3, r2
 8007da2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	fa02 f303 	lsl.w	r3, r2, r3
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dca:	43db      	mvns	r3, r3
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	4013      	ands	r3, r2
 8007dd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	091b      	lsrs	r3, r3, #4
 8007dd8:	f003 0201 	and.w	r2, r3, #1
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	fa02 f303 	lsl.w	r3, r2, r3
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d017      	beq.n	8007e2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	2203      	movs	r2, #3
 8007e06:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0a:	43db      	mvns	r3, r3
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	005b      	lsls	r3, r3, #1
 8007e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d123      	bne.n	8007e7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	08da      	lsrs	r2, r3, #3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3208      	adds	r2, #8
 8007e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	220f      	movs	r2, #15
 8007e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e52:	43db      	mvns	r3, r3
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	4013      	ands	r3, r2
 8007e58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	691a      	ldr	r2, [r3, #16]
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	f003 0307 	and.w	r3, r3, #7
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	08da      	lsrs	r2, r3, #3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3208      	adds	r2, #8
 8007e78:	69b9      	ldr	r1, [r7, #24]
 8007e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	2203      	movs	r2, #3
 8007e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8e:	43db      	mvns	r3, r3
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	4013      	ands	r3, r2
 8007e94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f003 0203 	and.w	r2, r3, #3
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 80e0 	beq.w	8008080 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ec0:	4b2f      	ldr	r3, [pc, #188]	; (8007f80 <HAL_GPIO_Init+0x238>)
 8007ec2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007ec6:	4a2e      	ldr	r2, [pc, #184]	; (8007f80 <HAL_GPIO_Init+0x238>)
 8007ec8:	f043 0302 	orr.w	r3, r3, #2
 8007ecc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8007ed0:	4b2b      	ldr	r3, [pc, #172]	; (8007f80 <HAL_GPIO_Init+0x238>)
 8007ed2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ede:	4a29      	ldr	r2, [pc, #164]	; (8007f84 <HAL_GPIO_Init+0x23c>)
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	089b      	lsrs	r3, r3, #2
 8007ee4:	3302      	adds	r3, #2
 8007ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	220f      	movs	r2, #15
 8007ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8007efa:	43db      	mvns	r3, r3
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	4013      	ands	r3, r2
 8007f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a20      	ldr	r2, [pc, #128]	; (8007f88 <HAL_GPIO_Init+0x240>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d052      	beq.n	8007fb0 <HAL_GPIO_Init+0x268>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a1f      	ldr	r2, [pc, #124]	; (8007f8c <HAL_GPIO_Init+0x244>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d031      	beq.n	8007f76 <HAL_GPIO_Init+0x22e>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a1e      	ldr	r2, [pc, #120]	; (8007f90 <HAL_GPIO_Init+0x248>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d02b      	beq.n	8007f72 <HAL_GPIO_Init+0x22a>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a1d      	ldr	r2, [pc, #116]	; (8007f94 <HAL_GPIO_Init+0x24c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d025      	beq.n	8007f6e <HAL_GPIO_Init+0x226>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a1c      	ldr	r2, [pc, #112]	; (8007f98 <HAL_GPIO_Init+0x250>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d01f      	beq.n	8007f6a <HAL_GPIO_Init+0x222>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a1b      	ldr	r2, [pc, #108]	; (8007f9c <HAL_GPIO_Init+0x254>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d019      	beq.n	8007f66 <HAL_GPIO_Init+0x21e>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a1a      	ldr	r2, [pc, #104]	; (8007fa0 <HAL_GPIO_Init+0x258>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d013      	beq.n	8007f62 <HAL_GPIO_Init+0x21a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a19      	ldr	r2, [pc, #100]	; (8007fa4 <HAL_GPIO_Init+0x25c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00d      	beq.n	8007f5e <HAL_GPIO_Init+0x216>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a18      	ldr	r2, [pc, #96]	; (8007fa8 <HAL_GPIO_Init+0x260>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d007      	beq.n	8007f5a <HAL_GPIO_Init+0x212>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a17      	ldr	r2, [pc, #92]	; (8007fac <HAL_GPIO_Init+0x264>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d101      	bne.n	8007f56 <HAL_GPIO_Init+0x20e>
 8007f52:	2309      	movs	r3, #9
 8007f54:	e02d      	b.n	8007fb2 <HAL_GPIO_Init+0x26a>
 8007f56:	230a      	movs	r3, #10
 8007f58:	e02b      	b.n	8007fb2 <HAL_GPIO_Init+0x26a>
 8007f5a:	2308      	movs	r3, #8
 8007f5c:	e029      	b.n	8007fb2 <HAL_GPIO_Init+0x26a>
 8007f5e:	2307      	movs	r3, #7
 8007f60:	e027      	b.n	8007fb2 <HAL_GPIO_Init+0x26a>
 8007f62:	2306      	movs	r3, #6
 8007f64:	e025      	b.n	8007fb2 <HAL_GPIO_Init+0x26a>
 8007f66:	2305      	movs	r3, #5
 8007f68:	e023      	b.n	8007fb2 <HAL_GPIO_Init+0x26a>
 8007f6a:	2304      	movs	r3, #4
 8007f6c:	e021      	b.n	8007fb2 <HAL_GPIO_Init+0x26a>
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e01f      	b.n	8007fb2 <HAL_GPIO_Init+0x26a>
 8007f72:	2302      	movs	r3, #2
 8007f74:	e01d      	b.n	8007fb2 <HAL_GPIO_Init+0x26a>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e01b      	b.n	8007fb2 <HAL_GPIO_Init+0x26a>
 8007f7a:	bf00      	nop
 8007f7c:	58000080 	.word	0x58000080
 8007f80:	58024400 	.word	0x58024400
 8007f84:	58000400 	.word	0x58000400
 8007f88:	58020000 	.word	0x58020000
 8007f8c:	58020400 	.word	0x58020400
 8007f90:	58020800 	.word	0x58020800
 8007f94:	58020c00 	.word	0x58020c00
 8007f98:	58021000 	.word	0x58021000
 8007f9c:	58021400 	.word	0x58021400
 8007fa0:	58021800 	.word	0x58021800
 8007fa4:	58021c00 	.word	0x58021c00
 8007fa8:	58022000 	.word	0x58022000
 8007fac:	58022400 	.word	0x58022400
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	f002 0203 	and.w	r2, r2, #3
 8007fb8:	0092      	lsls	r2, r2, #2
 8007fba:	4093      	lsls	r3, r2
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fc2:	4938      	ldr	r1, [pc, #224]	; (80080a4 <HAL_GPIO_Init+0x35c>)
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	089b      	lsrs	r3, r3, #2
 8007fc8:	3302      	adds	r3, #2
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	43db      	mvns	r3, r3
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	43db      	mvns	r3, r3
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	4013      	ands	r3, r2
 800800e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	4313      	orrs	r3, r2
 8008022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	43db      	mvns	r3, r3
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	4013      	ands	r3, r2
 800803a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	4313      	orrs	r3, r2
 800804e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	43db      	mvns	r3, r3
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	4013      	ands	r3, r2
 8008064:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	4313      	orrs	r3, r2
 8008078:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	3301      	adds	r3, #1
 8008084:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	fa22 f303 	lsr.w	r3, r2, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	f47f ae63 	bne.w	8007d5c <HAL_GPIO_Init+0x14>
  }
}
 8008096:	bf00      	nop
 8008098:	bf00      	nop
 800809a:	3724      	adds	r7, #36	; 0x24
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	58000400 	.word	0x58000400

080080a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	887b      	ldrh	r3, [r7, #2]
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080c0:	2301      	movs	r3, #1
 80080c2:	73fb      	strb	r3, [r7, #15]
 80080c4:	e001      	b.n	80080ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	807b      	strh	r3, [r7, #2]
 80080e4:	4613      	mov	r3, r2
 80080e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080e8:	787b      	ldrb	r3, [r7, #1]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080ee:	887a      	ldrh	r2, [r7, #2]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80080f4:	e003      	b.n	80080fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80080f6:	887b      	ldrh	r3, [r7, #2]
 80080f8:	041a      	lsls	r2, r3, #16
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	619a      	str	r2, [r3, #24]
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e0bf      	b.n	800829e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d106      	bne.n	8008138 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fa f93c 	bl	80023b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	699a      	ldr	r2, [r3, #24]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800814e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6999      	ldr	r1, [r3, #24]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008164:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6899      	ldr	r1, [r3, #8]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4b4a      	ldr	r3, [pc, #296]	; (80082a8 <HAL_LTDC_Init+0x19c>)
 8008180:	400b      	ands	r3, r1
 8008182:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	041b      	lsls	r3, r3, #16
 800818a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6899      	ldr	r1, [r3, #8]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	431a      	orrs	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	430a      	orrs	r2, r1
 80081a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68d9      	ldr	r1, [r3, #12]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	4b3e      	ldr	r3, [pc, #248]	; (80082a8 <HAL_LTDC_Init+0x19c>)
 80081ae:	400b      	ands	r3, r1
 80081b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	041b      	lsls	r3, r3, #16
 80081b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68d9      	ldr	r1, [r3, #12]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a1a      	ldr	r2, [r3, #32]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6919      	ldr	r1, [r3, #16]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b33      	ldr	r3, [pc, #204]	; (80082a8 <HAL_LTDC_Init+0x19c>)
 80081dc:	400b      	ands	r3, r1
 80081de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	041b      	lsls	r3, r3, #16
 80081e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6919      	ldr	r1, [r3, #16]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6959      	ldr	r1, [r3, #20]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	4b27      	ldr	r3, [pc, #156]	; (80082a8 <HAL_LTDC_Init+0x19c>)
 800820a:	400b      	ands	r3, r1
 800820c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008212:	041b      	lsls	r3, r3, #16
 8008214:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6959      	ldr	r1, [r3, #20]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	431a      	orrs	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800823c:	041b      	lsls	r3, r3, #16
 800823e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800824e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4313      	orrs	r3, r2
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008262:	431a      	orrs	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	430a      	orrs	r2, r1
 800826a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0206 	orr.w	r2, r2, #6
 800827a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0201 	orr.w	r2, r2, #1
 800828a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	f000f800 	.word	0xf000f800

080082ac <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d023      	beq.n	8008316 <HAL_LTDC_IRQHandler+0x6a>
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01e      	beq.n	8008316 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0204 	bic.w	r2, r2, #4
 80082e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2204      	movs	r2, #4
 80082ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80082f6:	f043 0201 	orr.w	r2, r3, #1
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2204      	movs	r2, #4
 8008304:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f86f 	bl	80083f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d023      	beq.n	8008368 <HAL_LTDC_IRQHandler+0xbc>
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d01e      	beq.n	8008368 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0202 	bic.w	r2, r2, #2
 8008338:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2202      	movs	r2, #2
 8008340:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008348:	f043 0202 	orr.w	r2, r3, #2
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2204      	movs	r2, #4
 8008356:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f846 	bl	80083f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d01b      	beq.n	80083aa <HAL_LTDC_IRQHandler+0xfe>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d016      	beq.n	80083aa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 0201 	bic.w	r2, r2, #1
 800838a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2201      	movs	r2, #1
 8008392:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f82f 	bl	8008408 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f003 0308 	and.w	r3, r3, #8
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d01b      	beq.n	80083ec <HAL_LTDC_IRQHandler+0x140>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f003 0308 	and.w	r3, r3, #8
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d016      	beq.n	80083ec <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0208 	bic.w	r2, r2, #8
 80083cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2208      	movs	r2, #8
 80083d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7f9 f948 	bl	800167c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80083ec:	bf00      	nop
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800841c:	b5b0      	push	{r4, r5, r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800842e:	2b01      	cmp	r3, #1
 8008430:	d101      	bne.n	8008436 <HAL_LTDC_ConfigLayer+0x1a>
 8008432:	2302      	movs	r3, #2
 8008434:	e02c      	b.n	8008490 <HAL_LTDC_ConfigLayer+0x74>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2202      	movs	r2, #2
 8008442:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2134      	movs	r1, #52	; 0x34
 800844c:	fb01 f303 	mul.w	r3, r1, r3
 8008450:	4413      	add	r3, r2
 8008452:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	4614      	mov	r4, r2
 800845a:	461d      	mov	r5, r3
 800845c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800845e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	68b9      	ldr	r1, [r7, #8]
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 f877 	bl	8008564 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2201      	movs	r2, #1
 800847c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bdb0      	pop	{r4, r5, r7, pc}

08008498 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d101      	bne.n	80084b2 <HAL_LTDC_SetAddress+0x1a>
 80084ae:	2302      	movs	r3, #2
 80084b0:	e024      	b.n	80084fc <HAL_LTDC_SetAddress+0x64>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2202      	movs	r2, #2
 80084be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2234      	movs	r2, #52	; 0x34
 80084c6:	fb02 f303 	mul.w	r3, r2, r3
 80084ca:	3338      	adds	r3, #56	; 0x38
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6979      	ldr	r1, [r7, #20]
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 f841 	bl	8008564 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2201      	movs	r2, #1
 80084e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_LTDC_Reload+0x18>
 8008518:	2302      	movs	r3, #2
 800851a:	e01c      	b.n	8008556 <HAL_LTDC_Reload+0x52>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0208 	orr.w	r2, r2, #8
 800853a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
	...

08008564 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008564:	b480      	push	{r7}
 8008566:	b089      	sub	sp, #36	; 0x24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	0c1b      	lsrs	r3, r3, #16
 800857c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008580:	4413      	add	r3, r2
 8008582:	041b      	lsls	r3, r3, #16
 8008584:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	01db      	lsls	r3, r3, #7
 8008590:	4413      	add	r3, r2
 8008592:	3384      	adds	r3, #132	; 0x84
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	6812      	ldr	r2, [r2, #0]
 800859a:	4611      	mov	r1, r2
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	01d2      	lsls	r2, r2, #7
 80085a0:	440a      	add	r2, r1
 80085a2:	3284      	adds	r2, #132	; 0x84
 80085a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80085a8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	0c1b      	lsrs	r3, r3, #16
 80085b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085ba:	4413      	add	r3, r2
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4619      	mov	r1, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	01db      	lsls	r3, r3, #7
 80085c8:	440b      	add	r3, r1
 80085ca:	3384      	adds	r3, #132	; 0x84
 80085cc:	4619      	mov	r1, r3
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	68da      	ldr	r2, [r3, #12]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085e2:	4413      	add	r3, r2
 80085e4:	041b      	lsls	r3, r3, #16
 80085e6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	01db      	lsls	r3, r3, #7
 80085f2:	4413      	add	r3, r2
 80085f4:	3384      	adds	r3, #132	; 0x84
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	6812      	ldr	r2, [r2, #0]
 80085fc:	4611      	mov	r1, r2
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	01d2      	lsls	r2, r2, #7
 8008602:	440a      	add	r2, r1
 8008604:	3284      	adds	r2, #132	; 0x84
 8008606:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800860a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800861a:	4413      	add	r3, r2
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4619      	mov	r1, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	01db      	lsls	r3, r3, #7
 8008628:	440b      	add	r3, r1
 800862a:	3384      	adds	r3, #132	; 0x84
 800862c:	4619      	mov	r1, r3
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	4313      	orrs	r3, r2
 8008632:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	461a      	mov	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	01db      	lsls	r3, r3, #7
 800863e:	4413      	add	r3, r2
 8008640:	3384      	adds	r3, #132	; 0x84
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	6812      	ldr	r2, [r2, #0]
 8008648:	4611      	mov	r1, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	01d2      	lsls	r2, r2, #7
 800864e:	440a      	add	r2, r1
 8008650:	3284      	adds	r2, #132	; 0x84
 8008652:	f023 0307 	bic.w	r3, r3, #7
 8008656:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	461a      	mov	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	01db      	lsls	r3, r3, #7
 8008662:	4413      	add	r3, r2
 8008664:	3384      	adds	r3, #132	; 0x84
 8008666:	461a      	mov	r2, r3
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008674:	021b      	lsls	r3, r3, #8
 8008676:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800867e:	041b      	lsls	r3, r3, #16
 8008680:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	061b      	lsls	r3, r3, #24
 8008688:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	01db      	lsls	r3, r3, #7
 8008694:	4413      	add	r3, r2
 8008696:	3384      	adds	r3, #132	; 0x84
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	01db      	lsls	r3, r3, #7
 80086a4:	4413      	add	r3, r2
 80086a6:	3384      	adds	r3, #132	; 0x84
 80086a8:	461a      	mov	r2, r3
 80086aa:	2300      	movs	r3, #0
 80086ac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086b4:	461a      	mov	r2, r3
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	431a      	orrs	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4619      	mov	r1, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	01db      	lsls	r3, r3, #7
 80086c8:	440b      	add	r3, r1
 80086ca:	3384      	adds	r3, #132	; 0x84
 80086cc:	4619      	mov	r1, r3
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	01db      	lsls	r3, r3, #7
 80086de:	4413      	add	r3, r2
 80086e0:	3384      	adds	r3, #132	; 0x84
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	6812      	ldr	r2, [r2, #0]
 80086e8:	4611      	mov	r1, r2
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	01d2      	lsls	r2, r2, #7
 80086ee:	440a      	add	r2, r1
 80086f0:	3284      	adds	r2, #132	; 0x84
 80086f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80086f6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	461a      	mov	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	01db      	lsls	r3, r3, #7
 8008702:	4413      	add	r3, r2
 8008704:	3384      	adds	r3, #132	; 0x84
 8008706:	461a      	mov	r2, r3
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	01db      	lsls	r3, r3, #7
 8008718:	4413      	add	r3, r2
 800871a:	3384      	adds	r3, #132	; 0x84
 800871c:	69da      	ldr	r2, [r3, #28]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4619      	mov	r1, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	01db      	lsls	r3, r3, #7
 8008728:	440b      	add	r3, r1
 800872a:	3384      	adds	r3, #132	; 0x84
 800872c:	4619      	mov	r1, r3
 800872e:	4b58      	ldr	r3, [pc, #352]	; (8008890 <LTDC_SetConfig+0x32c>)
 8008730:	4013      	ands	r3, r2
 8008732:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	69da      	ldr	r2, [r3, #28]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	68f9      	ldr	r1, [r7, #12]
 800873e:	6809      	ldr	r1, [r1, #0]
 8008740:	4608      	mov	r0, r1
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	01c9      	lsls	r1, r1, #7
 8008746:	4401      	add	r1, r0
 8008748:	3184      	adds	r1, #132	; 0x84
 800874a:	4313      	orrs	r3, r2
 800874c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	01db      	lsls	r3, r3, #7
 8008758:	4413      	add	r3, r2
 800875a:	3384      	adds	r3, #132	; 0x84
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	01db      	lsls	r3, r3, #7
 8008768:	4413      	add	r3, r2
 800876a:	3384      	adds	r3, #132	; 0x84
 800876c:	461a      	mov	r2, r3
 800876e:	2300      	movs	r3, #0
 8008770:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	01db      	lsls	r3, r3, #7
 800877c:	4413      	add	r3, r2
 800877e:	3384      	adds	r3, #132	; 0x84
 8008780:	461a      	mov	r2, r3
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d102      	bne.n	8008796 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008790:	2304      	movs	r3, #4
 8008792:	61fb      	str	r3, [r7, #28]
 8008794:	e01b      	b.n	80087ce <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d102      	bne.n	80087a4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800879e:	2303      	movs	r3, #3
 80087a0:	61fb      	str	r3, [r7, #28]
 80087a2:	e014      	b.n	80087ce <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d00b      	beq.n	80087c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d007      	beq.n	80087c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d003      	beq.n	80087c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80087c0:	2b07      	cmp	r3, #7
 80087c2:	d102      	bne.n	80087ca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80087c4:	2302      	movs	r3, #2
 80087c6:	61fb      	str	r3, [r7, #28]
 80087c8:	e001      	b.n	80087ce <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80087ca:	2301      	movs	r3, #1
 80087cc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	01db      	lsls	r3, r3, #7
 80087d8:	4413      	add	r3, r2
 80087da:	3384      	adds	r3, #132	; 0x84
 80087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	6812      	ldr	r2, [r2, #0]
 80087e2:	4611      	mov	r1, r2
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	01d2      	lsls	r2, r2, #7
 80087e8:	440a      	add	r2, r1
 80087ea:	3284      	adds	r2, #132	; 0x84
 80087ec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80087f0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	fb02 f303 	mul.w	r3, r2, r3
 80087fc:	041a      	lsls	r2, r3, #16
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6859      	ldr	r1, [r3, #4]
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	1acb      	subs	r3, r1, r3
 8008808:	69f9      	ldr	r1, [r7, #28]
 800880a:	fb01 f303 	mul.w	r3, r1, r3
 800880e:	3307      	adds	r3, #7
 8008810:	68f9      	ldr	r1, [r7, #12]
 8008812:	6809      	ldr	r1, [r1, #0]
 8008814:	4608      	mov	r0, r1
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	01c9      	lsls	r1, r1, #7
 800881a:	4401      	add	r1, r0
 800881c:	3184      	adds	r1, #132	; 0x84
 800881e:	4313      	orrs	r3, r2
 8008820:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	01db      	lsls	r3, r3, #7
 800882c:	4413      	add	r3, r2
 800882e:	3384      	adds	r3, #132	; 0x84
 8008830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4619      	mov	r1, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	01db      	lsls	r3, r3, #7
 800883c:	440b      	add	r3, r1
 800883e:	3384      	adds	r3, #132	; 0x84
 8008840:	4619      	mov	r1, r3
 8008842:	4b14      	ldr	r3, [pc, #80]	; (8008894 <LTDC_SetConfig+0x330>)
 8008844:	4013      	ands	r3, r2
 8008846:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	01db      	lsls	r3, r3, #7
 8008852:	4413      	add	r3, r2
 8008854:	3384      	adds	r3, #132	; 0x84
 8008856:	461a      	mov	r2, r3
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	01db      	lsls	r3, r3, #7
 8008868:	4413      	add	r3, r2
 800886a:	3384      	adds	r3, #132	; 0x84
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	6812      	ldr	r2, [r2, #0]
 8008872:	4611      	mov	r1, r2
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	01d2      	lsls	r2, r2, #7
 8008878:	440a      	add	r2, r1
 800887a:	3284      	adds	r2, #132	; 0x84
 800887c:	f043 0301 	orr.w	r3, r3, #1
 8008880:	6013      	str	r3, [r2, #0]
}
 8008882:	bf00      	nop
 8008884:	3724      	adds	r7, #36	; 0x24
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	fffff8f8 	.word	0xfffff8f8
 8008894:	fffff800 	.word	0xfffff800

08008898 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e017      	b.n	80088da <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d004      	beq.n	80088c0 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2280      	movs	r2, #128	; 0x80
 80088ba:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e00c      	b.n	80088da <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2204      	movs	r2, #4
 80088c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0201 	bic.w	r2, r2, #1
 80088d6:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
	...

080088e8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80088f4:	f7fa fb6e 	bl	8002fd4 <HAL_GetTick>
 80088f8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	73fb      	strb	r3, [r7, #15]
 8008904:	e0a6      	b.n	8008a54 <HAL_OSPI_Init+0x16c>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008910:	2b00      	cmp	r3, #0
 8008912:	f040 809f 	bne.w	8008a54 <HAL_OSPI_Init+0x16c>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7f9 fee4 	bl	80026e4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800891c:	f241 3188 	movw	r1, #5000	; 0x1388
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fb0d 	bl	8008f40 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	4b4c      	ldr	r3, [pc, #304]	; (8008a60 <HAL_OSPI_Init+0x178>)
 800892e:	4013      	ands	r3, r2
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	68d1      	ldr	r1, [r2, #12]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	6912      	ldr	r2, [r2, #16]
 8008938:	3a01      	subs	r2, #1
 800893a:	0412      	lsls	r2, r2, #16
 800893c:	4311      	orrs	r1, r2
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6952      	ldr	r2, [r2, #20]
 8008942:	3a01      	subs	r2, #1
 8008944:	0212      	lsls	r2, r2, #8
 8008946:	4311      	orrs	r1, r2
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800894c:	0112      	lsls	r2, r2, #4
 800894e:	4311      	orrs	r1, r2
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	69d2      	ldr	r2, [r2, #28]
 8008954:	4311      	orrs	r1, r2
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	6812      	ldr	r2, [r2, #0]
 800895a:	430b      	orrs	r3, r1
 800895c:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a1a      	ldr	r2, [r3, #32]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	430a      	orrs	r2, r1
 8008972:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008978:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800898e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	3b01      	subs	r3, #1
 80089a0:	021a      	lsls	r2, r3, #8
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2200      	movs	r2, #0
 80089b4:	2120      	movs	r1, #32
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 f824 	bl	8009a04 <OSPI_WaitFlagStateUntilTimeout>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d146      	bne.n	8008a54 <HAL_OSPI_Init+0x16c>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	1e5a      	subs	r2, r3, #1
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	430a      	orrs	r2, r1
 80089dc:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80089fc:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f042 0201 	orr.w	r2, r2, #1
 8008a22:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d107      	bne.n	8008a3c <HAL_OSPI_Init+0x154>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	689a      	ldr	r2, [r3, #8]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f042 0202 	orr.w	r2, r2, #2
 8008a3a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a44:	d103      	bne.n	8008a4e <HAL_OSPI_Init+0x166>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	655a      	str	r2, [r3, #84]	; 0x54
 8008a4c:	e002      	b.n	8008a54 <HAL_OSPI_Init+0x16c>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2202      	movs	r2, #2
 8008a52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	f8e0f88c 	.word	0xf8e0f88c

08008a64 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3350      	adds	r3, #80	; 0x50
 8008a72:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a88:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d03a      	beq.n	8008b0a <HAL_OSPI_IRQHandler+0xa6>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d035      	beq.n	8008b0a <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2b18      	cmp	r3, #24
 8008aa2:	d10f      	bne.n	8008ac4 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa8:	781a      	ldrb	r2, [r3, #0]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008abc:	1e5a      	subs	r2, r3, #1
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	64da      	str	r2, [r3, #76]	; 0x4c
 8008ac2:	e012      	b.n	8008aea <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b28      	cmp	r3, #40	; 0x28
 8008ac8:	d10f      	bne.n	8008aea <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	7812      	ldrb	r2, [r2, #0]
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae4:	1e5a      	subs	r2, r3, #1
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	64da      	str	r2, [r3, #76]	; 0x4c
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d107      	bne.n	8008b02 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b00:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f9e0 	bl	8008ec8 <HAL_OSPI_FifoThresholdCallback>
 8008b08:	e0e7      	b.n	8008cda <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d067      	beq.n	8008be4 <HAL_OSPI_IRQHandler+0x180>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d062      	beq.n	8008be4 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b28      	cmp	r3, #40	; 0x28
 8008b22:	d131      	bne.n	8008b88 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d015      	beq.n	8008b58 <HAL_OSPI_IRQHandler+0xf4>
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d010      	beq.n	8008b58 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	7812      	ldrb	r2, [r2, #0]
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b46:	1c5a      	adds	r2, r3, #1
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b50:	1e5a      	subs	r2, r3, #1
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	64da      	str	r2, [r3, #76]	; 0x4c
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8008b56:	e0bd      	b.n	8008cd4 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f040 80b9 	bne.w	8008cd4 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2202      	movs	r2, #2
 8008b68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008b78:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f9b5 	bl	8008ef0 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8008b86:	e0a5      	b.n	8008cd4 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008b9e:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	655a      	str	r2, [r3, #84]	; 0x54

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b18      	cmp	r3, #24
 8008baa:	d103      	bne.n	8008bb4 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f9a9 	bl	8008f04 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8008bb2:	e08f      	b.n	8008cd4 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	d103      	bne.n	8008bc2 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f98e 	bl	8008edc <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8008bc0:	e088      	b.n	8008cd4 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc8:	f040 8084 	bne.w	8008cd4 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d103      	bne.n	8008bdc <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f96d 	bl	8008eb4 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8008bda:	e07b      	b.n	8008cd4 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f95f 	bl	8008ea0 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8008be2:	e077      	b.n	8008cd4 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d01e      	beq.n	8008c2c <HAL_OSPI_IRQHandler+0x1c8>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d019      	beq.n	8008c2c <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2208      	movs	r2, #8
 8008bfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8008c1c:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2202      	movs	r2, #2
 8008c22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f977 	bl	8008f18 <HAL_OSPI_StatusMatchCallback>
 8008c2a:	e056      	b.n	8008cda <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d03c      	beq.n	8008cb0 <HAL_OSPI_IRQHandler+0x24c>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d037      	beq.n	8008cb0 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2201      	movs	r2, #1
 8008c46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8008c56:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d01a      	beq.n	8008ca2 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 0204 	bic.w	r2, r2, #4
 8008c7a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c80:	4a18      	ldr	r2, [pc, #96]	; (8008ce4 <HAL_OSPI_IRQHandler+0x280>)
 8008c82:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff fe05 	bl	8008898 <HAL_MDMA_Abort_IT>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d021      	beq.n	8008cd8 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2202      	movs	r2, #2
 8008c98:	655a      	str	r2, [r3, #84]	; 0x54

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f900 	bl	8008ea0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8008ca0:	e01a      	b.n	8008cd8 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f8f9 	bl	8008ea0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8008cae:	e013      	b.n	8008cd8 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f003 0310 	and.w	r3, r3, #16
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00f      	beq.n	8008cda <HAL_OSPI_IRQHandler+0x276>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00a      	beq.n	8008cda <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2210      	movs	r2, #16
 8008cca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f92d 	bl	8008f2c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008cd2:	e002      	b.n	8008cda <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8008cd4:	bf00      	nop
 8008cd6:	e000      	b.n	8008cda <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8008cd8:	bf00      	nop
}
 8008cda:	bf00      	nop
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	0800998d 	.word	0x0800998d

08008ce8 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08a      	sub	sp, #40	; 0x28
 8008cec:	af02      	add	r7, sp, #8
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8008cf4:	f7fa f96e 	bl	8002fd4 <HAL_GetTick>
 8008cf8:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfe:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d04:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d104      	bne.n	8008d16 <HAL_OSPI_Command+0x2e>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d14:	d115      	bne.n	8008d42 <HAL_OSPI_Command+0x5a>
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b14      	cmp	r3, #20
 8008d1a:	d107      	bne.n	8008d2c <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d00e      	beq.n	8008d42 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d00a      	beq.n	8008d42 <HAL_OSPI_Command+0x5a>
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2b24      	cmp	r3, #36	; 0x24
 8008d30:	d15b      	bne.n	8008dea <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d003      	beq.n	8008d42 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8008d3e:	2b03      	cmp	r3, #3
 8008d40:	d153      	bne.n	8008dea <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2120      	movs	r1, #32
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 fe59 	bl	8009a04 <OSPI_WaitFlagStateUntilTimeout>
 8008d52:	4603      	mov	r3, r0
 8008d54:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8008d56:	7ffb      	ldrb	r3, [r7, #31]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d14c      	bne.n	8008df6 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 fe85 	bl	8009a74 <OSPI_ConfigCmd>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8008d6e:	7ffb      	ldrb	r3, [r7, #31]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d140      	bne.n	8008df6 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10e      	bne.n	8008d9a <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	2201      	movs	r2, #1
 8008d84:	2102      	movs	r1, #2
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 fe3c 	bl	8009a04 <OSPI_WaitFlagStateUntilTimeout>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2202      	movs	r2, #2
 8008d96:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008d98:	e02d      	b.n	8008df6 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d103      	bne.n	8008daa <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2204      	movs	r2, #4
 8008da6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8008da8:	e025      	b.n	8008df6 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d10b      	bne.n	8008dca <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008db6:	2b24      	cmp	r3, #36	; 0x24
 8008db8:	d103      	bne.n	8008dc2 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2204      	movs	r2, #4
 8008dbe:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8008dc0:	e019      	b.n	8008df6 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2214      	movs	r2, #20
 8008dc6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8008dc8:	e015      	b.n	8008df6 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d111      	bne.n	8008df6 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd6:	2b14      	cmp	r3, #20
 8008dd8:	d103      	bne.n	8008de2 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2204      	movs	r2, #4
 8008dde:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8008de0:	e009      	b.n	8008df6 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2224      	movs	r2, #36	; 0x24
 8008de6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8008de8:	e005      	b.n	8008df6 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2210      	movs	r2, #16
 8008df2:	659a      	str	r2, [r3, #88]	; 0x58
 8008df4:	e000      	b.n	8008df8 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8008df6:	bf00      	nop
  }

  /* Return function status */
  return status;
 8008df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3720      	adds	r7, #32
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af02      	add	r7, sp, #8
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008e0e:	f7fa f8e1 	bl	8002fd4 <HAL_GetTick>
 8008e12:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d134      	bne.n	8008e86 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2200      	movs	r2, #0
 8008e26:	2120      	movs	r1, #32
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fdeb 	bl	8009a04 <OSPI_WaitFlagStateUntilTimeout>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d12b      	bne.n	8008e90 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2288      	movs	r2, #136	; 0x88
 8008e3c:	655a      	str	r2, [r3, #84]	; 0x54

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b08      	cmp	r3, #8
 8008e44:	d111      	bne.n	8008e6a <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	6852      	ldr	r2, [r2, #4]
 8008e4e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2210      	movs	r2, #16
 8008e58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008e68:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	4b0a      	ldr	r3, [pc, #40]	; (8008e9c <HAL_OSPI_MemoryMapped+0x98>)
 8008e72:	4013      	ands	r3, r2
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	6812      	ldr	r2, [r2, #0]
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	e004      	b.n	8008e90 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2210      	movs	r2, #16
 8008e8e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Return function status */
  return status;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	cffffff7 	.word	0xcffffff7

08008ea0 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
	...

08008f60 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b094      	sub	sp, #80	; 0x50
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4aa3      	ldr	r2, [pc, #652]	; (800920c <HAL_OSPIM_Config+0x2ac>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d105      	bne.n	8008f8e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8008f86:	2301      	movs	r3, #1
 8008f88:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8008f8c:	e004      	b.n	8008f98 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008f9e:	e01d      	b.n	8008fdc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8008fa0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	b2d8      	uxtb	r0, r3
 8008fa8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008fac:	f107 0114 	add.w	r1, r7, #20
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	4413      	add	r3, r2
 8008fb6:	00db      	lsls	r3, r3, #3
 8008fb8:	440b      	add	r3, r1
 8008fba:	4619      	mov	r1, r3
 8008fbc:	f000 fed4 	bl	8009d68 <OSPIM_GetConfig>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d005      	beq.n	8008fd2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2208      	movs	r2, #8
 8008fd0:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8008fd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008fdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d9dd      	bls.n	8008fa0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8008fe4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f040 84c3 	bne.w	8009974 <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8008fee:	4b87      	ldr	r3, [pc, #540]	; (800920c <HAL_OSPIM_Config+0x2ac>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00b      	beq.n	8009012 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8008ffa:	4b84      	ldr	r3, [pc, #528]	; (800920c <HAL_OSPIM_Config+0x2ac>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a83      	ldr	r2, [pc, #524]	; (800920c <HAL_OSPIM_Config+0x2ac>)
 8009000:	f023 0301 	bic.w	r3, r3, #1
 8009004:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8009006:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800900a:	f043 0301 	orr.w	r3, r3, #1
 800900e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8009012:	4b7f      	ldr	r3, [pc, #508]	; (8009210 <HAL_OSPIM_Config+0x2b0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00b      	beq.n	8009036 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800901e:	4b7c      	ldr	r3, [pc, #496]	; (8009210 <HAL_OSPIM_Config+0x2b0>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a7b      	ldr	r2, [pc, #492]	; (8009210 <HAL_OSPIM_Config+0x2b0>)
 8009024:	f023 0301 	bic.w	r3, r3, #1
 8009028:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800902a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800902e:	f043 0302 	orr.w	r3, r3, #2
 8009032:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8009036:	4977      	ldr	r1, [pc, #476]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 8009038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800903a:	4613      	mov	r3, r2
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	4413      	add	r3, r2
 8009040:	00db      	lsls	r3, r3, #3
 8009042:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009046:	4413      	add	r3, r2
 8009048:	3b34      	subs	r3, #52	; 0x34
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3b01      	subs	r3, #1
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	440b      	add	r3, r1
 8009052:	6859      	ldr	r1, [r3, #4]
 8009054:	486f      	ldr	r0, [pc, #444]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 8009056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009058:	4613      	mov	r3, r2
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	4413      	add	r3, r2
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009064:	4413      	add	r3, r2
 8009066:	3b34      	subs	r3, #52	; 0x34
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3b01      	subs	r3, #1
 800906c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4403      	add	r3, r0
 8009074:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009076:	4b67      	ldr	r3, [pc, #412]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	f000 80ca 	beq.w	8009218 <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009084:	4b63      	ldr	r3, [pc, #396]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a62      	ldr	r2, [pc, #392]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 800908a:	f023 0301 	bic.w	r3, r3, #1
 800908e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8009090:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009094:	2b01      	cmp	r3, #1
 8009096:	f040 8178 	bne.w	800938a <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 800909a:	495e      	ldr	r1, [pc, #376]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 800909c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80090a0:	4613      	mov	r3, r2
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	4413      	add	r3, r2
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80090ac:	4413      	add	r3, r2
 80090ae:	3b3c      	subs	r3, #60	; 0x3c
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	6859      	ldr	r1, [r3, #4]
 80090ba:	4856      	ldr	r0, [pc, #344]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 80090bc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80090c0:	4613      	mov	r3, r2
 80090c2:	005b      	lsls	r3, r3, #1
 80090c4:	4413      	add	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80090cc:	4413      	add	r3, r2
 80090ce:	3b3c      	subs	r3, #60	; 0x3c
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	f041 0202 	orr.w	r2, r1, #2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4403      	add	r3, r0
 80090dc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80090de:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80090e2:	4613      	mov	r3, r2
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	4413      	add	r3, r2
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80090ee:	4413      	add	r3, r2
 80090f0:	3b38      	subs	r3, #56	; 0x38
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d021      	beq.n	800913c <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 80090f8:	4946      	ldr	r1, [pc, #280]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 80090fa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80090fe:	4613      	mov	r3, r2
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	4413      	add	r3, r2
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800910a:	4413      	add	r3, r2
 800910c:	3b38      	subs	r3, #56	; 0x38
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3b01      	subs	r3, #1
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	6859      	ldr	r1, [r3, #4]
 8009118:	483e      	ldr	r0, [pc, #248]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 800911a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800911e:	4613      	mov	r3, r2
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	4413      	add	r3, r2
 8009124:	00db      	lsls	r3, r3, #3
 8009126:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800912a:	4413      	add	r3, r2
 800912c:	3b38      	subs	r3, #56	; 0x38
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3b01      	subs	r3, #1
 8009132:	f041 0220 	orr.w	r2, r1, #32
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4403      	add	r3, r0
 800913a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800913c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009140:	4613      	mov	r3, r2
 8009142:	005b      	lsls	r3, r3, #1
 8009144:	4413      	add	r3, r2
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800914c:	4413      	add	r3, r2
 800914e:	3b30      	subs	r3, #48	; 0x30
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d025      	beq.n	80091a2 <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8009156:	492f      	ldr	r1, [pc, #188]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 8009158:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800915c:	4613      	mov	r3, r2
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	4413      	add	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009168:	4413      	add	r3, r2
 800916a:	3b30      	subs	r3, #48	; 0x30
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3b01      	subs	r3, #1
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	440b      	add	r3, r1
 8009178:	6859      	ldr	r1, [r3, #4]
 800917a:	4826      	ldr	r0, [pc, #152]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 800917c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009180:	4613      	mov	r3, r2
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	4413      	add	r3, r2
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800918c:	4413      	add	r3, r2
 800918e:	3b30      	subs	r3, #48	; 0x30
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3b01      	subs	r3, #1
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4403      	add	r3, r0
 80091a0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80091a2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80091a6:	4613      	mov	r3, r2
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	4413      	add	r3, r2
 80091ac:	00db      	lsls	r3, r3, #3
 80091ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80091b2:	4413      	add	r3, r2
 80091b4:	3b2c      	subs	r3, #44	; 0x2c
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 80e6 	beq.w	800938a <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 80091be:	4915      	ldr	r1, [pc, #84]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 80091c0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80091c4:	4613      	mov	r3, r2
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	4413      	add	r3, r2
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80091d0:	4413      	add	r3, r2
 80091d2:	3b2c      	subs	r3, #44	; 0x2c
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3b01      	subs	r3, #1
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	440b      	add	r3, r1
 80091e0:	6859      	ldr	r1, [r3, #4]
 80091e2:	480c      	ldr	r0, [pc, #48]	; (8009214 <HAL_OSPIM_Config+0x2b4>)
 80091e4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80091e8:	4613      	mov	r3, r2
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	4413      	add	r3, r2
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80091f4:	4413      	add	r3, r2
 80091f6:	3b2c      	subs	r3, #44	; 0x2c
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3b01      	subs	r3, #1
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4403      	add	r3, r0
 8009208:	605a      	str	r2, [r3, #4]
 800920a:	e0be      	b.n	800938a <HAL_OSPIM_Config+0x42a>
 800920c:	52005000 	.word	0x52005000
 8009210:	5200a000 	.word	0x5200a000
 8009214:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8009218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800921a:	4613      	mov	r3, r2
 800921c:	005b      	lsls	r3, r3, #1
 800921e:	4413      	add	r3, r2
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009226:	4413      	add	r3, r2
 8009228:	3b3c      	subs	r3, #60	; 0x3c
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 80ac 	beq.w	800938a <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8009232:	499d      	ldr	r1, [pc, #628]	; (80094a8 <HAL_OSPIM_Config+0x548>)
 8009234:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009236:	4613      	mov	r3, r2
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	4413      	add	r3, r2
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009242:	4413      	add	r3, r2
 8009244:	3b3c      	subs	r3, #60	; 0x3c
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3b01      	subs	r3, #1
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	440b      	add	r3, r1
 800924e:	6859      	ldr	r1, [r3, #4]
 8009250:	4895      	ldr	r0, [pc, #596]	; (80094a8 <HAL_OSPIM_Config+0x548>)
 8009252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009254:	4613      	mov	r3, r2
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	4413      	add	r3, r2
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009260:	4413      	add	r3, r2
 8009262:	3b3c      	subs	r3, #60	; 0x3c
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3b01      	subs	r3, #1
 8009268:	f021 0201 	bic.w	r2, r1, #1
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4403      	add	r3, r0
 8009270:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8009272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009274:	4613      	mov	r3, r2
 8009276:	005b      	lsls	r3, r3, #1
 8009278:	4413      	add	r3, r2
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009280:	4413      	add	r3, r2
 8009282:	3b38      	subs	r3, #56	; 0x38
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d01f      	beq.n	80092ca <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800928a:	4987      	ldr	r1, [pc, #540]	; (80094a8 <HAL_OSPIM_Config+0x548>)
 800928c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800928e:	4613      	mov	r3, r2
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	4413      	add	r3, r2
 8009294:	00db      	lsls	r3, r3, #3
 8009296:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800929a:	4413      	add	r3, r2
 800929c:	3b38      	subs	r3, #56	; 0x38
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	6859      	ldr	r1, [r3, #4]
 80092a8:	487f      	ldr	r0, [pc, #508]	; (80094a8 <HAL_OSPIM_Config+0x548>)
 80092aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092ac:	4613      	mov	r3, r2
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	4413      	add	r3, r2
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80092b8:	4413      	add	r3, r2
 80092ba:	3b38      	subs	r3, #56	; 0x38
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3b01      	subs	r3, #1
 80092c0:	f021 0210 	bic.w	r2, r1, #16
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4403      	add	r3, r0
 80092c8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80092ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092cc:	4613      	mov	r3, r2
 80092ce:	005b      	lsls	r3, r3, #1
 80092d0:	4413      	add	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80092d8:	4413      	add	r3, r2
 80092da:	3b30      	subs	r3, #48	; 0x30
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d023      	beq.n	800932a <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80092e2:	4971      	ldr	r1, [pc, #452]	; (80094a8 <HAL_OSPIM_Config+0x548>)
 80092e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092e6:	4613      	mov	r3, r2
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	4413      	add	r3, r2
 80092ec:	00db      	lsls	r3, r3, #3
 80092ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80092f2:	4413      	add	r3, r2
 80092f4:	3b30      	subs	r3, #48	; 0x30
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	440b      	add	r3, r1
 8009302:	6859      	ldr	r1, [r3, #4]
 8009304:	4868      	ldr	r0, [pc, #416]	; (80094a8 <HAL_OSPIM_Config+0x548>)
 8009306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009308:	4613      	mov	r3, r2
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	4413      	add	r3, r2
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009314:	4413      	add	r3, r2
 8009316:	3b30      	subs	r3, #48	; 0x30
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3b01      	subs	r3, #1
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4403      	add	r3, r0
 8009328:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800932a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800932c:	4613      	mov	r3, r2
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	4413      	add	r3, r2
 8009332:	00db      	lsls	r3, r3, #3
 8009334:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009338:	4413      	add	r3, r2
 800933a:	3b2c      	subs	r3, #44	; 0x2c
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d023      	beq.n	800938a <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8009342:	4959      	ldr	r1, [pc, #356]	; (80094a8 <HAL_OSPIM_Config+0x548>)
 8009344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009346:	4613      	mov	r3, r2
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	4413      	add	r3, r2
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009352:	4413      	add	r3, r2
 8009354:	3b2c      	subs	r3, #44	; 0x2c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	3b01      	subs	r3, #1
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	440b      	add	r3, r1
 8009362:	6859      	ldr	r1, [r3, #4]
 8009364:	4850      	ldr	r0, [pc, #320]	; (80094a8 <HAL_OSPIM_Config+0x548>)
 8009366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009368:	4613      	mov	r3, r2
 800936a:	005b      	lsls	r3, r3, #1
 800936c:	4413      	add	r3, r2
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009374:	4413      	add	r3, r2
 8009376:	3b2c      	subs	r3, #44	; 0x2c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3b01      	subs	r3, #1
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4403      	add	r3, r0
 8009388:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	6819      	ldr	r1, [r3, #0]
 800938e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009392:	4613      	mov	r3, r2
 8009394:	005b      	lsls	r3, r3, #1
 8009396:	4413      	add	r3, r2
 8009398:	00db      	lsls	r3, r3, #3
 800939a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800939e:	4413      	add	r3, r2
 80093a0:	3b3c      	subs	r3, #60	; 0x3c
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4299      	cmp	r1, r3
 80093a6:	d03c      	beq.n	8009422 <HAL_OSPIM_Config+0x4c2>
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	6859      	ldr	r1, [r3, #4]
 80093ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80093b0:	4613      	mov	r3, r2
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	4413      	add	r3, r2
 80093b6:	00db      	lsls	r3, r3, #3
 80093b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80093bc:	4413      	add	r3, r2
 80093be:	3b38      	subs	r3, #56	; 0x38
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4299      	cmp	r1, r3
 80093c4:	d02d      	beq.n	8009422 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	6899      	ldr	r1, [r3, #8]
 80093ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80093ce:	4613      	mov	r3, r2
 80093d0:	005b      	lsls	r3, r3, #1
 80093d2:	4413      	add	r3, r2
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80093da:	4413      	add	r3, r2
 80093dc:	3b34      	subs	r3, #52	; 0x34
 80093de:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80093e0:	4299      	cmp	r1, r3
 80093e2:	d01e      	beq.n	8009422 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	68d9      	ldr	r1, [r3, #12]
 80093e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80093ec:	4613      	mov	r3, r2
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	4413      	add	r3, r2
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80093f8:	4413      	add	r3, r2
 80093fa:	3b30      	subs	r3, #48	; 0x30
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4299      	cmp	r1, r3
 8009400:	d00f      	beq.n	8009422 <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	6919      	ldr	r1, [r3, #16]
 8009406:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800940a:	4613      	mov	r3, r2
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	4413      	add	r3, r2
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009416:	4413      	add	r3, r2
 8009418:	3b2c      	subs	r3, #44	; 0x2c
 800941a:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800941c:	4299      	cmp	r1, r3
 800941e:	f040 811e 	bne.w	800965e <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6819      	ldr	r1, [r3, #0]
 8009426:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800942a:	4613      	mov	r3, r2
 800942c:	005b      	lsls	r3, r3, #1
 800942e:	4413      	add	r3, r2
 8009430:	00db      	lsls	r3, r3, #3
 8009432:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009436:	4413      	add	r3, r2
 8009438:	3b3c      	subs	r3, #60	; 0x3c
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4299      	cmp	r1, r3
 800943e:	d135      	bne.n	80094ac <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	6859      	ldr	r1, [r3, #4]
 8009444:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009448:	4613      	mov	r3, r2
 800944a:	005b      	lsls	r3, r3, #1
 800944c:	4413      	add	r3, r2
 800944e:	00db      	lsls	r3, r3, #3
 8009450:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009454:	4413      	add	r3, r2
 8009456:	3b38      	subs	r3, #56	; 0x38
 8009458:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800945a:	4299      	cmp	r1, r3
 800945c:	d126      	bne.n	80094ac <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	68d9      	ldr	r1, [r3, #12]
 8009462:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009466:	4613      	mov	r3, r2
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	4413      	add	r3, r2
 800946c:	00db      	lsls	r3, r3, #3
 800946e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009472:	4413      	add	r3, r2
 8009474:	3b30      	subs	r3, #48	; 0x30
 8009476:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8009478:	4299      	cmp	r1, r3
 800947a:	d117      	bne.n	80094ac <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	6919      	ldr	r1, [r3, #16]
 8009480:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009484:	4613      	mov	r3, r2
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	4413      	add	r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009490:	4413      	add	r3, r2
 8009492:	3b2c      	subs	r3, #44	; 0x2c
 8009494:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8009496:	4299      	cmp	r1, r3
 8009498:	d108      	bne.n	80094ac <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800949a:	4b03      	ldr	r3, [pc, #12]	; (80094a8 <HAL_OSPIM_Config+0x548>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a02      	ldr	r2, [pc, #8]	; (80094a8 <HAL_OSPIM_Config+0x548>)
 80094a0:	f043 0301 	orr.w	r3, r3, #1
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	e0da      	b.n	800965e <HAL_OSPIM_Config+0x6fe>
 80094a8:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80094ac:	49c2      	ldr	r1, [pc, #776]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 80094ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80094b2:	4613      	mov	r3, r2
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	4413      	add	r3, r2
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80094be:	4413      	add	r3, r2
 80094c0:	3b3c      	subs	r3, #60	; 0x3c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	440b      	add	r3, r1
 80094ca:	6859      	ldr	r1, [r3, #4]
 80094cc:	48ba      	ldr	r0, [pc, #744]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 80094ce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80094d2:	4613      	mov	r3, r2
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	4413      	add	r3, r2
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80094de:	4413      	add	r3, r2
 80094e0:	3b3c      	subs	r3, #60	; 0x3c
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	f021 0201 	bic.w	r2, r1, #1
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4403      	add	r3, r0
 80094ee:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80094f0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80094f4:	4613      	mov	r3, r2
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	4413      	add	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009500:	4413      	add	r3, r2
 8009502:	3b38      	subs	r3, #56	; 0x38
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d021      	beq.n	800954e <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800950a:	49ab      	ldr	r1, [pc, #684]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 800950c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009510:	4613      	mov	r3, r2
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	4413      	add	r3, r2
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800951c:	4413      	add	r3, r2
 800951e:	3b38      	subs	r3, #56	; 0x38
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3b01      	subs	r3, #1
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	6859      	ldr	r1, [r3, #4]
 800952a:	48a3      	ldr	r0, [pc, #652]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 800952c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009530:	4613      	mov	r3, r2
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	4413      	add	r3, r2
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800953c:	4413      	add	r3, r2
 800953e:	3b38      	subs	r3, #56	; 0x38
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3b01      	subs	r3, #1
 8009544:	f021 0210 	bic.w	r2, r1, #16
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4403      	add	r3, r0
 800954c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800954e:	499a      	ldr	r1, [pc, #616]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 8009550:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009554:	4613      	mov	r3, r2
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	4413      	add	r3, r2
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009560:	4413      	add	r3, r2
 8009562:	3b34      	subs	r3, #52	; 0x34
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3b01      	subs	r3, #1
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	440b      	add	r3, r1
 800956c:	6859      	ldr	r1, [r3, #4]
 800956e:	4892      	ldr	r0, [pc, #584]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 8009570:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009574:	4613      	mov	r3, r2
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	4413      	add	r3, r2
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009580:	4413      	add	r3, r2
 8009582:	3b34      	subs	r3, #52	; 0x34
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3b01      	subs	r3, #1
 8009588:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4403      	add	r3, r0
 8009590:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009592:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009596:	4613      	mov	r3, r2
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	4413      	add	r3, r2
 800959c:	00db      	lsls	r3, r3, #3
 800959e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80095a2:	4413      	add	r3, r2
 80095a4:	3b30      	subs	r3, #48	; 0x30
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d025      	beq.n	80095f8 <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80095ac:	4982      	ldr	r1, [pc, #520]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 80095ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80095b2:	4613      	mov	r3, r2
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	4413      	add	r3, r2
 80095b8:	00db      	lsls	r3, r3, #3
 80095ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80095be:	4413      	add	r3, r2
 80095c0:	3b30      	subs	r3, #48	; 0x30
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	440b      	add	r3, r1
 80095ce:	6859      	ldr	r1, [r3, #4]
 80095d0:	4879      	ldr	r0, [pc, #484]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 80095d2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80095d6:	4613      	mov	r3, r2
 80095d8:	005b      	lsls	r3, r3, #1
 80095da:	4413      	add	r3, r2
 80095dc:	00db      	lsls	r3, r3, #3
 80095de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80095e2:	4413      	add	r3, r2
 80095e4:	3b30      	subs	r3, #48	; 0x30
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4403      	add	r3, r0
 80095f6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80095f8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80095fc:	4613      	mov	r3, r2
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	4413      	add	r3, r2
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009608:	4413      	add	r3, r2
 800960a:	3b2c      	subs	r3, #44	; 0x2c
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d025      	beq.n	800965e <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8009612:	4969      	ldr	r1, [pc, #420]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 8009614:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009618:	4613      	mov	r3, r2
 800961a:	005b      	lsls	r3, r3, #1
 800961c:	4413      	add	r3, r2
 800961e:	00db      	lsls	r3, r3, #3
 8009620:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009624:	4413      	add	r3, r2
 8009626:	3b2c      	subs	r3, #44	; 0x2c
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3b01      	subs	r3, #1
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	6859      	ldr	r1, [r3, #4]
 8009636:	4860      	ldr	r0, [pc, #384]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 8009638:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800963c:	4613      	mov	r3, r2
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	4413      	add	r3, r2
 8009642:	00db      	lsls	r3, r3, #3
 8009644:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009648:	4413      	add	r3, r2
 800964a:	3b2c      	subs	r3, #44	; 0x2c
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3b01      	subs	r3, #1
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4403      	add	r3, r0
 800965c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800965e:	4a56      	ldr	r2, [pc, #344]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	3b01      	subs	r3, #1
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009672:	025b      	lsls	r3, r3, #9
 8009674:	431a      	orrs	r2, r3
 8009676:	4950      	ldr	r1, [pc, #320]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	3b01      	subs	r3, #1
 800967e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	440b      	add	r3, r1
 8009686:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	1e5a      	subs	r2, r3, #1
 800968e:	4b4a      	ldr	r3, [pc, #296]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	0c1b      	lsrs	r3, r3, #16
 8009694:	b2db      	uxtb	r3, r3
 8009696:	429a      	cmp	r2, r3
 8009698:	d90a      	bls.n	80096b0 <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800969a:	4b47      	ldr	r3, [pc, #284]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	041b      	lsls	r3, r3, #16
 80096aa:	4943      	ldr	r1, [pc, #268]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80096b0:	4b41      	ldr	r3, [pc, #260]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 809b 	beq.w	80097f4 <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80096be:	4a3e      	ldr	r2, [pc, #248]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3b01      	subs	r3, #1
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	f023 0203 	bic.w	r2, r3, #3
 80096d0:	4939      	ldr	r1, [pc, #228]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	f042 0201 	orr.w	r2, r2, #1
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d011      	beq.n	800970e <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80096ea:	4a33      	ldr	r2, [pc, #204]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80096fc:	492e      	ldr	r1, [pc, #184]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	3b01      	subs	r3, #1
 8009704:	f042 0210 	orr.w	r2, r2, #16
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	440b      	add	r3, r1
 800970c:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009716:	2b00      	cmp	r3, #0
 8009718:	d016      	beq.n	8009748 <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800971a:	4a27      	ldr	r2, [pc, #156]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	3b01      	subs	r3, #1
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009730:	4921      	ldr	r1, [pc, #132]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	3b01      	subs	r3, #1
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	440b      	add	r3, r1
 8009744:	605a      	str	r2, [r3, #4]
 8009746:	e019      	b.n	800977c <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d015      	beq.n	800977c <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009750:	4a19      	ldr	r2, [pc, #100]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	3b01      	subs	r3, #1
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009766:	4914      	ldr	r1, [pc, #80]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	3b01      	subs	r3, #1
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	440b      	add	r3, r1
 800977a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d019      	beq.n	80097bc <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8009788:	4a0b      	ldr	r2, [pc, #44]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	3b01      	subs	r3, #1
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800979e:	4906      	ldr	r1, [pc, #24]	; (80097b8 <HAL_OSPIM_Config+0x858>)
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	440b      	add	r3, r1
 80097b2:	605a      	str	r2, [r3, #4]
 80097b4:	e0c6      	b.n	8009944 <HAL_OSPIM_Config+0x9e4>
 80097b6:	bf00      	nop
 80097b8:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 80bf 	beq.w	8009944 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80097c6:	4a6e      	ldr	r2, [pc, #440]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	4413      	add	r3, r2
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80097dc:	4968      	ldr	r1, [pc, #416]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	3b01      	subs	r3, #1
 80097e4:	f003 0301 	and.w	r3, r3, #1
 80097e8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	440b      	add	r3, r1
 80097f0:	605a      	str	r2, [r3, #4]
 80097f2:	e0a7      	b.n	8009944 <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80097f4:	4a62      	ldr	r2, [pc, #392]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	3b01      	subs	r3, #1
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	f023 0203 	bic.w	r2, r3, #3
 8009806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	431a      	orrs	r2, r3
 800980c:	495c      	ldr	r1, [pc, #368]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3b01      	subs	r3, #1
 8009814:	f042 0201 	orr.w	r2, r2, #1
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	440b      	add	r3, r1
 800981c:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d014      	beq.n	8009850 <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8009826:	4a56      	ldr	r2, [pc, #344]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	3b01      	subs	r3, #1
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800983a:	015b      	lsls	r3, r3, #5
 800983c:	431a      	orrs	r2, r3
 800983e:	4950      	ldr	r1, [pc, #320]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	3b01      	subs	r3, #1
 8009846:	f042 0210 	orr.w	r2, r2, #16
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	440b      	add	r3, r1
 800984e:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d019      	beq.n	8009890 <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800985c:	4a48      	ldr	r2, [pc, #288]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	3b01      	subs	r3, #1
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009874:	049b      	lsls	r3, r3, #18
 8009876:	431a      	orrs	r2, r3
 8009878:	4941      	ldr	r1, [pc, #260]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	3b01      	subs	r3, #1
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	440b      	add	r3, r1
 800988c:	605a      	str	r2, [r3, #4]
 800988e:	e01c      	b.n	80098ca <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d018      	beq.n	80098ca <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8009898:	4a39      	ldr	r2, [pc, #228]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	3b01      	subs	r3, #1
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80098ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b0:	069b      	lsls	r3, r3, #26
 80098b2:	431a      	orrs	r2, r3
 80098b4:	4932      	ldr	r1, [pc, #200]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	440b      	add	r3, r1
 80098c8:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d019      	beq.n	800990a <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80098d6:	4a2a      	ldr	r2, [pc, #168]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	3b01      	subs	r3, #1
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80098ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ee:	049b      	lsls	r3, r3, #18
 80098f0:	431a      	orrs	r2, r3
 80098f2:	4923      	ldr	r1, [pc, #140]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	3b01      	subs	r3, #1
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	440b      	add	r3, r1
 8009906:	605a      	str	r2, [r3, #4]
 8009908:	e01c      	b.n	8009944 <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d018      	beq.n	8009944 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8009912:	4a1b      	ldr	r2, [pc, #108]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	3b01      	subs	r3, #1
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800992a:	069b      	lsls	r3, r3, #26
 800992c:	431a      	orrs	r2, r3
 800992e:	4914      	ldr	r1, [pc, #80]	; (8009980 <HAL_OSPIM_Config+0xa20>)
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	3b01      	subs	r3, #1
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	440b      	add	r3, r1
 8009942:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8009944:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	2b00      	cmp	r3, #0
 800994e:	d005      	beq.n	800995c <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8009950:	4b0c      	ldr	r3, [pc, #48]	; (8009984 <HAL_OSPIM_Config+0xa24>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a0b      	ldr	r2, [pc, #44]	; (8009984 <HAL_OSPIM_Config+0xa24>)
 8009956:	f043 0301 	orr.w	r3, r3, #1
 800995a:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800995c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009960:	f003 0302 	and.w	r3, r3, #2
 8009964:	2b00      	cmp	r3, #0
 8009966:	d005      	beq.n	8009974 <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8009968:	4b07      	ldr	r3, [pc, #28]	; (8009988 <HAL_OSPIM_Config+0xa28>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a06      	ldr	r2, [pc, #24]	; (8009988 <HAL_OSPIM_Config+0xa28>)
 800996e:	f043 0301 	orr.w	r3, r3, #1
 8009972:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8009974:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009978:	4618      	mov	r0, r3
 800997a:	3750      	adds	r7, #80	; 0x50
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	5200b400 	.word	0x5200b400
 8009984:	52005000 	.word	0x52005000
 8009988:	5200a000 	.word	0x5200a000

0800998c <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009998:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099a8:	d122      	bne.n	80099f0 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6a1b      	ldr	r3, [r3, #32]
 80099b0:	f003 0320 	and.w	r3, r3, #32
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d014      	beq.n	80099e2 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2202      	movs	r2, #2
 80099be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80099ce:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0202 	orr.w	r2, r2, #2
 80099de:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 80099e0:	e00c      	b.n	80099fc <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2202      	movs	r2, #2
 80099e6:	655a      	str	r2, [r3, #84]	; 0x54
      HAL_OSPI_AbortCpltCallback(hospi);
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7ff fa63 	bl	8008eb4 <HAL_OSPI_AbortCpltCallback>
}
 80099ee:	e005      	b.n	80099fc <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2202      	movs	r2, #2
 80099f4:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_OSPI_ErrorCallback(hospi);
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f7ff fa52 	bl	8008ea0 <HAL_OSPI_ErrorCallback>
}
 80099fc:	bf00      	nop
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	603b      	str	r3, [r7, #0]
 8009a10:	4613      	mov	r3, r2
 8009a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8009a14:	e01a      	b.n	8009a4c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1c:	d016      	beq.n	8009a4c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a1e:	f7f9 fad9 	bl	8002fd4 <HAL_GetTick>
 8009a22:	4602      	mov	r2, r0
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d302      	bcc.n	8009a34 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10b      	bne.n	8009a4c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a3a:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a40:	f043 0201 	orr.w	r2, r3, #1
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e00e      	b.n	8009a6a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6a1a      	ldr	r2, [r3, #32]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	4013      	ands	r3, r2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	bf14      	ite	ne
 8009a5a:	2301      	movne	r3, #1
 8009a5c:	2300      	moveq	r3, #0
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	461a      	mov	r2, r3
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d1d6      	bne.n	8009a16 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
	...

08009a74 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b089      	sub	sp, #36	; 0x24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009a90:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10a      	bne.n	8009ab0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	430a      	orrs	r2, r1
 8009aae:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d114      	bne.n	8009ae2 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009ac0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009aca:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009ad4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009ade:	60fb      	str	r3, [r7, #12]
 8009ae0:	e02c      	b.n	8009b3c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d114      	bne.n	8009b14 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009af2:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8009afc:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b06:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009b10:	60fb      	str	r3, [r7, #12]
 8009b12:	e013      	b.n	8009b3c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009b1c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8009b26:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009b30:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b44:	431a      	orrs	r2, r3
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d012      	beq.n	8009b78 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b6a:	4319      	orrs	r1, r3
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b70:	430b      	orrs	r3, r1
 8009b72:	431a      	orrs	r2, r3
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f023 021f 	bic.w	r2, r3, #31
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b84:	431a      	orrs	r2, r3
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d009      	beq.n	8009ba6 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d105      	bne.n	8009ba6 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3a01      	subs	r2, #1
 8009ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 8095 	beq.w	8009cda <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	69db      	ldr	r3, [r3, #28]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d053      	beq.n	8009c60 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d01e      	beq.n	8009bfe <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	4b64      	ldr	r3, [pc, #400]	; (8009d58 <OSPI_ConfigCmd+0x2e4>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	68d1      	ldr	r1, [r2, #12]
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	6952      	ldr	r2, [r2, #20]
 8009bd0:	4311      	orrs	r1, r2
 8009bd2:	683a      	ldr	r2, [r7, #0]
 8009bd4:	6912      	ldr	r2, [r2, #16]
 8009bd6:	4311      	orrs	r1, r2
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	69d2      	ldr	r2, [r2, #28]
 8009bdc:	4311      	orrs	r1, r2
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009be2:	4311      	orrs	r1, r2
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	6a12      	ldr	r2, [r2, #32]
 8009be8:	4311      	orrs	r1, r2
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009bee:	4311      	orrs	r1, r2
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	e026      	b.n	8009c4c <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	4b56      	ldr	r3, [pc, #344]	; (8009d5c <OSPI_ConfigCmd+0x2e8>)
 8009c04:	4013      	ands	r3, r2
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	68d1      	ldr	r1, [r2, #12]
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	6952      	ldr	r2, [r2, #20]
 8009c0e:	4311      	orrs	r1, r2
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	6912      	ldr	r2, [r2, #16]
 8009c14:	4311      	orrs	r1, r2
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	69d2      	ldr	r2, [r2, #28]
 8009c1a:	4311      	orrs	r1, r2
 8009c1c:	683a      	ldr	r2, [r7, #0]
 8009c1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009c20:	4311      	orrs	r1, r2
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	6a12      	ldr	r2, [r2, #32]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	431a      	orrs	r2, r3
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c36:	d109      	bne.n	8009c4c <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009c3c:	2b08      	cmp	r3, #8
 8009c3e:	d105      	bne.n	8009c4c <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	689a      	ldr	r2, [r3, #8]
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	6992      	ldr	r2, [r2, #24]
 8009c5c:	649a      	str	r2, [r3, #72]	; 0x48
 8009c5e:	e074      	b.n	8009d4a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d015      	beq.n	8009c94 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	4b3c      	ldr	r3, [pc, #240]	; (8009d60 <OSPI_ConfigCmd+0x2ec>)
 8009c6e:	4013      	ands	r3, r2
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	68d1      	ldr	r1, [r2, #12]
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	6952      	ldr	r2, [r2, #20]
 8009c78:	4311      	orrs	r1, r2
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	6912      	ldr	r2, [r2, #16]
 8009c7e:	4311      	orrs	r1, r2
 8009c80:	683a      	ldr	r2, [r7, #0]
 8009c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009c84:	4311      	orrs	r1, r2
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	431a      	orrs	r2, r3
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	e01d      	b.n	8009cd0 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	68d9      	ldr	r1, [r3, #12]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	4319      	orrs	r1, r3
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	430b      	orrs	r3, r1
 8009cac:	431a      	orrs	r2, r3
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cba:	d109      	bne.n	8009cd0 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009cc0:	2b08      	cmp	r3, #8
 8009cc2:	d105      	bne.n	8009cd0 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	601a      	str	r2, [r3, #0]
 8009cd8:	e037      	b.n	8009d4a <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d02e      	beq.n	8009d40 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d015      	beq.n	8009d16 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	4b1d      	ldr	r3, [pc, #116]	; (8009d64 <OSPI_ConfigCmd+0x2f0>)
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	69d1      	ldr	r1, [r2, #28]
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009cfa:	4311      	orrs	r1, r2
 8009cfc:	683a      	ldr	r2, [r7, #0]
 8009cfe:	6a12      	ldr	r2, [r2, #32]
 8009d00:	4311      	orrs	r1, r2
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d06:	4311      	orrs	r1, r2
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009d0c:	430a      	orrs	r2, r1
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	e00e      	b.n	8009d34 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	69d9      	ldr	r1, [r3, #28]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	4319      	orrs	r1, r3
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	6a1b      	ldr	r3, [r3, #32]
 8009d2c:	430b      	orrs	r3, r1
 8009d2e:	431a      	orrs	r2, r3
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	6992      	ldr	r2, [r2, #24]
 8009d3c:	649a      	str	r2, [r3, #72]	; 0x48
 8009d3e:	e004      	b.n	8009d4a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2208      	movs	r2, #8
 8009d48:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 8009d4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3724      	adds	r7, #36	; 0x24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	f0ffc0c0 	.word	0xf0ffc0c0
 8009d5c:	ffffc0c0 	.word	0xffffc0c0
 8009d60:	f0ffffc0 	.word	0xf0ffffc0
 8009d64:	f0ffc0ff 	.word	0xf0ffc0ff

08009d68 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	4603      	mov	r3, r0
 8009d70:	6039      	str	r1, [r7, #0]
 8009d72:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d005      	beq.n	8009d8e <OSPIM_GetConfig+0x26>
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d802      	bhi.n	8009d8e <OSPIM_GetConfig+0x26>
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d102      	bne.n	8009d94 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	75fb      	strb	r3, [r7, #23]
 8009d92:	e098      	b.n	8009ec6 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	2200      	movs	r2, #0
 8009da4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2200      	movs	r2, #0
 8009daa:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2200      	movs	r2, #0
 8009db0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8009db2:	79fb      	ldrb	r3, [r7, #7]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d10b      	bne.n	8009dd0 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8009db8:	4b46      	ldr	r3, [pc, #280]	; (8009ed4 <OSPIM_GetConfig+0x16c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d102      	bne.n	8009dca <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8009dc4:	4b44      	ldr	r3, [pc, #272]	; (8009ed8 <OSPIM_GetConfig+0x170>)
 8009dc6:	613b      	str	r3, [r7, #16]
 8009dc8:	e002      	b.n	8009dd0 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8009dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dce:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	e074      	b.n	8009ec0 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8009dd6:	4a3f      	ldr	r2, [pc, #252]	; (8009ed4 <OSPIM_GetConfig+0x16c>)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00a      	beq.n	8009e02 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	4053      	eors	r3, r2
 8009df2:	f003 0302 	and.w	r3, r3, #2
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d103      	bne.n	8009e02 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	f003 0310 	and.w	r3, r3, #16
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00a      	beq.n	8009e22 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	4053      	eors	r3, r2
 8009e12:	f003 0320 	and.w	r3, r3, #32
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d103      	bne.n	8009e22 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00a      	beq.n	8009e42 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	4053      	eors	r3, r2
 8009e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d103      	bne.n	8009e42 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1c5a      	adds	r2, r3, #1
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d018      	beq.n	8009e7e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	4053      	eors	r3, r2
 8009e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d111      	bne.n	8009e7e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d106      	bne.n	8009e72 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	3301      	adds	r3, #1
 8009e68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	60da      	str	r2, [r3, #12]
 8009e70:	e005      	b.n	8009e7e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3301      	adds	r3, #1
 8009e76:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d018      	beq.n	8009eba <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	4053      	eors	r3, r2
 8009e8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d111      	bne.n	8009eba <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d106      	bne.n	8009eae <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	611a      	str	r2, [r3, #16]
 8009eac:	e005      	b.n	8009eba <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d987      	bls.n	8009dd6 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	371c      	adds	r7, #28
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	5200b400 	.word	0x5200b400
 8009ed8:	04040222 	.word	0x04040222

08009edc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009ee0:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a04      	ldr	r2, [pc, #16]	; (8009ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eea:	6013      	str	r3, [r2, #0]
}
 8009eec:	bf00      	nop
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	58024800 	.word	0x58024800

08009efc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f04:	4b19      	ldr	r3, [pc, #100]	; (8009f6c <HAL_PWREx_ConfigSupply+0x70>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f003 0304 	and.w	r3, r3, #4
 8009f0c:	2b04      	cmp	r3, #4
 8009f0e:	d00a      	beq.n	8009f26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f10:	4b16      	ldr	r3, [pc, #88]	; (8009f6c <HAL_PWREx_ConfigSupply+0x70>)
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	f003 0307 	and.w	r3, r3, #7
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d001      	beq.n	8009f22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e01f      	b.n	8009f62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	e01d      	b.n	8009f62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009f26:	4b11      	ldr	r3, [pc, #68]	; (8009f6c <HAL_PWREx_ConfigSupply+0x70>)
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	f023 0207 	bic.w	r2, r3, #7
 8009f2e:	490f      	ldr	r1, [pc, #60]	; (8009f6c <HAL_PWREx_ConfigSupply+0x70>)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009f36:	f7f9 f84d 	bl	8002fd4 <HAL_GetTick>
 8009f3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f3c:	e009      	b.n	8009f52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009f3e:	f7f9 f849 	bl	8002fd4 <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f4c:	d901      	bls.n	8009f52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e007      	b.n	8009f62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f52:	4b06      	ldr	r3, [pc, #24]	; (8009f6c <HAL_PWREx_ConfigSupply+0x70>)
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f5e:	d1ee      	bne.n	8009f3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	58024800 	.word	0x58024800

08009f70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b08c      	sub	sp, #48	; 0x30
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e3f3      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 80b3 	beq.w	800a0f6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f90:	4b9e      	ldr	r3, [pc, #632]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f9a:	4b9c      	ldr	r3, [pc, #624]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 8009f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa2:	2b10      	cmp	r3, #16
 8009fa4:	d007      	beq.n	8009fb6 <HAL_RCC_OscConfig+0x46>
 8009fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa8:	2b18      	cmp	r3, #24
 8009faa:	d112      	bne.n	8009fd2 <HAL_RCC_OscConfig+0x62>
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	f003 0303 	and.w	r3, r3, #3
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d10d      	bne.n	8009fd2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fb6:	4b95      	ldr	r3, [pc, #596]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 8098 	beq.w	800a0f4 <HAL_RCC_OscConfig+0x184>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f040 8093 	bne.w	800a0f4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e3cb      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fda:	d106      	bne.n	8009fea <HAL_RCC_OscConfig+0x7a>
 8009fdc:	4b8b      	ldr	r3, [pc, #556]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a8a      	ldr	r2, [pc, #552]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 8009fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fe6:	6013      	str	r3, [r2, #0]
 8009fe8:	e058      	b.n	800a09c <HAL_RCC_OscConfig+0x12c>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d112      	bne.n	800a018 <HAL_RCC_OscConfig+0xa8>
 8009ff2:	4b86      	ldr	r3, [pc, #536]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a85      	ldr	r2, [pc, #532]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 8009ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	4b83      	ldr	r3, [pc, #524]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a82      	ldr	r2, [pc, #520]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a004:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a008:	6013      	str	r3, [r2, #0]
 800a00a:	4b80      	ldr	r3, [pc, #512]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a7f      	ldr	r2, [pc, #508]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	e041      	b.n	800a09c <HAL_RCC_OscConfig+0x12c>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a020:	d112      	bne.n	800a048 <HAL_RCC_OscConfig+0xd8>
 800a022:	4b7a      	ldr	r3, [pc, #488]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a79      	ldr	r2, [pc, #484]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a02c:	6013      	str	r3, [r2, #0]
 800a02e:	4b77      	ldr	r3, [pc, #476]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a76      	ldr	r2, [pc, #472]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a034:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a038:	6013      	str	r3, [r2, #0]
 800a03a:	4b74      	ldr	r3, [pc, #464]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a73      	ldr	r2, [pc, #460]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	e029      	b.n	800a09c <HAL_RCC_OscConfig+0x12c>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a050:	d112      	bne.n	800a078 <HAL_RCC_OscConfig+0x108>
 800a052:	4b6e      	ldr	r3, [pc, #440]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a6d      	ldr	r2, [pc, #436]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a05c:	6013      	str	r3, [r2, #0]
 800a05e:	4b6b      	ldr	r3, [pc, #428]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a6a      	ldr	r2, [pc, #424]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	4b68      	ldr	r3, [pc, #416]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a67      	ldr	r2, [pc, #412]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a074:	6013      	str	r3, [r2, #0]
 800a076:	e011      	b.n	800a09c <HAL_RCC_OscConfig+0x12c>
 800a078:	4b64      	ldr	r3, [pc, #400]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a63      	ldr	r2, [pc, #396]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a07e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a082:	6013      	str	r3, [r2, #0]
 800a084:	4b61      	ldr	r3, [pc, #388]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a60      	ldr	r2, [pc, #384]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a08a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	4b5e      	ldr	r3, [pc, #376]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a5d      	ldr	r2, [pc, #372]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a096:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a09a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d013      	beq.n	800a0cc <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0a4:	f7f8 ff96 	bl	8002fd4 <HAL_GetTick>
 800a0a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0aa:	e008      	b.n	800a0be <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a0ac:	f7f8 ff92 	bl	8002fd4 <HAL_GetTick>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	2b64      	cmp	r3, #100	; 0x64
 800a0b8:	d901      	bls.n	800a0be <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e355      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0be:	4b53      	ldr	r3, [pc, #332]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0f0      	beq.n	800a0ac <HAL_RCC_OscConfig+0x13c>
 800a0ca:	e014      	b.n	800a0f6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0cc:	f7f8 ff82 	bl	8002fd4 <HAL_GetTick>
 800a0d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0d2:	e008      	b.n	800a0e6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a0d4:	f7f8 ff7e 	bl	8002fd4 <HAL_GetTick>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	2b64      	cmp	r3, #100	; 0x64
 800a0e0:	d901      	bls.n	800a0e6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e341      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0e6:	4b49      	ldr	r3, [pc, #292]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1f0      	bne.n	800a0d4 <HAL_RCC_OscConfig+0x164>
 800a0f2:	e000      	b.n	800a0f6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0302 	and.w	r3, r3, #2
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 808c 	beq.w	800a21c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a104:	4b41      	ldr	r3, [pc, #260]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a10c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a10e:	4b3f      	ldr	r3, [pc, #252]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d007      	beq.n	800a12a <HAL_RCC_OscConfig+0x1ba>
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	2b18      	cmp	r3, #24
 800a11e:	d137      	bne.n	800a190 <HAL_RCC_OscConfig+0x220>
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	f003 0303 	and.w	r3, r3, #3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d132      	bne.n	800a190 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a12a:	4b38      	ldr	r3, [pc, #224]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 0304 	and.w	r3, r3, #4
 800a132:	2b00      	cmp	r3, #0
 800a134:	d005      	beq.n	800a142 <HAL_RCC_OscConfig+0x1d2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e313      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a142:	4b32      	ldr	r3, [pc, #200]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f023 0219 	bic.w	r2, r3, #25
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	492f      	ldr	r1, [pc, #188]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a150:	4313      	orrs	r3, r2
 800a152:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a154:	f7f8 ff3e 	bl	8002fd4 <HAL_GetTick>
 800a158:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a15a:	e008      	b.n	800a16e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a15c:	f7f8 ff3a 	bl	8002fd4 <HAL_GetTick>
 800a160:	4602      	mov	r2, r0
 800a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	2b02      	cmp	r3, #2
 800a168:	d901      	bls.n	800a16e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800a16a:	2303      	movs	r3, #3
 800a16c:	e2fd      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a16e:	4b27      	ldr	r3, [pc, #156]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0304 	and.w	r3, r3, #4
 800a176:	2b00      	cmp	r3, #0
 800a178:	d0f0      	beq.n	800a15c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a17a:	4b24      	ldr	r3, [pc, #144]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	061b      	lsls	r3, r3, #24
 800a188:	4920      	ldr	r1, [pc, #128]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a18a:	4313      	orrs	r3, r2
 800a18c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a18e:	e045      	b.n	800a21c <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d026      	beq.n	800a1e6 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a198:	4b1c      	ldr	r3, [pc, #112]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f023 0219 	bic.w	r2, r3, #25
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	4919      	ldr	r1, [pc, #100]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1aa:	f7f8 ff13 	bl	8002fd4 <HAL_GetTick>
 800a1ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1b0:	e008      	b.n	800a1c4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a1b2:	f7f8 ff0f 	bl	8002fd4 <HAL_GetTick>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d901      	bls.n	800a1c4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800a1c0:	2303      	movs	r3, #3
 800a1c2:	e2d2      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1c4:	4b11      	ldr	r3, [pc, #68]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d0f0      	beq.n	800a1b2 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1d0:	4b0e      	ldr	r3, [pc, #56]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	061b      	lsls	r3, r3, #24
 800a1de:	490b      	ldr	r1, [pc, #44]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	604b      	str	r3, [r1, #4]
 800a1e4:	e01a      	b.n	800a21c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1e6:	4b09      	ldr	r3, [pc, #36]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a08      	ldr	r2, [pc, #32]	; (800a20c <HAL_RCC_OscConfig+0x29c>)
 800a1ec:	f023 0301 	bic.w	r3, r3, #1
 800a1f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f2:	f7f8 feef 	bl	8002fd4 <HAL_GetTick>
 800a1f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1f8:	e00a      	b.n	800a210 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a1fa:	f7f8 feeb 	bl	8002fd4 <HAL_GetTick>
 800a1fe:	4602      	mov	r2, r0
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	2b02      	cmp	r3, #2
 800a206:	d903      	bls.n	800a210 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e2ae      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
 800a20c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a210:	4b99      	ldr	r3, [pc, #612]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 0304 	and.w	r3, r3, #4
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1ee      	bne.n	800a1fa <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0310 	and.w	r3, r3, #16
 800a224:	2b00      	cmp	r3, #0
 800a226:	d06a      	beq.n	800a2fe <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a228:	4b93      	ldr	r3, [pc, #588]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a230:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a232:	4b91      	ldr	r3, [pc, #580]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a236:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	2b08      	cmp	r3, #8
 800a23c:	d007      	beq.n	800a24e <HAL_RCC_OscConfig+0x2de>
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	2b18      	cmp	r3, #24
 800a242:	d11b      	bne.n	800a27c <HAL_RCC_OscConfig+0x30c>
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f003 0303 	and.w	r3, r3, #3
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d116      	bne.n	800a27c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a24e:	4b8a      	ldr	r3, [pc, #552]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a256:	2b00      	cmp	r3, #0
 800a258:	d005      	beq.n	800a266 <HAL_RCC_OscConfig+0x2f6>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	2b80      	cmp	r3, #128	; 0x80
 800a260:	d001      	beq.n	800a266 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e281      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a266:	4b84      	ldr	r3, [pc, #528]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	061b      	lsls	r3, r3, #24
 800a274:	4980      	ldr	r1, [pc, #512]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a276:	4313      	orrs	r3, r2
 800a278:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a27a:	e040      	b.n	800a2fe <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	69db      	ldr	r3, [r3, #28]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d023      	beq.n	800a2cc <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a284:	4b7c      	ldr	r3, [pc, #496]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a7b      	ldr	r2, [pc, #492]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a28a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a28e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a290:	f7f8 fea0 	bl	8002fd4 <HAL_GetTick>
 800a294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a296:	e008      	b.n	800a2aa <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a298:	f7f8 fe9c 	bl	8002fd4 <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d901      	bls.n	800a2aa <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e25f      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2aa:	4b73      	ldr	r3, [pc, #460]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0f0      	beq.n	800a298 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2b6:	4b70      	ldr	r3, [pc, #448]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	061b      	lsls	r3, r3, #24
 800a2c4:	496c      	ldr	r1, [pc, #432]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	60cb      	str	r3, [r1, #12]
 800a2ca:	e018      	b.n	800a2fe <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a2cc:	4b6a      	ldr	r3, [pc, #424]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a69      	ldr	r2, [pc, #420]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a2d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2d8:	f7f8 fe7c 	bl	8002fd4 <HAL_GetTick>
 800a2dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a2de:	e008      	b.n	800a2f2 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a2e0:	f7f8 fe78 	bl	8002fd4 <HAL_GetTick>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d901      	bls.n	800a2f2 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e23b      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a2f2:	4b61      	ldr	r3, [pc, #388]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1f0      	bne.n	800a2e0 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0308 	and.w	r3, r3, #8
 800a306:	2b00      	cmp	r3, #0
 800a308:	d036      	beq.n	800a378 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d019      	beq.n	800a346 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a312:	4b59      	ldr	r3, [pc, #356]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a316:	4a58      	ldr	r2, [pc, #352]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a318:	f043 0301 	orr.w	r3, r3, #1
 800a31c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a31e:	f7f8 fe59 	bl	8002fd4 <HAL_GetTick>
 800a322:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a324:	e008      	b.n	800a338 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a326:	f7f8 fe55 	bl	8002fd4 <HAL_GetTick>
 800a32a:	4602      	mov	r2, r0
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	2b02      	cmp	r3, #2
 800a332:	d901      	bls.n	800a338 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a334:	2303      	movs	r3, #3
 800a336:	e218      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a338:	4b4f      	ldr	r3, [pc, #316]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a33a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d0f0      	beq.n	800a326 <HAL_RCC_OscConfig+0x3b6>
 800a344:	e018      	b.n	800a378 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a346:	4b4c      	ldr	r3, [pc, #304]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a34a:	4a4b      	ldr	r2, [pc, #300]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a34c:	f023 0301 	bic.w	r3, r3, #1
 800a350:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a352:	f7f8 fe3f 	bl	8002fd4 <HAL_GetTick>
 800a356:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a358:	e008      	b.n	800a36c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a35a:	f7f8 fe3b 	bl	8002fd4 <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	2b02      	cmp	r3, #2
 800a366:	d901      	bls.n	800a36c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e1fe      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a36c:	4b42      	ldr	r3, [pc, #264]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a36e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a370:	f003 0302 	and.w	r3, r3, #2
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1f0      	bne.n	800a35a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0320 	and.w	r3, r3, #32
 800a380:	2b00      	cmp	r3, #0
 800a382:	d036      	beq.n	800a3f2 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d019      	beq.n	800a3c0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a38c:	4b3a      	ldr	r3, [pc, #232]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a39      	ldr	r2, [pc, #228]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a392:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a396:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a398:	f7f8 fe1c 	bl	8002fd4 <HAL_GetTick>
 800a39c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a39e:	e008      	b.n	800a3b2 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a3a0:	f7f8 fe18 	bl	8002fd4 <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d901      	bls.n	800a3b2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e1db      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3b2:	4b31      	ldr	r3, [pc, #196]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d0f0      	beq.n	800a3a0 <HAL_RCC_OscConfig+0x430>
 800a3be:	e018      	b.n	800a3f2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a3c0:	4b2d      	ldr	r3, [pc, #180]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a2c      	ldr	r2, [pc, #176]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a3c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3cc:	f7f8 fe02 	bl	8002fd4 <HAL_GetTick>
 800a3d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a3d2:	e008      	b.n	800a3e6 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a3d4:	f7f8 fdfe 	bl	8002fd4 <HAL_GetTick>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d901      	bls.n	800a3e6 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	e1c1      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a3e6:	4b24      	ldr	r3, [pc, #144]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1f0      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0304 	and.w	r3, r3, #4
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f000 80af 	beq.w	800a55e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a400:	4b1e      	ldr	r3, [pc, #120]	; (800a47c <HAL_RCC_OscConfig+0x50c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a1d      	ldr	r2, [pc, #116]	; (800a47c <HAL_RCC_OscConfig+0x50c>)
 800a406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a40a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a40c:	f7f8 fde2 	bl	8002fd4 <HAL_GetTick>
 800a410:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a412:	e008      	b.n	800a426 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a414:	f7f8 fdde 	bl	8002fd4 <HAL_GetTick>
 800a418:	4602      	mov	r2, r0
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	2b64      	cmp	r3, #100	; 0x64
 800a420:	d901      	bls.n	800a426 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 800a422:	2303      	movs	r3, #3
 800a424:	e1a1      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a426:	4b15      	ldr	r3, [pc, #84]	; (800a47c <HAL_RCC_OscConfig+0x50c>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0f0      	beq.n	800a414 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d106      	bne.n	800a448 <HAL_RCC_OscConfig+0x4d8>
 800a43a:	4b0f      	ldr	r3, [pc, #60]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a43e:	4a0e      	ldr	r2, [pc, #56]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a440:	f043 0301 	orr.w	r3, r3, #1
 800a444:	6713      	str	r3, [r2, #112]	; 0x70
 800a446:	e05b      	b.n	800a500 <HAL_RCC_OscConfig+0x590>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d117      	bne.n	800a480 <HAL_RCC_OscConfig+0x510>
 800a450:	4b09      	ldr	r3, [pc, #36]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a454:	4a08      	ldr	r2, [pc, #32]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a456:	f023 0301 	bic.w	r3, r3, #1
 800a45a:	6713      	str	r3, [r2, #112]	; 0x70
 800a45c:	4b06      	ldr	r3, [pc, #24]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a45e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a460:	4a05      	ldr	r2, [pc, #20]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a466:	6713      	str	r3, [r2, #112]	; 0x70
 800a468:	4b03      	ldr	r3, [pc, #12]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46c:	4a02      	ldr	r2, [pc, #8]	; (800a478 <HAL_RCC_OscConfig+0x508>)
 800a46e:	f023 0304 	bic.w	r3, r3, #4
 800a472:	6713      	str	r3, [r2, #112]	; 0x70
 800a474:	e044      	b.n	800a500 <HAL_RCC_OscConfig+0x590>
 800a476:	bf00      	nop
 800a478:	58024400 	.word	0x58024400
 800a47c:	58024800 	.word	0x58024800
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	2b05      	cmp	r3, #5
 800a486:	d112      	bne.n	800a4ae <HAL_RCC_OscConfig+0x53e>
 800a488:	4b95      	ldr	r3, [pc, #596]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48c:	4a94      	ldr	r2, [pc, #592]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a48e:	f043 0304 	orr.w	r3, r3, #4
 800a492:	6713      	str	r3, [r2, #112]	; 0x70
 800a494:	4b92      	ldr	r3, [pc, #584]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a498:	4a91      	ldr	r2, [pc, #580]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a49a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a49e:	6713      	str	r3, [r2, #112]	; 0x70
 800a4a0:	4b8f      	ldr	r3, [pc, #572]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a4:	4a8e      	ldr	r2, [pc, #568]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4a6:	f043 0301 	orr.w	r3, r3, #1
 800a4aa:	6713      	str	r3, [r2, #112]	; 0x70
 800a4ac:	e028      	b.n	800a500 <HAL_RCC_OscConfig+0x590>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	2b85      	cmp	r3, #133	; 0x85
 800a4b4:	d112      	bne.n	800a4dc <HAL_RCC_OscConfig+0x56c>
 800a4b6:	4b8a      	ldr	r3, [pc, #552]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ba:	4a89      	ldr	r2, [pc, #548]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4bc:	f043 0304 	orr.w	r3, r3, #4
 800a4c0:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c2:	4b87      	ldr	r3, [pc, #540]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c6:	4a86      	ldr	r2, [pc, #536]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4cc:	6713      	str	r3, [r2, #112]	; 0x70
 800a4ce:	4b84      	ldr	r3, [pc, #528]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d2:	4a83      	ldr	r2, [pc, #524]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4d4:	f043 0301 	orr.w	r3, r3, #1
 800a4d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a4da:	e011      	b.n	800a500 <HAL_RCC_OscConfig+0x590>
 800a4dc:	4b80      	ldr	r3, [pc, #512]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e0:	4a7f      	ldr	r2, [pc, #508]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4e2:	f023 0301 	bic.w	r3, r3, #1
 800a4e6:	6713      	str	r3, [r2, #112]	; 0x70
 800a4e8:	4b7d      	ldr	r3, [pc, #500]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ec:	4a7c      	ldr	r2, [pc, #496]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4ee:	f023 0304 	bic.w	r3, r3, #4
 800a4f2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4f4:	4b7a      	ldr	r3, [pc, #488]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f8:	4a79      	ldr	r2, [pc, #484]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d015      	beq.n	800a534 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a508:	f7f8 fd64 	bl	8002fd4 <HAL_GetTick>
 800a50c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a50e:	e00a      	b.n	800a526 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a510:	f7f8 fd60 	bl	8002fd4 <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a51e:	4293      	cmp	r3, r2
 800a520:	d901      	bls.n	800a526 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 800a522:	2303      	movs	r3, #3
 800a524:	e121      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a526:	4b6e      	ldr	r3, [pc, #440]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d0ee      	beq.n	800a510 <HAL_RCC_OscConfig+0x5a0>
 800a532:	e014      	b.n	800a55e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a534:	f7f8 fd4e 	bl	8002fd4 <HAL_GetTick>
 800a538:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a53a:	e00a      	b.n	800a552 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a53c:	f7f8 fd4a 	bl	8002fd4 <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	f241 3288 	movw	r2, #5000	; 0x1388
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d901      	bls.n	800a552 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e10b      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a552:	4b63      	ldr	r3, [pc, #396]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1ee      	bne.n	800a53c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 8100 	beq.w	800a768 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a568:	4b5d      	ldr	r3, [pc, #372]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a570:	2b18      	cmp	r3, #24
 800a572:	f000 80bb 	beq.w	800a6ec <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	f040 8095 	bne.w	800a6aa <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a580:	4b57      	ldr	r3, [pc, #348]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a56      	ldr	r2, [pc, #344]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a58a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a58c:	f7f8 fd22 	bl	8002fd4 <HAL_GetTick>
 800a590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a592:	e008      	b.n	800a5a6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a594:	f7f8 fd1e 	bl	8002fd4 <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d901      	bls.n	800a5a6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e0e1      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5a6:	4b4e      	ldr	r3, [pc, #312]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1f0      	bne.n	800a594 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a5b2:	4b4b      	ldr	r3, [pc, #300]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a5b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5b6:	4b4b      	ldr	r3, [pc, #300]	; (800a6e4 <HAL_RCC_OscConfig+0x774>)
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a5c2:	0112      	lsls	r2, r2, #4
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	4946      	ldr	r1, [pc, #280]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	628b      	str	r3, [r1, #40]	; 0x28
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	025b      	lsls	r3, r3, #9
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	431a      	orrs	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	041b      	lsls	r3, r3, #16
 800a5ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	061b      	lsls	r3, r3, #24
 800a5f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5fc:	4938      	ldr	r1, [pc, #224]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a602:	4b37      	ldr	r3, [pc, #220]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a606:	4a36      	ldr	r2, [pc, #216]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a608:	f023 0301 	bic.w	r3, r3, #1
 800a60c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a60e:	4b34      	ldr	r3, [pc, #208]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a612:	4b35      	ldr	r3, [pc, #212]	; (800a6e8 <HAL_RCC_OscConfig+0x778>)
 800a614:	4013      	ands	r3, r2
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a61a:	00d2      	lsls	r2, r2, #3
 800a61c:	4930      	ldr	r1, [pc, #192]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a61e:	4313      	orrs	r3, r2
 800a620:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a622:	4b2f      	ldr	r3, [pc, #188]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a626:	f023 020c 	bic.w	r2, r3, #12
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62e:	492c      	ldr	r1, [pc, #176]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a630:	4313      	orrs	r3, r2
 800a632:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a634:	4b2a      	ldr	r3, [pc, #168]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a638:	f023 0202 	bic.w	r2, r3, #2
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a640:	4927      	ldr	r1, [pc, #156]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a642:	4313      	orrs	r3, r2
 800a644:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a646:	4b26      	ldr	r3, [pc, #152]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	4a25      	ldr	r2, [pc, #148]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a64c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a650:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a652:	4b23      	ldr	r3, [pc, #140]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	4a22      	ldr	r2, [pc, #136]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a65c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a65e:	4b20      	ldr	r3, [pc, #128]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a662:	4a1f      	ldr	r2, [pc, #124]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a668:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a66a:	4b1d      	ldr	r3, [pc, #116]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	4a1c      	ldr	r2, [pc, #112]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a670:	f043 0301 	orr.w	r3, r3, #1
 800a674:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a676:	4b1a      	ldr	r3, [pc, #104]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a19      	ldr	r2, [pc, #100]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a67c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a682:	f7f8 fca7 	bl	8002fd4 <HAL_GetTick>
 800a686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a688:	e008      	b.n	800a69c <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a68a:	f7f8 fca3 	bl	8002fd4 <HAL_GetTick>
 800a68e:	4602      	mov	r2, r0
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	2b02      	cmp	r3, #2
 800a696:	d901      	bls.n	800a69c <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 800a698:	2303      	movs	r3, #3
 800a69a:	e066      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a69c:	4b10      	ldr	r3, [pc, #64]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d0f0      	beq.n	800a68a <HAL_RCC_OscConfig+0x71a>
 800a6a8:	e05e      	b.n	800a768 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6aa:	4b0d      	ldr	r3, [pc, #52]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a0c      	ldr	r2, [pc, #48]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a6b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b6:	f7f8 fc8d 	bl	8002fd4 <HAL_GetTick>
 800a6ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6bc:	e008      	b.n	800a6d0 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6be:	f7f8 fc89 	bl	8002fd4 <HAL_GetTick>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d901      	bls.n	800a6d0 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	e04c      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6d0:	4b03      	ldr	r3, [pc, #12]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1f0      	bne.n	800a6be <HAL_RCC_OscConfig+0x74e>
 800a6dc:	e044      	b.n	800a768 <HAL_RCC_OscConfig+0x7f8>
 800a6de:	bf00      	nop
 800a6e0:	58024400 	.word	0x58024400
 800a6e4:	fffffc0c 	.word	0xfffffc0c
 800a6e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a6ec:	4b21      	ldr	r3, [pc, #132]	; (800a774 <HAL_RCC_OscConfig+0x804>)
 800a6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a6f2:	4b20      	ldr	r3, [pc, #128]	; (800a774 <HAL_RCC_OscConfig+0x804>)
 800a6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d031      	beq.n	800a764 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	f003 0203 	and.w	r2, r3, #3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d12a      	bne.n	800a764 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	091b      	lsrs	r3, r3, #4
 800a712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d122      	bne.n	800a764 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a728:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d11a      	bne.n	800a764 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	0a5b      	lsrs	r3, r3, #9
 800a732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d111      	bne.n	800a764 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	0c1b      	lsrs	r3, r3, #16
 800a744:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a74e:	429a      	cmp	r2, r3
 800a750:	d108      	bne.n	800a764 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	0e1b      	lsrs	r3, r3, #24
 800a756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a75e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a760:	429a      	cmp	r2, r3
 800a762:	d001      	beq.n	800a768 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e000      	b.n	800a76a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3730      	adds	r7, #48	; 0x30
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	58024400 	.word	0x58024400

0800a778 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d101      	bne.n	800a78c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	e19c      	b.n	800aac6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a78c:	4b8a      	ldr	r3, [pc, #552]	; (800a9b8 <HAL_RCC_ClockConfig+0x240>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 030f 	and.w	r3, r3, #15
 800a794:	683a      	ldr	r2, [r7, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	d910      	bls.n	800a7bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a79a:	4b87      	ldr	r3, [pc, #540]	; (800a9b8 <HAL_RCC_ClockConfig+0x240>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f023 020f 	bic.w	r2, r3, #15
 800a7a2:	4985      	ldr	r1, [pc, #532]	; (800a9b8 <HAL_RCC_ClockConfig+0x240>)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7aa:	4b83      	ldr	r3, [pc, #524]	; (800a9b8 <HAL_RCC_ClockConfig+0x240>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 030f 	and.w	r3, r3, #15
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d001      	beq.n	800a7bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e184      	b.n	800aac6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d010      	beq.n	800a7ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	691a      	ldr	r2, [r3, #16]
 800a7cc:	4b7b      	ldr	r3, [pc, #492]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d908      	bls.n	800a7ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7d8:	4b78      	ldr	r3, [pc, #480]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	4975      	ldr	r1, [pc, #468]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 0308 	and.w	r3, r3, #8
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d010      	beq.n	800a818 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	695a      	ldr	r2, [r3, #20]
 800a7fa:	4b70      	ldr	r3, [pc, #448]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a802:	429a      	cmp	r2, r3
 800a804:	d908      	bls.n	800a818 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a806:	4b6d      	ldr	r3, [pc, #436]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	496a      	ldr	r1, [pc, #424]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a814:	4313      	orrs	r3, r2
 800a816:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 0310 	and.w	r3, r3, #16
 800a820:	2b00      	cmp	r3, #0
 800a822:	d010      	beq.n	800a846 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	699a      	ldr	r2, [r3, #24]
 800a828:	4b64      	ldr	r3, [pc, #400]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a82a:	69db      	ldr	r3, [r3, #28]
 800a82c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a830:	429a      	cmp	r2, r3
 800a832:	d908      	bls.n	800a846 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a834:	4b61      	ldr	r3, [pc, #388]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	699b      	ldr	r3, [r3, #24]
 800a840:	495e      	ldr	r1, [pc, #376]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a842:	4313      	orrs	r3, r2
 800a844:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0320 	and.w	r3, r3, #32
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d010      	beq.n	800a874 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	69da      	ldr	r2, [r3, #28]
 800a856:	4b59      	ldr	r3, [pc, #356]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a858:	6a1b      	ldr	r3, [r3, #32]
 800a85a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a85e:	429a      	cmp	r2, r3
 800a860:	d908      	bls.n	800a874 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a862:	4b56      	ldr	r3, [pc, #344]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	69db      	ldr	r3, [r3, #28]
 800a86e:	4953      	ldr	r1, [pc, #332]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a870:	4313      	orrs	r3, r2
 800a872:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0302 	and.w	r3, r3, #2
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d010      	beq.n	800a8a2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	68da      	ldr	r2, [r3, #12]
 800a884:	4b4d      	ldr	r3, [pc, #308]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	f003 030f 	and.w	r3, r3, #15
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d908      	bls.n	800a8a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a890:	4b4a      	ldr	r3, [pc, #296]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	f023 020f 	bic.w	r2, r3, #15
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	4947      	ldr	r1, [pc, #284]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d055      	beq.n	800a95a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a8ae:	4b43      	ldr	r3, [pc, #268]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	4940      	ldr	r1, [pc, #256]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d107      	bne.n	800a8d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8c8:	4b3c      	ldr	r3, [pc, #240]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d121      	bne.n	800a918 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e0f6      	b.n	800aac6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d107      	bne.n	800a8f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8e0:	4b36      	ldr	r3, [pc, #216]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d115      	bne.n	800a918 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e0ea      	b.n	800aac6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d107      	bne.n	800a908 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8f8:	4b30      	ldr	r3, [pc, #192]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a900:	2b00      	cmp	r3, #0
 800a902:	d109      	bne.n	800a918 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	e0de      	b.n	800aac6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a908:	4b2c      	ldr	r3, [pc, #176]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0304 	and.w	r3, r3, #4
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e0d6      	b.n	800aac6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a918:	4b28      	ldr	r3, [pc, #160]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	f023 0207 	bic.w	r2, r3, #7
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	4925      	ldr	r1, [pc, #148]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a926:	4313      	orrs	r3, r2
 800a928:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a92a:	f7f8 fb53 	bl	8002fd4 <HAL_GetTick>
 800a92e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a930:	e00a      	b.n	800a948 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a932:	f7f8 fb4f 	bl	8002fd4 <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a940:	4293      	cmp	r3, r2
 800a942:	d901      	bls.n	800a948 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e0be      	b.n	800aac6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a948:	4b1c      	ldr	r3, [pc, #112]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	00db      	lsls	r3, r3, #3
 800a956:	429a      	cmp	r2, r3
 800a958:	d1eb      	bne.n	800a932 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0302 	and.w	r3, r3, #2
 800a962:	2b00      	cmp	r3, #0
 800a964:	d010      	beq.n	800a988 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68da      	ldr	r2, [r3, #12]
 800a96a:	4b14      	ldr	r3, [pc, #80]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	f003 030f 	and.w	r3, r3, #15
 800a972:	429a      	cmp	r2, r3
 800a974:	d208      	bcs.n	800a988 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a976:	4b11      	ldr	r3, [pc, #68]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	f023 020f 	bic.w	r2, r3, #15
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	490e      	ldr	r1, [pc, #56]	; (800a9bc <HAL_RCC_ClockConfig+0x244>)
 800a984:	4313      	orrs	r3, r2
 800a986:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a988:	4b0b      	ldr	r3, [pc, #44]	; (800a9b8 <HAL_RCC_ClockConfig+0x240>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 030f 	and.w	r3, r3, #15
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	429a      	cmp	r2, r3
 800a994:	d214      	bcs.n	800a9c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a996:	4b08      	ldr	r3, [pc, #32]	; (800a9b8 <HAL_RCC_ClockConfig+0x240>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f023 020f 	bic.w	r2, r3, #15
 800a99e:	4906      	ldr	r1, [pc, #24]	; (800a9b8 <HAL_RCC_ClockConfig+0x240>)
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9a6:	4b04      	ldr	r3, [pc, #16]	; (800a9b8 <HAL_RCC_ClockConfig+0x240>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 030f 	and.w	r3, r3, #15
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d005      	beq.n	800a9c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e086      	b.n	800aac6 <HAL_RCC_ClockConfig+0x34e>
 800a9b8:	52002000 	.word	0x52002000
 800a9bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d010      	beq.n	800a9ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	691a      	ldr	r2, [r3, #16]
 800a9d0:	4b3f      	ldr	r3, [pc, #252]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d208      	bcs.n	800a9ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a9dc:	4b3c      	ldr	r3, [pc, #240]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	4939      	ldr	r1, [pc, #228]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 0308 	and.w	r3, r3, #8
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d010      	beq.n	800aa1c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	695a      	ldr	r2, [r3, #20]
 800a9fe:	4b34      	ldr	r3, [pc, #208]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d208      	bcs.n	800aa1c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa0a:	4b31      	ldr	r3, [pc, #196]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	492e      	ldr	r1, [pc, #184]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0310 	and.w	r3, r3, #16
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d010      	beq.n	800aa4a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	699a      	ldr	r2, [r3, #24]
 800aa2c:	4b28      	ldr	r3, [pc, #160]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800aa2e:	69db      	ldr	r3, [r3, #28]
 800aa30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d208      	bcs.n	800aa4a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa38:	4b25      	ldr	r3, [pc, #148]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800aa3a:	69db      	ldr	r3, [r3, #28]
 800aa3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	699b      	ldr	r3, [r3, #24]
 800aa44:	4922      	ldr	r1, [pc, #136]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800aa46:	4313      	orrs	r3, r2
 800aa48:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0320 	and.w	r3, r3, #32
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d010      	beq.n	800aa78 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	69da      	ldr	r2, [r3, #28]
 800aa5a:	4b1d      	ldr	r3, [pc, #116]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d208      	bcs.n	800aa78 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800aa66:	4b1a      	ldr	r3, [pc, #104]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	4917      	ldr	r1, [pc, #92]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800aa74:	4313      	orrs	r3, r2
 800aa76:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800aa78:	f000 f834 	bl	800aae4 <HAL_RCC_GetSysClockFreq>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	4b14      	ldr	r3, [pc, #80]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	0a1b      	lsrs	r3, r3, #8
 800aa84:	f003 030f 	and.w	r3, r3, #15
 800aa88:	4912      	ldr	r1, [pc, #72]	; (800aad4 <HAL_RCC_ClockConfig+0x35c>)
 800aa8a:	5ccb      	ldrb	r3, [r1, r3]
 800aa8c:	f003 031f 	and.w	r3, r3, #31
 800aa90:	fa22 f303 	lsr.w	r3, r2, r3
 800aa94:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800aa96:	4b0e      	ldr	r3, [pc, #56]	; (800aad0 <HAL_RCC_ClockConfig+0x358>)
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	f003 030f 	and.w	r3, r3, #15
 800aa9e:	4a0d      	ldr	r2, [pc, #52]	; (800aad4 <HAL_RCC_ClockConfig+0x35c>)
 800aaa0:	5cd3      	ldrb	r3, [r2, r3]
 800aaa2:	f003 031f 	and.w	r3, r3, #31
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	fa22 f303 	lsr.w	r3, r2, r3
 800aaac:	4a0a      	ldr	r2, [pc, #40]	; (800aad8 <HAL_RCC_ClockConfig+0x360>)
 800aaae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aab0:	4a0a      	ldr	r2, [pc, #40]	; (800aadc <HAL_RCC_ClockConfig+0x364>)
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800aab6:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <HAL_RCC_ClockConfig+0x368>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7f8 fa40 	bl	8002f40 <HAL_InitTick>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3718      	adds	r7, #24
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	58024400 	.word	0x58024400
 800aad4:	080111cc 	.word	0x080111cc
 800aad8:	20000034 	.word	0x20000034
 800aadc:	20000030 	.word	0x20000030
 800aae0:	20000038 	.word	0x20000038

0800aae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b089      	sub	sp, #36	; 0x24
 800aae8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aaea:	4bb3      	ldr	r3, [pc, #716]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aaf2:	2b18      	cmp	r3, #24
 800aaf4:	f200 8155 	bhi.w	800ada2 <HAL_RCC_GetSysClockFreq+0x2be>
 800aaf8:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafe:	bf00      	nop
 800ab00:	0800ab65 	.word	0x0800ab65
 800ab04:	0800ada3 	.word	0x0800ada3
 800ab08:	0800ada3 	.word	0x0800ada3
 800ab0c:	0800ada3 	.word	0x0800ada3
 800ab10:	0800ada3 	.word	0x0800ada3
 800ab14:	0800ada3 	.word	0x0800ada3
 800ab18:	0800ada3 	.word	0x0800ada3
 800ab1c:	0800ada3 	.word	0x0800ada3
 800ab20:	0800ab8b 	.word	0x0800ab8b
 800ab24:	0800ada3 	.word	0x0800ada3
 800ab28:	0800ada3 	.word	0x0800ada3
 800ab2c:	0800ada3 	.word	0x0800ada3
 800ab30:	0800ada3 	.word	0x0800ada3
 800ab34:	0800ada3 	.word	0x0800ada3
 800ab38:	0800ada3 	.word	0x0800ada3
 800ab3c:	0800ada3 	.word	0x0800ada3
 800ab40:	0800ab91 	.word	0x0800ab91
 800ab44:	0800ada3 	.word	0x0800ada3
 800ab48:	0800ada3 	.word	0x0800ada3
 800ab4c:	0800ada3 	.word	0x0800ada3
 800ab50:	0800ada3 	.word	0x0800ada3
 800ab54:	0800ada3 	.word	0x0800ada3
 800ab58:	0800ada3 	.word	0x0800ada3
 800ab5c:	0800ada3 	.word	0x0800ada3
 800ab60:	0800ab97 	.word	0x0800ab97
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab64:	4b94      	ldr	r3, [pc, #592]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0320 	and.w	r3, r3, #32
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d009      	beq.n	800ab84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab70:	4b91      	ldr	r3, [pc, #580]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	08db      	lsrs	r3, r3, #3
 800ab76:	f003 0303 	and.w	r3, r3, #3
 800ab7a:	4a90      	ldr	r2, [pc, #576]	; (800adbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ab82:	e111      	b.n	800ada8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ab84:	4b8d      	ldr	r3, [pc, #564]	; (800adbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab86:	61bb      	str	r3, [r7, #24]
    break;
 800ab88:	e10e      	b.n	800ada8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ab8a:	4b8d      	ldr	r3, [pc, #564]	; (800adc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab8c:	61bb      	str	r3, [r7, #24]
    break;
 800ab8e:	e10b      	b.n	800ada8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ab90:	4b8c      	ldr	r3, [pc, #560]	; (800adc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ab92:	61bb      	str	r3, [r7, #24]
    break;
 800ab94:	e108      	b.n	800ada8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab96:	4b88      	ldr	r3, [pc, #544]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9a:	f003 0303 	and.w	r3, r3, #3
 800ab9e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800aba0:	4b85      	ldr	r3, [pc, #532]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba4:	091b      	lsrs	r3, r3, #4
 800aba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abaa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800abac:	4b82      	ldr	r3, [pc, #520]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb0:	f003 0301 	and.w	r3, r3, #1
 800abb4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800abb6:	4b80      	ldr	r3, [pc, #512]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abba:	08db      	lsrs	r3, r3, #3
 800abbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	fb02 f303 	mul.w	r3, r2, r3
 800abc6:	ee07 3a90 	vmov	s15, r3
 800abca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f000 80e1 	beq.w	800ad9c <HAL_RCC_GetSysClockFreq+0x2b8>
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2b02      	cmp	r3, #2
 800abde:	f000 8083 	beq.w	800ace8 <HAL_RCC_GetSysClockFreq+0x204>
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	f200 80a1 	bhi.w	800ad2c <HAL_RCC_GetSysClockFreq+0x248>
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d003      	beq.n	800abf8 <HAL_RCC_GetSysClockFreq+0x114>
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d056      	beq.n	800aca4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800abf6:	e099      	b.n	800ad2c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abf8:	4b6f      	ldr	r3, [pc, #444]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 0320 	and.w	r3, r3, #32
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d02d      	beq.n	800ac60 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac04:	4b6c      	ldr	r3, [pc, #432]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	08db      	lsrs	r3, r3, #3
 800ac0a:	f003 0303 	and.w	r3, r3, #3
 800ac0e:	4a6b      	ldr	r2, [pc, #428]	; (800adbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac10:	fa22 f303 	lsr.w	r3, r2, r3
 800ac14:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	ee07 3a90 	vmov	s15, r3
 800ac1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	ee07 3a90 	vmov	s15, r3
 800ac26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac2e:	4b62      	ldr	r3, [pc, #392]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac36:	ee07 3a90 	vmov	s15, r3
 800ac3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac42:	eddf 5a61 	vldr	s11, [pc, #388]	; 800adc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ac5e:	e087      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800adcc <HAL_RCC_GetSysClockFreq+0x2e8>
 800ac6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac72:	4b51      	ldr	r3, [pc, #324]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac82:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac86:	eddf 5a50 	vldr	s11, [pc, #320]	; 800adc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aca2:	e065      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acae:	eddf 6a48 	vldr	s13, [pc, #288]	; 800add0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800acb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb6:	4b40      	ldr	r3, [pc, #256]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acbe:	ee07 3a90 	vmov	s15, r3
 800acc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc6:	ed97 6a02 	vldr	s12, [r7, #8]
 800acca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800adc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800acce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ace6:	e043      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800add4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800acf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfa:	4b2f      	ldr	r3, [pc, #188]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad02:	ee07 3a90 	vmov	s15, r3
 800ad06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800adc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad2a:	e021      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad36:	eddf 6a26 	vldr	s13, [pc, #152]	; 800add0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3e:	4b1e      	ldr	r3, [pc, #120]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad46:	ee07 3a90 	vmov	s15, r3
 800ad4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800adc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad6e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ad70:	4b11      	ldr	r3, [pc, #68]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad74:	0a5b      	lsrs	r3, r3, #9
 800ad76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	ee07 3a90 	vmov	s15, r3
 800ad84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ad88:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad94:	ee17 3a90 	vmov	r3, s15
 800ad98:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ad9a:	e005      	b.n	800ada8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	61bb      	str	r3, [r7, #24]
    break;
 800ada0:	e002      	b.n	800ada8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ada2:	4b07      	ldr	r3, [pc, #28]	; (800adc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ada4:	61bb      	str	r3, [r7, #24]
    break;
 800ada6:	bf00      	nop
  }

  return sysclockfreq;
 800ada8:	69bb      	ldr	r3, [r7, #24]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3724      	adds	r7, #36	; 0x24
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	58024400 	.word	0x58024400
 800adbc:	03d09000 	.word	0x03d09000
 800adc0:	003d0900 	.word	0x003d0900
 800adc4:	016e3600 	.word	0x016e3600
 800adc8:	46000000 	.word	0x46000000
 800adcc:	4c742400 	.word	0x4c742400
 800add0:	4a742400 	.word	0x4a742400
 800add4:	4bb71b00 	.word	0x4bb71b00

0800add8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800adde:	f7ff fe81 	bl	800aae4 <HAL_RCC_GetSysClockFreq>
 800ade2:	4602      	mov	r2, r0
 800ade4:	4b10      	ldr	r3, [pc, #64]	; (800ae28 <HAL_RCC_GetHCLKFreq+0x50>)
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	0a1b      	lsrs	r3, r3, #8
 800adea:	f003 030f 	and.w	r3, r3, #15
 800adee:	490f      	ldr	r1, [pc, #60]	; (800ae2c <HAL_RCC_GetHCLKFreq+0x54>)
 800adf0:	5ccb      	ldrb	r3, [r1, r3]
 800adf2:	f003 031f 	and.w	r3, r3, #31
 800adf6:	fa22 f303 	lsr.w	r3, r2, r3
 800adfa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800adfc:	4b0a      	ldr	r3, [pc, #40]	; (800ae28 <HAL_RCC_GetHCLKFreq+0x50>)
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	f003 030f 	and.w	r3, r3, #15
 800ae04:	4a09      	ldr	r2, [pc, #36]	; (800ae2c <HAL_RCC_GetHCLKFreq+0x54>)
 800ae06:	5cd3      	ldrb	r3, [r2, r3]
 800ae08:	f003 031f 	and.w	r3, r3, #31
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae12:	4a07      	ldr	r2, [pc, #28]	; (800ae30 <HAL_RCC_GetHCLKFreq+0x58>)
 800ae14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae16:	4a07      	ldr	r2, [pc, #28]	; (800ae34 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ae1c:	4b04      	ldr	r3, [pc, #16]	; (800ae30 <HAL_RCC_GetHCLKFreq+0x58>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	58024400 	.word	0x58024400
 800ae2c:	080111cc 	.word	0x080111cc
 800ae30:	20000034 	.word	0x20000034
 800ae34:	20000030 	.word	0x20000030

0800ae38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae40:	2300      	movs	r3, #0
 800ae42:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae44:	2300      	movs	r3, #0
 800ae46:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d03f      	beq.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae5c:	d02a      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ae5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae62:	d824      	bhi.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ae64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae68:	d018      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ae6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae6e:	d81e      	bhi.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ae74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae78:	d007      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ae7a:	e018      	b.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae7c:	4ba6      	ldr	r3, [pc, #664]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ae7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae80:	4aa5      	ldr	r2, [pc, #660]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ae82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ae88:	e015      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	2102      	movs	r1, #2
 800ae90:	4618      	mov	r0, r3
 800ae92:	f001 ff17 	bl	800ccc4 <RCCEx_PLL2_Config>
 800ae96:	4603      	mov	r3, r0
 800ae98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ae9a:	e00c      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3324      	adds	r3, #36	; 0x24
 800aea0:	2102      	movs	r1, #2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f001 ffc0 	bl	800ce28 <RCCEx_PLL3_Config>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aeac:	e003      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	75fb      	strb	r3, [r7, #23]
      break;
 800aeb2:	e000      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800aeb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aeb6:	7dfb      	ldrb	r3, [r7, #23]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d109      	bne.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aebc:	4b96      	ldr	r3, [pc, #600]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800aebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aec8:	4993      	ldr	r1, [pc, #588]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	650b      	str	r3, [r1, #80]	; 0x50
 800aece:	e001      	b.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
 800aed2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d03d      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee4:	2b04      	cmp	r3, #4
 800aee6:	d826      	bhi.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800aee8:	a201      	add	r2, pc, #4	; (adr r2, 800aef0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800aeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeee:	bf00      	nop
 800aef0:	0800af05 	.word	0x0800af05
 800aef4:	0800af13 	.word	0x0800af13
 800aef8:	0800af25 	.word	0x0800af25
 800aefc:	0800af3d 	.word	0x0800af3d
 800af00:	0800af3d 	.word	0x0800af3d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af04:	4b84      	ldr	r3, [pc, #528]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800af06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af08:	4a83      	ldr	r2, [pc, #524]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800af0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af10:	e015      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3304      	adds	r3, #4
 800af16:	2100      	movs	r1, #0
 800af18:	4618      	mov	r0, r3
 800af1a:	f001 fed3 	bl	800ccc4 <RCCEx_PLL2_Config>
 800af1e:	4603      	mov	r3, r0
 800af20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af22:	e00c      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3324      	adds	r3, #36	; 0x24
 800af28:	2100      	movs	r1, #0
 800af2a:	4618      	mov	r0, r3
 800af2c:	f001 ff7c 	bl	800ce28 <RCCEx_PLL3_Config>
 800af30:	4603      	mov	r3, r0
 800af32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af34:	e003      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	75fb      	strb	r3, [r7, #23]
      break;
 800af3a:	e000      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800af3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af3e:	7dfb      	ldrb	r3, [r7, #23]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d109      	bne.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af44:	4b74      	ldr	r3, [pc, #464]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800af46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af48:	f023 0207 	bic.w	r2, r3, #7
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af50:	4971      	ldr	r1, [pc, #452]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800af52:	4313      	orrs	r3, r2
 800af54:	650b      	str	r3, [r1, #80]	; 0x50
 800af56:	e001      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af58:	7dfb      	ldrb	r3, [r7, #23]
 800af5a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af64:	2b00      	cmp	r3, #0
 800af66:	d04a      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af6c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800af70:	d031      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800af72:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800af76:	d82b      	bhi.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800af78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af7c:	d02d      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800af7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af82:	d825      	bhi.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800af84:	2bc0      	cmp	r3, #192	; 0xc0
 800af86:	d02a      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800af88:	2bc0      	cmp	r3, #192	; 0xc0
 800af8a:	d821      	bhi.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800af8c:	2b80      	cmp	r3, #128	; 0x80
 800af8e:	d016      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x186>
 800af90:	2b80      	cmp	r3, #128	; 0x80
 800af92:	d81d      	bhi.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800af94:	2b00      	cmp	r3, #0
 800af96:	d002      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800af98:	2b40      	cmp	r3, #64	; 0x40
 800af9a:	d007      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x174>
 800af9c:	e018      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af9e:	4b5e      	ldr	r3, [pc, #376]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800afa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa2:	4a5d      	ldr	r2, [pc, #372]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800afa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afa8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800afaa:	e019      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3304      	adds	r3, #4
 800afb0:	2100      	movs	r1, #0
 800afb2:	4618      	mov	r0, r3
 800afb4:	f001 fe86 	bl	800ccc4 <RCCEx_PLL2_Config>
 800afb8:	4603      	mov	r3, r0
 800afba:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800afbc:	e010      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	3324      	adds	r3, #36	; 0x24
 800afc2:	2100      	movs	r1, #0
 800afc4:	4618      	mov	r0, r3
 800afc6:	f001 ff2f 	bl	800ce28 <RCCEx_PLL3_Config>
 800afca:	4603      	mov	r3, r0
 800afcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800afce:	e007      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	75fb      	strb	r3, [r7, #23]
      break;
 800afd4:	e004      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800afd6:	bf00      	nop
 800afd8:	e002      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800afda:	bf00      	nop
 800afdc:	e000      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800afde:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afe0:	7dfb      	ldrb	r3, [r7, #23]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d109      	bne.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800afe6:	4b4c      	ldr	r3, [pc, #304]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800afe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff2:	4949      	ldr	r1, [pc, #292]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800aff4:	4313      	orrs	r3, r2
 800aff6:	650b      	str	r3, [r1, #80]	; 0x50
 800aff8:	e001      	b.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800affa:	7dfb      	ldrb	r3, [r7, #23]
 800affc:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b006:	2b00      	cmp	r3, #0
 800b008:	d04f      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b00e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b012:	d036      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800b014:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b018:	d830      	bhi.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800b01a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b01e:	d032      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800b020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b024:	d82a      	bhi.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800b026:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b02a:	d02e      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x252>
 800b02c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b030:	d824      	bhi.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800b032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b036:	d018      	beq.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x232>
 800b038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b03c:	d81e      	bhi.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d003      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800b042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b046:	d007      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800b048:	e018      	b.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b04a:	4b33      	ldr	r3, [pc, #204]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800b04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04e:	4a32      	ldr	r2, [pc, #200]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800b050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800b056:	e019      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3304      	adds	r3, #4
 800b05c:	2100      	movs	r1, #0
 800b05e:	4618      	mov	r0, r3
 800b060:	f001 fe30 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b064:	4603      	mov	r3, r0
 800b066:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800b068:	e010      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	3324      	adds	r3, #36	; 0x24
 800b06e:	2100      	movs	r1, #0
 800b070:	4618      	mov	r0, r3
 800b072:	f001 fed9 	bl	800ce28 <RCCEx_PLL3_Config>
 800b076:	4603      	mov	r3, r0
 800b078:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800b07a:	e007      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	75fb      	strb	r3, [r7, #23]
      break;
 800b080:	e004      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800b082:	bf00      	nop
 800b084:	e002      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800b086:	bf00      	nop
 800b088:	e000      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800b08a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d109      	bne.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b092:	4b21      	ldr	r3, [pc, #132]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800b094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b096:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b09e:	491e      	ldr	r1, [pc, #120]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	650b      	str	r3, [r1, #80]	; 0x50
 800b0a4:	e001      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a6:	7dfb      	ldrb	r3, [r7, #23]
 800b0a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d034      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0ba:	2b30      	cmp	r3, #48	; 0x30
 800b0bc:	d01c      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800b0be:	2b30      	cmp	r3, #48	; 0x30
 800b0c0:	d817      	bhi.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800b0c2:	2b20      	cmp	r3, #32
 800b0c4:	d00c      	beq.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b0c6:	2b20      	cmp	r3, #32
 800b0c8:	d813      	bhi.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d016      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800b0ce:	2b10      	cmp	r3, #16
 800b0d0:	d10f      	bne.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0d2:	4b11      	ldr	r3, [pc, #68]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800b0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d6:	4a10      	ldr	r2, [pc, #64]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800b0d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800b0de:	e00e      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	2102      	movs	r1, #2
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f001 fdec 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800b0f0:	e005      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b0f6:	e002      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800b0f8:	bf00      	nop
 800b0fa:	e000      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800b0fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10b      	bne.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b104:	4b04      	ldr	r3, [pc, #16]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800b106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b108:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b110:	4901      	ldr	r1, [pc, #4]	; (800b118 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800b112:	4313      	orrs	r3, r2
 800b114:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b116:	e003      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800b118:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
 800b11e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d047      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b134:	d030      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b13a:	d82a      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800b13c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b140:	d02c      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x364>
 800b142:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b146:	d824      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800b148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b14c:	d018      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800b14e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b152:	d81e      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800b154:	2b00      	cmp	r3, #0
 800b156:	d003      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800b158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b15c:	d007      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800b15e:	e018      	b.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b160:	4bb0      	ldr	r3, [pc, #704]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	4aaf      	ldr	r2, [pc, #700]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b16a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b16c:	e017      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	3304      	adds	r3, #4
 800b172:	2100      	movs	r1, #0
 800b174:	4618      	mov	r0, r3
 800b176:	f001 fda5 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b17a:	4603      	mov	r3, r0
 800b17c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b17e:	e00e      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	3324      	adds	r3, #36	; 0x24
 800b184:	2100      	movs	r1, #0
 800b186:	4618      	mov	r0, r3
 800b188:	f001 fe4e 	bl	800ce28 <RCCEx_PLL3_Config>
 800b18c:	4603      	mov	r3, r0
 800b18e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b190:	e005      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	75fb      	strb	r3, [r7, #23]
      break;
 800b196:	e002      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800b198:	bf00      	nop
 800b19a:	e000      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800b19c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b19e:	7dfb      	ldrb	r3, [r7, #23]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d109      	bne.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b1a4:	4b9f      	ldr	r3, [pc, #636]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b1a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1b0:	499c      	ldr	r1, [pc, #624]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	650b      	str	r3, [r1, #80]	; 0x50
 800b1b6:	e001      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d049      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1d0:	d02e      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b1d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1d6:	d828      	bhi.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800b1d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1dc:	d02a      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b1de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1e2:	d822      	bhi.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800b1e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1e8:	d026      	beq.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800b1ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1ee:	d81c      	bhi.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800b1f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1f4:	d010      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b1f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1fa:	d816      	bhi.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d01d      	beq.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b204:	d111      	bne.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	3304      	adds	r3, #4
 800b20a:	2101      	movs	r1, #1
 800b20c:	4618      	mov	r0, r3
 800b20e:	f001 fd59 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b212:	4603      	mov	r3, r0
 800b214:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b216:	e012      	b.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	3324      	adds	r3, #36	; 0x24
 800b21c:	2101      	movs	r1, #1
 800b21e:	4618      	mov	r0, r3
 800b220:	f001 fe02 	bl	800ce28 <RCCEx_PLL3_Config>
 800b224:	4603      	mov	r3, r0
 800b226:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b228:	e009      	b.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	75fb      	strb	r3, [r7, #23]
      break;
 800b22e:	e006      	b.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800b230:	bf00      	nop
 800b232:	e004      	b.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800b234:	bf00      	nop
 800b236:	e002      	b.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800b238:	bf00      	nop
 800b23a:	e000      	b.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800b23c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b23e:	7dfb      	ldrb	r3, [r7, #23]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d109      	bne.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b244:	4b77      	ldr	r3, [pc, #476]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b248:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b250:	4974      	ldr	r1, [pc, #464]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b252:	4313      	orrs	r3, r2
 800b254:	650b      	str	r3, [r1, #80]	; 0x50
 800b256:	e001      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b258:	7dfb      	ldrb	r3, [r7, #23]
 800b25a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d053      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b26e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b272:	d034      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b274:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b278:	d82e      	bhi.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800b27a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b27e:	d030      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800b280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b284:	d828      	bhi.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800b286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b28a:	d02c      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800b28c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b290:	d822      	bhi.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800b292:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b296:	d028      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b298:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b29c:	d81c      	bhi.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800b29e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2a2:	d010      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800b2a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2a8:	d816      	bhi.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d01f      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800b2ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2b2:	d111      	bne.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	2101      	movs	r1, #1
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f001 fd02 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b2c4:	e014      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	3324      	adds	r3, #36	; 0x24
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f001 fdab 	bl	800ce28 <RCCEx_PLL3_Config>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b2d6:	e00b      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	75fb      	strb	r3, [r7, #23]
      break;
 800b2dc:	e008      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800b2de:	bf00      	nop
 800b2e0:	e006      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800b2e2:	bf00      	nop
 800b2e4:	e004      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800b2e6:	bf00      	nop
 800b2e8:	e002      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800b2ea:	bf00      	nop
 800b2ec:	e000      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800b2ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2f0:	7dfb      	ldrb	r3, [r7, #23]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10a      	bne.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b2f6:	4b4b      	ldr	r3, [pc, #300]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b2f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b304:	4947      	ldr	r1, [pc, #284]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b306:	4313      	orrs	r3, r2
 800b308:	658b      	str	r3, [r1, #88]	; 0x58
 800b30a:	e001      	b.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b30c:	7dfb      	ldrb	r3, [r7, #23]
 800b30e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d02f      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b324:	d00e      	beq.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800b326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b32a:	d814      	bhi.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d015      	beq.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b334:	d10f      	bne.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b336:	4b3b      	ldr	r3, [pc, #236]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33a:	4a3a      	ldr	r2, [pc, #232]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b33c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b340:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b342:	e00c      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	3304      	adds	r3, #4
 800b348:	2101      	movs	r1, #1
 800b34a:	4618      	mov	r0, r3
 800b34c:	f001 fcba 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b350:	4603      	mov	r3, r0
 800b352:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b354:	e003      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	75fb      	strb	r3, [r7, #23]
      break;
 800b35a:	e000      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 800b35c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b35e:	7dfb      	ldrb	r3, [r7, #23]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d109      	bne.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b364:	4b2f      	ldr	r3, [pc, #188]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b368:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b370:	492c      	ldr	r1, [pc, #176]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b372:	4313      	orrs	r3, r2
 800b374:	650b      	str	r3, [r1, #80]	; 0x50
 800b376:	e001      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d032      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b38c:	2b03      	cmp	r3, #3
 800b38e:	d81b      	bhi.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
 800b390:	a201      	add	r2, pc, #4	; (adr r2, 800b398 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800b392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b396:	bf00      	nop
 800b398:	0800b3cf 	.word	0x0800b3cf
 800b39c:	0800b3a9 	.word	0x0800b3a9
 800b3a0:	0800b3b7 	.word	0x0800b3b7
 800b3a4:	0800b3cf 	.word	0x0800b3cf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3a8:	4b1e      	ldr	r3, [pc, #120]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ac:	4a1d      	ldr	r2, [pc, #116]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b3ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b3b4:	e00c      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	3304      	adds	r3, #4
 800b3ba:	2102      	movs	r1, #2
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f001 fc81 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b3c6:	e003      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b3cc:	e000      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 800b3ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d109      	bne.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b3d6:	4b13      	ldr	r3, [pc, #76]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b3d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3da:	f023 0203 	bic.w	r2, r3, #3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3e2:	4910      	ldr	r1, [pc, #64]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b3e8:	e001      	b.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ea:	7dfb      	ldrb	r3, [r7, #23]
 800b3ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f000 808a 	beq.w	800b510 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a09      	ldr	r2, [pc, #36]	; (800b428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800b402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b406:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b408:	f7f7 fde4 	bl	8002fd4 <HAL_GetTick>
 800b40c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b40e:	e00d      	b.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b410:	f7f7 fde0 	bl	8002fd4 <HAL_GetTick>
 800b414:	4602      	mov	r2, r0
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	2b64      	cmp	r3, #100	; 0x64
 800b41c:	d906      	bls.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800b41e:	2303      	movs	r3, #3
 800b420:	75fb      	strb	r3, [r7, #23]
        break;
 800b422:	e009      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x600>
 800b424:	58024400 	.word	0x58024400
 800b428:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b42c:	4bba      	ldr	r3, [pc, #744]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b434:	2b00      	cmp	r3, #0
 800b436:	d0eb      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 800b438:	7dfb      	ldrb	r3, [r7, #23]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d166      	bne.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b43e:	4bb7      	ldr	r3, [pc, #732]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b440:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b448:	4053      	eors	r3, r2
 800b44a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d013      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b452:	4bb2      	ldr	r3, [pc, #712]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b45a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b45c:	4baf      	ldr	r3, [pc, #700]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b45e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b460:	4aae      	ldr	r2, [pc, #696]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b466:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b468:	4bac      	ldr	r3, [pc, #688]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b46c:	4aab      	ldr	r2, [pc, #684]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b46e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b472:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b474:	4aa9      	ldr	r2, [pc, #676]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b484:	d115      	bne.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b486:	f7f7 fda5 	bl	8002fd4 <HAL_GetTick>
 800b48a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b48c:	e00b      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b48e:	f7f7 fda1 	bl	8002fd4 <HAL_GetTick>
 800b492:	4602      	mov	r2, r0
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	f241 3288 	movw	r2, #5000	; 0x1388
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d902      	bls.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	75fb      	strb	r3, [r7, #23]
            break;
 800b4a4:	e005      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b4a6:	4b9d      	ldr	r3, [pc, #628]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4aa:	f003 0302 	and.w	r3, r3, #2
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d0ed      	beq.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800b4b2:	7dfb      	ldrb	r3, [r7, #23]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d126      	bne.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4c6:	d10d      	bne.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800b4c8:	4b94      	ldr	r3, [pc, #592]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4d6:	0919      	lsrs	r1, r3, #4
 800b4d8:	4b91      	ldr	r3, [pc, #580]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800b4da:	400b      	ands	r3, r1
 800b4dc:	498f      	ldr	r1, [pc, #572]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	610b      	str	r3, [r1, #16]
 800b4e2:	e005      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b4e4:	4b8d      	ldr	r3, [pc, #564]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	4a8c      	ldr	r2, [pc, #560]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b4ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b4ee:	6113      	str	r3, [r2, #16]
 800b4f0:	4b8a      	ldr	r3, [pc, #552]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b4f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4fe:	4987      	ldr	r1, [pc, #540]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b500:	4313      	orrs	r3, r2
 800b502:	670b      	str	r3, [r1, #112]	; 0x70
 800b504:	e004      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b506:	7dfb      	ldrb	r3, [r7, #23]
 800b508:	75bb      	strb	r3, [r7, #22]
 800b50a:	e001      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b50c:	7dfb      	ldrb	r3, [r7, #23]
 800b50e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 0301 	and.w	r3, r3, #1
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d07f      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b522:	2b28      	cmp	r3, #40	; 0x28
 800b524:	d866      	bhi.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800b526:	a201      	add	r2, pc, #4	; (adr r2, 800b52c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800b528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52c:	0800b5fb 	.word	0x0800b5fb
 800b530:	0800b5f5 	.word	0x0800b5f5
 800b534:	0800b5f5 	.word	0x0800b5f5
 800b538:	0800b5f5 	.word	0x0800b5f5
 800b53c:	0800b5f5 	.word	0x0800b5f5
 800b540:	0800b5f5 	.word	0x0800b5f5
 800b544:	0800b5f5 	.word	0x0800b5f5
 800b548:	0800b5f5 	.word	0x0800b5f5
 800b54c:	0800b5d1 	.word	0x0800b5d1
 800b550:	0800b5f5 	.word	0x0800b5f5
 800b554:	0800b5f5 	.word	0x0800b5f5
 800b558:	0800b5f5 	.word	0x0800b5f5
 800b55c:	0800b5f5 	.word	0x0800b5f5
 800b560:	0800b5f5 	.word	0x0800b5f5
 800b564:	0800b5f5 	.word	0x0800b5f5
 800b568:	0800b5f5 	.word	0x0800b5f5
 800b56c:	0800b5e3 	.word	0x0800b5e3
 800b570:	0800b5f5 	.word	0x0800b5f5
 800b574:	0800b5f5 	.word	0x0800b5f5
 800b578:	0800b5f5 	.word	0x0800b5f5
 800b57c:	0800b5f5 	.word	0x0800b5f5
 800b580:	0800b5f5 	.word	0x0800b5f5
 800b584:	0800b5f5 	.word	0x0800b5f5
 800b588:	0800b5f5 	.word	0x0800b5f5
 800b58c:	0800b5fb 	.word	0x0800b5fb
 800b590:	0800b5f5 	.word	0x0800b5f5
 800b594:	0800b5f5 	.word	0x0800b5f5
 800b598:	0800b5f5 	.word	0x0800b5f5
 800b59c:	0800b5f5 	.word	0x0800b5f5
 800b5a0:	0800b5f5 	.word	0x0800b5f5
 800b5a4:	0800b5f5 	.word	0x0800b5f5
 800b5a8:	0800b5f5 	.word	0x0800b5f5
 800b5ac:	0800b5fb 	.word	0x0800b5fb
 800b5b0:	0800b5f5 	.word	0x0800b5f5
 800b5b4:	0800b5f5 	.word	0x0800b5f5
 800b5b8:	0800b5f5 	.word	0x0800b5f5
 800b5bc:	0800b5f5 	.word	0x0800b5f5
 800b5c0:	0800b5f5 	.word	0x0800b5f5
 800b5c4:	0800b5f5 	.word	0x0800b5f5
 800b5c8:	0800b5f5 	.word	0x0800b5f5
 800b5cc:	0800b5fb 	.word	0x0800b5fb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	2101      	movs	r1, #1
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f001 fb74 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b5e0:	e00c      	b.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	3324      	adds	r3, #36	; 0x24
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f001 fc1d 	bl	800ce28 <RCCEx_PLL3_Config>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b5f2:	e003      	b.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b5f8:	e000      	b.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800b5fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10a      	bne.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b602:	4b46      	ldr	r3, [pc, #280]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b606:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b610:	4942      	ldr	r1, [pc, #264]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b612:	4313      	orrs	r3, r2
 800b614:	654b      	str	r3, [r1, #84]	; 0x54
 800b616:	e001      	b.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b618:	7dfb      	ldrb	r3, [r7, #23]
 800b61a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f003 0302 	and.w	r3, r3, #2
 800b624:	2b00      	cmp	r3, #0
 800b626:	d038      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b62c:	2b05      	cmp	r3, #5
 800b62e:	d821      	bhi.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800b630:	a201      	add	r2, pc, #4	; (adr r2, 800b638 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800b632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b636:	bf00      	nop
 800b638:	0800b67b 	.word	0x0800b67b
 800b63c:	0800b651 	.word	0x0800b651
 800b640:	0800b663 	.word	0x0800b663
 800b644:	0800b67b 	.word	0x0800b67b
 800b648:	0800b67b 	.word	0x0800b67b
 800b64c:	0800b67b 	.word	0x0800b67b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	3304      	adds	r3, #4
 800b654:	2101      	movs	r1, #1
 800b656:	4618      	mov	r0, r3
 800b658:	f001 fb34 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b65c:	4603      	mov	r3, r0
 800b65e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b660:	e00c      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3324      	adds	r3, #36	; 0x24
 800b666:	2101      	movs	r1, #1
 800b668:	4618      	mov	r0, r3
 800b66a:	f001 fbdd 	bl	800ce28 <RCCEx_PLL3_Config>
 800b66e:	4603      	mov	r3, r0
 800b670:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b672:	e003      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	75fb      	strb	r3, [r7, #23]
      break;
 800b678:	e000      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800b67a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b67c:	7dfb      	ldrb	r3, [r7, #23]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d109      	bne.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b682:	4b26      	ldr	r3, [pc, #152]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b686:	f023 0207 	bic.w	r2, r3, #7
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b68e:	4923      	ldr	r1, [pc, #140]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b690:	4313      	orrs	r3, r2
 800b692:	654b      	str	r3, [r1, #84]	; 0x54
 800b694:	e001      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b696:	7dfb      	ldrb	r3, [r7, #23]
 800b698:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f003 0304 	and.w	r3, r3, #4
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d040      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6ac:	2b05      	cmp	r3, #5
 800b6ae:	d821      	bhi.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800b6b0:	a201      	add	r2, pc, #4	; (adr r2, 800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800b6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b6:	bf00      	nop
 800b6b8:	0800b6fb 	.word	0x0800b6fb
 800b6bc:	0800b6d1 	.word	0x0800b6d1
 800b6c0:	0800b6e3 	.word	0x0800b6e3
 800b6c4:	0800b6fb 	.word	0x0800b6fb
 800b6c8:	0800b6fb 	.word	0x0800b6fb
 800b6cc:	0800b6fb 	.word	0x0800b6fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f001 faf4 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b6e0:	e00c      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	3324      	adds	r3, #36	; 0x24
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f001 fb9d 	bl	800ce28 <RCCEx_PLL3_Config>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b6f2:	e003      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b6f8:	e000      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800b6fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d110      	bne.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b702:	4b06      	ldr	r3, [pc, #24]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b706:	f023 0207 	bic.w	r2, r3, #7
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b710:	4902      	ldr	r1, [pc, #8]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b712:	4313      	orrs	r3, r2
 800b714:	658b      	str	r3, [r1, #88]	; 0x58
 800b716:	e007      	b.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b718:	58024800 	.word	0x58024800
 800b71c:	58024400 	.word	0x58024400
 800b720:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 0320 	and.w	r3, r3, #32
 800b730:	2b00      	cmp	r3, #0
 800b732:	d04b      	beq.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b73a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b73e:	d02e      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x966>
 800b740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b744:	d828      	bhi.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b74a:	d02a      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800b74c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b750:	d822      	bhi.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b752:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b756:	d026      	beq.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b758:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b75c:	d81c      	bhi.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b75e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b762:	d010      	beq.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800b764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b768:	d816      	bhi.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d01d      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b76e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b772:	d111      	bne.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3304      	adds	r3, #4
 800b778:	2100      	movs	r1, #0
 800b77a:	4618      	mov	r0, r3
 800b77c:	f001 faa2 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b780:	4603      	mov	r3, r0
 800b782:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b784:	e012      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	3324      	adds	r3, #36	; 0x24
 800b78a:	2102      	movs	r1, #2
 800b78c:	4618      	mov	r0, r3
 800b78e:	f001 fb4b 	bl	800ce28 <RCCEx_PLL3_Config>
 800b792:	4603      	mov	r3, r0
 800b794:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b796:	e009      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	75fb      	strb	r3, [r7, #23]
      break;
 800b79c:	e006      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800b79e:	bf00      	nop
 800b7a0:	e004      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800b7a2:	bf00      	nop
 800b7a4:	e002      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800b7a6:	bf00      	nop
 800b7a8:	e000      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800b7aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10a      	bne.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b7b2:	4bb3      	ldr	r3, [pc, #716]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800b7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7c0:	49af      	ldr	r1, [pc, #700]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	654b      	str	r3, [r1, #84]	; 0x54
 800b7c6:	e001      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d04b      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b7e2:	d02e      	beq.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800b7e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b7e8:	d828      	bhi.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b7ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ee:	d02a      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800b7f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7f4:	d822      	bhi.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b7f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7fa:	d026      	beq.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b7fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b800:	d81c      	bhi.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b806:	d010      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800b808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b80c:	d816      	bhi.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d01d      	beq.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b816:	d111      	bne.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3304      	adds	r3, #4
 800b81c:	2100      	movs	r1, #0
 800b81e:	4618      	mov	r0, r3
 800b820:	f001 fa50 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b824:	4603      	mov	r3, r0
 800b826:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b828:	e012      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	3324      	adds	r3, #36	; 0x24
 800b82e:	2102      	movs	r1, #2
 800b830:	4618      	mov	r0, r3
 800b832:	f001 faf9 	bl	800ce28 <RCCEx_PLL3_Config>
 800b836:	4603      	mov	r3, r0
 800b838:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b83a:	e009      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	75fb      	strb	r3, [r7, #23]
      break;
 800b840:	e006      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800b842:	bf00      	nop
 800b844:	e004      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800b846:	bf00      	nop
 800b848:	e002      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800b84a:	bf00      	nop
 800b84c:	e000      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800b84e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b850:	7dfb      	ldrb	r3, [r7, #23]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10a      	bne.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b856:	4b8a      	ldr	r3, [pc, #552]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800b858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b85a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b864:	4986      	ldr	r1, [pc, #536]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800b866:	4313      	orrs	r3, r2
 800b868:	658b      	str	r3, [r1, #88]	; 0x58
 800b86a:	e001      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d04b      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b882:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b886:	d02e      	beq.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800b888:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b88c:	d828      	bhi.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b88e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b892:	d02a      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800b894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b898:	d822      	bhi.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b89a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b89e:	d026      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800b8a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b8a4:	d81c      	bhi.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b8a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8aa:	d010      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800b8ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8b0:	d816      	bhi.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d01d      	beq.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800b8b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8ba:	d111      	bne.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	3304      	adds	r3, #4
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f001 f9fe 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b8cc:	e012      	b.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	3324      	adds	r3, #36	; 0x24
 800b8d2:	2102      	movs	r1, #2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f001 faa7 	bl	800ce28 <RCCEx_PLL3_Config>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b8de:	e009      	b.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b8e4:	e006      	b.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800b8e6:	bf00      	nop
 800b8e8:	e004      	b.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800b8ea:	bf00      	nop
 800b8ec:	e002      	b.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800b8ee:	bf00      	nop
 800b8f0:	e000      	b.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800b8f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8f4:	7dfb      	ldrb	r3, [r7, #23]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10a      	bne.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b8fa:	4b61      	ldr	r3, [pc, #388]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800b8fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b908:	495d      	ldr	r1, [pc, #372]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800b90a:	4313      	orrs	r3, r2
 800b90c:	658b      	str	r3, [r1, #88]	; 0x58
 800b90e:	e001      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b910:	7dfb      	ldrb	r3, [r7, #23]
 800b912:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 0308 	and.w	r3, r3, #8
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d01a      	beq.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b92a:	d10a      	bne.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	3324      	adds	r3, #36	; 0x24
 800b930:	2102      	movs	r1, #2
 800b932:	4618      	mov	r0, r3
 800b934:	f001 fa78 	bl	800ce28 <RCCEx_PLL3_Config>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b942:	4b4f      	ldr	r3, [pc, #316]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800b944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b946:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b950:	494b      	ldr	r1, [pc, #300]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800b952:	4313      	orrs	r3, r2
 800b954:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f003 0310 	and.w	r3, r3, #16
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d01a      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b96c:	d10a      	bne.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	3324      	adds	r3, #36	; 0x24
 800b972:	2102      	movs	r1, #2
 800b974:	4618      	mov	r0, r3
 800b976:	f001 fa57 	bl	800ce28 <RCCEx_PLL3_Config>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d001      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b984:	4b3e      	ldr	r3, [pc, #248]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800b986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b992:	493b      	ldr	r1, [pc, #236]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800b994:	4313      	orrs	r3, r2
 800b996:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d034      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b9aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9ae:	d01d      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800b9b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9b4:	d817      	bhi.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d003      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800b9ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9be:	d009      	beq.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b9c0:	e011      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f001 f97b 	bl	800ccc4 <RCCEx_PLL2_Config>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b9d2:	e00c      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	3324      	adds	r3, #36	; 0x24
 800b9d8:	2102      	movs	r1, #2
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f001 fa24 	bl	800ce28 <RCCEx_PLL3_Config>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b9e4:	e003      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b9ea:	e000      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800b9ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9ee:	7dfb      	ldrb	r3, [r7, #23]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10a      	bne.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b9f4:	4b22      	ldr	r3, [pc, #136]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800b9f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba02:	491f      	ldr	r1, [pc, #124]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800ba04:	4313      	orrs	r3, r2
 800ba06:	658b      	str	r3, [r1, #88]	; 0x58
 800ba08:	e001      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
 800ba0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d036      	beq.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba24:	d01c      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800ba26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba2a:	d816      	bhi.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800ba2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba30:	d003      	beq.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800ba32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba36:	d007      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800ba38:	e00f      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba3a:	4b11      	ldr	r3, [pc, #68]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800ba3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3e:	4a10      	ldr	r2, [pc, #64]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800ba40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ba46:	e00c      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	3324      	adds	r3, #36	; 0x24
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f001 f9ea 	bl	800ce28 <RCCEx_PLL3_Config>
 800ba54:	4603      	mov	r3, r0
 800ba56:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ba58:	e003      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba5e:	e000      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800ba60:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10d      	bne.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba68:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800ba6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba76:	4902      	ldr	r1, [pc, #8]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	654b      	str	r3, [r1, #84]	; 0x54
 800ba7c:	e004      	b.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800ba7e:	bf00      	nop
 800ba80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba84:	7dfb      	ldrb	r3, [r7, #23]
 800ba86:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d029      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ba9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baa0:	d007      	beq.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800baa2:	e00f      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baa4:	4b69      	ldr	r3, [pc, #420]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800baa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa8:	4a68      	ldr	r2, [pc, #416]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800baaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bab0:	e00b      	b.n	800baca <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	3304      	adds	r3, #4
 800bab6:	2102      	movs	r1, #2
 800bab8:	4618      	mov	r0, r3
 800baba:	f001 f903 	bl	800ccc4 <RCCEx_PLL2_Config>
 800babe:	4603      	mov	r3, r0
 800bac0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bac2:	e002      	b.n	800baca <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	75fb      	strb	r3, [r7, #23]
      break;
 800bac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d109      	bne.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bad0:	4b5e      	ldr	r3, [pc, #376]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800badc:	495b      	ldr	r1, [pc, #364]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bade:	4313      	orrs	r3, r2
 800bae0:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bae2:	e001      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae4:	7dfb      	ldrb	r3, [r7, #23]
 800bae6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00a      	beq.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	3324      	adds	r3, #36	; 0x24
 800baf8:	2102      	movs	r1, #2
 800bafa:	4618      	mov	r0, r3
 800bafc:	f001 f994 	bl	800ce28 <RCCEx_PLL3_Config>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
 800bb08:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d032      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb20:	d017      	beq.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800bb22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb26:	d811      	bhi.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bb28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb2c:	d013      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800bb2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb32:	d80b      	bhi.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d010      	beq.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800bb38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb3c:	d106      	bne.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb3e:	4b43      	ldr	r3, [pc, #268]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb42:	4a42      	ldr	r2, [pc, #264]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bb44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bb4a:	e007      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	75fb      	strb	r3, [r7, #23]
      break;
 800bb50:	e004      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800bb52:	bf00      	nop
 800bb54:	e002      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800bb56:	bf00      	nop
 800bb58:	e000      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800bb5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb5c:	7dfb      	ldrb	r3, [r7, #23]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10a      	bne.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb62:	4b3a      	ldr	r3, [pc, #232]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bb64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb70:	4936      	ldr	r1, [pc, #216]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bb72:	4313      	orrs	r3, r2
 800bb74:	654b      	str	r3, [r1, #84]	; 0x54
 800bb76:	e001      	b.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb78:	7dfb      	ldrb	r3, [r7, #23]
 800bb7a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d008      	beq.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bb88:	4b30      	ldr	r3, [pc, #192]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bb8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb94:	492d      	ldr	r1, [pc, #180]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bb96:	4313      	orrs	r3, r2
 800bb98:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d008      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bba6:	4b29      	ldr	r3, [pc, #164]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbaa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbb2:	4926      	ldr	r1, [pc, #152]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d008      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800bbc4:	4b21      	ldr	r3, [pc, #132]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bbc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbc8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbd0:	491e      	ldr	r1, [pc, #120]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00d      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bbe2:	4b1a      	ldr	r3, [pc, #104]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	4a19      	ldr	r2, [pc, #100]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bbe8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bbec:	6113      	str	r3, [r2, #16]
 800bbee:	4b17      	ldr	r3, [pc, #92]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bbf0:	691a      	ldr	r2, [r3, #16]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bbf8:	4914      	ldr	r1, [pc, #80]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	da08      	bge.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc06:	4b11      	ldr	r3, [pc, #68]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bc08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc12:	490e      	ldr	r1, [pc, #56]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bc14:	4313      	orrs	r3, r2
 800bc16:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d009      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc24:	4b09      	ldr	r3, [pc, #36]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc32:	4906      	ldr	r1, [pc, #24]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800bc34:	4313      	orrs	r3, r2
 800bc36:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bc38:	7dbb      	ldrb	r3, [r7, #22]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e000      	b.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3718      	adds	r7, #24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	58024400 	.word	0x58024400

0800bc50 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b090      	sub	sp, #64	; 0x40
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc5e:	f040 8089 	bne.w	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800bc62:	4ba8      	ldr	r3, [pc, #672]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bc64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc66:	f003 0307 	and.w	r3, r3, #7
 800bc6a:	633b      	str	r3, [r7, #48]	; 0x30
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	2b04      	cmp	r3, #4
 800bc70:	d87d      	bhi.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800bc72:	a201      	add	r2, pc, #4	; (adr r2, 800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800bc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc78:	0800bc8d 	.word	0x0800bc8d
 800bc7c:	0800bcb1 	.word	0x0800bcb1
 800bc80:	0800bcd5 	.word	0x0800bcd5
 800bc84:	0800bd69 	.word	0x0800bd69
 800bc88:	0800bcf9 	.word	0x0800bcf9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc8c:	4b9d      	ldr	r3, [pc, #628]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc98:	d107      	bne.n	800bcaa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 febe 	bl	800ca20 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800bca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bca8:	e3f5      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcae:	e3f2      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bcb0:	4b94      	ldr	r3, [pc, #592]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcbc:	d107      	bne.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcbe:	f107 0318 	add.w	r3, r7, #24
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f000 fc04 	bl	800c4d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bccc:	e3e3      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcd2:	e3e0      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bcd4:	4b8b      	ldr	r3, [pc, #556]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bce0:	d107      	bne.n	800bcf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bce2:	f107 030c 	add.w	r3, r7, #12
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 fd46 	bl	800c778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bcf0:	e3d1      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcf6:	e3ce      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bcf8:	4b82      	ldr	r3, [pc, #520]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bcfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd00:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd02:	4b80      	ldr	r3, [pc, #512]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f003 0304 	and.w	r3, r3, #4
 800bd0a:	2b04      	cmp	r3, #4
 800bd0c:	d10c      	bne.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800bd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d109      	bne.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bd14:	4b7b      	ldr	r3, [pc, #492]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	08db      	lsrs	r3, r3, #3
 800bd1a:	f003 0303 	and.w	r3, r3, #3
 800bd1e:	4a7a      	ldr	r2, [pc, #488]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800bd20:	fa22 f303 	lsr.w	r3, r2, r3
 800bd24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd26:	e01e      	b.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd28:	4b76      	ldr	r3, [pc, #472]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd34:	d106      	bne.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800bd36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd3c:	d102      	bne.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bd3e:	4b73      	ldr	r3, [pc, #460]	; (800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bd40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd42:	e010      	b.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd44:	4b6f      	ldr	r3, [pc, #444]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd50:	d106      	bne.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800bd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd58:	d102      	bne.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bd5a:	4b6d      	ldr	r3, [pc, #436]	; (800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800bd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd5e:	e002      	b.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bd64:	e397      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800bd66:	e396      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bd68:	4b6a      	ldr	r3, [pc, #424]	; (800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800bd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd6c:	e393      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd72:	e390      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd7a:	f040 8095 	bne.w	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800bd7e:	4b61      	ldr	r3, [pc, #388]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bd80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd82:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bd86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd8e:	d04d      	beq.n	800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd96:	f200 8084 	bhi.w	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	2bc0      	cmp	r3, #192	; 0xc0
 800bd9e:	d07d      	beq.n	800be9c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800bda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda2:	2bc0      	cmp	r3, #192	; 0xc0
 800bda4:	d87d      	bhi.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800bda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda8:	2b80      	cmp	r3, #128	; 0x80
 800bdaa:	d02d      	beq.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	2b80      	cmp	r3, #128	; 0x80
 800bdb0:	d877      	bhi.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d003      	beq.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdba:	2b40      	cmp	r3, #64	; 0x40
 800bdbc:	d012      	beq.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800bdbe:	e070      	b.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bdc0:	4b50      	ldr	r3, [pc, #320]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdcc:	d107      	bne.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bdce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f000 fe24 	bl	800ca20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bddc:	e35b      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800bdde:	2300      	movs	r3, #0
 800bde0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bde2:	e358      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bde4:	4b47      	ldr	r3, [pc, #284]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdf0:	d107      	bne.n	800be02 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdf2:	f107 0318 	add.w	r3, r7, #24
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f000 fb6a 	bl	800c4d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800be00:	e349      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800be02:	2300      	movs	r3, #0
 800be04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be06:	e346      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be08:	4b3e      	ldr	r3, [pc, #248]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be14:	d107      	bne.n	800be26 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be16:	f107 030c 	add.w	r3, r7, #12
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 fcac 	bl	800c778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800be24:	e337      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800be26:	2300      	movs	r3, #0
 800be28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be2a:	e334      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800be2c:	4b35      	ldr	r3, [pc, #212]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be34:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be36:	4b33      	ldr	r3, [pc, #204]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f003 0304 	and.w	r3, r3, #4
 800be3e:	2b04      	cmp	r3, #4
 800be40:	d10c      	bne.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 800be42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be44:	2b00      	cmp	r3, #0
 800be46:	d109      	bne.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be48:	4b2e      	ldr	r3, [pc, #184]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	08db      	lsrs	r3, r3, #3
 800be4e:	f003 0303 	and.w	r3, r3, #3
 800be52:	4a2d      	ldr	r2, [pc, #180]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800be54:	fa22 f303 	lsr.w	r3, r2, r3
 800be58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be5a:	e01e      	b.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be5c:	4b29      	ldr	r3, [pc, #164]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be68:	d106      	bne.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 800be6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be70:	d102      	bne.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800be72:	4b26      	ldr	r3, [pc, #152]	; (800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800be74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be76:	e010      	b.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be78:	4b22      	ldr	r3, [pc, #136]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be84:	d106      	bne.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800be86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be8c:	d102      	bne.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800be8e:	4b20      	ldr	r3, [pc, #128]	; (800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800be90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be92:	e002      	b.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800be94:	2300      	movs	r3, #0
 800be96:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800be98:	e2fd      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800be9a:	e2fc      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800be9c:	4b1d      	ldr	r3, [pc, #116]	; (800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800be9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bea0:	e2f9      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 800bea2:	2300      	movs	r3, #0
 800bea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bea6:	e2f6      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800beae:	f040 80a7 	bne.w	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 800beb2:	4b14      	ldr	r3, [pc, #80]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800beb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beb6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800beba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bec2:	d05f      	beq.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beca:	f200 8096 	bhi.w	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bed4:	f000 808e 	beq.w	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 800bed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beda:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bede:	f200 808c 	bhi.w	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bee8:	d03a      	beq.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bef0:	f200 8083 	bhi.w	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800bef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00e      	beq.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf00:	d01c      	beq.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 800bf02:	e07a      	b.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800bf04:	58024400 	.word	0x58024400
 800bf08:	03d09000 	.word	0x03d09000
 800bf0c:	003d0900 	.word	0x003d0900
 800bf10:	016e3600 	.word	0x016e3600
 800bf14:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf18:	4ba8      	ldr	r3, [pc, #672]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf24:	d107      	bne.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 fd78 	bl	800ca20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bf34:	e2af      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800bf36:	2300      	movs	r3, #0
 800bf38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf3a:	e2ac      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf3c:	4b9f      	ldr	r3, [pc, #636]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf48:	d107      	bne.n	800bf5a <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf4a:	f107 0318 	add.w	r3, r7, #24
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f000 fabe 	bl	800c4d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bf58:	e29d      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf5e:	e29a      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf60:	4b96      	ldr	r3, [pc, #600]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf6c:	d107      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf6e:	f107 030c 	add.w	r3, r7, #12
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 fc00 	bl	800c778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bf7c:	e28b      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf82:	e288      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bf84:	4b8d      	ldr	r3, [pc, #564]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800bf86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf8c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf8e:	4b8b      	ldr	r3, [pc, #556]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 0304 	and.w	r3, r3, #4
 800bf96:	2b04      	cmp	r3, #4
 800bf98:	d10c      	bne.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800bf9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d109      	bne.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bfa0:	4b86      	ldr	r3, [pc, #536]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	08db      	lsrs	r3, r3, #3
 800bfa6:	f003 0303 	and.w	r3, r3, #3
 800bfaa:	4a85      	ldr	r2, [pc, #532]	; (800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800bfac:	fa22 f303 	lsr.w	r3, r2, r3
 800bfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb2:	e01e      	b.n	800bff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfb4:	4b81      	ldr	r3, [pc, #516]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfc0:	d106      	bne.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 800bfc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfc8:	d102      	bne.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bfca:	4b7e      	ldr	r3, [pc, #504]	; (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800bfcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfce:	e010      	b.n	800bff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfd0:	4b7a      	ldr	r3, [pc, #488]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfdc:	d106      	bne.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800bfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfe4:	d102      	bne.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bfe6:	4b78      	ldr	r3, [pc, #480]	; (800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800bfe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfea:	e002      	b.n	800bff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bfec:	2300      	movs	r3, #0
 800bfee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 800bff0:	e251      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800bff2:	e250      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bff4:	4b75      	ldr	r3, [pc, #468]	; (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800bff6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bff8:	e24d      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bffe:	e24a      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c006:	f040 809c 	bne.w	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800c00a:	4b6c      	ldr	r3, [pc, #432]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800c00c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c00e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c012:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c01a:	d054      	beq.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800c01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c022:	f200 808b 	bhi.w	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c02c:	f000 8083 	beq.w	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 800c030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c032:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c036:	f200 8081 	bhi.w	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800c03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c040:	d02f      	beq.n	800c0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c048:	d878      	bhi.n	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d004      	beq.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 800c050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c056:	d012      	beq.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 800c058:	e070      	b.n	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c05a:	4b58      	ldr	r3, [pc, #352]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c066:	d107      	bne.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c06c:	4618      	mov	r0, r3
 800c06e:	f000 fcd7 	bl	800ca20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c074:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c076:	e20e      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800c078:	2300      	movs	r3, #0
 800c07a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c07c:	e20b      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c07e:	4b4f      	ldr	r3, [pc, #316]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c08a:	d107      	bne.n	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c08c:	f107 0318 	add.w	r3, r7, #24
 800c090:	4618      	mov	r0, r3
 800c092:	f000 fa1d 	bl	800c4d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c09a:	e1fc      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0a0:	e1f9      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0a2:	4b46      	ldr	r3, [pc, #280]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0ae:	d107      	bne.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0b0:	f107 030c 	add.w	r3, r7, #12
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 fb5f 	bl	800c778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c0be:	e1ea      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0c4:	e1e7      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c0c6:	4b3d      	ldr	r3, [pc, #244]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800c0c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0ce:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0d0:	4b3a      	ldr	r3, [pc, #232]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f003 0304 	and.w	r3, r3, #4
 800c0d8:	2b04      	cmp	r3, #4
 800c0da:	d10c      	bne.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 800c0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d109      	bne.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c0e2:	4b36      	ldr	r3, [pc, #216]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	08db      	lsrs	r3, r3, #3
 800c0e8:	f003 0303 	and.w	r3, r3, #3
 800c0ec:	4a34      	ldr	r2, [pc, #208]	; (800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800c0ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0f4:	e01e      	b.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0f6:	4b31      	ldr	r3, [pc, #196]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c102:	d106      	bne.n	800c112 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 800c104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c10a:	d102      	bne.n	800c112 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c10c:	4b2d      	ldr	r3, [pc, #180]	; (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800c10e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c110:	e010      	b.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c112:	4b2a      	ldr	r3, [pc, #168]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c11a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c11e:	d106      	bne.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c126:	d102      	bne.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c128:	4b27      	ldr	r3, [pc, #156]	; (800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800c12a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c12c:	e002      	b.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c12e:	2300      	movs	r3, #0
 800c130:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c132:	e1b0      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800c134:	e1af      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c136:	4b25      	ldr	r3, [pc, #148]	; (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800c138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c13a:	e1ac      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c140:	e1a9      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c148:	d17d      	bne.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800c14a:	4b1c      	ldr	r3, [pc, #112]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800c14c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c14e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c152:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c15a:	d039      	beq.n	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c162:	d86d      	bhi.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	2b00      	cmp	r3, #0
 800c168:	d004      	beq.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 800c16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c170:	d012      	beq.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800c172:	e065      	b.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c174:	4b11      	ldr	r3, [pc, #68]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c17c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c180:	d107      	bne.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c182:	f107 0318 	add.w	r3, r7, #24
 800c186:	4618      	mov	r0, r3
 800c188:	f000 f9a2 	bl	800c4d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c190:	e181      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800c192:	2300      	movs	r3, #0
 800c194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c196:	e17e      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c198:	4b08      	ldr	r3, [pc, #32]	; (800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1a4:	d107      	bne.n	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1a6:	f107 030c 	add.w	r3, r7, #12
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f000 fae4 	bl	800c778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c1b4:	e16f      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1ba:	e16c      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800c1bc:	58024400 	.word	0x58024400
 800c1c0:	03d09000 	.word	0x03d09000
 800c1c4:	003d0900 	.word	0x003d0900
 800c1c8:	016e3600 	.word	0x016e3600
 800c1cc:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c1d0:	4ba0      	ldr	r3, [pc, #640]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c1d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1d8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1da:	4b9e      	ldr	r3, [pc, #632]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f003 0304 	and.w	r3, r3, #4
 800c1e2:	2b04      	cmp	r3, #4
 800c1e4:	d10c      	bne.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800c1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d109      	bne.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c1ec:	4b99      	ldr	r3, [pc, #612]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	08db      	lsrs	r3, r3, #3
 800c1f2:	f003 0303 	and.w	r3, r3, #3
 800c1f6:	4a98      	ldr	r2, [pc, #608]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800c1f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1fe:	e01e      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c200:	4b94      	ldr	r3, [pc, #592]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c20c:	d106      	bne.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c210:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c214:	d102      	bne.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c216:	4b91      	ldr	r3, [pc, #580]	; (800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800c218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c21a:	e010      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c21c:	4b8d      	ldr	r3, [pc, #564]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c228:	d106      	bne.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800c22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c230:	d102      	bne.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c232:	4b8b      	ldr	r3, [pc, #556]	; (800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800c234:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c236:	e002      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c238:	2300      	movs	r3, #0
 800c23a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c23c:	e12b      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800c23e:	e12a      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 800c240:	2300      	movs	r3, #0
 800c242:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c244:	e127      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c24c:	d133      	bne.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800c24e:	4b81      	ldr	r3, [pc, #516]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c256:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d004      	beq.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800c25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c264:	d012      	beq.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800c266:	e023      	b.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c268:	4b7a      	ldr	r3, [pc, #488]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c274:	d107      	bne.n	800c286 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 fbd0 	bl	800ca20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c284:	e107      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800c286:	2300      	movs	r3, #0
 800c288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c28a:	e104      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c28c:	4b71      	ldr	r3, [pc, #452]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c298:	d107      	bne.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c29a:	f107 0318 	add.w	r3, r7, #24
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 f916 	bl	800c4d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c2a4:	6a3b      	ldr	r3, [r7, #32]
 800c2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c2a8:	e0f5      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c2ae:	e0f2      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c2b4:	e0ef      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2bc:	f040 8091 	bne.w	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800c2c0:	4b64      	ldr	r3, [pc, #400]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c2c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c2c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2cc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c2d0:	f000 8081 	beq.w	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c2da:	d87f      	bhi.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2e2:	d06b      	beq.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2ea:	d877      	bhi.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2f2:	d056      	beq.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800c2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2fa:	d86f      	bhi.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800c2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c302:	d03b      	beq.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800c304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c306:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c30a:	d867      	bhi.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800c30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c312:	d021      	beq.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 800c314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c31a:	d85f      	bhi.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800c31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d004      	beq.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800c322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c324:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c328:	d004      	beq.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 800c32a:	e057      	b.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c32c:	f000 f8ba 	bl	800c4a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800c330:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800c332:	e0b0      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c334:	4b47      	ldr	r3, [pc, #284]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c33c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c340:	d107      	bne.n	800c352 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c342:	f107 0318 	add.w	r3, r7, #24
 800c346:	4618      	mov	r0, r3
 800c348:	f000 f8c2 	bl	800c4d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c350:	e0a1      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800c352:	2300      	movs	r3, #0
 800c354:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c356:	e09e      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c358:	4b3e      	ldr	r3, [pc, #248]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c364:	d107      	bne.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c366:	f107 030c 	add.w	r3, r7, #12
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 fa04 	bl	800c778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c374:	e08f      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800c376:	2300      	movs	r3, #0
 800c378:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c37a:	e08c      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c37c:	4b35      	ldr	r3, [pc, #212]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 0304 	and.w	r3, r3, #4
 800c384:	2b04      	cmp	r3, #4
 800c386:	d109      	bne.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c388:	4b32      	ldr	r3, [pc, #200]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	08db      	lsrs	r3, r3, #3
 800c38e:	f003 0303 	and.w	r3, r3, #3
 800c392:	4a31      	ldr	r2, [pc, #196]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800c394:	fa22 f303 	lsr.w	r3, r2, r3
 800c398:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c39a:	e07c      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3a0:	e079      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c3a2:	4b2c      	ldr	r3, [pc, #176]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3ae:	d102      	bne.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 800c3b0:	4b2a      	ldr	r3, [pc, #168]	; (800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800c3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c3b4:	e06f      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3ba:	e06c      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c3bc:	4b25      	ldr	r3, [pc, #148]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3c8:	d102      	bne.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 800c3ca:	4b25      	ldr	r3, [pc, #148]	; (800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800c3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c3ce:	e062      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3d4:	e05f      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c3d6:	4b23      	ldr	r3, [pc, #140]	; (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 800c3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3da:	e05c      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3e0:	e059      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3e8:	d153      	bne.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800c3ea:	4b1a      	ldr	r3, [pc, #104]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c3ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3f2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3fa:	d035      	beq.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c402:	d843      	bhi.n	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	2b00      	cmp	r3, #0
 800c408:	d004      	beq.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800c40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c410:	d00d      	beq.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800c412:	e03b      	b.n	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c414:	4b0f      	ldr	r3, [pc, #60]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c41c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c420:	d102      	bne.n	800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 800c422:	4b0f      	ldr	r3, [pc, #60]	; (800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800c424:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c426:	e036      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800c428:	2300      	movs	r3, #0
 800c42a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c42c:	e033      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c42e:	4b09      	ldr	r3, [pc, #36]	; (800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c43a:	d107      	bne.n	800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c43c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c440:	4618      	mov	r0, r3
 800c442:	f000 faed 	bl	800ca20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c448:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c44a:	e024      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800c44c:	2300      	movs	r3, #0
 800c44e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c450:	e021      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800c452:	bf00      	nop
 800c454:	58024400 	.word	0x58024400
 800c458:	03d09000 	.word	0x03d09000
 800c45c:	003d0900 	.word	0x003d0900
 800c460:	016e3600 	.word	0x016e3600
 800c464:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c468:	4b0d      	ldr	r3, [pc, #52]	; (800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c474:	d107      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c476:	f107 0318 	add.w	r3, r7, #24
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 f828 	bl	800c4d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c484:	e007      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c48a:	e004      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 800c48c:	2300      	movs	r3, #0
 800c48e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c490:	e001      	b.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 800c492:	2300      	movs	r3, #0
 800c494:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800c496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3740      	adds	r7, #64	; 0x40
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	58024400 	.word	0x58024400

0800c4a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c4a8:	f7fe fc96 	bl	800add8 <HAL_RCC_GetHCLKFreq>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	4b06      	ldr	r3, [pc, #24]	; (800c4c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	091b      	lsrs	r3, r3, #4
 800c4b4:	f003 0307 	and.w	r3, r3, #7
 800c4b8:	4904      	ldr	r1, [pc, #16]	; (800c4cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c4ba:	5ccb      	ldrb	r3, [r1, r3]
 800c4bc:	f003 031f 	and.w	r3, r3, #31
 800c4c0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	58024400 	.word	0x58024400
 800c4cc:	080111cc 	.word	0x080111cc

0800c4d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b089      	sub	sp, #36	; 0x24
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c4d8:	4ba1      	ldr	r3, [pc, #644]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4dc:	f003 0303 	and.w	r3, r3, #3
 800c4e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c4e2:	4b9f      	ldr	r3, [pc, #636]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e6:	0b1b      	lsrs	r3, r3, #12
 800c4e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c4ee:	4b9c      	ldr	r3, [pc, #624]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f2:	091b      	lsrs	r3, r3, #4
 800c4f4:	f003 0301 	and.w	r3, r3, #1
 800c4f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c4fa:	4b99      	ldr	r3, [pc, #612]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fe:	08db      	lsrs	r3, r3, #3
 800c500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	fb02 f303 	mul.w	r3, r2, r3
 800c50a:	ee07 3a90 	vmov	s15, r3
 800c50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f000 8111 	beq.w	800c740 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	2b02      	cmp	r3, #2
 800c522:	f000 8083 	beq.w	800c62c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	2b02      	cmp	r3, #2
 800c52a:	f200 80a1 	bhi.w	800c670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d003      	beq.n	800c53c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d056      	beq.n	800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c53a:	e099      	b.n	800c670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c53c:	4b88      	ldr	r3, [pc, #544]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 0320 	and.w	r3, r3, #32
 800c544:	2b00      	cmp	r3, #0
 800c546:	d02d      	beq.n	800c5a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c548:	4b85      	ldr	r3, [pc, #532]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	08db      	lsrs	r3, r3, #3
 800c54e:	f003 0303 	and.w	r3, r3, #3
 800c552:	4a84      	ldr	r2, [pc, #528]	; (800c764 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c554:	fa22 f303 	lsr.w	r3, r2, r3
 800c558:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	ee07 3a90 	vmov	s15, r3
 800c560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	ee07 3a90 	vmov	s15, r3
 800c56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c56e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c572:	4b7b      	ldr	r3, [pc, #492]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c57a:	ee07 3a90 	vmov	s15, r3
 800c57e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c582:	ed97 6a03 	vldr	s12, [r7, #12]
 800c586:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c58a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c58e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c59e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c5a2:	e087      	b.n	800c6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	ee07 3a90 	vmov	s15, r3
 800c5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c76c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c5b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5b6:	4b6a      	ldr	r3, [pc, #424]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5be:	ee07 3a90 	vmov	s15, r3
 800c5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5e6:	e065      	b.n	800c6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	ee07 3a90 	vmov	s15, r3
 800c5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c5f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5fa:	4b59      	ldr	r3, [pc, #356]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c602:	ee07 3a90 	vmov	s15, r3
 800c606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c60a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c60e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c61a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c622:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c62a:	e043      	b.n	800c6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	ee07 3a90 	vmov	s15, r3
 800c632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c636:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c63e:	4b48      	ldr	r3, [pc, #288]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c646:	ee07 3a90 	vmov	s15, r3
 800c64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c64e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c652:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c65e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c66a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c66e:	e021      	b.n	800c6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	ee07 3a90 	vmov	s15, r3
 800c676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c67a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c682:	4b37      	ldr	r3, [pc, #220]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68a:	ee07 3a90 	vmov	s15, r3
 800c68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c692:	ed97 6a03 	vldr	s12, [r7, #12]
 800c696:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c69a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c6b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c6b4:	4b2a      	ldr	r3, [pc, #168]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b8:	0a5b      	lsrs	r3, r3, #9
 800c6ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6be:	ee07 3a90 	vmov	s15, r3
 800c6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6da:	ee17 2a90 	vmov	r2, s15
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c6e2:	4b1f      	ldr	r3, [pc, #124]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e6:	0c1b      	lsrs	r3, r3, #16
 800c6e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ec:	ee07 3a90 	vmov	s15, r3
 800c6f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c708:	ee17 2a90 	vmov	r2, s15
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c710:	4b13      	ldr	r3, [pc, #76]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c714:	0e1b      	lsrs	r3, r3, #24
 800c716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c71a:	ee07 3a90 	vmov	s15, r3
 800c71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c72a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c72e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c736:	ee17 2a90 	vmov	r2, s15
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c73e:	e008      	b.n	800c752 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	609a      	str	r2, [r3, #8]
}
 800c752:	bf00      	nop
 800c754:	3724      	adds	r7, #36	; 0x24
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
 800c75e:	bf00      	nop
 800c760:	58024400 	.word	0x58024400
 800c764:	03d09000 	.word	0x03d09000
 800c768:	46000000 	.word	0x46000000
 800c76c:	4c742400 	.word	0x4c742400
 800c770:	4a742400 	.word	0x4a742400
 800c774:	4bb71b00 	.word	0x4bb71b00

0800c778 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c778:	b480      	push	{r7}
 800c77a:	b089      	sub	sp, #36	; 0x24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c780:	4ba1      	ldr	r3, [pc, #644]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c784:	f003 0303 	and.w	r3, r3, #3
 800c788:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c78a:	4b9f      	ldr	r3, [pc, #636]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78e:	0d1b      	lsrs	r3, r3, #20
 800c790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c794:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c796:	4b9c      	ldr	r3, [pc, #624]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c79a:	0a1b      	lsrs	r3, r3, #8
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c7a2:	4b99      	ldr	r3, [pc, #612]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7a6:	08db      	lsrs	r3, r3, #3
 800c7a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7ac:	693a      	ldr	r2, [r7, #16]
 800c7ae:	fb02 f303 	mul.w	r3, r2, r3
 800c7b2:	ee07 3a90 	vmov	s15, r3
 800c7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 8111 	beq.w	800c9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	f000 8083 	beq.w	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	f200 80a1 	bhi.w	800c918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d003      	beq.n	800c7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d056      	beq.n	800c890 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c7e2:	e099      	b.n	800c918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7e4:	4b88      	ldr	r3, [pc, #544]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f003 0320 	and.w	r3, r3, #32
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d02d      	beq.n	800c84c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c7f0:	4b85      	ldr	r3, [pc, #532]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	08db      	lsrs	r3, r3, #3
 800c7f6:	f003 0303 	and.w	r3, r3, #3
 800c7fa:	4a84      	ldr	r2, [pc, #528]	; (800ca0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c7fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c800:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	ee07 3a90 	vmov	s15, r3
 800c808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	ee07 3a90 	vmov	s15, r3
 800c812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c81a:	4b7b      	ldr	r3, [pc, #492]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c822:	ee07 3a90 	vmov	s15, r3
 800c826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c82a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c82e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c83a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c846:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c84a:	e087      	b.n	800c95c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	ee07 3a90 	vmov	s15, r3
 800c852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c856:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c85e:	4b6a      	ldr	r3, [pc, #424]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c866:	ee07 3a90 	vmov	s15, r3
 800c86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c86e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c872:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c87e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c88a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c88e:	e065      	b.n	800c95c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	ee07 3a90 	vmov	s15, r3
 800c896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c89a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c89e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8a2:	4b59      	ldr	r3, [pc, #356]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8aa:	ee07 3a90 	vmov	s15, r3
 800c8ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8d2:	e043      	b.n	800c95c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	ee07 3a90 	vmov	s15, r3
 800c8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8e6:	4b48      	ldr	r3, [pc, #288]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ee:	ee07 3a90 	vmov	s15, r3
 800c8f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c916:	e021      	b.n	800c95c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	ee07 3a90 	vmov	s15, r3
 800c91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c922:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c92a:	4b37      	ldr	r3, [pc, #220]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c932:	ee07 3a90 	vmov	s15, r3
 800c936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c93a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c93e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c94a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c94e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c952:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c95a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c95c:	4b2a      	ldr	r3, [pc, #168]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c960:	0a5b      	lsrs	r3, r3, #9
 800c962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c966:	ee07 3a90 	vmov	s15, r3
 800c96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c972:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c976:	edd7 6a07 	vldr	s13, [r7, #28]
 800c97a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c97e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c982:	ee17 2a90 	vmov	r2, s15
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c98a:	4b1f      	ldr	r3, [pc, #124]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98e:	0c1b      	lsrs	r3, r3, #16
 800c990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c994:	ee07 3a90 	vmov	s15, r3
 800c998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c99c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9b0:	ee17 2a90 	vmov	r2, s15
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c9b8:	4b13      	ldr	r3, [pc, #76]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9bc:	0e1b      	lsrs	r3, r3, #24
 800c9be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9c2:	ee07 3a90 	vmov	s15, r3
 800c9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9de:	ee17 2a90 	vmov	r2, s15
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c9e6:	e008      	b.n	800c9fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	609a      	str	r2, [r3, #8]
}
 800c9fa:	bf00      	nop
 800c9fc:	3724      	adds	r7, #36	; 0x24
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	58024400 	.word	0x58024400
 800ca0c:	03d09000 	.word	0x03d09000
 800ca10:	46000000 	.word	0x46000000
 800ca14:	4c742400 	.word	0x4c742400
 800ca18:	4a742400 	.word	0x4a742400
 800ca1c:	4bb71b00 	.word	0x4bb71b00

0800ca20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b089      	sub	sp, #36	; 0x24
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca28:	4ba0      	ldr	r3, [pc, #640]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca2c:	f003 0303 	and.w	r3, r3, #3
 800ca30:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800ca32:	4b9e      	ldr	r3, [pc, #632]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca36:	091b      	lsrs	r3, r3, #4
 800ca38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca3c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ca3e:	4b9b      	ldr	r3, [pc, #620]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca42:	f003 0301 	and.w	r3, r3, #1
 800ca46:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ca48:	4b98      	ldr	r3, [pc, #608]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca4c:	08db      	lsrs	r3, r3, #3
 800ca4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca52:	693a      	ldr	r2, [r7, #16]
 800ca54:	fb02 f303 	mul.w	r3, r2, r3
 800ca58:	ee07 3a90 	vmov	s15, r3
 800ca5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 8111 	beq.w	800cc8e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	2b02      	cmp	r3, #2
 800ca70:	f000 8083 	beq.w	800cb7a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	f200 80a1 	bhi.w	800cbbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d003      	beq.n	800ca8a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d056      	beq.n	800cb36 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ca88:	e099      	b.n	800cbbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca8a:	4b88      	ldr	r3, [pc, #544]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f003 0320 	and.w	r3, r3, #32
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d02d      	beq.n	800caf2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ca96:	4b85      	ldr	r3, [pc, #532]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	08db      	lsrs	r3, r3, #3
 800ca9c:	f003 0303 	and.w	r3, r3, #3
 800caa0:	4a83      	ldr	r2, [pc, #524]	; (800ccb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800caa2:	fa22 f303 	lsr.w	r3, r2, r3
 800caa6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	ee07 3a90 	vmov	s15, r3
 800caae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	ee07 3a90 	vmov	s15, r3
 800cab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cabc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cac0:	4b7a      	ldr	r3, [pc, #488]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac8:	ee07 3a90 	vmov	s15, r3
 800cacc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cad0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cad4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cadc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800caf0:	e087      	b.n	800cc02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	ee07 3a90 	vmov	s15, r3
 800caf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cafc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ccb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb04:	4b69      	ldr	r3, [pc, #420]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb0c:	ee07 3a90 	vmov	s15, r3
 800cb10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb14:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb18:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb34:	e065      	b.n	800cc02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	ee07 3a90 	vmov	s15, r3
 800cb3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb40:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ccbc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cb44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb48:	4b58      	ldr	r3, [pc, #352]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb50:	ee07 3a90 	vmov	s15, r3
 800cb54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb58:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb5c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb78:	e043      	b.n	800cc02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	ee07 3a90 	vmov	s15, r3
 800cb80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb84:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ccc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cb88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb8c:	4b47      	ldr	r3, [pc, #284]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb94:	ee07 3a90 	vmov	s15, r3
 800cb98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cba0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cbbc:	e021      	b.n	800cc02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	ee07 3a90 	vmov	s15, r3
 800cbc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ccb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cbcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbd0:	4b36      	ldr	r3, [pc, #216]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbd8:	ee07 3a90 	vmov	s15, r3
 800cbdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbe0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbe4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cc00:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800cc02:	4b2a      	ldr	r3, [pc, #168]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc06:	0a5b      	lsrs	r3, r3, #9
 800cc08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc0c:	ee07 3a90 	vmov	s15, r3
 800cc10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc28:	ee17 2a90 	vmov	r2, s15
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800cc30:	4b1e      	ldr	r3, [pc, #120]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc34:	0c1b      	lsrs	r3, r3, #16
 800cc36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc3a:	ee07 3a90 	vmov	s15, r3
 800cc3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc56:	ee17 2a90 	vmov	r2, s15
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800cc5e:	4b13      	ldr	r3, [pc, #76]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc62:	0e1b      	lsrs	r3, r3, #24
 800cc64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc68:	ee07 3a90 	vmov	s15, r3
 800cc6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc78:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc84:	ee17 2a90 	vmov	r2, s15
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cc8c:	e008      	b.n	800cca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	609a      	str	r2, [r3, #8]
}
 800cca0:	bf00      	nop
 800cca2:	3724      	adds	r7, #36	; 0x24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	58024400 	.word	0x58024400
 800ccb0:	03d09000 	.word	0x03d09000
 800ccb4:	46000000 	.word	0x46000000
 800ccb8:	4c742400 	.word	0x4c742400
 800ccbc:	4a742400 	.word	0x4a742400
 800ccc0:	4bb71b00 	.word	0x4bb71b00

0800ccc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ccd2:	4b53      	ldr	r3, [pc, #332]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800ccd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd6:	f003 0303 	and.w	r3, r3, #3
 800ccda:	2b03      	cmp	r3, #3
 800ccdc:	d101      	bne.n	800cce2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	e099      	b.n	800ce16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cce2:	4b4f      	ldr	r3, [pc, #316]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a4e      	ldr	r2, [pc, #312]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cce8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ccec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccee:	f7f6 f971 	bl	8002fd4 <HAL_GetTick>
 800ccf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ccf4:	e008      	b.n	800cd08 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ccf6:	f7f6 f96d 	bl	8002fd4 <HAL_GetTick>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d901      	bls.n	800cd08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd04:	2303      	movs	r3, #3
 800cd06:	e086      	b.n	800ce16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd08:	4b45      	ldr	r3, [pc, #276]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1f0      	bne.n	800ccf6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cd14:	4b42      	ldr	r3, [pc, #264]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cd16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	031b      	lsls	r3, r3, #12
 800cd22:	493f      	ldr	r1, [pc, #252]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cd24:	4313      	orrs	r3, r2
 800cd26:	628b      	str	r3, [r1, #40]	; 0x28
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	3b01      	subs	r3, #1
 800cd38:	025b      	lsls	r3, r3, #9
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	431a      	orrs	r2, r3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	3b01      	subs	r3, #1
 800cd44:	041b      	lsls	r3, r3, #16
 800cd46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd4a:	431a      	orrs	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	3b01      	subs	r3, #1
 800cd52:	061b      	lsls	r3, r3, #24
 800cd54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cd58:	4931      	ldr	r1, [pc, #196]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cd5e:	4b30      	ldr	r3, [pc, #192]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	695b      	ldr	r3, [r3, #20]
 800cd6a:	492d      	ldr	r1, [pc, #180]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cd70:	4b2b      	ldr	r3, [pc, #172]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd74:	f023 0220 	bic.w	r2, r3, #32
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	699b      	ldr	r3, [r3, #24]
 800cd7c:	4928      	ldr	r1, [pc, #160]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cd82:	4b27      	ldr	r3, [pc, #156]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd86:	4a26      	ldr	r2, [pc, #152]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cd88:	f023 0310 	bic.w	r3, r3, #16
 800cd8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cd8e:	4b24      	ldr	r3, [pc, #144]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cd90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd92:	4b24      	ldr	r3, [pc, #144]	; (800ce24 <RCCEx_PLL2_Config+0x160>)
 800cd94:	4013      	ands	r3, r2
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	69d2      	ldr	r2, [r2, #28]
 800cd9a:	00d2      	lsls	r2, r2, #3
 800cd9c:	4920      	ldr	r1, [pc, #128]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cda2:	4b1f      	ldr	r3, [pc, #124]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda6:	4a1e      	ldr	r2, [pc, #120]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cda8:	f043 0310 	orr.w	r3, r3, #16
 800cdac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d106      	bne.n	800cdc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cdb4:	4b1a      	ldr	r3, [pc, #104]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb8:	4a19      	ldr	r2, [pc, #100]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cdba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cdbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cdc0:	e00f      	b.n	800cde2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d106      	bne.n	800cdd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cdc8:	4b15      	ldr	r3, [pc, #84]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdcc:	4a14      	ldr	r2, [pc, #80]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cdce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cdd4:	e005      	b.n	800cde2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cdd6:	4b12      	ldr	r3, [pc, #72]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cdd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdda:	4a11      	ldr	r2, [pc, #68]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cddc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cde0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cde2:	4b0f      	ldr	r3, [pc, #60]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a0e      	ldr	r2, [pc, #56]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800cde8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cdec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdee:	f7f6 f8f1 	bl	8002fd4 <HAL_GetTick>
 800cdf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cdf4:	e008      	b.n	800ce08 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cdf6:	f7f6 f8ed 	bl	8002fd4 <HAL_GetTick>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	1ad3      	subs	r3, r2, r3
 800ce00:	2b02      	cmp	r3, #2
 800ce02:	d901      	bls.n	800ce08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce04:	2303      	movs	r3, #3
 800ce06:	e006      	b.n	800ce16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce08:	4b05      	ldr	r3, [pc, #20]	; (800ce20 <RCCEx_PLL2_Config+0x15c>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d0f0      	beq.n	800cdf6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3710      	adds	r7, #16
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	58024400 	.word	0x58024400
 800ce24:	ffff0007 	.word	0xffff0007

0800ce28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce32:	2300      	movs	r3, #0
 800ce34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce36:	4b53      	ldr	r3, [pc, #332]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800ce38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3a:	f003 0303 	and.w	r3, r3, #3
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	d101      	bne.n	800ce46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	e099      	b.n	800cf7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ce46:	4b4f      	ldr	r3, [pc, #316]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a4e      	ldr	r2, [pc, #312]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800ce4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce52:	f7f6 f8bf 	bl	8002fd4 <HAL_GetTick>
 800ce56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce58:	e008      	b.n	800ce6c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ce5a:	f7f6 f8bb 	bl	8002fd4 <HAL_GetTick>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d901      	bls.n	800ce6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce68:	2303      	movs	r3, #3
 800ce6a:	e086      	b.n	800cf7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce6c:	4b45      	ldr	r3, [pc, #276]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d1f0      	bne.n	800ce5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce78:	4b42      	ldr	r3, [pc, #264]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800ce7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	051b      	lsls	r3, r3, #20
 800ce86:	493f      	ldr	r1, [pc, #252]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	628b      	str	r3, [r1, #40]	; 0x28
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	3b01      	subs	r3, #1
 800ce92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	689b      	ldr	r3, [r3, #8]
 800ce9a:	3b01      	subs	r3, #1
 800ce9c:	025b      	lsls	r3, r3, #9
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	431a      	orrs	r2, r3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	3b01      	subs	r3, #1
 800cea8:	041b      	lsls	r3, r3, #16
 800ceaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ceae:	431a      	orrs	r2, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	061b      	lsls	r3, r3, #24
 800ceb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cebc:	4931      	ldr	r1, [pc, #196]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cebe:	4313      	orrs	r3, r2
 800cec0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cec2:	4b30      	ldr	r3, [pc, #192]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	695b      	ldr	r3, [r3, #20]
 800cece:	492d      	ldr	r1, [pc, #180]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800ced0:	4313      	orrs	r3, r2
 800ced2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ced4:	4b2b      	ldr	r3, [pc, #172]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800ced6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	699b      	ldr	r3, [r3, #24]
 800cee0:	4928      	ldr	r1, [pc, #160]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cee2:	4313      	orrs	r3, r2
 800cee4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cee6:	4b27      	ldr	r3, [pc, #156]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceea:	4a26      	ldr	r2, [pc, #152]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800ceec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cef0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cef2:	4b24      	ldr	r3, [pc, #144]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cef6:	4b24      	ldr	r3, [pc, #144]	; (800cf88 <RCCEx_PLL3_Config+0x160>)
 800cef8:	4013      	ands	r3, r2
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	69d2      	ldr	r2, [r2, #28]
 800cefe:	00d2      	lsls	r2, r2, #3
 800cf00:	4920      	ldr	r1, [pc, #128]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cf02:	4313      	orrs	r3, r2
 800cf04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cf06:	4b1f      	ldr	r3, [pc, #124]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cf08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0a:	4a1e      	ldr	r2, [pc, #120]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cf0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d106      	bne.n	800cf26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cf18:	4b1a      	ldr	r3, [pc, #104]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1c:	4a19      	ldr	r2, [pc, #100]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cf1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cf22:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf24:	e00f      	b.n	800cf46 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d106      	bne.n	800cf3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cf2c:	4b15      	ldr	r3, [pc, #84]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf30:	4a14      	ldr	r2, [pc, #80]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cf32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cf36:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf38:	e005      	b.n	800cf46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cf3a:	4b12      	ldr	r3, [pc, #72]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf3e:	4a11      	ldr	r2, [pc, #68]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cf40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cf46:	4b0f      	ldr	r3, [pc, #60]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4a0e      	ldr	r2, [pc, #56]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cf4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf52:	f7f6 f83f 	bl	8002fd4 <HAL_GetTick>
 800cf56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf58:	e008      	b.n	800cf6c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cf5a:	f7f6 f83b 	bl	8002fd4 <HAL_GetTick>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	d901      	bls.n	800cf6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	e006      	b.n	800cf7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf6c:	4b05      	ldr	r3, [pc, #20]	; (800cf84 <RCCEx_PLL3_Config+0x15c>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d0f0      	beq.n	800cf5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cf78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	58024400 	.word	0x58024400
 800cf88:	ffff0007 	.word	0xffff0007

0800cf8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cf94:	2301      	movs	r3, #1
 800cf96:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d06a      	beq.n	800d074 <HAL_RTC_Init+0xe8>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d106      	bne.n	800cfb8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f7f5 fca8 	bl	8002908 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2202      	movs	r2, #2
 800cfbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	22ca      	movs	r2, #202	; 0xca
 800cfc6:	625a      	str	r2, [r3, #36]	; 0x24
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2253      	movs	r2, #83	; 0x53
 800cfce:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 fa4d 	bl	800d470 <RTC_EnterInitMode>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800cfda:	7bfb      	ldrb	r3, [r7, #15]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d13e      	bne.n	800d05e <HAL_RTC_Init+0xd2>
    {
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6999      	ldr	r1, [r3, #24]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	4b25      	ldr	r3, [pc, #148]	; (800d080 <HAL_RTC_Init+0xf4>)
 800cfec:	400b      	ands	r3, r1
 800cfee:	6193      	str	r3, [r2, #24]
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	6999      	ldr	r1, [r3, #24]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	685a      	ldr	r2, [r3, #4]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	691b      	ldr	r3, [r3, #16]
 800cffe:	431a      	orrs	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	431a      	orrs	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	430a      	orrs	r2, r1
 800d00c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	0419      	lsls	r1, r3, #16
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	68da      	ldr	r2, [r3, #12]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	430a      	orrs	r2, r1
 800d01e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 fa5b 	bl	800d4dc <RTC_ExitInitMode>
 800d026:	4603      	mov	r3, r0
 800d028:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800d02a:	7bfb      	ldrb	r3, [r7, #15]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d116      	bne.n	800d05e <HAL_RTC_Init+0xd2>
      {
#if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	699a      	ldr	r2, [r3, #24]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800d03e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	6999      	ldr	r1, [r3, #24]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6a1a      	ldr	r2, [r3, #32]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	69db      	ldr	r3, [r3, #28]
 800d04e:	431a      	orrs	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	431a      	orrs	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	430a      	orrs	r2, r1
 800d05c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	22ff      	movs	r2, #255	; 0xff
 800d064:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800d066:	7bfb      	ldrb	r3, [r7, #15]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d103      	bne.n	800d074 <HAL_RTC_Init+0xe8>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2201      	movs	r2, #1
 800d070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d074:	7bfb      	ldrb	r3, [r7, #15]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	fb8fffbf 	.word	0xfb8fffbf

0800d084 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d084:	b590      	push	{r4, r7, lr}
 800d086:	b087      	sub	sp, #28
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d096:	2b01      	cmp	r3, #1
 800d098:	d101      	bne.n	800d09e <HAL_RTC_SetTime+0x1a>
 800d09a:	2302      	movs	r3, #2
 800d09c:	e089      	b.n	800d1b2 <HAL_RTC_SetTime+0x12e>
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2202      	movs	r2, #2
 800d0aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	22ca      	movs	r2, #202	; 0xca
 800d0b4:	625a      	str	r2, [r3, #36]	; 0x24
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2253      	movs	r2, #83	; 0x53
 800d0bc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f000 f9d6 	bl	800d470 <RTC_EnterInitMode>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d0c8:	7cfb      	ldrb	r3, [r7, #19]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d161      	bne.n	800d192 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d126      	bne.n	800d122 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d102      	bne.n	800d0e8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 fa33 	bl	800d558 <RTC_ByteToBcd2>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	785b      	ldrb	r3, [r3, #1]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 fa2c 	bl	800d558 <RTC_ByteToBcd2>
 800d100:	4603      	mov	r3, r0
 800d102:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d104:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	789b      	ldrb	r3, [r3, #2]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 fa24 	bl	800d558 <RTC_ByteToBcd2>
 800d110:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d112:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	78db      	ldrb	r3, [r3, #3]
 800d11a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d11c:	4313      	orrs	r3, r2
 800d11e:	617b      	str	r3, [r7, #20]
 800d120:	e018      	b.n	800d154 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	699b      	ldr	r3, [r3, #24]
 800d128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d102      	bne.n	800d136 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2200      	movs	r2, #0
 800d134:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	785b      	ldrb	r3, [r3, #1]
 800d140:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d142:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d144:	68ba      	ldr	r2, [r7, #8]
 800d146:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d148:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	78db      	ldrb	r3, [r3, #3]
 800d14e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d150:	4313      	orrs	r3, r2
 800d152:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	6979      	ldr	r1, [r7, #20]
 800d15a:	4b18      	ldr	r3, [pc, #96]	; (800d1bc <HAL_RTC_SetTime+0x138>)
 800d15c:	400b      	ands	r3, r1
 800d15e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	699a      	ldr	r2, [r3, #24]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d16e:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	6999      	ldr	r1, [r3, #24]
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	68da      	ldr	r2, [r3, #12]
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	691b      	ldr	r3, [r3, #16]
 800d17e:	431a      	orrs	r2, r3
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	430a      	orrs	r2, r1
 800d186:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f000 f9a7 	bl	800d4dc <RTC_ExitInitMode>
 800d18e:	4603      	mov	r3, r0
 800d190:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	22ff      	movs	r2, #255	; 0xff
 800d198:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d19a:	7cfb      	ldrb	r3, [r7, #19]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d103      	bne.n	800d1a8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800d1b0:	7cfb      	ldrb	r3, [r7, #19]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	371c      	adds	r7, #28
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd90      	pop	{r4, r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	007f7f7f 	.word	0x007f7f7f

0800d1c0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	689a      	ldr	r2, [r3, #8]
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	4b22      	ldr	r3, [pc, #136]	; (800d274 <HAL_RTC_GetTime+0xb4>)
 800d1ec:	4013      	ands	r3, r2
 800d1ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	0c1b      	lsrs	r3, r3, #16
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1fa:	b2da      	uxtb	r2, r3
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	0a1b      	lsrs	r3, r3, #8
 800d204:	b2db      	uxtb	r3, r3
 800d206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	b2db      	uxtb	r3, r3
 800d214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d218:	b2da      	uxtb	r2, r3
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	0d9b      	lsrs	r3, r3, #22
 800d222:	b2db      	uxtb	r3, r3
 800d224:	f003 0301 	and.w	r3, r3, #1
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d11a      	bne.n	800d26a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	4618      	mov	r0, r3
 800d23a:	f000 f9ad 	bl	800d598 <RTC_Bcd2ToByte>
 800d23e:	4603      	mov	r3, r0
 800d240:	461a      	mov	r2, r3
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	785b      	ldrb	r3, [r3, #1]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 f9a4 	bl	800d598 <RTC_Bcd2ToByte>
 800d250:	4603      	mov	r3, r0
 800d252:	461a      	mov	r2, r3
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	789b      	ldrb	r3, [r3, #2]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f000 f99b 	bl	800d598 <RTC_Bcd2ToByte>
 800d262:	4603      	mov	r3, r0
 800d264:	461a      	mov	r2, r3
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3718      	adds	r7, #24
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	007f7f7f 	.word	0x007f7f7f

0800d278 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d278:	b590      	push	{r4, r7, lr}
 800d27a:	b087      	sub	sp, #28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d101      	bne.n	800d292 <HAL_RTC_SetDate+0x1a>
 800d28e:	2302      	movs	r3, #2
 800d290:	e073      	b.n	800d37a <HAL_RTC_SetDate+0x102>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2201      	movs	r2, #1
 800d296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2202      	movs	r2, #2
 800d29e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10e      	bne.n	800d2c6 <HAL_RTC_SetDate+0x4e>
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	785b      	ldrb	r3, [r3, #1]
 800d2ac:	f003 0310 	and.w	r3, r3, #16
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d008      	beq.n	800d2c6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	785b      	ldrb	r3, [r3, #1]
 800d2b8:	f023 0310 	bic.w	r3, r3, #16
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	330a      	adds	r3, #10
 800d2c0:	b2da      	uxtb	r2, r3
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d11c      	bne.n	800d306 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	78db      	ldrb	r3, [r3, #3]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f000 f941 	bl	800d558 <RTC_ByteToBcd2>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	785b      	ldrb	r3, [r3, #1]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 f93a 	bl	800d558 <RTC_ByteToBcd2>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d2e8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	789b      	ldrb	r3, [r3, #2]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f000 f932 	bl	800d558 <RTC_ByteToBcd2>
 800d2f4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d2f6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d300:	4313      	orrs	r3, r2
 800d302:	617b      	str	r3, [r7, #20]
 800d304:	e00e      	b.n	800d324 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	78db      	ldrb	r3, [r3, #3]
 800d30a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	785b      	ldrb	r3, [r3, #1]
 800d310:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d312:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d314:	68ba      	ldr	r2, [r7, #8]
 800d316:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d318:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d320:	4313      	orrs	r3, r2
 800d322:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	22ca      	movs	r2, #202	; 0xca
 800d32a:	625a      	str	r2, [r3, #36]	; 0x24
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2253      	movs	r2, #83	; 0x53
 800d332:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d334:	68f8      	ldr	r0, [r7, #12]
 800d336:	f000 f89b 	bl	800d470 <RTC_EnterInitMode>
 800d33a:	4603      	mov	r3, r0
 800d33c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d33e:	7cfb      	ldrb	r3, [r7, #19]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d10a      	bne.n	800d35a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	6979      	ldr	r1, [r7, #20]
 800d34a:	4b0e      	ldr	r3, [pc, #56]	; (800d384 <HAL_RTC_SetDate+0x10c>)
 800d34c:	400b      	ands	r3, r1
 800d34e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f000 f8c3 	bl	800d4dc <RTC_ExitInitMode>
 800d356:	4603      	mov	r3, r0
 800d358:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	22ff      	movs	r2, #255	; 0xff
 800d360:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d362:	7cfb      	ldrb	r3, [r7, #19]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d103      	bne.n	800d370 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2201      	movs	r2, #1
 800d36c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2200      	movs	r2, #0
 800d374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800d378:	7cfb      	ldrb	r3, [r7, #19]


}
 800d37a:	4618      	mov	r0, r3
 800d37c:	371c      	adds	r7, #28
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd90      	pop	{r4, r7, pc}
 800d382:	bf00      	nop
 800d384:	00ffff3f 	.word	0x00ffff3f

0800d388 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b086      	sub	sp, #24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	685a      	ldr	r2, [r3, #4]
 800d39a:	4b21      	ldr	r3, [pc, #132]	; (800d420 <HAL_RTC_GetDate+0x98>)
 800d39c:	4013      	ands	r3, r2
 800d39e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	0c1b      	lsrs	r3, r3, #16
 800d3a4:	b2da      	uxtb	r2, r3
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	0a1b      	lsrs	r3, r3, #8
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	f003 031f 	and.w	r3, r3, #31
 800d3b4:	b2da      	uxtb	r2, r3
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	0b5b      	lsrs	r3, r3, #13
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	f003 0307 	and.w	r3, r3, #7
 800d3d2:	b2da      	uxtb	r2, r3
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d11a      	bne.n	800d414 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	78db      	ldrb	r3, [r3, #3]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f000 f8d8 	bl	800d598 <RTC_Bcd2ToByte>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	785b      	ldrb	r3, [r3, #1]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f000 f8cf 	bl	800d598 <RTC_Bcd2ToByte>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	789b      	ldrb	r3, [r3, #2]
 800d406:	4618      	mov	r0, r3
 800d408:	f000 f8c6 	bl	800d598 <RTC_Bcd2ToByte>
 800d40c:	4603      	mov	r3, r0
 800d40e:	461a      	mov	r2, r3
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	00ffff3f 	.word	0x00ffff3f

0800d424 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68da      	ldr	r2, [r3, #12]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d43a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800d43c:	f7f5 fdca 	bl	8002fd4 <HAL_GetTick>
 800d440:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d442:	e009      	b.n	800d458 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d444:	f7f5 fdc6 	bl	8002fd4 <HAL_GetTick>
 800d448:	4602      	mov	r2, r0
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	1ad3      	subs	r3, r2, r3
 800d44e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d452:	d901      	bls.n	800d458 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800d454:	2303      	movs	r3, #3
 800d456:	e007      	b.n	800d468 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	f003 0320 	and.w	r3, r3, #32
 800d462:	2b00      	cmp	r3, #0
 800d464:	d0ee      	beq.n	800d444 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d478:	2300      	movs	r3, #0
 800d47a:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d486:	2b00      	cmp	r3, #0
 800d488:	d123      	bne.n	800d4d2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	68da      	ldr	r2, [r3, #12]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d498:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d49a:	f7f5 fd9b 	bl	8002fd4 <HAL_GetTick>
 800d49e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d4a0:	e00d      	b.n	800d4be <RTC_EnterInitMode+0x4e>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d4a2:	f7f5 fd97 	bl	8002fd4 <HAL_GetTick>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4b0:	d905      	bls.n	800d4be <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d4b2:	2303      	movs	r3, #3
 800d4b4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2203      	movs	r2, #3
 800d4ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d102      	bne.n	800d4d2 <RTC_EnterInitMode+0x62>
 800d4cc:	7bfb      	ldrb	r3, [r7, #15]
 800d4ce:	2b03      	cmp	r3, #3
 800d4d0:	d1e7      	bne.n	800d4a2 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800d4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d4e8:	4b1a      	ldr	r3, [pc, #104]	; (800d554 <RTC_ExitInitMode+0x78>)
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	4a19      	ldr	r2, [pc, #100]	; (800d554 <RTC_ExitInitMode+0x78>)
 800d4ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4f2:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d4f4:	4b17      	ldr	r3, [pc, #92]	; (800d554 <RTC_ExitInitMode+0x78>)
 800d4f6:	699b      	ldr	r3, [r3, #24]
 800d4f8:	f003 0320 	and.w	r3, r3, #32
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d10c      	bne.n	800d51a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7ff ff8f 	bl	800d424 <HAL_RTC_WaitForSynchro>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d01e      	beq.n	800d54a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2203      	movs	r2, #3
 800d510:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d514:	2303      	movs	r3, #3
 800d516:	73fb      	strb	r3, [r7, #15]
 800d518:	e017      	b.n	800d54a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d51a:	4b0e      	ldr	r3, [pc, #56]	; (800d554 <RTC_ExitInitMode+0x78>)
 800d51c:	699b      	ldr	r3, [r3, #24]
 800d51e:	4a0d      	ldr	r2, [pc, #52]	; (800d554 <RTC_ExitInitMode+0x78>)
 800d520:	f023 0320 	bic.w	r3, r3, #32
 800d524:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f7ff ff7c 	bl	800d424 <HAL_RTC_WaitForSynchro>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d005      	beq.n	800d53e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2203      	movs	r2, #3
 800d536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d53a:	2303      	movs	r3, #3
 800d53c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d53e:	4b05      	ldr	r3, [pc, #20]	; (800d554 <RTC_ExitInitMode+0x78>)
 800d540:	699b      	ldr	r3, [r3, #24]
 800d542:	4a04      	ldr	r2, [pc, #16]	; (800d554 <RTC_ExitInitMode+0x78>)
 800d544:	f043 0320 	orr.w	r3, r3, #32
 800d548:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	58004000 	.word	0x58004000

0800d558 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	4603      	mov	r3, r0
 800d560:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d562:	2300      	movs	r3, #0
 800d564:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d566:	79fb      	ldrb	r3, [r7, #7]
 800d568:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d56a:	e005      	b.n	800d578 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	3301      	adds	r3, #1
 800d570:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d572:	7afb      	ldrb	r3, [r7, #11]
 800d574:	3b0a      	subs	r3, #10
 800d576:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d578:	7afb      	ldrb	r3, [r7, #11]
 800d57a:	2b09      	cmp	r3, #9
 800d57c:	d8f6      	bhi.n	800d56c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	b2db      	uxtb	r3, r3
 800d582:	011b      	lsls	r3, r3, #4
 800d584:	b2da      	uxtb	r2, r3
 800d586:	7afb      	ldrb	r3, [r7, #11]
 800d588:	4313      	orrs	r3, r2
 800d58a:	b2db      	uxtb	r3, r3
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3714      	adds	r7, #20
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d598:	b480      	push	{r7}
 800d59a:	b085      	sub	sp, #20
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	4603      	mov	r3, r0
 800d5a0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d5a2:	79fb      	ldrb	r3, [r7, #7]
 800d5a4:	091b      	lsrs	r3, r3, #4
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	0092      	lsls	r2, r2, #2
 800d5ac:	4413      	add	r3, r2
 800d5ae:	005b      	lsls	r3, r3, #1
 800d5b0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d5b2:	79fb      	ldrb	r3, [r7, #7]
 800d5b4:	f003 030f 	and.w	r3, r3, #15
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	7bfb      	ldrb	r3, [r7, #15]
 800d5bc:	4413      	add	r3, r2
 800d5be:	b2db      	uxtb	r3, r3
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
 800d5d8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	2b02      	cmp	r3, #2
 800d5de:	d904      	bls.n	800d5ea <HAL_SAI_InitProtocol+0x1e>
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	3b03      	subs	r3, #3
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d812      	bhi.n	800d60e <HAL_SAI_InitProtocol+0x42>
 800d5e8:	e008      	b.n	800d5fc <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	68b9      	ldr	r1, [r7, #8]
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f000 fd3b 	bl	800e06c <SAI_InitI2S>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	75fb      	strb	r3, [r7, #23]
      break;
 800d5fa:	e00b      	b.n	800d614 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	68b9      	ldr	r1, [r7, #8]
 800d602:	68f8      	ldr	r0, [r7, #12]
 800d604:	f000 fde4 	bl	800e1d0 <SAI_InitPCM>
 800d608:	4603      	mov	r3, r0
 800d60a:	75fb      	strb	r3, [r7, #23]
      break;
 800d60c:	e002      	b.n	800d614 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800d60e:	2301      	movs	r3, #1
 800d610:	75fb      	strb	r3, [r7, #23]
      break;
 800d612:	bf00      	nop
  }

  if (status == HAL_OK)
 800d614:	7dfb      	ldrb	r3, [r7, #23]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d104      	bne.n	800d624 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f000 f808 	bl	800d630 <HAL_SAI_Init>
 800d620:	4603      	mov	r3, r0
 800d622:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d624:	7dfb      	ldrb	r3, [r7, #23]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3718      	adds	r7, #24
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
	...

0800d630 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b08a      	sub	sp, #40	; 0x28
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d101      	bne.n	800d642 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800d63e:	2301      	movs	r3, #1
 800d640:	e1ec      	b.n	800da1c <HAL_SAI_Init+0x3ec>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d10e      	bne.n	800d66a <HAL_SAI_Init+0x3a>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
    {
      return HAL_ERROR;
    }
#else
    if ((hsai->Instance != SAI1_Block_A) ||
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a91      	ldr	r2, [pc, #580]	; (800d898 <HAL_SAI_Init+0x268>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d107      	bne.n	800d666 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d103      	bne.n	800d666 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d662:	2b00      	cmp	r3, #0
 800d664:	d001      	beq.n	800d66a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	e1d8      	b.n	800da1c <HAL_SAI_Init+0x3ec>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4a8a      	ldr	r2, [pc, #552]	; (800d898 <HAL_SAI_Init+0x268>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d004      	beq.n	800d67e <HAL_SAI_Init+0x4e>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a88      	ldr	r2, [pc, #544]	; (800d89c <HAL_SAI_Init+0x26c>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d102      	bne.n	800d684 <HAL_SAI_Init+0x54>
  {
    SaiBaseAddress = SAI1;
 800d67e:	4b88      	ldr	r3, [pc, #544]	; (800d8a0 <HAL_SAI_Init+0x270>)
 800d680:	61bb      	str	r3, [r7, #24]
 800d682:	e00e      	b.n	800d6a2 <HAL_SAI_Init+0x72>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a86      	ldr	r2, [pc, #536]	; (800d8a4 <HAL_SAI_Init+0x274>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d004      	beq.n	800d698 <HAL_SAI_Init+0x68>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a85      	ldr	r2, [pc, #532]	; (800d8a8 <HAL_SAI_Init+0x278>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d102      	bne.n	800d69e <HAL_SAI_Init+0x6e>
  {
    SaiBaseAddress = SAI2;
 800d698:	4b84      	ldr	r3, [pc, #528]	; (800d8ac <HAL_SAI_Init+0x27c>)
 800d69a:	61bb      	str	r3, [r7, #24]
 800d69c:	e001      	b.n	800d6a2 <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e1bc      	b.n	800da1c <HAL_SAI_Init+0x3ec>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d106      	bne.n	800d6bc <HAL_SAI_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7f5 f9bc 	bl	8002a34 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fe41 	bl	800e344 <SAI_Disable>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d001      	beq.n	800d6cc <HAL_SAI_Init+0x9c>
  {
    return HAL_ERROR;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e1a7      	b.n	800da1c <HAL_SAI_Init+0x3ec>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2202      	movs	r2, #2
 800d6d0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d00c      	beq.n	800d6f6 <HAL_SAI_Init+0xc6>
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	d80d      	bhi.n	800d6fc <HAL_SAI_Init+0xcc>
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <HAL_SAI_Init+0xba>
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d003      	beq.n	800d6f0 <HAL_SAI_Init+0xc0>
 800d6e8:	e008      	b.n	800d6fc <HAL_SAI_Init+0xcc>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d6ee:	e008      	b.n	800d702 <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d6f0:	2310      	movs	r3, #16
 800d6f2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d6f4:	e005      	b.n	800d702 <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d6f6:	2320      	movs	r3, #32
 800d6f8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d6fa:	e002      	b.n	800d702 <HAL_SAI_Init+0xd2>
    default:
      tmpregisterGCR = 0;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d700:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	2b03      	cmp	r3, #3
 800d708:	d81d      	bhi.n	800d746 <HAL_SAI_Init+0x116>
 800d70a:	a201      	add	r2, pc, #4	; (adr r2, 800d710 <HAL_SAI_Init+0xe0>)
 800d70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d710:	0800d721 	.word	0x0800d721
 800d714:	0800d727 	.word	0x0800d727
 800d718:	0800d72f 	.word	0x0800d72f
 800d71c:	0800d737 	.word	0x0800d737
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800d720:	2300      	movs	r3, #0
 800d722:	61fb      	str	r3, [r7, #28]
      break;
 800d724:	e012      	b.n	800d74c <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d72a:	61fb      	str	r3, [r7, #28]
      break;
 800d72c:	e00e      	b.n	800d74c <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d72e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d732:	61fb      	str	r3, [r7, #28]
      break;
 800d734:	e00a      	b.n	800d74c <HAL_SAI_Init+0x11c>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d73a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73e:	f043 0301 	orr.w	r3, r3, #1
 800d742:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d744:	e002      	b.n	800d74c <HAL_SAI_Init+0x11c>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
      break;
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800d746:	2300      	movs	r3, #0
 800d748:	61fb      	str	r3, [r7, #28]
      break;
 800d74a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d750:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a1b      	ldr	r3, [r3, #32]
 800d756:	2b00      	cmp	r3, #0
 800d758:	f000 8084 	beq.w	800d864 <HAL_SAI_Init+0x234>
  {
    uint32_t freq = 0;
 800d75c:	2300      	movs	r3, #0
 800d75e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a4c      	ldr	r2, [pc, #304]	; (800d898 <HAL_SAI_Init+0x268>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d004      	beq.n	800d774 <HAL_SAI_Init+0x144>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a4b      	ldr	r2, [pc, #300]	; (800d89c <HAL_SAI_Init+0x26c>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d104      	bne.n	800d77e <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d774:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d778:	f7fe fa6a 	bl	800bc50 <HAL_RCCEx_GetPeriphCLKFreq>
 800d77c:	6178      	str	r0, [r7, #20]
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }
#else
    if (hsai->Instance == SAI2_Block_A)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a48      	ldr	r2, [pc, #288]	; (800d8a4 <HAL_SAI_Init+0x274>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d104      	bne.n	800d792 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2A);
 800d788:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d78c:	f7fe fa60 	bl	800bc50 <HAL_RCCEx_GetPeriphCLKFreq>
 800d790:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI2_Block_B)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a44      	ldr	r2, [pc, #272]	; (800d8a8 <HAL_SAI_Init+0x278>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d104      	bne.n	800d7a6 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2B);
 800d79c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800d7a0:	f7fe fa56 	bl	800bc50 <HAL_RCCEx_GetPeriphCLKFreq>
 800d7a4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	699b      	ldr	r3, [r3, #24]
 800d7aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d7ae:	d120      	bne.n	800d7f2 <HAL_SAI_Init+0x1c2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7b4:	2b04      	cmp	r3, #4
 800d7b6:	d102      	bne.n	800d7be <HAL_SAI_Init+0x18e>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800d7b8:	2340      	movs	r3, #64	; 0x40
 800d7ba:	60fb      	str	r3, [r7, #12]
 800d7bc:	e00a      	b.n	800d7d4 <HAL_SAI_Init+0x1a4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7c2:	2b08      	cmp	r3, #8
 800d7c4:	d103      	bne.n	800d7ce <HAL_SAI_Init+0x19e>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800d7c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d7ca:	60fb      	str	r3, [r7, #12]
 800d7cc:	e002      	b.n	800d7d4 <HAL_SAI_Init+0x1a4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7d2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800d7d4:	697a      	ldr	r2, [r7, #20]
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4413      	add	r3, r2
 800d7dc:	005b      	lsls	r3, r3, #1
 800d7de:	4619      	mov	r1, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6a1b      	ldr	r3, [r3, #32]
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	fb02 f303 	mul.w	r3, r2, r3
 800d7ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800d7ee:	613b      	str	r3, [r7, #16]
 800d7f0:	e017      	b.n	800d822 <HAL_SAI_Init+0x1f2>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d7fa:	d101      	bne.n	800d800 <HAL_SAI_Init+0x1d0>
 800d7fc:	2302      	movs	r3, #2
 800d7fe:	e000      	b.n	800d802 <HAL_SAI_Init+0x1d2>
 800d800:	2301      	movs	r3, #1
 800d802:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d804:	697a      	ldr	r2, [r7, #20]
 800d806:	4613      	mov	r3, r2
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	4413      	add	r3, r2
 800d80c:	005b      	lsls	r3, r3, #1
 800d80e:	4619      	mov	r1, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6a1b      	ldr	r3, [r3, #32]
 800d814:	68ba      	ldr	r2, [r7, #8]
 800d816:	fb02 f303 	mul.w	r3, r2, r3
 800d81a:	021b      	lsls	r3, r3, #8
 800d81c:	fbb1 f3f3 	udiv	r3, r1, r3
 800d820:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	4a22      	ldr	r2, [pc, #136]	; (800d8b0 <HAL_SAI_Init+0x280>)
 800d826:	fba2 2303 	umull	r2, r3, r2, r3
 800d82a:	08da      	lsrs	r2, r3, #3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800d830:	6939      	ldr	r1, [r7, #16]
 800d832:	4b1f      	ldr	r3, [pc, #124]	; (800d8b0 <HAL_SAI_Init+0x280>)
 800d834:	fba3 2301 	umull	r2, r3, r3, r1
 800d838:	08da      	lsrs	r2, r3, #3
 800d83a:	4613      	mov	r3, r2
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4413      	add	r3, r2
 800d840:	005b      	lsls	r3, r3, #1
 800d842:	1aca      	subs	r2, r1, r3
 800d844:	2a08      	cmp	r2, #8
 800d846:	d904      	bls.n	800d852 <HAL_SAI_Init+0x222>
    {
      hsai->Init.Mckdiv += 1U;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84c:	1c5a      	adds	r2, r3, #1
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d856:	2b04      	cmp	r3, #4
 800d858:	d104      	bne.n	800d864 <HAL_SAI_Init+0x234>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d85e:	085a      	lsrs	r2, r3, #1
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d003      	beq.n	800d874 <HAL_SAI_Init+0x244>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	2b02      	cmp	r3, #2
 800d872:	d109      	bne.n	800d888 <HAL_SAI_Init+0x258>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d101      	bne.n	800d880 <HAL_SAI_Init+0x250>
 800d87c:	2300      	movs	r3, #0
 800d87e:	e001      	b.n	800d884 <HAL_SAI_Init+0x254>
 800d880:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d884:	623b      	str	r3, [r7, #32]
 800d886:	e017      	b.n	800d8b8 <HAL_SAI_Init+0x288>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d111      	bne.n	800d8b4 <HAL_SAI_Init+0x284>
 800d890:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d894:	e00f      	b.n	800d8b6 <HAL_SAI_Init+0x286>
 800d896:	bf00      	nop
 800d898:	40015804 	.word	0x40015804
 800d89c:	40015824 	.word	0x40015824
 800d8a0:	40015800 	.word	0x40015800
 800d8a4:	40015c04 	.word	0x40015c04
 800d8a8:	40015c24 	.word	0x40015c24
 800d8ac:	40015c00 	.word	0x40015c00
 800d8b0:	cccccccd 	.word	0xcccccccd
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6819      	ldr	r1, [r3, #0]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	4b58      	ldr	r3, [pc, #352]	; (800da24 <HAL_SAI_Init+0x3f4>)
 800d8c4:	400b      	ands	r3, r1
 800d8c6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	6819      	ldr	r1, [r3, #0]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	685a      	ldr	r2, [r3, #4]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8d6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d8dc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8e2:	431a      	orrs	r2, r3
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800d8f0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	695b      	ldr	r3, [r3, #20]
 800d8f6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d8fc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d902:	051b      	lsls	r3, r3, #20
 800d904:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d90a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	430a      	orrs	r2, r1
 800d918:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	6859      	ldr	r1, [r3, #4]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	4b40      	ldr	r3, [pc, #256]	; (800da28 <HAL_SAI_Init+0x3f8>)
 800d926:	400b      	ands	r3, r1
 800d928:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6859      	ldr	r1, [r3, #4]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	69da      	ldr	r2, [r3, #28]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d938:	431a      	orrs	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d93e:	431a      	orrs	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	430a      	orrs	r2, r1
 800d946:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	6899      	ldr	r1, [r3, #8]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681a      	ldr	r2, [r3, #0]
 800d952:	4b36      	ldr	r3, [pc, #216]	; (800da2c <HAL_SAI_Init+0x3fc>)
 800d954:	400b      	ands	r3, r1
 800d956:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	6899      	ldr	r1, [r3, #8]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d962:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d968:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800d96e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800d974:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d97a:	3b01      	subs	r3, #1
 800d97c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d97e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	430a      	orrs	r2, r1
 800d986:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	68d9      	ldr	r1, [r3, #12]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d996:	400b      	ands	r3, r1
 800d998:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	68d9      	ldr	r1, [r3, #12]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9a8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9ae:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d9b0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9b6:	3b01      	subs	r3, #1
 800d9b8:	021b      	lsls	r3, r3, #8
 800d9ba:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	430a      	orrs	r2, r1
 800d9c2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
#else
  if (hsai->Instance == SAI1_Block_A)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a19      	ldr	r2, [pc, #100]	; (800da30 <HAL_SAI_Init+0x400>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d119      	bne.n	800da02 <HAL_SAI_Init+0x3d2>
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9d2:	f023 0201 	bic.w	r2, r3, #1
 800d9d6:	69bb      	ldr	r3, [r7, #24]
 800d9d8:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d10e      	bne.n	800da02 <HAL_SAI_Init+0x3d2>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d9f0:	431a      	orrs	r2, r3
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9fa:	f043 0201 	orr.w	r2, r3, #1
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2201      	movs	r2, #1
 800da0e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3728      	adds	r7, #40	; 0x28
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	f005c010 	.word	0xf005c010
 800da28:	ffff1ff0 	.word	0xffff1ff0
 800da2c:	fff88000 	.word	0xfff88000
 800da30:	40015804 	.word	0x40015804

0800da34 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da3c:	2300      	movs	r3, #0
 800da3e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800da46:	2b01      	cmp	r3, #1
 800da48:	d101      	bne.n	800da4e <HAL_SAI_Abort+0x1a>
 800da4a:	2302      	movs	r3, #2
 800da4c:	e07d      	b.n	800db4a <HAL_SAI_Abort+0x116>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2201      	movs	r2, #1
 800da52:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da64:	d14f      	bne.n	800db06 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800da74:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	2b12      	cmp	r3, #18
 800da80:	d11d      	bne.n	800dabe <HAL_SAI_Abort+0x8a>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d018      	beq.n	800dabe <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da92:	4618      	mov	r0, r3
 800da94:	f7f8 f804 	bl	8005aa0 <HAL_DMA_Abort>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00f      	beq.n	800dabe <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daa6:	2b80      	cmp	r3, #128	; 0x80
 800daa8:	d009      	beq.n	800dabe <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 800daaa:	2301      	movs	r3, #1
 800daac:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dab4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b22      	cmp	r3, #34	; 0x22
 800dac8:	d11d      	bne.n	800db06 <HAL_SAI_Abort+0xd2>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d018      	beq.n	800db06 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dada:	4618      	mov	r0, r3
 800dadc:	f7f7 ffe0 	bl	8005aa0 <HAL_DMA_Abort>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00f      	beq.n	800db06 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800daec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daee:	2b80      	cmp	r3, #128	; 0x80
 800daf0:	d009      	beq.n	800db06 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 800daf2:	2301      	movs	r3, #1
 800daf4:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dafc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2200      	movs	r2, #0
 800db0c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f04f 32ff 	mov.w	r2, #4294967295
 800db16:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f000 fc13 	bl	800e344 <SAI_Disable>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d001      	beq.n	800db28 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	685a      	ldr	r2, [r3, #4]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f042 0208 	orr.w	r2, r2, #8
 800db36:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 800db48:	7bfb      	ldrb	r3, [r7, #15]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
	...

0800db54 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b086      	sub	sp, #24
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	4613      	mov	r3, r2
 800db60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800db62:	f7f5 fa37 	bl	8002fd4 <HAL_GetTick>
 800db66:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d002      	beq.n	800db74 <HAL_SAI_Transmit_DMA+0x20>
 800db6e:	88fb      	ldrh	r3, [r7, #6]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d101      	bne.n	800db78 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800db74:	2301      	movs	r3, #1
 800db76:	e098      	b.n	800dcaa <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	2b01      	cmp	r3, #1
 800db82:	f040 8091 	bne.w	800dca8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d101      	bne.n	800db94 <HAL_SAI_Transmit_DMA+0x40>
 800db90:	2302      	movs	r3, #2
 800db92:	e08a      	b.n	800dcaa <HAL_SAI_Transmit_DMA+0x156>
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2201      	movs	r2, #1
 800db98:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	88fa      	ldrh	r2, [r7, #6]
 800dba6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	88fa      	ldrh	r2, [r7, #6]
 800dbae:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2212      	movs	r2, #18
 800dbbe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbc8:	4a3a      	ldr	r2, [pc, #232]	; (800dcb4 <HAL_SAI_Transmit_DMA+0x160>)
 800dbca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbd2:	4a39      	ldr	r2, [pc, #228]	; (800dcb8 <HAL_SAI_Transmit_DMA+0x164>)
 800dbd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbdc:	4a37      	ldr	r2, [pc, #220]	; (800dcbc <HAL_SAI_Transmit_DMA+0x168>)
 800dbde:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	331c      	adds	r3, #28
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800dc04:	f7f7 fce2 	bl	80055cc <HAL_DMA_Start_IT>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d005      	beq.n	800dc1a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800dc16:	2301      	movs	r3, #1
 800dc18:	e047      	b.n	800dcaa <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800dc1a:	2100      	movs	r1, #0
 800dc1c:	68f8      	ldr	r0, [r7, #12]
 800dc1e:	f000 fb59 	bl	800e2d4 <SAI_InterruptFlag>
 800dc22:	4601      	mov	r1, r0
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	691a      	ldr	r2, [r3, #16]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800dc40:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800dc42:	e015      	b.n	800dc70 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800dc44:	f7f5 f9c6 	bl	8002fd4 <HAL_GetTick>
 800dc48:	4602      	mov	r2, r0
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	1ad3      	subs	r3, r2, r3
 800dc4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc52:	d90d      	bls.n	800dc70 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2200      	movs	r2, #0
 800dc68:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800dc6c:	2303      	movs	r3, #3
 800dc6e:	e01c      	b.n	800dcaa <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	695b      	ldr	r3, [r3, #20]
 800dc76:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d0e2      	beq.n	800dc44 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d107      	bne.n	800dc9c <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dc9a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800dca4:	2300      	movs	r3, #0
 800dca6:	e000      	b.n	800dcaa <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800dca8:	2302      	movs	r3, #2
  }
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3718      	adds	r7, #24
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	0800e419 	.word	0x0800e419
 800dcb8:	0800e3b9 	.word	0x0800e3b9
 800dcbc:	0800e435 	.word	0x0800e435

0800dcc0 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b086      	sub	sp, #24
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	f000 81a7 	beq.w	800e024 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	695b      	ldr	r3, [r3, #20]
 800dcdc:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	691b      	ldr	r3, [r3, #16]
 800dce4:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	f003 0308 	and.w	r3, r3, #8
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00a      	beq.n	800dd0e <HAL_SAI_IRQHandler+0x4e>
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	f003 0308 	and.w	r3, r3, #8
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d005      	beq.n	800dd0e <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	4798      	blx	r3
 800dd0c:	e18a      	b.n	800e024 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	f003 0301 	and.w	r3, r3, #1
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d01e      	beq.n	800dd56 <HAL_SAI_IRQHandler+0x96>
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	f003 0301 	and.w	r3, r3, #1
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d019      	beq.n	800dd56 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2201      	movs	r2, #1
 800dd28:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	2b22      	cmp	r3, #34	; 0x22
 800dd34:	d101      	bne.n	800dd3a <HAL_SAI_IRQHandler+0x7a>
 800dd36:	2301      	movs	r3, #1
 800dd38:	e000      	b.n	800dd3c <HAL_SAI_IRQHandler+0x7c>
 800dd3a:	2302      	movs	r3, #2
 800dd3c:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	431a      	orrs	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 f982 	bl	800e058 <HAL_SAI_ErrorCallback>
 800dd54:	e166      	b.n	800e024 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	f003 0302 	and.w	r3, r3, #2
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d013      	beq.n	800dd88 <HAL_SAI_IRQHandler+0xc8>
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	f003 0302 	and.w	r3, r3, #2
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00e      	beq.n	800dd88 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2202      	movs	r2, #2
 800dd70:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f000 8153 	beq.w	800e024 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd84:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800dd86:	e14d      	b.n	800e024 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	f003 0320 	and.w	r3, r3, #32
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d05b      	beq.n	800de4a <HAL_SAI_IRQHandler+0x18a>
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	f003 0320 	and.w	r3, r3, #32
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d056      	beq.n	800de4a <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2220      	movs	r2, #32
 800dda2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ddaa:	f043 0204 	orr.w	r2, r3, #4
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d03e      	beq.n	800de3c <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d018      	beq.n	800ddfa <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddce:	4a97      	ldr	r2, [pc, #604]	; (800e02c <HAL_SAI_IRQHandler+0x36c>)
 800ddd0:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7f8 f97f 	bl	80060dc <HAL_DMA_Abort_IT>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00a      	beq.n	800ddfa <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ddea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f000 f92f 	bl	800e058 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de00:	2b00      	cmp	r3, #0
 800de02:	f000 810a 	beq.w	800e01a <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de0c:	4a87      	ldr	r2, [pc, #540]	; (800e02c <HAL_SAI_IRQHandler+0x36c>)
 800de0e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de16:	4618      	mov	r0, r3
 800de18:	f7f8 f960 	bl	80060dc <HAL_DMA_Abort_IT>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	f000 80fb 	beq.w	800e01a <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800de2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 f90f 	bl	800e058 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800de3a:	e0ee      	b.n	800e01a <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f7ff fdf9 	bl	800da34 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 f908 	bl	800e058 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800de48:	e0e7      	b.n	800e01a <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de50:	2b00      	cmp	r3, #0
 800de52:	d05b      	beq.n	800df0c <HAL_SAI_IRQHandler+0x24c>
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d056      	beq.n	800df0c <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2240      	movs	r2, #64	; 0x40
 800de64:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800de6c:	f043 0208 	orr.w	r2, r3, #8
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d03e      	beq.n	800defe <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de86:	2b00      	cmp	r3, #0
 800de88:	d018      	beq.n	800debc <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de90:	4a66      	ldr	r2, [pc, #408]	; (800e02c <HAL_SAI_IRQHandler+0x36c>)
 800de92:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7f8 f91e 	bl	80060dc <HAL_DMA_Abort_IT>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00a      	beq.n	800debc <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800deac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 f8ce 	bl	800e058 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	f000 80ab 	beq.w	800e01e <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dece:	4a57      	ldr	r2, [pc, #348]	; (800e02c <HAL_SAI_IRQHandler+0x36c>)
 800ded0:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ded8:	4618      	mov	r0, r3
 800deda:	f7f8 f8ff 	bl	80060dc <HAL_DMA_Abort_IT>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	f000 809c 	beq.w	800e01e <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800deec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f000 f8ae 	bl	800e058 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800defc:	e08f      	b.n	800e01e <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f7ff fd98 	bl	800da34 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 f8a7 	bl	800e058 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800df0a:	e088      	b.n	800e01e <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	f003 0304 	and.w	r3, r3, #4
 800df12:	2b00      	cmp	r3, #0
 800df14:	d067      	beq.n	800dfe6 <HAL_SAI_IRQHandler+0x326>
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	f003 0304 	and.w	r3, r3, #4
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d062      	beq.n	800dfe6 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2204      	movs	r2, #4
 800df26:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df2e:	f043 0220 	orr.w	r2, r3, #32
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d03c      	beq.n	800dfbc <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d018      	beq.n	800df7e <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df52:	4a36      	ldr	r2, [pc, #216]	; (800e02c <HAL_SAI_IRQHandler+0x36c>)
 800df54:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7f8 f8bd 	bl	80060dc <HAL_DMA_Abort_IT>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d00a      	beq.n	800df7e <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df6e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f86d 	bl	800e058 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df84:	2b00      	cmp	r3, #0
 800df86:	d04c      	beq.n	800e022 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df8e:	4a27      	ldr	r2, [pc, #156]	; (800e02c <HAL_SAI_IRQHandler+0x36c>)
 800df90:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df98:	4618      	mov	r0, r3
 800df9a:	f7f8 f89f 	bl	80060dc <HAL_DMA_Abort_IT>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d03e      	beq.n	800e022 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dfaa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 f84f 	bl	800e058 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800dfba:	e032      	b.n	800e022 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfcc:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 f83a 	bl	800e058 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800dfe4:	e01d      	b.n	800e022 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	f003 0310 	and.w	r3, r3, #16
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d019      	beq.n	800e024 <HAL_SAI_IRQHandler+0x364>
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	f003 0310 	and.w	r3, r3, #16
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d014      	beq.n	800e024 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2210      	movs	r2, #16
 800e000:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e008:	f043 0210 	orr.w	r2, r3, #16
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 f820 	bl	800e058 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800e018:	e004      	b.n	800e024 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e01a:	bf00      	nop
 800e01c:	e002      	b.n	800e024 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e01e:	bf00      	nop
 800e020:	e000      	b.n	800e024 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800e022:	bf00      	nop
}
 800e024:	bf00      	nop
 800e026:	3718      	adds	r7, #24
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}
 800e02c:	0800e493 	.word	0x0800e493

0800e030 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800e038:	bf00      	nop
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e044:	b480      	push	{r7}
 800e046:	b083      	sub	sp, #12
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e04c:	bf00      	nop
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e060:	bf00      	nop
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b087      	sub	sp, #28
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	60b9      	str	r1, [r7, #8]
 800e076:	607a      	str	r2, [r7, #4]
 800e078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e07a:	2300      	movs	r3, #0
 800e07c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2200      	movs	r2, #0
 800e088:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <SAI_InitI2S+0x2e>
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	2b02      	cmp	r3, #2
 800e098:	d103      	bne.n	800e0a2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2200      	movs	r2, #0
 800e09e:	651a      	str	r2, [r3, #80]	; 0x50
 800e0a0:	e002      	b.n	800e0a8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e0ae:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0b6:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	683a      	ldr	r2, [r7, #0]
 800e0c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	f003 0301 	and.w	r3, r3, #1
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e077      	b.n	800e1c2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d107      	bne.n	800e0e8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800e0e4:	665a      	str	r2, [r3, #100]	; 0x64
 800e0e6:	e006      	b.n	800e0f6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e0ee:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	665a      	str	r2, [r3, #100]	; 0x64
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2b03      	cmp	r3, #3
 800e0fa:	d84f      	bhi.n	800e19c <SAI_InitI2S+0x130>
 800e0fc:	a201      	add	r2, pc, #4	; (adr r2, 800e104 <SAI_InitI2S+0x98>)
 800e0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e102:	bf00      	nop
 800e104:	0800e115 	.word	0x0800e115
 800e108:	0800e137 	.word	0x0800e137
 800e10c:	0800e159 	.word	0x0800e159
 800e110:	0800e17b 	.word	0x0800e17b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2280      	movs	r2, #128	; 0x80
 800e118:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	085b      	lsrs	r3, r3, #1
 800e11e:	015a      	lsls	r2, r3, #5
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	085b      	lsrs	r3, r3, #1
 800e128:	011a      	lsls	r2, r3, #4
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2240      	movs	r2, #64	; 0x40
 800e132:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e134:	e035      	b.n	800e1a2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2280      	movs	r2, #128	; 0x80
 800e13a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	085b      	lsrs	r3, r3, #1
 800e140:	019a      	lsls	r2, r3, #6
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	085b      	lsrs	r3, r3, #1
 800e14a:	015a      	lsls	r2, r3, #5
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2280      	movs	r2, #128	; 0x80
 800e154:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e156:	e024      	b.n	800e1a2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	22c0      	movs	r2, #192	; 0xc0
 800e15c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	085b      	lsrs	r3, r3, #1
 800e162:	019a      	lsls	r2, r3, #6
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	085b      	lsrs	r3, r3, #1
 800e16c:	015a      	lsls	r2, r3, #5
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2280      	movs	r2, #128	; 0x80
 800e176:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e178:	e013      	b.n	800e1a2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	22e0      	movs	r2, #224	; 0xe0
 800e17e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	085b      	lsrs	r3, r3, #1
 800e184:	019a      	lsls	r2, r3, #6
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	085b      	lsrs	r3, r3, #1
 800e18e:	015a      	lsls	r2, r3, #5
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2280      	movs	r2, #128	; 0x80
 800e198:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e19a:	e002      	b.n	800e1a2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e19c:	2301      	movs	r3, #1
 800e19e:	75fb      	strb	r3, [r7, #23]
      break;
 800e1a0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	d10b      	bne.n	800e1c0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d102      	bne.n	800e1b4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2210      	movs	r2, #16
 800e1b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b02      	cmp	r3, #2
 800e1b8:	d102      	bne.n	800e1c0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2208      	movs	r2, #8
 800e1be:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800e1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	371c      	adds	r7, #28
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop

0800e1d0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b087      	sub	sp, #28
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
 800e1dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d003      	beq.n	800e1fe <SAI_InitPCM+0x2e>
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	2b02      	cmp	r3, #2
 800e1fc:	d103      	bne.n	800e206 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2201      	movs	r2, #1
 800e202:	651a      	str	r2, [r3, #80]	; 0x50
 800e204:	e002      	b.n	800e20c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2200      	movs	r2, #0
 800e210:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e218:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800e220:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2200      	movs	r2, #0
 800e226:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	683a      	ldr	r2, [r7, #0]
 800e22c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e234:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	2b04      	cmp	r3, #4
 800e23a:	d103      	bne.n	800e244 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2201      	movs	r2, #1
 800e240:	659a      	str	r2, [r3, #88]	; 0x58
 800e242:	e002      	b.n	800e24a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	220d      	movs	r2, #13
 800e248:	659a      	str	r2, [r3, #88]	; 0x58
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b03      	cmp	r3, #3
 800e24e:	d837      	bhi.n	800e2c0 <SAI_InitPCM+0xf0>
 800e250:	a201      	add	r2, pc, #4	; (adr r2, 800e258 <SAI_InitPCM+0x88>)
 800e252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e256:	bf00      	nop
 800e258:	0800e269 	.word	0x0800e269
 800e25c:	0800e27f 	.word	0x0800e27f
 800e260:	0800e295 	.word	0x0800e295
 800e264:	0800e2ab 	.word	0x0800e2ab
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2280      	movs	r2, #128	; 0x80
 800e26c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	011a      	lsls	r2, r3, #4
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2240      	movs	r2, #64	; 0x40
 800e27a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e27c:	e023      	b.n	800e2c6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2280      	movs	r2, #128	; 0x80
 800e282:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	015a      	lsls	r2, r3, #5
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2280      	movs	r2, #128	; 0x80
 800e290:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e292:	e018      	b.n	800e2c6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	22c0      	movs	r2, #192	; 0xc0
 800e298:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	015a      	lsls	r2, r3, #5
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2280      	movs	r2, #128	; 0x80
 800e2a6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e2a8:	e00d      	b.n	800e2c6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	22e0      	movs	r2, #224	; 0xe0
 800e2ae:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	015a      	lsls	r2, r3, #5
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2280      	movs	r2, #128	; 0x80
 800e2bc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e2be:	e002      	b.n	800e2c6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	75fb      	strb	r3, [r7, #23]
      break;
 800e2c4:	bf00      	nop
  }

  return status;
 800e2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	371c      	adds	r7, #28
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b085      	sub	sp, #20
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e2e4:	78fb      	ldrb	r3, [r7, #3]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d103      	bne.n	800e2f2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f043 0308 	orr.w	r3, r3, #8
 800e2f0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2f6:	2b08      	cmp	r3, #8
 800e2f8:	d10b      	bne.n	800e312 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e2fe:	2b03      	cmp	r3, #3
 800e300:	d003      	beq.n	800e30a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	2b01      	cmp	r3, #1
 800e308:	d103      	bne.n	800e312 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f043 0310 	orr.w	r3, r3, #16
 800e310:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	2b03      	cmp	r3, #3
 800e318:	d003      	beq.n	800e322 <SAI_InterruptFlag+0x4e>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	2b02      	cmp	r3, #2
 800e320:	d104      	bne.n	800e32c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e328:	60fb      	str	r3, [r7, #12]
 800e32a:	e003      	b.n	800e334 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f043 0304 	orr.w	r3, r3, #4
 800e332:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e334:	68fb      	ldr	r3, [r7, #12]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3714      	adds	r7, #20
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
	...

0800e344 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e344:	b480      	push	{r7}
 800e346:	b085      	sub	sp, #20
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e34c:	4b18      	ldr	r3, [pc, #96]	; (800e3b0 <SAI_Disable+0x6c>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a18      	ldr	r2, [pc, #96]	; (800e3b4 <SAI_Disable+0x70>)
 800e352:	fba2 2303 	umull	r2, r3, r2, r3
 800e356:	0b1b      	lsrs	r3, r3, #12
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e35c:	2300      	movs	r3, #0
 800e35e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e36e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d10a      	bne.n	800e38c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e37c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800e386:	2303      	movs	r3, #3
 800e388:	72fb      	strb	r3, [r7, #11]
      break;
 800e38a:	e009      	b.n	800e3a0 <SAI_Disable+0x5c>
    }
    count--;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	3b01      	subs	r3, #1
 800e390:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d1e7      	bne.n	800e370 <SAI_Disable+0x2c>

  return status;
 800e3a0:	7afb      	ldrb	r3, [r7, #11]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3714      	adds	r7, #20
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	20000030 	.word	0x20000030
 800e3b4:	95cbec1b 	.word	0x95cbec1b

0800e3b8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3c4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	69db      	ldr	r3, [r3, #28]
 800e3ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3ce:	d01c      	beq.n	800e40a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e3e6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	f7ff ff72 	bl	800e2d4 <SAI_InterruptFlag>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	43d9      	mvns	r1, r3
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	691a      	ldr	r2, [r3, #16]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	400a      	ands	r2, r1
 800e400:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2201      	movs	r2, #1
 800e406:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	f7ff fe10 	bl	800e030 <HAL_SAI_TxCpltCallback>
#endif
}
 800e410:	bf00      	nop
 800e412:	3710      	adds	r7, #16
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e424:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800e426:	68f8      	ldr	r0, [r7, #12]
 800e428:	f7ff fe0c 	bl	800e044 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800e42c:	bf00      	nop
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e440:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f7f8 fff0 	bl	8007428 <HAL_DMA_GetError>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b02      	cmp	r3, #2
 800e44c:	d01d      	beq.n	800e48a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e454:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e46c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800e46e:	68f8      	ldr	r0, [r7, #12]
 800e470:	f7ff ff68 	bl	800e344 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2201      	movs	r2, #1
 800e478:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2200      	movs	r2, #0
 800e480:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f7ff fde7 	bl	800e058 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800e48a:	bf00      	nop
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b084      	sub	sp, #16
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e4ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c0:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e4c8:	2b20      	cmp	r3, #32
 800e4ca:	d00a      	beq.n	800e4e2 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800e4cc:	68f8      	ldr	r0, [r7, #12]
 800e4ce:	f7ff ff39 	bl	800e344 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	685a      	ldr	r2, [r3, #4]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f042 0208 	orr.w	r2, r2, #8
 800e4e0:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e4f2:	68f8      	ldr	r0, [r7, #12]
 800e4f4:	f7ff fdb0 	bl	800e058 <HAL_SAI_ErrorCallback>
#endif
}
 800e4f8:	bf00      	nop
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d101      	bne.n	800e512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e50e:	2301      	movs	r3, #1
 800e510:	e0f1      	b.n	800e6f6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a78      	ldr	r2, [pc, #480]	; (800e700 <HAL_SPI_Init+0x200>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d00f      	beq.n	800e542 <HAL_SPI_Init+0x42>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4a77      	ldr	r2, [pc, #476]	; (800e704 <HAL_SPI_Init+0x204>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d00a      	beq.n	800e542 <HAL_SPI_Init+0x42>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a75      	ldr	r2, [pc, #468]	; (800e708 <HAL_SPI_Init+0x208>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d005      	beq.n	800e542 <HAL_SPI_Init+0x42>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	2b0f      	cmp	r3, #15
 800e53c:	d901      	bls.n	800e542 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e53e:	2301      	movs	r3, #1
 800e540:	e0d9      	b.n	800e6f6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 fba2 	bl	800ec8c <SPI_GetPacketSize>
 800e548:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a6c      	ldr	r2, [pc, #432]	; (800e700 <HAL_SPI_Init+0x200>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d00c      	beq.n	800e56e <HAL_SPI_Init+0x6e>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	4a6a      	ldr	r2, [pc, #424]	; (800e704 <HAL_SPI_Init+0x204>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d007      	beq.n	800e56e <HAL_SPI_Init+0x6e>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	4a69      	ldr	r2, [pc, #420]	; (800e708 <HAL_SPI_Init+0x208>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d002      	beq.n	800e56e <HAL_SPI_Init+0x6e>
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2b08      	cmp	r3, #8
 800e56c:	d811      	bhi.n	800e592 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e572:	4a63      	ldr	r2, [pc, #396]	; (800e700 <HAL_SPI_Init+0x200>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d009      	beq.n	800e58c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a61      	ldr	r2, [pc, #388]	; (800e704 <HAL_SPI_Init+0x204>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d004      	beq.n	800e58c <HAL_SPI_Init+0x8c>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4a60      	ldr	r2, [pc, #384]	; (800e708 <HAL_SPI_Init+0x208>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d104      	bne.n	800e596 <HAL_SPI_Init+0x96>
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2b10      	cmp	r3, #16
 800e590:	d901      	bls.n	800e596 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	e0af      	b.n	800e6f6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d106      	bne.n	800e5b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7f4 f9dc 	bl	8002968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2202      	movs	r2, #2
 800e5b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f022 0201 	bic.w	r2, r2, #1
 800e5c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	689b      	ldr	r3, [r3, #8]
 800e5ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e5d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	699b      	ldr	r3, [r3, #24]
 800e5d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e5dc:	d119      	bne.n	800e612 <HAL_SPI_Init+0x112>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5e6:	d103      	bne.n	800e5f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d008      	beq.n	800e602 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d10c      	bne.n	800e612 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e5fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e600:	d107      	bne.n	800e612 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e610:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	69da      	ldr	r2, [r3, #28]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e61a:	431a      	orrs	r2, r3
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	431a      	orrs	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e624:	ea42 0103 	orr.w	r1, r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	68da      	ldr	r2, [r3, #12]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	430a      	orrs	r2, r1
 800e632:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e63c:	431a      	orrs	r2, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e642:	431a      	orrs	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	699b      	ldr	r3, [r3, #24]
 800e648:	431a      	orrs	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	691b      	ldr	r3, [r3, #16]
 800e64e:	431a      	orrs	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	695b      	ldr	r3, [r3, #20]
 800e654:	431a      	orrs	r2, r3
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6a1b      	ldr	r3, [r3, #32]
 800e65a:	431a      	orrs	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	431a      	orrs	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e666:	431a      	orrs	r2, r3
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	689b      	ldr	r3, [r3, #8]
 800e66c:	431a      	orrs	r2, r3
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e672:	ea42 0103 	orr.w	r1, r2, r3
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	430a      	orrs	r2, r1
 800e680:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d113      	bne.n	800e6b2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e69c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	689b      	ldr	r3, [r3, #8]
 800e6a4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e6b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f022 0201 	bic.w	r2, r2, #1
 800e6c0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00a      	beq.n	800e6e4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	430a      	orrs	r2, r1
 800e6e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e6f4:	2300      	movs	r3, #0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3710      	adds	r7, #16
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	40013000 	.word	0x40013000
 800e704:	40003800 	.word	0x40003800
 800e708:	40003c00 	.word	0x40003c00

0800e70c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b08a      	sub	sp, #40	; 0x28
 800e710:	af02      	add	r7, sp, #8
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	603b      	str	r3, [r7, #0]
 800e718:	4613      	mov	r3, r2
 800e71a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	3320      	adds	r3, #32
 800e722:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d101      	bne.n	800e736 <HAL_SPI_Transmit+0x2a>
 800e732:	2302      	movs	r3, #2
 800e734:	e1d7      	b.n	800eae6 <HAL_SPI_Transmit+0x3da>
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2201      	movs	r2, #1
 800e73a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e73e:	f7f4 fc49 	bl	8002fd4 <HAL_GetTick>
 800e742:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d007      	beq.n	800e760 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e750:	2302      	movs	r3, #2
 800e752:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2200      	movs	r2, #0
 800e758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e75c:	7efb      	ldrb	r3, [r7, #27]
 800e75e:	e1c2      	b.n	800eae6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d002      	beq.n	800e76c <HAL_SPI_Transmit+0x60>
 800e766:	88fb      	ldrh	r3, [r7, #6]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d107      	bne.n	800e77c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e76c:	2301      	movs	r3, #1
 800e76e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2200      	movs	r2, #0
 800e774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e778:	7efb      	ldrb	r3, [r7, #27]
 800e77a:	e1b4      	b.n	800eae6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2203      	movs	r2, #3
 800e780:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2200      	movs	r2, #0
 800e788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	68ba      	ldr	r2, [r7, #8]
 800e790:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	88fa      	ldrh	r2, [r7, #6]
 800e796:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	88fa      	ldrh	r2, [r7, #6]
 800e79e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e7cc:	d107      	bne.n	800e7de <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	685a      	ldr	r2, [r3, #4]
 800e7e4:	4b96      	ldr	r3, [pc, #600]	; (800ea40 <HAL_SPI_Transmit+0x334>)
 800e7e6:	4013      	ands	r3, r2
 800e7e8:	88f9      	ldrh	r1, [r7, #6]
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	6812      	ldr	r2, [r2, #0]
 800e7ee:	430b      	orrs	r3, r1
 800e7f0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f042 0201 	orr.w	r2, r2, #1
 800e800:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e80a:	d107      	bne.n	800e81c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e81a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	2b0f      	cmp	r3, #15
 800e822:	d947      	bls.n	800e8b4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e824:	e03f      	b.n	800e8a6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	695b      	ldr	r3, [r3, #20]
 800e82c:	f003 0302 	and.w	r3, r3, #2
 800e830:	2b02      	cmp	r3, #2
 800e832:	d114      	bne.n	800e85e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	6812      	ldr	r2, [r2, #0]
 800e83e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e844:	1d1a      	adds	r2, r3, #4
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e850:	b29b      	uxth	r3, r3
 800e852:	3b01      	subs	r3, #1
 800e854:	b29a      	uxth	r2, r3
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e85c:	e023      	b.n	800e8a6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e85e:	f7f4 fbb9 	bl	8002fd4 <HAL_GetTick>
 800e862:	4602      	mov	r2, r0
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	1ad3      	subs	r3, r2, r3
 800e868:	683a      	ldr	r2, [r7, #0]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d803      	bhi.n	800e876 <HAL_SPI_Transmit+0x16a>
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e874:	d102      	bne.n	800e87c <HAL_SPI_Transmit+0x170>
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d114      	bne.n	800e8a6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e87c:	68f8      	ldr	r0, [r7, #12]
 800e87e:	f000 f937 	bl	800eaf0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2200      	movs	r2, #0
 800e886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e890:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2201      	movs	r2, #1
 800e89e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e8a2:	2303      	movs	r3, #3
 800e8a4:	e11f      	b.n	800eae6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1b9      	bne.n	800e826 <HAL_SPI_Transmit+0x11a>
 800e8b2:	e0f2      	b.n	800ea9a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	2b07      	cmp	r3, #7
 800e8ba:	f240 80e7 	bls.w	800ea8c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e8be:	e05d      	b.n	800e97c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	695b      	ldr	r3, [r3, #20]
 800e8c6:	f003 0302 	and.w	r3, r3, #2
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	d132      	bne.n	800e934 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d918      	bls.n	800e90c <HAL_SPI_Transmit+0x200>
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d014      	beq.n	800e90c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	6812      	ldr	r2, [r2, #0]
 800e8ec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8f2:	1d1a      	adds	r2, r3, #4
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	3b02      	subs	r3, #2
 800e902:	b29a      	uxth	r2, r3
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e90a:	e037      	b.n	800e97c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e910:	881a      	ldrh	r2, [r3, #0]
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e91a:	1c9a      	adds	r2, r3, #2
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e926:	b29b      	uxth	r3, r3
 800e928:	3b01      	subs	r3, #1
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e932:	e023      	b.n	800e97c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e934:	f7f4 fb4e 	bl	8002fd4 <HAL_GetTick>
 800e938:	4602      	mov	r2, r0
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	1ad3      	subs	r3, r2, r3
 800e93e:	683a      	ldr	r2, [r7, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	d803      	bhi.n	800e94c <HAL_SPI_Transmit+0x240>
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e94a:	d102      	bne.n	800e952 <HAL_SPI_Transmit+0x246>
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d114      	bne.n	800e97c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	f000 f8cc 	bl	800eaf0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2200      	movs	r2, #0
 800e95c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e966:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2201      	movs	r2, #1
 800e974:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e978:	2303      	movs	r3, #3
 800e97a:	e0b4      	b.n	800eae6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e982:	b29b      	uxth	r3, r3
 800e984:	2b00      	cmp	r3, #0
 800e986:	d19b      	bne.n	800e8c0 <HAL_SPI_Transmit+0x1b4>
 800e988:	e087      	b.n	800ea9a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	695b      	ldr	r3, [r3, #20]
 800e990:	f003 0302 	and.w	r3, r3, #2
 800e994:	2b02      	cmp	r3, #2
 800e996:	d155      	bne.n	800ea44 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	2b03      	cmp	r3, #3
 800e9a2:	d918      	bls.n	800e9d6 <HAL_SPI_Transmit+0x2ca>
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9a8:	2b40      	cmp	r3, #64	; 0x40
 800e9aa:	d914      	bls.n	800e9d6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	6812      	ldr	r2, [r2, #0]
 800e9b6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9bc:	1d1a      	adds	r2, r3, #4
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	3b04      	subs	r3, #4
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e9d4:	e05a      	b.n	800ea8c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d917      	bls.n	800ea12 <HAL_SPI_Transmit+0x306>
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d013      	beq.n	800ea12 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9ee:	881a      	ldrh	r2, [r3, #0]
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9f8:	1c9a      	adds	r2, r3, #2
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	3b02      	subs	r3, #2
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ea10:	e03c      	b.n	800ea8c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	3320      	adds	r3, #32
 800ea1c:	7812      	ldrb	r2, [r2, #0]
 800ea1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea24:	1c5a      	adds	r2, r3, #1
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	3b01      	subs	r3, #1
 800ea34:	b29a      	uxth	r2, r3
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ea3c:	e026      	b.n	800ea8c <HAL_SPI_Transmit+0x380>
 800ea3e:	bf00      	nop
 800ea40:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea44:	f7f4 fac6 	bl	8002fd4 <HAL_GetTick>
 800ea48:	4602      	mov	r2, r0
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	683a      	ldr	r2, [r7, #0]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d803      	bhi.n	800ea5c <HAL_SPI_Transmit+0x350>
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea5a:	d102      	bne.n	800ea62 <HAL_SPI_Transmit+0x356>
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d114      	bne.n	800ea8c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	f000 f844 	bl	800eaf0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2201      	movs	r2, #1
 800ea84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ea88:	2303      	movs	r3, #3
 800ea8a:	e02c      	b.n	800eae6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	f47f af78 	bne.w	800e98a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	2108      	movs	r1, #8
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	f000 f8c3 	bl	800ec30 <SPI_WaitOnFlagUntilTimeout>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d007      	beq.n	800eac0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eab6:	f043 0220 	orr.w	r2, r3, #32
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eac0:	68f8      	ldr	r0, [r7, #12]
 800eac2:	f000 f815 	bl	800eaf0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2201      	movs	r2, #1
 800ead2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d001      	beq.n	800eae4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800eae0:	2301      	movs	r3, #1
 800eae2:	e000      	b.n	800eae6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800eae4:	7efb      	ldrb	r3, [r7, #27]
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3720      	adds	r7, #32
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop

0800eaf0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b085      	sub	sp, #20
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	695b      	ldr	r3, [r3, #20]
 800eafe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	699a      	ldr	r2, [r3, #24]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f042 0208 	orr.w	r2, r2, #8
 800eb0e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	699a      	ldr	r2, [r3, #24]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f042 0210 	orr.w	r2, r2, #16
 800eb1e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f022 0201 	bic.w	r2, r2, #1
 800eb2e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	6919      	ldr	r1, [r3, #16]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	4b3c      	ldr	r3, [pc, #240]	; (800ec2c <SPI_CloseTransfer+0x13c>)
 800eb3c:	400b      	ands	r3, r1
 800eb3e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	689a      	ldr	r2, [r3, #8]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800eb4e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	2b04      	cmp	r3, #4
 800eb5a:	d014      	beq.n	800eb86 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f003 0320 	and.w	r3, r3, #32
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d00f      	beq.n	800eb86 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	699a      	ldr	r2, [r3, #24]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f042 0220 	orr.w	r2, r2, #32
 800eb84:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	2b03      	cmp	r3, #3
 800eb90:	d014      	beq.n	800ebbc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00f      	beq.n	800ebbc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eba2:	f043 0204 	orr.w	r2, r3, #4
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	699a      	ldr	r2, [r3, #24]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ebba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00f      	beq.n	800ebe6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebcc:	f043 0201 	orr.w	r2, r3, #1
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	699a      	ldr	r2, [r3, #24]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ebe4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d00f      	beq.n	800ec10 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebf6:	f043 0208 	orr.w	r2, r3, #8
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	699a      	ldr	r2, [r3, #24]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ec0e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ec20:	bf00      	nop
 800ec22:	3714      	adds	r7, #20
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr
 800ec2c:	fffffc90 	.word	0xfffffc90

0800ec30 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	603b      	str	r3, [r7, #0]
 800ec3c:	4613      	mov	r3, r2
 800ec3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ec40:	e010      	b.n	800ec64 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec42:	f7f4 f9c7 	bl	8002fd4 <HAL_GetTick>
 800ec46:	4602      	mov	r2, r0
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	69ba      	ldr	r2, [r7, #24]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d803      	bhi.n	800ec5a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ec52:	69bb      	ldr	r3, [r7, #24]
 800ec54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec58:	d102      	bne.n	800ec60 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d101      	bne.n	800ec64 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ec60:	2303      	movs	r3, #3
 800ec62:	e00f      	b.n	800ec84 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	695a      	ldr	r2, [r3, #20]
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	4013      	ands	r3, r2
 800ec6e:	68ba      	ldr	r2, [r7, #8]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	bf0c      	ite	eq
 800ec74:	2301      	moveq	r3, #1
 800ec76:	2300      	movne	r3, #0
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	79fb      	ldrb	r3, [r7, #7]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d0df      	beq.n	800ec42 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ec82:	2300      	movs	r3, #0
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3710      	adds	r7, #16
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b085      	sub	sp, #20
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec98:	095b      	lsrs	r3, r3, #5
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	3301      	adds	r3, #1
 800eca4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	3307      	adds	r3, #7
 800ecaa:	08db      	lsrs	r3, r3, #3
 800ecac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	fb02 f303 	mul.w	r3, r2, r3
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3714      	adds	r7, #20
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
	...

0800ecc4 <__errno>:
 800ecc4:	4b01      	ldr	r3, [pc, #4]	; (800eccc <__errno+0x8>)
 800ecc6:	6818      	ldr	r0, [r3, #0]
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop
 800eccc:	20000040 	.word	0x20000040

0800ecd0 <__libc_init_array>:
 800ecd0:	b570      	push	{r4, r5, r6, lr}
 800ecd2:	4d0d      	ldr	r5, [pc, #52]	; (800ed08 <__libc_init_array+0x38>)
 800ecd4:	4c0d      	ldr	r4, [pc, #52]	; (800ed0c <__libc_init_array+0x3c>)
 800ecd6:	1b64      	subs	r4, r4, r5
 800ecd8:	10a4      	asrs	r4, r4, #2
 800ecda:	2600      	movs	r6, #0
 800ecdc:	42a6      	cmp	r6, r4
 800ecde:	d109      	bne.n	800ecf4 <__libc_init_array+0x24>
 800ece0:	4d0b      	ldr	r5, [pc, #44]	; (800ed10 <__libc_init_array+0x40>)
 800ece2:	4c0c      	ldr	r4, [pc, #48]	; (800ed14 <__libc_init_array+0x44>)
 800ece4:	f001 fa22 	bl	801012c <_init>
 800ece8:	1b64      	subs	r4, r4, r5
 800ecea:	10a4      	asrs	r4, r4, #2
 800ecec:	2600      	movs	r6, #0
 800ecee:	42a6      	cmp	r6, r4
 800ecf0:	d105      	bne.n	800ecfe <__libc_init_array+0x2e>
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}
 800ecf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecf8:	4798      	blx	r3
 800ecfa:	3601      	adds	r6, #1
 800ecfc:	e7ee      	b.n	800ecdc <__libc_init_array+0xc>
 800ecfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed02:	4798      	blx	r3
 800ed04:	3601      	adds	r6, #1
 800ed06:	e7f2      	b.n	800ecee <__libc_init_array+0x1e>
 800ed08:	08011330 	.word	0x08011330
 800ed0c:	08011330 	.word	0x08011330
 800ed10:	08011330 	.word	0x08011330
 800ed14:	08011334 	.word	0x08011334

0800ed18 <memcpy>:
 800ed18:	440a      	add	r2, r1
 800ed1a:	4291      	cmp	r1, r2
 800ed1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed20:	d100      	bne.n	800ed24 <memcpy+0xc>
 800ed22:	4770      	bx	lr
 800ed24:	b510      	push	{r4, lr}
 800ed26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed2e:	4291      	cmp	r1, r2
 800ed30:	d1f9      	bne.n	800ed26 <memcpy+0xe>
 800ed32:	bd10      	pop	{r4, pc}

0800ed34 <memset>:
 800ed34:	4402      	add	r2, r0
 800ed36:	4603      	mov	r3, r0
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d100      	bne.n	800ed3e <memset+0xa>
 800ed3c:	4770      	bx	lr
 800ed3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ed42:	e7f9      	b.n	800ed38 <memset+0x4>

0800ed44 <srand>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	4b10      	ldr	r3, [pc, #64]	; (800ed88 <srand+0x44>)
 800ed48:	681d      	ldr	r5, [r3, #0]
 800ed4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	b9b3      	cbnz	r3, 800ed7e <srand+0x3a>
 800ed50:	2018      	movs	r0, #24
 800ed52:	f000 f8b5 	bl	800eec0 <malloc>
 800ed56:	4602      	mov	r2, r0
 800ed58:	63a8      	str	r0, [r5, #56]	; 0x38
 800ed5a:	b920      	cbnz	r0, 800ed66 <srand+0x22>
 800ed5c:	4b0b      	ldr	r3, [pc, #44]	; (800ed8c <srand+0x48>)
 800ed5e:	480c      	ldr	r0, [pc, #48]	; (800ed90 <srand+0x4c>)
 800ed60:	2142      	movs	r1, #66	; 0x42
 800ed62:	f000 f87d 	bl	800ee60 <__assert_func>
 800ed66:	490b      	ldr	r1, [pc, #44]	; (800ed94 <srand+0x50>)
 800ed68:	4b0b      	ldr	r3, [pc, #44]	; (800ed98 <srand+0x54>)
 800ed6a:	e9c0 1300 	strd	r1, r3, [r0]
 800ed6e:	4b0b      	ldr	r3, [pc, #44]	; (800ed9c <srand+0x58>)
 800ed70:	6083      	str	r3, [r0, #8]
 800ed72:	230b      	movs	r3, #11
 800ed74:	8183      	strh	r3, [r0, #12]
 800ed76:	2100      	movs	r1, #0
 800ed78:	2001      	movs	r0, #1
 800ed7a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ed7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ed80:	2200      	movs	r2, #0
 800ed82:	611c      	str	r4, [r3, #16]
 800ed84:	615a      	str	r2, [r3, #20]
 800ed86:	bd38      	pop	{r3, r4, r5, pc}
 800ed88:	20000040 	.word	0x20000040
 800ed8c:	080111e8 	.word	0x080111e8
 800ed90:	080111ff 	.word	0x080111ff
 800ed94:	abcd330e 	.word	0xabcd330e
 800ed98:	e66d1234 	.word	0xe66d1234
 800ed9c:	0005deec 	.word	0x0005deec

0800eda0 <rand>:
 800eda0:	4b17      	ldr	r3, [pc, #92]	; (800ee00 <rand+0x60>)
 800eda2:	b510      	push	{r4, lr}
 800eda4:	681c      	ldr	r4, [r3, #0]
 800eda6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eda8:	b9b3      	cbnz	r3, 800edd8 <rand+0x38>
 800edaa:	2018      	movs	r0, #24
 800edac:	f000 f888 	bl	800eec0 <malloc>
 800edb0:	63a0      	str	r0, [r4, #56]	; 0x38
 800edb2:	b928      	cbnz	r0, 800edc0 <rand+0x20>
 800edb4:	4602      	mov	r2, r0
 800edb6:	4b13      	ldr	r3, [pc, #76]	; (800ee04 <rand+0x64>)
 800edb8:	4813      	ldr	r0, [pc, #76]	; (800ee08 <rand+0x68>)
 800edba:	214e      	movs	r1, #78	; 0x4e
 800edbc:	f000 f850 	bl	800ee60 <__assert_func>
 800edc0:	4a12      	ldr	r2, [pc, #72]	; (800ee0c <rand+0x6c>)
 800edc2:	4b13      	ldr	r3, [pc, #76]	; (800ee10 <rand+0x70>)
 800edc4:	e9c0 2300 	strd	r2, r3, [r0]
 800edc8:	4b12      	ldr	r3, [pc, #72]	; (800ee14 <rand+0x74>)
 800edca:	6083      	str	r3, [r0, #8]
 800edcc:	230b      	movs	r3, #11
 800edce:	8183      	strh	r3, [r0, #12]
 800edd0:	2201      	movs	r2, #1
 800edd2:	2300      	movs	r3, #0
 800edd4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800edd8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800edda:	480f      	ldr	r0, [pc, #60]	; (800ee18 <rand+0x78>)
 800eddc:	690a      	ldr	r2, [r1, #16]
 800edde:	694b      	ldr	r3, [r1, #20]
 800ede0:	4c0e      	ldr	r4, [pc, #56]	; (800ee1c <rand+0x7c>)
 800ede2:	4350      	muls	r0, r2
 800ede4:	fb04 0003 	mla	r0, r4, r3, r0
 800ede8:	fba2 3404 	umull	r3, r4, r2, r4
 800edec:	1c5a      	adds	r2, r3, #1
 800edee:	4404      	add	r4, r0
 800edf0:	f144 0000 	adc.w	r0, r4, #0
 800edf4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800edf8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800edfc:	bd10      	pop	{r4, pc}
 800edfe:	bf00      	nop
 800ee00:	20000040 	.word	0x20000040
 800ee04:	080111e8 	.word	0x080111e8
 800ee08:	080111ff 	.word	0x080111ff
 800ee0c:	abcd330e 	.word	0xabcd330e
 800ee10:	e66d1234 	.word	0xe66d1234
 800ee14:	0005deec 	.word	0x0005deec
 800ee18:	5851f42d 	.word	0x5851f42d
 800ee1c:	4c957f2d 	.word	0x4c957f2d

0800ee20 <siprintf>:
 800ee20:	b40e      	push	{r1, r2, r3}
 800ee22:	b500      	push	{lr}
 800ee24:	b09c      	sub	sp, #112	; 0x70
 800ee26:	ab1d      	add	r3, sp, #116	; 0x74
 800ee28:	9002      	str	r0, [sp, #8]
 800ee2a:	9006      	str	r0, [sp, #24]
 800ee2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee30:	4809      	ldr	r0, [pc, #36]	; (800ee58 <siprintf+0x38>)
 800ee32:	9107      	str	r1, [sp, #28]
 800ee34:	9104      	str	r1, [sp, #16]
 800ee36:	4909      	ldr	r1, [pc, #36]	; (800ee5c <siprintf+0x3c>)
 800ee38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee3c:	9105      	str	r1, [sp, #20]
 800ee3e:	6800      	ldr	r0, [r0, #0]
 800ee40:	9301      	str	r3, [sp, #4]
 800ee42:	a902      	add	r1, sp, #8
 800ee44:	f000 f94a 	bl	800f0dc <_svfiprintf_r>
 800ee48:	9b02      	ldr	r3, [sp, #8]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	701a      	strb	r2, [r3, #0]
 800ee4e:	b01c      	add	sp, #112	; 0x70
 800ee50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee54:	b003      	add	sp, #12
 800ee56:	4770      	bx	lr
 800ee58:	20000040 	.word	0x20000040
 800ee5c:	ffff0208 	.word	0xffff0208

0800ee60 <__assert_func>:
 800ee60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee62:	4614      	mov	r4, r2
 800ee64:	461a      	mov	r2, r3
 800ee66:	4b09      	ldr	r3, [pc, #36]	; (800ee8c <__assert_func+0x2c>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4605      	mov	r5, r0
 800ee6c:	68d8      	ldr	r0, [r3, #12]
 800ee6e:	b14c      	cbz	r4, 800ee84 <__assert_func+0x24>
 800ee70:	4b07      	ldr	r3, [pc, #28]	; (800ee90 <__assert_func+0x30>)
 800ee72:	9100      	str	r1, [sp, #0]
 800ee74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee78:	4906      	ldr	r1, [pc, #24]	; (800ee94 <__assert_func+0x34>)
 800ee7a:	462b      	mov	r3, r5
 800ee7c:	f000 f80e 	bl	800ee9c <fiprintf>
 800ee80:	f000 fdea 	bl	800fa58 <abort>
 800ee84:	4b04      	ldr	r3, [pc, #16]	; (800ee98 <__assert_func+0x38>)
 800ee86:	461c      	mov	r4, r3
 800ee88:	e7f3      	b.n	800ee72 <__assert_func+0x12>
 800ee8a:	bf00      	nop
 800ee8c:	20000040 	.word	0x20000040
 800ee90:	0801125e 	.word	0x0801125e
 800ee94:	0801126b 	.word	0x0801126b
 800ee98:	08011299 	.word	0x08011299

0800ee9c <fiprintf>:
 800ee9c:	b40e      	push	{r1, r2, r3}
 800ee9e:	b503      	push	{r0, r1, lr}
 800eea0:	4601      	mov	r1, r0
 800eea2:	ab03      	add	r3, sp, #12
 800eea4:	4805      	ldr	r0, [pc, #20]	; (800eebc <fiprintf+0x20>)
 800eea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeaa:	6800      	ldr	r0, [r0, #0]
 800eeac:	9301      	str	r3, [sp, #4]
 800eeae:	f000 fa3f 	bl	800f330 <_vfiprintf_r>
 800eeb2:	b002      	add	sp, #8
 800eeb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eeb8:	b003      	add	sp, #12
 800eeba:	4770      	bx	lr
 800eebc:	20000040 	.word	0x20000040

0800eec0 <malloc>:
 800eec0:	4b02      	ldr	r3, [pc, #8]	; (800eecc <malloc+0xc>)
 800eec2:	4601      	mov	r1, r0
 800eec4:	6818      	ldr	r0, [r3, #0]
 800eec6:	f000 b853 	b.w	800ef70 <_malloc_r>
 800eeca:	bf00      	nop
 800eecc:	20000040 	.word	0x20000040

0800eed0 <_free_r>:
 800eed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eed2:	2900      	cmp	r1, #0
 800eed4:	d048      	beq.n	800ef68 <_free_r+0x98>
 800eed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeda:	9001      	str	r0, [sp, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	f1a1 0404 	sub.w	r4, r1, #4
 800eee2:	bfb8      	it	lt
 800eee4:	18e4      	addlt	r4, r4, r3
 800eee6:	f000 fff7 	bl	800fed8 <__malloc_lock>
 800eeea:	4a20      	ldr	r2, [pc, #128]	; (800ef6c <_free_r+0x9c>)
 800eeec:	9801      	ldr	r0, [sp, #4]
 800eeee:	6813      	ldr	r3, [r2, #0]
 800eef0:	4615      	mov	r5, r2
 800eef2:	b933      	cbnz	r3, 800ef02 <_free_r+0x32>
 800eef4:	6063      	str	r3, [r4, #4]
 800eef6:	6014      	str	r4, [r2, #0]
 800eef8:	b003      	add	sp, #12
 800eefa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eefe:	f000 bff1 	b.w	800fee4 <__malloc_unlock>
 800ef02:	42a3      	cmp	r3, r4
 800ef04:	d90b      	bls.n	800ef1e <_free_r+0x4e>
 800ef06:	6821      	ldr	r1, [r4, #0]
 800ef08:	1862      	adds	r2, r4, r1
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	bf04      	itt	eq
 800ef0e:	681a      	ldreq	r2, [r3, #0]
 800ef10:	685b      	ldreq	r3, [r3, #4]
 800ef12:	6063      	str	r3, [r4, #4]
 800ef14:	bf04      	itt	eq
 800ef16:	1852      	addeq	r2, r2, r1
 800ef18:	6022      	streq	r2, [r4, #0]
 800ef1a:	602c      	str	r4, [r5, #0]
 800ef1c:	e7ec      	b.n	800eef8 <_free_r+0x28>
 800ef1e:	461a      	mov	r2, r3
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	b10b      	cbz	r3, 800ef28 <_free_r+0x58>
 800ef24:	42a3      	cmp	r3, r4
 800ef26:	d9fa      	bls.n	800ef1e <_free_r+0x4e>
 800ef28:	6811      	ldr	r1, [r2, #0]
 800ef2a:	1855      	adds	r5, r2, r1
 800ef2c:	42a5      	cmp	r5, r4
 800ef2e:	d10b      	bne.n	800ef48 <_free_r+0x78>
 800ef30:	6824      	ldr	r4, [r4, #0]
 800ef32:	4421      	add	r1, r4
 800ef34:	1854      	adds	r4, r2, r1
 800ef36:	42a3      	cmp	r3, r4
 800ef38:	6011      	str	r1, [r2, #0]
 800ef3a:	d1dd      	bne.n	800eef8 <_free_r+0x28>
 800ef3c:	681c      	ldr	r4, [r3, #0]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	6053      	str	r3, [r2, #4]
 800ef42:	4421      	add	r1, r4
 800ef44:	6011      	str	r1, [r2, #0]
 800ef46:	e7d7      	b.n	800eef8 <_free_r+0x28>
 800ef48:	d902      	bls.n	800ef50 <_free_r+0x80>
 800ef4a:	230c      	movs	r3, #12
 800ef4c:	6003      	str	r3, [r0, #0]
 800ef4e:	e7d3      	b.n	800eef8 <_free_r+0x28>
 800ef50:	6825      	ldr	r5, [r4, #0]
 800ef52:	1961      	adds	r1, r4, r5
 800ef54:	428b      	cmp	r3, r1
 800ef56:	bf04      	itt	eq
 800ef58:	6819      	ldreq	r1, [r3, #0]
 800ef5a:	685b      	ldreq	r3, [r3, #4]
 800ef5c:	6063      	str	r3, [r4, #4]
 800ef5e:	bf04      	itt	eq
 800ef60:	1949      	addeq	r1, r1, r5
 800ef62:	6021      	streq	r1, [r4, #0]
 800ef64:	6054      	str	r4, [r2, #4]
 800ef66:	e7c7      	b.n	800eef8 <_free_r+0x28>
 800ef68:	b003      	add	sp, #12
 800ef6a:	bd30      	pop	{r4, r5, pc}
 800ef6c:	200000ec 	.word	0x200000ec

0800ef70 <_malloc_r>:
 800ef70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef72:	1ccd      	adds	r5, r1, #3
 800ef74:	f025 0503 	bic.w	r5, r5, #3
 800ef78:	3508      	adds	r5, #8
 800ef7a:	2d0c      	cmp	r5, #12
 800ef7c:	bf38      	it	cc
 800ef7e:	250c      	movcc	r5, #12
 800ef80:	2d00      	cmp	r5, #0
 800ef82:	4606      	mov	r6, r0
 800ef84:	db01      	blt.n	800ef8a <_malloc_r+0x1a>
 800ef86:	42a9      	cmp	r1, r5
 800ef88:	d903      	bls.n	800ef92 <_malloc_r+0x22>
 800ef8a:	230c      	movs	r3, #12
 800ef8c:	6033      	str	r3, [r6, #0]
 800ef8e:	2000      	movs	r0, #0
 800ef90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef92:	f000 ffa1 	bl	800fed8 <__malloc_lock>
 800ef96:	4921      	ldr	r1, [pc, #132]	; (800f01c <_malloc_r+0xac>)
 800ef98:	680a      	ldr	r2, [r1, #0]
 800ef9a:	4614      	mov	r4, r2
 800ef9c:	b99c      	cbnz	r4, 800efc6 <_malloc_r+0x56>
 800ef9e:	4f20      	ldr	r7, [pc, #128]	; (800f020 <_malloc_r+0xb0>)
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	b923      	cbnz	r3, 800efae <_malloc_r+0x3e>
 800efa4:	4621      	mov	r1, r4
 800efa6:	4630      	mov	r0, r6
 800efa8:	f000 fc86 	bl	800f8b8 <_sbrk_r>
 800efac:	6038      	str	r0, [r7, #0]
 800efae:	4629      	mov	r1, r5
 800efb0:	4630      	mov	r0, r6
 800efb2:	f000 fc81 	bl	800f8b8 <_sbrk_r>
 800efb6:	1c43      	adds	r3, r0, #1
 800efb8:	d123      	bne.n	800f002 <_malloc_r+0x92>
 800efba:	230c      	movs	r3, #12
 800efbc:	6033      	str	r3, [r6, #0]
 800efbe:	4630      	mov	r0, r6
 800efc0:	f000 ff90 	bl	800fee4 <__malloc_unlock>
 800efc4:	e7e3      	b.n	800ef8e <_malloc_r+0x1e>
 800efc6:	6823      	ldr	r3, [r4, #0]
 800efc8:	1b5b      	subs	r3, r3, r5
 800efca:	d417      	bmi.n	800effc <_malloc_r+0x8c>
 800efcc:	2b0b      	cmp	r3, #11
 800efce:	d903      	bls.n	800efd8 <_malloc_r+0x68>
 800efd0:	6023      	str	r3, [r4, #0]
 800efd2:	441c      	add	r4, r3
 800efd4:	6025      	str	r5, [r4, #0]
 800efd6:	e004      	b.n	800efe2 <_malloc_r+0x72>
 800efd8:	6863      	ldr	r3, [r4, #4]
 800efda:	42a2      	cmp	r2, r4
 800efdc:	bf0c      	ite	eq
 800efde:	600b      	streq	r3, [r1, #0]
 800efe0:	6053      	strne	r3, [r2, #4]
 800efe2:	4630      	mov	r0, r6
 800efe4:	f000 ff7e 	bl	800fee4 <__malloc_unlock>
 800efe8:	f104 000b 	add.w	r0, r4, #11
 800efec:	1d23      	adds	r3, r4, #4
 800efee:	f020 0007 	bic.w	r0, r0, #7
 800eff2:	1ac2      	subs	r2, r0, r3
 800eff4:	d0cc      	beq.n	800ef90 <_malloc_r+0x20>
 800eff6:	1a1b      	subs	r3, r3, r0
 800eff8:	50a3      	str	r3, [r4, r2]
 800effa:	e7c9      	b.n	800ef90 <_malloc_r+0x20>
 800effc:	4622      	mov	r2, r4
 800effe:	6864      	ldr	r4, [r4, #4]
 800f000:	e7cc      	b.n	800ef9c <_malloc_r+0x2c>
 800f002:	1cc4      	adds	r4, r0, #3
 800f004:	f024 0403 	bic.w	r4, r4, #3
 800f008:	42a0      	cmp	r0, r4
 800f00a:	d0e3      	beq.n	800efd4 <_malloc_r+0x64>
 800f00c:	1a21      	subs	r1, r4, r0
 800f00e:	4630      	mov	r0, r6
 800f010:	f000 fc52 	bl	800f8b8 <_sbrk_r>
 800f014:	3001      	adds	r0, #1
 800f016:	d1dd      	bne.n	800efd4 <_malloc_r+0x64>
 800f018:	e7cf      	b.n	800efba <_malloc_r+0x4a>
 800f01a:	bf00      	nop
 800f01c:	200000ec 	.word	0x200000ec
 800f020:	200000f0 	.word	0x200000f0

0800f024 <__ssputs_r>:
 800f024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f028:	688e      	ldr	r6, [r1, #8]
 800f02a:	429e      	cmp	r6, r3
 800f02c:	4682      	mov	sl, r0
 800f02e:	460c      	mov	r4, r1
 800f030:	4690      	mov	r8, r2
 800f032:	461f      	mov	r7, r3
 800f034:	d838      	bhi.n	800f0a8 <__ssputs_r+0x84>
 800f036:	898a      	ldrh	r2, [r1, #12]
 800f038:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f03c:	d032      	beq.n	800f0a4 <__ssputs_r+0x80>
 800f03e:	6825      	ldr	r5, [r4, #0]
 800f040:	6909      	ldr	r1, [r1, #16]
 800f042:	eba5 0901 	sub.w	r9, r5, r1
 800f046:	6965      	ldr	r5, [r4, #20]
 800f048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f04c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f050:	3301      	adds	r3, #1
 800f052:	444b      	add	r3, r9
 800f054:	106d      	asrs	r5, r5, #1
 800f056:	429d      	cmp	r5, r3
 800f058:	bf38      	it	cc
 800f05a:	461d      	movcc	r5, r3
 800f05c:	0553      	lsls	r3, r2, #21
 800f05e:	d531      	bpl.n	800f0c4 <__ssputs_r+0xa0>
 800f060:	4629      	mov	r1, r5
 800f062:	f7ff ff85 	bl	800ef70 <_malloc_r>
 800f066:	4606      	mov	r6, r0
 800f068:	b950      	cbnz	r0, 800f080 <__ssputs_r+0x5c>
 800f06a:	230c      	movs	r3, #12
 800f06c:	f8ca 3000 	str.w	r3, [sl]
 800f070:	89a3      	ldrh	r3, [r4, #12]
 800f072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f076:	81a3      	strh	r3, [r4, #12]
 800f078:	f04f 30ff 	mov.w	r0, #4294967295
 800f07c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f080:	6921      	ldr	r1, [r4, #16]
 800f082:	464a      	mov	r2, r9
 800f084:	f7ff fe48 	bl	800ed18 <memcpy>
 800f088:	89a3      	ldrh	r3, [r4, #12]
 800f08a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f08e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f092:	81a3      	strh	r3, [r4, #12]
 800f094:	6126      	str	r6, [r4, #16]
 800f096:	6165      	str	r5, [r4, #20]
 800f098:	444e      	add	r6, r9
 800f09a:	eba5 0509 	sub.w	r5, r5, r9
 800f09e:	6026      	str	r6, [r4, #0]
 800f0a0:	60a5      	str	r5, [r4, #8]
 800f0a2:	463e      	mov	r6, r7
 800f0a4:	42be      	cmp	r6, r7
 800f0a6:	d900      	bls.n	800f0aa <__ssputs_r+0x86>
 800f0a8:	463e      	mov	r6, r7
 800f0aa:	4632      	mov	r2, r6
 800f0ac:	6820      	ldr	r0, [r4, #0]
 800f0ae:	4641      	mov	r1, r8
 800f0b0:	f000 fef8 	bl	800fea4 <memmove>
 800f0b4:	68a3      	ldr	r3, [r4, #8]
 800f0b6:	6822      	ldr	r2, [r4, #0]
 800f0b8:	1b9b      	subs	r3, r3, r6
 800f0ba:	4432      	add	r2, r6
 800f0bc:	60a3      	str	r3, [r4, #8]
 800f0be:	6022      	str	r2, [r4, #0]
 800f0c0:	2000      	movs	r0, #0
 800f0c2:	e7db      	b.n	800f07c <__ssputs_r+0x58>
 800f0c4:	462a      	mov	r2, r5
 800f0c6:	f000 ff13 	bl	800fef0 <_realloc_r>
 800f0ca:	4606      	mov	r6, r0
 800f0cc:	2800      	cmp	r0, #0
 800f0ce:	d1e1      	bne.n	800f094 <__ssputs_r+0x70>
 800f0d0:	6921      	ldr	r1, [r4, #16]
 800f0d2:	4650      	mov	r0, sl
 800f0d4:	f7ff fefc 	bl	800eed0 <_free_r>
 800f0d8:	e7c7      	b.n	800f06a <__ssputs_r+0x46>
	...

0800f0dc <_svfiprintf_r>:
 800f0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e0:	4698      	mov	r8, r3
 800f0e2:	898b      	ldrh	r3, [r1, #12]
 800f0e4:	061b      	lsls	r3, r3, #24
 800f0e6:	b09d      	sub	sp, #116	; 0x74
 800f0e8:	4607      	mov	r7, r0
 800f0ea:	460d      	mov	r5, r1
 800f0ec:	4614      	mov	r4, r2
 800f0ee:	d50e      	bpl.n	800f10e <_svfiprintf_r+0x32>
 800f0f0:	690b      	ldr	r3, [r1, #16]
 800f0f2:	b963      	cbnz	r3, 800f10e <_svfiprintf_r+0x32>
 800f0f4:	2140      	movs	r1, #64	; 0x40
 800f0f6:	f7ff ff3b 	bl	800ef70 <_malloc_r>
 800f0fa:	6028      	str	r0, [r5, #0]
 800f0fc:	6128      	str	r0, [r5, #16]
 800f0fe:	b920      	cbnz	r0, 800f10a <_svfiprintf_r+0x2e>
 800f100:	230c      	movs	r3, #12
 800f102:	603b      	str	r3, [r7, #0]
 800f104:	f04f 30ff 	mov.w	r0, #4294967295
 800f108:	e0d1      	b.n	800f2ae <_svfiprintf_r+0x1d2>
 800f10a:	2340      	movs	r3, #64	; 0x40
 800f10c:	616b      	str	r3, [r5, #20]
 800f10e:	2300      	movs	r3, #0
 800f110:	9309      	str	r3, [sp, #36]	; 0x24
 800f112:	2320      	movs	r3, #32
 800f114:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f118:	f8cd 800c 	str.w	r8, [sp, #12]
 800f11c:	2330      	movs	r3, #48	; 0x30
 800f11e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f2c8 <_svfiprintf_r+0x1ec>
 800f122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f126:	f04f 0901 	mov.w	r9, #1
 800f12a:	4623      	mov	r3, r4
 800f12c:	469a      	mov	sl, r3
 800f12e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f132:	b10a      	cbz	r2, 800f138 <_svfiprintf_r+0x5c>
 800f134:	2a25      	cmp	r2, #37	; 0x25
 800f136:	d1f9      	bne.n	800f12c <_svfiprintf_r+0x50>
 800f138:	ebba 0b04 	subs.w	fp, sl, r4
 800f13c:	d00b      	beq.n	800f156 <_svfiprintf_r+0x7a>
 800f13e:	465b      	mov	r3, fp
 800f140:	4622      	mov	r2, r4
 800f142:	4629      	mov	r1, r5
 800f144:	4638      	mov	r0, r7
 800f146:	f7ff ff6d 	bl	800f024 <__ssputs_r>
 800f14a:	3001      	adds	r0, #1
 800f14c:	f000 80aa 	beq.w	800f2a4 <_svfiprintf_r+0x1c8>
 800f150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f152:	445a      	add	r2, fp
 800f154:	9209      	str	r2, [sp, #36]	; 0x24
 800f156:	f89a 3000 	ldrb.w	r3, [sl]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f000 80a2 	beq.w	800f2a4 <_svfiprintf_r+0x1c8>
 800f160:	2300      	movs	r3, #0
 800f162:	f04f 32ff 	mov.w	r2, #4294967295
 800f166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f16a:	f10a 0a01 	add.w	sl, sl, #1
 800f16e:	9304      	str	r3, [sp, #16]
 800f170:	9307      	str	r3, [sp, #28]
 800f172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f176:	931a      	str	r3, [sp, #104]	; 0x68
 800f178:	4654      	mov	r4, sl
 800f17a:	2205      	movs	r2, #5
 800f17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f180:	4851      	ldr	r0, [pc, #324]	; (800f2c8 <_svfiprintf_r+0x1ec>)
 800f182:	f7f1 f8b5 	bl	80002f0 <memchr>
 800f186:	9a04      	ldr	r2, [sp, #16]
 800f188:	b9d8      	cbnz	r0, 800f1c2 <_svfiprintf_r+0xe6>
 800f18a:	06d0      	lsls	r0, r2, #27
 800f18c:	bf44      	itt	mi
 800f18e:	2320      	movmi	r3, #32
 800f190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f194:	0711      	lsls	r1, r2, #28
 800f196:	bf44      	itt	mi
 800f198:	232b      	movmi	r3, #43	; 0x2b
 800f19a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f19e:	f89a 3000 	ldrb.w	r3, [sl]
 800f1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800f1a4:	d015      	beq.n	800f1d2 <_svfiprintf_r+0xf6>
 800f1a6:	9a07      	ldr	r2, [sp, #28]
 800f1a8:	4654      	mov	r4, sl
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	f04f 0c0a 	mov.w	ip, #10
 800f1b0:	4621      	mov	r1, r4
 800f1b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1b6:	3b30      	subs	r3, #48	; 0x30
 800f1b8:	2b09      	cmp	r3, #9
 800f1ba:	d94e      	bls.n	800f25a <_svfiprintf_r+0x17e>
 800f1bc:	b1b0      	cbz	r0, 800f1ec <_svfiprintf_r+0x110>
 800f1be:	9207      	str	r2, [sp, #28]
 800f1c0:	e014      	b.n	800f1ec <_svfiprintf_r+0x110>
 800f1c2:	eba0 0308 	sub.w	r3, r0, r8
 800f1c6:	fa09 f303 	lsl.w	r3, r9, r3
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	9304      	str	r3, [sp, #16]
 800f1ce:	46a2      	mov	sl, r4
 800f1d0:	e7d2      	b.n	800f178 <_svfiprintf_r+0x9c>
 800f1d2:	9b03      	ldr	r3, [sp, #12]
 800f1d4:	1d19      	adds	r1, r3, #4
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	9103      	str	r1, [sp, #12]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	bfbb      	ittet	lt
 800f1de:	425b      	neglt	r3, r3
 800f1e0:	f042 0202 	orrlt.w	r2, r2, #2
 800f1e4:	9307      	strge	r3, [sp, #28]
 800f1e6:	9307      	strlt	r3, [sp, #28]
 800f1e8:	bfb8      	it	lt
 800f1ea:	9204      	strlt	r2, [sp, #16]
 800f1ec:	7823      	ldrb	r3, [r4, #0]
 800f1ee:	2b2e      	cmp	r3, #46	; 0x2e
 800f1f0:	d10c      	bne.n	800f20c <_svfiprintf_r+0x130>
 800f1f2:	7863      	ldrb	r3, [r4, #1]
 800f1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800f1f6:	d135      	bne.n	800f264 <_svfiprintf_r+0x188>
 800f1f8:	9b03      	ldr	r3, [sp, #12]
 800f1fa:	1d1a      	adds	r2, r3, #4
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	9203      	str	r2, [sp, #12]
 800f200:	2b00      	cmp	r3, #0
 800f202:	bfb8      	it	lt
 800f204:	f04f 33ff 	movlt.w	r3, #4294967295
 800f208:	3402      	adds	r4, #2
 800f20a:	9305      	str	r3, [sp, #20]
 800f20c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f2d8 <_svfiprintf_r+0x1fc>
 800f210:	7821      	ldrb	r1, [r4, #0]
 800f212:	2203      	movs	r2, #3
 800f214:	4650      	mov	r0, sl
 800f216:	f7f1 f86b 	bl	80002f0 <memchr>
 800f21a:	b140      	cbz	r0, 800f22e <_svfiprintf_r+0x152>
 800f21c:	2340      	movs	r3, #64	; 0x40
 800f21e:	eba0 000a 	sub.w	r0, r0, sl
 800f222:	fa03 f000 	lsl.w	r0, r3, r0
 800f226:	9b04      	ldr	r3, [sp, #16]
 800f228:	4303      	orrs	r3, r0
 800f22a:	3401      	adds	r4, #1
 800f22c:	9304      	str	r3, [sp, #16]
 800f22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f232:	4826      	ldr	r0, [pc, #152]	; (800f2cc <_svfiprintf_r+0x1f0>)
 800f234:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f238:	2206      	movs	r2, #6
 800f23a:	f7f1 f859 	bl	80002f0 <memchr>
 800f23e:	2800      	cmp	r0, #0
 800f240:	d038      	beq.n	800f2b4 <_svfiprintf_r+0x1d8>
 800f242:	4b23      	ldr	r3, [pc, #140]	; (800f2d0 <_svfiprintf_r+0x1f4>)
 800f244:	bb1b      	cbnz	r3, 800f28e <_svfiprintf_r+0x1b2>
 800f246:	9b03      	ldr	r3, [sp, #12]
 800f248:	3307      	adds	r3, #7
 800f24a:	f023 0307 	bic.w	r3, r3, #7
 800f24e:	3308      	adds	r3, #8
 800f250:	9303      	str	r3, [sp, #12]
 800f252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f254:	4433      	add	r3, r6
 800f256:	9309      	str	r3, [sp, #36]	; 0x24
 800f258:	e767      	b.n	800f12a <_svfiprintf_r+0x4e>
 800f25a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f25e:	460c      	mov	r4, r1
 800f260:	2001      	movs	r0, #1
 800f262:	e7a5      	b.n	800f1b0 <_svfiprintf_r+0xd4>
 800f264:	2300      	movs	r3, #0
 800f266:	3401      	adds	r4, #1
 800f268:	9305      	str	r3, [sp, #20]
 800f26a:	4619      	mov	r1, r3
 800f26c:	f04f 0c0a 	mov.w	ip, #10
 800f270:	4620      	mov	r0, r4
 800f272:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f276:	3a30      	subs	r2, #48	; 0x30
 800f278:	2a09      	cmp	r2, #9
 800f27a:	d903      	bls.n	800f284 <_svfiprintf_r+0x1a8>
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d0c5      	beq.n	800f20c <_svfiprintf_r+0x130>
 800f280:	9105      	str	r1, [sp, #20]
 800f282:	e7c3      	b.n	800f20c <_svfiprintf_r+0x130>
 800f284:	fb0c 2101 	mla	r1, ip, r1, r2
 800f288:	4604      	mov	r4, r0
 800f28a:	2301      	movs	r3, #1
 800f28c:	e7f0      	b.n	800f270 <_svfiprintf_r+0x194>
 800f28e:	ab03      	add	r3, sp, #12
 800f290:	9300      	str	r3, [sp, #0]
 800f292:	462a      	mov	r2, r5
 800f294:	4b0f      	ldr	r3, [pc, #60]	; (800f2d4 <_svfiprintf_r+0x1f8>)
 800f296:	a904      	add	r1, sp, #16
 800f298:	4638      	mov	r0, r7
 800f29a:	f3af 8000 	nop.w
 800f29e:	1c42      	adds	r2, r0, #1
 800f2a0:	4606      	mov	r6, r0
 800f2a2:	d1d6      	bne.n	800f252 <_svfiprintf_r+0x176>
 800f2a4:	89ab      	ldrh	r3, [r5, #12]
 800f2a6:	065b      	lsls	r3, r3, #25
 800f2a8:	f53f af2c 	bmi.w	800f104 <_svfiprintf_r+0x28>
 800f2ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2ae:	b01d      	add	sp, #116	; 0x74
 800f2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b4:	ab03      	add	r3, sp, #12
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	462a      	mov	r2, r5
 800f2ba:	4b06      	ldr	r3, [pc, #24]	; (800f2d4 <_svfiprintf_r+0x1f8>)
 800f2bc:	a904      	add	r1, sp, #16
 800f2be:	4638      	mov	r0, r7
 800f2c0:	f000 f9d4 	bl	800f66c <_printf_i>
 800f2c4:	e7eb      	b.n	800f29e <_svfiprintf_r+0x1c2>
 800f2c6:	bf00      	nop
 800f2c8:	0801129a 	.word	0x0801129a
 800f2cc:	080112a4 	.word	0x080112a4
 800f2d0:	00000000 	.word	0x00000000
 800f2d4:	0800f025 	.word	0x0800f025
 800f2d8:	080112a0 	.word	0x080112a0

0800f2dc <__sfputc_r>:
 800f2dc:	6893      	ldr	r3, [r2, #8]
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	b410      	push	{r4}
 800f2e4:	6093      	str	r3, [r2, #8]
 800f2e6:	da08      	bge.n	800f2fa <__sfputc_r+0x1e>
 800f2e8:	6994      	ldr	r4, [r2, #24]
 800f2ea:	42a3      	cmp	r3, r4
 800f2ec:	db01      	blt.n	800f2f2 <__sfputc_r+0x16>
 800f2ee:	290a      	cmp	r1, #10
 800f2f0:	d103      	bne.n	800f2fa <__sfputc_r+0x1e>
 800f2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2f6:	f000 baef 	b.w	800f8d8 <__swbuf_r>
 800f2fa:	6813      	ldr	r3, [r2, #0]
 800f2fc:	1c58      	adds	r0, r3, #1
 800f2fe:	6010      	str	r0, [r2, #0]
 800f300:	7019      	strb	r1, [r3, #0]
 800f302:	4608      	mov	r0, r1
 800f304:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f308:	4770      	bx	lr

0800f30a <__sfputs_r>:
 800f30a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f30c:	4606      	mov	r6, r0
 800f30e:	460f      	mov	r7, r1
 800f310:	4614      	mov	r4, r2
 800f312:	18d5      	adds	r5, r2, r3
 800f314:	42ac      	cmp	r4, r5
 800f316:	d101      	bne.n	800f31c <__sfputs_r+0x12>
 800f318:	2000      	movs	r0, #0
 800f31a:	e007      	b.n	800f32c <__sfputs_r+0x22>
 800f31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f320:	463a      	mov	r2, r7
 800f322:	4630      	mov	r0, r6
 800f324:	f7ff ffda 	bl	800f2dc <__sfputc_r>
 800f328:	1c43      	adds	r3, r0, #1
 800f32a:	d1f3      	bne.n	800f314 <__sfputs_r+0xa>
 800f32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f330 <_vfiprintf_r>:
 800f330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f334:	460d      	mov	r5, r1
 800f336:	b09d      	sub	sp, #116	; 0x74
 800f338:	4614      	mov	r4, r2
 800f33a:	4698      	mov	r8, r3
 800f33c:	4606      	mov	r6, r0
 800f33e:	b118      	cbz	r0, 800f348 <_vfiprintf_r+0x18>
 800f340:	6983      	ldr	r3, [r0, #24]
 800f342:	b90b      	cbnz	r3, 800f348 <_vfiprintf_r+0x18>
 800f344:	f000 fcaa 	bl	800fc9c <__sinit>
 800f348:	4b89      	ldr	r3, [pc, #548]	; (800f570 <_vfiprintf_r+0x240>)
 800f34a:	429d      	cmp	r5, r3
 800f34c:	d11b      	bne.n	800f386 <_vfiprintf_r+0x56>
 800f34e:	6875      	ldr	r5, [r6, #4]
 800f350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f352:	07d9      	lsls	r1, r3, #31
 800f354:	d405      	bmi.n	800f362 <_vfiprintf_r+0x32>
 800f356:	89ab      	ldrh	r3, [r5, #12]
 800f358:	059a      	lsls	r2, r3, #22
 800f35a:	d402      	bmi.n	800f362 <_vfiprintf_r+0x32>
 800f35c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f35e:	f000 fd3b 	bl	800fdd8 <__retarget_lock_acquire_recursive>
 800f362:	89ab      	ldrh	r3, [r5, #12]
 800f364:	071b      	lsls	r3, r3, #28
 800f366:	d501      	bpl.n	800f36c <_vfiprintf_r+0x3c>
 800f368:	692b      	ldr	r3, [r5, #16]
 800f36a:	b9eb      	cbnz	r3, 800f3a8 <_vfiprintf_r+0x78>
 800f36c:	4629      	mov	r1, r5
 800f36e:	4630      	mov	r0, r6
 800f370:	f000 fb04 	bl	800f97c <__swsetup_r>
 800f374:	b1c0      	cbz	r0, 800f3a8 <_vfiprintf_r+0x78>
 800f376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f378:	07dc      	lsls	r4, r3, #31
 800f37a:	d50e      	bpl.n	800f39a <_vfiprintf_r+0x6a>
 800f37c:	f04f 30ff 	mov.w	r0, #4294967295
 800f380:	b01d      	add	sp, #116	; 0x74
 800f382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f386:	4b7b      	ldr	r3, [pc, #492]	; (800f574 <_vfiprintf_r+0x244>)
 800f388:	429d      	cmp	r5, r3
 800f38a:	d101      	bne.n	800f390 <_vfiprintf_r+0x60>
 800f38c:	68b5      	ldr	r5, [r6, #8]
 800f38e:	e7df      	b.n	800f350 <_vfiprintf_r+0x20>
 800f390:	4b79      	ldr	r3, [pc, #484]	; (800f578 <_vfiprintf_r+0x248>)
 800f392:	429d      	cmp	r5, r3
 800f394:	bf08      	it	eq
 800f396:	68f5      	ldreq	r5, [r6, #12]
 800f398:	e7da      	b.n	800f350 <_vfiprintf_r+0x20>
 800f39a:	89ab      	ldrh	r3, [r5, #12]
 800f39c:	0598      	lsls	r0, r3, #22
 800f39e:	d4ed      	bmi.n	800f37c <_vfiprintf_r+0x4c>
 800f3a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3a2:	f000 fd1a 	bl	800fdda <__retarget_lock_release_recursive>
 800f3a6:	e7e9      	b.n	800f37c <_vfiprintf_r+0x4c>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800f3ac:	2320      	movs	r3, #32
 800f3ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3b6:	2330      	movs	r3, #48	; 0x30
 800f3b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f57c <_vfiprintf_r+0x24c>
 800f3bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3c0:	f04f 0901 	mov.w	r9, #1
 800f3c4:	4623      	mov	r3, r4
 800f3c6:	469a      	mov	sl, r3
 800f3c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3cc:	b10a      	cbz	r2, 800f3d2 <_vfiprintf_r+0xa2>
 800f3ce:	2a25      	cmp	r2, #37	; 0x25
 800f3d0:	d1f9      	bne.n	800f3c6 <_vfiprintf_r+0x96>
 800f3d2:	ebba 0b04 	subs.w	fp, sl, r4
 800f3d6:	d00b      	beq.n	800f3f0 <_vfiprintf_r+0xc0>
 800f3d8:	465b      	mov	r3, fp
 800f3da:	4622      	mov	r2, r4
 800f3dc:	4629      	mov	r1, r5
 800f3de:	4630      	mov	r0, r6
 800f3e0:	f7ff ff93 	bl	800f30a <__sfputs_r>
 800f3e4:	3001      	adds	r0, #1
 800f3e6:	f000 80aa 	beq.w	800f53e <_vfiprintf_r+0x20e>
 800f3ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3ec:	445a      	add	r2, fp
 800f3ee:	9209      	str	r2, [sp, #36]	; 0x24
 800f3f0:	f89a 3000 	ldrb.w	r3, [sl]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	f000 80a2 	beq.w	800f53e <_vfiprintf_r+0x20e>
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800f400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f404:	f10a 0a01 	add.w	sl, sl, #1
 800f408:	9304      	str	r3, [sp, #16]
 800f40a:	9307      	str	r3, [sp, #28]
 800f40c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f410:	931a      	str	r3, [sp, #104]	; 0x68
 800f412:	4654      	mov	r4, sl
 800f414:	2205      	movs	r2, #5
 800f416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f41a:	4858      	ldr	r0, [pc, #352]	; (800f57c <_vfiprintf_r+0x24c>)
 800f41c:	f7f0 ff68 	bl	80002f0 <memchr>
 800f420:	9a04      	ldr	r2, [sp, #16]
 800f422:	b9d8      	cbnz	r0, 800f45c <_vfiprintf_r+0x12c>
 800f424:	06d1      	lsls	r1, r2, #27
 800f426:	bf44      	itt	mi
 800f428:	2320      	movmi	r3, #32
 800f42a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f42e:	0713      	lsls	r3, r2, #28
 800f430:	bf44      	itt	mi
 800f432:	232b      	movmi	r3, #43	; 0x2b
 800f434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f438:	f89a 3000 	ldrb.w	r3, [sl]
 800f43c:	2b2a      	cmp	r3, #42	; 0x2a
 800f43e:	d015      	beq.n	800f46c <_vfiprintf_r+0x13c>
 800f440:	9a07      	ldr	r2, [sp, #28]
 800f442:	4654      	mov	r4, sl
 800f444:	2000      	movs	r0, #0
 800f446:	f04f 0c0a 	mov.w	ip, #10
 800f44a:	4621      	mov	r1, r4
 800f44c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f450:	3b30      	subs	r3, #48	; 0x30
 800f452:	2b09      	cmp	r3, #9
 800f454:	d94e      	bls.n	800f4f4 <_vfiprintf_r+0x1c4>
 800f456:	b1b0      	cbz	r0, 800f486 <_vfiprintf_r+0x156>
 800f458:	9207      	str	r2, [sp, #28]
 800f45a:	e014      	b.n	800f486 <_vfiprintf_r+0x156>
 800f45c:	eba0 0308 	sub.w	r3, r0, r8
 800f460:	fa09 f303 	lsl.w	r3, r9, r3
 800f464:	4313      	orrs	r3, r2
 800f466:	9304      	str	r3, [sp, #16]
 800f468:	46a2      	mov	sl, r4
 800f46a:	e7d2      	b.n	800f412 <_vfiprintf_r+0xe2>
 800f46c:	9b03      	ldr	r3, [sp, #12]
 800f46e:	1d19      	adds	r1, r3, #4
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	9103      	str	r1, [sp, #12]
 800f474:	2b00      	cmp	r3, #0
 800f476:	bfbb      	ittet	lt
 800f478:	425b      	neglt	r3, r3
 800f47a:	f042 0202 	orrlt.w	r2, r2, #2
 800f47e:	9307      	strge	r3, [sp, #28]
 800f480:	9307      	strlt	r3, [sp, #28]
 800f482:	bfb8      	it	lt
 800f484:	9204      	strlt	r2, [sp, #16]
 800f486:	7823      	ldrb	r3, [r4, #0]
 800f488:	2b2e      	cmp	r3, #46	; 0x2e
 800f48a:	d10c      	bne.n	800f4a6 <_vfiprintf_r+0x176>
 800f48c:	7863      	ldrb	r3, [r4, #1]
 800f48e:	2b2a      	cmp	r3, #42	; 0x2a
 800f490:	d135      	bne.n	800f4fe <_vfiprintf_r+0x1ce>
 800f492:	9b03      	ldr	r3, [sp, #12]
 800f494:	1d1a      	adds	r2, r3, #4
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	9203      	str	r2, [sp, #12]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	bfb8      	it	lt
 800f49e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4a2:	3402      	adds	r4, #2
 800f4a4:	9305      	str	r3, [sp, #20]
 800f4a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f58c <_vfiprintf_r+0x25c>
 800f4aa:	7821      	ldrb	r1, [r4, #0]
 800f4ac:	2203      	movs	r2, #3
 800f4ae:	4650      	mov	r0, sl
 800f4b0:	f7f0 ff1e 	bl	80002f0 <memchr>
 800f4b4:	b140      	cbz	r0, 800f4c8 <_vfiprintf_r+0x198>
 800f4b6:	2340      	movs	r3, #64	; 0x40
 800f4b8:	eba0 000a 	sub.w	r0, r0, sl
 800f4bc:	fa03 f000 	lsl.w	r0, r3, r0
 800f4c0:	9b04      	ldr	r3, [sp, #16]
 800f4c2:	4303      	orrs	r3, r0
 800f4c4:	3401      	adds	r4, #1
 800f4c6:	9304      	str	r3, [sp, #16]
 800f4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4cc:	482c      	ldr	r0, [pc, #176]	; (800f580 <_vfiprintf_r+0x250>)
 800f4ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4d2:	2206      	movs	r2, #6
 800f4d4:	f7f0 ff0c 	bl	80002f0 <memchr>
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	d03f      	beq.n	800f55c <_vfiprintf_r+0x22c>
 800f4dc:	4b29      	ldr	r3, [pc, #164]	; (800f584 <_vfiprintf_r+0x254>)
 800f4de:	bb1b      	cbnz	r3, 800f528 <_vfiprintf_r+0x1f8>
 800f4e0:	9b03      	ldr	r3, [sp, #12]
 800f4e2:	3307      	adds	r3, #7
 800f4e4:	f023 0307 	bic.w	r3, r3, #7
 800f4e8:	3308      	adds	r3, #8
 800f4ea:	9303      	str	r3, [sp, #12]
 800f4ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4ee:	443b      	add	r3, r7
 800f4f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f4f2:	e767      	b.n	800f3c4 <_vfiprintf_r+0x94>
 800f4f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4f8:	460c      	mov	r4, r1
 800f4fa:	2001      	movs	r0, #1
 800f4fc:	e7a5      	b.n	800f44a <_vfiprintf_r+0x11a>
 800f4fe:	2300      	movs	r3, #0
 800f500:	3401      	adds	r4, #1
 800f502:	9305      	str	r3, [sp, #20]
 800f504:	4619      	mov	r1, r3
 800f506:	f04f 0c0a 	mov.w	ip, #10
 800f50a:	4620      	mov	r0, r4
 800f50c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f510:	3a30      	subs	r2, #48	; 0x30
 800f512:	2a09      	cmp	r2, #9
 800f514:	d903      	bls.n	800f51e <_vfiprintf_r+0x1ee>
 800f516:	2b00      	cmp	r3, #0
 800f518:	d0c5      	beq.n	800f4a6 <_vfiprintf_r+0x176>
 800f51a:	9105      	str	r1, [sp, #20]
 800f51c:	e7c3      	b.n	800f4a6 <_vfiprintf_r+0x176>
 800f51e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f522:	4604      	mov	r4, r0
 800f524:	2301      	movs	r3, #1
 800f526:	e7f0      	b.n	800f50a <_vfiprintf_r+0x1da>
 800f528:	ab03      	add	r3, sp, #12
 800f52a:	9300      	str	r3, [sp, #0]
 800f52c:	462a      	mov	r2, r5
 800f52e:	4b16      	ldr	r3, [pc, #88]	; (800f588 <_vfiprintf_r+0x258>)
 800f530:	a904      	add	r1, sp, #16
 800f532:	4630      	mov	r0, r6
 800f534:	f3af 8000 	nop.w
 800f538:	4607      	mov	r7, r0
 800f53a:	1c78      	adds	r0, r7, #1
 800f53c:	d1d6      	bne.n	800f4ec <_vfiprintf_r+0x1bc>
 800f53e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f540:	07d9      	lsls	r1, r3, #31
 800f542:	d405      	bmi.n	800f550 <_vfiprintf_r+0x220>
 800f544:	89ab      	ldrh	r3, [r5, #12]
 800f546:	059a      	lsls	r2, r3, #22
 800f548:	d402      	bmi.n	800f550 <_vfiprintf_r+0x220>
 800f54a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f54c:	f000 fc45 	bl	800fdda <__retarget_lock_release_recursive>
 800f550:	89ab      	ldrh	r3, [r5, #12]
 800f552:	065b      	lsls	r3, r3, #25
 800f554:	f53f af12 	bmi.w	800f37c <_vfiprintf_r+0x4c>
 800f558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f55a:	e711      	b.n	800f380 <_vfiprintf_r+0x50>
 800f55c:	ab03      	add	r3, sp, #12
 800f55e:	9300      	str	r3, [sp, #0]
 800f560:	462a      	mov	r2, r5
 800f562:	4b09      	ldr	r3, [pc, #36]	; (800f588 <_vfiprintf_r+0x258>)
 800f564:	a904      	add	r1, sp, #16
 800f566:	4630      	mov	r0, r6
 800f568:	f000 f880 	bl	800f66c <_printf_i>
 800f56c:	e7e4      	b.n	800f538 <_vfiprintf_r+0x208>
 800f56e:	bf00      	nop
 800f570:	080112f0 	.word	0x080112f0
 800f574:	08011310 	.word	0x08011310
 800f578:	080112d0 	.word	0x080112d0
 800f57c:	0801129a 	.word	0x0801129a
 800f580:	080112a4 	.word	0x080112a4
 800f584:	00000000 	.word	0x00000000
 800f588:	0800f30b 	.word	0x0800f30b
 800f58c:	080112a0 	.word	0x080112a0

0800f590 <_printf_common>:
 800f590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f594:	4616      	mov	r6, r2
 800f596:	4699      	mov	r9, r3
 800f598:	688a      	ldr	r2, [r1, #8]
 800f59a:	690b      	ldr	r3, [r1, #16]
 800f59c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	bfb8      	it	lt
 800f5a4:	4613      	movlt	r3, r2
 800f5a6:	6033      	str	r3, [r6, #0]
 800f5a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5ac:	4607      	mov	r7, r0
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	b10a      	cbz	r2, 800f5b6 <_printf_common+0x26>
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	6033      	str	r3, [r6, #0]
 800f5b6:	6823      	ldr	r3, [r4, #0]
 800f5b8:	0699      	lsls	r1, r3, #26
 800f5ba:	bf42      	ittt	mi
 800f5bc:	6833      	ldrmi	r3, [r6, #0]
 800f5be:	3302      	addmi	r3, #2
 800f5c0:	6033      	strmi	r3, [r6, #0]
 800f5c2:	6825      	ldr	r5, [r4, #0]
 800f5c4:	f015 0506 	ands.w	r5, r5, #6
 800f5c8:	d106      	bne.n	800f5d8 <_printf_common+0x48>
 800f5ca:	f104 0a19 	add.w	sl, r4, #25
 800f5ce:	68e3      	ldr	r3, [r4, #12]
 800f5d0:	6832      	ldr	r2, [r6, #0]
 800f5d2:	1a9b      	subs	r3, r3, r2
 800f5d4:	42ab      	cmp	r3, r5
 800f5d6:	dc26      	bgt.n	800f626 <_printf_common+0x96>
 800f5d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5dc:	1e13      	subs	r3, r2, #0
 800f5de:	6822      	ldr	r2, [r4, #0]
 800f5e0:	bf18      	it	ne
 800f5e2:	2301      	movne	r3, #1
 800f5e4:	0692      	lsls	r2, r2, #26
 800f5e6:	d42b      	bmi.n	800f640 <_printf_common+0xb0>
 800f5e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5ec:	4649      	mov	r1, r9
 800f5ee:	4638      	mov	r0, r7
 800f5f0:	47c0      	blx	r8
 800f5f2:	3001      	adds	r0, #1
 800f5f4:	d01e      	beq.n	800f634 <_printf_common+0xa4>
 800f5f6:	6823      	ldr	r3, [r4, #0]
 800f5f8:	68e5      	ldr	r5, [r4, #12]
 800f5fa:	6832      	ldr	r2, [r6, #0]
 800f5fc:	f003 0306 	and.w	r3, r3, #6
 800f600:	2b04      	cmp	r3, #4
 800f602:	bf08      	it	eq
 800f604:	1aad      	subeq	r5, r5, r2
 800f606:	68a3      	ldr	r3, [r4, #8]
 800f608:	6922      	ldr	r2, [r4, #16]
 800f60a:	bf0c      	ite	eq
 800f60c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f610:	2500      	movne	r5, #0
 800f612:	4293      	cmp	r3, r2
 800f614:	bfc4      	itt	gt
 800f616:	1a9b      	subgt	r3, r3, r2
 800f618:	18ed      	addgt	r5, r5, r3
 800f61a:	2600      	movs	r6, #0
 800f61c:	341a      	adds	r4, #26
 800f61e:	42b5      	cmp	r5, r6
 800f620:	d11a      	bne.n	800f658 <_printf_common+0xc8>
 800f622:	2000      	movs	r0, #0
 800f624:	e008      	b.n	800f638 <_printf_common+0xa8>
 800f626:	2301      	movs	r3, #1
 800f628:	4652      	mov	r2, sl
 800f62a:	4649      	mov	r1, r9
 800f62c:	4638      	mov	r0, r7
 800f62e:	47c0      	blx	r8
 800f630:	3001      	adds	r0, #1
 800f632:	d103      	bne.n	800f63c <_printf_common+0xac>
 800f634:	f04f 30ff 	mov.w	r0, #4294967295
 800f638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f63c:	3501      	adds	r5, #1
 800f63e:	e7c6      	b.n	800f5ce <_printf_common+0x3e>
 800f640:	18e1      	adds	r1, r4, r3
 800f642:	1c5a      	adds	r2, r3, #1
 800f644:	2030      	movs	r0, #48	; 0x30
 800f646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f64a:	4422      	add	r2, r4
 800f64c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f650:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f654:	3302      	adds	r3, #2
 800f656:	e7c7      	b.n	800f5e8 <_printf_common+0x58>
 800f658:	2301      	movs	r3, #1
 800f65a:	4622      	mov	r2, r4
 800f65c:	4649      	mov	r1, r9
 800f65e:	4638      	mov	r0, r7
 800f660:	47c0      	blx	r8
 800f662:	3001      	adds	r0, #1
 800f664:	d0e6      	beq.n	800f634 <_printf_common+0xa4>
 800f666:	3601      	adds	r6, #1
 800f668:	e7d9      	b.n	800f61e <_printf_common+0x8e>
	...

0800f66c <_printf_i>:
 800f66c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f670:	460c      	mov	r4, r1
 800f672:	4691      	mov	r9, r2
 800f674:	7e27      	ldrb	r7, [r4, #24]
 800f676:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f678:	2f78      	cmp	r7, #120	; 0x78
 800f67a:	4680      	mov	r8, r0
 800f67c:	469a      	mov	sl, r3
 800f67e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f682:	d807      	bhi.n	800f694 <_printf_i+0x28>
 800f684:	2f62      	cmp	r7, #98	; 0x62
 800f686:	d80a      	bhi.n	800f69e <_printf_i+0x32>
 800f688:	2f00      	cmp	r7, #0
 800f68a:	f000 80d8 	beq.w	800f83e <_printf_i+0x1d2>
 800f68e:	2f58      	cmp	r7, #88	; 0x58
 800f690:	f000 80a3 	beq.w	800f7da <_printf_i+0x16e>
 800f694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f69c:	e03a      	b.n	800f714 <_printf_i+0xa8>
 800f69e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6a2:	2b15      	cmp	r3, #21
 800f6a4:	d8f6      	bhi.n	800f694 <_printf_i+0x28>
 800f6a6:	a001      	add	r0, pc, #4	; (adr r0, 800f6ac <_printf_i+0x40>)
 800f6a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f6ac:	0800f705 	.word	0x0800f705
 800f6b0:	0800f719 	.word	0x0800f719
 800f6b4:	0800f695 	.word	0x0800f695
 800f6b8:	0800f695 	.word	0x0800f695
 800f6bc:	0800f695 	.word	0x0800f695
 800f6c0:	0800f695 	.word	0x0800f695
 800f6c4:	0800f719 	.word	0x0800f719
 800f6c8:	0800f695 	.word	0x0800f695
 800f6cc:	0800f695 	.word	0x0800f695
 800f6d0:	0800f695 	.word	0x0800f695
 800f6d4:	0800f695 	.word	0x0800f695
 800f6d8:	0800f825 	.word	0x0800f825
 800f6dc:	0800f749 	.word	0x0800f749
 800f6e0:	0800f807 	.word	0x0800f807
 800f6e4:	0800f695 	.word	0x0800f695
 800f6e8:	0800f695 	.word	0x0800f695
 800f6ec:	0800f847 	.word	0x0800f847
 800f6f0:	0800f695 	.word	0x0800f695
 800f6f4:	0800f749 	.word	0x0800f749
 800f6f8:	0800f695 	.word	0x0800f695
 800f6fc:	0800f695 	.word	0x0800f695
 800f700:	0800f80f 	.word	0x0800f80f
 800f704:	680b      	ldr	r3, [r1, #0]
 800f706:	1d1a      	adds	r2, r3, #4
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	600a      	str	r2, [r1, #0]
 800f70c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f714:	2301      	movs	r3, #1
 800f716:	e0a3      	b.n	800f860 <_printf_i+0x1f4>
 800f718:	6825      	ldr	r5, [r4, #0]
 800f71a:	6808      	ldr	r0, [r1, #0]
 800f71c:	062e      	lsls	r6, r5, #24
 800f71e:	f100 0304 	add.w	r3, r0, #4
 800f722:	d50a      	bpl.n	800f73a <_printf_i+0xce>
 800f724:	6805      	ldr	r5, [r0, #0]
 800f726:	600b      	str	r3, [r1, #0]
 800f728:	2d00      	cmp	r5, #0
 800f72a:	da03      	bge.n	800f734 <_printf_i+0xc8>
 800f72c:	232d      	movs	r3, #45	; 0x2d
 800f72e:	426d      	negs	r5, r5
 800f730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f734:	485e      	ldr	r0, [pc, #376]	; (800f8b0 <_printf_i+0x244>)
 800f736:	230a      	movs	r3, #10
 800f738:	e019      	b.n	800f76e <_printf_i+0x102>
 800f73a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f73e:	6805      	ldr	r5, [r0, #0]
 800f740:	600b      	str	r3, [r1, #0]
 800f742:	bf18      	it	ne
 800f744:	b22d      	sxthne	r5, r5
 800f746:	e7ef      	b.n	800f728 <_printf_i+0xbc>
 800f748:	680b      	ldr	r3, [r1, #0]
 800f74a:	6825      	ldr	r5, [r4, #0]
 800f74c:	1d18      	adds	r0, r3, #4
 800f74e:	6008      	str	r0, [r1, #0]
 800f750:	0628      	lsls	r0, r5, #24
 800f752:	d501      	bpl.n	800f758 <_printf_i+0xec>
 800f754:	681d      	ldr	r5, [r3, #0]
 800f756:	e002      	b.n	800f75e <_printf_i+0xf2>
 800f758:	0669      	lsls	r1, r5, #25
 800f75a:	d5fb      	bpl.n	800f754 <_printf_i+0xe8>
 800f75c:	881d      	ldrh	r5, [r3, #0]
 800f75e:	4854      	ldr	r0, [pc, #336]	; (800f8b0 <_printf_i+0x244>)
 800f760:	2f6f      	cmp	r7, #111	; 0x6f
 800f762:	bf0c      	ite	eq
 800f764:	2308      	moveq	r3, #8
 800f766:	230a      	movne	r3, #10
 800f768:	2100      	movs	r1, #0
 800f76a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f76e:	6866      	ldr	r6, [r4, #4]
 800f770:	60a6      	str	r6, [r4, #8]
 800f772:	2e00      	cmp	r6, #0
 800f774:	bfa2      	ittt	ge
 800f776:	6821      	ldrge	r1, [r4, #0]
 800f778:	f021 0104 	bicge.w	r1, r1, #4
 800f77c:	6021      	strge	r1, [r4, #0]
 800f77e:	b90d      	cbnz	r5, 800f784 <_printf_i+0x118>
 800f780:	2e00      	cmp	r6, #0
 800f782:	d04d      	beq.n	800f820 <_printf_i+0x1b4>
 800f784:	4616      	mov	r6, r2
 800f786:	fbb5 f1f3 	udiv	r1, r5, r3
 800f78a:	fb03 5711 	mls	r7, r3, r1, r5
 800f78e:	5dc7      	ldrb	r7, [r0, r7]
 800f790:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f794:	462f      	mov	r7, r5
 800f796:	42bb      	cmp	r3, r7
 800f798:	460d      	mov	r5, r1
 800f79a:	d9f4      	bls.n	800f786 <_printf_i+0x11a>
 800f79c:	2b08      	cmp	r3, #8
 800f79e:	d10b      	bne.n	800f7b8 <_printf_i+0x14c>
 800f7a0:	6823      	ldr	r3, [r4, #0]
 800f7a2:	07df      	lsls	r7, r3, #31
 800f7a4:	d508      	bpl.n	800f7b8 <_printf_i+0x14c>
 800f7a6:	6923      	ldr	r3, [r4, #16]
 800f7a8:	6861      	ldr	r1, [r4, #4]
 800f7aa:	4299      	cmp	r1, r3
 800f7ac:	bfde      	ittt	le
 800f7ae:	2330      	movle	r3, #48	; 0x30
 800f7b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f7b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f7b8:	1b92      	subs	r2, r2, r6
 800f7ba:	6122      	str	r2, [r4, #16]
 800f7bc:	f8cd a000 	str.w	sl, [sp]
 800f7c0:	464b      	mov	r3, r9
 800f7c2:	aa03      	add	r2, sp, #12
 800f7c4:	4621      	mov	r1, r4
 800f7c6:	4640      	mov	r0, r8
 800f7c8:	f7ff fee2 	bl	800f590 <_printf_common>
 800f7cc:	3001      	adds	r0, #1
 800f7ce:	d14c      	bne.n	800f86a <_printf_i+0x1fe>
 800f7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7d4:	b004      	add	sp, #16
 800f7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7da:	4835      	ldr	r0, [pc, #212]	; (800f8b0 <_printf_i+0x244>)
 800f7dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f7e0:	6823      	ldr	r3, [r4, #0]
 800f7e2:	680e      	ldr	r6, [r1, #0]
 800f7e4:	061f      	lsls	r7, r3, #24
 800f7e6:	f856 5b04 	ldr.w	r5, [r6], #4
 800f7ea:	600e      	str	r6, [r1, #0]
 800f7ec:	d514      	bpl.n	800f818 <_printf_i+0x1ac>
 800f7ee:	07d9      	lsls	r1, r3, #31
 800f7f0:	bf44      	itt	mi
 800f7f2:	f043 0320 	orrmi.w	r3, r3, #32
 800f7f6:	6023      	strmi	r3, [r4, #0]
 800f7f8:	b91d      	cbnz	r5, 800f802 <_printf_i+0x196>
 800f7fa:	6823      	ldr	r3, [r4, #0]
 800f7fc:	f023 0320 	bic.w	r3, r3, #32
 800f800:	6023      	str	r3, [r4, #0]
 800f802:	2310      	movs	r3, #16
 800f804:	e7b0      	b.n	800f768 <_printf_i+0xfc>
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	f043 0320 	orr.w	r3, r3, #32
 800f80c:	6023      	str	r3, [r4, #0]
 800f80e:	2378      	movs	r3, #120	; 0x78
 800f810:	4828      	ldr	r0, [pc, #160]	; (800f8b4 <_printf_i+0x248>)
 800f812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f816:	e7e3      	b.n	800f7e0 <_printf_i+0x174>
 800f818:	065e      	lsls	r6, r3, #25
 800f81a:	bf48      	it	mi
 800f81c:	b2ad      	uxthmi	r5, r5
 800f81e:	e7e6      	b.n	800f7ee <_printf_i+0x182>
 800f820:	4616      	mov	r6, r2
 800f822:	e7bb      	b.n	800f79c <_printf_i+0x130>
 800f824:	680b      	ldr	r3, [r1, #0]
 800f826:	6826      	ldr	r6, [r4, #0]
 800f828:	6960      	ldr	r0, [r4, #20]
 800f82a:	1d1d      	adds	r5, r3, #4
 800f82c:	600d      	str	r5, [r1, #0]
 800f82e:	0635      	lsls	r5, r6, #24
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	d501      	bpl.n	800f838 <_printf_i+0x1cc>
 800f834:	6018      	str	r0, [r3, #0]
 800f836:	e002      	b.n	800f83e <_printf_i+0x1d2>
 800f838:	0671      	lsls	r1, r6, #25
 800f83a:	d5fb      	bpl.n	800f834 <_printf_i+0x1c8>
 800f83c:	8018      	strh	r0, [r3, #0]
 800f83e:	2300      	movs	r3, #0
 800f840:	6123      	str	r3, [r4, #16]
 800f842:	4616      	mov	r6, r2
 800f844:	e7ba      	b.n	800f7bc <_printf_i+0x150>
 800f846:	680b      	ldr	r3, [r1, #0]
 800f848:	1d1a      	adds	r2, r3, #4
 800f84a:	600a      	str	r2, [r1, #0]
 800f84c:	681e      	ldr	r6, [r3, #0]
 800f84e:	6862      	ldr	r2, [r4, #4]
 800f850:	2100      	movs	r1, #0
 800f852:	4630      	mov	r0, r6
 800f854:	f7f0 fd4c 	bl	80002f0 <memchr>
 800f858:	b108      	cbz	r0, 800f85e <_printf_i+0x1f2>
 800f85a:	1b80      	subs	r0, r0, r6
 800f85c:	6060      	str	r0, [r4, #4]
 800f85e:	6863      	ldr	r3, [r4, #4]
 800f860:	6123      	str	r3, [r4, #16]
 800f862:	2300      	movs	r3, #0
 800f864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f868:	e7a8      	b.n	800f7bc <_printf_i+0x150>
 800f86a:	6923      	ldr	r3, [r4, #16]
 800f86c:	4632      	mov	r2, r6
 800f86e:	4649      	mov	r1, r9
 800f870:	4640      	mov	r0, r8
 800f872:	47d0      	blx	sl
 800f874:	3001      	adds	r0, #1
 800f876:	d0ab      	beq.n	800f7d0 <_printf_i+0x164>
 800f878:	6823      	ldr	r3, [r4, #0]
 800f87a:	079b      	lsls	r3, r3, #30
 800f87c:	d413      	bmi.n	800f8a6 <_printf_i+0x23a>
 800f87e:	68e0      	ldr	r0, [r4, #12]
 800f880:	9b03      	ldr	r3, [sp, #12]
 800f882:	4298      	cmp	r0, r3
 800f884:	bfb8      	it	lt
 800f886:	4618      	movlt	r0, r3
 800f888:	e7a4      	b.n	800f7d4 <_printf_i+0x168>
 800f88a:	2301      	movs	r3, #1
 800f88c:	4632      	mov	r2, r6
 800f88e:	4649      	mov	r1, r9
 800f890:	4640      	mov	r0, r8
 800f892:	47d0      	blx	sl
 800f894:	3001      	adds	r0, #1
 800f896:	d09b      	beq.n	800f7d0 <_printf_i+0x164>
 800f898:	3501      	adds	r5, #1
 800f89a:	68e3      	ldr	r3, [r4, #12]
 800f89c:	9903      	ldr	r1, [sp, #12]
 800f89e:	1a5b      	subs	r3, r3, r1
 800f8a0:	42ab      	cmp	r3, r5
 800f8a2:	dcf2      	bgt.n	800f88a <_printf_i+0x21e>
 800f8a4:	e7eb      	b.n	800f87e <_printf_i+0x212>
 800f8a6:	2500      	movs	r5, #0
 800f8a8:	f104 0619 	add.w	r6, r4, #25
 800f8ac:	e7f5      	b.n	800f89a <_printf_i+0x22e>
 800f8ae:	bf00      	nop
 800f8b0:	080112ab 	.word	0x080112ab
 800f8b4:	080112bc 	.word	0x080112bc

0800f8b8 <_sbrk_r>:
 800f8b8:	b538      	push	{r3, r4, r5, lr}
 800f8ba:	4d06      	ldr	r5, [pc, #24]	; (800f8d4 <_sbrk_r+0x1c>)
 800f8bc:	2300      	movs	r3, #0
 800f8be:	4604      	mov	r4, r0
 800f8c0:	4608      	mov	r0, r1
 800f8c2:	602b      	str	r3, [r5, #0]
 800f8c4:	f7f3 fa24 	bl	8002d10 <_sbrk>
 800f8c8:	1c43      	adds	r3, r0, #1
 800f8ca:	d102      	bne.n	800f8d2 <_sbrk_r+0x1a>
 800f8cc:	682b      	ldr	r3, [r5, #0]
 800f8ce:	b103      	cbz	r3, 800f8d2 <_sbrk_r+0x1a>
 800f8d0:	6023      	str	r3, [r4, #0]
 800f8d2:	bd38      	pop	{r3, r4, r5, pc}
 800f8d4:	200005e8 	.word	0x200005e8

0800f8d8 <__swbuf_r>:
 800f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8da:	460e      	mov	r6, r1
 800f8dc:	4614      	mov	r4, r2
 800f8de:	4605      	mov	r5, r0
 800f8e0:	b118      	cbz	r0, 800f8ea <__swbuf_r+0x12>
 800f8e2:	6983      	ldr	r3, [r0, #24]
 800f8e4:	b90b      	cbnz	r3, 800f8ea <__swbuf_r+0x12>
 800f8e6:	f000 f9d9 	bl	800fc9c <__sinit>
 800f8ea:	4b21      	ldr	r3, [pc, #132]	; (800f970 <__swbuf_r+0x98>)
 800f8ec:	429c      	cmp	r4, r3
 800f8ee:	d12b      	bne.n	800f948 <__swbuf_r+0x70>
 800f8f0:	686c      	ldr	r4, [r5, #4]
 800f8f2:	69a3      	ldr	r3, [r4, #24]
 800f8f4:	60a3      	str	r3, [r4, #8]
 800f8f6:	89a3      	ldrh	r3, [r4, #12]
 800f8f8:	071a      	lsls	r2, r3, #28
 800f8fa:	d52f      	bpl.n	800f95c <__swbuf_r+0x84>
 800f8fc:	6923      	ldr	r3, [r4, #16]
 800f8fe:	b36b      	cbz	r3, 800f95c <__swbuf_r+0x84>
 800f900:	6923      	ldr	r3, [r4, #16]
 800f902:	6820      	ldr	r0, [r4, #0]
 800f904:	1ac0      	subs	r0, r0, r3
 800f906:	6963      	ldr	r3, [r4, #20]
 800f908:	b2f6      	uxtb	r6, r6
 800f90a:	4283      	cmp	r3, r0
 800f90c:	4637      	mov	r7, r6
 800f90e:	dc04      	bgt.n	800f91a <__swbuf_r+0x42>
 800f910:	4621      	mov	r1, r4
 800f912:	4628      	mov	r0, r5
 800f914:	f000 f92e 	bl	800fb74 <_fflush_r>
 800f918:	bb30      	cbnz	r0, 800f968 <__swbuf_r+0x90>
 800f91a:	68a3      	ldr	r3, [r4, #8]
 800f91c:	3b01      	subs	r3, #1
 800f91e:	60a3      	str	r3, [r4, #8]
 800f920:	6823      	ldr	r3, [r4, #0]
 800f922:	1c5a      	adds	r2, r3, #1
 800f924:	6022      	str	r2, [r4, #0]
 800f926:	701e      	strb	r6, [r3, #0]
 800f928:	6963      	ldr	r3, [r4, #20]
 800f92a:	3001      	adds	r0, #1
 800f92c:	4283      	cmp	r3, r0
 800f92e:	d004      	beq.n	800f93a <__swbuf_r+0x62>
 800f930:	89a3      	ldrh	r3, [r4, #12]
 800f932:	07db      	lsls	r3, r3, #31
 800f934:	d506      	bpl.n	800f944 <__swbuf_r+0x6c>
 800f936:	2e0a      	cmp	r6, #10
 800f938:	d104      	bne.n	800f944 <__swbuf_r+0x6c>
 800f93a:	4621      	mov	r1, r4
 800f93c:	4628      	mov	r0, r5
 800f93e:	f000 f919 	bl	800fb74 <_fflush_r>
 800f942:	b988      	cbnz	r0, 800f968 <__swbuf_r+0x90>
 800f944:	4638      	mov	r0, r7
 800f946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f948:	4b0a      	ldr	r3, [pc, #40]	; (800f974 <__swbuf_r+0x9c>)
 800f94a:	429c      	cmp	r4, r3
 800f94c:	d101      	bne.n	800f952 <__swbuf_r+0x7a>
 800f94e:	68ac      	ldr	r4, [r5, #8]
 800f950:	e7cf      	b.n	800f8f2 <__swbuf_r+0x1a>
 800f952:	4b09      	ldr	r3, [pc, #36]	; (800f978 <__swbuf_r+0xa0>)
 800f954:	429c      	cmp	r4, r3
 800f956:	bf08      	it	eq
 800f958:	68ec      	ldreq	r4, [r5, #12]
 800f95a:	e7ca      	b.n	800f8f2 <__swbuf_r+0x1a>
 800f95c:	4621      	mov	r1, r4
 800f95e:	4628      	mov	r0, r5
 800f960:	f000 f80c 	bl	800f97c <__swsetup_r>
 800f964:	2800      	cmp	r0, #0
 800f966:	d0cb      	beq.n	800f900 <__swbuf_r+0x28>
 800f968:	f04f 37ff 	mov.w	r7, #4294967295
 800f96c:	e7ea      	b.n	800f944 <__swbuf_r+0x6c>
 800f96e:	bf00      	nop
 800f970:	080112f0 	.word	0x080112f0
 800f974:	08011310 	.word	0x08011310
 800f978:	080112d0 	.word	0x080112d0

0800f97c <__swsetup_r>:
 800f97c:	4b32      	ldr	r3, [pc, #200]	; (800fa48 <__swsetup_r+0xcc>)
 800f97e:	b570      	push	{r4, r5, r6, lr}
 800f980:	681d      	ldr	r5, [r3, #0]
 800f982:	4606      	mov	r6, r0
 800f984:	460c      	mov	r4, r1
 800f986:	b125      	cbz	r5, 800f992 <__swsetup_r+0x16>
 800f988:	69ab      	ldr	r3, [r5, #24]
 800f98a:	b913      	cbnz	r3, 800f992 <__swsetup_r+0x16>
 800f98c:	4628      	mov	r0, r5
 800f98e:	f000 f985 	bl	800fc9c <__sinit>
 800f992:	4b2e      	ldr	r3, [pc, #184]	; (800fa4c <__swsetup_r+0xd0>)
 800f994:	429c      	cmp	r4, r3
 800f996:	d10f      	bne.n	800f9b8 <__swsetup_r+0x3c>
 800f998:	686c      	ldr	r4, [r5, #4]
 800f99a:	89a3      	ldrh	r3, [r4, #12]
 800f99c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9a0:	0719      	lsls	r1, r3, #28
 800f9a2:	d42c      	bmi.n	800f9fe <__swsetup_r+0x82>
 800f9a4:	06dd      	lsls	r5, r3, #27
 800f9a6:	d411      	bmi.n	800f9cc <__swsetup_r+0x50>
 800f9a8:	2309      	movs	r3, #9
 800f9aa:	6033      	str	r3, [r6, #0]
 800f9ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f9b0:	81a3      	strh	r3, [r4, #12]
 800f9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b6:	e03e      	b.n	800fa36 <__swsetup_r+0xba>
 800f9b8:	4b25      	ldr	r3, [pc, #148]	; (800fa50 <__swsetup_r+0xd4>)
 800f9ba:	429c      	cmp	r4, r3
 800f9bc:	d101      	bne.n	800f9c2 <__swsetup_r+0x46>
 800f9be:	68ac      	ldr	r4, [r5, #8]
 800f9c0:	e7eb      	b.n	800f99a <__swsetup_r+0x1e>
 800f9c2:	4b24      	ldr	r3, [pc, #144]	; (800fa54 <__swsetup_r+0xd8>)
 800f9c4:	429c      	cmp	r4, r3
 800f9c6:	bf08      	it	eq
 800f9c8:	68ec      	ldreq	r4, [r5, #12]
 800f9ca:	e7e6      	b.n	800f99a <__swsetup_r+0x1e>
 800f9cc:	0758      	lsls	r0, r3, #29
 800f9ce:	d512      	bpl.n	800f9f6 <__swsetup_r+0x7a>
 800f9d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9d2:	b141      	cbz	r1, 800f9e6 <__swsetup_r+0x6a>
 800f9d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9d8:	4299      	cmp	r1, r3
 800f9da:	d002      	beq.n	800f9e2 <__swsetup_r+0x66>
 800f9dc:	4630      	mov	r0, r6
 800f9de:	f7ff fa77 	bl	800eed0 <_free_r>
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	6363      	str	r3, [r4, #52]	; 0x34
 800f9e6:	89a3      	ldrh	r3, [r4, #12]
 800f9e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f9ec:	81a3      	strh	r3, [r4, #12]
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	6063      	str	r3, [r4, #4]
 800f9f2:	6923      	ldr	r3, [r4, #16]
 800f9f4:	6023      	str	r3, [r4, #0]
 800f9f6:	89a3      	ldrh	r3, [r4, #12]
 800f9f8:	f043 0308 	orr.w	r3, r3, #8
 800f9fc:	81a3      	strh	r3, [r4, #12]
 800f9fe:	6923      	ldr	r3, [r4, #16]
 800fa00:	b94b      	cbnz	r3, 800fa16 <__swsetup_r+0x9a>
 800fa02:	89a3      	ldrh	r3, [r4, #12]
 800fa04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa0c:	d003      	beq.n	800fa16 <__swsetup_r+0x9a>
 800fa0e:	4621      	mov	r1, r4
 800fa10:	4630      	mov	r0, r6
 800fa12:	f000 fa07 	bl	800fe24 <__smakebuf_r>
 800fa16:	89a0      	ldrh	r0, [r4, #12]
 800fa18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa1c:	f010 0301 	ands.w	r3, r0, #1
 800fa20:	d00a      	beq.n	800fa38 <__swsetup_r+0xbc>
 800fa22:	2300      	movs	r3, #0
 800fa24:	60a3      	str	r3, [r4, #8]
 800fa26:	6963      	ldr	r3, [r4, #20]
 800fa28:	425b      	negs	r3, r3
 800fa2a:	61a3      	str	r3, [r4, #24]
 800fa2c:	6923      	ldr	r3, [r4, #16]
 800fa2e:	b943      	cbnz	r3, 800fa42 <__swsetup_r+0xc6>
 800fa30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa34:	d1ba      	bne.n	800f9ac <__swsetup_r+0x30>
 800fa36:	bd70      	pop	{r4, r5, r6, pc}
 800fa38:	0781      	lsls	r1, r0, #30
 800fa3a:	bf58      	it	pl
 800fa3c:	6963      	ldrpl	r3, [r4, #20]
 800fa3e:	60a3      	str	r3, [r4, #8]
 800fa40:	e7f4      	b.n	800fa2c <__swsetup_r+0xb0>
 800fa42:	2000      	movs	r0, #0
 800fa44:	e7f7      	b.n	800fa36 <__swsetup_r+0xba>
 800fa46:	bf00      	nop
 800fa48:	20000040 	.word	0x20000040
 800fa4c:	080112f0 	.word	0x080112f0
 800fa50:	08011310 	.word	0x08011310
 800fa54:	080112d0 	.word	0x080112d0

0800fa58 <abort>:
 800fa58:	b508      	push	{r3, lr}
 800fa5a:	2006      	movs	r0, #6
 800fa5c:	f000 fa96 	bl	800ff8c <raise>
 800fa60:	2001      	movs	r0, #1
 800fa62:	f7f3 f8dd 	bl	8002c20 <_exit>
	...

0800fa68 <__sflush_r>:
 800fa68:	898a      	ldrh	r2, [r1, #12]
 800fa6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa6e:	4605      	mov	r5, r0
 800fa70:	0710      	lsls	r0, r2, #28
 800fa72:	460c      	mov	r4, r1
 800fa74:	d458      	bmi.n	800fb28 <__sflush_r+0xc0>
 800fa76:	684b      	ldr	r3, [r1, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	dc05      	bgt.n	800fa88 <__sflush_r+0x20>
 800fa7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	dc02      	bgt.n	800fa88 <__sflush_r+0x20>
 800fa82:	2000      	movs	r0, #0
 800fa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa8a:	2e00      	cmp	r6, #0
 800fa8c:	d0f9      	beq.n	800fa82 <__sflush_r+0x1a>
 800fa8e:	2300      	movs	r3, #0
 800fa90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa94:	682f      	ldr	r7, [r5, #0]
 800fa96:	602b      	str	r3, [r5, #0]
 800fa98:	d032      	beq.n	800fb00 <__sflush_r+0x98>
 800fa9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fa9c:	89a3      	ldrh	r3, [r4, #12]
 800fa9e:	075a      	lsls	r2, r3, #29
 800faa0:	d505      	bpl.n	800faae <__sflush_r+0x46>
 800faa2:	6863      	ldr	r3, [r4, #4]
 800faa4:	1ac0      	subs	r0, r0, r3
 800faa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800faa8:	b10b      	cbz	r3, 800faae <__sflush_r+0x46>
 800faaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800faac:	1ac0      	subs	r0, r0, r3
 800faae:	2300      	movs	r3, #0
 800fab0:	4602      	mov	r2, r0
 800fab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fab4:	6a21      	ldr	r1, [r4, #32]
 800fab6:	4628      	mov	r0, r5
 800fab8:	47b0      	blx	r6
 800faba:	1c43      	adds	r3, r0, #1
 800fabc:	89a3      	ldrh	r3, [r4, #12]
 800fabe:	d106      	bne.n	800face <__sflush_r+0x66>
 800fac0:	6829      	ldr	r1, [r5, #0]
 800fac2:	291d      	cmp	r1, #29
 800fac4:	d82c      	bhi.n	800fb20 <__sflush_r+0xb8>
 800fac6:	4a2a      	ldr	r2, [pc, #168]	; (800fb70 <__sflush_r+0x108>)
 800fac8:	40ca      	lsrs	r2, r1
 800faca:	07d6      	lsls	r6, r2, #31
 800facc:	d528      	bpl.n	800fb20 <__sflush_r+0xb8>
 800face:	2200      	movs	r2, #0
 800fad0:	6062      	str	r2, [r4, #4]
 800fad2:	04d9      	lsls	r1, r3, #19
 800fad4:	6922      	ldr	r2, [r4, #16]
 800fad6:	6022      	str	r2, [r4, #0]
 800fad8:	d504      	bpl.n	800fae4 <__sflush_r+0x7c>
 800fada:	1c42      	adds	r2, r0, #1
 800fadc:	d101      	bne.n	800fae2 <__sflush_r+0x7a>
 800fade:	682b      	ldr	r3, [r5, #0]
 800fae0:	b903      	cbnz	r3, 800fae4 <__sflush_r+0x7c>
 800fae2:	6560      	str	r0, [r4, #84]	; 0x54
 800fae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fae6:	602f      	str	r7, [r5, #0]
 800fae8:	2900      	cmp	r1, #0
 800faea:	d0ca      	beq.n	800fa82 <__sflush_r+0x1a>
 800faec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800faf0:	4299      	cmp	r1, r3
 800faf2:	d002      	beq.n	800fafa <__sflush_r+0x92>
 800faf4:	4628      	mov	r0, r5
 800faf6:	f7ff f9eb 	bl	800eed0 <_free_r>
 800fafa:	2000      	movs	r0, #0
 800fafc:	6360      	str	r0, [r4, #52]	; 0x34
 800fafe:	e7c1      	b.n	800fa84 <__sflush_r+0x1c>
 800fb00:	6a21      	ldr	r1, [r4, #32]
 800fb02:	2301      	movs	r3, #1
 800fb04:	4628      	mov	r0, r5
 800fb06:	47b0      	blx	r6
 800fb08:	1c41      	adds	r1, r0, #1
 800fb0a:	d1c7      	bne.n	800fa9c <__sflush_r+0x34>
 800fb0c:	682b      	ldr	r3, [r5, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d0c4      	beq.n	800fa9c <__sflush_r+0x34>
 800fb12:	2b1d      	cmp	r3, #29
 800fb14:	d001      	beq.n	800fb1a <__sflush_r+0xb2>
 800fb16:	2b16      	cmp	r3, #22
 800fb18:	d101      	bne.n	800fb1e <__sflush_r+0xb6>
 800fb1a:	602f      	str	r7, [r5, #0]
 800fb1c:	e7b1      	b.n	800fa82 <__sflush_r+0x1a>
 800fb1e:	89a3      	ldrh	r3, [r4, #12]
 800fb20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb24:	81a3      	strh	r3, [r4, #12]
 800fb26:	e7ad      	b.n	800fa84 <__sflush_r+0x1c>
 800fb28:	690f      	ldr	r7, [r1, #16]
 800fb2a:	2f00      	cmp	r7, #0
 800fb2c:	d0a9      	beq.n	800fa82 <__sflush_r+0x1a>
 800fb2e:	0793      	lsls	r3, r2, #30
 800fb30:	680e      	ldr	r6, [r1, #0]
 800fb32:	bf08      	it	eq
 800fb34:	694b      	ldreq	r3, [r1, #20]
 800fb36:	600f      	str	r7, [r1, #0]
 800fb38:	bf18      	it	ne
 800fb3a:	2300      	movne	r3, #0
 800fb3c:	eba6 0807 	sub.w	r8, r6, r7
 800fb40:	608b      	str	r3, [r1, #8]
 800fb42:	f1b8 0f00 	cmp.w	r8, #0
 800fb46:	dd9c      	ble.n	800fa82 <__sflush_r+0x1a>
 800fb48:	6a21      	ldr	r1, [r4, #32]
 800fb4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb4c:	4643      	mov	r3, r8
 800fb4e:	463a      	mov	r2, r7
 800fb50:	4628      	mov	r0, r5
 800fb52:	47b0      	blx	r6
 800fb54:	2800      	cmp	r0, #0
 800fb56:	dc06      	bgt.n	800fb66 <__sflush_r+0xfe>
 800fb58:	89a3      	ldrh	r3, [r4, #12]
 800fb5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb5e:	81a3      	strh	r3, [r4, #12]
 800fb60:	f04f 30ff 	mov.w	r0, #4294967295
 800fb64:	e78e      	b.n	800fa84 <__sflush_r+0x1c>
 800fb66:	4407      	add	r7, r0
 800fb68:	eba8 0800 	sub.w	r8, r8, r0
 800fb6c:	e7e9      	b.n	800fb42 <__sflush_r+0xda>
 800fb6e:	bf00      	nop
 800fb70:	20400001 	.word	0x20400001

0800fb74 <_fflush_r>:
 800fb74:	b538      	push	{r3, r4, r5, lr}
 800fb76:	690b      	ldr	r3, [r1, #16]
 800fb78:	4605      	mov	r5, r0
 800fb7a:	460c      	mov	r4, r1
 800fb7c:	b913      	cbnz	r3, 800fb84 <_fflush_r+0x10>
 800fb7e:	2500      	movs	r5, #0
 800fb80:	4628      	mov	r0, r5
 800fb82:	bd38      	pop	{r3, r4, r5, pc}
 800fb84:	b118      	cbz	r0, 800fb8e <_fflush_r+0x1a>
 800fb86:	6983      	ldr	r3, [r0, #24]
 800fb88:	b90b      	cbnz	r3, 800fb8e <_fflush_r+0x1a>
 800fb8a:	f000 f887 	bl	800fc9c <__sinit>
 800fb8e:	4b14      	ldr	r3, [pc, #80]	; (800fbe0 <_fflush_r+0x6c>)
 800fb90:	429c      	cmp	r4, r3
 800fb92:	d11b      	bne.n	800fbcc <_fflush_r+0x58>
 800fb94:	686c      	ldr	r4, [r5, #4]
 800fb96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d0ef      	beq.n	800fb7e <_fflush_r+0xa>
 800fb9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fba0:	07d0      	lsls	r0, r2, #31
 800fba2:	d404      	bmi.n	800fbae <_fflush_r+0x3a>
 800fba4:	0599      	lsls	r1, r3, #22
 800fba6:	d402      	bmi.n	800fbae <_fflush_r+0x3a>
 800fba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbaa:	f000 f915 	bl	800fdd8 <__retarget_lock_acquire_recursive>
 800fbae:	4628      	mov	r0, r5
 800fbb0:	4621      	mov	r1, r4
 800fbb2:	f7ff ff59 	bl	800fa68 <__sflush_r>
 800fbb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbb8:	07da      	lsls	r2, r3, #31
 800fbba:	4605      	mov	r5, r0
 800fbbc:	d4e0      	bmi.n	800fb80 <_fflush_r+0xc>
 800fbbe:	89a3      	ldrh	r3, [r4, #12]
 800fbc0:	059b      	lsls	r3, r3, #22
 800fbc2:	d4dd      	bmi.n	800fb80 <_fflush_r+0xc>
 800fbc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbc6:	f000 f908 	bl	800fdda <__retarget_lock_release_recursive>
 800fbca:	e7d9      	b.n	800fb80 <_fflush_r+0xc>
 800fbcc:	4b05      	ldr	r3, [pc, #20]	; (800fbe4 <_fflush_r+0x70>)
 800fbce:	429c      	cmp	r4, r3
 800fbd0:	d101      	bne.n	800fbd6 <_fflush_r+0x62>
 800fbd2:	68ac      	ldr	r4, [r5, #8]
 800fbd4:	e7df      	b.n	800fb96 <_fflush_r+0x22>
 800fbd6:	4b04      	ldr	r3, [pc, #16]	; (800fbe8 <_fflush_r+0x74>)
 800fbd8:	429c      	cmp	r4, r3
 800fbda:	bf08      	it	eq
 800fbdc:	68ec      	ldreq	r4, [r5, #12]
 800fbde:	e7da      	b.n	800fb96 <_fflush_r+0x22>
 800fbe0:	080112f0 	.word	0x080112f0
 800fbe4:	08011310 	.word	0x08011310
 800fbe8:	080112d0 	.word	0x080112d0

0800fbec <std>:
 800fbec:	2300      	movs	r3, #0
 800fbee:	b510      	push	{r4, lr}
 800fbf0:	4604      	mov	r4, r0
 800fbf2:	e9c0 3300 	strd	r3, r3, [r0]
 800fbf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fbfa:	6083      	str	r3, [r0, #8]
 800fbfc:	8181      	strh	r1, [r0, #12]
 800fbfe:	6643      	str	r3, [r0, #100]	; 0x64
 800fc00:	81c2      	strh	r2, [r0, #14]
 800fc02:	6183      	str	r3, [r0, #24]
 800fc04:	4619      	mov	r1, r3
 800fc06:	2208      	movs	r2, #8
 800fc08:	305c      	adds	r0, #92	; 0x5c
 800fc0a:	f7ff f893 	bl	800ed34 <memset>
 800fc0e:	4b05      	ldr	r3, [pc, #20]	; (800fc24 <std+0x38>)
 800fc10:	6263      	str	r3, [r4, #36]	; 0x24
 800fc12:	4b05      	ldr	r3, [pc, #20]	; (800fc28 <std+0x3c>)
 800fc14:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc16:	4b05      	ldr	r3, [pc, #20]	; (800fc2c <std+0x40>)
 800fc18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc1a:	4b05      	ldr	r3, [pc, #20]	; (800fc30 <std+0x44>)
 800fc1c:	6224      	str	r4, [r4, #32]
 800fc1e:	6323      	str	r3, [r4, #48]	; 0x30
 800fc20:	bd10      	pop	{r4, pc}
 800fc22:	bf00      	nop
 800fc24:	0800ffc5 	.word	0x0800ffc5
 800fc28:	0800ffe7 	.word	0x0800ffe7
 800fc2c:	0801001f 	.word	0x0801001f
 800fc30:	08010043 	.word	0x08010043

0800fc34 <_cleanup_r>:
 800fc34:	4901      	ldr	r1, [pc, #4]	; (800fc3c <_cleanup_r+0x8>)
 800fc36:	f000 b8af 	b.w	800fd98 <_fwalk_reent>
 800fc3a:	bf00      	nop
 800fc3c:	0800fb75 	.word	0x0800fb75

0800fc40 <__sfmoreglue>:
 800fc40:	b570      	push	{r4, r5, r6, lr}
 800fc42:	1e4a      	subs	r2, r1, #1
 800fc44:	2568      	movs	r5, #104	; 0x68
 800fc46:	4355      	muls	r5, r2
 800fc48:	460e      	mov	r6, r1
 800fc4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fc4e:	f7ff f98f 	bl	800ef70 <_malloc_r>
 800fc52:	4604      	mov	r4, r0
 800fc54:	b140      	cbz	r0, 800fc68 <__sfmoreglue+0x28>
 800fc56:	2100      	movs	r1, #0
 800fc58:	e9c0 1600 	strd	r1, r6, [r0]
 800fc5c:	300c      	adds	r0, #12
 800fc5e:	60a0      	str	r0, [r4, #8]
 800fc60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fc64:	f7ff f866 	bl	800ed34 <memset>
 800fc68:	4620      	mov	r0, r4
 800fc6a:	bd70      	pop	{r4, r5, r6, pc}

0800fc6c <__sfp_lock_acquire>:
 800fc6c:	4801      	ldr	r0, [pc, #4]	; (800fc74 <__sfp_lock_acquire+0x8>)
 800fc6e:	f000 b8b3 	b.w	800fdd8 <__retarget_lock_acquire_recursive>
 800fc72:	bf00      	nop
 800fc74:	200005e4 	.word	0x200005e4

0800fc78 <__sfp_lock_release>:
 800fc78:	4801      	ldr	r0, [pc, #4]	; (800fc80 <__sfp_lock_release+0x8>)
 800fc7a:	f000 b8ae 	b.w	800fdda <__retarget_lock_release_recursive>
 800fc7e:	bf00      	nop
 800fc80:	200005e4 	.word	0x200005e4

0800fc84 <__sinit_lock_acquire>:
 800fc84:	4801      	ldr	r0, [pc, #4]	; (800fc8c <__sinit_lock_acquire+0x8>)
 800fc86:	f000 b8a7 	b.w	800fdd8 <__retarget_lock_acquire_recursive>
 800fc8a:	bf00      	nop
 800fc8c:	200005df 	.word	0x200005df

0800fc90 <__sinit_lock_release>:
 800fc90:	4801      	ldr	r0, [pc, #4]	; (800fc98 <__sinit_lock_release+0x8>)
 800fc92:	f000 b8a2 	b.w	800fdda <__retarget_lock_release_recursive>
 800fc96:	bf00      	nop
 800fc98:	200005df 	.word	0x200005df

0800fc9c <__sinit>:
 800fc9c:	b510      	push	{r4, lr}
 800fc9e:	4604      	mov	r4, r0
 800fca0:	f7ff fff0 	bl	800fc84 <__sinit_lock_acquire>
 800fca4:	69a3      	ldr	r3, [r4, #24]
 800fca6:	b11b      	cbz	r3, 800fcb0 <__sinit+0x14>
 800fca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcac:	f7ff bff0 	b.w	800fc90 <__sinit_lock_release>
 800fcb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fcb4:	6523      	str	r3, [r4, #80]	; 0x50
 800fcb6:	4b13      	ldr	r3, [pc, #76]	; (800fd04 <__sinit+0x68>)
 800fcb8:	4a13      	ldr	r2, [pc, #76]	; (800fd08 <__sinit+0x6c>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	62a2      	str	r2, [r4, #40]	; 0x28
 800fcbe:	42a3      	cmp	r3, r4
 800fcc0:	bf04      	itt	eq
 800fcc2:	2301      	moveq	r3, #1
 800fcc4:	61a3      	streq	r3, [r4, #24]
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	f000 f820 	bl	800fd0c <__sfp>
 800fccc:	6060      	str	r0, [r4, #4]
 800fcce:	4620      	mov	r0, r4
 800fcd0:	f000 f81c 	bl	800fd0c <__sfp>
 800fcd4:	60a0      	str	r0, [r4, #8]
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	f000 f818 	bl	800fd0c <__sfp>
 800fcdc:	2200      	movs	r2, #0
 800fcde:	60e0      	str	r0, [r4, #12]
 800fce0:	2104      	movs	r1, #4
 800fce2:	6860      	ldr	r0, [r4, #4]
 800fce4:	f7ff ff82 	bl	800fbec <std>
 800fce8:	68a0      	ldr	r0, [r4, #8]
 800fcea:	2201      	movs	r2, #1
 800fcec:	2109      	movs	r1, #9
 800fcee:	f7ff ff7d 	bl	800fbec <std>
 800fcf2:	68e0      	ldr	r0, [r4, #12]
 800fcf4:	2202      	movs	r2, #2
 800fcf6:	2112      	movs	r1, #18
 800fcf8:	f7ff ff78 	bl	800fbec <std>
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	61a3      	str	r3, [r4, #24]
 800fd00:	e7d2      	b.n	800fca8 <__sinit+0xc>
 800fd02:	bf00      	nop
 800fd04:	080111e4 	.word	0x080111e4
 800fd08:	0800fc35 	.word	0x0800fc35

0800fd0c <__sfp>:
 800fd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd0e:	4607      	mov	r7, r0
 800fd10:	f7ff ffac 	bl	800fc6c <__sfp_lock_acquire>
 800fd14:	4b1e      	ldr	r3, [pc, #120]	; (800fd90 <__sfp+0x84>)
 800fd16:	681e      	ldr	r6, [r3, #0]
 800fd18:	69b3      	ldr	r3, [r6, #24]
 800fd1a:	b913      	cbnz	r3, 800fd22 <__sfp+0x16>
 800fd1c:	4630      	mov	r0, r6
 800fd1e:	f7ff ffbd 	bl	800fc9c <__sinit>
 800fd22:	3648      	adds	r6, #72	; 0x48
 800fd24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fd28:	3b01      	subs	r3, #1
 800fd2a:	d503      	bpl.n	800fd34 <__sfp+0x28>
 800fd2c:	6833      	ldr	r3, [r6, #0]
 800fd2e:	b30b      	cbz	r3, 800fd74 <__sfp+0x68>
 800fd30:	6836      	ldr	r6, [r6, #0]
 800fd32:	e7f7      	b.n	800fd24 <__sfp+0x18>
 800fd34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fd38:	b9d5      	cbnz	r5, 800fd70 <__sfp+0x64>
 800fd3a:	4b16      	ldr	r3, [pc, #88]	; (800fd94 <__sfp+0x88>)
 800fd3c:	60e3      	str	r3, [r4, #12]
 800fd3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fd42:	6665      	str	r5, [r4, #100]	; 0x64
 800fd44:	f000 f847 	bl	800fdd6 <__retarget_lock_init_recursive>
 800fd48:	f7ff ff96 	bl	800fc78 <__sfp_lock_release>
 800fd4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fd50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fd54:	6025      	str	r5, [r4, #0]
 800fd56:	61a5      	str	r5, [r4, #24]
 800fd58:	2208      	movs	r2, #8
 800fd5a:	4629      	mov	r1, r5
 800fd5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fd60:	f7fe ffe8 	bl	800ed34 <memset>
 800fd64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fd68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd70:	3468      	adds	r4, #104	; 0x68
 800fd72:	e7d9      	b.n	800fd28 <__sfp+0x1c>
 800fd74:	2104      	movs	r1, #4
 800fd76:	4638      	mov	r0, r7
 800fd78:	f7ff ff62 	bl	800fc40 <__sfmoreglue>
 800fd7c:	4604      	mov	r4, r0
 800fd7e:	6030      	str	r0, [r6, #0]
 800fd80:	2800      	cmp	r0, #0
 800fd82:	d1d5      	bne.n	800fd30 <__sfp+0x24>
 800fd84:	f7ff ff78 	bl	800fc78 <__sfp_lock_release>
 800fd88:	230c      	movs	r3, #12
 800fd8a:	603b      	str	r3, [r7, #0]
 800fd8c:	e7ee      	b.n	800fd6c <__sfp+0x60>
 800fd8e:	bf00      	nop
 800fd90:	080111e4 	.word	0x080111e4
 800fd94:	ffff0001 	.word	0xffff0001

0800fd98 <_fwalk_reent>:
 800fd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd9c:	4606      	mov	r6, r0
 800fd9e:	4688      	mov	r8, r1
 800fda0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fda4:	2700      	movs	r7, #0
 800fda6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fdaa:	f1b9 0901 	subs.w	r9, r9, #1
 800fdae:	d505      	bpl.n	800fdbc <_fwalk_reent+0x24>
 800fdb0:	6824      	ldr	r4, [r4, #0]
 800fdb2:	2c00      	cmp	r4, #0
 800fdb4:	d1f7      	bne.n	800fda6 <_fwalk_reent+0xe>
 800fdb6:	4638      	mov	r0, r7
 800fdb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdbc:	89ab      	ldrh	r3, [r5, #12]
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d907      	bls.n	800fdd2 <_fwalk_reent+0x3a>
 800fdc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	d003      	beq.n	800fdd2 <_fwalk_reent+0x3a>
 800fdca:	4629      	mov	r1, r5
 800fdcc:	4630      	mov	r0, r6
 800fdce:	47c0      	blx	r8
 800fdd0:	4307      	orrs	r7, r0
 800fdd2:	3568      	adds	r5, #104	; 0x68
 800fdd4:	e7e9      	b.n	800fdaa <_fwalk_reent+0x12>

0800fdd6 <__retarget_lock_init_recursive>:
 800fdd6:	4770      	bx	lr

0800fdd8 <__retarget_lock_acquire_recursive>:
 800fdd8:	4770      	bx	lr

0800fdda <__retarget_lock_release_recursive>:
 800fdda:	4770      	bx	lr

0800fddc <__swhatbuf_r>:
 800fddc:	b570      	push	{r4, r5, r6, lr}
 800fdde:	460e      	mov	r6, r1
 800fde0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fde4:	2900      	cmp	r1, #0
 800fde6:	b096      	sub	sp, #88	; 0x58
 800fde8:	4614      	mov	r4, r2
 800fdea:	461d      	mov	r5, r3
 800fdec:	da07      	bge.n	800fdfe <__swhatbuf_r+0x22>
 800fdee:	2300      	movs	r3, #0
 800fdf0:	602b      	str	r3, [r5, #0]
 800fdf2:	89b3      	ldrh	r3, [r6, #12]
 800fdf4:	061a      	lsls	r2, r3, #24
 800fdf6:	d410      	bmi.n	800fe1a <__swhatbuf_r+0x3e>
 800fdf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fdfc:	e00e      	b.n	800fe1c <__swhatbuf_r+0x40>
 800fdfe:	466a      	mov	r2, sp
 800fe00:	f000 f946 	bl	8010090 <_fstat_r>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	dbf2      	blt.n	800fdee <__swhatbuf_r+0x12>
 800fe08:	9a01      	ldr	r2, [sp, #4]
 800fe0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fe0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fe12:	425a      	negs	r2, r3
 800fe14:	415a      	adcs	r2, r3
 800fe16:	602a      	str	r2, [r5, #0]
 800fe18:	e7ee      	b.n	800fdf8 <__swhatbuf_r+0x1c>
 800fe1a:	2340      	movs	r3, #64	; 0x40
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	6023      	str	r3, [r4, #0]
 800fe20:	b016      	add	sp, #88	; 0x58
 800fe22:	bd70      	pop	{r4, r5, r6, pc}

0800fe24 <__smakebuf_r>:
 800fe24:	898b      	ldrh	r3, [r1, #12]
 800fe26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe28:	079d      	lsls	r5, r3, #30
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	460c      	mov	r4, r1
 800fe2e:	d507      	bpl.n	800fe40 <__smakebuf_r+0x1c>
 800fe30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fe34:	6023      	str	r3, [r4, #0]
 800fe36:	6123      	str	r3, [r4, #16]
 800fe38:	2301      	movs	r3, #1
 800fe3a:	6163      	str	r3, [r4, #20]
 800fe3c:	b002      	add	sp, #8
 800fe3e:	bd70      	pop	{r4, r5, r6, pc}
 800fe40:	ab01      	add	r3, sp, #4
 800fe42:	466a      	mov	r2, sp
 800fe44:	f7ff ffca 	bl	800fddc <__swhatbuf_r>
 800fe48:	9900      	ldr	r1, [sp, #0]
 800fe4a:	4605      	mov	r5, r0
 800fe4c:	4630      	mov	r0, r6
 800fe4e:	f7ff f88f 	bl	800ef70 <_malloc_r>
 800fe52:	b948      	cbnz	r0, 800fe68 <__smakebuf_r+0x44>
 800fe54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe58:	059a      	lsls	r2, r3, #22
 800fe5a:	d4ef      	bmi.n	800fe3c <__smakebuf_r+0x18>
 800fe5c:	f023 0303 	bic.w	r3, r3, #3
 800fe60:	f043 0302 	orr.w	r3, r3, #2
 800fe64:	81a3      	strh	r3, [r4, #12]
 800fe66:	e7e3      	b.n	800fe30 <__smakebuf_r+0xc>
 800fe68:	4b0d      	ldr	r3, [pc, #52]	; (800fea0 <__smakebuf_r+0x7c>)
 800fe6a:	62b3      	str	r3, [r6, #40]	; 0x28
 800fe6c:	89a3      	ldrh	r3, [r4, #12]
 800fe6e:	6020      	str	r0, [r4, #0]
 800fe70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe74:	81a3      	strh	r3, [r4, #12]
 800fe76:	9b00      	ldr	r3, [sp, #0]
 800fe78:	6163      	str	r3, [r4, #20]
 800fe7a:	9b01      	ldr	r3, [sp, #4]
 800fe7c:	6120      	str	r0, [r4, #16]
 800fe7e:	b15b      	cbz	r3, 800fe98 <__smakebuf_r+0x74>
 800fe80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe84:	4630      	mov	r0, r6
 800fe86:	f000 f915 	bl	80100b4 <_isatty_r>
 800fe8a:	b128      	cbz	r0, 800fe98 <__smakebuf_r+0x74>
 800fe8c:	89a3      	ldrh	r3, [r4, #12]
 800fe8e:	f023 0303 	bic.w	r3, r3, #3
 800fe92:	f043 0301 	orr.w	r3, r3, #1
 800fe96:	81a3      	strh	r3, [r4, #12]
 800fe98:	89a0      	ldrh	r0, [r4, #12]
 800fe9a:	4305      	orrs	r5, r0
 800fe9c:	81a5      	strh	r5, [r4, #12]
 800fe9e:	e7cd      	b.n	800fe3c <__smakebuf_r+0x18>
 800fea0:	0800fc35 	.word	0x0800fc35

0800fea4 <memmove>:
 800fea4:	4288      	cmp	r0, r1
 800fea6:	b510      	push	{r4, lr}
 800fea8:	eb01 0402 	add.w	r4, r1, r2
 800feac:	d902      	bls.n	800feb4 <memmove+0x10>
 800feae:	4284      	cmp	r4, r0
 800feb0:	4623      	mov	r3, r4
 800feb2:	d807      	bhi.n	800fec4 <memmove+0x20>
 800feb4:	1e43      	subs	r3, r0, #1
 800feb6:	42a1      	cmp	r1, r4
 800feb8:	d008      	beq.n	800fecc <memmove+0x28>
 800feba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800febe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fec2:	e7f8      	b.n	800feb6 <memmove+0x12>
 800fec4:	4402      	add	r2, r0
 800fec6:	4601      	mov	r1, r0
 800fec8:	428a      	cmp	r2, r1
 800feca:	d100      	bne.n	800fece <memmove+0x2a>
 800fecc:	bd10      	pop	{r4, pc}
 800fece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fed6:	e7f7      	b.n	800fec8 <memmove+0x24>

0800fed8 <__malloc_lock>:
 800fed8:	4801      	ldr	r0, [pc, #4]	; (800fee0 <__malloc_lock+0x8>)
 800feda:	f7ff bf7d 	b.w	800fdd8 <__retarget_lock_acquire_recursive>
 800fede:	bf00      	nop
 800fee0:	200005e0 	.word	0x200005e0

0800fee4 <__malloc_unlock>:
 800fee4:	4801      	ldr	r0, [pc, #4]	; (800feec <__malloc_unlock+0x8>)
 800fee6:	f7ff bf78 	b.w	800fdda <__retarget_lock_release_recursive>
 800feea:	bf00      	nop
 800feec:	200005e0 	.word	0x200005e0

0800fef0 <_realloc_r>:
 800fef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fef2:	4607      	mov	r7, r0
 800fef4:	4614      	mov	r4, r2
 800fef6:	460e      	mov	r6, r1
 800fef8:	b921      	cbnz	r1, 800ff04 <_realloc_r+0x14>
 800fefa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fefe:	4611      	mov	r1, r2
 800ff00:	f7ff b836 	b.w	800ef70 <_malloc_r>
 800ff04:	b922      	cbnz	r2, 800ff10 <_realloc_r+0x20>
 800ff06:	f7fe ffe3 	bl	800eed0 <_free_r>
 800ff0a:	4625      	mov	r5, r4
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff10:	f000 f8f2 	bl	80100f8 <_malloc_usable_size_r>
 800ff14:	42a0      	cmp	r0, r4
 800ff16:	d20f      	bcs.n	800ff38 <_realloc_r+0x48>
 800ff18:	4621      	mov	r1, r4
 800ff1a:	4638      	mov	r0, r7
 800ff1c:	f7ff f828 	bl	800ef70 <_malloc_r>
 800ff20:	4605      	mov	r5, r0
 800ff22:	2800      	cmp	r0, #0
 800ff24:	d0f2      	beq.n	800ff0c <_realloc_r+0x1c>
 800ff26:	4631      	mov	r1, r6
 800ff28:	4622      	mov	r2, r4
 800ff2a:	f7fe fef5 	bl	800ed18 <memcpy>
 800ff2e:	4631      	mov	r1, r6
 800ff30:	4638      	mov	r0, r7
 800ff32:	f7fe ffcd 	bl	800eed0 <_free_r>
 800ff36:	e7e9      	b.n	800ff0c <_realloc_r+0x1c>
 800ff38:	4635      	mov	r5, r6
 800ff3a:	e7e7      	b.n	800ff0c <_realloc_r+0x1c>

0800ff3c <_raise_r>:
 800ff3c:	291f      	cmp	r1, #31
 800ff3e:	b538      	push	{r3, r4, r5, lr}
 800ff40:	4604      	mov	r4, r0
 800ff42:	460d      	mov	r5, r1
 800ff44:	d904      	bls.n	800ff50 <_raise_r+0x14>
 800ff46:	2316      	movs	r3, #22
 800ff48:	6003      	str	r3, [r0, #0]
 800ff4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff4e:	bd38      	pop	{r3, r4, r5, pc}
 800ff50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ff52:	b112      	cbz	r2, 800ff5a <_raise_r+0x1e>
 800ff54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff58:	b94b      	cbnz	r3, 800ff6e <_raise_r+0x32>
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f000 f830 	bl	800ffc0 <_getpid_r>
 800ff60:	462a      	mov	r2, r5
 800ff62:	4601      	mov	r1, r0
 800ff64:	4620      	mov	r0, r4
 800ff66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff6a:	f000 b817 	b.w	800ff9c <_kill_r>
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d00a      	beq.n	800ff88 <_raise_r+0x4c>
 800ff72:	1c59      	adds	r1, r3, #1
 800ff74:	d103      	bne.n	800ff7e <_raise_r+0x42>
 800ff76:	2316      	movs	r3, #22
 800ff78:	6003      	str	r3, [r0, #0]
 800ff7a:	2001      	movs	r0, #1
 800ff7c:	e7e7      	b.n	800ff4e <_raise_r+0x12>
 800ff7e:	2400      	movs	r4, #0
 800ff80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff84:	4628      	mov	r0, r5
 800ff86:	4798      	blx	r3
 800ff88:	2000      	movs	r0, #0
 800ff8a:	e7e0      	b.n	800ff4e <_raise_r+0x12>

0800ff8c <raise>:
 800ff8c:	4b02      	ldr	r3, [pc, #8]	; (800ff98 <raise+0xc>)
 800ff8e:	4601      	mov	r1, r0
 800ff90:	6818      	ldr	r0, [r3, #0]
 800ff92:	f7ff bfd3 	b.w	800ff3c <_raise_r>
 800ff96:	bf00      	nop
 800ff98:	20000040 	.word	0x20000040

0800ff9c <_kill_r>:
 800ff9c:	b538      	push	{r3, r4, r5, lr}
 800ff9e:	4d07      	ldr	r5, [pc, #28]	; (800ffbc <_kill_r+0x20>)
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	4608      	mov	r0, r1
 800ffa6:	4611      	mov	r1, r2
 800ffa8:	602b      	str	r3, [r5, #0]
 800ffaa:	f7f2 fe29 	bl	8002c00 <_kill>
 800ffae:	1c43      	adds	r3, r0, #1
 800ffb0:	d102      	bne.n	800ffb8 <_kill_r+0x1c>
 800ffb2:	682b      	ldr	r3, [r5, #0]
 800ffb4:	b103      	cbz	r3, 800ffb8 <_kill_r+0x1c>
 800ffb6:	6023      	str	r3, [r4, #0]
 800ffb8:	bd38      	pop	{r3, r4, r5, pc}
 800ffba:	bf00      	nop
 800ffbc:	200005e8 	.word	0x200005e8

0800ffc0 <_getpid_r>:
 800ffc0:	f7f2 be16 	b.w	8002bf0 <_getpid>

0800ffc4 <__sread>:
 800ffc4:	b510      	push	{r4, lr}
 800ffc6:	460c      	mov	r4, r1
 800ffc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffcc:	f000 f89c 	bl	8010108 <_read_r>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	bfab      	itete	ge
 800ffd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ffd6:	89a3      	ldrhlt	r3, [r4, #12]
 800ffd8:	181b      	addge	r3, r3, r0
 800ffda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ffde:	bfac      	ite	ge
 800ffe0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ffe2:	81a3      	strhlt	r3, [r4, #12]
 800ffe4:	bd10      	pop	{r4, pc}

0800ffe6 <__swrite>:
 800ffe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffea:	461f      	mov	r7, r3
 800ffec:	898b      	ldrh	r3, [r1, #12]
 800ffee:	05db      	lsls	r3, r3, #23
 800fff0:	4605      	mov	r5, r0
 800fff2:	460c      	mov	r4, r1
 800fff4:	4616      	mov	r6, r2
 800fff6:	d505      	bpl.n	8010004 <__swrite+0x1e>
 800fff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fffc:	2302      	movs	r3, #2
 800fffe:	2200      	movs	r2, #0
 8010000:	f000 f868 	bl	80100d4 <_lseek_r>
 8010004:	89a3      	ldrh	r3, [r4, #12]
 8010006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801000a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801000e:	81a3      	strh	r3, [r4, #12]
 8010010:	4632      	mov	r2, r6
 8010012:	463b      	mov	r3, r7
 8010014:	4628      	mov	r0, r5
 8010016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801001a:	f000 b817 	b.w	801004c <_write_r>

0801001e <__sseek>:
 801001e:	b510      	push	{r4, lr}
 8010020:	460c      	mov	r4, r1
 8010022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010026:	f000 f855 	bl	80100d4 <_lseek_r>
 801002a:	1c43      	adds	r3, r0, #1
 801002c:	89a3      	ldrh	r3, [r4, #12]
 801002e:	bf15      	itete	ne
 8010030:	6560      	strne	r0, [r4, #84]	; 0x54
 8010032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801003a:	81a3      	strheq	r3, [r4, #12]
 801003c:	bf18      	it	ne
 801003e:	81a3      	strhne	r3, [r4, #12]
 8010040:	bd10      	pop	{r4, pc}

08010042 <__sclose>:
 8010042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010046:	f000 b813 	b.w	8010070 <_close_r>
	...

0801004c <_write_r>:
 801004c:	b538      	push	{r3, r4, r5, lr}
 801004e:	4d07      	ldr	r5, [pc, #28]	; (801006c <_write_r+0x20>)
 8010050:	4604      	mov	r4, r0
 8010052:	4608      	mov	r0, r1
 8010054:	4611      	mov	r1, r2
 8010056:	2200      	movs	r2, #0
 8010058:	602a      	str	r2, [r5, #0]
 801005a:	461a      	mov	r2, r3
 801005c:	f7f2 fe07 	bl	8002c6e <_write>
 8010060:	1c43      	adds	r3, r0, #1
 8010062:	d102      	bne.n	801006a <_write_r+0x1e>
 8010064:	682b      	ldr	r3, [r5, #0]
 8010066:	b103      	cbz	r3, 801006a <_write_r+0x1e>
 8010068:	6023      	str	r3, [r4, #0]
 801006a:	bd38      	pop	{r3, r4, r5, pc}
 801006c:	200005e8 	.word	0x200005e8

08010070 <_close_r>:
 8010070:	b538      	push	{r3, r4, r5, lr}
 8010072:	4d06      	ldr	r5, [pc, #24]	; (801008c <_close_r+0x1c>)
 8010074:	2300      	movs	r3, #0
 8010076:	4604      	mov	r4, r0
 8010078:	4608      	mov	r0, r1
 801007a:	602b      	str	r3, [r5, #0]
 801007c:	f7f2 fe13 	bl	8002ca6 <_close>
 8010080:	1c43      	adds	r3, r0, #1
 8010082:	d102      	bne.n	801008a <_close_r+0x1a>
 8010084:	682b      	ldr	r3, [r5, #0]
 8010086:	b103      	cbz	r3, 801008a <_close_r+0x1a>
 8010088:	6023      	str	r3, [r4, #0]
 801008a:	bd38      	pop	{r3, r4, r5, pc}
 801008c:	200005e8 	.word	0x200005e8

08010090 <_fstat_r>:
 8010090:	b538      	push	{r3, r4, r5, lr}
 8010092:	4d07      	ldr	r5, [pc, #28]	; (80100b0 <_fstat_r+0x20>)
 8010094:	2300      	movs	r3, #0
 8010096:	4604      	mov	r4, r0
 8010098:	4608      	mov	r0, r1
 801009a:	4611      	mov	r1, r2
 801009c:	602b      	str	r3, [r5, #0]
 801009e:	f7f2 fe0e 	bl	8002cbe <_fstat>
 80100a2:	1c43      	adds	r3, r0, #1
 80100a4:	d102      	bne.n	80100ac <_fstat_r+0x1c>
 80100a6:	682b      	ldr	r3, [r5, #0]
 80100a8:	b103      	cbz	r3, 80100ac <_fstat_r+0x1c>
 80100aa:	6023      	str	r3, [r4, #0]
 80100ac:	bd38      	pop	{r3, r4, r5, pc}
 80100ae:	bf00      	nop
 80100b0:	200005e8 	.word	0x200005e8

080100b4 <_isatty_r>:
 80100b4:	b538      	push	{r3, r4, r5, lr}
 80100b6:	4d06      	ldr	r5, [pc, #24]	; (80100d0 <_isatty_r+0x1c>)
 80100b8:	2300      	movs	r3, #0
 80100ba:	4604      	mov	r4, r0
 80100bc:	4608      	mov	r0, r1
 80100be:	602b      	str	r3, [r5, #0]
 80100c0:	f7f2 fe0d 	bl	8002cde <_isatty>
 80100c4:	1c43      	adds	r3, r0, #1
 80100c6:	d102      	bne.n	80100ce <_isatty_r+0x1a>
 80100c8:	682b      	ldr	r3, [r5, #0]
 80100ca:	b103      	cbz	r3, 80100ce <_isatty_r+0x1a>
 80100cc:	6023      	str	r3, [r4, #0]
 80100ce:	bd38      	pop	{r3, r4, r5, pc}
 80100d0:	200005e8 	.word	0x200005e8

080100d4 <_lseek_r>:
 80100d4:	b538      	push	{r3, r4, r5, lr}
 80100d6:	4d07      	ldr	r5, [pc, #28]	; (80100f4 <_lseek_r+0x20>)
 80100d8:	4604      	mov	r4, r0
 80100da:	4608      	mov	r0, r1
 80100dc:	4611      	mov	r1, r2
 80100de:	2200      	movs	r2, #0
 80100e0:	602a      	str	r2, [r5, #0]
 80100e2:	461a      	mov	r2, r3
 80100e4:	f7f2 fe06 	bl	8002cf4 <_lseek>
 80100e8:	1c43      	adds	r3, r0, #1
 80100ea:	d102      	bne.n	80100f2 <_lseek_r+0x1e>
 80100ec:	682b      	ldr	r3, [r5, #0]
 80100ee:	b103      	cbz	r3, 80100f2 <_lseek_r+0x1e>
 80100f0:	6023      	str	r3, [r4, #0]
 80100f2:	bd38      	pop	{r3, r4, r5, pc}
 80100f4:	200005e8 	.word	0x200005e8

080100f8 <_malloc_usable_size_r>:
 80100f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100fc:	1f18      	subs	r0, r3, #4
 80100fe:	2b00      	cmp	r3, #0
 8010100:	bfbc      	itt	lt
 8010102:	580b      	ldrlt	r3, [r1, r0]
 8010104:	18c0      	addlt	r0, r0, r3
 8010106:	4770      	bx	lr

08010108 <_read_r>:
 8010108:	b538      	push	{r3, r4, r5, lr}
 801010a:	4d07      	ldr	r5, [pc, #28]	; (8010128 <_read_r+0x20>)
 801010c:	4604      	mov	r4, r0
 801010e:	4608      	mov	r0, r1
 8010110:	4611      	mov	r1, r2
 8010112:	2200      	movs	r2, #0
 8010114:	602a      	str	r2, [r5, #0]
 8010116:	461a      	mov	r2, r3
 8010118:	f7f2 fd8c 	bl	8002c34 <_read>
 801011c:	1c43      	adds	r3, r0, #1
 801011e:	d102      	bne.n	8010126 <_read_r+0x1e>
 8010120:	682b      	ldr	r3, [r5, #0]
 8010122:	b103      	cbz	r3, 8010126 <_read_r+0x1e>
 8010124:	6023      	str	r3, [r4, #0]
 8010126:	bd38      	pop	{r3, r4, r5, pc}
 8010128:	200005e8 	.word	0x200005e8

0801012c <_init>:
 801012c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801012e:	bf00      	nop
 8010130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010132:	bc08      	pop	{r3}
 8010134:	469e      	mov	lr, r3
 8010136:	4770      	bx	lr

08010138 <_fini>:
 8010138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801013a:	bf00      	nop
 801013c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801013e:	bc08      	pop	{r3}
 8010140:	469e      	mov	lr, r3
 8010142:	4770      	bx	lr
