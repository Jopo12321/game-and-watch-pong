
GamePong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  24000000  24000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 ._itcram      00000000  00000100  00000100  000400b0  2**0
                  CONTENTS
  2 ._itcram_hot  00000000  00000100  00000100  000400b0  2**0
                  CONTENTS
  3 ._ram_uc      0004b000  240002b0  240002b0  000102ac  2**4
                  ALLOC
  4 ._ram_exec    00000000  24050000  24050000  000400b0  2**0
                  CONTENTS
  5 ._extflash    00000000  90000000  90000000  000400b0  2**0
                  CONTENTS
  6 ._configflash 00000000  900ff000  900ff000  000400b0  2**0
                  CONTENTS
  7 ._ram         00000000  24050000  24050000  000400b0  2**0
                  CONTENTS
  8 ._ahbram      00005f94  30000000  30000000  00050000  2**4
                  ALLOC
  9 .text         0001294c  24050000  24050000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .rodata       00001a1c  2406294c  2406294c  0003294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init_array   00000004  24064368  24064368  00034368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .fini_array   00000004  2406436c  2406436c  0003436c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         000000b0  20000000  24064370  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 ._flash_end   00000000  24064370  24064370  000400b0  2**0
                  CONTENTS
 15 .bss          000006c0  200000b0  200000b0  000100b0  2**2
                  ALLOC
 16 ._persistent  00000000  20000770  20000770  000400b0  2**0
                  CONTENTS
 17 ._user_heap   00008000  20000770  20000770  000100b0  2**0
                  ALLOC
 18 ._user_stack  00017890  20008770  20008770  000100b0  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY
 20 .comment      00000043  00000000  00000000  000400de  2**0
                  CONTENTS, READONLY
 21 .debug_info   00028bca  00000000  00000000  00040121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00004e8a  00000000  00000000  00068ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 000020e0  00000000  00000000  0006db78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00039c40  00000000  00000000  0006fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   0002def6  00000000  00000000  000a9898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0016b556  00000000  00000000  000d778e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00001944  00000000  00000000  00242ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_frame  0000975c  00000000  00000000  00244628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 00000064  00000000  00000000  0024dd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24050000 <__do_global_dtors_aux>:
24050000:	b510      	push	{r4, lr}
24050002:	4c05      	ldr	r4, [pc, #20]	; (24050018 <__do_global_dtors_aux+0x18>)
24050004:	7823      	ldrb	r3, [r4, #0]
24050006:	b933      	cbnz	r3, 24050016 <__do_global_dtors_aux+0x16>
24050008:	4b04      	ldr	r3, [pc, #16]	; (2405001c <__do_global_dtors_aux+0x1c>)
2405000a:	b113      	cbz	r3, 24050012 <__do_global_dtors_aux+0x12>
2405000c:	4804      	ldr	r0, [pc, #16]	; (24050020 <__do_global_dtors_aux+0x20>)
2405000e:	f3af 8000 	nop.w
24050012:	2301      	movs	r3, #1
24050014:	7023      	strb	r3, [r4, #0]
24050016:	bd10      	pop	{r4, pc}
24050018:	200000b0 	.word	0x200000b0
2405001c:	00000000 	.word	0x00000000
24050020:	24062934 	.word	0x24062934

24050024 <frame_dummy>:
24050024:	b508      	push	{r3, lr}
24050026:	4b03      	ldr	r3, [pc, #12]	; (24050034 <frame_dummy+0x10>)
24050028:	b11b      	cbz	r3, 24050032 <frame_dummy+0xe>
2405002a:	4903      	ldr	r1, [pc, #12]	; (24050038 <frame_dummy+0x14>)
2405002c:	4803      	ldr	r0, [pc, #12]	; (2405003c <frame_dummy+0x18>)
2405002e:	f3af 8000 	nop.w
24050032:	bd08      	pop	{r3, pc}
24050034:	00000000 	.word	0x00000000
24050038:	200000b4 	.word	0x200000b4
2405003c:	24062934 	.word	0x24062934

24050040 <memchr>:
24050040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
24050044:	2a10      	cmp	r2, #16
24050046:	db2b      	blt.n	240500a0 <memchr+0x60>
24050048:	f010 0f07 	tst.w	r0, #7
2405004c:	d008      	beq.n	24050060 <memchr+0x20>
2405004e:	f810 3b01 	ldrb.w	r3, [r0], #1
24050052:	3a01      	subs	r2, #1
24050054:	428b      	cmp	r3, r1
24050056:	d02d      	beq.n	240500b4 <memchr+0x74>
24050058:	f010 0f07 	tst.w	r0, #7
2405005c:	b342      	cbz	r2, 240500b0 <memchr+0x70>
2405005e:	d1f6      	bne.n	2405004e <memchr+0xe>
24050060:	b4f0      	push	{r4, r5, r6, r7}
24050062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
24050066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2405006a:	f022 0407 	bic.w	r4, r2, #7
2405006e:	f07f 0700 	mvns.w	r7, #0
24050072:	2300      	movs	r3, #0
24050074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
24050078:	3c08      	subs	r4, #8
2405007a:	ea85 0501 	eor.w	r5, r5, r1
2405007e:	ea86 0601 	eor.w	r6, r6, r1
24050082:	fa85 f547 	uadd8	r5, r5, r7
24050086:	faa3 f587 	sel	r5, r3, r7
2405008a:	fa86 f647 	uadd8	r6, r6, r7
2405008e:	faa5 f687 	sel	r6, r5, r7
24050092:	b98e      	cbnz	r6, 240500b8 <memchr+0x78>
24050094:	d1ee      	bne.n	24050074 <memchr+0x34>
24050096:	bcf0      	pop	{r4, r5, r6, r7}
24050098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2405009c:	f002 0207 	and.w	r2, r2, #7
240500a0:	b132      	cbz	r2, 240500b0 <memchr+0x70>
240500a2:	f810 3b01 	ldrb.w	r3, [r0], #1
240500a6:	3a01      	subs	r2, #1
240500a8:	ea83 0301 	eor.w	r3, r3, r1
240500ac:	b113      	cbz	r3, 240500b4 <memchr+0x74>
240500ae:	d1f8      	bne.n	240500a2 <memchr+0x62>
240500b0:	2000      	movs	r0, #0
240500b2:	4770      	bx	lr
240500b4:	3801      	subs	r0, #1
240500b6:	4770      	bx	lr
240500b8:	2d00      	cmp	r5, #0
240500ba:	bf06      	itte	eq
240500bc:	4635      	moveq	r5, r6
240500be:	3803      	subeq	r0, #3
240500c0:	3807      	subne	r0, #7
240500c2:	f015 0f01 	tst.w	r5, #1
240500c6:	d107      	bne.n	240500d8 <memchr+0x98>
240500c8:	3001      	adds	r0, #1
240500ca:	f415 7f80 	tst.w	r5, #256	; 0x100
240500ce:	bf02      	ittt	eq
240500d0:	3001      	addeq	r0, #1
240500d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
240500d6:	3001      	addeq	r0, #1
240500d8:	bcf0      	pop	{r4, r5, r6, r7}
240500da:	3801      	subs	r0, #1
240500dc:	4770      	bx	lr
240500de:	bf00      	nop

240500e0 <game_init>:
int ball_xspeed;
int ball_yspeed;
int ball_x;
int ball_y;

void game_init(void) {
240500e0:	b580      	push	{r7, lr}
240500e2:	b082      	sub	sp, #8
240500e4:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
240500e6:	f002 f96f 	bl	240523c8 <lcd_get_active_buffer>
240500ea:	6078      	str	r0, [r7, #4]
	draw_background(buf);
240500ec:	6878      	ldr	r0, [r7, #4]
240500ee:	f000 f863 	bl	240501b8 <draw_background>
	ball_xspeed = randsing() * ball_speed;
240500f2:	f011 fac7 	bl	24061684 <rand>
240500f6:	4603      	mov	r3, r0
240500f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240500fc:	db02      	blt.n	24050104 <game_init+0x24>
240500fe:	f04f 33ff 	mov.w	r3, #4294967295
24050102:	e000      	b.n	24050106 <game_init+0x26>
24050104:	2301      	movs	r3, #1
24050106:	2203      	movs	r2, #3
24050108:	fb02 f303 	mul.w	r3, r2, r3
2405010c:	4a18      	ldr	r2, [pc, #96]	; (24050170 <game_init+0x90>)
2405010e:	6013      	str	r3, [r2, #0]
	ball_yspeed = randsing() * ball_speed;
24050110:	f011 fab8 	bl	24061684 <rand>
24050114:	4603      	mov	r3, r0
24050116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405011a:	db02      	blt.n	24050122 <game_init+0x42>
2405011c:	f04f 33ff 	mov.w	r3, #4294967295
24050120:	e000      	b.n	24050124 <game_init+0x44>
24050122:	2301      	movs	r3, #1
24050124:	2203      	movs	r2, #3
24050126:	fb02 f303 	mul.w	r3, r2, r3
2405012a:	4a12      	ldr	r2, [pc, #72]	; (24050174 <game_init+0x94>)
2405012c:	6013      	str	r3, [r2, #0]
	ball_x = 160;
2405012e:	4b12      	ldr	r3, [pc, #72]	; (24050178 <game_init+0x98>)
24050130:	22a0      	movs	r2, #160	; 0xa0
24050132:	601a      	str	r2, [r3, #0]
	ball_y = randint(190, 70);
24050134:	f011 faa6 	bl	24061684 <rand>
24050138:	4601      	mov	r1, r0
2405013a:	4b10      	ldr	r3, [pc, #64]	; (2405017c <game_init+0x9c>)
2405013c:	fb83 2301 	smull	r2, r3, r3, r1
24050140:	105a      	asrs	r2, r3, #1
24050142:	17cb      	asrs	r3, r1, #31
24050144:	1ad2      	subs	r2, r2, r3
24050146:	4613      	mov	r3, r2
24050148:	011b      	lsls	r3, r3, #4
2405014a:	1a9b      	subs	r3, r3, r2
2405014c:	00db      	lsls	r3, r3, #3
2405014e:	4413      	add	r3, r2
24050150:	1aca      	subs	r2, r1, r3
24050152:	f102 0346 	add.w	r3, r2, #70	; 0x46
24050156:	4a0a      	ldr	r2, [pc, #40]	; (24050180 <game_init+0xa0>)
24050158:	6013      	str	r3, [r2, #0]
	lcd_sync();
2405015a:	f002 f91d 	bl	24052398 <lcd_sync>
	lcd_swap();
2405015e:	f002 f905 	bl	2405236c <lcd_swap>
	lcd_wait_for_vblank();
24050162:	f002 f95d 	bl	24052420 <lcd_wait_for_vblank>
}
24050166:	bf00      	nop
24050168:	3708      	adds	r7, #8
2405016a:	46bd      	mov	sp, r7
2405016c:	bd80      	pop	{r7, pc}
2405016e:	bf00      	nop
24050170:	200001e4 	.word	0x200001e4
24050174:	200001e8 	.word	0x200001e8
24050178:	200001ec 	.word	0x200001ec
2405017c:	043b3d5b 	.word	0x043b3d5b
24050180:	200001f0 	.word	0x200001f0

24050184 <game_loop>:

void game_loop(void) {
24050184:	b580      	push	{r7, lr}
24050186:	b082      	sub	sp, #8
24050188:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
2405018a:	f002 f91d 	bl	240523c8 <lcd_get_active_buffer>
2405018e:	6078      	str	r0, [r7, #4]
	draw_background(buf);
24050190:	6878      	ldr	r0, [r7, #4]
24050192:	f000 f811 	bl	240501b8 <draw_background>
	update_player(buf);
24050196:	6878      	ldr	r0, [r7, #4]
24050198:	f000 f878 	bl	2405028c <update_player>
	update_ai(buf);
2405019c:	6878      	ldr	r0, [r7, #4]
2405019e:	f000 f9e1 	bl	24050564 <update_ai>
	update_ball(buf);
240501a2:	6878      	ldr	r0, [r7, #4]
240501a4:	f000 f8ec 	bl	24050380 <update_ball>
	lcd_swap();
240501a8:	f002 f8e0 	bl	2405236c <lcd_swap>
	lcd_wait_for_vblank();
240501ac:	f002 f938 	bl	24052420 <lcd_wait_for_vblank>
}
240501b0:	bf00      	nop
240501b2:	3708      	adds	r7, #8
240501b4:	46bd      	mov	sp, r7
240501b6:	bd80      	pop	{r7, pc}

240501b8 <draw_background>:

void draw_background(uint16_t *buf) {
240501b8:	b590      	push	{r4, r7, lr}
240501ba:	b085      	sub	sp, #20
240501bc:	af02      	add	r7, sp, #8
240501be:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
240501c0:	2100      	movs	r1, #0
240501c2:	6878      	ldr	r0, [r7, #4]
240501c4:	f000 fa76 	bl	240506b4 <LCD_Clear>
	LCD_DrawRect(buf, 0, 20, LCD_GetXSize() - 1, LCD_GetYSize() - 21,
240501c8:	f000 fa26 	bl	24050618 <LCD_GetXSize>
240501cc:	4603      	mov	r3, r0
240501ce:	3b01      	subs	r3, #1
240501d0:	b29c      	uxth	r4, r3
240501d2:	f000 fa2a 	bl	2405062a <LCD_GetYSize>
240501d6:	4603      	mov	r3, r0
240501d8:	3b15      	subs	r3, #21
240501da:	b29b      	uxth	r3, r3
240501dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
240501e0:	9201      	str	r2, [sp, #4]
240501e2:	9300      	str	r3, [sp, #0]
240501e4:	4623      	mov	r3, r4
240501e6:	2214      	movs	r2, #20
240501e8:	2100      	movs	r1, #0
240501ea:	6878      	ldr	r0, [r7, #4]
240501ec:	f000 fba8 	bl	24050940 <LCD_DrawRect>
	LCD_COLOR_WHITE);
	draw_score(buf);
240501f0:	6878      	ldr	r0, [r7, #4]
240501f2:	f000 f805 	bl	24050200 <draw_score>
}
240501f6:	bf00      	nop
240501f8:	370c      	adds	r7, #12
240501fa:	46bd      	mov	sp, r7
240501fc:	bd90      	pop	{r4, r7, pc}
	...

24050200 <draw_score>:

void draw_score(uint16_t *buf) {
24050200:	b580      	push	{r7, lr}
24050202:	b084      	sub	sp, #16
24050204:	af02      	add	r7, sp, #8
24050206:	6078      	str	r0, [r7, #4]
	LCD_SetFont(&Font16);
24050208:	4818      	ldr	r0, [pc, #96]	; (2405026c <draw_score+0x6c>)
2405020a:	f000 fa17 	bl	2405063c <LCD_SetFont>
	sprintf(score_p1_buf, "%d", score_p1);
2405020e:	4b18      	ldr	r3, [pc, #96]	; (24050270 <draw_score+0x70>)
24050210:	681b      	ldr	r3, [r3, #0]
24050212:	461a      	mov	r2, r3
24050214:	4917      	ldr	r1, [pc, #92]	; (24050274 <draw_score+0x74>)
24050216:	4818      	ldr	r0, [pc, #96]	; (24050278 <draw_score+0x78>)
24050218:	f011 fbe4 	bl	240619e4 <siprintf>
	LCD_DisplayStringAt(buf, 0, 4, (uint8_t*) score_p1_buf, LEFT_MODE);
2405021c:	2303      	movs	r3, #3
2405021e:	9300      	str	r3, [sp, #0]
24050220:	4b15      	ldr	r3, [pc, #84]	; (24050278 <draw_score+0x78>)
24050222:	2204      	movs	r2, #4
24050224:	2100      	movs	r1, #0
24050226:	6878      	ldr	r0, [r7, #4]
24050228:	f000 fa5e 	bl	240506e8 <LCD_DisplayStringAt>
	sprintf(score_p2_buf, "%d", score_p2);
2405022c:	4b13      	ldr	r3, [pc, #76]	; (2405027c <draw_score+0x7c>)
2405022e:	681b      	ldr	r3, [r3, #0]
24050230:	461a      	mov	r2, r3
24050232:	4910      	ldr	r1, [pc, #64]	; (24050274 <draw_score+0x74>)
24050234:	4812      	ldr	r0, [pc, #72]	; (24050280 <draw_score+0x80>)
24050236:	f011 fbd5 	bl	240619e4 <siprintf>
	LCD_DisplayStringAt(buf, 2, 4, (uint8_t*) score_p2_buf, RIGHT_MODE);
2405023a:	2302      	movs	r3, #2
2405023c:	9300      	str	r3, [sp, #0]
2405023e:	4b10      	ldr	r3, [pc, #64]	; (24050280 <draw_score+0x80>)
24050240:	2204      	movs	r2, #4
24050242:	2102      	movs	r1, #2
24050244:	6878      	ldr	r0, [r7, #4]
24050246:	f000 fa4f 	bl	240506e8 <LCD_DisplayStringAt>
	sprintf(text_buf, "SCORE");
2405024a:	490e      	ldr	r1, [pc, #56]	; (24050284 <draw_score+0x84>)
2405024c:	480e      	ldr	r0, [pc, #56]	; (24050288 <draw_score+0x88>)
2405024e:	f011 fbc9 	bl	240619e4 <siprintf>
	LCD_DisplayStringAt(buf, 1, 4, (uint8_t*) text_buf, CENTER_MODE);
24050252:	2301      	movs	r3, #1
24050254:	9300      	str	r3, [sp, #0]
24050256:	4b0c      	ldr	r3, [pc, #48]	; (24050288 <draw_score+0x88>)
24050258:	2204      	movs	r2, #4
2405025a:	2101      	movs	r1, #1
2405025c:	6878      	ldr	r0, [r7, #4]
2405025e:	f000 fa43 	bl	240506e8 <LCD_DisplayStringAt>
}
24050262:	bf00      	nop
24050264:	3708      	adds	r7, #8
24050266:	46bd      	mov	sp, r7
24050268:	bd80      	pop	{r7, pc}
2405026a:	bf00      	nop
2405026c:	20000008 	.word	0x20000008
24050270:	200000cc 	.word	0x200000cc
24050274:	2406294c 	.word	0x2406294c
24050278:	200000d4 	.word	0x200000d4
2405027c:	200000d0 	.word	0x200000d0
24050280:	200000dc 	.word	0x200000dc
24050284:	24062950 	.word	0x24062950
24050288:	200000e4 	.word	0x200000e4

2405028c <update_player>:

void update_player(uint16_t *buf) {
2405028c:	b590      	push	{r4, r7, lr}
2405028e:	b087      	sub	sp, #28
24050290:	af02      	add	r7, sp, #8
24050292:	6078      	str	r0, [r7, #4]
	uint32_t buttons = buttons_get();
24050294:	f001 f9ce 	bl	24051634 <buttons_get>
24050298:	60f8      	str	r0, [r7, #12]
	if (buttons & B_Up) {
2405029a:	68fb      	ldr	r3, [r7, #12]
2405029c:	f003 0302 	and.w	r3, r3, #2
240502a0:	2b00      	cmp	r3, #0
240502a2:	d00c      	beq.n	240502be <update_player+0x32>
		if (p1_y >= 20 + p1_speed + 2) {
240502a4:	2302      	movs	r3, #2
240502a6:	f103 0215 	add.w	r2, r3, #21
240502aa:	4b2f      	ldr	r3, [pc, #188]	; (24050368 <update_player+0xdc>)
240502ac:	681b      	ldr	r3, [r3, #0]
240502ae:	429a      	cmp	r2, r3
240502b0:	da05      	bge.n	240502be <update_player+0x32>
			p1_y = p1_y - p1_speed;
240502b2:	4b2d      	ldr	r3, [pc, #180]	; (24050368 <update_player+0xdc>)
240502b4:	681b      	ldr	r3, [r3, #0]
240502b6:	2202      	movs	r2, #2
240502b8:	1a9b      	subs	r3, r3, r2
240502ba:	4a2b      	ldr	r2, [pc, #172]	; (24050368 <update_player+0xdc>)
240502bc:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_Down) {
240502be:	68fb      	ldr	r3, [r7, #12]
240502c0:	f003 0308 	and.w	r3, r3, #8
240502c4:	2b00      	cmp	r3, #0
240502c6:	d012      	beq.n	240502ee <update_player+0x62>
		if (p1_y <= LCD_GetYSize() - p1_height - p1_speed - 2) {
240502c8:	f000 f9af 	bl	2405062a <LCD_GetYSize>
240502cc:	4603      	mov	r3, r0
240502ce:	461a      	mov	r2, r3
240502d0:	2328      	movs	r3, #40	; 0x28
240502d2:	1ad3      	subs	r3, r2, r3
240502d4:	2202      	movs	r2, #2
240502d6:	1a9b      	subs	r3, r3, r2
240502d8:	1e5a      	subs	r2, r3, #1
240502da:	4b23      	ldr	r3, [pc, #140]	; (24050368 <update_player+0xdc>)
240502dc:	681b      	ldr	r3, [r3, #0]
240502de:	429a      	cmp	r2, r3
240502e0:	dd05      	ble.n	240502ee <update_player+0x62>
			p1_y = p1_y + p1_speed;
240502e2:	4b21      	ldr	r3, [pc, #132]	; (24050368 <update_player+0xdc>)
240502e4:	681b      	ldr	r3, [r3, #0]
240502e6:	2202      	movs	r2, #2
240502e8:	4413      	add	r3, r2
240502ea:	4a1f      	ldr	r2, [pc, #124]	; (24050368 <update_player+0xdc>)
240502ec:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_GAME) {
240502ee:	68fb      	ldr	r3, [r7, #12]
240502f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
240502f4:	2b00      	cmp	r3, #0
240502f6:	d01a      	beq.n	2405032e <update_player+0xa2>
		score_p1 = 0;
240502f8:	4b1c      	ldr	r3, [pc, #112]	; (2405036c <update_player+0xe0>)
240502fa:	2200      	movs	r2, #0
240502fc:	601a      	str	r2, [r3, #0]
		score_p2 = 0;
240502fe:	4b1c      	ldr	r3, [pc, #112]	; (24050370 <update_player+0xe4>)
24050300:	2200      	movs	r2, #0
24050302:	601a      	str	r2, [r3, #0]
		p1_x = 3;
24050304:	4b1b      	ldr	r3, [pc, #108]	; (24050374 <update_player+0xe8>)
24050306:	2203      	movs	r2, #3
24050308:	601a      	str	r2, [r3, #0]
		p1_y = 110;
2405030a:	4b17      	ldr	r3, [pc, #92]	; (24050368 <update_player+0xdc>)
2405030c:	226e      	movs	r2, #110	; 0x6e
2405030e:	601a      	str	r2, [r3, #0]
		p2_x = 320 - 3 - p2_width;
24050310:	2205      	movs	r2, #5
24050312:	f240 133d 	movw	r3, #317	; 0x13d
24050316:	1a9b      	subs	r3, r3, r2
24050318:	4a17      	ldr	r2, [pc, #92]	; (24050378 <update_player+0xec>)
2405031a:	6013      	str	r3, [r2, #0]
		p2_y = 110;
2405031c:	4b17      	ldr	r3, [pc, #92]	; (2405037c <update_player+0xf0>)
2405031e:	226e      	movs	r2, #110	; 0x6e
24050320:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
24050322:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
24050326:	f003 fd99 	bl	24053e5c <HAL_Delay>
		game_init();
2405032a:	f7ff fed9 	bl	240500e0 <game_init>
	}
	if (buttons & B_POWER) {
2405032e:	68fb      	ldr	r3, [r7, #12]
24050330:	f403 7300 	and.w	r3, r3, #512	; 0x200
24050334:	2b00      	cmp	r3, #0
24050336:	d001      	beq.n	2405033c <update_player+0xb0>
		HAL_NVIC_SystemReset();
24050338:	f005 fde5 	bl	24055f06 <HAL_NVIC_SystemReset>
	}
	LCD_FillRect(buf, p1_x, p1_y, p1_width, p1_height, LCD_COLOR_WHITE);
2405033c:	4b0d      	ldr	r3, [pc, #52]	; (24050374 <update_player+0xe8>)
2405033e:	681b      	ldr	r3, [r3, #0]
24050340:	b299      	uxth	r1, r3
24050342:	4b09      	ldr	r3, [pc, #36]	; (24050368 <update_player+0xdc>)
24050344:	681b      	ldr	r3, [r3, #0]
24050346:	b29a      	uxth	r2, r3
24050348:	2305      	movs	r3, #5
2405034a:	b298      	uxth	r0, r3
2405034c:	2328      	movs	r3, #40	; 0x28
2405034e:	b29b      	uxth	r3, r3
24050350:	f64f 74ff 	movw	r4, #65535	; 0xffff
24050354:	9401      	str	r4, [sp, #4]
24050356:	9300      	str	r3, [sp, #0]
24050358:	4603      	mov	r3, r0
2405035a:	6878      	ldr	r0, [r7, #4]
2405035c:	f000 fbd4 	bl	24050b08 <LCD_FillRect>
}
24050360:	bf00      	nop
24050362:	3714      	adds	r7, #20
24050364:	46bd      	mov	sp, r7
24050366:	bd90      	pop	{r4, r7, pc}
24050368:	20000014 	.word	0x20000014
2405036c:	200000cc 	.word	0x200000cc
24050370:	200000d0 	.word	0x200000d0
24050374:	20000010 	.word	0x20000010
24050378:	20000018 	.word	0x20000018
2405037c:	2000001c 	.word	0x2000001c

24050380 <update_ball>:

void update_ball(uint16_t *buf) {
24050380:	b580      	push	{r7, lr}
24050382:	b084      	sub	sp, #16
24050384:	af02      	add	r7, sp, #8
24050386:	6078      	str	r0, [r7, #4]

	if (ball_x <= ball_r + ball_speed + p1_x + p1_width / 2
24050388:	2208      	movs	r2, #8
2405038a:	2303      	movs	r3, #3
2405038c:	441a      	add	r2, r3
2405038e:	4b6b      	ldr	r3, [pc, #428]	; (2405053c <update_ball+0x1bc>)
24050390:	681b      	ldr	r3, [r3, #0]
24050392:	441a      	add	r2, r3
24050394:	2305      	movs	r3, #5
24050396:	2b00      	cmp	r3, #0
24050398:	da00      	bge.n	2405039c <update_ball+0x1c>
2405039a:	3301      	adds	r3, #1
2405039c:	105b      	asrs	r3, r3, #1
2405039e:	441a      	add	r2, r3
240503a0:	4b67      	ldr	r3, [pc, #412]	; (24050540 <update_ball+0x1c0>)
240503a2:	681b      	ldr	r3, [r3, #0]
240503a4:	429a      	cmp	r2, r3
240503a6:	db38      	blt.n	2405041a <update_ball+0x9a>
			&& ball_xspeed == -ball_speed) {
240503a8:	2303      	movs	r3, #3
240503aa:	425a      	negs	r2, r3
240503ac:	4b65      	ldr	r3, [pc, #404]	; (24050544 <update_ball+0x1c4>)
240503ae:	681b      	ldr	r3, [r3, #0]
240503b0:	429a      	cmp	r2, r3
240503b2:	d132      	bne.n	2405041a <update_ball+0x9a>
		ball_xspeed = ball_speed;
240503b4:	2203      	movs	r2, #3
240503b6:	4b63      	ldr	r3, [pc, #396]	; (24050544 <update_ball+0x1c4>)
240503b8:	601a      	str	r2, [r3, #0]
		if (ball_y >= p1_y - 2 && ball_y <= p1_y + p1_height + 2) {
240503ba:	4b63      	ldr	r3, [pc, #396]	; (24050548 <update_ball+0x1c8>)
240503bc:	681b      	ldr	r3, [r3, #0]
240503be:	1e9a      	subs	r2, r3, #2
240503c0:	4b62      	ldr	r3, [pc, #392]	; (2405054c <update_ball+0x1cc>)
240503c2:	681b      	ldr	r3, [r3, #0]
240503c4:	429a      	cmp	r2, r3
240503c6:	dc08      	bgt.n	240503da <update_ball+0x5a>
240503c8:	4b5f      	ldr	r3, [pc, #380]	; (24050548 <update_ball+0x1c8>)
240503ca:	681b      	ldr	r3, [r3, #0]
240503cc:	2228      	movs	r2, #40	; 0x28
240503ce:	4413      	add	r3, r2
240503d0:	1c9a      	adds	r2, r3, #2
240503d2:	4b5e      	ldr	r3, [pc, #376]	; (2405054c <update_ball+0x1cc>)
240503d4:	681b      	ldr	r3, [r3, #0]
240503d6:	429a      	cmp	r2, r3
240503d8:	da1f      	bge.n	2405041a <update_ball+0x9a>

		} else {
			score_p2++;
240503da:	4b5d      	ldr	r3, [pc, #372]	; (24050550 <update_ball+0x1d0>)
240503dc:	681b      	ldr	r3, [r3, #0]
240503de:	3301      	adds	r3, #1
240503e0:	4a5b      	ldr	r2, [pc, #364]	; (24050550 <update_ball+0x1d0>)
240503e2:	6013      	str	r3, [r2, #0]
			draw_score(buf);
240503e4:	6878      	ldr	r0, [r7, #4]
240503e6:	f7ff ff0b 	bl	24050200 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
240503ea:	4b55      	ldr	r3, [pc, #340]	; (24050540 <update_ball+0x1c0>)
240503ec:	681b      	ldr	r3, [r3, #0]
240503ee:	b299      	uxth	r1, r3
240503f0:	4b56      	ldr	r3, [pc, #344]	; (2405054c <update_ball+0x1cc>)
240503f2:	681b      	ldr	r3, [r3, #0]
240503f4:	b29a      	uxth	r2, r3
240503f6:	2308      	movs	r3, #8
240503f8:	b29b      	uxth	r3, r3
240503fa:	f44f 4078 	mov.w	r0, #63488	; 0xf800
240503fe:	9000      	str	r0, [sp, #0]
24050400:	6878      	ldr	r0, [r7, #4]
24050402:	f000 fbb2 	bl	24050b6a <LCD_FillCircle>
			lcd_swap();
24050406:	f001 ffb1 	bl	2405236c <lcd_swap>
			lcd_wait_for_vblank();
2405040a:	f002 f809 	bl	24052420 <lcd_wait_for_vblank>
			HAL_Delay(1000);
2405040e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
24050412:	f003 fd23 	bl	24053e5c <HAL_Delay>
			game_init();
24050416:	f7ff fe63 	bl	240500e0 <game_init>
		}
	}
	if (ball_x >= p2_x + p2_width / 2 - ball_r - ball_speed
2405041a:	2305      	movs	r3, #5
2405041c:	2b00      	cmp	r3, #0
2405041e:	da00      	bge.n	24050422 <update_ball+0xa2>
24050420:	3301      	adds	r3, #1
24050422:	105b      	asrs	r3, r3, #1
24050424:	461a      	mov	r2, r3
24050426:	4b4b      	ldr	r3, [pc, #300]	; (24050554 <update_ball+0x1d4>)
24050428:	681b      	ldr	r3, [r3, #0]
2405042a:	4413      	add	r3, r2
2405042c:	2208      	movs	r2, #8
2405042e:	1a9b      	subs	r3, r3, r2
24050430:	2203      	movs	r2, #3
24050432:	1a9a      	subs	r2, r3, r2
24050434:	4b42      	ldr	r3, [pc, #264]	; (24050540 <update_ball+0x1c0>)
24050436:	681b      	ldr	r3, [r3, #0]
24050438:	429a      	cmp	r2, r3
2405043a:	dc38      	bgt.n	240504ae <update_ball+0x12e>
			&& ball_xspeed == ball_speed) {
2405043c:	4b41      	ldr	r3, [pc, #260]	; (24050544 <update_ball+0x1c4>)
2405043e:	681b      	ldr	r3, [r3, #0]
24050440:	2203      	movs	r2, #3
24050442:	4293      	cmp	r3, r2
24050444:	d133      	bne.n	240504ae <update_ball+0x12e>
		ball_xspeed = -ball_speed;
24050446:	2303      	movs	r3, #3
24050448:	425b      	negs	r3, r3
2405044a:	4a3e      	ldr	r2, [pc, #248]	; (24050544 <update_ball+0x1c4>)
2405044c:	6013      	str	r3, [r2, #0]
		if (ball_y >= p2_y - 2 && ball_y <= p2_y + p2_height + 2) {
2405044e:	4b42      	ldr	r3, [pc, #264]	; (24050558 <update_ball+0x1d8>)
24050450:	681b      	ldr	r3, [r3, #0]
24050452:	1e9a      	subs	r2, r3, #2
24050454:	4b3d      	ldr	r3, [pc, #244]	; (2405054c <update_ball+0x1cc>)
24050456:	681b      	ldr	r3, [r3, #0]
24050458:	429a      	cmp	r2, r3
2405045a:	dc08      	bgt.n	2405046e <update_ball+0xee>
2405045c:	4b3e      	ldr	r3, [pc, #248]	; (24050558 <update_ball+0x1d8>)
2405045e:	681b      	ldr	r3, [r3, #0]
24050460:	2228      	movs	r2, #40	; 0x28
24050462:	4413      	add	r3, r2
24050464:	1c9a      	adds	r2, r3, #2
24050466:	4b39      	ldr	r3, [pc, #228]	; (2405054c <update_ball+0x1cc>)
24050468:	681b      	ldr	r3, [r3, #0]
2405046a:	429a      	cmp	r2, r3
2405046c:	da1f      	bge.n	240504ae <update_ball+0x12e>

		} else {
			score_p1++;
2405046e:	4b3b      	ldr	r3, [pc, #236]	; (2405055c <update_ball+0x1dc>)
24050470:	681b      	ldr	r3, [r3, #0]
24050472:	3301      	adds	r3, #1
24050474:	4a39      	ldr	r2, [pc, #228]	; (2405055c <update_ball+0x1dc>)
24050476:	6013      	str	r3, [r2, #0]
			draw_score(buf);
24050478:	6878      	ldr	r0, [r7, #4]
2405047a:	f7ff fec1 	bl	24050200 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
2405047e:	4b30      	ldr	r3, [pc, #192]	; (24050540 <update_ball+0x1c0>)
24050480:	681b      	ldr	r3, [r3, #0]
24050482:	b299      	uxth	r1, r3
24050484:	4b31      	ldr	r3, [pc, #196]	; (2405054c <update_ball+0x1cc>)
24050486:	681b      	ldr	r3, [r3, #0]
24050488:	b29a      	uxth	r2, r3
2405048a:	2308      	movs	r3, #8
2405048c:	b29b      	uxth	r3, r3
2405048e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
24050492:	9000      	str	r0, [sp, #0]
24050494:	6878      	ldr	r0, [r7, #4]
24050496:	f000 fb68 	bl	24050b6a <LCD_FillCircle>
			lcd_swap();
2405049a:	f001 ff67 	bl	2405236c <lcd_swap>
			lcd_wait_for_vblank();
2405049e:	f001 ffbf 	bl	24052420 <lcd_wait_for_vblank>
			HAL_Delay(1000);
240504a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
240504a6:	f003 fcd9 	bl	24053e5c <HAL_Delay>
			game_init();
240504aa:	f7ff fe19 	bl	240500e0 <game_init>
		}
	}
	if (ball_y <= 20 + ball_r + ball_speed && ball_yspeed == -ball_speed) {
240504ae:	2308      	movs	r3, #8
240504b0:	3314      	adds	r3, #20
240504b2:	2203      	movs	r2, #3
240504b4:	441a      	add	r2, r3
240504b6:	4b25      	ldr	r3, [pc, #148]	; (2405054c <update_ball+0x1cc>)
240504b8:	681b      	ldr	r3, [r3, #0]
240504ba:	429a      	cmp	r2, r3
240504bc:	db08      	blt.n	240504d0 <update_ball+0x150>
240504be:	2303      	movs	r3, #3
240504c0:	425a      	negs	r2, r3
240504c2:	4b27      	ldr	r3, [pc, #156]	; (24050560 <update_ball+0x1e0>)
240504c4:	681b      	ldr	r3, [r3, #0]
240504c6:	429a      	cmp	r2, r3
240504c8:	d102      	bne.n	240504d0 <update_ball+0x150>
		ball_yspeed = ball_speed;
240504ca:	2203      	movs	r2, #3
240504cc:	4b24      	ldr	r3, [pc, #144]	; (24050560 <update_ball+0x1e0>)
240504ce:	601a      	str	r2, [r3, #0]
	}
	if (ball_y >= LCD_GetYSize() - ball_r - ball_speed
240504d0:	f000 f8ab 	bl	2405062a <LCD_GetYSize>
240504d4:	4603      	mov	r3, r0
240504d6:	461a      	mov	r2, r3
240504d8:	2308      	movs	r3, #8
240504da:	1ad3      	subs	r3, r2, r3
240504dc:	2203      	movs	r2, #3
240504de:	1a9a      	subs	r2, r3, r2
240504e0:	4b1a      	ldr	r3, [pc, #104]	; (2405054c <update_ball+0x1cc>)
240504e2:	681b      	ldr	r3, [r3, #0]
240504e4:	429a      	cmp	r2, r3
240504e6:	dc08      	bgt.n	240504fa <update_ball+0x17a>
			&& ball_yspeed == ball_speed) {
240504e8:	4b1d      	ldr	r3, [pc, #116]	; (24050560 <update_ball+0x1e0>)
240504ea:	681b      	ldr	r3, [r3, #0]
240504ec:	2203      	movs	r2, #3
240504ee:	4293      	cmp	r3, r2
240504f0:	d103      	bne.n	240504fa <update_ball+0x17a>
		ball_yspeed = -ball_speed;
240504f2:	2303      	movs	r3, #3
240504f4:	425b      	negs	r3, r3
240504f6:	4a1a      	ldr	r2, [pc, #104]	; (24050560 <update_ball+0x1e0>)
240504f8:	6013      	str	r3, [r2, #0]
	}
	ball_x = ball_x + ball_xspeed;
240504fa:	4b11      	ldr	r3, [pc, #68]	; (24050540 <update_ball+0x1c0>)
240504fc:	681a      	ldr	r2, [r3, #0]
240504fe:	4b11      	ldr	r3, [pc, #68]	; (24050544 <update_ball+0x1c4>)
24050500:	681b      	ldr	r3, [r3, #0]
24050502:	4413      	add	r3, r2
24050504:	4a0e      	ldr	r2, [pc, #56]	; (24050540 <update_ball+0x1c0>)
24050506:	6013      	str	r3, [r2, #0]
	ball_y = ball_y + ball_yspeed;
24050508:	4b10      	ldr	r3, [pc, #64]	; (2405054c <update_ball+0x1cc>)
2405050a:	681a      	ldr	r2, [r3, #0]
2405050c:	4b14      	ldr	r3, [pc, #80]	; (24050560 <update_ball+0x1e0>)
2405050e:	681b      	ldr	r3, [r3, #0]
24050510:	4413      	add	r3, r2
24050512:	4a0e      	ldr	r2, [pc, #56]	; (2405054c <update_ball+0x1cc>)
24050514:	6013      	str	r3, [r2, #0]

	LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_WHITE);
24050516:	4b0a      	ldr	r3, [pc, #40]	; (24050540 <update_ball+0x1c0>)
24050518:	681b      	ldr	r3, [r3, #0]
2405051a:	b299      	uxth	r1, r3
2405051c:	4b0b      	ldr	r3, [pc, #44]	; (2405054c <update_ball+0x1cc>)
2405051e:	681b      	ldr	r3, [r3, #0]
24050520:	b29a      	uxth	r2, r3
24050522:	2308      	movs	r3, #8
24050524:	b29b      	uxth	r3, r3
24050526:	f64f 70ff 	movw	r0, #65535	; 0xffff
2405052a:	9000      	str	r0, [sp, #0]
2405052c:	6878      	ldr	r0, [r7, #4]
2405052e:	f000 fb1c 	bl	24050b6a <LCD_FillCircle>
}
24050532:	bf00      	nop
24050534:	3708      	adds	r7, #8
24050536:	46bd      	mov	sp, r7
24050538:	bd80      	pop	{r7, pc}
2405053a:	bf00      	nop
2405053c:	20000010 	.word	0x20000010
24050540:	200001ec 	.word	0x200001ec
24050544:	200001e4 	.word	0x200001e4
24050548:	20000014 	.word	0x20000014
2405054c:	200001f0 	.word	0x200001f0
24050550:	200000d0 	.word	0x200000d0
24050554:	20000018 	.word	0x20000018
24050558:	2000001c 	.word	0x2000001c
2405055c:	200000cc 	.word	0x200000cc
24050560:	200001e8 	.word	0x200001e8

24050564 <update_ai>:

void update_ai(uint16_t *buf) {
24050564:	b590      	push	{r4, r7, lr}
24050566:	b085      	sub	sp, #20
24050568:	af02      	add	r7, sp, #8
2405056a:	6078      	str	r0, [r7, #4]
	if (ball_y < (p2_y + (p2_height / 2))) {
2405056c:	2328      	movs	r3, #40	; 0x28
2405056e:	2b00      	cmp	r3, #0
24050570:	da00      	bge.n	24050574 <update_ai+0x10>
24050572:	3301      	adds	r3, #1
24050574:	105b      	asrs	r3, r3, #1
24050576:	461a      	mov	r2, r3
24050578:	4b24      	ldr	r3, [pc, #144]	; (2405060c <update_ai+0xa8>)
2405057a:	681b      	ldr	r3, [r3, #0]
2405057c:	441a      	add	r2, r3
2405057e:	4b24      	ldr	r3, [pc, #144]	; (24050610 <update_ai+0xac>)
24050580:	681b      	ldr	r3, [r3, #0]
24050582:	429a      	cmp	r2, r3
24050584:	dd0c      	ble.n	240505a0 <update_ai+0x3c>
		if (p2_y >= 20 + p2_speed + 2) {
24050586:	2302      	movs	r3, #2
24050588:	f103 0215 	add.w	r2, r3, #21
2405058c:	4b1f      	ldr	r3, [pc, #124]	; (2405060c <update_ai+0xa8>)
2405058e:	681b      	ldr	r3, [r3, #0]
24050590:	429a      	cmp	r2, r3
24050592:	da05      	bge.n	240505a0 <update_ai+0x3c>
			p2_y = p2_y - p2_speed;
24050594:	4b1d      	ldr	r3, [pc, #116]	; (2405060c <update_ai+0xa8>)
24050596:	681b      	ldr	r3, [r3, #0]
24050598:	2202      	movs	r2, #2
2405059a:	1a9b      	subs	r3, r3, r2
2405059c:	4a1b      	ldr	r2, [pc, #108]	; (2405060c <update_ai+0xa8>)
2405059e:	6013      	str	r3, [r2, #0]
		}
	}
	if (ball_y > (p2_y + (p2_height / 2))) {
240505a0:	2328      	movs	r3, #40	; 0x28
240505a2:	2b00      	cmp	r3, #0
240505a4:	da00      	bge.n	240505a8 <update_ai+0x44>
240505a6:	3301      	adds	r3, #1
240505a8:	105b      	asrs	r3, r3, #1
240505aa:	461a      	mov	r2, r3
240505ac:	4b17      	ldr	r3, [pc, #92]	; (2405060c <update_ai+0xa8>)
240505ae:	681b      	ldr	r3, [r3, #0]
240505b0:	441a      	add	r2, r3
240505b2:	4b17      	ldr	r3, [pc, #92]	; (24050610 <update_ai+0xac>)
240505b4:	681b      	ldr	r3, [r3, #0]
240505b6:	429a      	cmp	r2, r3
240505b8:	da12      	bge.n	240505e0 <update_ai+0x7c>
		if (p2_y <= LCD_GetYSize() - p2_height - p2_speed - 2) {
240505ba:	f000 f836 	bl	2405062a <LCD_GetYSize>
240505be:	4603      	mov	r3, r0
240505c0:	461a      	mov	r2, r3
240505c2:	2328      	movs	r3, #40	; 0x28
240505c4:	1ad3      	subs	r3, r2, r3
240505c6:	2202      	movs	r2, #2
240505c8:	1a9b      	subs	r3, r3, r2
240505ca:	1e5a      	subs	r2, r3, #1
240505cc:	4b0f      	ldr	r3, [pc, #60]	; (2405060c <update_ai+0xa8>)
240505ce:	681b      	ldr	r3, [r3, #0]
240505d0:	429a      	cmp	r2, r3
240505d2:	dd05      	ble.n	240505e0 <update_ai+0x7c>
			p2_y = p2_y + p2_speed;
240505d4:	4b0d      	ldr	r3, [pc, #52]	; (2405060c <update_ai+0xa8>)
240505d6:	681b      	ldr	r3, [r3, #0]
240505d8:	2202      	movs	r2, #2
240505da:	4413      	add	r3, r2
240505dc:	4a0b      	ldr	r2, [pc, #44]	; (2405060c <update_ai+0xa8>)
240505de:	6013      	str	r3, [r2, #0]
		}
	}
	LCD_FillRect(buf, p2_x, p2_y, p2_width, p2_height, LCD_COLOR_WHITE);
240505e0:	4b0c      	ldr	r3, [pc, #48]	; (24050614 <update_ai+0xb0>)
240505e2:	681b      	ldr	r3, [r3, #0]
240505e4:	b299      	uxth	r1, r3
240505e6:	4b09      	ldr	r3, [pc, #36]	; (2405060c <update_ai+0xa8>)
240505e8:	681b      	ldr	r3, [r3, #0]
240505ea:	b29a      	uxth	r2, r3
240505ec:	2305      	movs	r3, #5
240505ee:	b298      	uxth	r0, r3
240505f0:	2328      	movs	r3, #40	; 0x28
240505f2:	b29b      	uxth	r3, r3
240505f4:	f64f 74ff 	movw	r4, #65535	; 0xffff
240505f8:	9401      	str	r4, [sp, #4]
240505fa:	9300      	str	r3, [sp, #0]
240505fc:	4603      	mov	r3, r0
240505fe:	6878      	ldr	r0, [r7, #4]
24050600:	f000 fa82 	bl	24050b08 <LCD_FillRect>
}
24050604:	bf00      	nop
24050606:	370c      	adds	r7, #12
24050608:	46bd      	mov	sp, r7
2405060a:	bd90      	pop	{r4, r7, pc}
2405060c:	2000001c 	.word	0x2000001c
24050610:	200001f0 	.word	0x200001f0
24050614:	20000018 	.word	0x20000018

24050618 <LCD_GetXSize>:
/**
 * @brief  Gets the LCD X size.
 * @param  None
 * @retval The used LCD X size
 */
uint16_t LCD_GetXSize(void) {
24050618:	b480      	push	{r7}
2405061a:	af00      	add	r7, sp, #0
	return GW_LCD_WIDTH;
2405061c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
24050620:	4618      	mov	r0, r3
24050622:	46bd      	mov	sp, r7
24050624:	f85d 7b04 	ldr.w	r7, [sp], #4
24050628:	4770      	bx	lr

2405062a <LCD_GetYSize>:
/**
 * @brief  Gets the LCD Y size.
 * @param  None
 * @retval The used LCD Y size
 */
uint16_t LCD_GetYSize(void) {
2405062a:	b480      	push	{r7}
2405062c:	af00      	add	r7, sp, #0
	return GW_LCD_HEIGHT;
2405062e:	23f0      	movs	r3, #240	; 0xf0
}
24050630:	4618      	mov	r0, r3
24050632:	46bd      	mov	sp, r7
24050634:	f85d 7b04 	ldr.w	r7, [sp], #4
24050638:	4770      	bx	lr
	...

2405063c <LCD_SetFont>:
/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *pFonts) {
2405063c:	b480      	push	{r7}
2405063e:	b083      	sub	sp, #12
24050640:	af00      	add	r7, sp, #0
24050642:	6078      	str	r0, [r7, #4]
	font = pFonts;
24050644:	4a04      	ldr	r2, [pc, #16]	; (24050658 <LCD_SetFont+0x1c>)
24050646:	687b      	ldr	r3, [r7, #4]
24050648:	6013      	str	r3, [r2, #0]
}
2405064a:	bf00      	nop
2405064c:	370c      	adds	r7, #12
2405064e:	46bd      	mov	sp, r7
24050650:	f85d 7b04 	ldr.w	r7, [sp], #4
24050654:	4770      	bx	lr
24050656:	bf00      	nop
24050658:	20000020 	.word	0x20000020

2405065c <LCD_DrawPixel>:
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in RGB(5-6-5)
 * @retval None
 */
void LCD_DrawPixel(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t pixel) {
2405065c:	b480      	push	{r7}
2405065e:	b085      	sub	sp, #20
24050660:	af00      	add	r7, sp, #0
24050662:	60f8      	str	r0, [r7, #12]
24050664:	4608      	mov	r0, r1
24050666:	4611      	mov	r1, r2
24050668:	461a      	mov	r2, r3
2405066a:	4603      	mov	r3, r0
2405066c:	817b      	strh	r3, [r7, #10]
2405066e:	460b      	mov	r3, r1
24050670:	813b      	strh	r3, [r7, #8]
24050672:	4613      	mov	r3, r2
24050674:	80fb      	strh	r3, [r7, #6]
	if (PPOS(Xpos, Ypos) > GW_LCD_WIDTH * GW_LCD_HEIGHT) {
24050676:	893a      	ldrh	r2, [r7, #8]
24050678:	4613      	mov	r3, r2
2405067a:	009b      	lsls	r3, r3, #2
2405067c:	4413      	add	r3, r2
2405067e:	019b      	lsls	r3, r3, #6
24050680:	461a      	mov	r2, r3
24050682:	897b      	ldrh	r3, [r7, #10]
24050684:	4413      	add	r3, r2
24050686:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
2405068a:	dc0d      	bgt.n	240506a8 <LCD_DrawPixel+0x4c>
		return;
	}
	buf[PPOS(Xpos, Ypos)] = pixel;
2405068c:	893a      	ldrh	r2, [r7, #8]
2405068e:	4613      	mov	r3, r2
24050690:	009b      	lsls	r3, r3, #2
24050692:	4413      	add	r3, r2
24050694:	019b      	lsls	r3, r3, #6
24050696:	461a      	mov	r2, r3
24050698:	897b      	ldrh	r3, [r7, #10]
2405069a:	4413      	add	r3, r2
2405069c:	005b      	lsls	r3, r3, #1
2405069e:	68fa      	ldr	r2, [r7, #12]
240506a0:	4413      	add	r3, r2
240506a2:	88fa      	ldrh	r2, [r7, #6]
240506a4:	801a      	strh	r2, [r3, #0]
240506a6:	e000      	b.n	240506aa <LCD_DrawPixel+0x4e>
		return;
240506a8:	bf00      	nop
}
240506aa:	3714      	adds	r7, #20
240506ac:	46bd      	mov	sp, r7
240506ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240506b2:	4770      	bx	lr

240506b4 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD.
 * @param  Color: the color of the background
 * @retval None
 */
void LCD_Clear(uint16_t *buf, uint16_t color) {
240506b4:	b590      	push	{r4, r7, lr}
240506b6:	b085      	sub	sp, #20
240506b8:	af02      	add	r7, sp, #8
240506ba:	6078      	str	r0, [r7, #4]
240506bc:	460b      	mov	r3, r1
240506be:	807b      	strh	r3, [r7, #2]
	FillBuffer((uint32_t*) buf, LCD_GetXSize(), LCD_GetYSize(), 0, color);
240506c0:	f7ff ffaa 	bl	24050618 <LCD_GetXSize>
240506c4:	4603      	mov	r3, r0
240506c6:	461c      	mov	r4, r3
240506c8:	f7ff ffaf 	bl	2405062a <LCD_GetYSize>
240506cc:	4603      	mov	r3, r0
240506ce:	461a      	mov	r2, r3
240506d0:	887b      	ldrh	r3, [r7, #2]
240506d2:	9300      	str	r3, [sp, #0]
240506d4:	2300      	movs	r3, #0
240506d6:	4621      	mov	r1, r4
240506d8:	6878      	ldr	r0, [r7, #4]
240506da:	f000 fb9f 	bl	24050e1c <FillBuffer>
}
240506de:	bf00      	nop
240506e0:	370c      	adds	r7, #12
240506e2:	46bd      	mov	sp, r7
240506e4:	bd90      	pop	{r4, r7, pc}
	...

240506e8 <LCD_DisplayStringAt>:
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 * @retval None
 */
void LCD_DisplayStringAt(uint16_t *buf, uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
240506e8:	b590      	push	{r4, r7, lr}
240506ea:	b08b      	sub	sp, #44	; 0x2c
240506ec:	af00      	add	r7, sp, #0
240506ee:	60f8      	str	r0, [r7, #12]
240506f0:	607b      	str	r3, [r7, #4]
240506f2:	460b      	mov	r3, r1
240506f4:	817b      	strh	r3, [r7, #10]
240506f6:	4613      	mov	r3, r2
240506f8:	813b      	strh	r3, [r7, #8]
	uint16_t refcolumn = 1, i = 0;
240506fa:	2301      	movs	r3, #1
240506fc:	84fb      	strh	r3, [r7, #38]	; 0x26
240506fe:	2300      	movs	r3, #0
24050700:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t size = 0, xsize = 0;
24050702:	2300      	movs	r3, #0
24050704:	623b      	str	r3, [r7, #32]
24050706:	2300      	movs	r3, #0
24050708:	61bb      	str	r3, [r7, #24]
	uint32_t mod_size = 0;
2405070a:	2300      	movs	r3, #0
2405070c:	617b      	str	r3, [r7, #20]
	uint8_t *ptr = pText;
2405070e:	687b      	ldr	r3, [r7, #4]
24050710:	61fb      	str	r3, [r7, #28]
	uint32_t font_width = font->Width * font_scale;
24050712:	4b44      	ldr	r3, [pc, #272]	; (24050824 <LCD_DisplayStringAt+0x13c>)
24050714:	681b      	ldr	r3, [r3, #0]
24050716:	889b      	ldrh	r3, [r3, #4]
24050718:	461a      	mov	r2, r3
2405071a:	4b43      	ldr	r3, [pc, #268]	; (24050828 <LCD_DisplayStringAt+0x140>)
2405071c:	781b      	ldrb	r3, [r3, #0]
2405071e:	fb02 f303 	mul.w	r3, r2, r3
24050722:	613b      	str	r3, [r7, #16]

	/* Get the text size */
	while (*ptr++)
24050724:	e002      	b.n	2405072c <LCD_DisplayStringAt+0x44>
		size++;
24050726:	6a3b      	ldr	r3, [r7, #32]
24050728:	3301      	adds	r3, #1
2405072a:	623b      	str	r3, [r7, #32]
	while (*ptr++)
2405072c:	69fb      	ldr	r3, [r7, #28]
2405072e:	1c5a      	adds	r2, r3, #1
24050730:	61fa      	str	r2, [r7, #28]
24050732:	781b      	ldrb	r3, [r3, #0]
24050734:	2b00      	cmp	r3, #0
24050736:	d1f6      	bne.n	24050726 <LCD_DisplayStringAt+0x3e>

	/* Characters number per line */
	xsize = (LCD_GetXSize() / font_width);
24050738:	f7ff ff6e 	bl	24050618 <LCD_GetXSize>
2405073c:	4603      	mov	r3, r0
2405073e:	461a      	mov	r2, r3
24050740:	693b      	ldr	r3, [r7, #16]
24050742:	fbb2 f3f3 	udiv	r3, r2, r3
24050746:	61bb      	str	r3, [r7, #24]
	mod_size = LCD_GetXSize() % font_width;
24050748:	f7ff ff66 	bl	24050618 <LCD_GetXSize>
2405074c:	4603      	mov	r3, r0
2405074e:	693a      	ldr	r2, [r7, #16]
24050750:	fbb3 f2f2 	udiv	r2, r3, r2
24050754:	6939      	ldr	r1, [r7, #16]
24050756:	fb01 f202 	mul.w	r2, r1, r2
2405075a:	1a9b      	subs	r3, r3, r2
2405075c:	617b      	str	r3, [r7, #20]

	switch (mode) {
2405075e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
24050762:	2b03      	cmp	r3, #3
24050764:	d014      	beq.n	24050790 <LCD_DisplayStringAt+0xa8>
24050766:	2b03      	cmp	r3, #3
24050768:	dc26      	bgt.n	240507b8 <LCD_DisplayStringAt+0xd0>
2405076a:	2b01      	cmp	r3, #1
2405076c:	d002      	beq.n	24050774 <LCD_DisplayStringAt+0x8c>
2405076e:	2b02      	cmp	r3, #2
24050770:	d011      	beq.n	24050796 <LCD_DisplayStringAt+0xae>
24050772:	e021      	b.n	240507b8 <LCD_DisplayStringAt+0xd0>
	case CENTER_MODE: {
		refcolumn = X + ((xsize - size) * font_width + mod_size) / 2;
24050774:	69ba      	ldr	r2, [r7, #24]
24050776:	6a3b      	ldr	r3, [r7, #32]
24050778:	1ad3      	subs	r3, r2, r3
2405077a:	693a      	ldr	r2, [r7, #16]
2405077c:	fb03 f202 	mul.w	r2, r3, r2
24050780:	697b      	ldr	r3, [r7, #20]
24050782:	4413      	add	r3, r2
24050784:	085b      	lsrs	r3, r3, #1
24050786:	b29a      	uxth	r2, r3
24050788:	897b      	ldrh	r3, [r7, #10]
2405078a:	4413      	add	r3, r2
2405078c:	84fb      	strh	r3, [r7, #38]	; 0x26
		break;
2405078e:	e016      	b.n	240507be <LCD_DisplayStringAt+0xd6>
	}
	case LEFT_MODE: {
		refcolumn = X;
24050790:	897b      	ldrh	r3, [r7, #10]
24050792:	84fb      	strh	r3, [r7, #38]	; 0x26
		break;
24050794:	e013      	b.n	240507be <LCD_DisplayStringAt+0xd6>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * font_width) + mod_size;
24050796:	69ba      	ldr	r2, [r7, #24]
24050798:	6a3b      	ldr	r3, [r7, #32]
2405079a:	1ad3      	subs	r3, r2, r3
2405079c:	b29a      	uxth	r2, r3
2405079e:	693b      	ldr	r3, [r7, #16]
240507a0:	b29b      	uxth	r3, r3
240507a2:	fb12 f303 	smulbb	r3, r2, r3
240507a6:	b29a      	uxth	r2, r3
240507a8:	897b      	ldrh	r3, [r7, #10]
240507aa:	4413      	add	r3, r2
240507ac:	b29a      	uxth	r2, r3
240507ae:	697b      	ldr	r3, [r7, #20]
240507b0:	b29b      	uxth	r3, r3
240507b2:	4413      	add	r3, r2
240507b4:	84fb      	strh	r3, [r7, #38]	; 0x26
		break;
240507b6:	e002      	b.n	240507be <LCD_DisplayStringAt+0xd6>
	}
	default: {
		refcolumn = X;
240507b8:	897b      	ldrh	r3, [r7, #10]
240507ba:	84fb      	strh	r3, [r7, #38]	; 0x26
		break;
240507bc:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
240507be:	e011      	b.n	240507e4 <LCD_DisplayStringAt+0xfc>
			& (((LCD_GetXSize() - (i * font_width)) & 0xFFFF) >= font_width)) {
		/* Display one character on LCD */
		LCD_DisplayChar(buf, refcolumn, Y, *pText);
240507c0:	687b      	ldr	r3, [r7, #4]
240507c2:	781b      	ldrb	r3, [r3, #0]
240507c4:	893a      	ldrh	r2, [r7, #8]
240507c6:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
240507c8:	68f8      	ldr	r0, [r7, #12]
240507ca:	f000 f82f 	bl	2405082c <LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += font_width;
240507ce:	693b      	ldr	r3, [r7, #16]
240507d0:	b29a      	uxth	r2, r3
240507d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
240507d4:	4413      	add	r3, r2
240507d6:	84fb      	strh	r3, [r7, #38]	; 0x26
		/* Point on the next character */
		pText++;
240507d8:	687b      	ldr	r3, [r7, #4]
240507da:	3301      	adds	r3, #1
240507dc:	607b      	str	r3, [r7, #4]
		i++;
240507de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
240507e0:	3301      	adds	r3, #1
240507e2:	84bb      	strh	r3, [r7, #36]	; 0x24
	while ((*pText != 0)
240507e4:	687b      	ldr	r3, [r7, #4]
240507e6:	781b      	ldrb	r3, [r3, #0]
			& (((LCD_GetXSize() - (i * font_width)) & 0xFFFF) >= font_width)) {
240507e8:	2b00      	cmp	r3, #0
240507ea:	bf14      	ite	ne
240507ec:	2301      	movne	r3, #1
240507ee:	2300      	moveq	r3, #0
240507f0:	b2dc      	uxtb	r4, r3
240507f2:	f7ff ff11 	bl	24050618 <LCD_GetXSize>
240507f6:	4603      	mov	r3, r0
240507f8:	4619      	mov	r1, r3
240507fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
240507fc:	693a      	ldr	r2, [r7, #16]
240507fe:	fb02 f303 	mul.w	r3, r2, r3
24050802:	1acb      	subs	r3, r1, r3
24050804:	b29b      	uxth	r3, r3
24050806:	693a      	ldr	r2, [r7, #16]
24050808:	429a      	cmp	r2, r3
2405080a:	bf94      	ite	ls
2405080c:	2301      	movls	r3, #1
2405080e:	2300      	movhi	r3, #0
24050810:	b2db      	uxtb	r3, r3
24050812:	4023      	ands	r3, r4
24050814:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
24050816:	2b00      	cmp	r3, #0
24050818:	d1d2      	bne.n	240507c0 <LCD_DisplayStringAt+0xd8>
	}
}
2405081a:	bf00      	nop
2405081c:	bf00      	nop
2405081e:	372c      	adds	r7, #44	; 0x2c
24050820:	46bd      	mov	sp, r7
24050822:	bd90      	pop	{r4, r7, pc}
24050824:	20000020 	.word	0x20000020
24050828:	20000026 	.word	0x20000026

2405082c <LCD_DisplayChar>:
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 * @retval None
 */
void LCD_DisplayChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
2405082c:	b580      	push	{r7, lr}
2405082e:	b086      	sub	sp, #24
24050830:	af02      	add	r7, sp, #8
24050832:	60f8      	str	r0, [r7, #12]
24050834:	4608      	mov	r0, r1
24050836:	4611      	mov	r1, r2
24050838:	461a      	mov	r2, r3
2405083a:	4603      	mov	r3, r0
2405083c:	817b      	strh	r3, [r7, #10]
2405083e:	460b      	mov	r3, r1
24050840:	813b      	strh	r3, [r7, #8]
24050842:	4613      	mov	r3, r2
24050844:	71fb      	strb	r3, [r7, #7]
	DrawChar(buf, Xpos, Ypos,
			&font->table[(Ascii - ' ') * font->Height * ((font->Width + 7) / 8)],
24050846:	4b11      	ldr	r3, [pc, #68]	; (2405088c <LCD_DisplayChar+0x60>)
24050848:	681b      	ldr	r3, [r3, #0]
2405084a:	681a      	ldr	r2, [r3, #0]
2405084c:	79fb      	ldrb	r3, [r7, #7]
2405084e:	3b20      	subs	r3, #32
24050850:	490e      	ldr	r1, [pc, #56]	; (2405088c <LCD_DisplayChar+0x60>)
24050852:	6809      	ldr	r1, [r1, #0]
24050854:	88c9      	ldrh	r1, [r1, #6]
24050856:	fb03 f101 	mul.w	r1, r3, r1
2405085a:	4b0c      	ldr	r3, [pc, #48]	; (2405088c <LCD_DisplayChar+0x60>)
2405085c:	681b      	ldr	r3, [r3, #0]
2405085e:	889b      	ldrh	r3, [r3, #4]
24050860:	3307      	adds	r3, #7
24050862:	2b00      	cmp	r3, #0
24050864:	da00      	bge.n	24050868 <LCD_DisplayChar+0x3c>
24050866:	3307      	adds	r3, #7
24050868:	10db      	asrs	r3, r3, #3
2405086a:	fb01 f303 	mul.w	r3, r1, r3
	DrawChar(buf, Xpos, Ypos,
2405086e:	18d0      	adds	r0, r2, r3
24050870:	4b07      	ldr	r3, [pc, #28]	; (24050890 <LCD_DisplayChar+0x64>)
24050872:	781b      	ldrb	r3, [r3, #0]
24050874:	893a      	ldrh	r2, [r7, #8]
24050876:	8979      	ldrh	r1, [r7, #10]
24050878:	9300      	str	r3, [sp, #0]
2405087a:	4603      	mov	r3, r0
2405087c:	68f8      	ldr	r0, [r7, #12]
2405087e:	f000 fa0b 	bl	24050c98 <DrawChar>
			font_scale);
}
24050882:	bf00      	nop
24050884:	3710      	adds	r7, #16
24050886:	46bd      	mov	sp, r7
24050888:	bd80      	pop	{r7, pc}
2405088a:	bf00      	nop
2405088c:	20000020 	.word	0x20000020
24050890:	20000026 	.word	0x20000026

24050894 <LCD_DrawHLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawHLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
24050894:	b580      	push	{r7, lr}
24050896:	b088      	sub	sp, #32
24050898:	af02      	add	r7, sp, #8
2405089a:	60f8      	str	r0, [r7, #12]
2405089c:	4608      	mov	r0, r1
2405089e:	4611      	mov	r1, r2
240508a0:	461a      	mov	r2, r3
240508a2:	4603      	mov	r3, r0
240508a4:	817b      	strh	r3, [r7, #10]
240508a6:	460b      	mov	r3, r1
240508a8:	813b      	strh	r3, [r7, #8]
240508aa:	4613      	mov	r3, r2
240508ac:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
240508ae:	2300      	movs	r3, #0
240508b0:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
240508b2:	f7ff feb1 	bl	24050618 <LCD_GetXSize>
240508b6:	4603      	mov	r3, r0
240508b8:	461a      	mov	r2, r3
240508ba:	893b      	ldrh	r3, [r7, #8]
240508bc:	fb03 f202 	mul.w	r2, r3, r2
240508c0:	897b      	ldrh	r3, [r7, #10]
240508c2:	4413      	add	r3, r2
240508c4:	005b      	lsls	r3, r3, #1
240508c6:	68fa      	ldr	r2, [r7, #12]
240508c8:	4413      	add	r3, r2
240508ca:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, Length, 1, 0, color);
240508cc:	88f9      	ldrh	r1, [r7, #6]
240508ce:	8c3b      	ldrh	r3, [r7, #32]
240508d0:	9300      	str	r3, [sp, #0]
240508d2:	2300      	movs	r3, #0
240508d4:	2201      	movs	r2, #1
240508d6:	6978      	ldr	r0, [r7, #20]
240508d8:	f000 faa0 	bl	24050e1c <FillBuffer>
}
240508dc:	bf00      	nop
240508de:	3718      	adds	r7, #24
240508e0:	46bd      	mov	sp, r7
240508e2:	bd80      	pop	{r7, pc}

240508e4 <LCD_DrawVLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawVLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
240508e4:	b590      	push	{r4, r7, lr}
240508e6:	b089      	sub	sp, #36	; 0x24
240508e8:	af02      	add	r7, sp, #8
240508ea:	60f8      	str	r0, [r7, #12]
240508ec:	4608      	mov	r0, r1
240508ee:	4611      	mov	r1, r2
240508f0:	461a      	mov	r2, r3
240508f2:	4603      	mov	r3, r0
240508f4:	817b      	strh	r3, [r7, #10]
240508f6:	460b      	mov	r3, r1
240508f8:	813b      	strh	r3, [r7, #8]
240508fa:	4613      	mov	r3, r2
240508fc:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
240508fe:	2300      	movs	r3, #0
24050900:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
24050902:	f7ff fe89 	bl	24050618 <LCD_GetXSize>
24050906:	4603      	mov	r3, r0
24050908:	461a      	mov	r2, r3
2405090a:	893b      	ldrh	r3, [r7, #8]
2405090c:	fb03 f202 	mul.w	r2, r3, r2
24050910:	897b      	ldrh	r3, [r7, #10]
24050912:	4413      	add	r3, r2
24050914:	005b      	lsls	r3, r3, #1
24050916:	68fa      	ldr	r2, [r7, #12]
24050918:	4413      	add	r3, r2
2405091a:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, 1, Length, (LCD_GetXSize() - 1), color);
2405091c:	88fc      	ldrh	r4, [r7, #6]
2405091e:	f7ff fe7b 	bl	24050618 <LCD_GetXSize>
24050922:	4603      	mov	r3, r0
24050924:	3b01      	subs	r3, #1
24050926:	461a      	mov	r2, r3
24050928:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2405092a:	9300      	str	r3, [sp, #0]
2405092c:	4613      	mov	r3, r2
2405092e:	4622      	mov	r2, r4
24050930:	2101      	movs	r1, #1
24050932:	6978      	ldr	r0, [r7, #20]
24050934:	f000 fa72 	bl	24050e1c <FillBuffer>
}
24050938:	bf00      	nop
2405093a:	371c      	adds	r7, #28
2405093c:	46bd      	mov	sp, r7
2405093e:	bd90      	pop	{r4, r7, pc}

24050940 <LCD_DrawRect>:
 * @param  Height: display rectangle height
 * @param  Width: display rectangle width
 * @retval None
 */
void LCD_DrawRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
24050940:	b580      	push	{r7, lr}
24050942:	b086      	sub	sp, #24
24050944:	af02      	add	r7, sp, #8
24050946:	60f8      	str	r0, [r7, #12]
24050948:	4608      	mov	r0, r1
2405094a:	4611      	mov	r1, r2
2405094c:	461a      	mov	r2, r3
2405094e:	4603      	mov	r3, r0
24050950:	817b      	strh	r3, [r7, #10]
24050952:	460b      	mov	r3, r1
24050954:	813b      	strh	r3, [r7, #8]
24050956:	4613      	mov	r3, r2
24050958:	80fb      	strh	r3, [r7, #6]
	/* Draw horizontal lines */
	LCD_DrawHLine(buf, Xpos, Ypos, Width, color);
2405095a:	88f8      	ldrh	r0, [r7, #6]
2405095c:	893a      	ldrh	r2, [r7, #8]
2405095e:	8979      	ldrh	r1, [r7, #10]
24050960:	8bbb      	ldrh	r3, [r7, #28]
24050962:	9300      	str	r3, [sp, #0]
24050964:	4603      	mov	r3, r0
24050966:	68f8      	ldr	r0, [r7, #12]
24050968:	f7ff ff94 	bl	24050894 <LCD_DrawHLine>
	LCD_DrawHLine(buf, Xpos, (Ypos + Height), Width, color);
2405096c:	893a      	ldrh	r2, [r7, #8]
2405096e:	8b3b      	ldrh	r3, [r7, #24]
24050970:	4413      	add	r3, r2
24050972:	b29a      	uxth	r2, r3
24050974:	88f8      	ldrh	r0, [r7, #6]
24050976:	8979      	ldrh	r1, [r7, #10]
24050978:	8bbb      	ldrh	r3, [r7, #28]
2405097a:	9300      	str	r3, [sp, #0]
2405097c:	4603      	mov	r3, r0
2405097e:	68f8      	ldr	r0, [r7, #12]
24050980:	f7ff ff88 	bl	24050894 <LCD_DrawHLine>

	/* Draw vertical lines */
	LCD_DrawVLine(buf, Xpos, Ypos, Height, color);
24050984:	8b38      	ldrh	r0, [r7, #24]
24050986:	893a      	ldrh	r2, [r7, #8]
24050988:	8979      	ldrh	r1, [r7, #10]
2405098a:	8bbb      	ldrh	r3, [r7, #28]
2405098c:	9300      	str	r3, [sp, #0]
2405098e:	4603      	mov	r3, r0
24050990:	68f8      	ldr	r0, [r7, #12]
24050992:	f7ff ffa7 	bl	240508e4 <LCD_DrawVLine>
	LCD_DrawVLine(buf, (Xpos + Width), Ypos, Height, color);
24050996:	897a      	ldrh	r2, [r7, #10]
24050998:	88fb      	ldrh	r3, [r7, #6]
2405099a:	4413      	add	r3, r2
2405099c:	b299      	uxth	r1, r3
2405099e:	8b38      	ldrh	r0, [r7, #24]
240509a0:	893a      	ldrh	r2, [r7, #8]
240509a2:	8bbb      	ldrh	r3, [r7, #28]
240509a4:	9300      	str	r3, [sp, #0]
240509a6:	4603      	mov	r3, r0
240509a8:	68f8      	ldr	r0, [r7, #12]
240509aa:	f7ff ff9b 	bl	240508e4 <LCD_DrawVLine>
}
240509ae:	bf00      	nop
240509b0:	3710      	adds	r7, #16
240509b2:	46bd      	mov	sp, r7
240509b4:	bd80      	pop	{r7, pc}

240509b6 <LCD_DrawCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_DrawCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
240509b6:	b580      	push	{r7, lr}
240509b8:	b088      	sub	sp, #32
240509ba:	af00      	add	r7, sp, #0
240509bc:	60f8      	str	r0, [r7, #12]
240509be:	4608      	mov	r0, r1
240509c0:	4611      	mov	r1, r2
240509c2:	461a      	mov	r2, r3
240509c4:	4603      	mov	r3, r0
240509c6:	817b      	strh	r3, [r7, #10]
240509c8:	460b      	mov	r3, r1
240509ca:	813b      	strh	r3, [r7, #8]
240509cc:	4613      	mov	r3, r2
240509ce:	80fb      	strh	r3, [r7, #6]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
240509d0:	88fb      	ldrh	r3, [r7, #6]
240509d2:	005b      	lsls	r3, r3, #1
240509d4:	f1c3 0303 	rsb	r3, r3, #3
240509d8:	61fb      	str	r3, [r7, #28]
	curx = 0;
240509da:	2300      	movs	r3, #0
240509dc:	61bb      	str	r3, [r7, #24]
	cury = Radius;
240509de:	88fb      	ldrh	r3, [r7, #6]
240509e0:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
240509e2:	e087      	b.n	24050af4 <LCD_DrawCircle+0x13e>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos - cury), color);
240509e4:	69bb      	ldr	r3, [r7, #24]
240509e6:	b29a      	uxth	r2, r3
240509e8:	897b      	ldrh	r3, [r7, #10]
240509ea:	4413      	add	r3, r2
240509ec:	b299      	uxth	r1, r3
240509ee:	697b      	ldr	r3, [r7, #20]
240509f0:	b29b      	uxth	r3, r3
240509f2:	893a      	ldrh	r2, [r7, #8]
240509f4:	1ad3      	subs	r3, r2, r3
240509f6:	b29a      	uxth	r2, r3
240509f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
240509fa:	68f8      	ldr	r0, [r7, #12]
240509fc:	f7ff fe2e 	bl	2405065c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos - cury), color);
24050a00:	69bb      	ldr	r3, [r7, #24]
24050a02:	b29b      	uxth	r3, r3
24050a04:	897a      	ldrh	r2, [r7, #10]
24050a06:	1ad3      	subs	r3, r2, r3
24050a08:	b299      	uxth	r1, r3
24050a0a:	697b      	ldr	r3, [r7, #20]
24050a0c:	b29b      	uxth	r3, r3
24050a0e:	893a      	ldrh	r2, [r7, #8]
24050a10:	1ad3      	subs	r3, r2, r3
24050a12:	b29a      	uxth	r2, r3
24050a14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050a16:	68f8      	ldr	r0, [r7, #12]
24050a18:	f7ff fe20 	bl	2405065c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos - curx), color);
24050a1c:	697b      	ldr	r3, [r7, #20]
24050a1e:	b29a      	uxth	r2, r3
24050a20:	897b      	ldrh	r3, [r7, #10]
24050a22:	4413      	add	r3, r2
24050a24:	b299      	uxth	r1, r3
24050a26:	69bb      	ldr	r3, [r7, #24]
24050a28:	b29b      	uxth	r3, r3
24050a2a:	893a      	ldrh	r2, [r7, #8]
24050a2c:	1ad3      	subs	r3, r2, r3
24050a2e:	b29a      	uxth	r2, r3
24050a30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050a32:	68f8      	ldr	r0, [r7, #12]
24050a34:	f7ff fe12 	bl	2405065c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos - curx), color);
24050a38:	697b      	ldr	r3, [r7, #20]
24050a3a:	b29b      	uxth	r3, r3
24050a3c:	897a      	ldrh	r2, [r7, #10]
24050a3e:	1ad3      	subs	r3, r2, r3
24050a40:	b299      	uxth	r1, r3
24050a42:	69bb      	ldr	r3, [r7, #24]
24050a44:	b29b      	uxth	r3, r3
24050a46:	893a      	ldrh	r2, [r7, #8]
24050a48:	1ad3      	subs	r3, r2, r3
24050a4a:	b29a      	uxth	r2, r3
24050a4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050a4e:	68f8      	ldr	r0, [r7, #12]
24050a50:	f7ff fe04 	bl	2405065c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos + cury), color);
24050a54:	69bb      	ldr	r3, [r7, #24]
24050a56:	b29a      	uxth	r2, r3
24050a58:	897b      	ldrh	r3, [r7, #10]
24050a5a:	4413      	add	r3, r2
24050a5c:	b299      	uxth	r1, r3
24050a5e:	697b      	ldr	r3, [r7, #20]
24050a60:	b29a      	uxth	r2, r3
24050a62:	893b      	ldrh	r3, [r7, #8]
24050a64:	4413      	add	r3, r2
24050a66:	b29a      	uxth	r2, r3
24050a68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050a6a:	68f8      	ldr	r0, [r7, #12]
24050a6c:	f7ff fdf6 	bl	2405065c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos + cury), color);
24050a70:	69bb      	ldr	r3, [r7, #24]
24050a72:	b29b      	uxth	r3, r3
24050a74:	897a      	ldrh	r2, [r7, #10]
24050a76:	1ad3      	subs	r3, r2, r3
24050a78:	b299      	uxth	r1, r3
24050a7a:	697b      	ldr	r3, [r7, #20]
24050a7c:	b29a      	uxth	r2, r3
24050a7e:	893b      	ldrh	r3, [r7, #8]
24050a80:	4413      	add	r3, r2
24050a82:	b29a      	uxth	r2, r3
24050a84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050a86:	68f8      	ldr	r0, [r7, #12]
24050a88:	f7ff fde8 	bl	2405065c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos + curx), color);
24050a8c:	697b      	ldr	r3, [r7, #20]
24050a8e:	b29a      	uxth	r2, r3
24050a90:	897b      	ldrh	r3, [r7, #10]
24050a92:	4413      	add	r3, r2
24050a94:	b299      	uxth	r1, r3
24050a96:	69bb      	ldr	r3, [r7, #24]
24050a98:	b29a      	uxth	r2, r3
24050a9a:	893b      	ldrh	r3, [r7, #8]
24050a9c:	4413      	add	r3, r2
24050a9e:	b29a      	uxth	r2, r3
24050aa0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050aa2:	68f8      	ldr	r0, [r7, #12]
24050aa4:	f7ff fdda 	bl	2405065c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos + curx), color);
24050aa8:	697b      	ldr	r3, [r7, #20]
24050aaa:	b29b      	uxth	r3, r3
24050aac:	897a      	ldrh	r2, [r7, #10]
24050aae:	1ad3      	subs	r3, r2, r3
24050ab0:	b299      	uxth	r1, r3
24050ab2:	69bb      	ldr	r3, [r7, #24]
24050ab4:	b29a      	uxth	r2, r3
24050ab6:	893b      	ldrh	r3, [r7, #8]
24050ab8:	4413      	add	r3, r2
24050aba:	b29a      	uxth	r2, r3
24050abc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050abe:	68f8      	ldr	r0, [r7, #12]
24050ac0:	f7ff fdcc 	bl	2405065c <LCD_DrawPixel>

		if (d < 0) {
24050ac4:	69fb      	ldr	r3, [r7, #28]
24050ac6:	2b00      	cmp	r3, #0
24050ac8:	da06      	bge.n	24050ad8 <LCD_DrawCircle+0x122>
			d += (curx << 2) + 6;
24050aca:	69bb      	ldr	r3, [r7, #24]
24050acc:	009a      	lsls	r2, r3, #2
24050ace:	69fb      	ldr	r3, [r7, #28]
24050ad0:	4413      	add	r3, r2
24050ad2:	3306      	adds	r3, #6
24050ad4:	61fb      	str	r3, [r7, #28]
24050ad6:	e00a      	b.n	24050aee <LCD_DrawCircle+0x138>
		} else {
			d += ((curx - cury) << 2) + 10;
24050ad8:	69ba      	ldr	r2, [r7, #24]
24050ada:	697b      	ldr	r3, [r7, #20]
24050adc:	1ad3      	subs	r3, r2, r3
24050ade:	009a      	lsls	r2, r3, #2
24050ae0:	69fb      	ldr	r3, [r7, #28]
24050ae2:	4413      	add	r3, r2
24050ae4:	330a      	adds	r3, #10
24050ae6:	61fb      	str	r3, [r7, #28]
			cury--;
24050ae8:	697b      	ldr	r3, [r7, #20]
24050aea:	3b01      	subs	r3, #1
24050aec:	617b      	str	r3, [r7, #20]
		}
		curx++;
24050aee:	69bb      	ldr	r3, [r7, #24]
24050af0:	3301      	adds	r3, #1
24050af2:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
24050af4:	69ba      	ldr	r2, [r7, #24]
24050af6:	697b      	ldr	r3, [r7, #20]
24050af8:	429a      	cmp	r2, r3
24050afa:	f67f af73 	bls.w	240509e4 <LCD_DrawCircle+0x2e>
	}
}
24050afe:	bf00      	nop
24050b00:	bf00      	nop
24050b02:	3720      	adds	r7, #32
24050b04:	46bd      	mov	sp, r7
24050b06:	bd80      	pop	{r7, pc}

24050b08 <LCD_FillRect>:
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 * @retval None
 */
void LCD_FillRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
24050b08:	b5b0      	push	{r4, r5, r7, lr}
24050b0a:	b088      	sub	sp, #32
24050b0c:	af02      	add	r7, sp, #8
24050b0e:	60f8      	str	r0, [r7, #12]
24050b10:	4608      	mov	r0, r1
24050b12:	4611      	mov	r1, r2
24050b14:	461a      	mov	r2, r3
24050b16:	4603      	mov	r3, r0
24050b18:	817b      	strh	r3, [r7, #10]
24050b1a:	460b      	mov	r3, r1
24050b1c:	813b      	strh	r3, [r7, #8]
24050b1e:	4613      	mov	r3, r2
24050b20:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
24050b22:	2300      	movs	r3, #0
24050b24:	617b      	str	r3, [r7, #20]

	/* Get the rectangle start address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
24050b26:	f7ff fd77 	bl	24050618 <LCD_GetXSize>
24050b2a:	4603      	mov	r3, r0
24050b2c:	461a      	mov	r2, r3
24050b2e:	893b      	ldrh	r3, [r7, #8]
24050b30:	fb03 f202 	mul.w	r2, r3, r2
24050b34:	897b      	ldrh	r3, [r7, #10]
24050b36:	4413      	add	r3, r2
24050b38:	005b      	lsls	r3, r3, #1
24050b3a:	68fa      	ldr	r2, [r7, #12]
24050b3c:	4413      	add	r3, r2
24050b3e:	617b      	str	r3, [r7, #20]

	/* Fill the rectangle */
	FillBuffer((uint32_t*) xaddress, Width, Height, (LCD_GetXSize() - Width),
24050b40:	88fc      	ldrh	r4, [r7, #6]
24050b42:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
24050b44:	f7ff fd68 	bl	24050618 <LCD_GetXSize>
24050b48:	4603      	mov	r3, r0
24050b4a:	461a      	mov	r2, r3
24050b4c:	88fb      	ldrh	r3, [r7, #6]
24050b4e:	1ad3      	subs	r3, r2, r3
24050b50:	461a      	mov	r2, r3
24050b52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
24050b54:	9300      	str	r3, [sp, #0]
24050b56:	4613      	mov	r3, r2
24050b58:	462a      	mov	r2, r5
24050b5a:	4621      	mov	r1, r4
24050b5c:	6978      	ldr	r0, [r7, #20]
24050b5e:	f000 f95d 	bl	24050e1c <FillBuffer>
			color);
}
24050b62:	bf00      	nop
24050b64:	3718      	adds	r7, #24
24050b66:	46bd      	mov	sp, r7
24050b68:	bdb0      	pop	{r4, r5, r7, pc}

24050b6a <LCD_FillCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_FillCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
24050b6a:	b580      	push	{r7, lr}
24050b6c:	b08a      	sub	sp, #40	; 0x28
24050b6e:	af02      	add	r7, sp, #8
24050b70:	60f8      	str	r0, [r7, #12]
24050b72:	4608      	mov	r0, r1
24050b74:	4611      	mov	r1, r2
24050b76:	461a      	mov	r2, r3
24050b78:	4603      	mov	r3, r0
24050b7a:	817b      	strh	r3, [r7, #10]
24050b7c:	460b      	mov	r3, r1
24050b7e:	813b      	strh	r3, [r7, #8]
24050b80:	4613      	mov	r3, r2
24050b82:	80fb      	strh	r3, [r7, #6]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
24050b84:	88fb      	ldrh	r3, [r7, #6]
24050b86:	005b      	lsls	r3, r3, #1
24050b88:	f1c3 0303 	rsb	r3, r3, #3
24050b8c:	61fb      	str	r3, [r7, #28]

	curx = 0;
24050b8e:	2300      	movs	r3, #0
24050b90:	61bb      	str	r3, [r7, #24]
	cury = Radius;
24050b92:	88fb      	ldrh	r3, [r7, #6]
24050b94:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
24050b96:	e06d      	b.n	24050c74 <LCD_FillCircle+0x10a>
		if (cury > 0) {
24050b98:	697b      	ldr	r3, [r7, #20]
24050b9a:	2b00      	cmp	r3, #0
24050b9c:	d027      	beq.n	24050bee <LCD_FillCircle+0x84>
			LCD_DrawHLine(buf, Xpos - cury, Ypos + curx, 2 * cury, color);
24050b9e:	697b      	ldr	r3, [r7, #20]
24050ba0:	b29b      	uxth	r3, r3
24050ba2:	897a      	ldrh	r2, [r7, #10]
24050ba4:	1ad3      	subs	r3, r2, r3
24050ba6:	b299      	uxth	r1, r3
24050ba8:	69bb      	ldr	r3, [r7, #24]
24050baa:	b29a      	uxth	r2, r3
24050bac:	893b      	ldrh	r3, [r7, #8]
24050bae:	4413      	add	r3, r2
24050bb0:	b29a      	uxth	r2, r3
24050bb2:	697b      	ldr	r3, [r7, #20]
24050bb4:	b29b      	uxth	r3, r3
24050bb6:	005b      	lsls	r3, r3, #1
24050bb8:	b298      	uxth	r0, r3
24050bba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050bbc:	9300      	str	r3, [sp, #0]
24050bbe:	4603      	mov	r3, r0
24050bc0:	68f8      	ldr	r0, [r7, #12]
24050bc2:	f7ff fe67 	bl	24050894 <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - cury, Ypos - curx, 2 * cury, color);
24050bc6:	697b      	ldr	r3, [r7, #20]
24050bc8:	b29b      	uxth	r3, r3
24050bca:	897a      	ldrh	r2, [r7, #10]
24050bcc:	1ad3      	subs	r3, r2, r3
24050bce:	b299      	uxth	r1, r3
24050bd0:	69bb      	ldr	r3, [r7, #24]
24050bd2:	b29b      	uxth	r3, r3
24050bd4:	893a      	ldrh	r2, [r7, #8]
24050bd6:	1ad3      	subs	r3, r2, r3
24050bd8:	b29a      	uxth	r2, r3
24050bda:	697b      	ldr	r3, [r7, #20]
24050bdc:	b29b      	uxth	r3, r3
24050bde:	005b      	lsls	r3, r3, #1
24050be0:	b298      	uxth	r0, r3
24050be2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050be4:	9300      	str	r3, [sp, #0]
24050be6:	4603      	mov	r3, r0
24050be8:	68f8      	ldr	r0, [r7, #12]
24050bea:	f7ff fe53 	bl	24050894 <LCD_DrawHLine>
		}

		if (curx > 0) {
24050bee:	69bb      	ldr	r3, [r7, #24]
24050bf0:	2b00      	cmp	r3, #0
24050bf2:	d027      	beq.n	24050c44 <LCD_FillCircle+0xda>
			LCD_DrawHLine(buf, Xpos - curx, Ypos - cury, 2 * curx, color);
24050bf4:	69bb      	ldr	r3, [r7, #24]
24050bf6:	b29b      	uxth	r3, r3
24050bf8:	897a      	ldrh	r2, [r7, #10]
24050bfa:	1ad3      	subs	r3, r2, r3
24050bfc:	b299      	uxth	r1, r3
24050bfe:	697b      	ldr	r3, [r7, #20]
24050c00:	b29b      	uxth	r3, r3
24050c02:	893a      	ldrh	r2, [r7, #8]
24050c04:	1ad3      	subs	r3, r2, r3
24050c06:	b29a      	uxth	r2, r3
24050c08:	69bb      	ldr	r3, [r7, #24]
24050c0a:	b29b      	uxth	r3, r3
24050c0c:	005b      	lsls	r3, r3, #1
24050c0e:	b298      	uxth	r0, r3
24050c10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050c12:	9300      	str	r3, [sp, #0]
24050c14:	4603      	mov	r3, r0
24050c16:	68f8      	ldr	r0, [r7, #12]
24050c18:	f7ff fe3c 	bl	24050894 <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - curx, Ypos + cury, 2 * curx, color);
24050c1c:	69bb      	ldr	r3, [r7, #24]
24050c1e:	b29b      	uxth	r3, r3
24050c20:	897a      	ldrh	r2, [r7, #10]
24050c22:	1ad3      	subs	r3, r2, r3
24050c24:	b299      	uxth	r1, r3
24050c26:	697b      	ldr	r3, [r7, #20]
24050c28:	b29a      	uxth	r2, r3
24050c2a:	893b      	ldrh	r3, [r7, #8]
24050c2c:	4413      	add	r3, r2
24050c2e:	b29a      	uxth	r2, r3
24050c30:	69bb      	ldr	r3, [r7, #24]
24050c32:	b29b      	uxth	r3, r3
24050c34:	005b      	lsls	r3, r3, #1
24050c36:	b298      	uxth	r0, r3
24050c38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050c3a:	9300      	str	r3, [sp, #0]
24050c3c:	4603      	mov	r3, r0
24050c3e:	68f8      	ldr	r0, [r7, #12]
24050c40:	f7ff fe28 	bl	24050894 <LCD_DrawHLine>
		}
		if (d < 0) {
24050c44:	69fb      	ldr	r3, [r7, #28]
24050c46:	2b00      	cmp	r3, #0
24050c48:	da06      	bge.n	24050c58 <LCD_FillCircle+0xee>
			d += (curx << 2) + 6;
24050c4a:	69bb      	ldr	r3, [r7, #24]
24050c4c:	009a      	lsls	r2, r3, #2
24050c4e:	69fb      	ldr	r3, [r7, #28]
24050c50:	4413      	add	r3, r2
24050c52:	3306      	adds	r3, #6
24050c54:	61fb      	str	r3, [r7, #28]
24050c56:	e00a      	b.n	24050c6e <LCD_FillCircle+0x104>
		} else {
			d += ((curx - cury) << 2) + 10;
24050c58:	69ba      	ldr	r2, [r7, #24]
24050c5a:	697b      	ldr	r3, [r7, #20]
24050c5c:	1ad3      	subs	r3, r2, r3
24050c5e:	009a      	lsls	r2, r3, #2
24050c60:	69fb      	ldr	r3, [r7, #28]
24050c62:	4413      	add	r3, r2
24050c64:	330a      	adds	r3, #10
24050c66:	61fb      	str	r3, [r7, #28]
			cury--;
24050c68:	697b      	ldr	r3, [r7, #20]
24050c6a:	3b01      	subs	r3, #1
24050c6c:	617b      	str	r3, [r7, #20]
		}
		curx++;
24050c6e:	69bb      	ldr	r3, [r7, #24]
24050c70:	3301      	adds	r3, #1
24050c72:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
24050c74:	69ba      	ldr	r2, [r7, #24]
24050c76:	697b      	ldr	r3, [r7, #20]
24050c78:	429a      	cmp	r2, r3
24050c7a:	d98d      	bls.n	24050b98 <LCD_FillCircle+0x2e>
	}
	LCD_DrawCircle(buf, Xpos, Ypos, Radius, color);
24050c7c:	88f8      	ldrh	r0, [r7, #6]
24050c7e:	893a      	ldrh	r2, [r7, #8]
24050c80:	8979      	ldrh	r1, [r7, #10]
24050c82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050c84:	9300      	str	r3, [sp, #0]
24050c86:	4603      	mov	r3, r0
24050c88:	68f8      	ldr	r0, [r7, #12]
24050c8a:	f7ff fe94 	bl	240509b6 <LCD_DrawCircle>
}
24050c8e:	bf00      	nop
24050c90:	3720      	adds	r7, #32
24050c92:	46bd      	mov	sp, r7
24050c94:	bd80      	pop	{r7, pc}
	...

24050c98 <DrawChar>:
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		const uint8_t *c, uint8_t scale) {
24050c98:	b590      	push	{r4, r7, lr}
24050c9a:	b08d      	sub	sp, #52	; 0x34
24050c9c:	af02      	add	r7, sp, #8
24050c9e:	60f8      	str	r0, [r7, #12]
24050ca0:	607b      	str	r3, [r7, #4]
24050ca2:	460b      	mov	r3, r1
24050ca4:	817b      	strh	r3, [r7, #10]
24050ca6:	4613      	mov	r3, r2
24050ca8:	813b      	strh	r3, [r7, #8]
	uint32_t i = 0, j = 0;
24050caa:	2300      	movs	r3, #0
24050cac:	627b      	str	r3, [r7, #36]	; 0x24
24050cae:	2300      	movs	r3, #0
24050cb0:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
24050cb2:	2300      	movs	r3, #0
24050cb4:	61fb      	str	r3, [r7, #28]

	height = font->Height;
24050cb6:	4b56      	ldr	r3, [pc, #344]	; (24050e10 <DrawChar+0x178>)
24050cb8:	681b      	ldr	r3, [r3, #0]
24050cba:	88db      	ldrh	r3, [r3, #6]
24050cbc:	837b      	strh	r3, [r7, #26]
	width = font->Width;
24050cbe:	4b54      	ldr	r3, [pc, #336]	; (24050e10 <DrawChar+0x178>)
24050cc0:	681b      	ldr	r3, [r3, #0]
24050cc2:	889b      	ldrh	r3, [r3, #4]
24050cc4:	833b      	strh	r3, [r7, #24]

	offset = 8 * ((width + 7) / 8) - width;
24050cc6:	8b3b      	ldrh	r3, [r7, #24]
24050cc8:	3307      	adds	r3, #7
24050cca:	2b00      	cmp	r3, #0
24050ccc:	da00      	bge.n	24050cd0 <DrawChar+0x38>
24050cce:	3307      	adds	r3, #7
24050cd0:	10db      	asrs	r3, r3, #3
24050cd2:	b2db      	uxtb	r3, r3
24050cd4:	00db      	lsls	r3, r3, #3
24050cd6:	b2da      	uxtb	r2, r3
24050cd8:	8b3b      	ldrh	r3, [r7, #24]
24050cda:	b2db      	uxtb	r3, r3
24050cdc:	1ad3      	subs	r3, r2, r3
24050cde:	75fb      	strb	r3, [r7, #23]

	for (i = 0; i < height; i++) {
24050ce0:	2300      	movs	r3, #0
24050ce2:	627b      	str	r3, [r7, #36]	; 0x24
24050ce4:	e08a      	b.n	24050dfc <DrawChar+0x164>
		pchar = ((uint8_t*) c + (width + 7) / 8 * i);
24050ce6:	8b3b      	ldrh	r3, [r7, #24]
24050ce8:	3307      	adds	r3, #7
24050cea:	2b00      	cmp	r3, #0
24050cec:	da00      	bge.n	24050cf0 <DrawChar+0x58>
24050cee:	3307      	adds	r3, #7
24050cf0:	10db      	asrs	r3, r3, #3
24050cf2:	461a      	mov	r2, r3
24050cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24050cf6:	fb02 f303 	mul.w	r3, r2, r3
24050cfa:	687a      	ldr	r2, [r7, #4]
24050cfc:	4413      	add	r3, r2
24050cfe:	613b      	str	r3, [r7, #16]

		switch (((width + 7) / 8)) {
24050d00:	8b3b      	ldrh	r3, [r7, #24]
24050d02:	3307      	adds	r3, #7
24050d04:	2b00      	cmp	r3, #0
24050d06:	da00      	bge.n	24050d0a <DrawChar+0x72>
24050d08:	3307      	adds	r3, #7
24050d0a:	10db      	asrs	r3, r3, #3
24050d0c:	2b01      	cmp	r3, #1
24050d0e:	d002      	beq.n	24050d16 <DrawChar+0x7e>
24050d10:	2b02      	cmp	r3, #2
24050d12:	d004      	beq.n	24050d1e <DrawChar+0x86>
24050d14:	e00c      	b.n	24050d30 <DrawChar+0x98>
		case 1:
			line = pchar[0];
24050d16:	693b      	ldr	r3, [r7, #16]
24050d18:	781b      	ldrb	r3, [r3, #0]
24050d1a:	61fb      	str	r3, [r7, #28]
			break;
24050d1c:	e016      	b.n	24050d4c <DrawChar+0xb4>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
24050d1e:	693b      	ldr	r3, [r7, #16]
24050d20:	781b      	ldrb	r3, [r3, #0]
24050d22:	021b      	lsls	r3, r3, #8
24050d24:	693a      	ldr	r2, [r7, #16]
24050d26:	3201      	adds	r2, #1
24050d28:	7812      	ldrb	r2, [r2, #0]
24050d2a:	4313      	orrs	r3, r2
24050d2c:	61fb      	str	r3, [r7, #28]
			break;
24050d2e:	e00d      	b.n	24050d4c <DrawChar+0xb4>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
24050d30:	693b      	ldr	r3, [r7, #16]
24050d32:	781b      	ldrb	r3, [r3, #0]
24050d34:	041a      	lsls	r2, r3, #16
24050d36:	693b      	ldr	r3, [r7, #16]
24050d38:	3301      	adds	r3, #1
24050d3a:	781b      	ldrb	r3, [r3, #0]
24050d3c:	021b      	lsls	r3, r3, #8
24050d3e:	4313      	orrs	r3, r2
24050d40:	693a      	ldr	r2, [r7, #16]
24050d42:	3202      	adds	r2, #2
24050d44:	7812      	ldrb	r2, [r2, #0]
24050d46:	4313      	orrs	r3, r2
24050d48:	61fb      	str	r3, [r7, #28]
			break;
24050d4a:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
24050d4c:	2300      	movs	r3, #0
24050d4e:	623b      	str	r3, [r7, #32]
24050d50:	e047      	b.n	24050de2 <DrawChar+0x14a>
			if (line & (1 << (width - j + offset - 1))) {
24050d52:	8b3a      	ldrh	r2, [r7, #24]
24050d54:	6a3b      	ldr	r3, [r7, #32]
24050d56:	1ad2      	subs	r2, r2, r3
24050d58:	7dfb      	ldrb	r3, [r7, #23]
24050d5a:	4413      	add	r3, r2
24050d5c:	3b01      	subs	r3, #1
24050d5e:	2201      	movs	r2, #1
24050d60:	fa02 f303 	lsl.w	r3, r2, r3
24050d64:	461a      	mov	r2, r3
24050d66:	69fb      	ldr	r3, [r7, #28]
24050d68:	4013      	ands	r3, r2
24050d6a:	2b00      	cmp	r3, #0
24050d6c:	d01b      	beq.n	24050da6 <DrawChar+0x10e>
				//LCD_DrawPixel(buf, (Xpos + j), Ypos, font_color);
				LCD_FillRect(buf, (Xpos + j * scale), Ypos, scale, scale,
24050d6e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
24050d72:	b29a      	uxth	r2, r3
24050d74:	6a3b      	ldr	r3, [r7, #32]
24050d76:	b29b      	uxth	r3, r3
24050d78:	fb12 f303 	smulbb	r3, r2, r3
24050d7c:	b29a      	uxth	r2, r3
24050d7e:	897b      	ldrh	r3, [r7, #10]
24050d80:	4413      	add	r3, r2
24050d82:	b299      	uxth	r1, r3
24050d84:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
24050d88:	b29c      	uxth	r4, r3
24050d8a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
24050d8e:	b29b      	uxth	r3, r3
24050d90:	4a20      	ldr	r2, [pc, #128]	; (24050e14 <DrawChar+0x17c>)
24050d92:	8812      	ldrh	r2, [r2, #0]
24050d94:	8938      	ldrh	r0, [r7, #8]
24050d96:	9201      	str	r2, [sp, #4]
24050d98:	9300      	str	r3, [sp, #0]
24050d9a:	4623      	mov	r3, r4
24050d9c:	4602      	mov	r2, r0
24050d9e:	68f8      	ldr	r0, [r7, #12]
24050da0:	f7ff feb2 	bl	24050b08 <LCD_FillRect>
24050da4:	e01a      	b.n	24050ddc <DrawChar+0x144>
						font_color);
			} else {
				//LCD_DrawPixel(buf, (Xpos + j), Ypos, font_bcolor);
				LCD_FillRect(buf, (Xpos + j * scale), Ypos, scale, scale,
24050da6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
24050daa:	b29a      	uxth	r2, r3
24050dac:	6a3b      	ldr	r3, [r7, #32]
24050dae:	b29b      	uxth	r3, r3
24050db0:	fb12 f303 	smulbb	r3, r2, r3
24050db4:	b29a      	uxth	r2, r3
24050db6:	897b      	ldrh	r3, [r7, #10]
24050db8:	4413      	add	r3, r2
24050dba:	b299      	uxth	r1, r3
24050dbc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
24050dc0:	b29c      	uxth	r4, r3
24050dc2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
24050dc6:	b29b      	uxth	r3, r3
24050dc8:	4a13      	ldr	r2, [pc, #76]	; (24050e18 <DrawChar+0x180>)
24050dca:	8812      	ldrh	r2, [r2, #0]
24050dcc:	8938      	ldrh	r0, [r7, #8]
24050dce:	9201      	str	r2, [sp, #4]
24050dd0:	9300      	str	r3, [sp, #0]
24050dd2:	4623      	mov	r3, r4
24050dd4:	4602      	mov	r2, r0
24050dd6:	68f8      	ldr	r0, [r7, #12]
24050dd8:	f7ff fe96 	bl	24050b08 <LCD_FillRect>
		for (j = 0; j < width; j++) {
24050ddc:	6a3b      	ldr	r3, [r7, #32]
24050dde:	3301      	adds	r3, #1
24050de0:	623b      	str	r3, [r7, #32]
24050de2:	8b3b      	ldrh	r3, [r7, #24]
24050de4:	6a3a      	ldr	r2, [r7, #32]
24050de6:	429a      	cmp	r2, r3
24050de8:	d3b3      	bcc.n	24050d52 <DrawChar+0xba>
						font_bcolor);
			}
		}
		Ypos = Ypos + scale;
24050dea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
24050dee:	b29a      	uxth	r2, r3
24050df0:	893b      	ldrh	r3, [r7, #8]
24050df2:	4413      	add	r3, r2
24050df4:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
24050df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24050df8:	3301      	adds	r3, #1
24050dfa:	627b      	str	r3, [r7, #36]	; 0x24
24050dfc:	8b7b      	ldrh	r3, [r7, #26]
24050dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24050e00:	429a      	cmp	r2, r3
24050e02:	f4ff af70 	bcc.w	24050ce6 <DrawChar+0x4e>
	}
}
24050e06:	bf00      	nop
24050e08:	bf00      	nop
24050e0a:	372c      	adds	r7, #44	; 0x2c
24050e0c:	46bd      	mov	sp, r7
24050e0e:	bd90      	pop	{r4, r7, pc}
24050e10:	20000020 	.word	0x20000020
24050e14:	20000024 	.word	0x20000024
24050e18:	200001f4 	.word	0x200001f4

24050e1c <FillBuffer>:
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 * @retval None
 */
static void FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize,
		uint32_t OffLine, uint16_t ColorIndex) {
24050e1c:	b480      	push	{r7}
24050e1e:	b085      	sub	sp, #20
24050e20:	af00      	add	r7, sp, #0
24050e22:	60f8      	str	r0, [r7, #12]
24050e24:	60b9      	str	r1, [r7, #8]
24050e26:	607a      	str	r2, [r7, #4]
24050e28:	603b      	str	r3, [r7, #0]

	DMA2D->CR = DMA2D_R2M;
24050e2a:	4b16      	ldr	r3, [pc, #88]	; (24050e84 <FillBuffer+0x68>)
24050e2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
24050e30:	601a      	str	r2, [r3, #0]
	DMA2D->OCOLR = 0x0000FFFF & ColorIndex;
24050e32:	4a14      	ldr	r2, [pc, #80]	; (24050e84 <FillBuffer+0x68>)
24050e34:	8b3b      	ldrh	r3, [r7, #24]
24050e36:	6393      	str	r3, [r2, #56]	; 0x38
	DMA2D->OMAR = (uint32_t) pDst;
24050e38:	4a12      	ldr	r2, [pc, #72]	; (24050e84 <FillBuffer+0x68>)
24050e3a:	68fb      	ldr	r3, [r7, #12]
24050e3c:	63d3      	str	r3, [r2, #60]	; 0x3c
	DMA2D->OOR = OffLine;
24050e3e:	4a11      	ldr	r2, [pc, #68]	; (24050e84 <FillBuffer+0x68>)
24050e40:	683b      	ldr	r3, [r7, #0]
24050e42:	6413      	str	r3, [r2, #64]	; 0x40
	DMA2D->OPFCCR = LTDC_PIXEL_FORMAT_RGB565;
24050e44:	4b0f      	ldr	r3, [pc, #60]	; (24050e84 <FillBuffer+0x68>)
24050e46:	2202      	movs	r2, #2
24050e48:	635a      	str	r2, [r3, #52]	; 0x34
	DMA2D->NLR = (uint32_t) (xSize << 16) | (uint16_t) ySize;
24050e4a:	68bb      	ldr	r3, [r7, #8]
24050e4c:	041b      	lsls	r3, r3, #16
24050e4e:	687a      	ldr	r2, [r7, #4]
24050e50:	b292      	uxth	r2, r2
24050e52:	4611      	mov	r1, r2
24050e54:	4a0b      	ldr	r2, [pc, #44]	; (24050e84 <FillBuffer+0x68>)
24050e56:	430b      	orrs	r3, r1
24050e58:	6453      	str	r3, [r2, #68]	; 0x44

	DMA2D->CR |= DMA2D_CR_START;
24050e5a:	4b0a      	ldr	r3, [pc, #40]	; (24050e84 <FillBuffer+0x68>)
24050e5c:	681b      	ldr	r3, [r3, #0]
24050e5e:	4a09      	ldr	r2, [pc, #36]	; (24050e84 <FillBuffer+0x68>)
24050e60:	f043 0301 	orr.w	r3, r3, #1
24050e64:	6013      	str	r3, [r2, #0]

	while (DMA2D->CR & DMA2D_CR_START) {
24050e66:	bf00      	nop
24050e68:	4b06      	ldr	r3, [pc, #24]	; (24050e84 <FillBuffer+0x68>)
24050e6a:	681b      	ldr	r3, [r3, #0]
24050e6c:	f003 0301 	and.w	r3, r3, #1
24050e70:	2b00      	cmp	r3, #0
24050e72:	d1f9      	bne.n	24050e68 <FillBuffer+0x4c>

	}
}
24050e74:	bf00      	nop
24050e76:	bf00      	nop
24050e78:	3714      	adds	r7, #20
24050e7a:	46bd      	mov	sp, r7
24050e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
24050e80:	4770      	bx	lr
24050e82:	bf00      	nop
24050e84:	52001000 	.word	0x52001000

24050e88 <gw_audio_init>:
Generator gen3;
Noise noise1;

static uint32_t audio_frame = 0;

void gw_audio_init(void) {
24050e88:	b580      	push	{r7, lr}
24050e8a:	b082      	sub	sp, #8
24050e8c:	af00      	add	r7, sp, #0
	memset(audiobuffer, 0, sizeof(audiobuffer));
24050e8e:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
24050e92:	2100      	movs	r1, #0
24050e94:	4853      	ldr	r0, [pc, #332]	; (24050fe4 <gw_audio_init+0x15c>)
24050e96:	f010 fe9d 	bl	24061bd4 <memset>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) audiobuffer,
24050e9a:	f44f 6216 	mov.w	r2, #2400	; 0x960
24050e9e:	4951      	ldr	r1, [pc, #324]	; (24050fe4 <gw_audio_init+0x15c>)
24050ea0:	4851      	ldr	r0, [pc, #324]	; (24050fe8 <gw_audio_init+0x160>)
24050ea2:	f00e fd27 	bl	2405f8f4 <HAL_SAI_Transmit_DMA>
	AUDIO_BUFFER_LENGTH);
	int i;
	for (i = 0; i < AUDIO_PROGRAMMABLE_LENGTH; i++) {
24050ea6:	2300      	movs	r3, #0
24050ea8:	607b      	str	r3, [r7, #4]
24050eaa:	e040      	b.n	24050f2e <gw_audio_init+0xa6>
		(&gen1)->gen_freq[i] = 0;
24050eac:	4a4f      	ldr	r2, [pc, #316]	; (24050fec <gw_audio_init+0x164>)
24050eae:	687b      	ldr	r3, [r7, #4]
24050eb0:	4413      	add	r3, r2
24050eb2:	2200      	movs	r2, #0
24050eb4:	701a      	strb	r2, [r3, #0]
		(&gen1)->gen_duty[i] = PW_HALF;
24050eb6:	4a4d      	ldr	r2, [pc, #308]	; (24050fec <gw_audio_init+0x164>)
24050eb8:	687b      	ldr	r3, [r7, #4]
24050eba:	4413      	add	r3, r2
24050ebc:	3350      	adds	r3, #80	; 0x50
24050ebe:	2201      	movs	r2, #1
24050ec0:	701a      	strb	r2, [r3, #0]
		(&gen1)->gen_vol[i] = (uint8_t) 0;
24050ec2:	4a4a      	ldr	r2, [pc, #296]	; (24050fec <gw_audio_init+0x164>)
24050ec4:	687b      	ldr	r3, [r7, #4]
24050ec6:	4413      	add	r3, r2
24050ec8:	3328      	adds	r3, #40	; 0x28
24050eca:	2200      	movs	r2, #0
24050ecc:	701a      	strb	r2, [r3, #0]

		(&gen2)->gen_freq[i] = 0;
24050ece:	4a48      	ldr	r2, [pc, #288]	; (24050ff0 <gw_audio_init+0x168>)
24050ed0:	687b      	ldr	r3, [r7, #4]
24050ed2:	4413      	add	r3, r2
24050ed4:	2200      	movs	r2, #0
24050ed6:	701a      	strb	r2, [r3, #0]
		(&gen2)->gen_duty[i] = PW_HALF;
24050ed8:	4a45      	ldr	r2, [pc, #276]	; (24050ff0 <gw_audio_init+0x168>)
24050eda:	687b      	ldr	r3, [r7, #4]
24050edc:	4413      	add	r3, r2
24050ede:	3350      	adds	r3, #80	; 0x50
24050ee0:	2201      	movs	r2, #1
24050ee2:	701a      	strb	r2, [r3, #0]
		(&gen2)->gen_vol[i] = (uint8_t) 0;
24050ee4:	4a42      	ldr	r2, [pc, #264]	; (24050ff0 <gw_audio_init+0x168>)
24050ee6:	687b      	ldr	r3, [r7, #4]
24050ee8:	4413      	add	r3, r2
24050eea:	3328      	adds	r3, #40	; 0x28
24050eec:	2200      	movs	r2, #0
24050eee:	701a      	strb	r2, [r3, #0]

		(&gen3)->gen_freq[i] = 0;
24050ef0:	4a40      	ldr	r2, [pc, #256]	; (24050ff4 <gw_audio_init+0x16c>)
24050ef2:	687b      	ldr	r3, [r7, #4]
24050ef4:	4413      	add	r3, r2
24050ef6:	2200      	movs	r2, #0
24050ef8:	701a      	strb	r2, [r3, #0]
		(&gen3)->gen_duty[i] = PW_HALF;
24050efa:	4a3e      	ldr	r2, [pc, #248]	; (24050ff4 <gw_audio_init+0x16c>)
24050efc:	687b      	ldr	r3, [r7, #4]
24050efe:	4413      	add	r3, r2
24050f00:	3350      	adds	r3, #80	; 0x50
24050f02:	2201      	movs	r2, #1
24050f04:	701a      	strb	r2, [r3, #0]
		(&gen3)->gen_vol[i] = (uint8_t) 0;
24050f06:	4a3b      	ldr	r2, [pc, #236]	; (24050ff4 <gw_audio_init+0x16c>)
24050f08:	687b      	ldr	r3, [r7, #4]
24050f0a:	4413      	add	r3, r2
24050f0c:	3328      	adds	r3, #40	; 0x28
24050f0e:	2200      	movs	r2, #0
24050f10:	701a      	strb	r2, [r3, #0]

		(&noise1)->noise_freq[i] = 0;
24050f12:	4a39      	ldr	r2, [pc, #228]	; (24050ff8 <gw_audio_init+0x170>)
24050f14:	687b      	ldr	r3, [r7, #4]
24050f16:	4413      	add	r3, r2
24050f18:	2200      	movs	r2, #0
24050f1a:	701a      	strb	r2, [r3, #0]
		(&noise1)->noise_vol[i] = (uint8_t) 0;
24050f1c:	4a36      	ldr	r2, [pc, #216]	; (24050ff8 <gw_audio_init+0x170>)
24050f1e:	687b      	ldr	r3, [r7, #4]
24050f20:	4413      	add	r3, r2
24050f22:	3328      	adds	r3, #40	; 0x28
24050f24:	2200      	movs	r2, #0
24050f26:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < AUDIO_PROGRAMMABLE_LENGTH; i++) {
24050f28:	687b      	ldr	r3, [r7, #4]
24050f2a:	3301      	adds	r3, #1
24050f2c:	607b      	str	r3, [r7, #4]
24050f2e:	687b      	ldr	r3, [r7, #4]
24050f30:	2b27      	cmp	r3, #39	; 0x27
24050f32:	ddbb      	ble.n	24050eac <gw_audio_init+0x24>
	}

	(&gen1)->samples_high = 0;
24050f34:	4b2d      	ldr	r3, [pc, #180]	; (24050fec <gw_audio_init+0x164>)
24050f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050f3a:	2200      	movs	r2, #0
24050f3c:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
24050f40:	4b2a      	ldr	r3, [pc, #168]	; (24050fec <gw_audio_init+0x164>)
24050f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050f46:	2200      	movs	r2, #0
24050f48:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&gen1)->samples_high = 0;
24050f4c:	4b27      	ldr	r3, [pc, #156]	; (24050fec <gw_audio_init+0x164>)
24050f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050f52:	2200      	movs	r2, #0
24050f54:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
24050f58:	4b24      	ldr	r3, [pc, #144]	; (24050fec <gw_audio_init+0x164>)
24050f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050f5e:	2200      	movs	r2, #0
24050f60:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&gen1)->samples_high = 0;
24050f64:	4b21      	ldr	r3, [pc, #132]	; (24050fec <gw_audio_init+0x164>)
24050f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050f6a:	2200      	movs	r2, #0
24050f6c:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
24050f70:	4b1e      	ldr	r3, [pc, #120]	; (24050fec <gw_audio_init+0x164>)
24050f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050f76:	2200      	movs	r2, #0
24050f78:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&noise1)->LFSR = 1;
24050f7c:	4b1e      	ldr	r3, [pc, #120]	; (24050ff8 <gw_audio_init+0x170>)
24050f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050f82:	2201      	movs	r2, #1
24050f84:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
	(&noise1)->last = 0;
24050f88:	4b1b      	ldr	r3, [pc, #108]	; (24050ff8 <gw_audio_init+0x170>)
24050f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050f8e:	2200      	movs	r2, #0
24050f90:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312

	for (i = 0; i < AUDIO_BUFFER_LENGTH; i++) {
24050f94:	2300      	movs	r3, #0
24050f96:	607b      	str	r3, [r7, #4]
24050f98:	e01a      	b.n	24050fd0 <gw_audio_init+0x148>
		(&gen1)->audiobuffer[i] = 0;
24050f9a:	4a14      	ldr	r2, [pc, #80]	; (24050fec <gw_audio_init+0x164>)
24050f9c:	687b      	ldr	r3, [r7, #4]
24050f9e:	333c      	adds	r3, #60	; 0x3c
24050fa0:	2100      	movs	r1, #0
24050fa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&gen2)->audiobuffer[i] = 0;
24050fa6:	4a12      	ldr	r2, [pc, #72]	; (24050ff0 <gw_audio_init+0x168>)
24050fa8:	687b      	ldr	r3, [r7, #4]
24050faa:	333c      	adds	r3, #60	; 0x3c
24050fac:	2100      	movs	r1, #0
24050fae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&gen3)->audiobuffer[i] = 0;
24050fb2:	4a10      	ldr	r2, [pc, #64]	; (24050ff4 <gw_audio_init+0x16c>)
24050fb4:	687b      	ldr	r3, [r7, #4]
24050fb6:	333c      	adds	r3, #60	; 0x3c
24050fb8:	2100      	movs	r1, #0
24050fba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&noise1)->audiobuffer[i] = 0;
24050fbe:	4a0e      	ldr	r2, [pc, #56]	; (24050ff8 <gw_audio_init+0x170>)
24050fc0:	687b      	ldr	r3, [r7, #4]
24050fc2:	3328      	adds	r3, #40	; 0x28
24050fc4:	2100      	movs	r1, #0
24050fc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < AUDIO_BUFFER_LENGTH; i++) {
24050fca:	687b      	ldr	r3, [r7, #4]
24050fcc:	3301      	adds	r3, #1
24050fce:	607b      	str	r3, [r7, #4]
24050fd0:	687b      	ldr	r3, [r7, #4]
24050fd2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
24050fd6:	dbe0      	blt.n	24050f9a <gw_audio_init+0x112>
	}
}
24050fd8:	bf00      	nop
24050fda:	bf00      	nop
24050fdc:	3708      	adds	r7, #8
24050fde:	46bd      	mov	sp, r7
24050fe0:	bd80      	pop	{r7, pc}
24050fe2:	bf00      	nop
24050fe4:	30000000 	.word	0x30000000
24050fe8:	20000430 	.word	0x20000430
24050fec:	300012c0 	.word	0x300012c0
24050ff0:	30002600 	.word	0x30002600
24050ff4:	30003940 	.word	0x30003940
24050ff8:	30004c80 	.word	0x30004c80

24050ffc <HAL_SAI_TxHalfCpltCallback>:

void gw_audio_resume(void) {
	HAL_SAI_DMAResume(&hsai_BlockA1);
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
24050ffc:	b580      	push	{r7, lr}
24050ffe:	b084      	sub	sp, #16
24051000:	af00      	add	r7, sp, #0
24051002:	6078      	str	r0, [r7, #4]
	move_generator(&gen1);
24051004:	4829      	ldr	r0, [pc, #164]	; (240510ac <HAL_SAI_TxHalfCpltCallback+0xb0>)
24051006:	f000 f96f 	bl	240512e8 <move_generator>
	play_generator(&gen1, 0, AUDIO_BUFFER_LENGTH / 2);
2405100a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
2405100e:	2100      	movs	r1, #0
24051010:	4826      	ldr	r0, [pc, #152]	; (240510ac <HAL_SAI_TxHalfCpltCallback+0xb0>)
24051012:	f000 f8b7 	bl	24051184 <play_generator>
	move_generator(&gen2);
24051016:	4826      	ldr	r0, [pc, #152]	; (240510b0 <HAL_SAI_TxHalfCpltCallback+0xb4>)
24051018:	f000 f966 	bl	240512e8 <move_generator>
	play_generator(&gen2, 0, AUDIO_BUFFER_LENGTH / 2);
2405101c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
24051020:	2100      	movs	r1, #0
24051022:	4823      	ldr	r0, [pc, #140]	; (240510b0 <HAL_SAI_TxHalfCpltCallback+0xb4>)
24051024:	f000 f8ae 	bl	24051184 <play_generator>
	move_generator(&gen3);
24051028:	4822      	ldr	r0, [pc, #136]	; (240510b4 <HAL_SAI_TxHalfCpltCallback+0xb8>)
2405102a:	f000 f95d 	bl	240512e8 <move_generator>
	play_generator(&gen3, 0, AUDIO_BUFFER_LENGTH / 2);
2405102e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
24051032:	2100      	movs	r1, #0
24051034:	481f      	ldr	r0, [pc, #124]	; (240510b4 <HAL_SAI_TxHalfCpltCallback+0xb8>)
24051036:	f000 f8a5 	bl	24051184 <play_generator>
	move_noise(&noise1);
2405103a:	481f      	ldr	r0, [pc, #124]	; (240510b8 <HAL_SAI_TxHalfCpltCallback+0xbc>)
2405103c:	f000 fa51 	bl	240514e2 <move_noise>
	play_noise(&noise1, 0, AUDIO_BUFFER_LENGTH / 2);
24051040:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
24051044:	2100      	movs	r1, #0
24051046:	481c      	ldr	r0, [pc, #112]	; (240510b8 <HAL_SAI_TxHalfCpltCallback+0xbc>)
24051048:	f000 f9b9 	bl	240513be <play_noise>
	int i;
	for (i = 0; i < AUDIO_BUFFER_LENGTH / 2; i++) {
2405104c:	2300      	movs	r3, #0
2405104e:	60fb      	str	r3, [r7, #12]
24051050:	e022      	b.n	24051098 <HAL_SAI_TxHalfCpltCallback+0x9c>
		audiobuffer[i] = 4
				* (gen1.audiobuffer[i] + gen2.audiobuffer[i]
24051052:	4a16      	ldr	r2, [pc, #88]	; (240510ac <HAL_SAI_TxHalfCpltCallback+0xb0>)
24051054:	68fb      	ldr	r3, [r7, #12]
24051056:	333c      	adds	r3, #60	; 0x3c
24051058:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
2405105c:	4619      	mov	r1, r3
2405105e:	4a14      	ldr	r2, [pc, #80]	; (240510b0 <HAL_SAI_TxHalfCpltCallback+0xb4>)
24051060:	68fb      	ldr	r3, [r7, #12]
24051062:	333c      	adds	r3, #60	; 0x3c
24051064:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
24051068:	440b      	add	r3, r1
						+ gen3.audiobuffer[i] + noise1.audiobuffer[i]);
2405106a:	4912      	ldr	r1, [pc, #72]	; (240510b4 <HAL_SAI_TxHalfCpltCallback+0xb8>)
2405106c:	68fa      	ldr	r2, [r7, #12]
2405106e:	323c      	adds	r2, #60	; 0x3c
24051070:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
24051074:	4413      	add	r3, r2
24051076:	4910      	ldr	r1, [pc, #64]	; (240510b8 <HAL_SAI_TxHalfCpltCallback+0xbc>)
24051078:	68fa      	ldr	r2, [r7, #12]
2405107a:	3228      	adds	r2, #40	; 0x28
2405107c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
24051080:	4413      	add	r3, r2
		audiobuffer[i] = 4
24051082:	b29b      	uxth	r3, r3
24051084:	009b      	lsls	r3, r3, #2
24051086:	b29b      	uxth	r3, r3
24051088:	b219      	sxth	r1, r3
2405108a:	4a0c      	ldr	r2, [pc, #48]	; (240510bc <HAL_SAI_TxHalfCpltCallback+0xc0>)
2405108c:	68fb      	ldr	r3, [r7, #12]
2405108e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < AUDIO_BUFFER_LENGTH / 2; i++) {
24051092:	68fb      	ldr	r3, [r7, #12]
24051094:	3301      	adds	r3, #1
24051096:	60fb      	str	r3, [r7, #12]
24051098:	68fb      	ldr	r3, [r7, #12]
2405109a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
2405109e:	dbd8      	blt.n	24051052 <HAL_SAI_TxHalfCpltCallback+0x56>
	}
}
240510a0:	bf00      	nop
240510a2:	bf00      	nop
240510a4:	3710      	adds	r7, #16
240510a6:	46bd      	mov	sp, r7
240510a8:	bd80      	pop	{r7, pc}
240510aa:	bf00      	nop
240510ac:	300012c0 	.word	0x300012c0
240510b0:	30002600 	.word	0x30002600
240510b4:	30003940 	.word	0x30003940
240510b8:	30004c80 	.word	0x30004c80
240510bc:	30000000 	.word	0x30000000

240510c0 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
240510c0:	b580      	push	{r7, lr}
240510c2:	b084      	sub	sp, #16
240510c4:	af00      	add	r7, sp, #0
240510c6:	6078      	str	r0, [r7, #4]
	audio_frame++;
240510c8:	4b28      	ldr	r3, [pc, #160]	; (2405116c <HAL_SAI_TxCpltCallback+0xac>)
240510ca:	681b      	ldr	r3, [r3, #0]
240510cc:	3301      	adds	r3, #1
240510ce:	4a27      	ldr	r2, [pc, #156]	; (2405116c <HAL_SAI_TxCpltCallback+0xac>)
240510d0:	6013      	str	r3, [r2, #0]
	play_generator(&gen1, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
240510d2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
240510d6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
240510da:	4825      	ldr	r0, [pc, #148]	; (24051170 <HAL_SAI_TxCpltCallback+0xb0>)
240510dc:	f000 f852 	bl	24051184 <play_generator>
	play_generator(&gen2, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
240510e0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
240510e4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
240510e8:	4822      	ldr	r0, [pc, #136]	; (24051174 <HAL_SAI_TxCpltCallback+0xb4>)
240510ea:	f000 f84b 	bl	24051184 <play_generator>
	play_generator(&gen3, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
240510ee:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
240510f2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
240510f6:	4820      	ldr	r0, [pc, #128]	; (24051178 <HAL_SAI_TxCpltCallback+0xb8>)
240510f8:	f000 f844 	bl	24051184 <play_generator>
	play_noise(&noise1, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
240510fc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
24051100:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
24051104:	481d      	ldr	r0, [pc, #116]	; (2405117c <HAL_SAI_TxCpltCallback+0xbc>)
24051106:	f000 f95a 	bl	240513be <play_noise>
	int i;
	for (i = AUDIO_BUFFER_LENGTH / 2; i < AUDIO_BUFFER_LENGTH; i++) {
2405110a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
2405110e:	60fb      	str	r3, [r7, #12]
24051110:	e022      	b.n	24051158 <HAL_SAI_TxCpltCallback+0x98>
		audiobuffer[i] = 2
				* (gen1.audiobuffer[i] + gen2.audiobuffer[i]
24051112:	4a17      	ldr	r2, [pc, #92]	; (24051170 <HAL_SAI_TxCpltCallback+0xb0>)
24051114:	68fb      	ldr	r3, [r7, #12]
24051116:	333c      	adds	r3, #60	; 0x3c
24051118:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
2405111c:	4619      	mov	r1, r3
2405111e:	4a15      	ldr	r2, [pc, #84]	; (24051174 <HAL_SAI_TxCpltCallback+0xb4>)
24051120:	68fb      	ldr	r3, [r7, #12]
24051122:	333c      	adds	r3, #60	; 0x3c
24051124:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
24051128:	440b      	add	r3, r1
						+ gen3.audiobuffer[i] + noise1.audiobuffer[i]);
2405112a:	4913      	ldr	r1, [pc, #76]	; (24051178 <HAL_SAI_TxCpltCallback+0xb8>)
2405112c:	68fa      	ldr	r2, [r7, #12]
2405112e:	323c      	adds	r2, #60	; 0x3c
24051130:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
24051134:	4413      	add	r3, r2
24051136:	4911      	ldr	r1, [pc, #68]	; (2405117c <HAL_SAI_TxCpltCallback+0xbc>)
24051138:	68fa      	ldr	r2, [r7, #12]
2405113a:	3228      	adds	r2, #40	; 0x28
2405113c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
24051140:	4413      	add	r3, r2
		audiobuffer[i] = 2
24051142:	b29b      	uxth	r3, r3
24051144:	005b      	lsls	r3, r3, #1
24051146:	b29b      	uxth	r3, r3
24051148:	b219      	sxth	r1, r3
2405114a:	4a0d      	ldr	r2, [pc, #52]	; (24051180 <HAL_SAI_TxCpltCallback+0xc0>)
2405114c:	68fb      	ldr	r3, [r7, #12]
2405114e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = AUDIO_BUFFER_LENGTH / 2; i < AUDIO_BUFFER_LENGTH; i++) {
24051152:	68fb      	ldr	r3, [r7, #12]
24051154:	3301      	adds	r3, #1
24051156:	60fb      	str	r3, [r7, #12]
24051158:	68fb      	ldr	r3, [r7, #12]
2405115a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
2405115e:	dbd8      	blt.n	24051112 <HAL_SAI_TxCpltCallback+0x52>
	}
}
24051160:	bf00      	nop
24051162:	bf00      	nop
24051164:	3710      	adds	r7, #16
24051166:	46bd      	mov	sp, r7
24051168:	bd80      	pop	{r7, pc}
2405116a:	bf00      	nop
2405116c:	200001f8 	.word	0x200001f8
24051170:	300012c0 	.word	0x300012c0
24051174:	30002600 	.word	0x30002600
24051178:	30003940 	.word	0x30003940
2405117c:	30004c80 	.word	0x30004c80
24051180:	30000000 	.word	0x30000000

24051184 <play_generator>:

void play_generator(Generator *gen, int start, int len) {
24051184:	b480      	push	{r7}
24051186:	b089      	sub	sp, #36	; 0x24
24051188:	af00      	add	r7, sp, #0
2405118a:	60f8      	str	r0, [r7, #12]
2405118c:	60b9      	str	r1, [r7, #8]
2405118e:	607a      	str	r2, [r7, #4]
	int i;
	uint8_t freq = (*gen).gen_freq[0];
24051190:	68fb      	ldr	r3, [r7, #12]
24051192:	781b      	ldrb	r3, [r3, #0]
24051194:	74fb      	strb	r3, [r7, #19]
	if (freq == 0) {
24051196:	7cfb      	ldrb	r3, [r7, #19]
24051198:	2b00      	cmp	r3, #0
2405119a:	d112      	bne.n	240511c2 <play_generator+0x3e>
		for (i = start; i < start + len; i++) {
2405119c:	68bb      	ldr	r3, [r7, #8]
2405119e:	61fb      	str	r3, [r7, #28]
240511a0:	e008      	b.n	240511b4 <play_generator+0x30>
			gen->audiobuffer[i] = 0;
240511a2:	68fb      	ldr	r3, [r7, #12]
240511a4:	69fa      	ldr	r2, [r7, #28]
240511a6:	323c      	adds	r2, #60	; 0x3c
240511a8:	2100      	movs	r1, #0
240511aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = start; i < start + len; i++) {
240511ae:	69fb      	ldr	r3, [r7, #28]
240511b0:	3301      	adds	r3, #1
240511b2:	61fb      	str	r3, [r7, #28]
240511b4:	68ba      	ldr	r2, [r7, #8]
240511b6:	687b      	ldr	r3, [r7, #4]
240511b8:	4413      	add	r3, r2
240511ba:	69fa      	ldr	r2, [r7, #28]
240511bc:	429a      	cmp	r2, r3
240511be:	dbf0      	blt.n	240511a2 <play_generator+0x1e>
		}
		return;
240511c0:	e08d      	b.n	240512de <play_generator+0x15a>
	}
	uint8_t duty = (*gen).gen_duty[0];
240511c2:	68fb      	ldr	r3, [r7, #12]
240511c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
240511c8:	74bb      	strb	r3, [r7, #18]
	uint16_t samples_high;
	uint16_t samples_low;
	switch (duty) {
240511ca:	7cbb      	ldrb	r3, [r7, #18]
240511cc:	2b02      	cmp	r3, #2
240511ce:	d018      	beq.n	24051202 <play_generator+0x7e>
240511d0:	2b02      	cmp	r3, #2
240511d2:	dc1f      	bgt.n	24051214 <play_generator+0x90>
240511d4:	2b00      	cmp	r3, #0
240511d6:	d002      	beq.n	240511de <play_generator+0x5a>
240511d8:	2b01      	cmp	r3, #1
240511da:	d009      	beq.n	240511f0 <play_generator+0x6c>
240511dc:	e01a      	b.n	24051214 <play_generator+0x90>
	case PW_SHORT:
		samples_high = 1 * (uint16_t) freq;
240511de:	7cfb      	ldrb	r3, [r7, #19]
240511e0:	837b      	strh	r3, [r7, #26]
		samples_low = 3 * (uint16_t) freq;
240511e2:	7cfb      	ldrb	r3, [r7, #19]
240511e4:	b29b      	uxth	r3, r3
240511e6:	461a      	mov	r2, r3
240511e8:	0052      	lsls	r2, r2, #1
240511ea:	4413      	add	r3, r2
240511ec:	833b      	strh	r3, [r7, #24]
		break;
240511ee:	e01a      	b.n	24051226 <play_generator+0xa2>
	case PW_HALF:
		samples_high = 2 * (uint16_t) freq;
240511f0:	7cfb      	ldrb	r3, [r7, #19]
240511f2:	b29b      	uxth	r3, r3
240511f4:	005b      	lsls	r3, r3, #1
240511f6:	837b      	strh	r3, [r7, #26]
		samples_low = 2 * (uint16_t) freq;
240511f8:	7cfb      	ldrb	r3, [r7, #19]
240511fa:	b29b      	uxth	r3, r3
240511fc:	005b      	lsls	r3, r3, #1
240511fe:	833b      	strh	r3, [r7, #24]
		break;
24051200:	e011      	b.n	24051226 <play_generator+0xa2>
	case PW_LONG:
		samples_high = 3 * (uint16_t) freq;
24051202:	7cfb      	ldrb	r3, [r7, #19]
24051204:	b29b      	uxth	r3, r3
24051206:	461a      	mov	r2, r3
24051208:	0052      	lsls	r2, r2, #1
2405120a:	4413      	add	r3, r2
2405120c:	837b      	strh	r3, [r7, #26]
		samples_low = 1 * (uint16_t) freq;
2405120e:	7cfb      	ldrb	r3, [r7, #19]
24051210:	833b      	strh	r3, [r7, #24]
		break;
24051212:	e008      	b.n	24051226 <play_generator+0xa2>
	default:
		samples_high = 2 * (uint16_t) freq;
24051214:	7cfb      	ldrb	r3, [r7, #19]
24051216:	b29b      	uxth	r3, r3
24051218:	005b      	lsls	r3, r3, #1
2405121a:	837b      	strh	r3, [r7, #26]
		samples_low = 2 * (uint16_t) freq;
2405121c:	7cfb      	ldrb	r3, [r7, #19]
2405121e:	b29b      	uxth	r3, r3
24051220:	005b      	lsls	r3, r3, #1
24051222:	833b      	strh	r3, [r7, #24]
		break;
24051224:	bf00      	nop
	}
	uint8_t vol = (*gen).gen_vol[0];
24051226:	68fb      	ldr	r3, [r7, #12]
24051228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
2405122c:	747b      	strb	r3, [r7, #17]
	uint16_t counter_high = (*gen).samples_high;
2405122e:	68fb      	ldr	r3, [r7, #12]
24051230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24051234:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
24051238:	82fb      	strh	r3, [r7, #22]
	uint16_t counter_low = (*gen).samples_low;
2405123a:	68fb      	ldr	r3, [r7, #12]
2405123c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24051240:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
24051244:	82bb      	strh	r3, [r7, #20]

	if (counter_high > samples_high) {
24051246:	8afa      	ldrh	r2, [r7, #22]
24051248:	8b7b      	ldrh	r3, [r7, #26]
2405124a:	429a      	cmp	r2, r3
2405124c:	d901      	bls.n	24051252 <play_generator+0xce>
		counter_high = samples_high;
2405124e:	8b7b      	ldrh	r3, [r7, #26]
24051250:	82fb      	strh	r3, [r7, #22]
	}
	if (counter_low > samples_low) {
24051252:	8aba      	ldrh	r2, [r7, #20]
24051254:	8b3b      	ldrh	r3, [r7, #24]
24051256:	429a      	cmp	r2, r3
24051258:	d901      	bls.n	2405125e <play_generator+0xda>
		counter_low = samples_low;
2405125a:	8b3b      	ldrh	r3, [r7, #24]
2405125c:	82bb      	strh	r3, [r7, #20]
	}

	for (i = start; i < start + len; i++) {
2405125e:	68bb      	ldr	r3, [r7, #8]
24051260:	61fb      	str	r3, [r7, #28]
24051262:	e028      	b.n	240512b6 <play_generator+0x132>
		if (counter_high > 0) {
24051264:	8afb      	ldrh	r3, [r7, #22]
24051266:	2b00      	cmp	r3, #0
24051268:	d00a      	beq.n	24051280 <play_generator+0xfc>
			gen->audiobuffer[i] = (int16_t) vol;
2405126a:	7c7b      	ldrb	r3, [r7, #17]
2405126c:	b219      	sxth	r1, r3
2405126e:	68fb      	ldr	r3, [r7, #12]
24051270:	69fa      	ldr	r2, [r7, #28]
24051272:	323c      	adds	r2, #60	; 0x3c
24051274:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			counter_high--;
24051278:	8afb      	ldrh	r3, [r7, #22]
2405127a:	3b01      	subs	r3, #1
2405127c:	82fb      	strh	r3, [r7, #22]
2405127e:	e017      	b.n	240512b0 <play_generator+0x12c>
		} else {
			if (counter_low > 0) {
24051280:	8abb      	ldrh	r3, [r7, #20]
24051282:	2b00      	cmp	r3, #0
24051284:	d00d      	beq.n	240512a2 <play_generator+0x11e>
				gen->audiobuffer[i] = -(int16_t) vol;
24051286:	7c7b      	ldrb	r3, [r7, #17]
24051288:	b29b      	uxth	r3, r3
2405128a:	425b      	negs	r3, r3
2405128c:	b29b      	uxth	r3, r3
2405128e:	b219      	sxth	r1, r3
24051290:	68fb      	ldr	r3, [r7, #12]
24051292:	69fa      	ldr	r2, [r7, #28]
24051294:	323c      	adds	r2, #60	; 0x3c
24051296:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				counter_low--;
2405129a:	8abb      	ldrh	r3, [r7, #20]
2405129c:	3b01      	subs	r3, #1
2405129e:	82bb      	strh	r3, [r7, #20]
240512a0:	e006      	b.n	240512b0 <play_generator+0x12c>
			} else {
				counter_high = samples_high;
240512a2:	8b7b      	ldrh	r3, [r7, #26]
240512a4:	82fb      	strh	r3, [r7, #22]
				counter_low = samples_low;
240512a6:	8b3b      	ldrh	r3, [r7, #24]
240512a8:	82bb      	strh	r3, [r7, #20]
				i--;
240512aa:	69fb      	ldr	r3, [r7, #28]
240512ac:	3b01      	subs	r3, #1
240512ae:	61fb      	str	r3, [r7, #28]
	for (i = start; i < start + len; i++) {
240512b0:	69fb      	ldr	r3, [r7, #28]
240512b2:	3301      	adds	r3, #1
240512b4:	61fb      	str	r3, [r7, #28]
240512b6:	68ba      	ldr	r2, [r7, #8]
240512b8:	687b      	ldr	r3, [r7, #4]
240512ba:	4413      	add	r3, r2
240512bc:	69fa      	ldr	r2, [r7, #28]
240512be:	429a      	cmp	r2, r3
240512c0:	dbd0      	blt.n	24051264 <play_generator+0xe0>
			}
		}
	}
	gen->samples_high = counter_high;
240512c2:	68fb      	ldr	r3, [r7, #12]
240512c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
240512c8:	461a      	mov	r2, r3
240512ca:	8afb      	ldrh	r3, [r7, #22]
240512cc:	f8a2 3338 	strh.w	r3, [r2, #824]	; 0x338
	gen->samples_low = counter_low;
240512d0:	68fb      	ldr	r3, [r7, #12]
240512d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
240512d6:	461a      	mov	r2, r3
240512d8:	8abb      	ldrh	r3, [r7, #20]
240512da:	f8a2 333a 	strh.w	r3, [r2, #826]	; 0x33a
}
240512de:	3724      	adds	r7, #36	; 0x24
240512e0:	46bd      	mov	sp, r7
240512e2:	f85d 7b04 	ldr.w	r7, [sp], #4
240512e6:	4770      	bx	lr

240512e8 <move_generator>:

void move_generator(Generator *gen) {
240512e8:	b480      	push	{r7}
240512ea:	b087      	sub	sp, #28
240512ec:	af00      	add	r7, sp, #0
240512ee:	6078      	str	r0, [r7, #4]
	int i, n = AUDIO_PROGRAMMABLE_LENGTH;
240512f0:	2328      	movs	r3, #40	; 0x28
240512f2:	613b      	str	r3, [r7, #16]
	uint8_t *a = gen->gen_freq;
240512f4:	687b      	ldr	r3, [r7, #4]
240512f6:	60fb      	str	r3, [r7, #12]
	uint8_t temp = a[0];
240512f8:	68fb      	ldr	r3, [r7, #12]
240512fa:	781b      	ldrb	r3, [r3, #0]
240512fc:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
240512fe:	2300      	movs	r3, #0
24051300:	617b      	str	r3, [r7, #20]
24051302:	e00b      	b.n	2405131c <move_generator+0x34>
		a[i] = a[i + 1];
24051304:	697b      	ldr	r3, [r7, #20]
24051306:	3301      	adds	r3, #1
24051308:	68fa      	ldr	r2, [r7, #12]
2405130a:	441a      	add	r2, r3
2405130c:	697b      	ldr	r3, [r7, #20]
2405130e:	68f9      	ldr	r1, [r7, #12]
24051310:	440b      	add	r3, r1
24051312:	7812      	ldrb	r2, [r2, #0]
24051314:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
24051316:	697b      	ldr	r3, [r7, #20]
24051318:	3301      	adds	r3, #1
2405131a:	617b      	str	r3, [r7, #20]
2405131c:	693b      	ldr	r3, [r7, #16]
2405131e:	3b01      	subs	r3, #1
24051320:	697a      	ldr	r2, [r7, #20]
24051322:	429a      	cmp	r2, r3
24051324:	dbee      	blt.n	24051304 <move_generator+0x1c>
	}
	a[n - 1] = temp;
24051326:	693b      	ldr	r3, [r7, #16]
24051328:	3b01      	subs	r3, #1
2405132a:	68fa      	ldr	r2, [r7, #12]
2405132c:	4413      	add	r3, r2
2405132e:	7afa      	ldrb	r2, [r7, #11]
24051330:	701a      	strb	r2, [r3, #0]
	a = gen->gen_vol;
24051332:	687b      	ldr	r3, [r7, #4]
24051334:	3328      	adds	r3, #40	; 0x28
24051336:	60fb      	str	r3, [r7, #12]
	temp = a[0];
24051338:	68fb      	ldr	r3, [r7, #12]
2405133a:	781b      	ldrb	r3, [r3, #0]
2405133c:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
2405133e:	2300      	movs	r3, #0
24051340:	617b      	str	r3, [r7, #20]
24051342:	e00b      	b.n	2405135c <move_generator+0x74>
		a[i] = a[i + 1];
24051344:	697b      	ldr	r3, [r7, #20]
24051346:	3301      	adds	r3, #1
24051348:	68fa      	ldr	r2, [r7, #12]
2405134a:	441a      	add	r2, r3
2405134c:	697b      	ldr	r3, [r7, #20]
2405134e:	68f9      	ldr	r1, [r7, #12]
24051350:	440b      	add	r3, r1
24051352:	7812      	ldrb	r2, [r2, #0]
24051354:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
24051356:	697b      	ldr	r3, [r7, #20]
24051358:	3301      	adds	r3, #1
2405135a:	617b      	str	r3, [r7, #20]
2405135c:	693b      	ldr	r3, [r7, #16]
2405135e:	3b01      	subs	r3, #1
24051360:	697a      	ldr	r2, [r7, #20]
24051362:	429a      	cmp	r2, r3
24051364:	dbee      	blt.n	24051344 <move_generator+0x5c>
	}
	a[n - 1] = temp;
24051366:	693b      	ldr	r3, [r7, #16]
24051368:	3b01      	subs	r3, #1
2405136a:	68fa      	ldr	r2, [r7, #12]
2405136c:	4413      	add	r3, r2
2405136e:	7afa      	ldrb	r2, [r7, #11]
24051370:	701a      	strb	r2, [r3, #0]
	a = gen->gen_duty;
24051372:	687b      	ldr	r3, [r7, #4]
24051374:	3350      	adds	r3, #80	; 0x50
24051376:	60fb      	str	r3, [r7, #12]
	temp = a[0];
24051378:	68fb      	ldr	r3, [r7, #12]
2405137a:	781b      	ldrb	r3, [r3, #0]
2405137c:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
2405137e:	2300      	movs	r3, #0
24051380:	617b      	str	r3, [r7, #20]
24051382:	e00b      	b.n	2405139c <move_generator+0xb4>
		a[i] = a[i + 1];
24051384:	697b      	ldr	r3, [r7, #20]
24051386:	3301      	adds	r3, #1
24051388:	68fa      	ldr	r2, [r7, #12]
2405138a:	441a      	add	r2, r3
2405138c:	697b      	ldr	r3, [r7, #20]
2405138e:	68f9      	ldr	r1, [r7, #12]
24051390:	440b      	add	r3, r1
24051392:	7812      	ldrb	r2, [r2, #0]
24051394:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
24051396:	697b      	ldr	r3, [r7, #20]
24051398:	3301      	adds	r3, #1
2405139a:	617b      	str	r3, [r7, #20]
2405139c:	693b      	ldr	r3, [r7, #16]
2405139e:	3b01      	subs	r3, #1
240513a0:	697a      	ldr	r2, [r7, #20]
240513a2:	429a      	cmp	r2, r3
240513a4:	dbee      	blt.n	24051384 <move_generator+0x9c>
	}
	a[n - 1] = temp;
240513a6:	693b      	ldr	r3, [r7, #16]
240513a8:	3b01      	subs	r3, #1
240513aa:	68fa      	ldr	r2, [r7, #12]
240513ac:	4413      	add	r3, r2
240513ae:	7afa      	ldrb	r2, [r7, #11]
240513b0:	701a      	strb	r2, [r3, #0]
}
240513b2:	bf00      	nop
240513b4:	371c      	adds	r7, #28
240513b6:	46bd      	mov	sp, r7
240513b8:	f85d 7b04 	ldr.w	r7, [sp], #4
240513bc:	4770      	bx	lr

240513be <play_noise>:

void play_noise(Noise *noise, int start, int len) {
240513be:	b480      	push	{r7}
240513c0:	b08b      	sub	sp, #44	; 0x2c
240513c2:	af00      	add	r7, sp, #0
240513c4:	60f8      	str	r0, [r7, #12]
240513c6:	60b9      	str	r1, [r7, #8]
240513c8:	607a      	str	r2, [r7, #4]
	int i;
	uint16_t freq = 4 * (uint16_t) (*noise).noise_freq[0];
240513ca:	68fb      	ldr	r3, [r7, #12]
240513cc:	781b      	ldrb	r3, [r3, #0]
240513ce:	b29b      	uxth	r3, r3
240513d0:	009b      	lsls	r3, r3, #2
240513d2:	837b      	strh	r3, [r7, #26]
	if (freq == 0) {
240513d4:	8b7b      	ldrh	r3, [r7, #26]
240513d6:	2b00      	cmp	r3, #0
240513d8:	d112      	bne.n	24051400 <play_noise+0x42>
		for (i = start; i < start + len; i++) {
240513da:	68bb      	ldr	r3, [r7, #8]
240513dc:	627b      	str	r3, [r7, #36]	; 0x24
240513de:	e008      	b.n	240513f2 <play_noise+0x34>
			noise->audiobuffer[i] = 0;
240513e0:	68fb      	ldr	r3, [r7, #12]
240513e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
240513e4:	3228      	adds	r2, #40	; 0x28
240513e6:	2100      	movs	r1, #0
240513e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = start; i < start + len; i++) {
240513ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240513ee:	3301      	adds	r3, #1
240513f0:	627b      	str	r3, [r7, #36]	; 0x24
240513f2:	68ba      	ldr	r2, [r7, #8]
240513f4:	687b      	ldr	r3, [r7, #4]
240513f6:	4413      	add	r3, r2
240513f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
240513fa:	429a      	cmp	r2, r3
240513fc:	dbf0      	blt.n	240513e0 <play_noise+0x22>
		}
		return;
240513fe:	e06b      	b.n	240514d8 <play_noise+0x11a>
	}
	uint8_t vol = (*noise).noise_vol[0];
24051400:	68fb      	ldr	r3, [r7, #12]
24051402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
24051406:	767b      	strb	r3, [r7, #25]
	uint16_t LFSR = (*noise).LFSR;
24051408:	68fb      	ldr	r3, [r7, #12]
2405140a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
2405140e:	f8b3 3310 	ldrh.w	r3, [r3, #784]	; 0x310
24051412:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t last = (*noise).last;
24051414:	68fb      	ldr	r3, [r7, #12]
24051416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
2405141a:	f8b3 3312 	ldrh.w	r3, [r3, #786]	; 0x312
2405141e:	843b      	strh	r3, [r7, #32]
	int out = 0;
24051420:	2300      	movs	r3, #0
24051422:	61fb      	str	r3, [r7, #28]
	if (last > freq) {
24051424:	8c3a      	ldrh	r2, [r7, #32]
24051426:	8b7b      	ldrh	r3, [r7, #26]
24051428:	429a      	cmp	r2, r3
2405142a:	d901      	bls.n	24051430 <play_noise+0x72>
		last = freq;
2405142c:	8b7b      	ldrh	r3, [r7, #26]
2405142e:	843b      	strh	r3, [r7, #32]
	}
	for (i = start; i < start + len; i++) {
24051430:	68bb      	ldr	r3, [r7, #8]
24051432:	627b      	str	r3, [r7, #36]	; 0x24
24051434:	e03c      	b.n	240514b0 <play_noise+0xf2>
		if (last > 0) {
24051436:	8c3b      	ldrh	r3, [r7, #32]
24051438:	2b00      	cmp	r3, #0
2405143a:	d013      	beq.n	24051464 <play_noise+0xa6>
			noise->audiobuffer[i] =
2405143c:	69fb      	ldr	r3, [r7, #28]
2405143e:	2b01      	cmp	r3, #1
24051440:	d105      	bne.n	2405144e <play_noise+0x90>
24051442:	7e7b      	ldrb	r3, [r7, #25]
24051444:	b29b      	uxth	r3, r3
24051446:	425b      	negs	r3, r3
24051448:	b29b      	uxth	r3, r3
2405144a:	b21b      	sxth	r3, r3
2405144c:	e001      	b.n	24051452 <play_noise+0x94>
2405144e:	7e7b      	ldrb	r3, [r7, #25]
24051450:	b21b      	sxth	r3, r3
24051452:	68fa      	ldr	r2, [r7, #12]
24051454:	6a79      	ldr	r1, [r7, #36]	; 0x24
24051456:	3128      	adds	r1, #40	; 0x28
24051458:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
					(out == 1) ? -1 * (int16_t) vol : (int16_t) vol;
			last--;
2405145c:	8c3b      	ldrh	r3, [r7, #32]
2405145e:	3b01      	subs	r3, #1
24051460:	843b      	strh	r3, [r7, #32]
24051462:	e022      	b.n	240514aa <play_noise+0xec>
		} else {
			last = freq;
24051464:	8b7b      	ldrh	r3, [r7, #26]
24051466:	843b      	strh	r3, [r7, #32]
			i--;
24051468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405146a:	3b01      	subs	r3, #1
2405146c:	627b      	str	r3, [r7, #36]	; 0x24
			uint16_t xor_result = (LFSR & 0b01) ^ ((LFSR & 0b10) >> 1);
2405146e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
24051470:	105b      	asrs	r3, r3, #1
24051472:	b21a      	sxth	r2, r3
24051474:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
24051478:	4053      	eors	r3, r2
2405147a:	b21b      	sxth	r3, r3
2405147c:	b29b      	uxth	r3, r3
2405147e:	f003 0301 	and.w	r3, r3, #1
24051482:	82fb      	strh	r3, [r7, #22]
			LFSR = (LFSR >> 1) | (xor_result << 14);
24051484:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
24051486:	085b      	lsrs	r3, r3, #1
24051488:	b29b      	uxth	r3, r3
2405148a:	b21a      	sxth	r2, r3
2405148c:	8afb      	ldrh	r3, [r7, #22]
2405148e:	039b      	lsls	r3, r3, #14
24051490:	b21b      	sxth	r3, r3
24051492:	4313      	orrs	r3, r2
24051494:	b21b      	sxth	r3, r3
24051496:	847b      	strh	r3, [r7, #34]	; 0x22
			out = ~LFSR & 0x01;
24051498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
2405149a:	f003 0301 	and.w	r3, r3, #1
2405149e:	2b00      	cmp	r3, #0
240514a0:	bf0c      	ite	eq
240514a2:	2301      	moveq	r3, #1
240514a4:	2300      	movne	r3, #0
240514a6:	b2db      	uxtb	r3, r3
240514a8:	61fb      	str	r3, [r7, #28]
	for (i = start; i < start + len; i++) {
240514aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240514ac:	3301      	adds	r3, #1
240514ae:	627b      	str	r3, [r7, #36]	; 0x24
240514b0:	68ba      	ldr	r2, [r7, #8]
240514b2:	687b      	ldr	r3, [r7, #4]
240514b4:	4413      	add	r3, r2
240514b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
240514b8:	429a      	cmp	r2, r3
240514ba:	dbbc      	blt.n	24051436 <play_noise+0x78>
		}
	}
	noise->LFSR = LFSR;
240514bc:	68fb      	ldr	r3, [r7, #12]
240514be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
240514c2:	461a      	mov	r2, r3
240514c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
240514c6:	f8a2 3310 	strh.w	r3, [r2, #784]	; 0x310
	noise->last = last;
240514ca:	68fb      	ldr	r3, [r7, #12]
240514cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
240514d0:	461a      	mov	r2, r3
240514d2:	8c3b      	ldrh	r3, [r7, #32]
240514d4:	f8a2 3312 	strh.w	r3, [r2, #786]	; 0x312
}
240514d8:	372c      	adds	r7, #44	; 0x2c
240514da:	46bd      	mov	sp, r7
240514dc:	f85d 7b04 	ldr.w	r7, [sp], #4
240514e0:	4770      	bx	lr

240514e2 <move_noise>:

void move_noise(Noise *noise) {
240514e2:	b480      	push	{r7}
240514e4:	b087      	sub	sp, #28
240514e6:	af00      	add	r7, sp, #0
240514e8:	6078      	str	r0, [r7, #4]
	int i, n = AUDIO_PROGRAMMABLE_LENGTH;
240514ea:	2328      	movs	r3, #40	; 0x28
240514ec:	613b      	str	r3, [r7, #16]
	uint8_t *a = noise->noise_freq;
240514ee:	687b      	ldr	r3, [r7, #4]
240514f0:	60fb      	str	r3, [r7, #12]
	uint8_t temp = a[0];
240514f2:	68fb      	ldr	r3, [r7, #12]
240514f4:	781b      	ldrb	r3, [r3, #0]
240514f6:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
240514f8:	2300      	movs	r3, #0
240514fa:	617b      	str	r3, [r7, #20]
240514fc:	e00b      	b.n	24051516 <move_noise+0x34>
		a[i] = a[i + 1];
240514fe:	697b      	ldr	r3, [r7, #20]
24051500:	3301      	adds	r3, #1
24051502:	68fa      	ldr	r2, [r7, #12]
24051504:	441a      	add	r2, r3
24051506:	697b      	ldr	r3, [r7, #20]
24051508:	68f9      	ldr	r1, [r7, #12]
2405150a:	440b      	add	r3, r1
2405150c:	7812      	ldrb	r2, [r2, #0]
2405150e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
24051510:	697b      	ldr	r3, [r7, #20]
24051512:	3301      	adds	r3, #1
24051514:	617b      	str	r3, [r7, #20]
24051516:	693b      	ldr	r3, [r7, #16]
24051518:	3b01      	subs	r3, #1
2405151a:	697a      	ldr	r2, [r7, #20]
2405151c:	429a      	cmp	r2, r3
2405151e:	dbee      	blt.n	240514fe <move_noise+0x1c>
	}
	a[n - 1] = temp;
24051520:	693b      	ldr	r3, [r7, #16]
24051522:	3b01      	subs	r3, #1
24051524:	68fa      	ldr	r2, [r7, #12]
24051526:	4413      	add	r3, r2
24051528:	7afa      	ldrb	r2, [r7, #11]
2405152a:	701a      	strb	r2, [r3, #0]
	a = noise->noise_vol;
2405152c:	687b      	ldr	r3, [r7, #4]
2405152e:	3328      	adds	r3, #40	; 0x28
24051530:	60fb      	str	r3, [r7, #12]
	temp = a[0];
24051532:	68fb      	ldr	r3, [r7, #12]
24051534:	781b      	ldrb	r3, [r3, #0]
24051536:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
24051538:	2300      	movs	r3, #0
2405153a:	617b      	str	r3, [r7, #20]
2405153c:	e00b      	b.n	24051556 <move_noise+0x74>
		a[i] = a[i + 1];
2405153e:	697b      	ldr	r3, [r7, #20]
24051540:	3301      	adds	r3, #1
24051542:	68fa      	ldr	r2, [r7, #12]
24051544:	441a      	add	r2, r3
24051546:	697b      	ldr	r3, [r7, #20]
24051548:	68f9      	ldr	r1, [r7, #12]
2405154a:	440b      	add	r3, r1
2405154c:	7812      	ldrb	r2, [r2, #0]
2405154e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
24051550:	697b      	ldr	r3, [r7, #20]
24051552:	3301      	adds	r3, #1
24051554:	617b      	str	r3, [r7, #20]
24051556:	693b      	ldr	r3, [r7, #16]
24051558:	3b01      	subs	r3, #1
2405155a:	697a      	ldr	r2, [r7, #20]
2405155c:	429a      	cmp	r2, r3
2405155e:	dbee      	blt.n	2405153e <move_noise+0x5c>
	}
	a[n - 1] = temp;
24051560:	693b      	ldr	r3, [r7, #16]
24051562:	3b01      	subs	r3, #1
24051564:	68fa      	ldr	r2, [r7, #12]
24051566:	4413      	add	r3, r2
24051568:	7afa      	ldrb	r2, [r7, #11]
2405156a:	701a      	strb	r2, [r3, #0]
}
2405156c:	bf00      	nop
2405156e:	371c      	adds	r7, #28
24051570:	46bd      	mov	sp, r7
24051572:	f85d 7b04 	ldr.w	r7, [sp], #4
24051576:	4770      	bx	lr

24051578 <HAL_ADC_ConvCpltCallback>:
		int percent;
		bq24072_state_t state;
	} last;
} bq24072_data;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
24051578:	b580      	push	{r7, lr}
2405157a:	b082      	sub	sp, #8
2405157c:	af00      	add	r7, sp, #0
2405157e:	6078      	str	r0, [r7, #4]
	bq24072_data.value = HAL_ADC_GetValue(hadc);
24051580:	6878      	ldr	r0, [r7, #4]
24051582:	f003 fb2b 	bl	24054bdc <HAL_ADC_GetValue>
24051586:	4603      	mov	r3, r0
24051588:	b29a      	uxth	r2, r3
2405158a:	4b04      	ldr	r3, [pc, #16]	; (2405159c <HAL_ADC_ConvCpltCallback+0x24>)
2405158c:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop_IT(hadc);
2405158e:	6878      	ldr	r0, [r7, #4]
24051590:	f003 fae8 	bl	24054b64 <HAL_ADC_Stop_IT>
}
24051594:	bf00      	nop
24051596:	3708      	adds	r7, #8
24051598:	46bd      	mov	sp, r7
2405159a:	bd80      	pop	{r7, pc}
2405159c:	200001fc 	.word	0x200001fc

240515a0 <bq24072_init>:

int32_t bq24072_init(void) {
240515a0:	b580      	push	{r7, lr}
240515a2:	af00      	add	r7, sp, #0
	// Read initial states
	bq24072_handle_power_good();
240515a4:	f000 f80c 	bl	240515c0 <bq24072_handle_power_good>
	bq24072_handle_charging();
240515a8:	f000 f822 	bl	240515f0 <bq24072_handle_charging>
	bq24072_poll();
240515ac:	f000 f838 	bl	24051620 <bq24072_poll>

	// Start timer for voltage poll
	HAL_TIM_Base_Start_IT(&htim1);
240515b0:	4802      	ldr	r0, [pc, #8]	; (240515bc <bq24072_init+0x1c>)
240515b2:	f00f fac1 	bl	24060b38 <HAL_TIM_Base_Start_IT>

	return 0;
240515b6:	2300      	movs	r3, #0
}
240515b8:	4618      	mov	r0, r3
240515ba:	bd80      	pop	{r7, pc}
240515bc:	200005c8 	.word	0x200005c8

240515c0 <bq24072_handle_power_good>:

void bq24072_handle_power_good(void) {
240515c0:	b580      	push	{r7, lr}
240515c2:	af00      	add	r7, sp, #0
	bq24072_data.power_good = !(HAL_GPIO_ReadPin(
			bq_pins[BQ24072_PIN_PGOOD].bank, bq_pins[BQ24072_PIN_PGOOD].pin)
240515c4:	4a08      	ldr	r2, [pc, #32]	; (240515e8 <bq24072_handle_power_good+0x28>)
240515c6:	2304      	movs	r3, #4
	bq24072_data.power_good = !(HAL_GPIO_ReadPin(
240515c8:	b29b      	uxth	r3, r3
240515ca:	4619      	mov	r1, r3
240515cc:	4610      	mov	r0, r2
240515ce:	f007 ff7f 	bl	240594d0 <HAL_GPIO_ReadPin>
240515d2:	4603      	mov	r3, r0
240515d4:	2b01      	cmp	r3, #1
240515d6:	bf14      	ite	ne
240515d8:	2301      	movne	r3, #1
240515da:	2300      	moveq	r3, #0
240515dc:	b2da      	uxtb	r2, r3
240515de:	4b03      	ldr	r3, [pc, #12]	; (240515ec <bq24072_handle_power_good+0x2c>)
240515e0:	70da      	strb	r2, [r3, #3]
			== GPIO_PIN_SET);
}
240515e2:	bf00      	nop
240515e4:	bd80      	pop	{r7, pc}
240515e6:	bf00      	nop
240515e8:	58020000 	.word	0x58020000
240515ec:	200001fc 	.word	0x200001fc

240515f0 <bq24072_handle_charging>:

void bq24072_handle_charging(void) {
240515f0:	b580      	push	{r7, lr}
240515f2:	af00      	add	r7, sp, #0
	bq24072_data.charging = !(HAL_GPIO_ReadPin(bq_pins[BQ24072_PIN_CHG].bank,
240515f4:	4a08      	ldr	r2, [pc, #32]	; (24051618 <bq24072_handle_charging+0x28>)
			bq_pins[BQ24072_PIN_CHG].pin) == GPIO_PIN_SET);
240515f6:	2380      	movs	r3, #128	; 0x80
	bq24072_data.charging = !(HAL_GPIO_ReadPin(bq_pins[BQ24072_PIN_CHG].bank,
240515f8:	b29b      	uxth	r3, r3
240515fa:	4619      	mov	r1, r3
240515fc:	4610      	mov	r0, r2
240515fe:	f007 ff67 	bl	240594d0 <HAL_GPIO_ReadPin>
24051602:	4603      	mov	r3, r0
24051604:	2b01      	cmp	r3, #1
24051606:	bf14      	ite	ne
24051608:	2301      	movne	r3, #1
2405160a:	2300      	moveq	r3, #0
2405160c:	b2da      	uxtb	r2, r3
2405160e:	4b03      	ldr	r3, [pc, #12]	; (2405161c <bq24072_handle_charging+0x2c>)
24051610:	709a      	strb	r2, [r3, #2]
}
24051612:	bf00      	nop
24051614:	bd80      	pop	{r7, pc}
24051616:	bf00      	nop
24051618:	58021000 	.word	0x58021000
2405161c:	200001fc 	.word	0x200001fc

24051620 <bq24072_poll>:
	}

	return percent;
}

void bq24072_poll(void) {
24051620:	b580      	push	{r7, lr}
24051622:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
24051624:	4802      	ldr	r0, [pc, #8]	; (24051630 <bq24072_poll+0x10>)
24051626:	f003 f96f 	bl	24054908 <HAL_ADC_Start_IT>
}
2405162a:	bf00      	nop
2405162c:	bd80      	pop	{r7, pc}
2405162e:	bf00      	nop
24051630:	20000210 	.word	0x20000210

24051634 <buttons_get>:
#include "stm32h7xx_hal.h"
#include "main.h"

#include <stdbool.h>

uint32_t buttons_get() {
24051634:	b580      	push	{r7, lr}
24051636:	b084      	sub	sp, #16
24051638:	af00      	add	r7, sp, #0
    bool left = HAL_GPIO_ReadPin(BTN_Left_GPIO_Port, BTN_Left_Pin) == GPIO_PIN_RESET;
2405163a:	f44f 6100 	mov.w	r1, #2048	; 0x800
2405163e:	4843      	ldr	r0, [pc, #268]	; (2405174c <buttons_get+0x118>)
24051640:	f007 ff46 	bl	240594d0 <HAL_GPIO_ReadPin>
24051644:	4603      	mov	r3, r0
24051646:	2b00      	cmp	r3, #0
24051648:	bf0c      	ite	eq
2405164a:	2301      	moveq	r3, #1
2405164c:	2300      	movne	r3, #0
2405164e:	73fb      	strb	r3, [r7, #15]
    bool right = HAL_GPIO_ReadPin(BTN_Right_GPIO_Port, BTN_Right_Pin) == GPIO_PIN_RESET;
24051650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24051654:	483d      	ldr	r0, [pc, #244]	; (2405174c <buttons_get+0x118>)
24051656:	f007 ff3b 	bl	240594d0 <HAL_GPIO_ReadPin>
2405165a:	4603      	mov	r3, r0
2405165c:	2b00      	cmp	r3, #0
2405165e:	bf0c      	ite	eq
24051660:	2301      	moveq	r3, #1
24051662:	2300      	movne	r3, #0
24051664:	73bb      	strb	r3, [r7, #14]
    bool up = HAL_GPIO_ReadPin(BTN_Up_GPIO_Port, BTN_Up_Pin) == GPIO_PIN_RESET ;
24051666:	2101      	movs	r1, #1
24051668:	4838      	ldr	r0, [pc, #224]	; (2405174c <buttons_get+0x118>)
2405166a:	f007 ff31 	bl	240594d0 <HAL_GPIO_ReadPin>
2405166e:	4603      	mov	r3, r0
24051670:	2b00      	cmp	r3, #0
24051672:	bf0c      	ite	eq
24051674:	2301      	moveq	r3, #1
24051676:	2300      	movne	r3, #0
24051678:	737b      	strb	r3, [r7, #13]
    bool down = HAL_GPIO_ReadPin(BTN_Down_GPIO_Port, BTN_Down_Pin) == GPIO_PIN_RESET;
2405167a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2405167e:	4833      	ldr	r0, [pc, #204]	; (2405174c <buttons_get+0x118>)
24051680:	f007 ff26 	bl	240594d0 <HAL_GPIO_ReadPin>
24051684:	4603      	mov	r3, r0
24051686:	2b00      	cmp	r3, #0
24051688:	bf0c      	ite	eq
2405168a:	2301      	moveq	r3, #1
2405168c:	2300      	movne	r3, #0
2405168e:	733b      	strb	r3, [r7, #12]
    bool a = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin) == GPIO_PIN_RESET;
24051690:	f44f 7100 	mov.w	r1, #512	; 0x200
24051694:	482d      	ldr	r0, [pc, #180]	; (2405174c <buttons_get+0x118>)
24051696:	f007 ff1b 	bl	240594d0 <HAL_GPIO_ReadPin>
2405169a:	4603      	mov	r3, r0
2405169c:	2b00      	cmp	r3, #0
2405169e:	bf0c      	ite	eq
240516a0:	2301      	moveq	r3, #1
240516a2:	2300      	movne	r3, #0
240516a4:	72fb      	strb	r3, [r7, #11]
    bool b = HAL_GPIO_ReadPin(BTN_B_GPIO_Port, BTN_B_Pin) == GPIO_PIN_RESET;
240516a6:	2120      	movs	r1, #32
240516a8:	4828      	ldr	r0, [pc, #160]	; (2405174c <buttons_get+0x118>)
240516aa:	f007 ff11 	bl	240594d0 <HAL_GPIO_ReadPin>
240516ae:	4603      	mov	r3, r0
240516b0:	2b00      	cmp	r3, #0
240516b2:	bf0c      	ite	eq
240516b4:	2301      	moveq	r3, #1
240516b6:	2300      	movne	r3, #0
240516b8:	72bb      	strb	r3, [r7, #10]
    bool time = HAL_GPIO_ReadPin(BTN_TIME_GPIO_Port, BTN_TIME_Pin) == GPIO_PIN_RESET;
240516ba:	2120      	movs	r1, #32
240516bc:	4824      	ldr	r0, [pc, #144]	; (24051750 <buttons_get+0x11c>)
240516be:	f007 ff07 	bl	240594d0 <HAL_GPIO_ReadPin>
240516c2:	4603      	mov	r3, r0
240516c4:	2b00      	cmp	r3, #0
240516c6:	bf0c      	ite	eq
240516c8:	2301      	moveq	r3, #1
240516ca:	2300      	movne	r3, #0
240516cc:	727b      	strb	r3, [r7, #9]
    bool game = HAL_GPIO_ReadPin(BTN_GAME_GPIO_Port, BTN_GAME_Pin) == GPIO_PIN_RESET;
240516ce:	2102      	movs	r1, #2
240516d0:	481f      	ldr	r0, [pc, #124]	; (24051750 <buttons_get+0x11c>)
240516d2:	f007 fefd 	bl	240594d0 <HAL_GPIO_ReadPin>
240516d6:	4603      	mov	r3, r0
240516d8:	2b00      	cmp	r3, #0
240516da:	bf0c      	ite	eq
240516dc:	2301      	moveq	r3, #1
240516de:	2300      	movne	r3, #0
240516e0:	723b      	strb	r3, [r7, #8]
    bool pause = HAL_GPIO_ReadPin(BTN_PAUSE_GPIO_Port, BTN_PAUSE_Pin) == GPIO_PIN_RESET;
240516e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
240516e6:	481a      	ldr	r0, [pc, #104]	; (24051750 <buttons_get+0x11c>)
240516e8:	f007 fef2 	bl	240594d0 <HAL_GPIO_ReadPin>
240516ec:	4603      	mov	r3, r0
240516ee:	2b00      	cmp	r3, #0
240516f0:	bf0c      	ite	eq
240516f2:	2301      	moveq	r3, #1
240516f4:	2300      	movne	r3, #0
240516f6:	71fb      	strb	r3, [r7, #7]
    bool power = HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == GPIO_PIN_RESET;
240516f8:	2101      	movs	r1, #1
240516fa:	4816      	ldr	r0, [pc, #88]	; (24051754 <buttons_get+0x120>)
240516fc:	f007 fee8 	bl	240594d0 <HAL_GPIO_ReadPin>
24051700:	4603      	mov	r3, r0
24051702:	2b00      	cmp	r3, #0
24051704:	bf0c      	ite	eq
24051706:	2301      	moveq	r3, #1
24051708:	2300      	movne	r3, #0
2405170a:	71bb      	strb	r3, [r7, #6]

    //bool start = HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET;
    //bool select = HAL_GPIO_ReadPin(BTN_SELECT_GPIO_Port, BTN_SELECT_Pin) == GPIO_PIN_RESET;

    return (
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) |
2405170c:	7bfa      	ldrb	r2, [r7, #15]
2405170e:	7b7b      	ldrb	r3, [r7, #13]
24051710:	005b      	lsls	r3, r3, #1
24051712:	431a      	orrs	r2, r3
24051714:	7bbb      	ldrb	r3, [r7, #14]
24051716:	009b      	lsls	r3, r3, #2
24051718:	431a      	orrs	r2, r3
2405171a:	7b3b      	ldrb	r3, [r7, #12]
2405171c:	00db      	lsls	r3, r3, #3
2405171e:	431a      	orrs	r2, r3
24051720:	7afb      	ldrb	r3, [r7, #11]
24051722:	011b      	lsls	r3, r3, #4
24051724:	431a      	orrs	r2, r3
24051726:	7abb      	ldrb	r3, [r7, #10]
24051728:	015b      	lsls	r3, r3, #5
2405172a:	431a      	orrs	r2, r3
        (time << 6) | (game << 7) | (pause << 8) | (power << 9)// | (start << 10) | (select << 11)
2405172c:	7a7b      	ldrb	r3, [r7, #9]
2405172e:	019b      	lsls	r3, r3, #6
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) |
24051730:	431a      	orrs	r2, r3
        (time << 6) | (game << 7) | (pause << 8) | (power << 9)// | (start << 10) | (select << 11)
24051732:	7a3b      	ldrb	r3, [r7, #8]
24051734:	01db      	lsls	r3, r3, #7
24051736:	431a      	orrs	r2, r3
24051738:	79fb      	ldrb	r3, [r7, #7]
2405173a:	021b      	lsls	r3, r3, #8
2405173c:	431a      	orrs	r2, r3
2405173e:	79bb      	ldrb	r3, [r7, #6]
24051740:	025b      	lsls	r3, r3, #9
24051742:	4313      	orrs	r3, r2
    );


}
24051744:	4618      	mov	r0, r3
24051746:	3710      	adds	r7, #16
24051748:	46bd      	mov	sp, r7
2405174a:	bd80      	pop	{r7, pc}
2405174c:	58020c00 	.word	0x58020c00
24051750:	58020800 	.word	0x58020800
24051754:	58020000 	.word	0x58020000

24051758 <set_ospi_cmd>:
static void set_ospi_cmd(OSPI_RegularCmdTypeDef *ospi_cmd,
                         const flash_cmd_t *cmd,
                         uint32_t address,
                         uint8_t *data,
                         size_t len)
{
24051758:	b580      	push	{r7, lr}
2405175a:	b084      	sub	sp, #16
2405175c:	af00      	add	r7, sp, #0
2405175e:	60f8      	str	r0, [r7, #12]
24051760:	60b9      	str	r1, [r7, #8]
24051762:	607a      	str	r2, [r7, #4]
24051764:	603b      	str	r3, [r7, #0]
    memset(ospi_cmd, 0x0, sizeof(*ospi_cmd));
24051766:	2250      	movs	r2, #80	; 0x50
24051768:	2100      	movs	r1, #0
2405176a:	68f8      	ldr	r0, [r7, #12]
2405176c:	f010 fa32 	bl	24061bd4 <memset>

    ospi_cmd->OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
24051770:	68fb      	ldr	r3, [r7, #12]
24051772:	2200      	movs	r2, #0
24051774:	601a      	str	r2, [r3, #0]
    ospi_cmd->FlashId = 0;
24051776:	68fb      	ldr	r3, [r7, #12]
24051778:	2200      	movs	r2, #0
2405177a:	605a      	str	r2, [r3, #4]
    ospi_cmd->Instruction = cmd->cmd;
2405177c:	68bb      	ldr	r3, [r7, #8]
2405177e:	781b      	ldrb	r3, [r3, #0]
24051780:	461a      	mov	r2, r3
24051782:	68fb      	ldr	r3, [r7, #12]
24051784:	609a      	str	r2, [r3, #8]
    ospi_cmd->InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
24051786:	68fb      	ldr	r3, [r7, #12]
24051788:	2200      	movs	r2, #0
2405178a:	611a      	str	r2, [r3, #16]
    ospi_cmd->InstructionMode = instruction_line_map[cmd->instr_lines];
2405178c:	68bb      	ldr	r3, [r7, #8]
2405178e:	785b      	ldrb	r3, [r3, #1]
24051790:	f3c3 0301 	ubfx	r3, r3, #0, #2
24051794:	b2db      	uxtb	r3, r3
24051796:	461a      	mov	r2, r3
24051798:	4b20      	ldr	r3, [pc, #128]	; (2405181c <set_ospi_cmd+0xc4>)
2405179a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
2405179e:	68fb      	ldr	r3, [r7, #12]
240517a0:	60da      	str	r2, [r3, #12]

    ospi_cmd->AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
240517a2:	68fb      	ldr	r3, [r7, #12]
240517a4:	2200      	movs	r2, #0
240517a6:	62da      	str	r2, [r3, #44]	; 0x2c
    ospi_cmd->DummyCycles = cmd->dummy;
240517a8:	68bb      	ldr	r3, [r7, #8]
240517aa:	789b      	ldrb	r3, [r3, #2]
240517ac:	461a      	mov	r2, r3
240517ae:	68fb      	ldr	r3, [r7, #12]
240517b0:	645a      	str	r2, [r3, #68]	; 0x44
    ospi_cmd->DQSMode = HAL_OSPI_DQS_DISABLE;
240517b2:	68fb      	ldr	r3, [r7, #12]
240517b4:	2200      	movs	r2, #0
240517b6:	649a      	str	r2, [r3, #72]	; 0x48
    ospi_cmd->SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
240517b8:	68fb      	ldr	r3, [r7, #12]
240517ba:	2200      	movs	r2, #0
240517bc:	64da      	str	r2, [r3, #76]	; 0x4c
    ospi_cmd->InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
240517be:	68fb      	ldr	r3, [r7, #12]
240517c0:	2200      	movs	r2, #0
240517c2:	615a      	str	r2, [r3, #20]

    ospi_cmd->Address = address;
240517c4:	68fb      	ldr	r3, [r7, #12]
240517c6:	687a      	ldr	r2, [r7, #4]
240517c8:	619a      	str	r2, [r3, #24]
    ospi_cmd->AddressSize = address_size_map[cmd->addr_size];
240517ca:	68bb      	ldr	r3, [r7, #8]
240517cc:	785b      	ldrb	r3, [r3, #1]
240517ce:	f3c3 1301 	ubfx	r3, r3, #4, #2
240517d2:	b2db      	uxtb	r3, r3
240517d4:	461a      	mov	r2, r3
240517d6:	4b12      	ldr	r3, [pc, #72]	; (24051820 <set_ospi_cmd+0xc8>)
240517d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
240517dc:	68fb      	ldr	r3, [r7, #12]
240517de:	621a      	str	r2, [r3, #32]
    ospi_cmd->AddressMode = address_line_map[cmd->addr_lines];
240517e0:	68bb      	ldr	r3, [r7, #8]
240517e2:	785b      	ldrb	r3, [r3, #1]
240517e4:	f3c3 0381 	ubfx	r3, r3, #2, #2
240517e8:	b2db      	uxtb	r3, r3
240517ea:	461a      	mov	r2, r3
240517ec:	4b0d      	ldr	r3, [pc, #52]	; (24051824 <set_ospi_cmd+0xcc>)
240517ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
240517f2:	68fb      	ldr	r3, [r7, #12]
240517f4:	61da      	str	r2, [r3, #28]

    ospi_cmd->NbData = len;
240517f6:	68fb      	ldr	r3, [r7, #12]
240517f8:	69ba      	ldr	r2, [r7, #24]
240517fa:	63da      	str	r2, [r3, #60]	; 0x3c
    ospi_cmd->DataMode = data_line_map[cmd->data_lines];
240517fc:	68bb      	ldr	r3, [r7, #8]
240517fe:	785b      	ldrb	r3, [r3, #1]
24051800:	f3c3 1381 	ubfx	r3, r3, #6, #2
24051804:	b2db      	uxtb	r3, r3
24051806:	461a      	mov	r2, r3
24051808:	4b07      	ldr	r3, [pc, #28]	; (24051828 <set_ospi_cmd+0xd0>)
2405180a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
2405180e:	68fb      	ldr	r3, [r7, #12]
24051810:	639a      	str	r2, [r3, #56]	; 0x38
}
24051812:	bf00      	nop
24051814:	3710      	adds	r7, #16
24051816:	46bd      	mov	sp, r7
24051818:	bd80      	pop	{r7, pc}
2405181a:	bf00      	nop
2405181c:	24063ea8 	.word	0x24063ea8
24051820:	24063ec0 	.word	0x24063ec0
24051824:	24063eb4 	.word	0x24063eb4
24051828:	24063ed0 	.word	0x24063ed0

2405182c <OSPI_ReadBytes>:

static void OSPI_ReadBytes(const flash_cmd_t *cmd,
                           uint32_t address,
                           uint8_t *data,
                           size_t len)
{
2405182c:	b580      	push	{r7, lr}
2405182e:	b09c      	sub	sp, #112	; 0x70
24051830:	af02      	add	r7, sp, #8
24051832:	60f8      	str	r0, [r7, #12]
24051834:	60b9      	str	r1, [r7, #8]
24051836:	607a      	str	r2, [r7, #4]
24051838:	603b      	str	r3, [r7, #0]
    OSPI_RegularCmdTypeDef ospi_cmd;

    // DBG("RB %d 0x%08x 0x%08X %d\n", cmd->cmd, address, data, len);

    assert(flash.mem_mapped_enabled == false);
2405183a:	4b1d      	ldr	r3, [pc, #116]	; (240518b0 <OSPI_ReadBytes+0x84>)
2405183c:	7c1b      	ldrb	r3, [r3, #16]
2405183e:	f083 0301 	eor.w	r3, r3, #1
24051842:	b2db      	uxtb	r3, r3
24051844:	2b00      	cmp	r3, #0
24051846:	d106      	bne.n	24051856 <OSPI_ReadBytes+0x2a>
24051848:	4b1a      	ldr	r3, [pc, #104]	; (240518b4 <OSPI_ReadBytes+0x88>)
2405184a:	4a1b      	ldr	r2, [pc, #108]	; (240518b8 <OSPI_ReadBytes+0x8c>)
2405184c:	f240 11a3 	movw	r1, #419	; 0x1a3
24051850:	481a      	ldr	r0, [pc, #104]	; (240518bc <OSPI_ReadBytes+0x90>)
24051852:	f00f fe17 	bl	24061484 <__assert_func>

    set_ospi_cmd(&ospi_cmd,
24051856:	f107 0014 	add.w	r0, r7, #20
2405185a:	683b      	ldr	r3, [r7, #0]
2405185c:	9300      	str	r3, [sp, #0]
2405185e:	687b      	ldr	r3, [r7, #4]
24051860:	68ba      	ldr	r2, [r7, #8]
24051862:	68f9      	ldr	r1, [r7, #12]
24051864:	f7ff ff78 	bl	24051758 <set_ospi_cmd>
                 len);

    //wdog_refresh();

    HAL_StatusTypeDef res;
    res = HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
24051868:	4b11      	ldr	r3, [pc, #68]	; (240518b0 <OSPI_ReadBytes+0x84>)
2405186a:	681b      	ldr	r3, [r3, #0]
2405186c:	f107 0114 	add.w	r1, r7, #20
24051870:	f241 3288 	movw	r2, #5000	; 0x1388
24051874:	4618      	mov	r0, r3
24051876:	f008 fc6d 	bl	2405a154 <HAL_OSPI_Command>
2405187a:	4603      	mov	r3, r0
2405187c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (res != HAL_OK) {
24051880:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
24051884:	2b00      	cmp	r3, #0
24051886:	d001      	beq.n	2405188c <OSPI_ReadBytes+0x60>
        Error_Handler();
24051888:	f001 fb7e 	bl	24052f88 <Error_Handler>
    }

    if (HAL_OSPI_Receive(flash.hospi, data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
2405188c:	4b08      	ldr	r3, [pc, #32]	; (240518b0 <OSPI_ReadBytes+0x84>)
2405188e:	681b      	ldr	r3, [r3, #0]
24051890:	f241 3288 	movw	r2, #5000	; 0x1388
24051894:	6879      	ldr	r1, [r7, #4]
24051896:	4618      	mov	r0, r3
24051898:	f008 fd5c 	bl	2405a354 <HAL_OSPI_Receive>
2405189c:	4603      	mov	r3, r0
2405189e:	2b00      	cmp	r3, #0
240518a0:	d001      	beq.n	240518a6 <OSPI_ReadBytes+0x7a>
        Error_Handler();
240518a2:	f001 fb71 	bl	24052f88 <Error_Handler>
    }
}
240518a6:	bf00      	nop
240518a8:	3768      	adds	r7, #104	; 0x68
240518aa:	46bd      	mov	sp, r7
240518ac:	bd80      	pop	{r7, pc}
240518ae:	bf00      	nop
240518b0:	20000028 	.word	0x20000028
240518b4:	24062a20 	.word	0x24062a20
240518b8:	24064208 	.word	0x24064208
240518bc:	24062a44 	.word	0x24062a44

240518c0 <OSPI_WriteBytes>:

static void OSPI_WriteBytes(const flash_cmd_t *cmd,
                            uint32_t address,
                            const uint8_t *data,
                            size_t len)
{
240518c0:	b580      	push	{r7, lr}
240518c2:	b09a      	sub	sp, #104	; 0x68
240518c4:	af02      	add	r7, sp, #8
240518c6:	60f8      	str	r0, [r7, #12]
240518c8:	60b9      	str	r1, [r7, #8]
240518ca:	607a      	str	r2, [r7, #4]
240518cc:	603b      	str	r3, [r7, #0]
    OSPI_RegularCmdTypeDef ospi_cmd;

    // DBG("WB %d 0x%08x 0x%08X %d\n", cmd->cmd, address, data, len);

    assert(flash.mem_mapped_enabled == false);
240518ce:	4b1c      	ldr	r3, [pc, #112]	; (24051940 <OSPI_WriteBytes+0x80>)
240518d0:	7c1b      	ldrb	r3, [r3, #16]
240518d2:	f083 0301 	eor.w	r3, r3, #1
240518d6:	b2db      	uxtb	r3, r3
240518d8:	2b00      	cmp	r3, #0
240518da:	d106      	bne.n	240518ea <OSPI_WriteBytes+0x2a>
240518dc:	4b19      	ldr	r3, [pc, #100]	; (24051944 <OSPI_WriteBytes+0x84>)
240518de:	4a1a      	ldr	r2, [pc, #104]	; (24051948 <OSPI_WriteBytes+0x88>)
240518e0:	f240 11c1 	movw	r1, #449	; 0x1c1
240518e4:	4819      	ldr	r0, [pc, #100]	; (2405194c <OSPI_WriteBytes+0x8c>)
240518e6:	f00f fdcd 	bl	24061484 <__assert_func>

    set_ospi_cmd(&ospi_cmd,
240518ea:	f107 0010 	add.w	r0, r7, #16
240518ee:	683b      	ldr	r3, [r7, #0]
240518f0:	9300      	str	r3, [sp, #0]
240518f2:	687b      	ldr	r3, [r7, #4]
240518f4:	68ba      	ldr	r2, [r7, #8]
240518f6:	68f9      	ldr	r1, [r7, #12]
240518f8:	f7ff ff2e 	bl	24051758 <set_ospi_cmd>
                 (uint8_t *) data,
                 len);

    //wdog_refresh();

    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
240518fc:	4b10      	ldr	r3, [pc, #64]	; (24051940 <OSPI_WriteBytes+0x80>)
240518fe:	681b      	ldr	r3, [r3, #0]
24051900:	f107 0110 	add.w	r1, r7, #16
24051904:	f241 3288 	movw	r2, #5000	; 0x1388
24051908:	4618      	mov	r0, r3
2405190a:	f008 fc23 	bl	2405a154 <HAL_OSPI_Command>
2405190e:	4603      	mov	r3, r0
24051910:	2b00      	cmp	r3, #0
24051912:	d001      	beq.n	24051918 <OSPI_WriteBytes+0x58>
        Error_Handler();
24051914:	f001 fb38 	bl	24052f88 <Error_Handler>
    }

    if (len > 0) {
24051918:	683b      	ldr	r3, [r7, #0]
2405191a:	2b00      	cmp	r3, #0
2405191c:	d00c      	beq.n	24051938 <OSPI_WriteBytes+0x78>
        if (HAL_OSPI_Transmit(flash.hospi, (uint8_t *) data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
2405191e:	4b08      	ldr	r3, [pc, #32]	; (24051940 <OSPI_WriteBytes+0x80>)
24051920:	681b      	ldr	r3, [r3, #0]
24051922:	f241 3288 	movw	r2, #5000	; 0x1388
24051926:	6879      	ldr	r1, [r7, #4]
24051928:	4618      	mov	r0, r3
2405192a:	f008 fca0 	bl	2405a26e <HAL_OSPI_Transmit>
2405192e:	4603      	mov	r3, r0
24051930:	2b00      	cmp	r3, #0
24051932:	d001      	beq.n	24051938 <OSPI_WriteBytes+0x78>
            Error_Handler();
24051934:	f001 fb28 	bl	24052f88 <Error_Handler>
        }
    }
}
24051938:	bf00      	nop
2405193a:	3760      	adds	r7, #96	; 0x60
2405193c:	46bd      	mov	sp, r7
2405193e:	bd80      	pop	{r7, pc}
24051940:	20000028 	.word	0x20000028
24051944:	24062a20 	.word	0x24062a20
24051948:	24064218 	.word	0x24064218
2405194c:	24062a44 	.word	0x24062a44

24051950 <wait_for_status>:

static void wait_for_status(uint8_t mask, uint8_t value, uint32_t timeout)
{
24051950:	b580      	push	{r7, lr}
24051952:	b084      	sub	sp, #16
24051954:	af00      	add	r7, sp, #0
24051956:	4603      	mov	r3, r0
24051958:	603a      	str	r2, [r7, #0]
2405195a:	71fb      	strb	r3, [r7, #7]
2405195c:	460b      	mov	r3, r1
2405195e:	71bb      	strb	r3, [r7, #6]
    uint8_t status;

    uint32_t t0 = HAL_GetTick();
24051960:	f002 fa70 	bl	24053e44 <HAL_GetTick>
24051964:	60f8      	str	r0, [r7, #12]

    do {
        OSPI_ReadBytes(CMD(RDSR), 0, &status, 1);
24051966:	4b14      	ldr	r3, [pc, #80]	; (240519b8 <wait_for_status+0x68>)
24051968:	689b      	ldr	r3, [r3, #8]
2405196a:	681b      	ldr	r3, [r3, #0]
2405196c:	1cd8      	adds	r0, r3, #3
2405196e:	f107 020b 	add.w	r2, r7, #11
24051972:	2301      	movs	r3, #1
24051974:	2100      	movs	r1, #0
24051976:	f7ff ff59 	bl	2405182c <OSPI_ReadBytes>

#if 0
        printf("Status: %02X\n", status);
        HAL_Delay(500);
#endif
        if ((timeout > 0) && (HAL_GetTick() > t0 + timeout)) {
2405197a:	683b      	ldr	r3, [r7, #0]
2405197c:	2b00      	cmp	r3, #0
2405197e:	d00e      	beq.n	2405199e <wait_for_status+0x4e>
24051980:	f002 fa60 	bl	24053e44 <HAL_GetTick>
24051984:	4601      	mov	r1, r0
24051986:	68fa      	ldr	r2, [r7, #12]
24051988:	683b      	ldr	r3, [r7, #0]
2405198a:	4413      	add	r3, r2
2405198c:	4299      	cmp	r1, r3
2405198e:	d906      	bls.n	2405199e <wait_for_status+0x4e>
            assert(!"Status poll timeout!");
24051990:	4b0a      	ldr	r3, [pc, #40]	; (240519bc <wait_for_status+0x6c>)
24051992:	4a0b      	ldr	r2, [pc, #44]	; (240519c0 <wait_for_status+0x70>)
24051994:	f240 11e5 	movw	r1, #485	; 0x1e5
24051998:	480a      	ldr	r0, [pc, #40]	; (240519c4 <wait_for_status+0x74>)
2405199a:	f00f fd73 	bl	24061484 <__assert_func>
            break;
        }
    } while ((status & mask) != value);
2405199e:	7afa      	ldrb	r2, [r7, #11]
240519a0:	79fb      	ldrb	r3, [r7, #7]
240519a2:	4013      	ands	r3, r2
240519a4:	b2db      	uxtb	r3, r3
240519a6:	79ba      	ldrb	r2, [r7, #6]
240519a8:	429a      	cmp	r2, r3
240519aa:	d1dc      	bne.n	24051966 <wait_for_status+0x16>
}
240519ac:	bf00      	nop
240519ae:	bf00      	nop
240519b0:	3710      	adds	r7, #16
240519b2:	46bd      	mov	sp, r7
240519b4:	bd80      	pop	{r7, pc}
240519b6:	bf00      	nop
240519b8:	20000028 	.word	0x20000028
240519bc:	24062a68 	.word	0x24062a68
240519c0:	24064228 	.word	0x24064228
240519c4:	24062a44 	.word	0x24062a44

240519c8 <OSPI_EnableMemoryMappedMode>:

void OSPI_EnableMemoryMappedMode(void)
{
240519c8:	b580      	push	{r7, lr}
240519ca:	b09a      	sub	sp, #104	; 0x68
240519cc:	af02      	add	r7, sp, #8
    OSPI_MemoryMappedTypeDef sMemMappedCfg;
    OSPI_RegularCmdTypeDef ospi_cmd;
    const flash_cmd_t *cmd = CMD(READ);
240519ce:	4b28      	ldr	r3, [pc, #160]	; (24051a70 <OSPI_EnableMemoryMappedMode+0xa8>)
240519d0:	689b      	ldr	r3, [r3, #8]
240519d2:	681b      	ldr	r3, [r3, #0]
240519d4:	332a      	adds	r3, #42	; 0x2a
240519d6:	65fb      	str	r3, [r7, #92]	; 0x5c

    assert(flash.mem_mapped_enabled == false);
240519d8:	4b25      	ldr	r3, [pc, #148]	; (24051a70 <OSPI_EnableMemoryMappedMode+0xa8>)
240519da:	7c1b      	ldrb	r3, [r3, #16]
240519dc:	f083 0301 	eor.w	r3, r3, #1
240519e0:	b2db      	uxtb	r3, r3
240519e2:	2b00      	cmp	r3, #0
240519e4:	d106      	bne.n	240519f4 <OSPI_EnableMemoryMappedMode+0x2c>
240519e6:	4b23      	ldr	r3, [pc, #140]	; (24051a74 <OSPI_EnableMemoryMappedMode+0xac>)
240519e8:	4a23      	ldr	r2, [pc, #140]	; (24051a78 <OSPI_EnableMemoryMappedMode+0xb0>)
240519ea:	f240 11f1 	movw	r1, #497	; 0x1f1
240519ee:	4823      	ldr	r0, [pc, #140]	; (24051a7c <OSPI_EnableMemoryMappedMode+0xb4>)
240519f0:	f00f fd48 	bl	24061484 <__assert_func>

    set_ospi_cmd(&ospi_cmd, cmd, 0, NULL, 0);
240519f4:	1d38      	adds	r0, r7, #4
240519f6:	2300      	movs	r3, #0
240519f8:	9300      	str	r3, [sp, #0]
240519fa:	2300      	movs	r3, #0
240519fc:	2200      	movs	r2, #0
240519fe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
24051a00:	f7ff feaa 	bl	24051758 <set_ospi_cmd>

    // Memory-mapped mode configuration for linear burst read operations
    ospi_cmd.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
24051a04:	2301      	movs	r3, #1
24051a06:	607b      	str	r3, [r7, #4]
    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
24051a08:	4b19      	ldr	r3, [pc, #100]	; (24051a70 <OSPI_EnableMemoryMappedMode+0xa8>)
24051a0a:	681b      	ldr	r3, [r3, #0]
24051a0c:	1d39      	adds	r1, r7, #4
24051a0e:	f241 3288 	movw	r2, #5000	; 0x1388
24051a12:	4618      	mov	r0, r3
24051a14:	f008 fb9e 	bl	2405a154 <HAL_OSPI_Command>
24051a18:	4603      	mov	r3, r0
24051a1a:	2b00      	cmp	r3, #0
24051a1c:	d001      	beq.n	24051a22 <OSPI_EnableMemoryMappedMode+0x5a>
        Error_Handler();
24051a1e:	f001 fab3 	bl	24052f88 <Error_Handler>
    }

    // Use read instruction for write (in order to not alter the flash by accident)
    ospi_cmd.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
24051a22:	2302      	movs	r3, #2
24051a24:	607b      	str	r3, [r7, #4]
    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
24051a26:	4b12      	ldr	r3, [pc, #72]	; (24051a70 <OSPI_EnableMemoryMappedMode+0xa8>)
24051a28:	681b      	ldr	r3, [r3, #0]
24051a2a:	1d39      	adds	r1, r7, #4
24051a2c:	f241 3288 	movw	r2, #5000	; 0x1388
24051a30:	4618      	mov	r0, r3
24051a32:	f008 fb8f 	bl	2405a154 <HAL_OSPI_Command>
24051a36:	4603      	mov	r3, r0
24051a38:	2b00      	cmp	r3, #0
24051a3a:	d001      	beq.n	24051a40 <OSPI_EnableMemoryMappedMode+0x78>
        Error_Handler();
24051a3c:	f001 faa4 	bl	24052f88 <Error_Handler>
    }

    // Disable timeout counter for memory mapped mode
    sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
24051a40:	2300      	movs	r3, #0
24051a42:	657b      	str	r3, [r7, #84]	; 0x54
    sMemMappedCfg.TimeOutPeriod = 0;
24051a44:	2300      	movs	r3, #0
24051a46:	65bb      	str	r3, [r7, #88]	; 0x58

    // Enable memory mapped mode
    if (HAL_OSPI_MemoryMapped(flash.hospi, &sMemMappedCfg) != HAL_OK) {
24051a48:	4b09      	ldr	r3, [pc, #36]	; (24051a70 <OSPI_EnableMemoryMappedMode+0xa8>)
24051a4a:	681b      	ldr	r3, [r3, #0]
24051a4c:	f107 0254 	add.w	r2, r7, #84	; 0x54
24051a50:	4611      	mov	r1, r2
24051a52:	4618      	mov	r0, r3
24051a54:	f008 fd22 	bl	2405a49c <HAL_OSPI_MemoryMapped>
24051a58:	4603      	mov	r3, r0
24051a5a:	2b00      	cmp	r3, #0
24051a5c:	d001      	beq.n	24051a62 <OSPI_EnableMemoryMappedMode+0x9a>
        Error_Handler();
24051a5e:	f001 fa93 	bl	24052f88 <Error_Handler>
    }

    flash.mem_mapped_enabled = true;
24051a62:	4b03      	ldr	r3, [pc, #12]	; (24051a70 <OSPI_EnableMemoryMappedMode+0xa8>)
24051a64:	2201      	movs	r2, #1
24051a66:	741a      	strb	r2, [r3, #16]
}
24051a68:	bf00      	nop
24051a6a:	3760      	adds	r7, #96	; 0x60
24051a6c:	46bd      	mov	sp, r7
24051a6e:	bd80      	pop	{r7, pc}
24051a70:	20000028 	.word	0x20000028
24051a74:	24062a20 	.word	0x24062a20
24051a78:	24064238 	.word	0x24064238
24051a7c:	24062a44 	.word	0x24062a44

24051a80 <OSPI_NOR_WriteEnable>:
    // Wait for Write In Progress Bit to become zero
    wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
}

void OSPI_NOR_WriteEnable(void)
{
24051a80:	b580      	push	{r7, lr}
24051a82:	af00      	add	r7, sp, #0
    OSPI_WriteBytes(CMD(WREN), 0, NULL, 0);
24051a84:	4b08      	ldr	r3, [pc, #32]	; (24051aa8 <OSPI_NOR_WriteEnable+0x28>)
24051a86:	689b      	ldr	r3, [r3, #8]
24051a88:	681b      	ldr	r3, [r3, #0]
24051a8a:	f103 000c 	add.w	r0, r3, #12
24051a8e:	2300      	movs	r3, #0
24051a90:	2200      	movs	r2, #0
24051a92:	2100      	movs	r1, #0
24051a94:	f7ff ff14 	bl	240518c0 <OSPI_WriteBytes>

    // Wait for Write Enable Latch to be set
    wait_for_status(STATUS_WEL_Msk, STATUS_WEL_Msk, TMO_DEFAULT);
24051a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24051a9c:	2102      	movs	r1, #2
24051a9e:	2002      	movs	r0, #2
24051aa0:	f7ff ff56 	bl	24051950 <wait_for_status>
}
24051aa4:	bf00      	nop
24051aa6:	bd80      	pop	{r7, pc}
24051aa8:	20000028 	.word	0x20000028

24051aac <init_mx_issi>:
{
    OSPI_ReadBytes(CMD(RDCR), 0, dest, 1);
}

static void init_mx_issi(void)
{
24051aac:	b580      	push	{r7, lr}
24051aae:	b082      	sub	sp, #8
24051ab0:	af00      	add	r7, sp, #0
    // Shared code for both MX and ISSI

    uint8_t rd_status;

    DBG("%s\n", __FUNCTION__);
24051ab2:	481e      	ldr	r0, [pc, #120]	; (24051b2c <init_mx_issi+0x80>)
24051ab4:	f00f ff8e 	bl	240619d4 <puts>

    OSPI_ReadBytes(CMD(RDSR), 0, &rd_status, 1);
24051ab8:	4b1d      	ldr	r3, [pc, #116]	; (24051b30 <init_mx_issi+0x84>)
24051aba:	689b      	ldr	r3, [r3, #8]
24051abc:	681b      	ldr	r3, [r3, #0]
24051abe:	1cd8      	adds	r0, r3, #3
24051ac0:	1dfa      	adds	r2, r7, #7
24051ac2:	2301      	movs	r3, #1
24051ac4:	2100      	movs	r1, #0
24051ac6:	f7ff feb1 	bl	2405182c <OSPI_ReadBytes>

    if (flash.config->set_quad && ((rd_status & STATUS_QE_Msk) == 0)) {
24051aca:	4b19      	ldr	r3, [pc, #100]	; (24051b30 <init_mx_issi+0x84>)
24051acc:	689b      	ldr	r3, [r3, #8]
24051ace:	7d1b      	ldrb	r3, [r3, #20]
24051ad0:	2b00      	cmp	r3, #0
24051ad2:	d027      	beq.n	24051b24 <init_mx_issi+0x78>
24051ad4:	79fb      	ldrb	r3, [r7, #7]
24051ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
24051ada:	2b00      	cmp	r3, #0
24051adc:	d122      	bne.n	24051b24 <init_mx_issi+0x78>
        // WRSR - Write Status Register
        // Set Quad Enable bit (6) in status register. Other bits = 0.
        uint8_t wr_status = STATUS_QE_Msk;
24051ade:	2340      	movs	r3, #64	; 0x40
24051ae0:	71bb      	strb	r3, [r7, #6]

        DBG("Setting QE bit.\n");
24051ae2:	4814      	ldr	r0, [pc, #80]	; (24051b34 <init_mx_issi+0x88>)
24051ae4:	f00f ff76 	bl	240619d4 <puts>

        // Set the QE bit
        OSPI_NOR_WriteEnable();
24051ae8:	f7ff ffca 	bl	24051a80 <OSPI_NOR_WriteEnable>
        OSPI_WriteBytes(CMD(WRSR), 0, &wr_status, 1);
24051aec:	4b10      	ldr	r3, [pc, #64]	; (24051b30 <init_mx_issi+0x84>)
24051aee:	689b      	ldr	r3, [r3, #8]
24051af0:	6818      	ldr	r0, [r3, #0]
24051af2:	1dba      	adds	r2, r7, #6
24051af4:	2301      	movs	r3, #1
24051af6:	2100      	movs	r1, #0
24051af8:	f7ff fee2 	bl	240518c0 <OSPI_WriteBytes>
        wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
24051afc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24051b00:	2100      	movs	r1, #0
24051b02:	2001      	movs	r0, #1
24051b04:	f7ff ff24 	bl	24051950 <wait_for_status>

        OSPI_ReadBytes(CMD(RDSR), 0, &rd_status, 1);
24051b08:	4b09      	ldr	r3, [pc, #36]	; (24051b30 <init_mx_issi+0x84>)
24051b0a:	689b      	ldr	r3, [r3, #8]
24051b0c:	681b      	ldr	r3, [r3, #0]
24051b0e:	1cd8      	adds	r0, r3, #3
24051b10:	1dfa      	adds	r2, r7, #7
24051b12:	2301      	movs	r3, #1
24051b14:	2100      	movs	r1, #0
24051b16:	f7ff fe89 	bl	2405182c <OSPI_ReadBytes>
        DBG("QE bit set. Status: %02X\n", rd_status);
24051b1a:	79fb      	ldrb	r3, [r7, #7]
24051b1c:	4619      	mov	r1, r3
24051b1e:	4806      	ldr	r0, [pc, #24]	; (24051b38 <init_mx_issi+0x8c>)
24051b20:	f00f fef2 	bl	24061908 <iprintf>
    }
}
24051b24:	bf00      	nop
24051b26:	3708      	adds	r7, #8
24051b28:	46bd      	mov	sp, r7
24051b2a:	bd80      	pop	{r7, pc}
24051b2c:	24064254 	.word	0x24064254
24051b30:	20000028 	.word	0x20000028
24051b34:	24062bb4 	.word	0x24062bb4
24051b38:	24062bc4 	.word	0x24062bc4

24051b3c <init_spansion>:

static void init_spansion(void)
{
24051b3c:	b5b0      	push	{r4, r5, r7, lr}
24051b3e:	b086      	sub	sp, #24
24051b40:	af04      	add	r7, sp, #16
    uint8_t rd_cr2;
    uint8_t rd_cr3;
    uint8_t rd_cr4;

    // SR[1-2]V
    OSPI_ReadBytes(CMD(RDSR), 0x00, &rd_sr1, 1);
24051b42:	4b44      	ldr	r3, [pc, #272]	; (24051c54 <init_spansion+0x118>)
24051b44:	689b      	ldr	r3, [r3, #8]
24051b46:	681b      	ldr	r3, [r3, #0]
24051b48:	1cd8      	adds	r0, r3, #3
24051b4a:	1dfa      	adds	r2, r7, #7
24051b4c:	2301      	movs	r3, #1
24051b4e:	2100      	movs	r1, #0
24051b50:	f7ff fe6c 	bl	2405182c <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x00800001, &rd_sr2, 1);
24051b54:	4b3f      	ldr	r3, [pc, #252]	; (24051c54 <init_spansion+0x118>)
24051b56:	689b      	ldr	r3, [r3, #8]
24051b58:	681b      	ldr	r3, [r3, #0]
24051b5a:	f103 0009 	add.w	r0, r3, #9
24051b5e:	1dba      	adds	r2, r7, #6
24051b60:	2301      	movs	r3, #1
24051b62:	493d      	ldr	r1, [pc, #244]	; (24051c58 <init_spansion+0x11c>)
24051b64:	f7ff fe62 	bl	2405182c <OSPI_ReadBytes>

    // CR[1-4]NV
    OSPI_ReadBytes(CMD(RDCR), 0x00, &rd_cr1, 1);
24051b68:	4b3a      	ldr	r3, [pc, #232]	; (24051c54 <init_spansion+0x118>)
24051b6a:	689b      	ldr	r3, [r3, #8]
24051b6c:	681b      	ldr	r3, [r3, #0]
24051b6e:	1d98      	adds	r0, r3, #6
24051b70:	1d7a      	adds	r2, r7, #5
24051b72:	2301      	movs	r3, #1
24051b74:	2100      	movs	r1, #0
24051b76:	f7ff fe59 	bl	2405182c <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x03, &rd_cr2, 1);
24051b7a:	4b36      	ldr	r3, [pc, #216]	; (24051c54 <init_spansion+0x118>)
24051b7c:	689b      	ldr	r3, [r3, #8]
24051b7e:	681b      	ldr	r3, [r3, #0]
24051b80:	f103 0009 	add.w	r0, r3, #9
24051b84:	1d3a      	adds	r2, r7, #4
24051b86:	2301      	movs	r3, #1
24051b88:	2103      	movs	r1, #3
24051b8a:	f7ff fe4f 	bl	2405182c <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x04, &rd_cr3, 1);
24051b8e:	4b31      	ldr	r3, [pc, #196]	; (24051c54 <init_spansion+0x118>)
24051b90:	689b      	ldr	r3, [r3, #8]
24051b92:	681b      	ldr	r3, [r3, #0]
24051b94:	f103 0009 	add.w	r0, r3, #9
24051b98:	1cfa      	adds	r2, r7, #3
24051b9a:	2301      	movs	r3, #1
24051b9c:	2104      	movs	r1, #4
24051b9e:	f7ff fe45 	bl	2405182c <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x05, &rd_cr4, 1);
24051ba2:	4b2c      	ldr	r3, [pc, #176]	; (24051c54 <init_spansion+0x118>)
24051ba4:	689b      	ldr	r3, [r3, #8]
24051ba6:	681b      	ldr	r3, [r3, #0]
24051ba8:	f103 0009 	add.w	r0, r3, #9
24051bac:	1cba      	adds	r2, r7, #2
24051bae:	2301      	movs	r3, #1
24051bb0:	2105      	movs	r1, #5
24051bb2:	f7ff fe3b 	bl	2405182c <OSPI_ReadBytes>

    DBG("SR1: %02X SR2: %02X CR: %02X %02X %02X %02X\n", rd_sr1, rd_sr2, rd_cr1, rd_cr2, rd_cr3, rd_cr4);
24051bb6:	79fb      	ldrb	r3, [r7, #7]
24051bb8:	4618      	mov	r0, r3
24051bba:	79bb      	ldrb	r3, [r7, #6]
24051bbc:	461c      	mov	r4, r3
24051bbe:	797b      	ldrb	r3, [r7, #5]
24051bc0:	461d      	mov	r5, r3
24051bc2:	793b      	ldrb	r3, [r7, #4]
24051bc4:	78fa      	ldrb	r2, [r7, #3]
24051bc6:	78b9      	ldrb	r1, [r7, #2]
24051bc8:	9102      	str	r1, [sp, #8]
24051bca:	9201      	str	r2, [sp, #4]
24051bcc:	9300      	str	r3, [sp, #0]
24051bce:	462b      	mov	r3, r5
24051bd0:	4622      	mov	r2, r4
24051bd2:	4601      	mov	r1, r0
24051bd4:	4821      	ldr	r0, [pc, #132]	; (24051c5c <init_spansion+0x120>)
24051bd6:	f00f fe97 	bl	24061908 <iprintf>

    if (flash.config->set_quad && ((rd_cr1 & S_CR_QUAD_Msk) == 0)) {
24051bda:	4b1e      	ldr	r3, [pc, #120]	; (24051c54 <init_spansion+0x118>)
24051bdc:	689b      	ldr	r3, [r3, #8]
24051bde:	7d1b      	ldrb	r3, [r3, #20]
24051be0:	2b00      	cmp	r3, #0
24051be2:	d033      	beq.n	24051c4c <init_spansion+0x110>
24051be4:	797b      	ldrb	r3, [r7, #5]
24051be6:	f003 0302 	and.w	r3, r3, #2
24051bea:	2b00      	cmp	r3, #0
24051bec:	d12e      	bne.n	24051c4c <init_spansion+0x110>
        // WRSR/WRR writes to {status, config}
        // Clear SR1V and set bit 1 (QUAD) in CR1NV
        uint8_t wr_sr[] = {0x00, S_CR_QUAD_Msk};
24051bee:	f44f 7300 	mov.w	r3, #512	; 0x200
24051bf2:	803b      	strh	r3, [r7, #0]

        DBG("Setting QUAD in CR1V.\n");
24051bf4:	481a      	ldr	r0, [pc, #104]	; (24051c60 <init_spansion+0x124>)
24051bf6:	f00f feed 	bl	240619d4 <puts>

        // Enable write to be allowed to change the registers
        OSPI_NOR_WriteEnable();
24051bfa:	f7ff ff41 	bl	24051a80 <OSPI_NOR_WriteEnable>

        OSPI_WriteBytes(CMD(WRSR), 0, wr_sr, sizeof(wr_sr));
24051bfe:	4b15      	ldr	r3, [pc, #84]	; (24051c54 <init_spansion+0x118>)
24051c00:	689b      	ldr	r3, [r3, #8]
24051c02:	6818      	ldr	r0, [r3, #0]
24051c04:	463a      	mov	r2, r7
24051c06:	2302      	movs	r3, #2
24051c08:	2100      	movs	r1, #0
24051c0a:	f7ff fe59 	bl	240518c0 <OSPI_WriteBytes>

        // Wait until WIP bit is cleared
        wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
24051c0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24051c12:	2100      	movs	r1, #0
24051c14:	2001      	movs	r0, #1
24051c16:	f7ff fe9b 	bl	24051950 <wait_for_status>

        OSPI_ReadBytes(CMD(RDSR), 0, &rd_sr1, 1);
24051c1a:	4b0e      	ldr	r3, [pc, #56]	; (24051c54 <init_spansion+0x118>)
24051c1c:	689b      	ldr	r3, [r3, #8]
24051c1e:	681b      	ldr	r3, [r3, #0]
24051c20:	1cd8      	adds	r0, r3, #3
24051c22:	1dfa      	adds	r2, r7, #7
24051c24:	2301      	movs	r3, #1
24051c26:	2100      	movs	r1, #0
24051c28:	f7ff fe00 	bl	2405182c <OSPI_ReadBytes>
        OSPI_ReadBytes(CMD(RDCR), 0, &rd_cr1, 1);
24051c2c:	4b09      	ldr	r3, [pc, #36]	; (24051c54 <init_spansion+0x118>)
24051c2e:	689b      	ldr	r3, [r3, #8]
24051c30:	681b      	ldr	r3, [r3, #0]
24051c32:	1d98      	adds	r0, r3, #6
24051c34:	1d7a      	adds	r2, r7, #5
24051c36:	2301      	movs	r3, #1
24051c38:	2100      	movs	r1, #0
24051c3a:	f7ff fdf7 	bl	2405182c <OSPI_ReadBytes>
        DBG("QUAD bit set. SR: %02X CR: %02X\n", rd_sr1, rd_cr1);
24051c3e:	79fb      	ldrb	r3, [r7, #7]
24051c40:	4619      	mov	r1, r3
24051c42:	797b      	ldrb	r3, [r7, #5]
24051c44:	461a      	mov	r2, r3
24051c46:	4807      	ldr	r0, [pc, #28]	; (24051c64 <init_spansion+0x128>)
24051c48:	f00f fe5e 	bl	24061908 <iprintf>
    }
}
24051c4c:	bf00      	nop
24051c4e:	3708      	adds	r7, #8
24051c50:	46bd      	mov	sp, r7
24051c52:	bdb0      	pop	{r4, r5, r7, pc}
24051c54:	20000028 	.word	0x20000028
24051c58:	00800001 	.word	0x00800001
24051c5c:	24062be0 	.word	0x24062be0
24051c60:	24062c10 	.word	0x24062c10
24051c64:	24062c28 	.word	0x24062c28

24051c68 <init_winbond>:

static void init_winbond(void)
{
24051c68:	b580      	push	{r7, lr}
24051c6a:	b086      	sub	sp, #24
24051c6c:	af00      	add	r7, sp, #0
	//                                    cmd   i_lines  a_lines  a_size         d_lines  dummy
	const flash_cmd_t cmd_rdsr2 = CMD_DEF(0x35, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
24051c6e:	4a7f      	ldr	r2, [pc, #508]	; (24051e6c <init_winbond+0x204>)
24051c70:	f107 0314 	add.w	r3, r7, #20
24051c74:	6812      	ldr	r2, [r2, #0]
24051c76:	4611      	mov	r1, r2
24051c78:	8019      	strh	r1, [r3, #0]
24051c7a:	3302      	adds	r3, #2
24051c7c:	0c12      	lsrs	r2, r2, #16
24051c7e:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_rdsr3 = CMD_DEF(0x15, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
24051c80:	4a7b      	ldr	r2, [pc, #492]	; (24051e70 <init_winbond+0x208>)
24051c82:	f107 0310 	add.w	r3, r7, #16
24051c86:	6812      	ldr	r2, [r2, #0]
24051c88:	4611      	mov	r1, r2
24051c8a:	8019      	strh	r1, [r3, #0]
24051c8c:	3302      	adds	r3, #2
24051c8e:	0c12      	lsrs	r2, r2, #16
24051c90:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_wrsr2 = CMD_DEF(0x31, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
24051c92:	4a78      	ldr	r2, [pc, #480]	; (24051e74 <init_winbond+0x20c>)
24051c94:	f107 030c 	add.w	r3, r7, #12
24051c98:	6812      	ldr	r2, [r2, #0]
24051c9a:	4611      	mov	r1, r2
24051c9c:	8019      	strh	r1, [r3, #0]
24051c9e:	3302      	adds	r3, #2
24051ca0:	0c12      	lsrs	r2, r2, #16
24051ca2:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_wrsr3 = CMD_DEF(0x11, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
24051ca4:	4a74      	ldr	r2, [pc, #464]	; (24051e78 <init_winbond+0x210>)
24051ca6:	f107 0308 	add.w	r3, r7, #8
24051caa:	6812      	ldr	r2, [r2, #0]
24051cac:	4611      	mov	r1, r2
24051cae:	8019      	strh	r1, [r3, #0]
24051cb0:	3302      	adds	r3, #2
24051cb2:	0c12      	lsrs	r2, r2, #16
24051cb4:	701a      	strb	r2, [r3, #0]

	const bool is_quad = flash.config->set_quad;
24051cb6:	4b71      	ldr	r3, [pc, #452]	; (24051e7c <init_winbond+0x214>)
24051cb8:	689b      	ldr	r3, [r3, #8]
24051cba:	7d1b      	ldrb	r3, [r3, #20]
24051cbc:	75fb      	strb	r3, [r7, #23]

	uint8_t sr1, sr2, sr3;

	OSPI_ReadBytes(CMD(RDSR),  0, &sr1, 1);
24051cbe:	4b6f      	ldr	r3, [pc, #444]	; (24051e7c <init_winbond+0x214>)
24051cc0:	689b      	ldr	r3, [r3, #8]
24051cc2:	681b      	ldr	r3, [r3, #0]
24051cc4:	1cd8      	adds	r0, r3, #3
24051cc6:	1dfa      	adds	r2, r7, #7
24051cc8:	2301      	movs	r3, #1
24051cca:	2100      	movs	r1, #0
24051ccc:	f7ff fdae 	bl	2405182c <OSPI_ReadBytes>
	OSPI_ReadBytes(&cmd_rdsr2, 0, &sr2, 1);
24051cd0:	1dba      	adds	r2, r7, #6
24051cd2:	f107 0014 	add.w	r0, r7, #20
24051cd6:	2301      	movs	r3, #1
24051cd8:	2100      	movs	r1, #0
24051cda:	f7ff fda7 	bl	2405182c <OSPI_ReadBytes>
	OSPI_ReadBytes(&cmd_rdsr3, 0, &sr3, 1);
24051cde:	1d7a      	adds	r2, r7, #5
24051ce0:	f107 0010 	add.w	r0, r7, #16
24051ce4:	2301      	movs	r3, #1
24051ce6:	2100      	movs	r1, #0
24051ce8:	f7ff fda0 	bl	2405182c <OSPI_ReadBytes>
	DBG("Winbond SR1: %02X SR2: %02X SR3: %02X\n", sr1, sr2, sr3);
24051cec:	79fb      	ldrb	r3, [r7, #7]
24051cee:	4619      	mov	r1, r3
24051cf0:	79bb      	ldrb	r3, [r7, #6]
24051cf2:	461a      	mov	r2, r3
24051cf4:	797b      	ldrb	r3, [r7, #5]
24051cf6:	4862      	ldr	r0, [pc, #392]	; (24051e80 <init_winbond+0x218>)
24051cf8:	f00f fe06 	bl	24061908 <iprintf>

	// try to clear writeable protect bits if set

	if (sr1 & WB_SR1_PROTECT_Msk) {
24051cfc:	79fb      	ldrb	r3, [r7, #7]
24051cfe:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
24051d02:	2b00      	cmp	r3, #0
24051d04:	d027      	beq.n	24051d56 <init_winbond+0xee>
		DBG("clearing SR1 protect bits\n");
24051d06:	485f      	ldr	r0, [pc, #380]	; (24051e84 <init_winbond+0x21c>)
24051d08:	f00f fe64 	bl	240619d4 <puts>
		sr1 = 0;
24051d0c:	2300      	movs	r3, #0
24051d0e:	71fb      	strb	r3, [r7, #7]

		OSPI_NOR_WriteEnable();
24051d10:	f7ff feb6 	bl	24051a80 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(CMD(WRSR), 0, &sr1, 1);
24051d14:	4b59      	ldr	r3, [pc, #356]	; (24051e7c <init_winbond+0x214>)
24051d16:	689b      	ldr	r3, [r3, #8]
24051d18:	6818      	ldr	r0, [r3, #0]
24051d1a:	1dfa      	adds	r2, r7, #7
24051d1c:	2301      	movs	r3, #1
24051d1e:	2100      	movs	r1, #0
24051d20:	f7ff fdce 	bl	240518c0 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
24051d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24051d28:	2100      	movs	r1, #0
24051d2a:	2001      	movs	r0, #1
24051d2c:	f7ff fe10 	bl	24051950 <wait_for_status>

		OSPI_ReadBytes(CMD(RDSR), 0, &sr1, 1);
24051d30:	4b52      	ldr	r3, [pc, #328]	; (24051e7c <init_winbond+0x214>)
24051d32:	689b      	ldr	r3, [r3, #8]
24051d34:	681b      	ldr	r3, [r3, #0]
24051d36:	1cd8      	adds	r0, r3, #3
24051d38:	1dfa      	adds	r2, r7, #7
24051d3a:	2301      	movs	r3, #1
24051d3c:	2100      	movs	r1, #0
24051d3e:	f7ff fd75 	bl	2405182c <OSPI_ReadBytes>
		if (sr1 & WB_SR1_PROTECT_Msk)
24051d42:	79fb      	ldrb	r3, [r7, #7]
24051d44:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
24051d48:	2b00      	cmp	r3, #0
24051d4a:	d004      	beq.n	24051d56 <init_winbond+0xee>
			DBG("SR1: %02X, change failed\n", sr1);
24051d4c:	79fb      	ldrb	r3, [r7, #7]
24051d4e:	4619      	mov	r1, r3
24051d50:	484d      	ldr	r0, [pc, #308]	; (24051e88 <init_winbond+0x220>)
24051d52:	f00f fdd9 	bl	24061908 <iprintf>
	}

	if ((sr2 & WB_SR2_PROTECT_Msk) || (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos))) {
24051d56:	79bb      	ldrb	r3, [r7, #6]
24051d58:	f003 0341 	and.w	r3, r3, #65	; 0x41
24051d5c:	2b00      	cmp	r3, #0
24051d5e:	d107      	bne.n	24051d70 <init_winbond+0x108>
24051d60:	7dfb      	ldrb	r3, [r7, #23]
24051d62:	2b00      	cmp	r3, #0
24051d64:	d039      	beq.n	24051dda <init_winbond+0x172>
24051d66:	79bb      	ldrb	r3, [r7, #6]
24051d68:	f003 0302 	and.w	r3, r3, #2
24051d6c:	2b00      	cmp	r3, #0
24051d6e:	d134      	bne.n	24051dda <init_winbond+0x172>
		DBG("clearing SR2 protect bits\n");
24051d70:	4846      	ldr	r0, [pc, #280]	; (24051e8c <init_winbond+0x224>)
24051d72:	f00f fe2f 	bl	240619d4 <puts>
		sr2 = 0;
24051d76:	2300      	movs	r3, #0
24051d78:	71bb      	strb	r3, [r7, #6]

		if (is_quad) {
24051d7a:	7dfb      	ldrb	r3, [r7, #23]
24051d7c:	2b00      	cmp	r3, #0
24051d7e:	d004      	beq.n	24051d8a <init_winbond+0x122>
			DBG("and enabling quad mode\n");
24051d80:	4843      	ldr	r0, [pc, #268]	; (24051e90 <init_winbond+0x228>)
24051d82:	f00f fe27 	bl	240619d4 <puts>
			sr2 = 1<<WB_SR2_QE_Pos;
24051d86:	2302      	movs	r3, #2
24051d88:	71bb      	strb	r3, [r7, #6]
		}

		OSPI_NOR_WriteEnable();
24051d8a:	f7ff fe79 	bl	24051a80 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(&cmd_wrsr2, 0, &sr2, 1);
24051d8e:	1dba      	adds	r2, r7, #6
24051d90:	f107 000c 	add.w	r0, r7, #12
24051d94:	2301      	movs	r3, #1
24051d96:	2100      	movs	r1, #0
24051d98:	f7ff fd92 	bl	240518c0 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
24051d9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24051da0:	2100      	movs	r1, #0
24051da2:	2001      	movs	r0, #1
24051da4:	f7ff fdd4 	bl	24051950 <wait_for_status>

		OSPI_ReadBytes(&cmd_rdsr2, 0, &sr2, 1);
24051da8:	1dba      	adds	r2, r7, #6
24051daa:	f107 0014 	add.w	r0, r7, #20
24051dae:	2301      	movs	r3, #1
24051db0:	2100      	movs	r1, #0
24051db2:	f7ff fd3b 	bl	2405182c <OSPI_ReadBytes>
		if ((sr2 & WB_SR2_PROTECT_Msk) || (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos)))
24051db6:	79bb      	ldrb	r3, [r7, #6]
24051db8:	f003 0341 	and.w	r3, r3, #65	; 0x41
24051dbc:	2b00      	cmp	r3, #0
24051dbe:	d107      	bne.n	24051dd0 <init_winbond+0x168>
24051dc0:	7dfb      	ldrb	r3, [r7, #23]
24051dc2:	2b00      	cmp	r3, #0
24051dc4:	d009      	beq.n	24051dda <init_winbond+0x172>
24051dc6:	79bb      	ldrb	r3, [r7, #6]
24051dc8:	f003 0302 	and.w	r3, r3, #2
24051dcc:	2b00      	cmp	r3, #0
24051dce:	d104      	bne.n	24051dda <init_winbond+0x172>
			DBG("SR2: %02X, change failed\n", sr2);
24051dd0:	79bb      	ldrb	r3, [r7, #6]
24051dd2:	4619      	mov	r1, r3
24051dd4:	482f      	ldr	r0, [pc, #188]	; (24051e94 <init_winbond+0x22c>)
24051dd6:	f00f fd97 	bl	24061908 <iprintf>
	}

	if ((sr3 & WB_SR3_PROTECT_Msk) || ((sr3 & WB_SR3_DRV_Msk) != WB_SR3_DRV_Val_50)) {
24051dda:	797b      	ldrb	r3, [r7, #5]
24051ddc:	f003 0304 	and.w	r3, r3, #4
24051de0:	2b00      	cmp	r3, #0
24051de2:	d104      	bne.n	24051dee <init_winbond+0x186>
24051de4:	797b      	ldrb	r3, [r7, #5]
24051de6:	f003 0360 	and.w	r3, r3, #96	; 0x60
24051dea:	2b40      	cmp	r3, #64	; 0x40
24051dec:	d029      	beq.n	24051e42 <init_winbond+0x1da>
		DBG("clearing SR3 protect bits, setting drive strength 50%%\n");
24051dee:	482a      	ldr	r0, [pc, #168]	; (24051e98 <init_winbond+0x230>)
24051df0:	f00f fd8a 	bl	24061908 <iprintf>
		sr3 = WB_SR3_DRV_Val_50;
24051df4:	2340      	movs	r3, #64	; 0x40
24051df6:	717b      	strb	r3, [r7, #5]

		OSPI_NOR_WriteEnable();
24051df8:	f7ff fe42 	bl	24051a80 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(&cmd_wrsr3, 0, &sr3, 1);
24051dfc:	1d7a      	adds	r2, r7, #5
24051dfe:	f107 0008 	add.w	r0, r7, #8
24051e02:	2301      	movs	r3, #1
24051e04:	2100      	movs	r1, #0
24051e06:	f7ff fd5b 	bl	240518c0 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
24051e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24051e0e:	2100      	movs	r1, #0
24051e10:	2001      	movs	r0, #1
24051e12:	f7ff fd9d 	bl	24051950 <wait_for_status>

		OSPI_ReadBytes(&cmd_rdsr3, 0, &sr3, 1);
24051e16:	1d7a      	adds	r2, r7, #5
24051e18:	f107 0010 	add.w	r0, r7, #16
24051e1c:	2301      	movs	r3, #1
24051e1e:	2100      	movs	r1, #0
24051e20:	f7ff fd04 	bl	2405182c <OSPI_ReadBytes>
		if ((sr3 & WB_SR3_PROTECT_Msk) || ((sr3 & WB_SR3_DRV_Msk) != WB_SR3_DRV_Val_50))
24051e24:	797b      	ldrb	r3, [r7, #5]
24051e26:	f003 0304 	and.w	r3, r3, #4
24051e2a:	2b00      	cmp	r3, #0
24051e2c:	d104      	bne.n	24051e38 <init_winbond+0x1d0>
24051e2e:	797b      	ldrb	r3, [r7, #5]
24051e30:	f003 0360 	and.w	r3, r3, #96	; 0x60
24051e34:	2b40      	cmp	r3, #64	; 0x40
24051e36:	d004      	beq.n	24051e42 <init_winbond+0x1da>
			DBG("SR3: %02X, change failed\n", sr3);
24051e38:	797b      	ldrb	r3, [r7, #5]
24051e3a:	4619      	mov	r1, r3
24051e3c:	4817      	ldr	r0, [pc, #92]	; (24051e9c <init_winbond+0x234>)
24051e3e:	f00f fd63 	bl	24061908 <iprintf>
	}

    if (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos)) {
24051e42:	7dfb      	ldrb	r3, [r7, #23]
24051e44:	2b00      	cmp	r3, #0
24051e46:	d00d      	beq.n	24051e64 <init_winbond+0x1fc>
24051e48:	79bb      	ldrb	r3, [r7, #6]
24051e4a:	f003 0302 	and.w	r3, r3, #2
24051e4e:	2b00      	cmp	r3, #0
24051e50:	d108      	bne.n	24051e64 <init_winbond+0x1fc>
        DBG("Windbond quad mode not enabled, falling back to SPI\n");
24051e52:	4813      	ldr	r0, [pc, #76]	; (24051ea0 <init_winbond+0x238>)
24051e54:	f00f fdbe 	bl	240619d4 <puts>
        flash.config = &config_spi_24b;
24051e58:	4b08      	ldr	r3, [pc, #32]	; (24051e7c <init_winbond+0x214>)
24051e5a:	4a12      	ldr	r2, [pc, #72]	; (24051ea4 <init_winbond+0x23c>)
24051e5c:	609a      	str	r2, [r3, #8]
        flash.name = "Winbond SPI";
24051e5e:	4b07      	ldr	r3, [pc, #28]	; (24051e7c <init_winbond+0x214>)
24051e60:	4a11      	ldr	r2, [pc, #68]	; (24051ea8 <init_winbond+0x240>)
24051e62:	60da      	str	r2, [r3, #12]
    }
}
24051e64:	bf00      	nop
24051e66:	3718      	adds	r7, #24
24051e68:	46bd      	mov	sp, r7
24051e6a:	bd80      	pop	{r7, pc}
24051e6c:	24062d90 	.word	0x24062d90
24051e70:	24062d94 	.word	0x24062d94
24051e74:	24062d98 	.word	0x24062d98
24051e78:	24062d9c 	.word	0x24062d9c
24051e7c:	20000028 	.word	0x20000028
24051e80:	24062c4c 	.word	0x24062c4c
24051e84:	24062c74 	.word	0x24062c74
24051e88:	24062c90 	.word	0x24062c90
24051e8c:	24062cac 	.word	0x24062cac
24051e90:	24062cc8 	.word	0x24062cc8
24051e94:	24062ce0 	.word	0x24062ce0
24051e98:	24062cfc 	.word	0x24062cfc
24051e9c:	24062d34 	.word	0x24062d34
24051ea0:	24062d50 	.word	0x24062d50
24051ea4:	2406405c 	.word	0x2406405c
24051ea8:	24062d84 	.word	0x24062d84

24051eac <OSPI_Init>:
    // Assumes that erase sizes are sorted: 4 > 3 > 2 > 1.
    return flash.config->erase_sizes[0];
}

void OSPI_Init(OSPI_HandleTypeDef *hospi)
{
24051eac:	b580      	push	{r7, lr}
24051eae:	b084      	sub	sp, #16
24051eb0:	af00      	add	r7, sp, #0
24051eb2:	6078      	str	r0, [r7, #4]
    uint8_t status;

    flash.hospi = hospi;
24051eb4:	4a4c      	ldr	r2, [pc, #304]	; (24051fe8 <OSPI_Init+0x13c>)
24051eb6:	687b      	ldr	r3, [r7, #4]
24051eb8:	6013      	str	r3, [r2, #0]

    // Enable Reset
    OSPI_WriteBytes(CMD(RSTEN), 0, NULL, 0);
24051eba:	4b4b      	ldr	r3, [pc, #300]	; (24051fe8 <OSPI_Init+0x13c>)
24051ebc:	689b      	ldr	r3, [r3, #8]
24051ebe:	681b      	ldr	r3, [r3, #0]
24051ec0:	f103 0012 	add.w	r0, r3, #18
24051ec4:	2300      	movs	r3, #0
24051ec6:	2200      	movs	r2, #0
24051ec8:	2100      	movs	r1, #0
24051eca:	f7ff fcf9 	bl	240518c0 <OSPI_WriteBytes>
    HAL_Delay(2);
24051ece:	2002      	movs	r0, #2
24051ed0:	f001 ffc4 	bl	24053e5c <HAL_Delay>

    // Reset
    OSPI_WriteBytes(CMD(RST), 0, NULL, 0);
24051ed4:	4b44      	ldr	r3, [pc, #272]	; (24051fe8 <OSPI_Init+0x13c>)
24051ed6:	689b      	ldr	r3, [r3, #8]
24051ed8:	681b      	ldr	r3, [r3, #0]
24051eda:	f103 0015 	add.w	r0, r3, #21
24051ede:	2300      	movs	r3, #0
24051ee0:	2200      	movs	r2, #0
24051ee2:	2100      	movs	r1, #0
24051ee4:	f7ff fcec 	bl	240518c0 <OSPI_WriteBytes>
    HAL_Delay(20);
24051ee8:	2014      	movs	r0, #20
24051eea:	f001 ffb7 	bl	24053e5c <HAL_Delay>

    // Read ID
    OSPI_ReadBytes(CMD(RDID), 0, &flash.jedec_id.u8[0], 3);
24051eee:	4b3e      	ldr	r3, [pc, #248]	; (24051fe8 <OSPI_Init+0x13c>)
24051ef0:	689b      	ldr	r3, [r3, #8]
24051ef2:	681b      	ldr	r3, [r3, #0]
24051ef4:	f103 000f 	add.w	r0, r3, #15
24051ef8:	2303      	movs	r3, #3
24051efa:	4a3c      	ldr	r2, [pc, #240]	; (24051fec <OSPI_Init+0x140>)
24051efc:	2100      	movs	r1, #0
24051efe:	f7ff fc95 	bl	2405182c <OSPI_ReadBytes>
    DBG("JEDEC_ID: %02X %02X %02X\n", flash.jedec_id.u8[0], flash.jedec_id.u8[1], flash.jedec_id.u8[2]);
24051f02:	4b39      	ldr	r3, [pc, #228]	; (24051fe8 <OSPI_Init+0x13c>)
24051f04:	791b      	ldrb	r3, [r3, #4]
24051f06:	4619      	mov	r1, r3
24051f08:	4b37      	ldr	r3, [pc, #220]	; (24051fe8 <OSPI_Init+0x13c>)
24051f0a:	795b      	ldrb	r3, [r3, #5]
24051f0c:	461a      	mov	r2, r3
24051f0e:	4b36      	ldr	r3, [pc, #216]	; (24051fe8 <OSPI_Init+0x13c>)
24051f10:	799b      	ldrb	r3, [r3, #6]
24051f12:	4837      	ldr	r0, [pc, #220]	; (24051ff0 <OSPI_Init+0x144>)
24051f14:	f00f fcf8 	bl	24061908 <iprintf>

    // Check for known bad IDs
    if (((flash.jedec_id.u32 & 0xffffff) == 0xffffff) ||
24051f18:	4b33      	ldr	r3, [pc, #204]	; (24051fe8 <OSPI_Init+0x13c>)
24051f1a:	685b      	ldr	r3, [r3, #4]
24051f1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
24051f20:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
24051f24:	4293      	cmp	r3, r2
24051f26:	d005      	beq.n	24051f34 <OSPI_Init+0x88>
        ((flash.jedec_id.u32 & 0xffffff) == 0x000000)) {
24051f28:	4b2f      	ldr	r3, [pc, #188]	; (24051fe8 <OSPI_Init+0x13c>)
24051f2a:	685b      	ldr	r3, [r3, #4]
24051f2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if (((flash.jedec_id.u32 & 0xffffff) == 0xffffff) ||
24051f30:	2b00      	cmp	r3, #0
24051f32:	d106      	bne.n	24051f42 <OSPI_Init+0x96>
        assert(!"Can't communicate with the external flash! Please check the soldering.");
24051f34:	4b2f      	ldr	r3, [pc, #188]	; (24051ff4 <OSPI_Init+0x148>)
24051f36:	4a30      	ldr	r2, [pc, #192]	; (24051ff8 <OSPI_Init+0x14c>)
24051f38:	f240 3149 	movw	r1, #841	; 0x349
24051f3c:	482f      	ldr	r0, [pc, #188]	; (24051ffc <OSPI_Init+0x150>)
24051f3e:	f00f faa1 	bl	24061484 <__assert_func>
    }

    OSPI_ReadBytes(CMD(RDSR), 0, &status, 1);
24051f42:	4b29      	ldr	r3, [pc, #164]	; (24051fe8 <OSPI_Init+0x13c>)
24051f44:	689b      	ldr	r3, [r3, #8]
24051f46:	681b      	ldr	r3, [r3, #0]
24051f48:	1cd8      	adds	r0, r3, #3
24051f4a:	f107 020b 	add.w	r2, r7, #11
24051f4e:	2301      	movs	r3, #1
24051f50:	2100      	movs	r1, #0
24051f52:	f7ff fc6b 	bl	2405182c <OSPI_ReadBytes>
    DBG("Status: %02X\n", status);
24051f56:	7afb      	ldrb	r3, [r7, #11]
24051f58:	4619      	mov	r1, r3
24051f5a:	4829      	ldr	r0, [pc, #164]	; (24052000 <OSPI_Init+0x154>)
24051f5c:	f00f fcd4 	bl	24061908 <iprintf>

    for (int i = 0; i < ARRAY_SIZE(jedec_map); i++) {
24051f60:	2300      	movs	r3, #0
24051f62:	60fb      	str	r3, [r7, #12]
24051f64:	e02e      	b.n	24051fc4 <OSPI_Init+0x118>
        if ((flash.jedec_id.u32 & 0xffffff) == (jedec_map[i].jedec_id.u32 & 0xffffff)) {
24051f66:	4b20      	ldr	r3, [pc, #128]	; (24051fe8 <OSPI_Init+0x13c>)
24051f68:	6859      	ldr	r1, [r3, #4]
24051f6a:	4826      	ldr	r0, [pc, #152]	; (24052004 <OSPI_Init+0x158>)
24051f6c:	68fa      	ldr	r2, [r7, #12]
24051f6e:	4613      	mov	r3, r2
24051f70:	005b      	lsls	r3, r3, #1
24051f72:	4413      	add	r3, r2
24051f74:	009b      	lsls	r3, r3, #2
24051f76:	4403      	add	r3, r0
24051f78:	681b      	ldr	r3, [r3, #0]
24051f7a:	404b      	eors	r3, r1
24051f7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
24051f80:	2b00      	cmp	r3, #0
24051f82:	d11c      	bne.n	24051fbe <OSPI_Init+0x112>
            flash.config = jedec_map[i].config;
24051f84:	491f      	ldr	r1, [pc, #124]	; (24052004 <OSPI_Init+0x158>)
24051f86:	68fa      	ldr	r2, [r7, #12]
24051f88:	4613      	mov	r3, r2
24051f8a:	005b      	lsls	r3, r3, #1
24051f8c:	4413      	add	r3, r2
24051f8e:	009b      	lsls	r3, r3, #2
24051f90:	440b      	add	r3, r1
24051f92:	3308      	adds	r3, #8
24051f94:	681b      	ldr	r3, [r3, #0]
24051f96:	4a14      	ldr	r2, [pc, #80]	; (24051fe8 <OSPI_Init+0x13c>)
24051f98:	6093      	str	r3, [r2, #8]
            flash.name = jedec_map[i].name;
24051f9a:	491a      	ldr	r1, [pc, #104]	; (24052004 <OSPI_Init+0x158>)
24051f9c:	68fa      	ldr	r2, [r7, #12]
24051f9e:	4613      	mov	r3, r2
24051fa0:	005b      	lsls	r3, r3, #1
24051fa2:	4413      	add	r3, r2
24051fa4:	009b      	lsls	r3, r3, #2
24051fa6:	440b      	add	r3, r1
24051fa8:	3304      	adds	r3, #4
24051faa:	681b      	ldr	r3, [r3, #0]
24051fac:	4a0e      	ldr	r2, [pc, #56]	; (24051fe8 <OSPI_Init+0x13c>)
24051fae:	60d3      	str	r3, [r2, #12]
            DBG("Found config: %s\n", flash.name);
24051fb0:	4b0d      	ldr	r3, [pc, #52]	; (24051fe8 <OSPI_Init+0x13c>)
24051fb2:	68db      	ldr	r3, [r3, #12]
24051fb4:	4619      	mov	r1, r3
24051fb6:	4814      	ldr	r0, [pc, #80]	; (24052008 <OSPI_Init+0x15c>)
24051fb8:	f00f fca6 	bl	24061908 <iprintf>
            break;
24051fbc:	e005      	b.n	24051fca <OSPI_Init+0x11e>
    for (int i = 0; i < ARRAY_SIZE(jedec_map); i++) {
24051fbe:	68fb      	ldr	r3, [r7, #12]
24051fc0:	3301      	adds	r3, #1
24051fc2:	60fb      	str	r3, [r7, #12]
24051fc4:	68fb      	ldr	r3, [r7, #12]
24051fc6:	2b10      	cmp	r3, #16
24051fc8:	d9cd      	bls.n	24051f66 <OSPI_Init+0xba>
        }
    }

    if (flash.config->init_fn) {
24051fca:	4b07      	ldr	r3, [pc, #28]	; (24051fe8 <OSPI_Init+0x13c>)
24051fcc:	689b      	ldr	r3, [r3, #8]
24051fce:	699b      	ldr	r3, [r3, #24]
24051fd0:	2b00      	cmp	r3, #0
24051fd2:	d003      	beq.n	24051fdc <OSPI_Init+0x130>
        flash.config->init_fn();
24051fd4:	4b04      	ldr	r3, [pc, #16]	; (24051fe8 <OSPI_Init+0x13c>)
24051fd6:	689b      	ldr	r3, [r3, #8]
24051fd8:	699b      	ldr	r3, [r3, #24]
24051fda:	4798      	blx	r3
    }

    OSPI_EnableMemoryMappedMode();
24051fdc:	f7ff fcf4 	bl	240519c8 <OSPI_EnableMemoryMappedMode>
}
24051fe0:	bf00      	nop
24051fe2:	3710      	adds	r7, #16
24051fe4:	46bd      	mov	sp, r7
24051fe6:	bd80      	pop	{r7, pc}
24051fe8:	20000028 	.word	0x20000028
24051fec:	2000002c 	.word	0x2000002c
24051ff0:	24062da0 	.word	0x24062da0
24051ff4:	24062dbc 	.word	0x24062dbc
24051ff8:	24064264 	.word	0x24064264
24051ffc:	24062a44 	.word	0x24062a44
24052000:	24062e08 	.word	0x24062e08
24052004:	2406413c 	.word	0x2406413c
24052008:	24062e18 	.word	0x24062e18

2405200c <lcd_backlight_set>:
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
	HAL_DAC_Stop(&hdac2, DAC_CHANNEL_1);
}

void lcd_backlight_set(uint8_t brightness) {
2405200c:	b580      	push	{r7, lr}
2405200e:	b082      	sub	sp, #8
24052010:	af00      	add	r7, sp, #0
24052012:	4603      	mov	r3, r0
24052014:	71fb      	strb	r3, [r7, #7]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
24052016:	79fb      	ldrb	r3, [r7, #7]
24052018:	2208      	movs	r2, #8
2405201a:	2100      	movs	r1, #0
2405201c:	480f      	ldr	r0, [pc, #60]	; (2405205c <lcd_backlight_set+0x50>)
2405201e:	f003 fff6 	bl	2405600e <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, brightness);
24052022:	79fb      	ldrb	r3, [r7, #7]
24052024:	2208      	movs	r2, #8
24052026:	2110      	movs	r1, #16
24052028:	480c      	ldr	r0, [pc, #48]	; (2405205c <lcd_backlight_set+0x50>)
2405202a:	f003 fff0 	bl	2405600e <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
2405202e:	79fb      	ldrb	r3, [r7, #7]
24052030:	2208      	movs	r2, #8
24052032:	2100      	movs	r1, #0
24052034:	480a      	ldr	r0, [pc, #40]	; (24052060 <lcd_backlight_set+0x54>)
24052036:	f003 ffea 	bl	2405600e <HAL_DAC_SetValue>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
2405203a:	2100      	movs	r1, #0
2405203c:	4807      	ldr	r0, [pc, #28]	; (2405205c <lcd_backlight_set+0x50>)
2405203e:	f003 ff94 	bl	24055f6a <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
24052042:	2110      	movs	r1, #16
24052044:	4805      	ldr	r0, [pc, #20]	; (2405205c <lcd_backlight_set+0x50>)
24052046:	f003 ff90 	bl	24055f6a <HAL_DAC_Start>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
2405204a:	2100      	movs	r1, #0
2405204c:	4804      	ldr	r0, [pc, #16]	; (24052060 <lcd_backlight_set+0x54>)
2405204e:	f003 ff8c 	bl	24055f6a <HAL_DAC_Start>
}
24052052:	bf00      	nop
24052054:	3708      	adds	r7, #8
24052056:	46bd      	mov	sp, r7
24052058:	bd80      	pop	{r7, pc}
2405205a:	bf00      	nop
2405205c:	20000274 	.word	0x20000274
24052060:	20000288 	.word	0x20000288

24052064 <lcd_init>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
	// Pull reset line(?) low. (Flakey without this)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
}

void lcd_init(SPI_HandleTypeDef *spi, LTDC_HandleTypeDef *ltdc) {
24052064:	b580      	push	{r7, lr}
24052066:	b082      	sub	sp, #8
24052068:	af00      	add	r7, sp, #0
2405206a:	6078      	str	r0, [r7, #4]
2405206c:	6039      	str	r1, [r7, #0]
// Wake
// Enable 3.3v
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
2405206e:	2200      	movs	r2, #0
24052070:	2102      	movs	r1, #2
24052072:	489c      	ldr	r0, [pc, #624]	; (240522e4 <lcd_init+0x280>)
24052074:	f007 fa44 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(1);
24052078:	2001      	movs	r0, #1
2405207a:	f001 feef 	bl	24053e5c <HAL_Delay>
	// Enable 1.8V
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
2405207e:	2201      	movs	r2, #1
24052080:	2110      	movs	r1, #16
24052082:	4898      	ldr	r0, [pc, #608]	; (240522e4 <lcd_init+0x280>)
24052084:	f007 fa3c 	bl	24059500 <HAL_GPIO_WritePin>
	// also assert CS, not sure where to put this yet
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24052088:	2201      	movs	r2, #1
2405208a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405208e:	4896      	ldr	r0, [pc, #600]	; (240522e8 <lcd_init+0x284>)
24052090:	f007 fa36 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(7);
24052094:	2007      	movs	r0, #7
24052096:	f001 fee1 	bl	24053e5c <HAL_Delay>

// HAL_SPI_Transmit(spi, (uint8_t *)"\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55", 10, 100);
	// Lets go, bootup sequence.
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
2405209a:	2201      	movs	r2, #1
2405209c:	f44f 7180 	mov.w	r1, #256	; 0x100
240520a0:	4890      	ldr	r0, [pc, #576]	; (240522e4 <lcd_init+0x280>)
240520a2:	f007 fa2d 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(2);
240520a6:	2002      	movs	r0, #2
240520a8:	f001 fed8 	bl	24053e5c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
240520ac:	2200      	movs	r2, #0
240520ae:	f44f 7180 	mov.w	r1, #256	; 0x100
240520b2:	488c      	ldr	r0, [pc, #560]	; (240522e4 <lcd_init+0x280>)
240520b4:	f007 fa24 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(2);
240520b8:	2002      	movs	r0, #2
240520ba:	f001 fecf 	bl	24053e5c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
240520be:	2201      	movs	r2, #1
240520c0:	f44f 7180 	mov.w	r1, #256	; 0x100
240520c4:	4887      	ldr	r0, [pc, #540]	; (240522e4 <lcd_init+0x280>)
240520c6:	f007 fa1b 	bl	24059500 <HAL_GPIO_WritePin>

	HAL_Delay(10);
240520ca:	200a      	movs	r0, #10
240520cc:	f001 fec6 	bl	24053e5c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240520d0:	2200      	movs	r2, #0
240520d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240520d6:	4884      	ldr	r0, [pc, #528]	; (240522e8 <lcd_init+0x284>)
240520d8:	f007 fa12 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(45);
240520dc:	202d      	movs	r0, #45	; 0x2d
240520de:	f001 febd 	bl	24053e5c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x08\x80", 2, 100);
240520e2:	2364      	movs	r3, #100	; 0x64
240520e4:	2202      	movs	r2, #2
240520e6:	4981      	ldr	r1, [pc, #516]	; (240522ec <lcd_init+0x288>)
240520e8:	6878      	ldr	r0, [r7, #4]
240520ea:	f00e f9e9 	bl	240604c0 <HAL_SPI_Transmit>
	HAL_Delay(2);
240520ee:	2002      	movs	r0, #2
240520f0:	f001 feb4 	bl	24053e5c <HAL_Delay>
	//wdog_refresh();

	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240520f4:	2201      	movs	r2, #1
240520f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240520fa:	487b      	ldr	r0, [pc, #492]	; (240522e8 <lcd_init+0x284>)
240520fc:	f007 fa00 	bl	24059500 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24052100:	2200      	movs	r2, #0
24052102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24052106:	4878      	ldr	r0, [pc, #480]	; (240522e8 <lcd_init+0x284>)
24052108:	f007 f9fa 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(2);
2405210c:	2002      	movs	r0, #2
2405210e:	f001 fea5 	bl	24053e5c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x6E\x80", 2, 100);
24052112:	2364      	movs	r3, #100	; 0x64
24052114:	2202      	movs	r2, #2
24052116:	4976      	ldr	r1, [pc, #472]	; (240522f0 <lcd_init+0x28c>)
24052118:	6878      	ldr	r0, [r7, #4]
2405211a:	f00e f9d1 	bl	240604c0 <HAL_SPI_Transmit>
	HAL_Delay(2);
2405211e:	2002      	movs	r0, #2
24052120:	f001 fe9c 	bl	24053e5c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24052124:	2201      	movs	r2, #1
24052126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405212a:	486f      	ldr	r0, [pc, #444]	; (240522e8 <lcd_init+0x284>)
2405212c:	f007 f9e8 	bl	24059500 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24052130:	2200      	movs	r2, #0
24052132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24052136:	486c      	ldr	r0, [pc, #432]	; (240522e8 <lcd_init+0x284>)
24052138:	f007 f9e2 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(2);
2405213c:	2002      	movs	r0, #2
2405213e:	f001 fe8d 	bl	24053e5c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x80\x80", 2, 100);
24052142:	2364      	movs	r3, #100	; 0x64
24052144:	2202      	movs	r2, #2
24052146:	496b      	ldr	r1, [pc, #428]	; (240522f4 <lcd_init+0x290>)
24052148:	6878      	ldr	r0, [r7, #4]
2405214a:	f00e f9b9 	bl	240604c0 <HAL_SPI_Transmit>

	HAL_Delay(2);
2405214e:	2002      	movs	r0, #2
24052150:	f001 fe84 	bl	24053e5c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24052154:	2201      	movs	r2, #1
24052156:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405215a:	4863      	ldr	r0, [pc, #396]	; (240522e8 <lcd_init+0x284>)
2405215c:	f007 f9d0 	bl	24059500 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24052160:	2200      	movs	r2, #0
24052162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24052166:	4860      	ldr	r0, [pc, #384]	; (240522e8 <lcd_init+0x284>)
24052168:	f007 f9ca 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(2);
2405216c:	2002      	movs	r0, #2
2405216e:	f001 fe75 	bl	24053e5c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x68\x00", 2, 100);
24052172:	2364      	movs	r3, #100	; 0x64
24052174:	2202      	movs	r2, #2
24052176:	4960      	ldr	r1, [pc, #384]	; (240522f8 <lcd_init+0x294>)
24052178:	6878      	ldr	r0, [r7, #4]
2405217a:	f00e f9a1 	bl	240604c0 <HAL_SPI_Transmit>
	HAL_Delay(2);
2405217e:	2002      	movs	r0, #2
24052180:	f001 fe6c 	bl	24053e5c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24052184:	2201      	movs	r2, #1
24052186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405218a:	4857      	ldr	r0, [pc, #348]	; (240522e8 <lcd_init+0x284>)
2405218c:	f007 f9b8 	bl	24059500 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24052190:	2200      	movs	r2, #0
24052192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24052196:	4854      	ldr	r0, [pc, #336]	; (240522e8 <lcd_init+0x284>)
24052198:	f007 f9b2 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(2);
2405219c:	2002      	movs	r0, #2
2405219e:	f001 fe5d 	bl	24053e5c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\xd0\x00", 2, 100);
240521a2:	2364      	movs	r3, #100	; 0x64
240521a4:	2202      	movs	r2, #2
240521a6:	4955      	ldr	r1, [pc, #340]	; (240522fc <lcd_init+0x298>)
240521a8:	6878      	ldr	r0, [r7, #4]
240521aa:	f00e f989 	bl	240604c0 <HAL_SPI_Transmit>
	HAL_Delay(2);
240521ae:	2002      	movs	r0, #2
240521b0:	f001 fe54 	bl	24053e5c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240521b4:	2201      	movs	r2, #1
240521b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240521ba:	484b      	ldr	r0, [pc, #300]	; (240522e8 <lcd_init+0x284>)
240521bc:	f007 f9a0 	bl	24059500 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240521c0:	2200      	movs	r2, #0
240521c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240521c6:	4848      	ldr	r0, [pc, #288]	; (240522e8 <lcd_init+0x284>)
240521c8:	f007 f99a 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(2);
240521cc:	2002      	movs	r0, #2
240521ce:	f001 fe45 	bl	24053e5c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x1b\x00", 2, 100);
240521d2:	2364      	movs	r3, #100	; 0x64
240521d4:	2202      	movs	r2, #2
240521d6:	494a      	ldr	r1, [pc, #296]	; (24052300 <lcd_init+0x29c>)
240521d8:	6878      	ldr	r0, [r7, #4]
240521da:	f00e f971 	bl	240604c0 <HAL_SPI_Transmit>

	HAL_Delay(2);
240521de:	2002      	movs	r0, #2
240521e0:	f001 fe3c 	bl	24053e5c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240521e4:	2201      	movs	r2, #1
240521e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240521ea:	483f      	ldr	r0, [pc, #252]	; (240522e8 <lcd_init+0x284>)
240521ec:	f007 f988 	bl	24059500 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240521f0:	2200      	movs	r2, #0
240521f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240521f6:	483c      	ldr	r0, [pc, #240]	; (240522e8 <lcd_init+0x284>)
240521f8:	f007 f982 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(2);
240521fc:	2002      	movs	r0, #2
240521fe:	f001 fe2d 	bl	24053e5c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\xe0\x00", 2, 100);
24052202:	2364      	movs	r3, #100	; 0x64
24052204:	2202      	movs	r2, #2
24052206:	493f      	ldr	r1, [pc, #252]	; (24052304 <lcd_init+0x2a0>)
24052208:	6878      	ldr	r0, [r7, #4]
2405220a:	f00e f959 	bl	240604c0 <HAL_SPI_Transmit>

	HAL_Delay(2);
2405220e:	2002      	movs	r0, #2
24052210:	f001 fe24 	bl	24053e5c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24052214:	2201      	movs	r2, #1
24052216:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405221a:	4833      	ldr	r0, [pc, #204]	; (240522e8 <lcd_init+0x284>)
2405221c:	f007 f970 	bl	24059500 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24052220:	2200      	movs	r2, #0
24052222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24052226:	4830      	ldr	r0, [pc, #192]	; (240522e8 <lcd_init+0x284>)
24052228:	f007 f96a 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(2);
2405222c:	2002      	movs	r0, #2
2405222e:	f001 fe15 	bl	24053e5c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x6a\x80", 2, 100);
24052232:	2364      	movs	r3, #100	; 0x64
24052234:	2202      	movs	r2, #2
24052236:	4934      	ldr	r1, [pc, #208]	; (24052308 <lcd_init+0x2a4>)
24052238:	6878      	ldr	r0, [r7, #4]
2405223a:	f00e f941 	bl	240604c0 <HAL_SPI_Transmit>

	HAL_Delay(2);
2405223e:	2002      	movs	r0, #2
24052240:	f001 fe0c 	bl	24053e5c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24052244:	2201      	movs	r2, #1
24052246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405224a:	4827      	ldr	r0, [pc, #156]	; (240522e8 <lcd_init+0x284>)
2405224c:	f007 f958 	bl	24059500 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24052250:	2200      	movs	r2, #0
24052252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24052256:	4824      	ldr	r0, [pc, #144]	; (240522e8 <lcd_init+0x284>)
24052258:	f007 f952 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(2);
2405225c:	2002      	movs	r0, #2
2405225e:	f001 fdfd 	bl	24053e5c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x80\x00", 2, 100);
24052262:	2364      	movs	r3, #100	; 0x64
24052264:	2202      	movs	r2, #2
24052266:	4929      	ldr	r1, [pc, #164]	; (2405230c <lcd_init+0x2a8>)
24052268:	6878      	ldr	r0, [r7, #4]
2405226a:	f00e f929 	bl	240604c0 <HAL_SPI_Transmit>
	HAL_Delay(2);
2405226e:	2002      	movs	r0, #2
24052270:	f001 fdf4 	bl	24053e5c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24052274:	2201      	movs	r2, #1
24052276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405227a:	481b      	ldr	r0, [pc, #108]	; (240522e8 <lcd_init+0x284>)
2405227c:	f007 f940 	bl	24059500 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24052280:	2200      	movs	r2, #0
24052282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24052286:	4818      	ldr	r0, [pc, #96]	; (240522e8 <lcd_init+0x284>)
24052288:	f007 f93a 	bl	24059500 <HAL_GPIO_WritePin>
	HAL_Delay(2);
2405228c:	2002      	movs	r0, #2
2405228e:	f001 fde5 	bl	24053e5c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x14\x80", 2, 100);
24052292:	2364      	movs	r3, #100	; 0x64
24052294:	2202      	movs	r2, #2
24052296:	491e      	ldr	r1, [pc, #120]	; (24052310 <lcd_init+0x2ac>)
24052298:	6878      	ldr	r0, [r7, #4]
2405229a:	f00e f911 	bl	240604c0 <HAL_SPI_Transmit>
	HAL_Delay(2);
2405229e:	2002      	movs	r0, #2
240522a0:	f001 fddc 	bl	24053e5c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240522a4:	2201      	movs	r2, #1
240522a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240522aa:	480f      	ldr	r0, [pc, #60]	; (240522e8 <lcd_init+0x284>)
240522ac:	f007 f928 	bl	24059500 <HAL_GPIO_WritePin>
	//wdog_refresh();

	HAL_LTDC_SetAddress(ltdc, (uint32_t) &fb1, 0);
240522b0:	4b18      	ldr	r3, [pc, #96]	; (24052314 <lcd_init+0x2b0>)
240522b2:	2200      	movs	r2, #0
240522b4:	4619      	mov	r1, r3
240522b6:	6838      	ldr	r0, [r7, #0]
240522b8:	f007 fb26 	bl	24059908 <HAL_LTDC_SetAddress>

	memset(fb1, 0, sizeof(framebuffer1));
240522bc:	4b15      	ldr	r3, [pc, #84]	; (24052314 <lcd_init+0x2b0>)
240522be:	681b      	ldr	r3, [r3, #0]
240522c0:	f44f 3216 	mov.w	r2, #153600	; 0x25800
240522c4:	2100      	movs	r1, #0
240522c6:	4618      	mov	r0, r3
240522c8:	f00f fc84 	bl	24061bd4 <memset>
	memset(fb2, 0, sizeof(framebuffer1));
240522cc:	4b12      	ldr	r3, [pc, #72]	; (24052318 <lcd_init+0x2b4>)
240522ce:	681b      	ldr	r3, [r3, #0]
240522d0:	f44f 3216 	mov.w	r2, #153600	; 0x25800
240522d4:	2100      	movs	r1, #0
240522d6:	4618      	mov	r0, r3
240522d8:	f00f fc7c 	bl	24061bd4 <memset>
}
240522dc:	bf00      	nop
240522de:	3708      	adds	r7, #8
240522e0:	46bd      	mov	sp, r7
240522e2:	bd80      	pop	{r7, pc}
240522e4:	58020c00 	.word	0x58020c00
240522e8:	58020400 	.word	0x58020400
240522ec:	24062e2c 	.word	0x24062e2c
240522f0:	24062e30 	.word	0x24062e30
240522f4:	24062e34 	.word	0x24062e34
240522f8:	24062e38 	.word	0x24062e38
240522fc:	24062e3c 	.word	0x24062e3c
24052300:	24062e40 	.word	0x24062e40
24052304:	24062e44 	.word	0x24062e44
24052308:	24062e48 	.word	0x24062e48
2405230c:	24062e4c 	.word	0x24062e4c
24052310:	24062e50 	.word	0x24062e50
24052314:	2000003c 	.word	0x2000003c
24052318:	20000040 	.word	0x20000040

2405231c <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc) {
2405231c:	b580      	push	{r7, lr}
2405231e:	b082      	sub	sp, #8
24052320:	af00      	add	r7, sp, #0
24052322:	6078      	str	r0, [r7, #4]
	frame_counter++;
24052324:	4b0d      	ldr	r3, [pc, #52]	; (2405235c <HAL_LTDC_ReloadEventCallback+0x40>)
24052326:	681b      	ldr	r3, [r3, #0]
24052328:	3301      	adds	r3, #1
2405232a:	4a0c      	ldr	r2, [pc, #48]	; (2405235c <HAL_LTDC_ReloadEventCallback+0x40>)
2405232c:	6013      	str	r3, [r2, #0]
	if (active_framebuffer == 0) {
2405232e:	4b0c      	ldr	r3, [pc, #48]	; (24052360 <HAL_LTDC_ReloadEventCallback+0x44>)
24052330:	681b      	ldr	r3, [r3, #0]
24052332:	2b00      	cmp	r3, #0
24052334:	d107      	bne.n	24052346 <HAL_LTDC_ReloadEventCallback+0x2a>
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb2, 0);
24052336:	4b0b      	ldr	r3, [pc, #44]	; (24052364 <HAL_LTDC_ReloadEventCallback+0x48>)
24052338:	681b      	ldr	r3, [r3, #0]
2405233a:	2200      	movs	r2, #0
2405233c:	4619      	mov	r1, r3
2405233e:	6878      	ldr	r0, [r7, #4]
24052340:	f007 fae2 	bl	24059908 <HAL_LTDC_SetAddress>
	} else {
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
	}
}
24052344:	e006      	b.n	24052354 <HAL_LTDC_ReloadEventCallback+0x38>
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
24052346:	4b08      	ldr	r3, [pc, #32]	; (24052368 <HAL_LTDC_ReloadEventCallback+0x4c>)
24052348:	681b      	ldr	r3, [r3, #0]
2405234a:	2200      	movs	r2, #0
2405234c:	4619      	mov	r1, r3
2405234e:	6878      	ldr	r0, [r7, #4]
24052350:	f007 fada 	bl	24059908 <HAL_LTDC_SetAddress>
}
24052354:	bf00      	nop
24052356:	3708      	adds	r7, #8
24052358:	46bd      	mov	sp, r7
2405235a:	bd80      	pop	{r7, pc}
2405235c:	2000020c 	.word	0x2000020c
24052360:	20000208 	.word	0x20000208
24052364:	20000040 	.word	0x20000040
24052368:	2000003c 	.word	0x2000003c

2405236c <lcd_swap>:

uint32_t is_lcd_swap_pending(void) {
	return (uint32_t) ((hltdc.Instance->SRCR) & (LTDC_SRCR_VBR | LTDC_SRCR_IMR));
}

void lcd_swap(void) {
2405236c:	b580      	push	{r7, lr}
2405236e:	af00      	add	r7, sp, #0
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
24052370:	2102      	movs	r1, #2
24052372:	4807      	ldr	r0, [pc, #28]	; (24052390 <lcd_swap+0x24>)
24052374:	f007 fafe 	bl	24059974 <HAL_LTDC_Reload>
	active_framebuffer = active_framebuffer ? 0 : 1;
24052378:	4b06      	ldr	r3, [pc, #24]	; (24052394 <lcd_swap+0x28>)
2405237a:	681b      	ldr	r3, [r3, #0]
2405237c:	2b00      	cmp	r3, #0
2405237e:	bf0c      	ite	eq
24052380:	2301      	moveq	r3, #1
24052382:	2300      	movne	r3, #0
24052384:	b2db      	uxtb	r3, r3
24052386:	461a      	mov	r2, r3
24052388:	4b02      	ldr	r3, [pc, #8]	; (24052394 <lcd_swap+0x28>)
2405238a:	601a      	str	r2, [r3, #0]
}
2405238c:	bf00      	nop
2405238e:	bd80      	pop	{r7, pc}
24052390:	20000304 	.word	0x20000304
24052394:	20000208 	.word	0x20000208

24052398 <lcd_sync>:

void lcd_sync(void) {
24052398:	b580      	push	{r7, lr}
2405239a:	b082      	sub	sp, #8
2405239c:	af00      	add	r7, sp, #0
	void *active = lcd_get_active_buffer();
2405239e:	f000 f813 	bl	240523c8 <lcd_get_active_buffer>
240523a2:	6078      	str	r0, [r7, #4]
	void *inactive = lcd_get_inactive_buffer();
240523a4:	f000 f826 	bl	240523f4 <lcd_get_inactive_buffer>
240523a8:	6038      	str	r0, [r7, #0]

	if (active != inactive) {
240523aa:	687a      	ldr	r2, [r7, #4]
240523ac:	683b      	ldr	r3, [r7, #0]
240523ae:	429a      	cmp	r2, r3
240523b0:	d005      	beq.n	240523be <lcd_sync+0x26>
		memcpy(inactive, active, sizeof(framebuffer1));
240523b2:	f44f 3216 	mov.w	r2, #153600	; 0x25800
240523b6:	6879      	ldr	r1, [r7, #4]
240523b8:	6838      	ldr	r0, [r7, #0]
240523ba:	f00f fc96 	bl	24061cea <memcpy>
	}
}
240523be:	bf00      	nop
240523c0:	3708      	adds	r7, #8
240523c2:	46bd      	mov	sp, r7
240523c4:	bd80      	pop	{r7, pc}
	...

240523c8 <lcd_get_active_buffer>:

void* lcd_get_active_buffer(void) {
240523c8:	b480      	push	{r7}
240523ca:	af00      	add	r7, sp, #0
	return active_framebuffer ? fb2 : fb1;
240523cc:	4b06      	ldr	r3, [pc, #24]	; (240523e8 <lcd_get_active_buffer+0x20>)
240523ce:	681b      	ldr	r3, [r3, #0]
240523d0:	2b00      	cmp	r3, #0
240523d2:	d002      	beq.n	240523da <lcd_get_active_buffer+0x12>
240523d4:	4b05      	ldr	r3, [pc, #20]	; (240523ec <lcd_get_active_buffer+0x24>)
240523d6:	681b      	ldr	r3, [r3, #0]
240523d8:	e001      	b.n	240523de <lcd_get_active_buffer+0x16>
240523da:	4b05      	ldr	r3, [pc, #20]	; (240523f0 <lcd_get_active_buffer+0x28>)
240523dc:	681b      	ldr	r3, [r3, #0]
}
240523de:	4618      	mov	r0, r3
240523e0:	46bd      	mov	sp, r7
240523e2:	f85d 7b04 	ldr.w	r7, [sp], #4
240523e6:	4770      	bx	lr
240523e8:	20000208 	.word	0x20000208
240523ec:	20000040 	.word	0x20000040
240523f0:	2000003c 	.word	0x2000003c

240523f4 <lcd_get_inactive_buffer>:

void* lcd_get_inactive_buffer(void) {
240523f4:	b480      	push	{r7}
240523f6:	af00      	add	r7, sp, #0
	return active_framebuffer ? fb1 : fb2;
240523f8:	4b06      	ldr	r3, [pc, #24]	; (24052414 <lcd_get_inactive_buffer+0x20>)
240523fa:	681b      	ldr	r3, [r3, #0]
240523fc:	2b00      	cmp	r3, #0
240523fe:	d002      	beq.n	24052406 <lcd_get_inactive_buffer+0x12>
24052400:	4b05      	ldr	r3, [pc, #20]	; (24052418 <lcd_get_inactive_buffer+0x24>)
24052402:	681b      	ldr	r3, [r3, #0]
24052404:	e001      	b.n	2405240a <lcd_get_inactive_buffer+0x16>
24052406:	4b05      	ldr	r3, [pc, #20]	; (2405241c <lcd_get_inactive_buffer+0x28>)
24052408:	681b      	ldr	r3, [r3, #0]
}
2405240a:	4618      	mov	r0, r3
2405240c:	46bd      	mov	sp, r7
2405240e:	f85d 7b04 	ldr.w	r7, [sp], #4
24052412:	4770      	bx	lr
24052414:	20000208 	.word	0x20000208
24052418:	2000003c 	.word	0x2000003c
2405241c:	20000040 	.word	0x20000040

24052420 <lcd_wait_for_vblank>:
void lcd_set_buffers(uint16_t *buf1, uint16_t *buf2) {
	fb1 = buf1;
	fb2 = buf2;
}

void lcd_wait_for_vblank(void) {
24052420:	b480      	push	{r7}
24052422:	b083      	sub	sp, #12
24052424:	af00      	add	r7, sp, #0
	uint32_t old_counter = frame_counter;
24052426:	4b08      	ldr	r3, [pc, #32]	; (24052448 <lcd_wait_for_vblank+0x28>)
24052428:	681b      	ldr	r3, [r3, #0]
2405242a:	607b      	str	r3, [r7, #4]
	while (old_counter == frame_counter) {
2405242c:	e000      	b.n	24052430 <lcd_wait_for_vblank+0x10>
		__asm("nop");
2405242e:	bf00      	nop
	while (old_counter == frame_counter) {
24052430:	4b05      	ldr	r3, [pc, #20]	; (24052448 <lcd_wait_for_vblank+0x28>)
24052432:	681b      	ldr	r3, [r3, #0]
24052434:	687a      	ldr	r2, [r7, #4]
24052436:	429a      	cmp	r2, r3
24052438:	d0f9      	beq.n	2405242e <lcd_wait_for_vblank+0xe>
	}
}
2405243a:	bf00      	nop
2405243c:	bf00      	nop
2405243e:	370c      	adds	r7, #12
24052440:	46bd      	mov	sp, r7
24052442:	f85d 7b04 	ldr.w	r7, [sp], #4
24052446:	4770      	bx	lr
24052448:	2000020c 	.word	0x2000020c

2405244c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
2405244c:	b580      	push	{r7, lr}
2405244e:	b088      	sub	sp, #32
24052450:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
24052452:	f001 fc71 	bl	24053d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
24052456:	f000 f86d 	bl	24052534 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
2405245a:	f000 f8ed 	bl	24052638 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
2405245e:	f000 fc93 	bl	24052d88 <MX_GPIO_Init>
  MX_DMA_Init();
24052462:	f000 fc71 	bl	24052d48 <MX_DMA_Init>
  MX_LTDC_Init();
24052466:	f000 fa2f 	bl	240528c8 <MX_LTDC_Init>
  MX_SPI2_Init();
2405246a:	f000 fbc3 	bl	24052bf4 <MX_SPI2_Init>
  MX_OCTOSPI1_Init();
2405246e:	f000 faab 	bl	240529c8 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
24052472:	f000 fb89 	bl	24052b88 <MX_SAI1_Init>
  MX_RTC_Init();
24052476:	f000 fb07 	bl	24052a88 <MX_RTC_Init>
  MX_DAC1_Init();
2405247a:	f000 f999 	bl	240527b0 <MX_DAC1_Init>
  MX_DAC2_Init();
2405247e:	f000 f9d3 	bl	24052828 <MX_DAC2_Init>
  MX_ADC1_Init();
24052482:	f000 f91d 	bl	240526c0 <MX_ADC1_Init>
  MX_TIM1_Init();
24052486:	f000 fc0b 	bl	24052ca0 <MX_TIM1_Init>
  MX_DMA2D_Init();
2405248a:	f000 f9ff 	bl	2405288c <MX_DMA2D_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
2405248e:	f000 f90b 	bl	240526a8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	lcd_init(&hspi2, &hltdc);
24052492:	4923      	ldr	r1, [pc, #140]	; (24052520 <main+0xd4>)
24052494:	4823      	ldr	r0, [pc, #140]	; (24052524 <main+0xd8>)
24052496:	f7ff fde5 	bl	24052064 <lcd_init>
	lcd_backlight_set(backlightLevels[6]);
2405249a:	23b2      	movs	r3, #178	; 0xb2
2405249c:	4618      	mov	r0, r3
2405249e:	f7ff fdb5 	bl	2405200c <lcd_backlight_set>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	OSPI_Init(&hospi1);
240524a2:	4821      	ldr	r0, [pc, #132]	; (24052528 <main+0xdc>)
240524a4:	f7ff fd02 	bl	24051eac <OSPI_Init>

	// Sanity check, sometimes this is triggered
	uint32_t add = 0x90000000;
240524a8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
240524ac:	61fb      	str	r3, [r7, #28]
	uint32_t *ptr = (uint32_t*) add;
240524ae:	69fb      	ldr	r3, [r7, #28]
240524b0:	61bb      	str	r3, [r7, #24]
	if (*ptr == 0x88888888) {
240524b2:	69bb      	ldr	r3, [r7, #24]
240524b4:	681b      	ldr	r3, [r3, #0]
240524b6:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
240524ba:	d101      	bne.n	240524c0 <main+0x74>
		Error_Handler();
240524bc:	f000 fd64 	bl	24052f88 <Error_Handler>
	}

	bq24072_init();
240524c0:	f7ff f86e 	bl	240515a0 <bq24072_init>

	gw_audio_init();
240524c4:	f7fe fce0 	bl	24050e88 <gw_audio_init>

	RTC_TimeTypeDef sTime = { 0 };
240524c8:	1d3b      	adds	r3, r7, #4
240524ca:	2200      	movs	r2, #0
240524cc:	601a      	str	r2, [r3, #0]
240524ce:	605a      	str	r2, [r3, #4]
240524d0:	609a      	str	r2, [r3, #8]
240524d2:	60da      	str	r2, [r3, #12]
240524d4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
240524d6:	2300      	movs	r3, #0
240524d8:	603b      	str	r3, [r7, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
240524da:	1d3b      	adds	r3, r7, #4
240524dc:	2200      	movs	r2, #0
240524de:	4619      	mov	r1, r3
240524e0:	4812      	ldr	r0, [pc, #72]	; (2405252c <main+0xe0>)
240524e2:	f00c fd39 	bl	2405ef58 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
240524e6:	463b      	mov	r3, r7
240524e8:	2200      	movs	r2, #0
240524ea:	4619      	mov	r1, r3
240524ec:	480f      	ldr	r0, [pc, #60]	; (2405252c <main+0xe0>)
240524ee:	f00c fe17 	bl	2405f120 <HAL_RTC_GetDate>
	HAL_ADC_Start(&hadc1);
240524f2:	480f      	ldr	r0, [pc, #60]	; (24052530 <main+0xe4>)
240524f4:	f002 f876 	bl	240545e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
240524f8:	f04f 31ff 	mov.w	r1, #4294967295
240524fc:	480c      	ldr	r0, [pc, #48]	; (24052530 <main+0xe4>)
240524fe:	f002 f92b 	bl	24054758 <HAL_ADC_PollForConversion>
	srand(HAL_ADC_GetValue(&hadc1) ^ sTime.SubSeconds);
24052502:	480b      	ldr	r0, [pc, #44]	; (24052530 <main+0xe4>)
24052504:	f002 fb6a 	bl	24054bdc <HAL_ADC_GetValue>
24052508:	4602      	mov	r2, r0
2405250a:	68bb      	ldr	r3, [r7, #8]
2405250c:	4053      	eors	r3, r2
2405250e:	4618      	mov	r0, r3
24052510:	f00f f88a 	bl	24061628 <srand>

	game_init();
24052514:	f7fd fde4 	bl	240500e0 <game_init>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		game_loop();
24052518:	f7fd fe34 	bl	24050184 <game_loop>
2405251c:	e7fc      	b.n	24052518 <main+0xcc>
2405251e:	bf00      	nop
24052520:	20000304 	.word	0x20000304
24052524:	20000540 	.word	0x20000540
24052528:	200003ac 	.word	0x200003ac
2405252c:	20000408 	.word	0x20000408
24052530:	20000210 	.word	0x20000210

24052534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
24052534:	b580      	push	{r7, lr}
24052536:	b09c      	sub	sp, #112	; 0x70
24052538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2405253a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405253e:	224c      	movs	r2, #76	; 0x4c
24052540:	2100      	movs	r1, #0
24052542:	4618      	mov	r0, r3
24052544:	f00f fb46 	bl	24061bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24052548:	1d3b      	adds	r3, r7, #4
2405254a:	2220      	movs	r2, #32
2405254c:	2100      	movs	r1, #0
2405254e:	4618      	mov	r0, r3
24052550:	f00f fb40 	bl	24061bd4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
24052554:	4b36      	ldr	r3, [pc, #216]	; (24052630 <SystemClock_Config+0xfc>)
24052556:	f04f 32ff 	mov.w	r2, #4294967295
2405255a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
2405255e:	2002      	movs	r0, #2
24052560:	f008 ffea 	bl	2405b538 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24052564:	2300      	movs	r3, #0
24052566:	603b      	str	r3, [r7, #0]
24052568:	4b32      	ldr	r3, [pc, #200]	; (24052634 <SystemClock_Config+0x100>)
2405256a:	699b      	ldr	r3, [r3, #24]
2405256c:	4a31      	ldr	r2, [pc, #196]	; (24052634 <SystemClock_Config+0x100>)
2405256e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24052572:	6193      	str	r3, [r2, #24]
24052574:	4b2f      	ldr	r3, [pc, #188]	; (24052634 <SystemClock_Config+0x100>)
24052576:	699b      	ldr	r3, [r3, #24]
24052578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
2405257c:	603b      	str	r3, [r7, #0]
2405257e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24052580:	bf00      	nop
24052582:	4b2c      	ldr	r3, [pc, #176]	; (24052634 <SystemClock_Config+0x100>)
24052584:	699b      	ldr	r3, [r3, #24]
24052586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405258a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405258e:	d1f8      	bne.n	24052582 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
24052590:	f008 ffc2 	bl	2405b518 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
24052594:	4b26      	ldr	r3, [pc, #152]	; (24052630 <SystemClock_Config+0xfc>)
24052596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24052598:	4a25      	ldr	r2, [pc, #148]	; (24052630 <SystemClock_Config+0xfc>)
2405259a:	f023 0318 	bic.w	r3, r3, #24
2405259e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
240525a0:	230e      	movs	r3, #14
240525a2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
240525a4:	2301      	movs	r3, #1
240525a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
240525a8:	2301      	movs	r3, #1
240525aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
240525ac:	2340      	movs	r3, #64	; 0x40
240525ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
240525b0:	2301      	movs	r3, #1
240525b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
240525b4:	2302      	movs	r3, #2
240525b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
240525b8:	2300      	movs	r3, #0
240525ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
240525bc:	2310      	movs	r3, #16
240525be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 140;
240525c0:	238c      	movs	r3, #140	; 0x8c
240525c2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
240525c4:	2302      	movs	r3, #2
240525c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
240525c8:	2302      	movs	r3, #2
240525ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
240525cc:	2302      	movs	r3, #2
240525ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
240525d0:	2308      	movs	r3, #8
240525d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240525d4:	2300      	movs	r3, #0
240525d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
240525d8:	2300      	movs	r3, #0
240525da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
240525dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
240525e0:	4618      	mov	r0, r3
240525e2:	f008 ffe3 	bl	2405b5ac <HAL_RCC_OscConfig>
240525e6:	4603      	mov	r3, r0
240525e8:	2b00      	cmp	r3, #0
240525ea:	d001      	beq.n	240525f0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
240525ec:	f000 fccc 	bl	24052f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
240525f0:	233f      	movs	r3, #63	; 0x3f
240525f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
240525f4:	2303      	movs	r3, #3
240525f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
240525f8:	2300      	movs	r3, #0
240525fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
240525fc:	2300      	movs	r3, #0
240525fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24052600:	2340      	movs	r3, #64	; 0x40
24052602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
24052604:	2340      	movs	r3, #64	; 0x40
24052606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24052608:	f44f 6380 	mov.w	r3, #1024	; 0x400
2405260c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
2405260e:	2340      	movs	r3, #64	; 0x40
24052610:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
24052612:	1d3b      	adds	r3, r7, #4
24052614:	2106      	movs	r1, #6
24052616:	4618      	mov	r0, r3
24052618:	f009 fbfa 	bl	2405be10 <HAL_RCC_ClockConfig>
2405261c:	4603      	mov	r3, r0
2405261e:	2b00      	cmp	r3, #0
24052620:	d001      	beq.n	24052626 <SystemClock_Config+0xf2>
  {
    Error_Handler();
24052622:	f000 fcb1 	bl	24052f88 <Error_Handler>
  }
}
24052626:	bf00      	nop
24052628:	3770      	adds	r7, #112	; 0x70
2405262a:	46bd      	mov	sp, r7
2405262c:	bd80      	pop	{r7, pc}
2405262e:	bf00      	nop
24052630:	58024400 	.word	0x58024400
24052634:	58024800 	.word	0x58024800

24052638 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
24052638:	b580      	push	{r7, lr}
2405263a:	b0b0      	sub	sp, #192	; 0xc0
2405263c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2405263e:	463b      	mov	r3, r7
24052640:	22c0      	movs	r2, #192	; 0xc0
24052642:	2100      	movs	r1, #0
24052644:	4618      	mov	r0, r3
24052646:	f00f fac5 	bl	24061bd4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER
2405264a:	4a16      	ldr	r2, [pc, #88]	; (240526a4 <PeriphCommonClock_Config+0x6c>)
2405264c:	f04f 0300 	mov.w	r3, #0
24052650:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLL3.PLL3M = 4;
24052654:	2304      	movs	r3, #4
24052656:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 9;
24052658:	2309      	movs	r3, #9
2405265a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
2405265c:	2302      	movs	r3, #2
2405265e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
24052660:	2302      	movs	r3, #2
24052662:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 24;
24052664:	2318      	movs	r3, #24
24052666:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
24052668:	f44f 6340 	mov.w	r3, #3072	; 0xc00
2405266c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
2405266e:	2300      	movs	r3, #0
24052670:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
24052672:	2300      	movs	r3, #0
24052674:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
24052676:	2300      	movs	r3, #0
24052678:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
2405267a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2405267e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
24052682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
24052686:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2405268a:	463b      	mov	r3, r7
2405268c:	4618      	mov	r0, r3
2405268e:	f009 ff35 	bl	2405c4fc <HAL_RCCEx_PeriphCLKConfig>
24052692:	4603      	mov	r3, r0
24052694:	2b00      	cmp	r3, #0
24052696:	d001      	beq.n	2405269c <PeriphCommonClock_Config+0x64>
  {
    Error_Handler();
24052698:	f000 fc76 	bl	24052f88 <Error_Handler>
  }
}
2405269c:	bf00      	nop
2405269e:	37c0      	adds	r7, #192	; 0xc0
240526a0:	46bd      	mov	sp, r7
240526a2:	bd80      	pop	{r7, pc}
240526a4:	a0080000 	.word	0xa0080000

240526a8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
240526a8:	b580      	push	{r7, lr}
240526aa:	af00      	add	r7, sp, #0
  /* OCTOSPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
240526ac:	2200      	movs	r2, #0
240526ae:	2100      	movs	r1, #0
240526b0:	205c      	movs	r0, #92	; 0x5c
240526b2:	f003 fc00 	bl	24055eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
240526b6:	205c      	movs	r0, #92	; 0x5c
240526b8:	f003 fc17 	bl	24055eea <HAL_NVIC_EnableIRQ>
}
240526bc:	bf00      	nop
240526be:	bd80      	pop	{r7, pc}

240526c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
240526c0:	b580      	push	{r7, lr}
240526c2:	b08a      	sub	sp, #40	; 0x28
240526c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
240526c6:	f107 031c 	add.w	r3, r7, #28
240526ca:	2200      	movs	r2, #0
240526cc:	601a      	str	r2, [r3, #0]
240526ce:	605a      	str	r2, [r3, #4]
240526d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
240526d2:	463b      	mov	r3, r7
240526d4:	2200      	movs	r2, #0
240526d6:	601a      	str	r2, [r3, #0]
240526d8:	605a      	str	r2, [r3, #4]
240526da:	609a      	str	r2, [r3, #8]
240526dc:	60da      	str	r2, [r3, #12]
240526de:	611a      	str	r2, [r3, #16]
240526e0:	615a      	str	r2, [r3, #20]
240526e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
240526e4:	4b2f      	ldr	r3, [pc, #188]	; (240527a4 <MX_ADC1_Init+0xe4>)
240526e6:	4a30      	ldr	r2, [pc, #192]	; (240527a8 <MX_ADC1_Init+0xe8>)
240526e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
240526ea:	4b2e      	ldr	r3, [pc, #184]	; (240527a4 <MX_ADC1_Init+0xe4>)
240526ec:	2200      	movs	r2, #0
240526ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
240526f0:	4b2c      	ldr	r3, [pc, #176]	; (240527a4 <MX_ADC1_Init+0xe4>)
240526f2:	2200      	movs	r2, #0
240526f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
240526f6:	4b2b      	ldr	r3, [pc, #172]	; (240527a4 <MX_ADC1_Init+0xe4>)
240526f8:	2200      	movs	r2, #0
240526fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
240526fc:	4b29      	ldr	r3, [pc, #164]	; (240527a4 <MX_ADC1_Init+0xe4>)
240526fe:	2204      	movs	r2, #4
24052700:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
24052702:	4b28      	ldr	r3, [pc, #160]	; (240527a4 <MX_ADC1_Init+0xe4>)
24052704:	2200      	movs	r2, #0
24052706:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
24052708:	4b26      	ldr	r3, [pc, #152]	; (240527a4 <MX_ADC1_Init+0xe4>)
2405270a:	2200      	movs	r2, #0
2405270c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
2405270e:	4b25      	ldr	r3, [pc, #148]	; (240527a4 <MX_ADC1_Init+0xe4>)
24052710:	2201      	movs	r2, #1
24052712:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
24052714:	4b23      	ldr	r3, [pc, #140]	; (240527a4 <MX_ADC1_Init+0xe4>)
24052716:	2200      	movs	r2, #0
24052718:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
2405271a:	4b22      	ldr	r3, [pc, #136]	; (240527a4 <MX_ADC1_Init+0xe4>)
2405271c:	2200      	movs	r2, #0
2405271e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
24052720:	4b20      	ldr	r3, [pc, #128]	; (240527a4 <MX_ADC1_Init+0xe4>)
24052722:	2200      	movs	r2, #0
24052724:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
24052726:	4b1f      	ldr	r3, [pc, #124]	; (240527a4 <MX_ADC1_Init+0xe4>)
24052728:	2200      	movs	r2, #0
2405272a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
2405272c:	4b1d      	ldr	r3, [pc, #116]	; (240527a4 <MX_ADC1_Init+0xe4>)
2405272e:	2200      	movs	r2, #0
24052730:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
24052732:	4b1c      	ldr	r3, [pc, #112]	; (240527a4 <MX_ADC1_Init+0xe4>)
24052734:	2200      	movs	r2, #0
24052736:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
24052738:	4b1a      	ldr	r3, [pc, #104]	; (240527a4 <MX_ADC1_Init+0xe4>)
2405273a:	2200      	movs	r2, #0
2405273c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
24052740:	4818      	ldr	r0, [pc, #96]	; (240527a4 <MX_ADC1_Init+0xe4>)
24052742:	f001 fdf5 	bl	24054330 <HAL_ADC_Init>
24052746:	4603      	mov	r3, r0
24052748:	2b00      	cmp	r3, #0
2405274a:	d001      	beq.n	24052750 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
2405274c:	f000 fc1c 	bl	24052f88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
24052750:	2300      	movs	r3, #0
24052752:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
24052754:	f107 031c 	add.w	r3, r7, #28
24052758:	4619      	mov	r1, r3
2405275a:	4812      	ldr	r0, [pc, #72]	; (240527a4 <MX_ADC1_Init+0xe4>)
2405275c:	f003 fa1e 	bl	24055b9c <HAL_ADCEx_MultiModeConfigChannel>
24052760:	4603      	mov	r3, r0
24052762:	2b00      	cmp	r3, #0
24052764:	d001      	beq.n	2405276a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
24052766:	f000 fc0f 	bl	24052f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
2405276a:	4b10      	ldr	r3, [pc, #64]	; (240527ac <MX_ADC1_Init+0xec>)
2405276c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
2405276e:	2306      	movs	r3, #6
24052770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
24052772:	2300      	movs	r3, #0
24052774:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
24052776:	f240 73ff 	movw	r3, #2047	; 0x7ff
2405277a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
2405277c:	2304      	movs	r3, #4
2405277e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
24052780:	2300      	movs	r3, #0
24052782:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
24052784:	2300      	movs	r3, #0
24052786:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
24052788:	463b      	mov	r3, r7
2405278a:	4619      	mov	r1, r3
2405278c:	4805      	ldr	r0, [pc, #20]	; (240527a4 <MX_ADC1_Init+0xe4>)
2405278e:	f002 fc61 	bl	24055054 <HAL_ADC_ConfigChannel>
24052792:	4603      	mov	r3, r0
24052794:	2b00      	cmp	r3, #0
24052796:	d001      	beq.n	2405279c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
24052798:	f000 fbf6 	bl	24052f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
2405279c:	bf00      	nop
2405279e:	3728      	adds	r7, #40	; 0x28
240527a0:	46bd      	mov	sp, r7
240527a2:	bd80      	pop	{r7, pc}
240527a4:	20000210 	.word	0x20000210
240527a8:	40022000 	.word	0x40022000
240527ac:	10c00010 	.word	0x10c00010

240527b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
240527b0:	b580      	push	{r7, lr}
240527b2:	b08a      	sub	sp, #40	; 0x28
240527b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
240527b6:	1d3b      	adds	r3, r7, #4
240527b8:	2224      	movs	r2, #36	; 0x24
240527ba:	2100      	movs	r1, #0
240527bc:	4618      	mov	r0, r3
240527be:	f00f fa09 	bl	24061bd4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
240527c2:	4b17      	ldr	r3, [pc, #92]	; (24052820 <MX_DAC1_Init+0x70>)
240527c4:	4a17      	ldr	r2, [pc, #92]	; (24052824 <MX_DAC1_Init+0x74>)
240527c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
240527c8:	4815      	ldr	r0, [pc, #84]	; (24052820 <MX_DAC1_Init+0x70>)
240527ca:	f003 fbac 	bl	24055f26 <HAL_DAC_Init>
240527ce:	4603      	mov	r3, r0
240527d0:	2b00      	cmp	r3, #0
240527d2:	d001      	beq.n	240527d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
240527d4:	f000 fbd8 	bl	24052f88 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
240527d8:	2300      	movs	r3, #0
240527da:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
240527dc:	2300      	movs	r3, #0
240527de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
240527e0:	2300      	movs	r3, #0
240527e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
240527e4:	2301      	movs	r3, #1
240527e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
240527e8:	2300      	movs	r3, #0
240527ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
240527ec:	1d3b      	adds	r3, r7, #4
240527ee:	2200      	movs	r2, #0
240527f0:	4619      	mov	r1, r3
240527f2:	480b      	ldr	r0, [pc, #44]	; (24052820 <MX_DAC1_Init+0x70>)
240527f4:	f003 fc30 	bl	24056058 <HAL_DAC_ConfigChannel>
240527f8:	4603      	mov	r3, r0
240527fa:	2b00      	cmp	r3, #0
240527fc:	d001      	beq.n	24052802 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
240527fe:	f000 fbc3 	bl	24052f88 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
24052802:	1d3b      	adds	r3, r7, #4
24052804:	2210      	movs	r2, #16
24052806:	4619      	mov	r1, r3
24052808:	4805      	ldr	r0, [pc, #20]	; (24052820 <MX_DAC1_Init+0x70>)
2405280a:	f003 fc25 	bl	24056058 <HAL_DAC_ConfigChannel>
2405280e:	4603      	mov	r3, r0
24052810:	2b00      	cmp	r3, #0
24052812:	d001      	beq.n	24052818 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
24052814:	f000 fbb8 	bl	24052f88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
24052818:	bf00      	nop
2405281a:	3728      	adds	r7, #40	; 0x28
2405281c:	46bd      	mov	sp, r7
2405281e:	bd80      	pop	{r7, pc}
24052820:	20000274 	.word	0x20000274
24052824:	40007400 	.word	0x40007400

24052828 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
24052828:	b580      	push	{r7, lr}
2405282a:	b08a      	sub	sp, #40	; 0x28
2405282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
2405282e:	1d3b      	adds	r3, r7, #4
24052830:	2224      	movs	r2, #36	; 0x24
24052832:	2100      	movs	r1, #0
24052834:	4618      	mov	r0, r3
24052836:	f00f f9cd 	bl	24061bd4 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
2405283a:	4b12      	ldr	r3, [pc, #72]	; (24052884 <MX_DAC2_Init+0x5c>)
2405283c:	4a12      	ldr	r2, [pc, #72]	; (24052888 <MX_DAC2_Init+0x60>)
2405283e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
24052840:	4810      	ldr	r0, [pc, #64]	; (24052884 <MX_DAC2_Init+0x5c>)
24052842:	f003 fb70 	bl	24055f26 <HAL_DAC_Init>
24052846:	4603      	mov	r3, r0
24052848:	2b00      	cmp	r3, #0
2405284a:	d001      	beq.n	24052850 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
2405284c:	f000 fb9c 	bl	24052f88 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
24052850:	2300      	movs	r3, #0
24052852:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
24052854:	2300      	movs	r3, #0
24052856:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
24052858:	2300      	movs	r3, #0
2405285a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
2405285c:	2301      	movs	r3, #1
2405285e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
24052860:	2300      	movs	r3, #0
24052862:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
24052864:	1d3b      	adds	r3, r7, #4
24052866:	2200      	movs	r2, #0
24052868:	4619      	mov	r1, r3
2405286a:	4806      	ldr	r0, [pc, #24]	; (24052884 <MX_DAC2_Init+0x5c>)
2405286c:	f003 fbf4 	bl	24056058 <HAL_DAC_ConfigChannel>
24052870:	4603      	mov	r3, r0
24052872:	2b00      	cmp	r3, #0
24052874:	d001      	beq.n	2405287a <MX_DAC2_Init+0x52>
  {
    Error_Handler();
24052876:	f000 fb87 	bl	24052f88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
2405287a:	bf00      	nop
2405287c:	3728      	adds	r7, #40	; 0x28
2405287e:	46bd      	mov	sp, r7
24052880:	bd80      	pop	{r7, pc}
24052882:	bf00      	nop
24052884:	20000288 	.word	0x20000288
24052888:	58003400 	.word	0x58003400

2405288c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
2405288c:	b580      	push	{r7, lr}
2405288e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
24052890:	4b0b      	ldr	r3, [pc, #44]	; (240528c0 <MX_DMA2D_Init+0x34>)
24052892:	4a0c      	ldr	r2, [pc, #48]	; (240528c4 <MX_DMA2D_Init+0x38>)
24052894:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
24052896:	4b0a      	ldr	r3, [pc, #40]	; (240528c0 <MX_DMA2D_Init+0x34>)
24052898:	f44f 3240 	mov.w	r2, #196608	; 0x30000
2405289c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
2405289e:	4b08      	ldr	r3, [pc, #32]	; (240528c0 <MX_DMA2D_Init+0x34>)
240528a0:	2202      	movs	r2, #2
240528a2:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
240528a4:	4b06      	ldr	r3, [pc, #24]	; (240528c0 <MX_DMA2D_Init+0x34>)
240528a6:	2200      	movs	r2, #0
240528a8:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
240528aa:	4805      	ldr	r0, [pc, #20]	; (240528c0 <MX_DMA2D_Init+0x34>)
240528ac:	f006 fbfc 	bl	240590a8 <HAL_DMA2D_Init>
240528b0:	4603      	mov	r3, r0
240528b2:	2b00      	cmp	r3, #0
240528b4:	d001      	beq.n	240528ba <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
240528b6:	f000 fb67 	bl	24052f88 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
240528ba:	bf00      	nop
240528bc:	bd80      	pop	{r7, pc}
240528be:	bf00      	nop
240528c0:	2000029c 	.word	0x2000029c
240528c4:	52001000 	.word	0x52001000

240528c8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
240528c8:	b580      	push	{r7, lr}
240528ca:	b08e      	sub	sp, #56	; 0x38
240528cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
240528ce:	1d3b      	adds	r3, r7, #4
240528d0:	2234      	movs	r2, #52	; 0x34
240528d2:	2100      	movs	r1, #0
240528d4:	4618      	mov	r0, r3
240528d6:	f00f f97d 	bl	24061bd4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
240528da:	4b39      	ldr	r3, [pc, #228]	; (240529c0 <MX_LTDC_Init+0xf8>)
240528dc:	4a39      	ldr	r2, [pc, #228]	; (240529c4 <MX_LTDC_Init+0xfc>)
240528de:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
240528e0:	4b37      	ldr	r3, [pc, #220]	; (240529c0 <MX_LTDC_Init+0xf8>)
240528e2:	2200      	movs	r2, #0
240528e4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
240528e6:	4b36      	ldr	r3, [pc, #216]	; (240529c0 <MX_LTDC_Init+0xf8>)
240528e8:	2200      	movs	r2, #0
240528ea:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
240528ec:	4b34      	ldr	r3, [pc, #208]	; (240529c0 <MX_LTDC_Init+0xf8>)
240528ee:	2200      	movs	r2, #0
240528f0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IIPC;
240528f2:	4b33      	ldr	r3, [pc, #204]	; (240529c0 <MX_LTDC_Init+0xf8>)
240528f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
240528f8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
240528fa:	4b31      	ldr	r3, [pc, #196]	; (240529c0 <MX_LTDC_Init+0xf8>)
240528fc:	2209      	movs	r2, #9
240528fe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
24052900:	4b2f      	ldr	r3, [pc, #188]	; (240529c0 <MX_LTDC_Init+0xf8>)
24052902:	2201      	movs	r2, #1
24052904:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 60;
24052906:	4b2e      	ldr	r3, [pc, #184]	; (240529c0 <MX_LTDC_Init+0xf8>)
24052908:	223c      	movs	r2, #60	; 0x3c
2405290a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 7;
2405290c:	4b2c      	ldr	r3, [pc, #176]	; (240529c0 <MX_LTDC_Init+0xf8>)
2405290e:	2207      	movs	r2, #7
24052910:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 380;
24052912:	4b2b      	ldr	r3, [pc, #172]	; (240529c0 <MX_LTDC_Init+0xf8>)
24052914:	f44f 72be 	mov.w	r2, #380	; 0x17c
24052918:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 247;
2405291a:	4b29      	ldr	r3, [pc, #164]	; (240529c0 <MX_LTDC_Init+0xf8>)
2405291c:	22f7      	movs	r2, #247	; 0xf7
2405291e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 392;
24052920:	4b27      	ldr	r3, [pc, #156]	; (240529c0 <MX_LTDC_Init+0xf8>)
24052922:	f44f 72c4 	mov.w	r2, #392	; 0x188
24052926:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 255;
24052928:	4b25      	ldr	r3, [pc, #148]	; (240529c0 <MX_LTDC_Init+0xf8>)
2405292a:	22ff      	movs	r2, #255	; 0xff
2405292c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
2405292e:	4b24      	ldr	r3, [pc, #144]	; (240529c0 <MX_LTDC_Init+0xf8>)
24052930:	2200      	movs	r2, #0
24052932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
24052936:	4b22      	ldr	r3, [pc, #136]	; (240529c0 <MX_LTDC_Init+0xf8>)
24052938:	2200      	movs	r2, #0
2405293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
2405293e:	4b20      	ldr	r3, [pc, #128]	; (240529c0 <MX_LTDC_Init+0xf8>)
24052940:	2200      	movs	r2, #0
24052942:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
24052946:	481e      	ldr	r0, [pc, #120]	; (240529c0 <MX_LTDC_Init+0xf8>)
24052948:	f006 fe18 	bl	2405957c <HAL_LTDC_Init>
2405294c:	4603      	mov	r3, r0
2405294e:	2b00      	cmp	r3, #0
24052950:	d001      	beq.n	24052956 <MX_LTDC_Init+0x8e>
  {
    Error_Handler();
24052952:	f000 fb19 	bl	24052f88 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
24052956:	2300      	movs	r3, #0
24052958:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
2405295a:	f44f 73a0 	mov.w	r3, #320	; 0x140
2405295e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
24052960:	2300      	movs	r3, #0
24052962:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
24052964:	23f0      	movs	r3, #240	; 0xf0
24052966:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
24052968:	2302      	movs	r3, #2
2405296a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
2405296c:	23ff      	movs	r3, #255	; 0xff
2405296e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
24052970:	23ff      	movs	r3, #255	; 0xff
24052972:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
24052974:	f44f 6380 	mov.w	r3, #1024	; 0x400
24052978:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
2405297a:	2305      	movs	r3, #5
2405297c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x24000000;
2405297e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
24052982:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 320;
24052984:	f44f 73a0 	mov.w	r3, #320	; 0x140
24052988:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 240;
2405298a:	23f0      	movs	r3, #240	; 0xf0
2405298c:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
2405298e:	2300      	movs	r3, #0
24052990:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
24052994:	23ff      	movs	r3, #255	; 0xff
24052996:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
2405299a:	2300      	movs	r3, #0
2405299c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
240529a0:	1d3b      	adds	r3, r7, #4
240529a2:	2200      	movs	r2, #0
240529a4:	4619      	mov	r1, r3
240529a6:	4806      	ldr	r0, [pc, #24]	; (240529c0 <MX_LTDC_Init+0xf8>)
240529a8:	f006 ff70 	bl	2405988c <HAL_LTDC_ConfigLayer>
240529ac:	4603      	mov	r3, r0
240529ae:	2b00      	cmp	r3, #0
240529b0:	d001      	beq.n	240529b6 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
240529b2:	f000 fae9 	bl	24052f88 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
240529b6:	bf00      	nop
240529b8:	3738      	adds	r7, #56	; 0x38
240529ba:	46bd      	mov	sp, r7
240529bc:	bd80      	pop	{r7, pc}
240529be:	bf00      	nop
240529c0:	20000304 	.word	0x20000304
240529c4:	50001000 	.word	0x50001000

240529c8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
240529c8:	b580      	push	{r7, lr}
240529ca:	b086      	sub	sp, #24
240529cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
240529ce:	463b      	mov	r3, r7
240529d0:	2200      	movs	r2, #0
240529d2:	601a      	str	r2, [r3, #0]
240529d4:	605a      	str	r2, [r3, #4]
240529d6:	609a      	str	r2, [r3, #8]
240529d8:	60da      	str	r2, [r3, #12]
240529da:	611a      	str	r2, [r3, #16]
240529dc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
240529de:	4b28      	ldr	r3, [pc, #160]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
240529e0:	4a28      	ldr	r2, [pc, #160]	; (24052a84 <MX_OCTOSPI1_Init+0xbc>)
240529e2:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
240529e4:	4b26      	ldr	r3, [pc, #152]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
240529e6:	2204      	movs	r2, #4
240529e8:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
240529ea:	4b25      	ldr	r3, [pc, #148]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
240529ec:	2200      	movs	r2, #0
240529ee:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
240529f0:	4b23      	ldr	r3, [pc, #140]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
240529f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
240529f6:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
240529f8:	4b21      	ldr	r3, [pc, #132]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
240529fa:	2218      	movs	r2, #24
240529fc:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
240529fe:	4b20      	ldr	r3, [pc, #128]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a00:	2202      	movs	r2, #2
24052a02:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
24052a04:	4b1e      	ldr	r3, [pc, #120]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a06:	2200      	movs	r2, #0
24052a08:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
24052a0a:	4b1d      	ldr	r3, [pc, #116]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a0c:	2200      	movs	r2, #0
24052a0e:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
24052a10:	4b1b      	ldr	r3, [pc, #108]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a12:	2200      	movs	r2, #0
24052a14:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
24052a16:	4b1a      	ldr	r3, [pc, #104]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a18:	2201      	movs	r2, #1
24052a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
24052a1c:	4b18      	ldr	r3, [pc, #96]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a1e:	2200      	movs	r2, #0
24052a20:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
24052a22:	4b17      	ldr	r3, [pc, #92]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a24:	2200      	movs	r2, #0
24052a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
24052a28:	4b15      	ldr	r3, [pc, #84]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a2a:	2200      	movs	r2, #0
24052a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
24052a2e:	4b14      	ldr	r3, [pc, #80]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a30:	2208      	movs	r2, #8
24052a32:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
24052a34:	4b12      	ldr	r3, [pc, #72]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a36:	2200      	movs	r2, #0
24052a38:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
24052a3a:	4b11      	ldr	r3, [pc, #68]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a3c:	2200      	movs	r2, #0
24052a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
24052a40:	480f      	ldr	r0, [pc, #60]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a42:	f007 f989 	bl	24059d58 <HAL_OSPI_Init>
24052a46:	4603      	mov	r3, r0
24052a48:	2b00      	cmp	r3, #0
24052a4a:	d001      	beq.n	24052a50 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
24052a4c:	f000 fa9c 	bl	24052f88 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
24052a50:	2301      	movs	r3, #1
24052a52:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
24052a54:	2301      	movs	r3, #1
24052a56:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
24052a58:	f04f 1301 	mov.w	r3, #65537	; 0x10001
24052a5c:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24052a5e:	463b      	mov	r3, r7
24052a60:	f241 3288 	movw	r2, #5000	; 0x1388
24052a64:	4619      	mov	r1, r3
24052a66:	4806      	ldr	r0, [pc, #24]	; (24052a80 <MX_OCTOSPI1_Init+0xb8>)
24052a68:	f007 fdc6 	bl	2405a5f8 <HAL_OSPIM_Config>
24052a6c:	4603      	mov	r3, r0
24052a6e:	2b00      	cmp	r3, #0
24052a70:	d001      	beq.n	24052a76 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
24052a72:	f000 fa89 	bl	24052f88 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
24052a76:	bf00      	nop
24052a78:	3718      	adds	r7, #24
24052a7a:	46bd      	mov	sp, r7
24052a7c:	bd80      	pop	{r7, pc}
24052a7e:	bf00      	nop
24052a80:	200003ac 	.word	0x200003ac
24052a84:	52005000 	.word	0x52005000

24052a88 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
24052a88:	b580      	push	{r7, lr}
24052a8a:	b086      	sub	sp, #24
24052a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
24052a8e:	1d3b      	adds	r3, r7, #4
24052a90:	2200      	movs	r2, #0
24052a92:	601a      	str	r2, [r3, #0]
24052a94:	605a      	str	r2, [r3, #4]
24052a96:	609a      	str	r2, [r3, #8]
24052a98:	60da      	str	r2, [r3, #12]
24052a9a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
24052a9c:	2300      	movs	r3, #0
24052a9e:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN RTC_Init 1 */
	hrtc.Instance = RTC;
24052aa0:	4b36      	ldr	r3, [pc, #216]	; (24052b7c <MX_RTC_Init+0xf4>)
24052aa2:	4a37      	ldr	r2, [pc, #220]	; (24052b80 <MX_RTC_Init+0xf8>)
24052aa4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
24052aa6:	4b35      	ldr	r3, [pc, #212]	; (24052b7c <MX_RTC_Init+0xf4>)
24052aa8:	2200      	movs	r2, #0
24052aaa:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
24052aac:	4b33      	ldr	r3, [pc, #204]	; (24052b7c <MX_RTC_Init+0xf4>)
24052aae:	227f      	movs	r2, #127	; 0x7f
24052ab0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
24052ab2:	4b32      	ldr	r3, [pc, #200]	; (24052b7c <MX_RTC_Init+0xf4>)
24052ab4:	22ff      	movs	r2, #255	; 0xff
24052ab6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
24052ab8:	4b30      	ldr	r3, [pc, #192]	; (24052b7c <MX_RTC_Init+0xf4>)
24052aba:	2200      	movs	r2, #0
24052abc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
24052abe:	4b2f      	ldr	r3, [pc, #188]	; (24052b7c <MX_RTC_Init+0xf4>)
24052ac0:	2200      	movs	r2, #0
24052ac2:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
24052ac4:	4b2d      	ldr	r3, [pc, #180]	; (24052b7c <MX_RTC_Init+0xf4>)
24052ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
24052aca:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
24052acc:	4b2b      	ldr	r3, [pc, #172]	; (24052b7c <MX_RTC_Init+0xf4>)
24052ace:	2200      	movs	r2, #0
24052ad0:	615a      	str	r2, [r3, #20]
	if ((RCC->BDCR & RCC_BDCR_RTCEN) != 0) {
24052ad2:	4b2c      	ldr	r3, [pc, #176]	; (24052b84 <MX_RTC_Init+0xfc>)
24052ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24052ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24052ada:	2b00      	cmp	r3, #0
24052adc:	d002      	beq.n	24052ae4 <MX_RTC_Init+0x5c>
		HAL_PWR_EnableBkUpAccess();
24052ade:	f008 fd1b 	bl	2405b518 <HAL_PWR_EnableBkUpAccess>
24052ae2:	e048      	b.n	24052b76 <MX_RTC_Init+0xee>
	}
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
24052ae4:	4b25      	ldr	r3, [pc, #148]	; (24052b7c <MX_RTC_Init+0xf4>)
24052ae6:	4a26      	ldr	r2, [pc, #152]	; (24052b80 <MX_RTC_Init+0xf8>)
24052ae8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
24052aea:	4b24      	ldr	r3, [pc, #144]	; (24052b7c <MX_RTC_Init+0xf4>)
24052aec:	2200      	movs	r2, #0
24052aee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
24052af0:	4b22      	ldr	r3, [pc, #136]	; (24052b7c <MX_RTC_Init+0xf4>)
24052af2:	227f      	movs	r2, #127	; 0x7f
24052af4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
24052af6:	4b21      	ldr	r3, [pc, #132]	; (24052b7c <MX_RTC_Init+0xf4>)
24052af8:	22ff      	movs	r2, #255	; 0xff
24052afa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
24052afc:	4b1f      	ldr	r3, [pc, #124]	; (24052b7c <MX_RTC_Init+0xf4>)
24052afe:	2200      	movs	r2, #0
24052b00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
24052b02:	4b1e      	ldr	r3, [pc, #120]	; (24052b7c <MX_RTC_Init+0xf4>)
24052b04:	2200      	movs	r2, #0
24052b06:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
24052b08:	4b1c      	ldr	r3, [pc, #112]	; (24052b7c <MX_RTC_Init+0xf4>)
24052b0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
24052b0e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
24052b10:	4b1a      	ldr	r3, [pc, #104]	; (24052b7c <MX_RTC_Init+0xf4>)
24052b12:	2200      	movs	r2, #0
24052b14:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
24052b16:	4819      	ldr	r0, [pc, #100]	; (24052b7c <MX_RTC_Init+0xf4>)
24052b18:	f00c f8fa 	bl	2405ed10 <HAL_RTC_Init>
24052b1c:	4603      	mov	r3, r0
24052b1e:	2b00      	cmp	r3, #0
24052b20:	d001      	beq.n	24052b26 <MX_RTC_Init+0x9e>
  {
    Error_Handler();
24052b22:	f000 fa31 	bl	24052f88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
24052b26:	2300      	movs	r3, #0
24052b28:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
24052b2a:	2300      	movs	r3, #0
24052b2c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
24052b2e:	2300      	movs	r3, #0
24052b30:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
24052b32:	2300      	movs	r3, #0
24052b34:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
24052b36:	2300      	movs	r3, #0
24052b38:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
24052b3a:	1d3b      	adds	r3, r7, #4
24052b3c:	2200      	movs	r2, #0
24052b3e:	4619      	mov	r1, r3
24052b40:	480e      	ldr	r0, [pc, #56]	; (24052b7c <MX_RTC_Init+0xf4>)
24052b42:	f00c f96b 	bl	2405ee1c <HAL_RTC_SetTime>
24052b46:	4603      	mov	r3, r0
24052b48:	2b00      	cmp	r3, #0
24052b4a:	d001      	beq.n	24052b50 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
24052b4c:	f000 fa1c 	bl	24052f88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
24052b50:	2301      	movs	r3, #1
24052b52:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
24052b54:	2301      	movs	r3, #1
24052b56:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
24052b58:	2301      	movs	r3, #1
24052b5a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
24052b5c:	2300      	movs	r3, #0
24052b5e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
24052b60:	463b      	mov	r3, r7
24052b62:	2200      	movs	r2, #0
24052b64:	4619      	mov	r1, r3
24052b66:	4805      	ldr	r0, [pc, #20]	; (24052b7c <MX_RTC_Init+0xf4>)
24052b68:	f00c fa52 	bl	2405f010 <HAL_RTC_SetDate>
24052b6c:	4603      	mov	r3, r0
24052b6e:	2b00      	cmp	r3, #0
24052b70:	d001      	beq.n	24052b76 <MX_RTC_Init+0xee>
  {
    Error_Handler();
24052b72:	f000 fa09 	bl	24052f88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
24052b76:	3718      	adds	r7, #24
24052b78:	46bd      	mov	sp, r7
24052b7a:	bd80      	pop	{r7, pc}
24052b7c:	20000408 	.word	0x20000408
24052b80:	58004000 	.word	0x58004000
24052b84:	58024400 	.word	0x58024400

24052b88 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
24052b88:	b580      	push	{r7, lr}
24052b8a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
24052b8c:	4b17      	ldr	r3, [pc, #92]	; (24052bec <MX_SAI1_Init+0x64>)
24052b8e:	4a18      	ldr	r2, [pc, #96]	; (24052bf0 <MX_SAI1_Init+0x68>)
24052b90:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
24052b92:	4b16      	ldr	r3, [pc, #88]	; (24052bec <MX_SAI1_Init+0x64>)
24052b94:	2200      	movs	r2, #0
24052b96:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24052b98:	4b14      	ldr	r3, [pc, #80]	; (24052bec <MX_SAI1_Init+0x64>)
24052b9a:	2200      	movs	r2, #0
24052b9c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24052b9e:	4b13      	ldr	r3, [pc, #76]	; (24052bec <MX_SAI1_Init+0x64>)
24052ba0:	2200      	movs	r2, #0
24052ba2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24052ba4:	4b11      	ldr	r3, [pc, #68]	; (24052bec <MX_SAI1_Init+0x64>)
24052ba6:	2200      	movs	r2, #0
24052ba8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
24052baa:	4b10      	ldr	r3, [pc, #64]	; (24052bec <MX_SAI1_Init+0x64>)
24052bac:	2204      	movs	r2, #4
24052bae:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24052bb0:	4b0e      	ldr	r3, [pc, #56]	; (24052bec <MX_SAI1_Init+0x64>)
24052bb2:	f64b 3280 	movw	r2, #48000	; 0xbb80
24052bb6:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24052bb8:	4b0c      	ldr	r3, [pc, #48]	; (24052bec <MX_SAI1_Init+0x64>)
24052bba:	2200      	movs	r2, #0
24052bbc:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
24052bbe:	4b0b      	ldr	r3, [pc, #44]	; (24052bec <MX_SAI1_Init+0x64>)
24052bc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24052bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24052bc6:	4b09      	ldr	r3, [pc, #36]	; (24052bec <MX_SAI1_Init+0x64>)
24052bc8:	2200      	movs	r2, #0
24052bca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
24052bcc:	4b07      	ldr	r3, [pc, #28]	; (24052bec <MX_SAI1_Init+0x64>)
24052bce:	2200      	movs	r2, #0
24052bd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
24052bd2:	2302      	movs	r3, #2
24052bd4:	2200      	movs	r2, #0
24052bd6:	2100      	movs	r1, #0
24052bd8:	4804      	ldr	r0, [pc, #16]	; (24052bec <MX_SAI1_Init+0x64>)
24052bda:	f00c fbc1 	bl	2405f360 <HAL_SAI_InitProtocol>
24052bde:	4603      	mov	r3, r0
24052be0:	2b00      	cmp	r3, #0
24052be2:	d001      	beq.n	24052be8 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
24052be4:	f000 f9d0 	bl	24052f88 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
24052be8:	bf00      	nop
24052bea:	bd80      	pop	{r7, pc}
24052bec:	20000430 	.word	0x20000430
24052bf0:	40015804 	.word	0x40015804

24052bf4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
24052bf4:	b580      	push	{r7, lr}
24052bf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
24052bf8:	4b27      	ldr	r3, [pc, #156]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052bfa:	4a28      	ldr	r2, [pc, #160]	; (24052c9c <MX_SPI2_Init+0xa8>)
24052bfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
24052bfe:	4b26      	ldr	r3, [pc, #152]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
24052c04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
24052c06:	4b24      	ldr	r3, [pc, #144]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
24052c0c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
24052c0e:	4b22      	ldr	r3, [pc, #136]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c10:	2207      	movs	r2, #7
24052c12:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
24052c14:	4b20      	ldr	r3, [pc, #128]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c16:	2200      	movs	r2, #0
24052c18:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
24052c1a:	4b1f      	ldr	r3, [pc, #124]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c1c:	2200      	movs	r2, #0
24052c1e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
24052c20:	4b1d      	ldr	r3, [pc, #116]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
24052c26:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
24052c28:	4b1b      	ldr	r3, [pc, #108]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c2a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
24052c2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
24052c30:	4b19      	ldr	r3, [pc, #100]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c32:	2200      	movs	r2, #0
24052c34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
24052c36:	4b18      	ldr	r3, [pc, #96]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c38:	2200      	movs	r2, #0
24052c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
24052c3c:	4b16      	ldr	r3, [pc, #88]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c3e:	2200      	movs	r2, #0
24052c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
24052c42:	4b15      	ldr	r3, [pc, #84]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c44:	2200      	movs	r2, #0
24052c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
24052c48:	4b13      	ldr	r3, [pc, #76]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c4a:	2200      	movs	r2, #0
24052c4c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24052c4e:	4b12      	ldr	r3, [pc, #72]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c50:	2200      	movs	r2, #0
24052c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
24052c54:	4b10      	ldr	r3, [pc, #64]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c56:	2200      	movs	r2, #0
24052c58:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24052c5a:	4b0f      	ldr	r3, [pc, #60]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c5c:	2200      	movs	r2, #0
24052c5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24052c60:	4b0d      	ldr	r3, [pc, #52]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c62:	2200      	movs	r2, #0
24052c64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24052c66:	4b0c      	ldr	r3, [pc, #48]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c68:	2200      	movs	r2, #0
24052c6a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
24052c6c:	4b0a      	ldr	r3, [pc, #40]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c6e:	2200      	movs	r2, #0
24052c70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24052c72:	4b09      	ldr	r3, [pc, #36]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c74:	2200      	movs	r2, #0
24052c76:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
24052c78:	4b07      	ldr	r3, [pc, #28]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c7a:	2200      	movs	r2, #0
24052c7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24052c7e:	4b06      	ldr	r3, [pc, #24]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c80:	2200      	movs	r2, #0
24052c82:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
24052c84:	4804      	ldr	r0, [pc, #16]	; (24052c98 <MX_SPI2_Init+0xa4>)
24052c86:	f00d faf7 	bl	24060278 <HAL_SPI_Init>
24052c8a:	4603      	mov	r3, r0
24052c8c:	2b00      	cmp	r3, #0
24052c8e:	d001      	beq.n	24052c94 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
24052c90:	f000 f97a 	bl	24052f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
24052c94:	bf00      	nop
24052c96:	bd80      	pop	{r7, pc}
24052c98:	20000540 	.word	0x20000540
24052c9c:	40003800 	.word	0x40003800

24052ca0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
24052ca0:	b580      	push	{r7, lr}
24052ca2:	b088      	sub	sp, #32
24052ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
24052ca6:	f107 0310 	add.w	r3, r7, #16
24052caa:	2200      	movs	r2, #0
24052cac:	601a      	str	r2, [r3, #0]
24052cae:	605a      	str	r2, [r3, #4]
24052cb0:	609a      	str	r2, [r3, #8]
24052cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
24052cb4:	1d3b      	adds	r3, r7, #4
24052cb6:	2200      	movs	r2, #0
24052cb8:	601a      	str	r2, [r3, #0]
24052cba:	605a      	str	r2, [r3, #4]
24052cbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
24052cbe:	4b20      	ldr	r3, [pc, #128]	; (24052d40 <MX_TIM1_Init+0xa0>)
24052cc0:	4a20      	ldr	r2, [pc, #128]	; (24052d44 <MX_TIM1_Init+0xa4>)
24052cc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14000;
24052cc4:	4b1e      	ldr	r3, [pc, #120]	; (24052d40 <MX_TIM1_Init+0xa0>)
24052cc6:	f243 62b0 	movw	r2, #14000	; 0x36b0
24052cca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
24052ccc:	4b1c      	ldr	r3, [pc, #112]	; (24052d40 <MX_TIM1_Init+0xa0>)
24052cce:	2200      	movs	r2, #0
24052cd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
24052cd2:	4b1b      	ldr	r3, [pc, #108]	; (24052d40 <MX_TIM1_Init+0xa0>)
24052cd4:	f24c 3250 	movw	r2, #50000	; 0xc350
24052cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
24052cda:	4b19      	ldr	r3, [pc, #100]	; (24052d40 <MX_TIM1_Init+0xa0>)
24052cdc:	2200      	movs	r2, #0
24052cde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
24052ce0:	4b17      	ldr	r3, [pc, #92]	; (24052d40 <MX_TIM1_Init+0xa0>)
24052ce2:	2200      	movs	r2, #0
24052ce4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
24052ce6:	4b16      	ldr	r3, [pc, #88]	; (24052d40 <MX_TIM1_Init+0xa0>)
24052ce8:	2200      	movs	r2, #0
24052cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
24052cec:	4814      	ldr	r0, [pc, #80]	; (24052d40 <MX_TIM1_Init+0xa0>)
24052cee:	f00d fecc 	bl	24060a8a <HAL_TIM_Base_Init>
24052cf2:	4603      	mov	r3, r0
24052cf4:	2b00      	cmp	r3, #0
24052cf6:	d001      	beq.n	24052cfc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
24052cf8:	f000 f946 	bl	24052f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
24052cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24052d00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
24052d02:	f107 0310 	add.w	r3, r7, #16
24052d06:	4619      	mov	r1, r3
24052d08:	480d      	ldr	r0, [pc, #52]	; (24052d40 <MX_TIM1_Init+0xa0>)
24052d0a:	f00e f8ad 	bl	24060e68 <HAL_TIM_ConfigClockSource>
24052d0e:	4603      	mov	r3, r0
24052d10:	2b00      	cmp	r3, #0
24052d12:	d001      	beq.n	24052d18 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
24052d14:	f000 f938 	bl	24052f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
24052d18:	2300      	movs	r3, #0
24052d1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
24052d1c:	2300      	movs	r3, #0
24052d1e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
24052d20:	2300      	movs	r3, #0
24052d22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
24052d24:	1d3b      	adds	r3, r7, #4
24052d26:	4619      	mov	r1, r3
24052d28:	4805      	ldr	r0, [pc, #20]	; (24052d40 <MX_TIM1_Init+0xa0>)
24052d2a:	f00e faff 	bl	2406132c <HAL_TIMEx_MasterConfigSynchronization>
24052d2e:	4603      	mov	r3, r0
24052d30:	2b00      	cmp	r3, #0
24052d32:	d001      	beq.n	24052d38 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
24052d34:	f000 f928 	bl	24052f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
24052d38:	bf00      	nop
24052d3a:	3720      	adds	r7, #32
24052d3c:	46bd      	mov	sp, r7
24052d3e:	bd80      	pop	{r7, pc}
24052d40:	200005c8 	.word	0x200005c8
24052d44:	40010000 	.word	0x40010000

24052d48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
24052d48:	b580      	push	{r7, lr}
24052d4a:	b082      	sub	sp, #8
24052d4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24052d4e:	4b0d      	ldr	r3, [pc, #52]	; (24052d84 <MX_DMA_Init+0x3c>)
24052d50:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24052d54:	4a0b      	ldr	r2, [pc, #44]	; (24052d84 <MX_DMA_Init+0x3c>)
24052d56:	f043 0301 	orr.w	r3, r3, #1
24052d5a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
24052d5e:	4b09      	ldr	r3, [pc, #36]	; (24052d84 <MX_DMA_Init+0x3c>)
24052d60:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24052d64:	f003 0301 	and.w	r3, r3, #1
24052d68:	607b      	str	r3, [r7, #4]
24052d6a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
24052d6c:	2200      	movs	r2, #0
24052d6e:	2100      	movs	r1, #0
24052d70:	200b      	movs	r0, #11
24052d72:	f003 f8a0 	bl	24055eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
24052d76:	200b      	movs	r0, #11
24052d78:	f003 f8b7 	bl	24055eea <HAL_NVIC_EnableIRQ>

}
24052d7c:	bf00      	nop
24052d7e:	3708      	adds	r7, #8
24052d80:	46bd      	mov	sp, r7
24052d82:	bd80      	pop	{r7, pc}
24052d84:	58024400 	.word	0x58024400

24052d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
24052d88:	b580      	push	{r7, lr}
24052d8a:	b08a      	sub	sp, #40	; 0x28
24052d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24052d8e:	f107 0314 	add.w	r3, r7, #20
24052d92:	2200      	movs	r2, #0
24052d94:	601a      	str	r2, [r3, #0]
24052d96:	605a      	str	r2, [r3, #4]
24052d98:	609a      	str	r2, [r3, #8]
24052d9a:	60da      	str	r2, [r3, #12]
24052d9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24052d9e:	4b74      	ldr	r3, [pc, #464]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052da0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052da4:	4a72      	ldr	r2, [pc, #456]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052da6:	f043 0310 	orr.w	r3, r3, #16
24052daa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052dae:	4b70      	ldr	r3, [pc, #448]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052db0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052db4:	f003 0310 	and.w	r3, r3, #16
24052db8:	613b      	str	r3, [r7, #16]
24052dba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24052dbc:	4b6c      	ldr	r3, [pc, #432]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052dbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052dc2:	4a6b      	ldr	r2, [pc, #428]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052dc4:	f043 0304 	orr.w	r3, r3, #4
24052dc8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052dcc:	4b68      	ldr	r3, [pc, #416]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052dce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052dd2:	f003 0304 	and.w	r3, r3, #4
24052dd6:	60fb      	str	r3, [r7, #12]
24052dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24052dda:	4b65      	ldr	r3, [pc, #404]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052ddc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052de0:	4a63      	ldr	r2, [pc, #396]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052de2:	f043 0301 	orr.w	r3, r3, #1
24052de6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052dea:	4b61      	ldr	r3, [pc, #388]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052dec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052df0:	f003 0301 	and.w	r3, r3, #1
24052df4:	60bb      	str	r3, [r7, #8]
24052df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24052df8:	4b5d      	ldr	r3, [pc, #372]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052dfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052dfe:	4a5c      	ldr	r2, [pc, #368]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052e00:	f043 0302 	orr.w	r3, r3, #2
24052e04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052e08:	4b59      	ldr	r3, [pc, #356]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052e0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052e0e:	f003 0302 	and.w	r3, r3, #2
24052e12:	607b      	str	r3, [r7, #4]
24052e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24052e16:	4b56      	ldr	r3, [pc, #344]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052e18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052e1c:	4a54      	ldr	r2, [pc, #336]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052e1e:	f043 0308 	orr.w	r3, r3, #8
24052e22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052e26:	4b52      	ldr	r3, [pc, #328]	; (24052f70 <MX_GPIO_Init+0x1e8>)
24052e28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052e2c:	f003 0308 	and.w	r3, r3, #8
24052e30:	603b      	str	r3, [r7, #0]
24052e32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Speaker_enable_GPIO_Port, GPIO_Speaker_enable_Pin, GPIO_PIN_SET);
24052e34:	2201      	movs	r2, #1
24052e36:	2108      	movs	r1, #8
24052e38:	484e      	ldr	r0, [pc, #312]	; (24052f74 <MX_GPIO_Init+0x1ec>)
24052e3a:	f006 fb61 	bl	24059500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
24052e3e:	2200      	movs	r2, #0
24052e40:	f44f 7180 	mov.w	r1, #256	; 0x100
24052e44:	484b      	ldr	r0, [pc, #300]	; (24052f74 <MX_GPIO_Init+0x1ec>)
24052e46:	f006 fb5b 	bl	24059500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24052e4a:	2201      	movs	r2, #1
24052e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24052e50:	4849      	ldr	r0, [pc, #292]	; (24052f78 <MX_GPIO_Init+0x1f0>)
24052e52:	f006 fb55 	bl	24059500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
24052e56:	2201      	movs	r2, #1
24052e58:	f44f 7180 	mov.w	r1, #256	; 0x100
24052e5c:	4847      	ldr	r0, [pc, #284]	; (24052f7c <MX_GPIO_Init+0x1f4>)
24052e5e:	f006 fb4f 	bl	24059500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24052e62:	2200      	movs	r2, #0
24052e64:	2112      	movs	r1, #18
24052e66:	4845      	ldr	r0, [pc, #276]	; (24052f7c <MX_GPIO_Init+0x1f4>)
24052e68:	f006 fb4a 	bl	24059500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_Speaker_enable_Pin PE8 */
  GPIO_InitStruct.Pin = GPIO_Speaker_enable_Pin|GPIO_PIN_8;
24052e6c:	f44f 7384 	mov.w	r3, #264	; 0x108
24052e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24052e72:	2301      	movs	r3, #1
24052e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24052e76:	2300      	movs	r3, #0
24052e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052e7a:	2300      	movs	r3, #0
24052e7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24052e7e:	f107 0314 	add.w	r3, r7, #20
24052e82:	4619      	mov	r1, r3
24052e84:	483b      	ldr	r0, [pc, #236]	; (24052f74 <MX_GPIO_Init+0x1ec>)
24052e86:	f006 f973 	bl	24059170 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_PAUSE_Pin BTN_GAME_Pin BTN_TIME_Pin */
  GPIO_InitStruct.Pin = BTN_PAUSE_Pin|BTN_GAME_Pin|BTN_TIME_Pin;
24052e8a:	f242 0322 	movw	r3, #8226	; 0x2022
24052e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24052e90:	2300      	movs	r3, #0
24052e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24052e94:	2301      	movs	r3, #1
24052e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24052e98:	f107 0314 	add.w	r3, r7, #20
24052e9c:	4619      	mov	r1, r3
24052e9e:	4838      	ldr	r0, [pc, #224]	; (24052f80 <MX_GPIO_Init+0x1f8>)
24052ea0:	f006 f966 	bl	24059170 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_PWR_Pin */
  GPIO_InitStruct.Pin = BTN_PWR_Pin;
24052ea4:	2301      	movs	r3, #1
24052ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24052ea8:	2300      	movs	r3, #0
24052eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24052eac:	2300      	movs	r3, #0
24052eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_PWR_GPIO_Port, &GPIO_InitStruct);
24052eb0:	f107 0314 	add.w	r3, r7, #20
24052eb4:	4619      	mov	r1, r3
24052eb6:	4833      	ldr	r0, [pc, #204]	; (24052f84 <MX_GPIO_Init+0x1fc>)
24052eb8:	f006 f95a 	bl	24059170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24052ebc:	2304      	movs	r3, #4
24052ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
24052ec0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
24052ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24052ec6:	2300      	movs	r3, #0
24052ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24052eca:	f107 0314 	add.w	r3, r7, #20
24052ece:	4619      	mov	r1, r3
24052ed0:	482c      	ldr	r0, [pc, #176]	; (24052f84 <MX_GPIO_Init+0x1fc>)
24052ed2:	f006 f94d 	bl	24059170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
24052ed6:	2380      	movs	r3, #128	; 0x80
24052ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
24052eda:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
24052ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24052ee0:	2300      	movs	r3, #0
24052ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24052ee4:	f107 0314 	add.w	r3, r7, #20
24052ee8:	4619      	mov	r1, r3
24052eea:	4822      	ldr	r0, [pc, #136]	; (24052f74 <MX_GPIO_Init+0x1ec>)
24052eec:	f006 f940 	bl	24059170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24052ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24052ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24052ef6:	2301      	movs	r3, #1
24052ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24052efa:	2300      	movs	r3, #0
24052efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052efe:	2300      	movs	r3, #0
24052f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24052f02:	f107 0314 	add.w	r3, r7, #20
24052f06:	4619      	mov	r1, r3
24052f08:	481b      	ldr	r0, [pc, #108]	; (24052f78 <MX_GPIO_Init+0x1f0>)
24052f0a:	f006 f931 	bl	24059170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD1 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_4;
24052f0e:	f44f 7389 	mov.w	r3, #274	; 0x112
24052f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24052f14:	2301      	movs	r3, #1
24052f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24052f18:	2300      	movs	r3, #0
24052f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052f1c:	2300      	movs	r3, #0
24052f1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24052f20:	f107 0314 	add.w	r3, r7, #20
24052f24:	4619      	mov	r1, r3
24052f26:	4815      	ldr	r0, [pc, #84]	; (24052f7c <MX_GPIO_Init+0x1f4>)
24052f28:	f006 f922 	bl	24059170 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_Left_Pin BTN_Down_Pin BTN_Right_Pin
                           BTN_Up_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_Left_Pin|BTN_Down_Pin|BTN_Right_Pin
24052f2c:	f64c 2321 	movw	r3, #51745	; 0xca21
24052f30:	617b      	str	r3, [r7, #20]
                          |BTN_Up_Pin|BTN_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24052f32:	2300      	movs	r3, #0
24052f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24052f36:	2301      	movs	r3, #1
24052f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24052f3a:	f107 0314 	add.w	r3, r7, #20
24052f3e:	4619      	mov	r1, r3
24052f40:	480e      	ldr	r0, [pc, #56]	; (24052f7c <MX_GPIO_Init+0x1f4>)
24052f42:	f006 f915 	bl	24059170 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
24052f46:	2200      	movs	r2, #0
24052f48:	2100      	movs	r1, #0
24052f4a:	2008      	movs	r0, #8
24052f4c:	f002 ffb3 	bl	24055eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
24052f50:	2008      	movs	r0, #8
24052f52:	f002 ffca 	bl	24055eea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
24052f56:	2200      	movs	r2, #0
24052f58:	2100      	movs	r1, #0
24052f5a:	2017      	movs	r0, #23
24052f5c:	f002 ffab 	bl	24055eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
24052f60:	2017      	movs	r0, #23
24052f62:	f002 ffc2 	bl	24055eea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
24052f66:	bf00      	nop
24052f68:	3728      	adds	r7, #40	; 0x28
24052f6a:	46bd      	mov	sp, r7
24052f6c:	bd80      	pop	{r7, pc}
24052f6e:	bf00      	nop
24052f70:	58024400 	.word	0x58024400
24052f74:	58021000 	.word	0x58021000
24052f78:	58020400 	.word	0x58020400
24052f7c:	58020c00 	.word	0x58020c00
24052f80:	58020800 	.word	0x58020800
24052f84:	58020000 	.word	0x58020000

24052f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
24052f88:	b480      	push	{r7}
24052f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
24052f8c:	b672      	cpsid	i
}
24052f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
24052f90:	e7fe      	b.n	24052f90 <Error_Handler+0x8>
	...

24052f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
24052f94:	b480      	push	{r7}
24052f96:	b083      	sub	sp, #12
24052f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24052f9a:	4b0a      	ldr	r3, [pc, #40]	; (24052fc4 <HAL_MspInit+0x30>)
24052f9c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24052fa0:	4a08      	ldr	r2, [pc, #32]	; (24052fc4 <HAL_MspInit+0x30>)
24052fa2:	f043 0302 	orr.w	r3, r3, #2
24052fa6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
24052faa:	4b06      	ldr	r3, [pc, #24]	; (24052fc4 <HAL_MspInit+0x30>)
24052fac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24052fb0:	f003 0302 	and.w	r3, r3, #2
24052fb4:	607b      	str	r3, [r7, #4]
24052fb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24052fb8:	bf00      	nop
24052fba:	370c      	adds	r7, #12
24052fbc:	46bd      	mov	sp, r7
24052fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
24052fc2:	4770      	bx	lr
24052fc4:	58024400 	.word	0x58024400

24052fc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
24052fc8:	b580      	push	{r7, lr}
24052fca:	b08a      	sub	sp, #40	; 0x28
24052fcc:	af00      	add	r7, sp, #0
24052fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24052fd0:	f107 0314 	add.w	r3, r7, #20
24052fd4:	2200      	movs	r2, #0
24052fd6:	601a      	str	r2, [r3, #0]
24052fd8:	605a      	str	r2, [r3, #4]
24052fda:	609a      	str	r2, [r3, #8]
24052fdc:	60da      	str	r2, [r3, #12]
24052fde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
24052fe0:	687b      	ldr	r3, [r7, #4]
24052fe2:	681b      	ldr	r3, [r3, #0]
24052fe4:	4a1c      	ldr	r2, [pc, #112]	; (24053058 <HAL_ADC_MspInit+0x90>)
24052fe6:	4293      	cmp	r3, r2
24052fe8:	d131      	bne.n	2405304e <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
24052fea:	4b1c      	ldr	r3, [pc, #112]	; (2405305c <HAL_ADC_MspInit+0x94>)
24052fec:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24052ff0:	4a1a      	ldr	r2, [pc, #104]	; (2405305c <HAL_ADC_MspInit+0x94>)
24052ff2:	f043 0320 	orr.w	r3, r3, #32
24052ff6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
24052ffa:	4b18      	ldr	r3, [pc, #96]	; (2405305c <HAL_ADC_MspInit+0x94>)
24052ffc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24053000:	f003 0320 	and.w	r3, r3, #32
24053004:	613b      	str	r3, [r7, #16]
24053006:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
24053008:	4b14      	ldr	r3, [pc, #80]	; (2405305c <HAL_ADC_MspInit+0x94>)
2405300a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405300e:	4a13      	ldr	r2, [pc, #76]	; (2405305c <HAL_ADC_MspInit+0x94>)
24053010:	f043 0304 	orr.w	r3, r3, #4
24053014:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24053018:	4b10      	ldr	r3, [pc, #64]	; (2405305c <HAL_ADC_MspInit+0x94>)
2405301a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405301e:	f003 0304 	and.w	r3, r3, #4
24053022:	60fb      	str	r3, [r7, #12]
24053024:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24053026:	2310      	movs	r3, #16
24053028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
2405302a:	2303      	movs	r3, #3
2405302c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405302e:	2300      	movs	r3, #0
24053030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24053032:	f107 0314 	add.w	r3, r7, #20
24053036:	4619      	mov	r1, r3
24053038:	4809      	ldr	r0, [pc, #36]	; (24053060 <HAL_ADC_MspInit+0x98>)
2405303a:	f006 f899 	bl	24059170 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
2405303e:	2200      	movs	r2, #0
24053040:	2100      	movs	r1, #0
24053042:	2012      	movs	r0, #18
24053044:	f002 ff37 	bl	24055eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
24053048:	2012      	movs	r0, #18
2405304a:	f002 ff4e 	bl	24055eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
2405304e:	bf00      	nop
24053050:	3728      	adds	r7, #40	; 0x28
24053052:	46bd      	mov	sp, r7
24053054:	bd80      	pop	{r7, pc}
24053056:	bf00      	nop
24053058:	40022000 	.word	0x40022000
2405305c:	58024400 	.word	0x58024400
24053060:	58020800 	.word	0x58020800

24053064 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
24053064:	b580      	push	{r7, lr}
24053066:	b08c      	sub	sp, #48	; 0x30
24053068:	af00      	add	r7, sp, #0
2405306a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2405306c:	f107 031c 	add.w	r3, r7, #28
24053070:	2200      	movs	r2, #0
24053072:	601a      	str	r2, [r3, #0]
24053074:	605a      	str	r2, [r3, #4]
24053076:	609a      	str	r2, [r3, #8]
24053078:	60da      	str	r2, [r3, #12]
2405307a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
2405307c:	687b      	ldr	r3, [r7, #4]
2405307e:	681b      	ldr	r3, [r3, #0]
24053080:	4a30      	ldr	r2, [pc, #192]	; (24053144 <HAL_DAC_MspInit+0xe0>)
24053082:	4293      	cmp	r3, r2
24053084:	d12a      	bne.n	240530dc <HAL_DAC_MspInit+0x78>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
24053086:	4b30      	ldr	r3, [pc, #192]	; (24053148 <HAL_DAC_MspInit+0xe4>)
24053088:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
2405308c:	4a2e      	ldr	r2, [pc, #184]	; (24053148 <HAL_DAC_MspInit+0xe4>)
2405308e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
24053092:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
24053096:	4b2c      	ldr	r3, [pc, #176]	; (24053148 <HAL_DAC_MspInit+0xe4>)
24053098:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
2405309c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240530a0:	61bb      	str	r3, [r7, #24]
240530a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
240530a4:	4b28      	ldr	r3, [pc, #160]	; (24053148 <HAL_DAC_MspInit+0xe4>)
240530a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240530aa:	4a27      	ldr	r2, [pc, #156]	; (24053148 <HAL_DAC_MspInit+0xe4>)
240530ac:	f043 0301 	orr.w	r3, r3, #1
240530b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240530b4:	4b24      	ldr	r3, [pc, #144]	; (24053148 <HAL_DAC_MspInit+0xe4>)
240530b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240530ba:	f003 0301 	and.w	r3, r3, #1
240530be:	617b      	str	r3, [r7, #20]
240530c0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
240530c2:	2330      	movs	r3, #48	; 0x30
240530c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
240530c6:	2303      	movs	r3, #3
240530c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240530ca:	2300      	movs	r3, #0
240530cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240530ce:	f107 031c 	add.w	r3, r7, #28
240530d2:	4619      	mov	r1, r3
240530d4:	481d      	ldr	r0, [pc, #116]	; (2405314c <HAL_DAC_MspInit+0xe8>)
240530d6:	f006 f84b 	bl	24059170 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
240530da:	e02e      	b.n	2405313a <HAL_DAC_MspInit+0xd6>
  else if(hdac->Instance==DAC2)
240530dc:	687b      	ldr	r3, [r7, #4]
240530de:	681b      	ldr	r3, [r3, #0]
240530e0:	4a1b      	ldr	r2, [pc, #108]	; (24053150 <HAL_DAC_MspInit+0xec>)
240530e2:	4293      	cmp	r3, r2
240530e4:	d129      	bne.n	2405313a <HAL_DAC_MspInit+0xd6>
    __HAL_RCC_DAC2_CLK_ENABLE();
240530e6:	4b18      	ldr	r3, [pc, #96]	; (24053148 <HAL_DAC_MspInit+0xe4>)
240530e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
240530ec:	4a16      	ldr	r2, [pc, #88]	; (24053148 <HAL_DAC_MspInit+0xe4>)
240530ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
240530f2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
240530f6:	4b14      	ldr	r3, [pc, #80]	; (24053148 <HAL_DAC_MspInit+0xe4>)
240530f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
240530fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24053100:	613b      	str	r3, [r7, #16]
24053102:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24053104:	4b10      	ldr	r3, [pc, #64]	; (24053148 <HAL_DAC_MspInit+0xe4>)
24053106:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405310a:	4a0f      	ldr	r2, [pc, #60]	; (24053148 <HAL_DAC_MspInit+0xe4>)
2405310c:	f043 0301 	orr.w	r3, r3, #1
24053110:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24053114:	4b0c      	ldr	r3, [pc, #48]	; (24053148 <HAL_DAC_MspInit+0xe4>)
24053116:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405311a:	f003 0301 	and.w	r3, r3, #1
2405311e:	60fb      	str	r3, [r7, #12]
24053120:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
24053122:	2340      	movs	r3, #64	; 0x40
24053124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
24053126:	2303      	movs	r3, #3
24053128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405312a:	2300      	movs	r3, #0
2405312c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2405312e:	f107 031c 	add.w	r3, r7, #28
24053132:	4619      	mov	r1, r3
24053134:	4805      	ldr	r0, [pc, #20]	; (2405314c <HAL_DAC_MspInit+0xe8>)
24053136:	f006 f81b 	bl	24059170 <HAL_GPIO_Init>
}
2405313a:	bf00      	nop
2405313c:	3730      	adds	r7, #48	; 0x30
2405313e:	46bd      	mov	sp, r7
24053140:	bd80      	pop	{r7, pc}
24053142:	bf00      	nop
24053144:	40007400 	.word	0x40007400
24053148:	58024400 	.word	0x58024400
2405314c:	58020000 	.word	0x58020000
24053150:	58003400 	.word	0x58003400

24053154 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
24053154:	b480      	push	{r7}
24053156:	b085      	sub	sp, #20
24053158:	af00      	add	r7, sp, #0
2405315a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
2405315c:	687b      	ldr	r3, [r7, #4]
2405315e:	681b      	ldr	r3, [r3, #0]
24053160:	4a0b      	ldr	r2, [pc, #44]	; (24053190 <HAL_DMA2D_MspInit+0x3c>)
24053162:	4293      	cmp	r3, r2
24053164:	d10e      	bne.n	24053184 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
24053166:	4b0b      	ldr	r3, [pc, #44]	; (24053194 <HAL_DMA2D_MspInit+0x40>)
24053168:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
2405316c:	4a09      	ldr	r2, [pc, #36]	; (24053194 <HAL_DMA2D_MspInit+0x40>)
2405316e:	f043 0310 	orr.w	r3, r3, #16
24053172:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
24053176:	4b07      	ldr	r3, [pc, #28]	; (24053194 <HAL_DMA2D_MspInit+0x40>)
24053178:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
2405317c:	f003 0310 	and.w	r3, r3, #16
24053180:	60fb      	str	r3, [r7, #12]
24053182:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
24053184:	bf00      	nop
24053186:	3714      	adds	r7, #20
24053188:	46bd      	mov	sp, r7
2405318a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405318e:	4770      	bx	lr
24053190:	52001000 	.word	0x52001000
24053194:	58024400 	.word	0x58024400

24053198 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
24053198:	b580      	push	{r7, lr}
2405319a:	b08e      	sub	sp, #56	; 0x38
2405319c:	af00      	add	r7, sp, #0
2405319e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240531a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
240531a4:	2200      	movs	r2, #0
240531a6:	601a      	str	r2, [r3, #0]
240531a8:	605a      	str	r2, [r3, #4]
240531aa:	609a      	str	r2, [r3, #8]
240531ac:	60da      	str	r2, [r3, #12]
240531ae:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
240531b0:	687b      	ldr	r3, [r7, #4]
240531b2:	681b      	ldr	r3, [r3, #0]
240531b4:	4a90      	ldr	r2, [pc, #576]	; (240533f8 <HAL_LTDC_MspInit+0x260>)
240531b6:	4293      	cmp	r3, r2
240531b8:	f040 8119 	bne.w	240533ee <HAL_LTDC_MspInit+0x256>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
240531bc:	4b8f      	ldr	r3, [pc, #572]	; (240533fc <HAL_LTDC_MspInit+0x264>)
240531be:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
240531c2:	4a8e      	ldr	r2, [pc, #568]	; (240533fc <HAL_LTDC_MspInit+0x264>)
240531c4:	f043 0308 	orr.w	r3, r3, #8
240531c8:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
240531cc:	4b8b      	ldr	r3, [pc, #556]	; (240533fc <HAL_LTDC_MspInit+0x264>)
240531ce:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
240531d2:	f003 0308 	and.w	r3, r3, #8
240531d6:	623b      	str	r3, [r7, #32]
240531d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
240531da:	4b88      	ldr	r3, [pc, #544]	; (240533fc <HAL_LTDC_MspInit+0x264>)
240531dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240531e0:	4a86      	ldr	r2, [pc, #536]	; (240533fc <HAL_LTDC_MspInit+0x264>)
240531e2:	f043 0304 	orr.w	r3, r3, #4
240531e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240531ea:	4b84      	ldr	r3, [pc, #528]	; (240533fc <HAL_LTDC_MspInit+0x264>)
240531ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240531f0:	f003 0304 	and.w	r3, r3, #4
240531f4:	61fb      	str	r3, [r7, #28]
240531f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
240531f8:	4b80      	ldr	r3, [pc, #512]	; (240533fc <HAL_LTDC_MspInit+0x264>)
240531fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240531fe:	4a7f      	ldr	r2, [pc, #508]	; (240533fc <HAL_LTDC_MspInit+0x264>)
24053200:	f043 0301 	orr.w	r3, r3, #1
24053204:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24053208:	4b7c      	ldr	r3, [pc, #496]	; (240533fc <HAL_LTDC_MspInit+0x264>)
2405320a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405320e:	f003 0301 	and.w	r3, r3, #1
24053212:	61bb      	str	r3, [r7, #24]
24053214:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24053216:	4b79      	ldr	r3, [pc, #484]	; (240533fc <HAL_LTDC_MspInit+0x264>)
24053218:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405321c:	4a77      	ldr	r2, [pc, #476]	; (240533fc <HAL_LTDC_MspInit+0x264>)
2405321e:	f043 0302 	orr.w	r3, r3, #2
24053222:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24053226:	4b75      	ldr	r3, [pc, #468]	; (240533fc <HAL_LTDC_MspInit+0x264>)
24053228:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405322c:	f003 0302 	and.w	r3, r3, #2
24053230:	617b      	str	r3, [r7, #20]
24053232:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
24053234:	4b71      	ldr	r3, [pc, #452]	; (240533fc <HAL_LTDC_MspInit+0x264>)
24053236:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405323a:	4a70      	ldr	r2, [pc, #448]	; (240533fc <HAL_LTDC_MspInit+0x264>)
2405323c:	f043 0310 	orr.w	r3, r3, #16
24053240:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24053244:	4b6d      	ldr	r3, [pc, #436]	; (240533fc <HAL_LTDC_MspInit+0x264>)
24053246:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405324a:	f003 0310 	and.w	r3, r3, #16
2405324e:	613b      	str	r3, [r7, #16]
24053250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24053252:	4b6a      	ldr	r3, [pc, #424]	; (240533fc <HAL_LTDC_MspInit+0x264>)
24053254:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053258:	4a68      	ldr	r2, [pc, #416]	; (240533fc <HAL_LTDC_MspInit+0x264>)
2405325a:	f043 0308 	orr.w	r3, r3, #8
2405325e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24053262:	4b66      	ldr	r3, [pc, #408]	; (240533fc <HAL_LTDC_MspInit+0x264>)
24053264:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053268:	f003 0308 	and.w	r3, r3, #8
2405326c:	60fb      	str	r3, [r7, #12]
2405326e:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PD6     ------> LTDC_B2
    PB5     ------> LTDC_B5
    PB8     ------> LTDC_B6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
24053270:	2301      	movs	r3, #1
24053272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24053274:	2302      	movs	r3, #2
24053276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053278:	2300      	movs	r3, #0
2405327a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2405327c:	2300      	movs	r3, #0
2405327e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
24053280:	230b      	movs	r3, #11
24053282:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24053284:	f107 0324 	add.w	r3, r7, #36	; 0x24
24053288:	4619      	mov	r1, r3
2405328a:	485d      	ldr	r0, [pc, #372]	; (24053400 <HAL_LTDC_MspInit+0x268>)
2405328c:	f005 ff70 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
24053290:	f44f 6338 	mov.w	r3, #2944	; 0xb80
24053294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24053296:	2302      	movs	r3, #2
24053298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405329a:	2300      	movs	r3, #0
2405329c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2405329e:	2300      	movs	r3, #0
240532a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
240532a2:	230e      	movs	r3, #14
240532a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240532a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
240532aa:	4619      	mov	r1, r3
240532ac:	4855      	ldr	r0, [pc, #340]	; (24053404 <HAL_LTDC_MspInit+0x26c>)
240532ae:	f005 ff5f 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
240532b2:	2301      	movs	r3, #1
240532b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240532b6:	2302      	movs	r3, #2
240532b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240532ba:	2300      	movs	r3, #0
240532bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240532be:	2300      	movs	r3, #0
240532c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
240532c2:	2309      	movs	r3, #9
240532c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240532c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
240532ca:	4619      	mov	r1, r3
240532cc:	484e      	ldr	r0, [pc, #312]	; (24053408 <HAL_LTDC_MspInit+0x270>)
240532ce:	f005 ff4f 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
240532d2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
240532d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240532d8:	2302      	movs	r3, #2
240532da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240532dc:	2300      	movs	r3, #0
240532de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240532e0:	2300      	movs	r3, #0
240532e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
240532e4:	230e      	movs	r3, #14
240532e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240532e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
240532ec:	4619      	mov	r1, r3
240532ee:	4847      	ldr	r0, [pc, #284]	; (2405340c <HAL_LTDC_MspInit+0x274>)
240532f0:	f005 ff3e 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_8;
240532f4:	f44f 439a 	mov.w	r3, #19712	; 0x4d00
240532f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240532fa:	2302      	movs	r3, #2
240532fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240532fe:	2300      	movs	r3, #0
24053300:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053302:	2300      	movs	r3, #0
24053304:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24053306:	230e      	movs	r3, #14
24053308:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2405330a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405330e:	4619      	mov	r1, r3
24053310:	483d      	ldr	r0, [pc, #244]	; (24053408 <HAL_LTDC_MspInit+0x270>)
24053312:	f005 ff2d 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
24053316:	f44f 6389 	mov.w	r3, #1096	; 0x448
2405331a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405331c:	2302      	movs	r3, #2
2405331e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053320:	2300      	movs	r3, #0
24053322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053324:	2300      	movs	r3, #0
24053326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24053328:	230e      	movs	r3, #14
2405332a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2405332c:	f107 0324 	add.w	r3, r7, #36	; 0x24
24053330:	4619      	mov	r1, r3
24053332:	4837      	ldr	r0, [pc, #220]	; (24053410 <HAL_LTDC_MspInit+0x278>)
24053334:	f005 ff1c 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
24053338:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
2405333c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405333e:	2302      	movs	r3, #2
24053340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053342:	2300      	movs	r3, #0
24053344:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053346:	2300      	movs	r3, #0
24053348:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
2405334a:	230e      	movs	r3, #14
2405334c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2405334e:	f107 0324 	add.w	r3, r7, #36	; 0x24
24053352:	4619      	mov	r1, r3
24053354:	482a      	ldr	r0, [pc, #168]	; (24053400 <HAL_LTDC_MspInit+0x268>)
24053356:	f005 ff0b 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
2405335a:	f44f 7300 	mov.w	r3, #512	; 0x200
2405335e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24053360:	2302      	movs	r3, #2
24053362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053364:	2300      	movs	r3, #0
24053366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053368:	2300      	movs	r3, #0
2405336a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
2405336c:	230a      	movs	r3, #10
2405336e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24053370:	f107 0324 	add.w	r3, r7, #36	; 0x24
24053374:	4619      	mov	r1, r3
24053376:	4822      	ldr	r0, [pc, #136]	; (24053400 <HAL_LTDC_MspInit+0x268>)
24053378:	f005 fefa 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
2405337c:	f44f 6380 	mov.w	r3, #1024	; 0x400
24053380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24053382:	2302      	movs	r3, #2
24053384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053386:	2300      	movs	r3, #0
24053388:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2405338a:	2300      	movs	r3, #0
2405338c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
2405338e:	230c      	movs	r3, #12
24053390:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24053392:	f107 0324 	add.w	r3, r7, #36	; 0x24
24053396:	4619      	mov	r1, r3
24053398:	481a      	ldr	r0, [pc, #104]	; (24053404 <HAL_LTDC_MspInit+0x26c>)
2405339a:	f005 fee9 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
2405339e:	2304      	movs	r3, #4
240533a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240533a2:	2302      	movs	r3, #2
240533a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240533a6:	2300      	movs	r3, #0
240533a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240533aa:	2300      	movs	r3, #0
240533ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
240533ae:	2309      	movs	r3, #9
240533b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240533b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
240533b6:	4619      	mov	r1, r3
240533b8:	4815      	ldr	r0, [pc, #84]	; (24053410 <HAL_LTDC_MspInit+0x278>)
240533ba:	f005 fed9 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
240533be:	2320      	movs	r3, #32
240533c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240533c2:	2302      	movs	r3, #2
240533c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240533c6:	2300      	movs	r3, #0
240533c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240533ca:	2300      	movs	r3, #0
240533cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
240533ce:	230b      	movs	r3, #11
240533d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240533d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
240533d6:	4619      	mov	r1, r3
240533d8:	480b      	ldr	r0, [pc, #44]	; (24053408 <HAL_LTDC_MspInit+0x270>)
240533da:	f005 fec9 	bl	24059170 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
240533de:	2200      	movs	r2, #0
240533e0:	2100      	movs	r1, #0
240533e2:	2058      	movs	r0, #88	; 0x58
240533e4:	f002 fd67 	bl	24055eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
240533e8:	2058      	movs	r0, #88	; 0x58
240533ea:	f002 fd7e 	bl	24055eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
240533ee:	bf00      	nop
240533f0:	3738      	adds	r7, #56	; 0x38
240533f2:	46bd      	mov	sp, r7
240533f4:	bd80      	pop	{r7, pc}
240533f6:	bf00      	nop
240533f8:	50001000 	.word	0x50001000
240533fc:	58024400 	.word	0x58024400
24053400:	58020800 	.word	0x58020800
24053404:	58020000 	.word	0x58020000
24053408:	58020400 	.word	0x58020400
2405340c:	58021000 	.word	0x58021000
24053410:	58020c00 	.word	0x58020c00

24053414 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
24053414:	b580      	push	{r7, lr}
24053416:	b0be      	sub	sp, #248	; 0xf8
24053418:	af00      	add	r7, sp, #0
2405341a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2405341c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
24053420:	2200      	movs	r2, #0
24053422:	601a      	str	r2, [r3, #0]
24053424:	605a      	str	r2, [r3, #4]
24053426:	609a      	str	r2, [r3, #8]
24053428:	60da      	str	r2, [r3, #12]
2405342a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2405342c:	f107 0320 	add.w	r3, r7, #32
24053430:	22c0      	movs	r2, #192	; 0xc0
24053432:	2100      	movs	r1, #0
24053434:	4618      	mov	r0, r3
24053436:	f00e fbcd 	bl	24061bd4 <memset>
  if(hospi->Instance==OCTOSPI1)
2405343a:	687b      	ldr	r3, [r7, #4]
2405343c:	681b      	ldr	r3, [r3, #0]
2405343e:	4a7a      	ldr	r2, [pc, #488]	; (24053628 <HAL_OSPI_MspInit+0x214>)
24053440:	4293      	cmp	r3, r2
24053442:	f040 80ec 	bne.w	2405361e <HAL_OSPI_MspInit+0x20a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
24053446:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
2405344a:	f04f 0300 	mov.w	r3, #0
2405344e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
24053452:	2330      	movs	r3, #48	; 0x30
24053454:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24053456:	f107 0320 	add.w	r3, r7, #32
2405345a:	4618      	mov	r0, r3
2405345c:	f009 f84e 	bl	2405c4fc <HAL_RCCEx_PeriphCLKConfig>
24053460:	4603      	mov	r3, r0
24053462:	2b00      	cmp	r3, #0
24053464:	d001      	beq.n	2405346a <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
24053466:	f7ff fd8f 	bl	24052f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
2405346a:	4b70      	ldr	r3, [pc, #448]	; (2405362c <HAL_OSPI_MspInit+0x218>)
2405346c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
24053470:	4a6e      	ldr	r2, [pc, #440]	; (2405362c <HAL_OSPI_MspInit+0x218>)
24053472:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
24053476:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
2405347a:	4b6c      	ldr	r3, [pc, #432]	; (2405362c <HAL_OSPI_MspInit+0x218>)
2405347c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
24053480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24053484:	61fb      	str	r3, [r7, #28]
24053486:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
24053488:	4b68      	ldr	r3, [pc, #416]	; (2405362c <HAL_OSPI_MspInit+0x218>)
2405348a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
2405348e:	4a67      	ldr	r2, [pc, #412]	; (2405362c <HAL_OSPI_MspInit+0x218>)
24053490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24053494:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
24053498:	4b64      	ldr	r3, [pc, #400]	; (2405362c <HAL_OSPI_MspInit+0x218>)
2405349a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
2405349e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
240534a2:	61bb      	str	r3, [r7, #24]
240534a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
240534a6:	4b61      	ldr	r3, [pc, #388]	; (2405362c <HAL_OSPI_MspInit+0x218>)
240534a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240534ac:	4a5f      	ldr	r2, [pc, #380]	; (2405362c <HAL_OSPI_MspInit+0x218>)
240534ae:	f043 0310 	orr.w	r3, r3, #16
240534b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240534b6:	4b5d      	ldr	r3, [pc, #372]	; (2405362c <HAL_OSPI_MspInit+0x218>)
240534b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240534bc:	f003 0310 	and.w	r3, r3, #16
240534c0:	617b      	str	r3, [r7, #20]
240534c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
240534c4:	4b59      	ldr	r3, [pc, #356]	; (2405362c <HAL_OSPI_MspInit+0x218>)
240534c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240534ca:	4a58      	ldr	r2, [pc, #352]	; (2405362c <HAL_OSPI_MspInit+0x218>)
240534cc:	f043 0301 	orr.w	r3, r3, #1
240534d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240534d4:	4b55      	ldr	r3, [pc, #340]	; (2405362c <HAL_OSPI_MspInit+0x218>)
240534d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240534da:	f003 0301 	and.w	r3, r3, #1
240534de:	613b      	str	r3, [r7, #16]
240534e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240534e2:	4b52      	ldr	r3, [pc, #328]	; (2405362c <HAL_OSPI_MspInit+0x218>)
240534e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240534e8:	4a50      	ldr	r2, [pc, #320]	; (2405362c <HAL_OSPI_MspInit+0x218>)
240534ea:	f043 0302 	orr.w	r3, r3, #2
240534ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240534f2:	4b4e      	ldr	r3, [pc, #312]	; (2405362c <HAL_OSPI_MspInit+0x218>)
240534f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240534f8:	f003 0302 	and.w	r3, r3, #2
240534fc:	60fb      	str	r3, [r7, #12]
240534fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24053500:	4b4a      	ldr	r3, [pc, #296]	; (2405362c <HAL_OSPI_MspInit+0x218>)
24053502:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053506:	4a49      	ldr	r2, [pc, #292]	; (2405362c <HAL_OSPI_MspInit+0x218>)
24053508:	f043 0308 	orr.w	r3, r3, #8
2405350c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24053510:	4b46      	ldr	r3, [pc, #280]	; (2405362c <HAL_OSPI_MspInit+0x218>)
24053512:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053516:	f003 0308 	and.w	r3, r3, #8
2405351a:	60bb      	str	r3, [r7, #8]
2405351c:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    PD12     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
2405351e:	2304      	movs	r3, #4
24053520:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24053524:	2302      	movs	r3, #2
24053526:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405352a:	2300      	movs	r3, #0
2405352c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24053530:	2303      	movs	r3, #3
24053532:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
24053536:	2309      	movs	r3, #9
24053538:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2405353c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
24053540:	4619      	mov	r1, r3
24053542:	483b      	ldr	r0, [pc, #236]	; (24053630 <HAL_OSPI_MspInit+0x21c>)
24053544:	f005 fe14 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
24053548:	2302      	movs	r3, #2
2405354a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405354e:	2302      	movs	r3, #2
24053550:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053554:	2300      	movs	r3, #0
24053556:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2405355a:	2303      	movs	r3, #3
2405355c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
24053560:	2309      	movs	r3, #9
24053562:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24053566:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
2405356a:	4619      	mov	r1, r3
2405356c:	4831      	ldr	r0, [pc, #196]	; (24053634 <HAL_OSPI_MspInit+0x220>)
2405356e:	f005 fdff 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
24053572:	2302      	movs	r3, #2
24053574:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24053578:	2302      	movs	r3, #2
2405357a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405357e:	2300      	movs	r3, #0
24053580:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24053584:	2303      	movs	r3, #3
24053586:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
2405358a:	230b      	movs	r3, #11
2405358c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24053590:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
24053594:	4619      	mov	r1, r3
24053596:	4828      	ldr	r0, [pc, #160]	; (24053638 <HAL_OSPI_MspInit+0x224>)
24053598:	f005 fdea 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
2405359c:	2304      	movs	r3, #4
2405359e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240535a2:	2302      	movs	r3, #2
240535a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240535a8:	2300      	movs	r3, #0
240535aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240535ae:	2303      	movs	r3, #3
240535b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
240535b4:	2309      	movs	r3, #9
240535b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240535ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
240535be:	4619      	mov	r1, r3
240535c0:	481d      	ldr	r0, [pc, #116]	; (24053638 <HAL_OSPI_MspInit+0x224>)
240535c2:	f005 fdd5 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
240535c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
240535ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240535ce:	2302      	movs	r3, #2
240535d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240535d4:	2300      	movs	r3, #0
240535d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240535da:	2303      	movs	r3, #3
240535dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
240535e0:	230b      	movs	r3, #11
240535e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240535e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
240535ea:	4619      	mov	r1, r3
240535ec:	4810      	ldr	r0, [pc, #64]	; (24053630 <HAL_OSPI_MspInit+0x21c>)
240535ee:	f005 fdbf 	bl	24059170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
240535f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
240535f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240535fa:	2302      	movs	r3, #2
240535fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053600:	2300      	movs	r3, #0
24053602:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24053606:	2303      	movs	r3, #3
24053608:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
2405360c:	2309      	movs	r3, #9
2405360e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24053612:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
24053616:	4619      	mov	r1, r3
24053618:	4808      	ldr	r0, [pc, #32]	; (2405363c <HAL_OSPI_MspInit+0x228>)
2405361a:	f005 fda9 	bl	24059170 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
2405361e:	bf00      	nop
24053620:	37f8      	adds	r7, #248	; 0xf8
24053622:	46bd      	mov	sp, r7
24053624:	bd80      	pop	{r7, pc}
24053626:	bf00      	nop
24053628:	52005000 	.word	0x52005000
2405362c:	58024400 	.word	0x58024400
24053630:	58021000 	.word	0x58021000
24053634:	58020000 	.word	0x58020000
24053638:	58020400 	.word	0x58020400
2405363c:	58020c00 	.word	0x58020c00

24053640 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
24053640:	b580      	push	{r7, lr}
24053642:	b0b2      	sub	sp, #200	; 0xc8
24053644:	af00      	add	r7, sp, #0
24053646:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24053648:	f107 0308 	add.w	r3, r7, #8
2405364c:	22c0      	movs	r2, #192	; 0xc0
2405364e:	2100      	movs	r1, #0
24053650:	4618      	mov	r0, r3
24053652:	f00e fabf 	bl	24061bd4 <memset>
  if(hrtc->Instance==RTC)
24053656:	687b      	ldr	r3, [r7, #4]
24053658:	681b      	ldr	r3, [r3, #0]
2405365a:	4a10      	ldr	r2, [pc, #64]	; (2405369c <HAL_RTC_MspInit+0x5c>)
2405365c:	4293      	cmp	r3, r2
2405365e:	d119      	bne.n	24053694 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
24053660:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
24053664:	f04f 0300 	mov.w	r3, #0
24053668:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
2405366c:	f44f 7380 	mov.w	r3, #256	; 0x100
24053670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24053674:	f107 0308 	add.w	r3, r7, #8
24053678:	4618      	mov	r0, r3
2405367a:	f008 ff3f 	bl	2405c4fc <HAL_RCCEx_PeriphCLKConfig>
2405367e:	4603      	mov	r3, r0
24053680:	2b00      	cmp	r3, #0
24053682:	d001      	beq.n	24053688 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
24053684:	f7ff fc80 	bl	24052f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
24053688:	4b05      	ldr	r3, [pc, #20]	; (240536a0 <HAL_RTC_MspInit+0x60>)
2405368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405368c:	4a04      	ldr	r2, [pc, #16]	; (240536a0 <HAL_RTC_MspInit+0x60>)
2405368e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
24053692:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
24053694:	bf00      	nop
24053696:	37c8      	adds	r7, #200	; 0xc8
24053698:	46bd      	mov	sp, r7
2405369a:	bd80      	pop	{r7, pc}
2405369c:	58004000 	.word	0x58004000
240536a0:	58024400 	.word	0x58024400

240536a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
240536a4:	b580      	push	{r7, lr}
240536a6:	b0ba      	sub	sp, #232	; 0xe8
240536a8:	af00      	add	r7, sp, #0
240536aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240536ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
240536b0:	2200      	movs	r2, #0
240536b2:	601a      	str	r2, [r3, #0]
240536b4:	605a      	str	r2, [r3, #4]
240536b6:	609a      	str	r2, [r3, #8]
240536b8:	60da      	str	r2, [r3, #12]
240536ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240536bc:	f107 0310 	add.w	r3, r7, #16
240536c0:	22c0      	movs	r2, #192	; 0xc0
240536c2:	2100      	movs	r1, #0
240536c4:	4618      	mov	r0, r3
240536c6:	f00e fa85 	bl	24061bd4 <memset>
  if(hspi->Instance==SPI2)
240536ca:	687b      	ldr	r3, [r7, #4]
240536cc:	681b      	ldr	r3, [r3, #0]
240536ce:	4a27      	ldr	r2, [pc, #156]	; (2405376c <HAL_SPI_MspInit+0xc8>)
240536d0:	4293      	cmp	r3, r2
240536d2:	d146      	bne.n	24053762 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
240536d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240536d8:	f04f 0300 	mov.w	r3, #0
240536dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
240536e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
240536e4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240536e6:	f107 0310 	add.w	r3, r7, #16
240536ea:	4618      	mov	r0, r3
240536ec:	f008 ff06 	bl	2405c4fc <HAL_RCCEx_PeriphCLKConfig>
240536f0:	4603      	mov	r3, r0
240536f2:	2b00      	cmp	r3, #0
240536f4:	d001      	beq.n	240536fa <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
240536f6:	f7ff fc47 	bl	24052f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
240536fa:	4b1d      	ldr	r3, [pc, #116]	; (24053770 <HAL_SPI_MspInit+0xcc>)
240536fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
24053700:	4a1b      	ldr	r2, [pc, #108]	; (24053770 <HAL_SPI_MspInit+0xcc>)
24053702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24053706:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
2405370a:	4b19      	ldr	r3, [pc, #100]	; (24053770 <HAL_SPI_MspInit+0xcc>)
2405370c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
24053710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24053714:	60fb      	str	r3, [r7, #12]
24053716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
24053718:	4b15      	ldr	r3, [pc, #84]	; (24053770 <HAL_SPI_MspInit+0xcc>)
2405371a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405371e:	4a14      	ldr	r2, [pc, #80]	; (24053770 <HAL_SPI_MspInit+0xcc>)
24053720:	f043 0302 	orr.w	r3, r3, #2
24053724:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24053728:	4b11      	ldr	r3, [pc, #68]	; (24053770 <HAL_SPI_MspInit+0xcc>)
2405372a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405372e:	f003 0302 	and.w	r3, r3, #2
24053732:	60bb      	str	r3, [r7, #8]
24053734:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
24053736:	f44f 4320 	mov.w	r3, #40960	; 0xa000
2405373a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405373e:	2302      	movs	r3, #2
24053740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053744:	2300      	movs	r3, #0
24053746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2405374a:	2300      	movs	r3, #0
2405374c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
24053750:	2305      	movs	r3, #5
24053752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24053756:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
2405375a:	4619      	mov	r1, r3
2405375c:	4805      	ldr	r0, [pc, #20]	; (24053774 <HAL_SPI_MspInit+0xd0>)
2405375e:	f005 fd07 	bl	24059170 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
24053762:	bf00      	nop
24053764:	37e8      	adds	r7, #232	; 0xe8
24053766:	46bd      	mov	sp, r7
24053768:	bd80      	pop	{r7, pc}
2405376a:	bf00      	nop
2405376c:	40003800 	.word	0x40003800
24053770:	58024400 	.word	0x58024400
24053774:	58020400 	.word	0x58020400

24053778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
24053778:	b580      	push	{r7, lr}
2405377a:	b084      	sub	sp, #16
2405377c:	af00      	add	r7, sp, #0
2405377e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
24053780:	687b      	ldr	r3, [r7, #4]
24053782:	681b      	ldr	r3, [r3, #0]
24053784:	4a0e      	ldr	r2, [pc, #56]	; (240537c0 <HAL_TIM_Base_MspInit+0x48>)
24053786:	4293      	cmp	r3, r2
24053788:	d116      	bne.n	240537b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
2405378a:	4b0e      	ldr	r3, [pc, #56]	; (240537c4 <HAL_TIM_Base_MspInit+0x4c>)
2405378c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
24053790:	4a0c      	ldr	r2, [pc, #48]	; (240537c4 <HAL_TIM_Base_MspInit+0x4c>)
24053792:	f043 0301 	orr.w	r3, r3, #1
24053796:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
2405379a:	4b0a      	ldr	r3, [pc, #40]	; (240537c4 <HAL_TIM_Base_MspInit+0x4c>)
2405379c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
240537a0:	f003 0301 	and.w	r3, r3, #1
240537a4:	60fb      	str	r3, [r7, #12]
240537a6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
240537a8:	2200      	movs	r2, #0
240537aa:	2100      	movs	r1, #0
240537ac:	2019      	movs	r0, #25
240537ae:	f002 fb82 	bl	24055eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
240537b2:	2019      	movs	r0, #25
240537b4:	f002 fb99 	bl	24055eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
240537b8:	bf00      	nop
240537ba:	3710      	adds	r7, #16
240537bc:	46bd      	mov	sp, r7
240537be:	bd80      	pop	{r7, pc}
240537c0:	40010000 	.word	0x40010000
240537c4:	58024400 	.word	0x58024400

240537c8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
240537c8:	b580      	push	{r7, lr}
240537ca:	b0ba      	sub	sp, #232	; 0xe8
240537cc:	af00      	add	r7, sp, #0
240537ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240537d0:	f107 0310 	add.w	r3, r7, #16
240537d4:	22c0      	movs	r2, #192	; 0xc0
240537d6:	2100      	movs	r1, #0
240537d8:	4618      	mov	r0, r3
240537da:	f00e f9fb 	bl	24061bd4 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
240537de:	687b      	ldr	r3, [r7, #4]
240537e0:	681b      	ldr	r3, [r3, #0]
240537e2:	4a50      	ldr	r2, [pc, #320]	; (24053924 <HAL_SAI_MspInit+0x15c>)
240537e4:	4293      	cmp	r3, r2
240537e6:	f040 8098 	bne.w	2405391a <HAL_SAI_MspInit+0x152>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
240537ea:	f44f 7280 	mov.w	r2, #256	; 0x100
240537ee:	f04f 0300 	mov.w	r3, #0
240537f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
240537f6:	2319      	movs	r3, #25
240537f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
240537fa:	23c0      	movs	r3, #192	; 0xc0
240537fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
240537fe:	2305      	movs	r3, #5
24053800:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
24053802:	2302      	movs	r3, #2
24053804:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 5;
24053806:	2305      	movs	r3, #5
24053808:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
2405380a:	2340      	movs	r3, #64	; 0x40
2405380c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
2405380e:	2300      	movs	r3, #0
24053810:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
24053812:	2300      	movs	r3, #0
24053814:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
24053816:	2301      	movs	r3, #1
24053818:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2405381a:	f107 0310 	add.w	r3, r7, #16
2405381e:	4618      	mov	r0, r3
24053820:	f008 fe6c 	bl	2405c4fc <HAL_RCCEx_PeriphCLKConfig>
24053824:	4603      	mov	r3, r0
24053826:	2b00      	cmp	r3, #0
24053828:	d001      	beq.n	2405382e <HAL_SAI_MspInit+0x66>
    {
      Error_Handler();
2405382a:	f7ff fbad 	bl	24052f88 <Error_Handler>
    }

    if (SAI1_client == 0)
2405382e:	4b3e      	ldr	r3, [pc, #248]	; (24053928 <HAL_SAI_MspInit+0x160>)
24053830:	681b      	ldr	r3, [r3, #0]
24053832:	2b00      	cmp	r3, #0
24053834:	d116      	bne.n	24053864 <HAL_SAI_MspInit+0x9c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
24053836:	4b3d      	ldr	r3, [pc, #244]	; (2405392c <HAL_SAI_MspInit+0x164>)
24053838:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2405383c:	4a3b      	ldr	r2, [pc, #236]	; (2405392c <HAL_SAI_MspInit+0x164>)
2405383e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24053842:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
24053846:	4b39      	ldr	r3, [pc, #228]	; (2405392c <HAL_SAI_MspInit+0x164>)
24053848:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2405384c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24053850:	60fb      	str	r3, [r7, #12]
24053852:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
24053854:	2200      	movs	r2, #0
24053856:	2100      	movs	r1, #0
24053858:	2057      	movs	r0, #87	; 0x57
2405385a:	f002 fb2c 	bl	24055eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
2405385e:	2057      	movs	r0, #87	; 0x57
24053860:	f002 fb43 	bl	24055eea <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
24053864:	4b30      	ldr	r3, [pc, #192]	; (24053928 <HAL_SAI_MspInit+0x160>)
24053866:	681b      	ldr	r3, [r3, #0]
24053868:	3301      	adds	r3, #1
2405386a:	4a2f      	ldr	r2, [pc, #188]	; (24053928 <HAL_SAI_MspInit+0x160>)
2405386c:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
2405386e:	2370      	movs	r3, #112	; 0x70
24053870:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24053874:	2302      	movs	r3, #2
24053876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405387a:	2300      	movs	r3, #0
2405387c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053880:	2300      	movs	r3, #0
24053882:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24053886:	2306      	movs	r3, #6
24053888:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2405388c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
24053890:	4619      	mov	r1, r3
24053892:	4827      	ldr	r0, [pc, #156]	; (24053930 <HAL_SAI_MspInit+0x168>)
24053894:	f005 fc6c 	bl	24059170 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
24053898:	4b26      	ldr	r3, [pc, #152]	; (24053934 <HAL_SAI_MspInit+0x16c>)
2405389a:	4a27      	ldr	r2, [pc, #156]	; (24053938 <HAL_SAI_MspInit+0x170>)
2405389c:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
2405389e:	4b25      	ldr	r3, [pc, #148]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538a0:	2257      	movs	r2, #87	; 0x57
240538a2:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
240538a4:	4b23      	ldr	r3, [pc, #140]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538a6:	2240      	movs	r2, #64	; 0x40
240538a8:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
240538aa:	4b22      	ldr	r3, [pc, #136]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538ac:	2200      	movs	r2, #0
240538ae:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
240538b0:	4b20      	ldr	r3, [pc, #128]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
240538b6:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
240538b8:	4b1e      	ldr	r3, [pc, #120]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
240538be:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
240538c0:	4b1c      	ldr	r3, [pc, #112]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
240538c6:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
240538c8:	4b1a      	ldr	r3, [pc, #104]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538ca:	f44f 7280 	mov.w	r2, #256	; 0x100
240538ce:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
240538d0:	4b18      	ldr	r3, [pc, #96]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538d2:	2200      	movs	r2, #0
240538d4:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240538d6:	4b17      	ldr	r3, [pc, #92]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538d8:	2204      	movs	r2, #4
240538da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
240538dc:	4b15      	ldr	r3, [pc, #84]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538de:	2203      	movs	r2, #3
240538e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
240538e2:	4b14      	ldr	r3, [pc, #80]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538e4:	2200      	movs	r2, #0
240538e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
240538e8:	4b12      	ldr	r3, [pc, #72]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538ea:	2200      	movs	r2, #0
240538ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
240538ee:	4811      	ldr	r0, [pc, #68]	; (24053934 <HAL_SAI_MspInit+0x16c>)
240538f0:	f002 fcf0 	bl	240562d4 <HAL_DMA_Init>
240538f4:	4603      	mov	r3, r0
240538f6:	2b00      	cmp	r3, #0
240538f8:	d001      	beq.n	240538fe <HAL_SAI_MspInit+0x136>
    {
      Error_Handler();
240538fa:	f7ff fb45 	bl	24052f88 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
240538fe:	687b      	ldr	r3, [r7, #4]
24053900:	4a0c      	ldr	r2, [pc, #48]	; (24053934 <HAL_SAI_MspInit+0x16c>)
24053902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
24053906:	4a0b      	ldr	r2, [pc, #44]	; (24053934 <HAL_SAI_MspInit+0x16c>)
24053908:	687b      	ldr	r3, [r7, #4]
2405390a:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
2405390c:	687b      	ldr	r3, [r7, #4]
2405390e:	4a09      	ldr	r2, [pc, #36]	; (24053934 <HAL_SAI_MspInit+0x16c>)
24053910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
24053914:	4a07      	ldr	r2, [pc, #28]	; (24053934 <HAL_SAI_MspInit+0x16c>)
24053916:	687b      	ldr	r3, [r7, #4]
24053918:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
2405391a:	bf00      	nop
2405391c:	37e8      	adds	r7, #232	; 0xe8
2405391e:	46bd      	mov	sp, r7
24053920:	bd80      	pop	{r7, pc}
24053922:	bf00      	nop
24053924:	40015804 	.word	0x40015804
24053928:	20000614 	.word	0x20000614
2405392c:	58024400 	.word	0x58024400
24053930:	58021000 	.word	0x58021000
24053934:	200004c8 	.word	0x200004c8
24053938:	40020010 	.word	0x40020010

2405393c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2405393c:	b480      	push	{r7}
2405393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
24053940:	e7fe      	b.n	24053940 <NMI_Handler+0x4>

24053942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
24053942:	b480      	push	{r7}
24053944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24053946:	e7fe      	b.n	24053946 <HardFault_Handler+0x4>

24053948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
24053948:	b480      	push	{r7}
2405394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2405394c:	e7fe      	b.n	2405394c <MemManage_Handler+0x4>

2405394e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2405394e:	b480      	push	{r7}
24053950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24053952:	e7fe      	b.n	24053952 <BusFault_Handler+0x4>

24053954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
24053954:	b480      	push	{r7}
24053956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24053958:	e7fe      	b.n	24053958 <UsageFault_Handler+0x4>

2405395a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2405395a:	b480      	push	{r7}
2405395c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2405395e:	bf00      	nop
24053960:	46bd      	mov	sp, r7
24053962:	f85d 7b04 	ldr.w	r7, [sp], #4
24053966:	4770      	bx	lr

24053968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
24053968:	b480      	push	{r7}
2405396a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2405396c:	bf00      	nop
2405396e:	46bd      	mov	sp, r7
24053970:	f85d 7b04 	ldr.w	r7, [sp], #4
24053974:	4770      	bx	lr

24053976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
24053976:	b480      	push	{r7}
24053978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2405397a:	bf00      	nop
2405397c:	46bd      	mov	sp, r7
2405397e:	f85d 7b04 	ldr.w	r7, [sp], #4
24053982:	4770      	bx	lr

24053984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
24053984:	b580      	push	{r7, lr}
24053986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24053988:	f000 fa48 	bl	24053e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#if 1
	if (HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == 0) // is power button down ?
2405398c:	2101      	movs	r1, #1
2405398e:	480c      	ldr	r0, [pc, #48]	; (240539c0 <SysTick_Handler+0x3c>)
24053990:	f005 fd9e 	bl	240594d0 <HAL_GPIO_ReadPin>
24053994:	4603      	mov	r3, r0
24053996:	2b00      	cmp	r3, #0
24053998:	d10d      	bne.n	240539b6 <SysTick_Handler+0x32>
			{
		g_system_reset_ticks++;
2405399a:	4b0a      	ldr	r3, [pc, #40]	; (240539c4 <SysTick_Handler+0x40>)
2405399c:	681b      	ldr	r3, [r3, #0]
2405399e:	3301      	adds	r3, #1
240539a0:	4a08      	ldr	r2, [pc, #32]	; (240539c4 <SysTick_Handler+0x40>)
240539a2:	6013      	str	r3, [r2, #0]
		if (g_system_reset_ticks >= 5000) {
240539a4:	4b07      	ldr	r3, [pc, #28]	; (240539c4 <SysTick_Handler+0x40>)
240539a6:	681b      	ldr	r3, [r3, #0]
240539a8:	f241 3287 	movw	r2, #4999	; 0x1387
240539ac:	4293      	cmp	r3, r2
240539ae:	dd05      	ble.n	240539bc <SysTick_Handler+0x38>
			HAL_NVIC_SystemReset();
240539b0:	f002 faa9 	bl	24055f06 <HAL_NVIC_SystemReset>
	} else {
		g_system_reset_ticks = 0;
	}
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
240539b4:	e002      	b.n	240539bc <SysTick_Handler+0x38>
		g_system_reset_ticks = 0;
240539b6:	4b03      	ldr	r3, [pc, #12]	; (240539c4 <SysTick_Handler+0x40>)
240539b8:	2200      	movs	r2, #0
240539ba:	601a      	str	r2, [r3, #0]
}
240539bc:	bf00      	nop
240539be:	bd80      	pop	{r7, pc}
240539c0:	58020000 	.word	0x58020000
240539c4:	20000618 	.word	0x20000618

240539c8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
240539c8:	b580      	push	{r7, lr}
240539ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
240539cc:	2004      	movs	r0, #4
240539ce:	f005 fdb0 	bl	24059532 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
240539d2:	bf00      	nop
240539d4:	bd80      	pop	{r7, pc}
	...

240539d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
240539d8:	b580      	push	{r7, lr}
240539da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
240539dc:	4802      	ldr	r0, [pc, #8]	; (240539e8 <DMA1_Stream0_IRQHandler+0x10>)
240539de:	f003 ffd5 	bl	2405798c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
240539e2:	bf00      	nop
240539e4:	bd80      	pop	{r7, pc}
240539e6:	bf00      	nop
240539e8:	200004c8 	.word	0x200004c8

240539ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
240539ec:	b580      	push	{r7, lr}
240539ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
240539f0:	4802      	ldr	r0, [pc, #8]	; (240539fc <ADC_IRQHandler+0x10>)
240539f2:	f001 f901 	bl	24054bf8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
240539f6:	bf00      	nop
240539f8:	bd80      	pop	{r7, pc}
240539fa:	bf00      	nop
240539fc:	20000210 	.word	0x20000210

24053a00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
24053a00:	b580      	push	{r7, lr}
24053a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
24053a04:	2080      	movs	r0, #128	; 0x80
24053a06:	f005 fd94 	bl	24059532 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
24053a0a:	bf00      	nop
24053a0c:	bd80      	pop	{r7, pc}
	...

24053a10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
24053a10:	b580      	push	{r7, lr}
24053a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
24053a14:	4802      	ldr	r0, [pc, #8]	; (24053a20 <TIM1_UP_IRQHandler+0x10>)
24053a16:	f00d f907 	bl	24060c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
24053a1a:	bf00      	nop
24053a1c:	bd80      	pop	{r7, pc}
24053a1e:	bf00      	nop
24053a20:	200005c8 	.word	0x200005c8

24053a24 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
24053a24:	b580      	push	{r7, lr}
24053a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
24053a28:	4802      	ldr	r0, [pc, #8]	; (24053a34 <SAI1_IRQHandler+0x10>)
24053a2a:	f00c f819 	bl	2405fa60 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
24053a2e:	bf00      	nop
24053a30:	bd80      	pop	{r7, pc}
24053a32:	bf00      	nop
24053a34:	20000430 	.word	0x20000430

24053a38 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
24053a38:	b580      	push	{r7, lr}
24053a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
24053a3c:	4802      	ldr	r0, [pc, #8]	; (24053a48 <LTDC_IRQHandler+0x10>)
24053a3e:	f005 fe6d 	bl	2405971c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
24053a42:	bf00      	nop
24053a44:	bd80      	pop	{r7, pc}
24053a46:	bf00      	nop
24053a48:	20000304 	.word	0x20000304

24053a4c <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
24053a4c:	b580      	push	{r7, lr}
24053a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
24053a50:	4802      	ldr	r0, [pc, #8]	; (24053a5c <OCTOSPI1_IRQHandler+0x10>)
24053a52:	f006 fa3d 	bl	24059ed0 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
24053a56:	bf00      	nop
24053a58:	bd80      	pop	{r7, pc}
24053a5a:	bf00      	nop
24053a5c:	200003ac 	.word	0x200003ac

24053a60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
24053a60:	b480      	push	{r7}
24053a62:	af00      	add	r7, sp, #0
	return 1;
24053a64:	2301      	movs	r3, #1
}
24053a66:	4618      	mov	r0, r3
24053a68:	46bd      	mov	sp, r7
24053a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
24053a6e:	4770      	bx	lr

24053a70 <_kill>:

int _kill(int pid, int sig)
{
24053a70:	b580      	push	{r7, lr}
24053a72:	b082      	sub	sp, #8
24053a74:	af00      	add	r7, sp, #0
24053a76:	6078      	str	r0, [r7, #4]
24053a78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
24053a7a:	f00e f909 	bl	24061c90 <__errno>
24053a7e:	4603      	mov	r3, r0
24053a80:	2216      	movs	r2, #22
24053a82:	601a      	str	r2, [r3, #0]
	return -1;
24053a84:	f04f 33ff 	mov.w	r3, #4294967295
}
24053a88:	4618      	mov	r0, r3
24053a8a:	3708      	adds	r7, #8
24053a8c:	46bd      	mov	sp, r7
24053a8e:	bd80      	pop	{r7, pc}

24053a90 <_exit>:

void _exit (int status)
{
24053a90:	b580      	push	{r7, lr}
24053a92:	b082      	sub	sp, #8
24053a94:	af00      	add	r7, sp, #0
24053a96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
24053a98:	f04f 31ff 	mov.w	r1, #4294967295
24053a9c:	6878      	ldr	r0, [r7, #4]
24053a9e:	f7ff ffe7 	bl	24053a70 <_kill>
	while (1) {}		/* Make sure we hang here */
24053aa2:	e7fe      	b.n	24053aa2 <_exit+0x12>

24053aa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
24053aa4:	b580      	push	{r7, lr}
24053aa6:	b086      	sub	sp, #24
24053aa8:	af00      	add	r7, sp, #0
24053aaa:	60f8      	str	r0, [r7, #12]
24053aac:	60b9      	str	r1, [r7, #8]
24053aae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
24053ab0:	2300      	movs	r3, #0
24053ab2:	617b      	str	r3, [r7, #20]
24053ab4:	e00a      	b.n	24053acc <_read+0x28>
	{
		*ptr++ = __io_getchar();
24053ab6:	f3af 8000 	nop.w
24053aba:	4601      	mov	r1, r0
24053abc:	68bb      	ldr	r3, [r7, #8]
24053abe:	1c5a      	adds	r2, r3, #1
24053ac0:	60ba      	str	r2, [r7, #8]
24053ac2:	b2ca      	uxtb	r2, r1
24053ac4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
24053ac6:	697b      	ldr	r3, [r7, #20]
24053ac8:	3301      	adds	r3, #1
24053aca:	617b      	str	r3, [r7, #20]
24053acc:	697a      	ldr	r2, [r7, #20]
24053ace:	687b      	ldr	r3, [r7, #4]
24053ad0:	429a      	cmp	r2, r3
24053ad2:	dbf0      	blt.n	24053ab6 <_read+0x12>
	}

return len;
24053ad4:	687b      	ldr	r3, [r7, #4]
}
24053ad6:	4618      	mov	r0, r3
24053ad8:	3718      	adds	r7, #24
24053ada:	46bd      	mov	sp, r7
24053adc:	bd80      	pop	{r7, pc}

24053ade <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
24053ade:	b580      	push	{r7, lr}
24053ae0:	b086      	sub	sp, #24
24053ae2:	af00      	add	r7, sp, #0
24053ae4:	60f8      	str	r0, [r7, #12]
24053ae6:	60b9      	str	r1, [r7, #8]
24053ae8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
24053aea:	2300      	movs	r3, #0
24053aec:	617b      	str	r3, [r7, #20]
24053aee:	e009      	b.n	24053b04 <_write+0x26>
	{
		__io_putchar(*ptr++);
24053af0:	68bb      	ldr	r3, [r7, #8]
24053af2:	1c5a      	adds	r2, r3, #1
24053af4:	60ba      	str	r2, [r7, #8]
24053af6:	781b      	ldrb	r3, [r3, #0]
24053af8:	4618      	mov	r0, r3
24053afa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
24053afe:	697b      	ldr	r3, [r7, #20]
24053b00:	3301      	adds	r3, #1
24053b02:	617b      	str	r3, [r7, #20]
24053b04:	697a      	ldr	r2, [r7, #20]
24053b06:	687b      	ldr	r3, [r7, #4]
24053b08:	429a      	cmp	r2, r3
24053b0a:	dbf1      	blt.n	24053af0 <_write+0x12>
	}
	return len;
24053b0c:	687b      	ldr	r3, [r7, #4]
}
24053b0e:	4618      	mov	r0, r3
24053b10:	3718      	adds	r7, #24
24053b12:	46bd      	mov	sp, r7
24053b14:	bd80      	pop	{r7, pc}

24053b16 <_close>:

int _close(int file)
{
24053b16:	b480      	push	{r7}
24053b18:	b083      	sub	sp, #12
24053b1a:	af00      	add	r7, sp, #0
24053b1c:	6078      	str	r0, [r7, #4]
	return -1;
24053b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
24053b22:	4618      	mov	r0, r3
24053b24:	370c      	adds	r7, #12
24053b26:	46bd      	mov	sp, r7
24053b28:	f85d 7b04 	ldr.w	r7, [sp], #4
24053b2c:	4770      	bx	lr

24053b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
24053b2e:	b480      	push	{r7}
24053b30:	b083      	sub	sp, #12
24053b32:	af00      	add	r7, sp, #0
24053b34:	6078      	str	r0, [r7, #4]
24053b36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
24053b38:	683b      	ldr	r3, [r7, #0]
24053b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
24053b3e:	605a      	str	r2, [r3, #4]
	return 0;
24053b40:	2300      	movs	r3, #0
}
24053b42:	4618      	mov	r0, r3
24053b44:	370c      	adds	r7, #12
24053b46:	46bd      	mov	sp, r7
24053b48:	f85d 7b04 	ldr.w	r7, [sp], #4
24053b4c:	4770      	bx	lr

24053b4e <_isatty>:

int _isatty(int file)
{
24053b4e:	b480      	push	{r7}
24053b50:	b083      	sub	sp, #12
24053b52:	af00      	add	r7, sp, #0
24053b54:	6078      	str	r0, [r7, #4]
	return 1;
24053b56:	2301      	movs	r3, #1
}
24053b58:	4618      	mov	r0, r3
24053b5a:	370c      	adds	r7, #12
24053b5c:	46bd      	mov	sp, r7
24053b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
24053b62:	4770      	bx	lr

24053b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
24053b64:	b480      	push	{r7}
24053b66:	b085      	sub	sp, #20
24053b68:	af00      	add	r7, sp, #0
24053b6a:	60f8      	str	r0, [r7, #12]
24053b6c:	60b9      	str	r1, [r7, #8]
24053b6e:	607a      	str	r2, [r7, #4]
	return 0;
24053b70:	2300      	movs	r3, #0
}
24053b72:	4618      	mov	r0, r3
24053b74:	3714      	adds	r7, #20
24053b76:	46bd      	mov	sp, r7
24053b78:	f85d 7b04 	ldr.w	r7, [sp], #4
24053b7c:	4770      	bx	lr
	...

24053b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
24053b80:	b580      	push	{r7, lr}
24053b82:	b086      	sub	sp, #24
24053b84:	af00      	add	r7, sp, #0
24053b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
24053b88:	4a14      	ldr	r2, [pc, #80]	; (24053bdc <_sbrk+0x5c>)
24053b8a:	4b15      	ldr	r3, [pc, #84]	; (24053be0 <_sbrk+0x60>)
24053b8c:	1ad3      	subs	r3, r2, r3
24053b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
24053b90:	697b      	ldr	r3, [r7, #20]
24053b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
24053b94:	4b13      	ldr	r3, [pc, #76]	; (24053be4 <_sbrk+0x64>)
24053b96:	681b      	ldr	r3, [r3, #0]
24053b98:	2b00      	cmp	r3, #0
24053b9a:	d102      	bne.n	24053ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
24053b9c:	4b11      	ldr	r3, [pc, #68]	; (24053be4 <_sbrk+0x64>)
24053b9e:	4a12      	ldr	r2, [pc, #72]	; (24053be8 <_sbrk+0x68>)
24053ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
24053ba2:	4b10      	ldr	r3, [pc, #64]	; (24053be4 <_sbrk+0x64>)
24053ba4:	681a      	ldr	r2, [r3, #0]
24053ba6:	687b      	ldr	r3, [r7, #4]
24053ba8:	4413      	add	r3, r2
24053baa:	693a      	ldr	r2, [r7, #16]
24053bac:	429a      	cmp	r2, r3
24053bae:	d207      	bcs.n	24053bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
24053bb0:	f00e f86e 	bl	24061c90 <__errno>
24053bb4:	4603      	mov	r3, r0
24053bb6:	220c      	movs	r2, #12
24053bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
24053bba:	f04f 33ff 	mov.w	r3, #4294967295
24053bbe:	e009      	b.n	24053bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
24053bc0:	4b08      	ldr	r3, [pc, #32]	; (24053be4 <_sbrk+0x64>)
24053bc2:	681b      	ldr	r3, [r3, #0]
24053bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
24053bc6:	4b07      	ldr	r3, [pc, #28]	; (24053be4 <_sbrk+0x64>)
24053bc8:	681a      	ldr	r2, [r3, #0]
24053bca:	687b      	ldr	r3, [r7, #4]
24053bcc:	4413      	add	r3, r2
24053bce:	4a05      	ldr	r2, [pc, #20]	; (24053be4 <_sbrk+0x64>)
24053bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
24053bd2:	68fb      	ldr	r3, [r7, #12]
}
24053bd4:	4618      	mov	r0, r3
24053bd6:	3718      	adds	r7, #24
24053bd8:	46bd      	mov	sp, r7
24053bda:	bd80      	pop	{r7, pc}
24053bdc:	20020000 	.word	0x20020000
24053be0:	00005000 	.word	0x00005000
24053be4:	2000061c 	.word	0x2000061c
24053be8:	20000770 	.word	0x20000770

24053bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
24053bec:	b480      	push	{r7}
24053bee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24053bf0:	4b34      	ldr	r3, [pc, #208]	; (24053cc4 <SystemInit+0xd8>)
24053bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24053bf6:	4a33      	ldr	r2, [pc, #204]	; (24053cc4 <SystemInit+0xd8>)
24053bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24053bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24053c00:	4b31      	ldr	r3, [pc, #196]	; (24053cc8 <SystemInit+0xdc>)
24053c02:	681b      	ldr	r3, [r3, #0]
24053c04:	f003 030f 	and.w	r3, r3, #15
24053c08:	2b02      	cmp	r3, #2
24053c0a:	d807      	bhi.n	24053c1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24053c0c:	4b2e      	ldr	r3, [pc, #184]	; (24053cc8 <SystemInit+0xdc>)
24053c0e:	681b      	ldr	r3, [r3, #0]
24053c10:	f023 030f 	bic.w	r3, r3, #15
24053c14:	4a2c      	ldr	r2, [pc, #176]	; (24053cc8 <SystemInit+0xdc>)
24053c16:	f043 0303 	orr.w	r3, r3, #3
24053c1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24053c1c:	4b2b      	ldr	r3, [pc, #172]	; (24053ccc <SystemInit+0xe0>)
24053c1e:	681b      	ldr	r3, [r3, #0]
24053c20:	4a2a      	ldr	r2, [pc, #168]	; (24053ccc <SystemInit+0xe0>)
24053c22:	f043 0301 	orr.w	r3, r3, #1
24053c26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24053c28:	4b28      	ldr	r3, [pc, #160]	; (24053ccc <SystemInit+0xe0>)
24053c2a:	2200      	movs	r2, #0
24053c2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24053c2e:	4b27      	ldr	r3, [pc, #156]	; (24053ccc <SystemInit+0xe0>)
24053c30:	681a      	ldr	r2, [r3, #0]
24053c32:	4926      	ldr	r1, [pc, #152]	; (24053ccc <SystemInit+0xe0>)
24053c34:	4b26      	ldr	r3, [pc, #152]	; (24053cd0 <SystemInit+0xe4>)
24053c36:	4013      	ands	r3, r2
24053c38:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24053c3a:	4b23      	ldr	r3, [pc, #140]	; (24053cc8 <SystemInit+0xdc>)
24053c3c:	681b      	ldr	r3, [r3, #0]
24053c3e:	f003 030c 	and.w	r3, r3, #12
24053c42:	2b00      	cmp	r3, #0
24053c44:	d007      	beq.n	24053c56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24053c46:	4b20      	ldr	r3, [pc, #128]	; (24053cc8 <SystemInit+0xdc>)
24053c48:	681b      	ldr	r3, [r3, #0]
24053c4a:	f023 030f 	bic.w	r3, r3, #15
24053c4e:	4a1e      	ldr	r2, [pc, #120]	; (24053cc8 <SystemInit+0xdc>)
24053c50:	f043 0303 	orr.w	r3, r3, #3
24053c54:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
24053c56:	4b1d      	ldr	r3, [pc, #116]	; (24053ccc <SystemInit+0xe0>)
24053c58:	2200      	movs	r2, #0
24053c5a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
24053c5c:	4b1b      	ldr	r3, [pc, #108]	; (24053ccc <SystemInit+0xe0>)
24053c5e:	2200      	movs	r2, #0
24053c60:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
24053c62:	4b1a      	ldr	r3, [pc, #104]	; (24053ccc <SystemInit+0xe0>)
24053c64:	2200      	movs	r2, #0
24053c66:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
24053c68:	4b18      	ldr	r3, [pc, #96]	; (24053ccc <SystemInit+0xe0>)
24053c6a:	4a1a      	ldr	r2, [pc, #104]	; (24053cd4 <SystemInit+0xe8>)
24053c6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
24053c6e:	4b17      	ldr	r3, [pc, #92]	; (24053ccc <SystemInit+0xe0>)
24053c70:	4a19      	ldr	r2, [pc, #100]	; (24053cd8 <SystemInit+0xec>)
24053c72:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24053c74:	4b15      	ldr	r3, [pc, #84]	; (24053ccc <SystemInit+0xe0>)
24053c76:	4a19      	ldr	r2, [pc, #100]	; (24053cdc <SystemInit+0xf0>)
24053c78:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24053c7a:	4b14      	ldr	r3, [pc, #80]	; (24053ccc <SystemInit+0xe0>)
24053c7c:	2200      	movs	r2, #0
24053c7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24053c80:	4b12      	ldr	r3, [pc, #72]	; (24053ccc <SystemInit+0xe0>)
24053c82:	4a16      	ldr	r2, [pc, #88]	; (24053cdc <SystemInit+0xf0>)
24053c84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24053c86:	4b11      	ldr	r3, [pc, #68]	; (24053ccc <SystemInit+0xe0>)
24053c88:	2200      	movs	r2, #0
24053c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24053c8c:	4b0f      	ldr	r3, [pc, #60]	; (24053ccc <SystemInit+0xe0>)
24053c8e:	4a13      	ldr	r2, [pc, #76]	; (24053cdc <SystemInit+0xf0>)
24053c90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24053c92:	4b0e      	ldr	r3, [pc, #56]	; (24053ccc <SystemInit+0xe0>)
24053c94:	2200      	movs	r2, #0
24053c96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24053c98:	4b0c      	ldr	r3, [pc, #48]	; (24053ccc <SystemInit+0xe0>)
24053c9a:	681b      	ldr	r3, [r3, #0]
24053c9c:	4a0b      	ldr	r2, [pc, #44]	; (24053ccc <SystemInit+0xe0>)
24053c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24053ca2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
24053ca4:	4b09      	ldr	r3, [pc, #36]	; (24053ccc <SystemInit+0xe0>)
24053ca6:	2200      	movs	r2, #0
24053ca8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24053caa:	4b0d      	ldr	r3, [pc, #52]	; (24053ce0 <SystemInit+0xf4>)
24053cac:	f243 02d2 	movw	r2, #12498	; 0x30d2
24053cb0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
24053cb2:	4b04      	ldr	r3, [pc, #16]	; (24053cc4 <SystemInit+0xd8>)
24053cb4:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
24053cb8:	609a      	str	r2, [r3, #8]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
24053cba:	bf00      	nop
24053cbc:	46bd      	mov	sp, r7
24053cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
24053cc2:	4770      	bx	lr
24053cc4:	e000ed00 	.word	0xe000ed00
24053cc8:	52002000 	.word	0x52002000
24053ccc:	58024400 	.word	0x58024400
24053cd0:	eaf6ed7f 	.word	0xeaf6ed7f
24053cd4:	02020200 	.word	0x02020200
24053cd8:	01ff0000 	.word	0x01ff0000
24053cdc:	01010280 	.word	0x01010280
24053ce0:	52004000 	.word	0x52004000

24053ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
24053ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 24053d1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
24053ce8:	f7ff ff80 	bl	24053bec <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
24053cec:	480c      	ldr	r0, [pc, #48]	; (24053d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
24053cee:	490d      	ldr	r1, [pc, #52]	; (24053d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
24053cf0:	4a0d      	ldr	r2, [pc, #52]	; (24053d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
24053cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
24053cf4:	e002      	b.n	24053cfc <LoopCopyDataInit>

24053cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
24053cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
24053cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
24053cfa:	3304      	adds	r3, #4

24053cfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
24053cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
24053cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
24053d00:	d3f9      	bcc.n	24053cf6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
24053d02:	4a0a      	ldr	r2, [pc, #40]	; (24053d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
24053d04:	4c0a      	ldr	r4, [pc, #40]	; (24053d30 <LoopFillZerobss+0x22>)
  movs r3, #0
24053d06:	2300      	movs	r3, #0
  b LoopFillZerobss
24053d08:	e001      	b.n	24053d0e <LoopFillZerobss>

24053d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
24053d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
24053d0c:	3204      	adds	r2, #4

24053d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
24053d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
24053d10:	d3fb      	bcc.n	24053d0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
24053d12:	f00d ffc3 	bl	24061c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
24053d16:	f7fe fb99 	bl	2405244c <main>
  bx  lr
24053d1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
24053d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
24053d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
24053d24:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
24053d28:	24064370 	.word	0x24064370
  ldr r2, =_sbss
24053d2c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
24053d30:	20000770 	.word	0x20000770

24053d34 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
24053d34:	e7fe      	b.n	24053d34 <BDMA1_IRQHandler>
	...

24053d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24053d38:	b580      	push	{r7, lr}
24053d3a:	b082      	sub	sp, #8
24053d3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24053d3e:	2003      	movs	r0, #3
24053d40:	f002 f8ae 	bl	24055ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
24053d44:	f008 fa1a 	bl	2405c17c <HAL_RCC_GetSysClockFreq>
24053d48:	4602      	mov	r2, r0
24053d4a:	4b15      	ldr	r3, [pc, #84]	; (24053da0 <HAL_Init+0x68>)
24053d4c:	699b      	ldr	r3, [r3, #24]
24053d4e:	0a1b      	lsrs	r3, r3, #8
24053d50:	f003 030f 	and.w	r3, r3, #15
24053d54:	4913      	ldr	r1, [pc, #76]	; (24053da4 <HAL_Init+0x6c>)
24053d56:	5ccb      	ldrb	r3, [r1, r3]
24053d58:	f003 031f 	and.w	r3, r3, #31
24053d5c:	fa22 f303 	lsr.w	r3, r2, r3
24053d60:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
24053d62:	4b0f      	ldr	r3, [pc, #60]	; (24053da0 <HAL_Init+0x68>)
24053d64:	699b      	ldr	r3, [r3, #24]
24053d66:	f003 030f 	and.w	r3, r3, #15
24053d6a:	4a0e      	ldr	r2, [pc, #56]	; (24053da4 <HAL_Init+0x6c>)
24053d6c:	5cd3      	ldrb	r3, [r2, r3]
24053d6e:	f003 031f 	and.w	r3, r3, #31
24053d72:	687a      	ldr	r2, [r7, #4]
24053d74:	fa22 f303 	lsr.w	r3, r2, r3
24053d78:	4a0b      	ldr	r2, [pc, #44]	; (24053da8 <HAL_Init+0x70>)
24053d7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24053d7c:	4a0b      	ldr	r2, [pc, #44]	; (24053dac <HAL_Init+0x74>)
24053d7e:	687b      	ldr	r3, [r7, #4]
24053d80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24053d82:	2000      	movs	r0, #0
24053d84:	f000 f814 	bl	24053db0 <HAL_InitTick>
24053d88:	4603      	mov	r3, r0
24053d8a:	2b00      	cmp	r3, #0
24053d8c:	d001      	beq.n	24053d92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
24053d8e:	2301      	movs	r3, #1
24053d90:	e002      	b.n	24053d98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
24053d92:	f7ff f8ff 	bl	24052f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
24053d96:	2300      	movs	r3, #0
}
24053d98:	4618      	mov	r0, r3
24053d9a:	3708      	adds	r7, #8
24053d9c:	46bd      	mov	sp, r7
24053d9e:	bd80      	pop	{r7, pc}
24053da0:	58024400 	.word	0x58024400
24053da4:	24064270 	.word	0x24064270
24053da8:	20000048 	.word	0x20000048
24053dac:	20000044 	.word	0x20000044

24053db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
24053db0:	b580      	push	{r7, lr}
24053db2:	b082      	sub	sp, #8
24053db4:	af00      	add	r7, sp, #0
24053db6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24053db8:	4b15      	ldr	r3, [pc, #84]	; (24053e10 <HAL_InitTick+0x60>)
24053dba:	781b      	ldrb	r3, [r3, #0]
24053dbc:	2b00      	cmp	r3, #0
24053dbe:	d101      	bne.n	24053dc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
24053dc0:	2301      	movs	r3, #1
24053dc2:	e021      	b.n	24053e08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24053dc4:	4b13      	ldr	r3, [pc, #76]	; (24053e14 <HAL_InitTick+0x64>)
24053dc6:	681a      	ldr	r2, [r3, #0]
24053dc8:	4b11      	ldr	r3, [pc, #68]	; (24053e10 <HAL_InitTick+0x60>)
24053dca:	781b      	ldrb	r3, [r3, #0]
24053dcc:	4619      	mov	r1, r3
24053dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
24053dd2:	fbb3 f3f1 	udiv	r3, r3, r1
24053dd6:	fbb2 f3f3 	udiv	r3, r2, r3
24053dda:	4618      	mov	r0, r3
24053ddc:	f002 f897 	bl	24055f0e <HAL_SYSTICK_Config>
24053de0:	4603      	mov	r3, r0
24053de2:	2b00      	cmp	r3, #0
24053de4:	d001      	beq.n	24053dea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
24053de6:	2301      	movs	r3, #1
24053de8:	e00e      	b.n	24053e08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24053dea:	687b      	ldr	r3, [r7, #4]
24053dec:	2b0f      	cmp	r3, #15
24053dee:	d80a      	bhi.n	24053e06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24053df0:	2200      	movs	r2, #0
24053df2:	6879      	ldr	r1, [r7, #4]
24053df4:	f04f 30ff 	mov.w	r0, #4294967295
24053df8:	f002 f85d 	bl	24055eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24053dfc:	4a06      	ldr	r2, [pc, #24]	; (24053e18 <HAL_InitTick+0x68>)
24053dfe:	687b      	ldr	r3, [r7, #4]
24053e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
24053e02:	2300      	movs	r3, #0
24053e04:	e000      	b.n	24053e08 <HAL_InitTick+0x58>
    return HAL_ERROR;
24053e06:	2301      	movs	r3, #1
}
24053e08:	4618      	mov	r0, r3
24053e0a:	3708      	adds	r7, #8
24053e0c:	46bd      	mov	sp, r7
24053e0e:	bd80      	pop	{r7, pc}
24053e10:	20000050 	.word	0x20000050
24053e14:	20000044 	.word	0x20000044
24053e18:	2000004c 	.word	0x2000004c

24053e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
24053e1c:	b480      	push	{r7}
24053e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
24053e20:	4b06      	ldr	r3, [pc, #24]	; (24053e3c <HAL_IncTick+0x20>)
24053e22:	781b      	ldrb	r3, [r3, #0]
24053e24:	461a      	mov	r2, r3
24053e26:	4b06      	ldr	r3, [pc, #24]	; (24053e40 <HAL_IncTick+0x24>)
24053e28:	681b      	ldr	r3, [r3, #0]
24053e2a:	4413      	add	r3, r2
24053e2c:	4a04      	ldr	r2, [pc, #16]	; (24053e40 <HAL_IncTick+0x24>)
24053e2e:	6013      	str	r3, [r2, #0]
}
24053e30:	bf00      	nop
24053e32:	46bd      	mov	sp, r7
24053e34:	f85d 7b04 	ldr.w	r7, [sp], #4
24053e38:	4770      	bx	lr
24053e3a:	bf00      	nop
24053e3c:	20000050 	.word	0x20000050
24053e40:	20000620 	.word	0x20000620

24053e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
24053e44:	b480      	push	{r7}
24053e46:	af00      	add	r7, sp, #0
  return uwTick;
24053e48:	4b03      	ldr	r3, [pc, #12]	; (24053e58 <HAL_GetTick+0x14>)
24053e4a:	681b      	ldr	r3, [r3, #0]
}
24053e4c:	4618      	mov	r0, r3
24053e4e:	46bd      	mov	sp, r7
24053e50:	f85d 7b04 	ldr.w	r7, [sp], #4
24053e54:	4770      	bx	lr
24053e56:	bf00      	nop
24053e58:	20000620 	.word	0x20000620

24053e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24053e5c:	b580      	push	{r7, lr}
24053e5e:	b084      	sub	sp, #16
24053e60:	af00      	add	r7, sp, #0
24053e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
24053e64:	f7ff ffee 	bl	24053e44 <HAL_GetTick>
24053e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
24053e6a:	687b      	ldr	r3, [r7, #4]
24053e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24053e6e:	68fb      	ldr	r3, [r7, #12]
24053e70:	f1b3 3fff 	cmp.w	r3, #4294967295
24053e74:	d005      	beq.n	24053e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
24053e76:	4b0a      	ldr	r3, [pc, #40]	; (24053ea0 <HAL_Delay+0x44>)
24053e78:	781b      	ldrb	r3, [r3, #0]
24053e7a:	461a      	mov	r2, r3
24053e7c:	68fb      	ldr	r3, [r7, #12]
24053e7e:	4413      	add	r3, r2
24053e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
24053e82:	bf00      	nop
24053e84:	f7ff ffde 	bl	24053e44 <HAL_GetTick>
24053e88:	4602      	mov	r2, r0
24053e8a:	68bb      	ldr	r3, [r7, #8]
24053e8c:	1ad3      	subs	r3, r2, r3
24053e8e:	68fa      	ldr	r2, [r7, #12]
24053e90:	429a      	cmp	r2, r3
24053e92:	d8f7      	bhi.n	24053e84 <HAL_Delay+0x28>
  {
  }
}
24053e94:	bf00      	nop
24053e96:	bf00      	nop
24053e98:	3710      	adds	r7, #16
24053e9a:	46bd      	mov	sp, r7
24053e9c:	bd80      	pop	{r7, pc}
24053e9e:	bf00      	nop
24053ea0:	20000050 	.word	0x20000050

24053ea4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
24053ea4:	b480      	push	{r7}
24053ea6:	b083      	sub	sp, #12
24053ea8:	af00      	add	r7, sp, #0
24053eaa:	6078      	str	r0, [r7, #4]
24053eac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
24053eae:	687b      	ldr	r3, [r7, #4]
24053eb0:	689b      	ldr	r3, [r3, #8]
24053eb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
24053eb6:	683b      	ldr	r3, [r7, #0]
24053eb8:	431a      	orrs	r2, r3
24053eba:	687b      	ldr	r3, [r7, #4]
24053ebc:	609a      	str	r2, [r3, #8]
}
24053ebe:	bf00      	nop
24053ec0:	370c      	adds	r7, #12
24053ec2:	46bd      	mov	sp, r7
24053ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
24053ec8:	4770      	bx	lr

24053eca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
24053eca:	b480      	push	{r7}
24053ecc:	b083      	sub	sp, #12
24053ece:	af00      	add	r7, sp, #0
24053ed0:	6078      	str	r0, [r7, #4]
24053ed2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
24053ed4:	687b      	ldr	r3, [r7, #4]
24053ed6:	689b      	ldr	r3, [r3, #8]
24053ed8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
24053edc:	683b      	ldr	r3, [r7, #0]
24053ede:	431a      	orrs	r2, r3
24053ee0:	687b      	ldr	r3, [r7, #4]
24053ee2:	609a      	str	r2, [r3, #8]
}
24053ee4:	bf00      	nop
24053ee6:	370c      	adds	r7, #12
24053ee8:	46bd      	mov	sp, r7
24053eea:	f85d 7b04 	ldr.w	r7, [sp], #4
24053eee:	4770      	bx	lr

24053ef0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
24053ef0:	b480      	push	{r7}
24053ef2:	b083      	sub	sp, #12
24053ef4:	af00      	add	r7, sp, #0
24053ef6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
24053ef8:	687b      	ldr	r3, [r7, #4]
24053efa:	689b      	ldr	r3, [r3, #8]
24053efc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
24053f00:	4618      	mov	r0, r3
24053f02:	370c      	adds	r7, #12
24053f04:	46bd      	mov	sp, r7
24053f06:	f85d 7b04 	ldr.w	r7, [sp], #4
24053f0a:	4770      	bx	lr

24053f0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
24053f0c:	b480      	push	{r7}
24053f0e:	b087      	sub	sp, #28
24053f10:	af00      	add	r7, sp, #0
24053f12:	60f8      	str	r0, [r7, #12]
24053f14:	60b9      	str	r1, [r7, #8]
24053f16:	607a      	str	r2, [r7, #4]
24053f18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
24053f1a:	68fb      	ldr	r3, [r7, #12]
24053f1c:	3360      	adds	r3, #96	; 0x60
24053f1e:	461a      	mov	r2, r3
24053f20:	68bb      	ldr	r3, [r7, #8]
24053f22:	009b      	lsls	r3, r3, #2
24053f24:	4413      	add	r3, r2
24053f26:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
24053f28:	697b      	ldr	r3, [r7, #20]
24053f2a:	681b      	ldr	r3, [r3, #0]
24053f2c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
24053f30:	687b      	ldr	r3, [r7, #4]
24053f32:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
24053f36:	683b      	ldr	r3, [r7, #0]
24053f38:	430b      	orrs	r3, r1
24053f3a:	431a      	orrs	r2, r3
24053f3c:	697b      	ldr	r3, [r7, #20]
24053f3e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
24053f40:	bf00      	nop
24053f42:	371c      	adds	r7, #28
24053f44:	46bd      	mov	sp, r7
24053f46:	f85d 7b04 	ldr.w	r7, [sp], #4
24053f4a:	4770      	bx	lr

24053f4c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
24053f4c:	b480      	push	{r7}
24053f4e:	b085      	sub	sp, #20
24053f50:	af00      	add	r7, sp, #0
24053f52:	60f8      	str	r0, [r7, #12]
24053f54:	60b9      	str	r1, [r7, #8]
24053f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
24053f58:	68fb      	ldr	r3, [r7, #12]
24053f5a:	691b      	ldr	r3, [r3, #16]
24053f5c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
24053f60:	68bb      	ldr	r3, [r7, #8]
24053f62:	f003 031f 	and.w	r3, r3, #31
24053f66:	6879      	ldr	r1, [r7, #4]
24053f68:	fa01 f303 	lsl.w	r3, r1, r3
24053f6c:	431a      	orrs	r2, r3
24053f6e:	68fb      	ldr	r3, [r7, #12]
24053f70:	611a      	str	r2, [r3, #16]
}
24053f72:	bf00      	nop
24053f74:	3714      	adds	r7, #20
24053f76:	46bd      	mov	sp, r7
24053f78:	f85d 7b04 	ldr.w	r7, [sp], #4
24053f7c:	4770      	bx	lr

24053f7e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
24053f7e:	b480      	push	{r7}
24053f80:	b087      	sub	sp, #28
24053f82:	af00      	add	r7, sp, #0
24053f84:	60f8      	str	r0, [r7, #12]
24053f86:	60b9      	str	r1, [r7, #8]
24053f88:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
24053f8a:	68fb      	ldr	r3, [r7, #12]
24053f8c:	3360      	adds	r3, #96	; 0x60
24053f8e:	461a      	mov	r2, r3
24053f90:	68bb      	ldr	r3, [r7, #8]
24053f92:	009b      	lsls	r3, r3, #2
24053f94:	4413      	add	r3, r2
24053f96:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
24053f98:	697b      	ldr	r3, [r7, #20]
24053f9a:	681b      	ldr	r3, [r3, #0]
24053f9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24053fa0:	687b      	ldr	r3, [r7, #4]
24053fa2:	431a      	orrs	r2, r3
24053fa4:	697b      	ldr	r3, [r7, #20]
24053fa6:	601a      	str	r2, [r3, #0]
  }
}
24053fa8:	bf00      	nop
24053faa:	371c      	adds	r7, #28
24053fac:	46bd      	mov	sp, r7
24053fae:	f85d 7b04 	ldr.w	r7, [sp], #4
24053fb2:	4770      	bx	lr

24053fb4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
24053fb4:	b480      	push	{r7}
24053fb6:	b083      	sub	sp, #12
24053fb8:	af00      	add	r7, sp, #0
24053fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
24053fbc:	687b      	ldr	r3, [r7, #4]
24053fbe:	68db      	ldr	r3, [r3, #12]
24053fc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
24053fc4:	2b00      	cmp	r3, #0
24053fc6:	d101      	bne.n	24053fcc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
24053fc8:	2301      	movs	r3, #1
24053fca:	e000      	b.n	24053fce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
24053fcc:	2300      	movs	r3, #0
}
24053fce:	4618      	mov	r0, r3
24053fd0:	370c      	adds	r7, #12
24053fd2:	46bd      	mov	sp, r7
24053fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
24053fd8:	4770      	bx	lr

24053fda <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
24053fda:	b480      	push	{r7}
24053fdc:	b087      	sub	sp, #28
24053fde:	af00      	add	r7, sp, #0
24053fe0:	60f8      	str	r0, [r7, #12]
24053fe2:	60b9      	str	r1, [r7, #8]
24053fe4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
24053fe6:	68fb      	ldr	r3, [r7, #12]
24053fe8:	3330      	adds	r3, #48	; 0x30
24053fea:	461a      	mov	r2, r3
24053fec:	68bb      	ldr	r3, [r7, #8]
24053fee:	0a1b      	lsrs	r3, r3, #8
24053ff0:	009b      	lsls	r3, r3, #2
24053ff2:	f003 030c 	and.w	r3, r3, #12
24053ff6:	4413      	add	r3, r2
24053ff8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
24053ffa:	697b      	ldr	r3, [r7, #20]
24053ffc:	681a      	ldr	r2, [r3, #0]
24053ffe:	68bb      	ldr	r3, [r7, #8]
24054000:	f003 031f 	and.w	r3, r3, #31
24054004:	211f      	movs	r1, #31
24054006:	fa01 f303 	lsl.w	r3, r1, r3
2405400a:	43db      	mvns	r3, r3
2405400c:	401a      	ands	r2, r3
2405400e:	687b      	ldr	r3, [r7, #4]
24054010:	0e9b      	lsrs	r3, r3, #26
24054012:	f003 011f 	and.w	r1, r3, #31
24054016:	68bb      	ldr	r3, [r7, #8]
24054018:	f003 031f 	and.w	r3, r3, #31
2405401c:	fa01 f303 	lsl.w	r3, r1, r3
24054020:	431a      	orrs	r2, r3
24054022:	697b      	ldr	r3, [r7, #20]
24054024:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
24054026:	bf00      	nop
24054028:	371c      	adds	r7, #28
2405402a:	46bd      	mov	sp, r7
2405402c:	f85d 7b04 	ldr.w	r7, [sp], #4
24054030:	4770      	bx	lr

24054032 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
24054032:	b480      	push	{r7}
24054034:	b083      	sub	sp, #12
24054036:	af00      	add	r7, sp, #0
24054038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
2405403a:	687b      	ldr	r3, [r7, #4]
2405403c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405403e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
24054042:	2b00      	cmp	r3, #0
24054044:	d101      	bne.n	2405404a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
24054046:	2301      	movs	r3, #1
24054048:	e000      	b.n	2405404c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
2405404a:	2300      	movs	r3, #0
}
2405404c:	4618      	mov	r0, r3
2405404e:	370c      	adds	r7, #12
24054050:	46bd      	mov	sp, r7
24054052:	f85d 7b04 	ldr.w	r7, [sp], #4
24054056:	4770      	bx	lr

24054058 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
24054058:	b480      	push	{r7}
2405405a:	b087      	sub	sp, #28
2405405c:	af00      	add	r7, sp, #0
2405405e:	60f8      	str	r0, [r7, #12]
24054060:	60b9      	str	r1, [r7, #8]
24054062:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
24054064:	68fb      	ldr	r3, [r7, #12]
24054066:	3314      	adds	r3, #20
24054068:	461a      	mov	r2, r3
2405406a:	68bb      	ldr	r3, [r7, #8]
2405406c:	0e5b      	lsrs	r3, r3, #25
2405406e:	009b      	lsls	r3, r3, #2
24054070:	f003 0304 	and.w	r3, r3, #4
24054074:	4413      	add	r3, r2
24054076:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
24054078:	697b      	ldr	r3, [r7, #20]
2405407a:	681a      	ldr	r2, [r3, #0]
2405407c:	68bb      	ldr	r3, [r7, #8]
2405407e:	0d1b      	lsrs	r3, r3, #20
24054080:	f003 031f 	and.w	r3, r3, #31
24054084:	2107      	movs	r1, #7
24054086:	fa01 f303 	lsl.w	r3, r1, r3
2405408a:	43db      	mvns	r3, r3
2405408c:	401a      	ands	r2, r3
2405408e:	68bb      	ldr	r3, [r7, #8]
24054090:	0d1b      	lsrs	r3, r3, #20
24054092:	f003 031f 	and.w	r3, r3, #31
24054096:	6879      	ldr	r1, [r7, #4]
24054098:	fa01 f303 	lsl.w	r3, r1, r3
2405409c:	431a      	orrs	r2, r3
2405409e:	697b      	ldr	r3, [r7, #20]
240540a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
240540a2:	bf00      	nop
240540a4:	371c      	adds	r7, #28
240540a6:	46bd      	mov	sp, r7
240540a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240540ac:	4770      	bx	lr
	...

240540b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
240540b0:	b480      	push	{r7}
240540b2:	b085      	sub	sp, #20
240540b4:	af00      	add	r7, sp, #0
240540b6:	60f8      	str	r0, [r7, #12]
240540b8:	60b9      	str	r1, [r7, #8]
240540ba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
240540bc:	68fb      	ldr	r3, [r7, #12]
240540be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
240540c2:	68bb      	ldr	r3, [r7, #8]
240540c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
240540c8:	43db      	mvns	r3, r3
240540ca:	401a      	ands	r2, r3
240540cc:	687b      	ldr	r3, [r7, #4]
240540ce:	f003 0318 	and.w	r3, r3, #24
240540d2:	4908      	ldr	r1, [pc, #32]	; (240540f4 <LL_ADC_SetChannelSingleDiff+0x44>)
240540d4:	40d9      	lsrs	r1, r3
240540d6:	68bb      	ldr	r3, [r7, #8]
240540d8:	400b      	ands	r3, r1
240540da:	f3c3 0313 	ubfx	r3, r3, #0, #20
240540de:	431a      	orrs	r2, r3
240540e0:	68fb      	ldr	r3, [r7, #12]
240540e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
240540e6:	bf00      	nop
240540e8:	3714      	adds	r7, #20
240540ea:	46bd      	mov	sp, r7
240540ec:	f85d 7b04 	ldr.w	r7, [sp], #4
240540f0:	4770      	bx	lr
240540f2:	bf00      	nop
240540f4:	000fffff 	.word	0x000fffff

240540f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
240540f8:	b480      	push	{r7}
240540fa:	b083      	sub	sp, #12
240540fc:	af00      	add	r7, sp, #0
240540fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
24054100:	687b      	ldr	r3, [r7, #4]
24054102:	689b      	ldr	r3, [r3, #8]
24054104:	f003 031f 	and.w	r3, r3, #31
}
24054108:	4618      	mov	r0, r3
2405410a:	370c      	adds	r7, #12
2405410c:	46bd      	mov	sp, r7
2405410e:	f85d 7b04 	ldr.w	r7, [sp], #4
24054112:	4770      	bx	lr

24054114 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
24054114:	b480      	push	{r7}
24054116:	b083      	sub	sp, #12
24054118:	af00      	add	r7, sp, #0
2405411a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
2405411c:	687b      	ldr	r3, [r7, #4]
2405411e:	689b      	ldr	r3, [r3, #8]
24054120:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
24054124:	4618      	mov	r0, r3
24054126:	370c      	adds	r7, #12
24054128:	46bd      	mov	sp, r7
2405412a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405412e:	4770      	bx	lr

24054130 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
24054130:	b480      	push	{r7}
24054132:	b083      	sub	sp, #12
24054134:	af00      	add	r7, sp, #0
24054136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
24054138:	687b      	ldr	r3, [r7, #4]
2405413a:	689a      	ldr	r2, [r3, #8]
2405413c:	4b04      	ldr	r3, [pc, #16]	; (24054150 <LL_ADC_DisableDeepPowerDown+0x20>)
2405413e:	4013      	ands	r3, r2
24054140:	687a      	ldr	r2, [r7, #4]
24054142:	6093      	str	r3, [r2, #8]
}
24054144:	bf00      	nop
24054146:	370c      	adds	r7, #12
24054148:	46bd      	mov	sp, r7
2405414a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405414e:	4770      	bx	lr
24054150:	5fffffc0 	.word	0x5fffffc0

24054154 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
24054154:	b480      	push	{r7}
24054156:	b083      	sub	sp, #12
24054158:	af00      	add	r7, sp, #0
2405415a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
2405415c:	687b      	ldr	r3, [r7, #4]
2405415e:	689b      	ldr	r3, [r3, #8]
24054160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24054164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24054168:	d101      	bne.n	2405416e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
2405416a:	2301      	movs	r3, #1
2405416c:	e000      	b.n	24054170 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
2405416e:	2300      	movs	r3, #0
}
24054170:	4618      	mov	r0, r3
24054172:	370c      	adds	r7, #12
24054174:	46bd      	mov	sp, r7
24054176:	f85d 7b04 	ldr.w	r7, [sp], #4
2405417a:	4770      	bx	lr

2405417c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
2405417c:	b480      	push	{r7}
2405417e:	b083      	sub	sp, #12
24054180:	af00      	add	r7, sp, #0
24054182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24054184:	687b      	ldr	r3, [r7, #4]
24054186:	689a      	ldr	r2, [r3, #8]
24054188:	4b05      	ldr	r3, [pc, #20]	; (240541a0 <LL_ADC_EnableInternalRegulator+0x24>)
2405418a:	4013      	ands	r3, r2
2405418c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
24054190:	687b      	ldr	r3, [r7, #4]
24054192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
24054194:	bf00      	nop
24054196:	370c      	adds	r7, #12
24054198:	46bd      	mov	sp, r7
2405419a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405419e:	4770      	bx	lr
240541a0:	6fffffc0 	.word	0x6fffffc0

240541a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
240541a4:	b480      	push	{r7}
240541a6:	b083      	sub	sp, #12
240541a8:	af00      	add	r7, sp, #0
240541aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
240541ac:	687b      	ldr	r3, [r7, #4]
240541ae:	689b      	ldr	r3, [r3, #8]
240541b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
240541b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240541b8:	d101      	bne.n	240541be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
240541ba:	2301      	movs	r3, #1
240541bc:	e000      	b.n	240541c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
240541be:	2300      	movs	r3, #0
}
240541c0:	4618      	mov	r0, r3
240541c2:	370c      	adds	r7, #12
240541c4:	46bd      	mov	sp, r7
240541c6:	f85d 7b04 	ldr.w	r7, [sp], #4
240541ca:	4770      	bx	lr

240541cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
240541cc:	b480      	push	{r7}
240541ce:	b083      	sub	sp, #12
240541d0:	af00      	add	r7, sp, #0
240541d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
240541d4:	687b      	ldr	r3, [r7, #4]
240541d6:	689a      	ldr	r2, [r3, #8]
240541d8:	4b05      	ldr	r3, [pc, #20]	; (240541f0 <LL_ADC_Enable+0x24>)
240541da:	4013      	ands	r3, r2
240541dc:	f043 0201 	orr.w	r2, r3, #1
240541e0:	687b      	ldr	r3, [r7, #4]
240541e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
240541e4:	bf00      	nop
240541e6:	370c      	adds	r7, #12
240541e8:	46bd      	mov	sp, r7
240541ea:	f85d 7b04 	ldr.w	r7, [sp], #4
240541ee:	4770      	bx	lr
240541f0:	7fffffc0 	.word	0x7fffffc0

240541f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
240541f4:	b480      	push	{r7}
240541f6:	b083      	sub	sp, #12
240541f8:	af00      	add	r7, sp, #0
240541fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
240541fc:	687b      	ldr	r3, [r7, #4]
240541fe:	689a      	ldr	r2, [r3, #8]
24054200:	4b05      	ldr	r3, [pc, #20]	; (24054218 <LL_ADC_Disable+0x24>)
24054202:	4013      	ands	r3, r2
24054204:	f043 0202 	orr.w	r2, r3, #2
24054208:	687b      	ldr	r3, [r7, #4]
2405420a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
2405420c:	bf00      	nop
2405420e:	370c      	adds	r7, #12
24054210:	46bd      	mov	sp, r7
24054212:	f85d 7b04 	ldr.w	r7, [sp], #4
24054216:	4770      	bx	lr
24054218:	7fffffc0 	.word	0x7fffffc0

2405421c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
2405421c:	b480      	push	{r7}
2405421e:	b083      	sub	sp, #12
24054220:	af00      	add	r7, sp, #0
24054222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
24054224:	687b      	ldr	r3, [r7, #4]
24054226:	689b      	ldr	r3, [r3, #8]
24054228:	f003 0301 	and.w	r3, r3, #1
2405422c:	2b01      	cmp	r3, #1
2405422e:	d101      	bne.n	24054234 <LL_ADC_IsEnabled+0x18>
24054230:	2301      	movs	r3, #1
24054232:	e000      	b.n	24054236 <LL_ADC_IsEnabled+0x1a>
24054234:	2300      	movs	r3, #0
}
24054236:	4618      	mov	r0, r3
24054238:	370c      	adds	r7, #12
2405423a:	46bd      	mov	sp, r7
2405423c:	f85d 7b04 	ldr.w	r7, [sp], #4
24054240:	4770      	bx	lr

24054242 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
24054242:	b480      	push	{r7}
24054244:	b083      	sub	sp, #12
24054246:	af00      	add	r7, sp, #0
24054248:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
2405424a:	687b      	ldr	r3, [r7, #4]
2405424c:	689b      	ldr	r3, [r3, #8]
2405424e:	f003 0302 	and.w	r3, r3, #2
24054252:	2b02      	cmp	r3, #2
24054254:	d101      	bne.n	2405425a <LL_ADC_IsDisableOngoing+0x18>
24054256:	2301      	movs	r3, #1
24054258:	e000      	b.n	2405425c <LL_ADC_IsDisableOngoing+0x1a>
2405425a:	2300      	movs	r3, #0
}
2405425c:	4618      	mov	r0, r3
2405425e:	370c      	adds	r7, #12
24054260:	46bd      	mov	sp, r7
24054262:	f85d 7b04 	ldr.w	r7, [sp], #4
24054266:	4770      	bx	lr

24054268 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
24054268:	b480      	push	{r7}
2405426a:	b083      	sub	sp, #12
2405426c:	af00      	add	r7, sp, #0
2405426e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24054270:	687b      	ldr	r3, [r7, #4]
24054272:	689a      	ldr	r2, [r3, #8]
24054274:	4b05      	ldr	r3, [pc, #20]	; (2405428c <LL_ADC_REG_StartConversion+0x24>)
24054276:	4013      	ands	r3, r2
24054278:	f043 0204 	orr.w	r2, r3, #4
2405427c:	687b      	ldr	r3, [r7, #4]
2405427e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
24054280:	bf00      	nop
24054282:	370c      	adds	r7, #12
24054284:	46bd      	mov	sp, r7
24054286:	f85d 7b04 	ldr.w	r7, [sp], #4
2405428a:	4770      	bx	lr
2405428c:	7fffffc0 	.word	0x7fffffc0

24054290 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
24054290:	b480      	push	{r7}
24054292:	b083      	sub	sp, #12
24054294:	af00      	add	r7, sp, #0
24054296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24054298:	687b      	ldr	r3, [r7, #4]
2405429a:	689a      	ldr	r2, [r3, #8]
2405429c:	4b05      	ldr	r3, [pc, #20]	; (240542b4 <LL_ADC_REG_StopConversion+0x24>)
2405429e:	4013      	ands	r3, r2
240542a0:	f043 0210 	orr.w	r2, r3, #16
240542a4:	687b      	ldr	r3, [r7, #4]
240542a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
240542a8:	bf00      	nop
240542aa:	370c      	adds	r7, #12
240542ac:	46bd      	mov	sp, r7
240542ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240542b2:	4770      	bx	lr
240542b4:	7fffffc0 	.word	0x7fffffc0

240542b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
240542b8:	b480      	push	{r7}
240542ba:	b083      	sub	sp, #12
240542bc:	af00      	add	r7, sp, #0
240542be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
240542c0:	687b      	ldr	r3, [r7, #4]
240542c2:	689b      	ldr	r3, [r3, #8]
240542c4:	f003 0304 	and.w	r3, r3, #4
240542c8:	2b04      	cmp	r3, #4
240542ca:	d101      	bne.n	240542d0 <LL_ADC_REG_IsConversionOngoing+0x18>
240542cc:	2301      	movs	r3, #1
240542ce:	e000      	b.n	240542d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
240542d0:	2300      	movs	r3, #0
}
240542d2:	4618      	mov	r0, r3
240542d4:	370c      	adds	r7, #12
240542d6:	46bd      	mov	sp, r7
240542d8:	f85d 7b04 	ldr.w	r7, [sp], #4
240542dc:	4770      	bx	lr
	...

240542e0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
240542e0:	b480      	push	{r7}
240542e2:	b083      	sub	sp, #12
240542e4:	af00      	add	r7, sp, #0
240542e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
240542e8:	687b      	ldr	r3, [r7, #4]
240542ea:	689a      	ldr	r2, [r3, #8]
240542ec:	4b05      	ldr	r3, [pc, #20]	; (24054304 <LL_ADC_INJ_StopConversion+0x24>)
240542ee:	4013      	ands	r3, r2
240542f0:	f043 0220 	orr.w	r2, r3, #32
240542f4:	687b      	ldr	r3, [r7, #4]
240542f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
240542f8:	bf00      	nop
240542fa:	370c      	adds	r7, #12
240542fc:	46bd      	mov	sp, r7
240542fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24054302:	4770      	bx	lr
24054304:	7fffffc0 	.word	0x7fffffc0

24054308 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
24054308:	b480      	push	{r7}
2405430a:	b083      	sub	sp, #12
2405430c:	af00      	add	r7, sp, #0
2405430e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
24054310:	687b      	ldr	r3, [r7, #4]
24054312:	689b      	ldr	r3, [r3, #8]
24054314:	f003 0308 	and.w	r3, r3, #8
24054318:	2b08      	cmp	r3, #8
2405431a:	d101      	bne.n	24054320 <LL_ADC_INJ_IsConversionOngoing+0x18>
2405431c:	2301      	movs	r3, #1
2405431e:	e000      	b.n	24054322 <LL_ADC_INJ_IsConversionOngoing+0x1a>
24054320:	2300      	movs	r3, #0
}
24054322:	4618      	mov	r0, r3
24054324:	370c      	adds	r7, #12
24054326:	46bd      	mov	sp, r7
24054328:	f85d 7b04 	ldr.w	r7, [sp], #4
2405432c:	4770      	bx	lr
	...

24054330 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
24054330:	b590      	push	{r4, r7, lr}
24054332:	b089      	sub	sp, #36	; 0x24
24054334:	af00      	add	r7, sp, #0
24054336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
24054338:	2300      	movs	r3, #0
2405433a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
2405433c:	2300      	movs	r3, #0
2405433e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
24054340:	687b      	ldr	r3, [r7, #4]
24054342:	2b00      	cmp	r3, #0
24054344:	d101      	bne.n	2405434a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
24054346:	2301      	movs	r3, #1
24054348:	e138      	b.n	240545bc <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
2405434a:	687b      	ldr	r3, [r7, #4]
2405434c:	68db      	ldr	r3, [r3, #12]
2405434e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
24054350:	687b      	ldr	r3, [r7, #4]
24054352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054354:	2b00      	cmp	r3, #0
24054356:	d109      	bne.n	2405436c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
24054358:	6878      	ldr	r0, [r7, #4]
2405435a:	f7fe fe35 	bl	24052fc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
2405435e:	687b      	ldr	r3, [r7, #4]
24054360:	2200      	movs	r2, #0
24054362:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
24054364:	687b      	ldr	r3, [r7, #4]
24054366:	2200      	movs	r2, #0
24054368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
2405436c:	687b      	ldr	r3, [r7, #4]
2405436e:	681b      	ldr	r3, [r3, #0]
24054370:	4618      	mov	r0, r3
24054372:	f7ff feef 	bl	24054154 <LL_ADC_IsDeepPowerDownEnabled>
24054376:	4603      	mov	r3, r0
24054378:	2b00      	cmp	r3, #0
2405437a:	d004      	beq.n	24054386 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
2405437c:	687b      	ldr	r3, [r7, #4]
2405437e:	681b      	ldr	r3, [r3, #0]
24054380:	4618      	mov	r0, r3
24054382:	f7ff fed5 	bl	24054130 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
24054386:	687b      	ldr	r3, [r7, #4]
24054388:	681b      	ldr	r3, [r3, #0]
2405438a:	4618      	mov	r0, r3
2405438c:	f7ff ff0a 	bl	240541a4 <LL_ADC_IsInternalRegulatorEnabled>
24054390:	4603      	mov	r3, r0
24054392:	2b00      	cmp	r3, #0
24054394:	d114      	bne.n	240543c0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
24054396:	687b      	ldr	r3, [r7, #4]
24054398:	681b      	ldr	r3, [r3, #0]
2405439a:	4618      	mov	r0, r3
2405439c:	f7ff feee 	bl	2405417c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
240543a0:	4b88      	ldr	r3, [pc, #544]	; (240545c4 <HAL_ADC_Init+0x294>)
240543a2:	681b      	ldr	r3, [r3, #0]
240543a4:	099b      	lsrs	r3, r3, #6
240543a6:	4a88      	ldr	r2, [pc, #544]	; (240545c8 <HAL_ADC_Init+0x298>)
240543a8:	fba2 2303 	umull	r2, r3, r2, r3
240543ac:	099b      	lsrs	r3, r3, #6
240543ae:	3301      	adds	r3, #1
240543b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
240543b2:	e002      	b.n	240543ba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
240543b4:	68bb      	ldr	r3, [r7, #8]
240543b6:	3b01      	subs	r3, #1
240543b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
240543ba:	68bb      	ldr	r3, [r7, #8]
240543bc:	2b00      	cmp	r3, #0
240543be:	d1f9      	bne.n	240543b4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
240543c0:	687b      	ldr	r3, [r7, #4]
240543c2:	681b      	ldr	r3, [r3, #0]
240543c4:	4618      	mov	r0, r3
240543c6:	f7ff feed 	bl	240541a4 <LL_ADC_IsInternalRegulatorEnabled>
240543ca:	4603      	mov	r3, r0
240543cc:	2b00      	cmp	r3, #0
240543ce:	d10d      	bne.n	240543ec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240543d0:	687b      	ldr	r3, [r7, #4]
240543d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240543d4:	f043 0210 	orr.w	r2, r3, #16
240543d8:	687b      	ldr	r3, [r7, #4]
240543da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240543dc:	687b      	ldr	r3, [r7, #4]
240543de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240543e0:	f043 0201 	orr.w	r2, r3, #1
240543e4:	687b      	ldr	r3, [r7, #4]
240543e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
240543e8:	2301      	movs	r3, #1
240543ea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
240543ec:	687b      	ldr	r3, [r7, #4]
240543ee:	681b      	ldr	r3, [r3, #0]
240543f0:	4618      	mov	r0, r3
240543f2:	f7ff ff61 	bl	240542b8 <LL_ADC_REG_IsConversionOngoing>
240543f6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
240543f8:	687b      	ldr	r3, [r7, #4]
240543fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240543fc:	f003 0310 	and.w	r3, r3, #16
24054400:	2b00      	cmp	r3, #0
24054402:	f040 80d2 	bne.w	240545aa <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
24054406:	697b      	ldr	r3, [r7, #20]
24054408:	2b00      	cmp	r3, #0
2405440a:	f040 80ce 	bne.w	240545aa <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
2405440e:	687b      	ldr	r3, [r7, #4]
24054410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054412:	f423 7381 	bic.w	r3, r3, #258	; 0x102
24054416:	f043 0202 	orr.w	r2, r3, #2
2405441a:	687b      	ldr	r3, [r7, #4]
2405441c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
2405441e:	687b      	ldr	r3, [r7, #4]
24054420:	681b      	ldr	r3, [r3, #0]
24054422:	4618      	mov	r0, r3
24054424:	f7ff fefa 	bl	2405421c <LL_ADC_IsEnabled>
24054428:	4603      	mov	r3, r0
2405442a:	2b00      	cmp	r3, #0
2405442c:	d110      	bne.n	24054450 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
2405442e:	4867      	ldr	r0, [pc, #412]	; (240545cc <HAL_ADC_Init+0x29c>)
24054430:	f7ff fef4 	bl	2405421c <LL_ADC_IsEnabled>
24054434:	4604      	mov	r4, r0
24054436:	4866      	ldr	r0, [pc, #408]	; (240545d0 <HAL_ADC_Init+0x2a0>)
24054438:	f7ff fef0 	bl	2405421c <LL_ADC_IsEnabled>
2405443c:	4603      	mov	r3, r0
2405443e:	4323      	orrs	r3, r4
24054440:	2b00      	cmp	r3, #0
24054442:	d105      	bne.n	24054450 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
24054444:	687b      	ldr	r3, [r7, #4]
24054446:	685b      	ldr	r3, [r3, #4]
24054448:	4619      	mov	r1, r3
2405444a:	4862      	ldr	r0, [pc, #392]	; (240545d4 <HAL_ADC_Init+0x2a4>)
2405444c:	f7ff fd2a 	bl	24053ea4 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
24054450:	687b      	ldr	r3, [r7, #4]
24054452:	7d5b      	ldrb	r3, [r3, #21]
24054454:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
24054456:	687b      	ldr	r3, [r7, #4]
24054458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
2405445a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
2405445c:	687b      	ldr	r3, [r7, #4]
2405445e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
24054460:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
24054462:	687b      	ldr	r3, [r7, #4]
24054464:	7f1b      	ldrb	r3, [r3, #28]
24054466:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
24054468:	4313      	orrs	r3, r2
2405446a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
2405446c:	687b      	ldr	r3, [r7, #4]
2405446e:	7f1b      	ldrb	r3, [r3, #28]
24054470:	2b01      	cmp	r3, #1
24054472:	d106      	bne.n	24054482 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
24054474:	687b      	ldr	r3, [r7, #4]
24054476:	6a1b      	ldr	r3, [r3, #32]
24054478:	3b01      	subs	r3, #1
2405447a:	045b      	lsls	r3, r3, #17
2405447c:	69ba      	ldr	r2, [r7, #24]
2405447e:	4313      	orrs	r3, r2
24054480:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
24054482:	687b      	ldr	r3, [r7, #4]
24054484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24054486:	2b00      	cmp	r3, #0
24054488:	d009      	beq.n	2405449e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
2405448a:	687b      	ldr	r3, [r7, #4]
2405448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405448e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
24054492:	687b      	ldr	r3, [r7, #4]
24054494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24054496:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
24054498:	69ba      	ldr	r2, [r7, #24]
2405449a:	4313      	orrs	r3, r2
2405449c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
2405449e:	687b      	ldr	r3, [r7, #4]
240544a0:	681b      	ldr	r3, [r3, #0]
240544a2:	68da      	ldr	r2, [r3, #12]
240544a4:	4b4c      	ldr	r3, [pc, #304]	; (240545d8 <HAL_ADC_Init+0x2a8>)
240544a6:	4013      	ands	r3, r2
240544a8:	687a      	ldr	r2, [r7, #4]
240544aa:	6812      	ldr	r2, [r2, #0]
240544ac:	69b9      	ldr	r1, [r7, #24]
240544ae:	430b      	orrs	r3, r1
240544b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
240544b2:	687b      	ldr	r3, [r7, #4]
240544b4:	681b      	ldr	r3, [r3, #0]
240544b6:	4618      	mov	r0, r3
240544b8:	f7ff fefe 	bl	240542b8 <LL_ADC_REG_IsConversionOngoing>
240544bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
240544be:	687b      	ldr	r3, [r7, #4]
240544c0:	681b      	ldr	r3, [r3, #0]
240544c2:	4618      	mov	r0, r3
240544c4:	f7ff ff20 	bl	24054308 <LL_ADC_INJ_IsConversionOngoing>
240544c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
240544ca:	693b      	ldr	r3, [r7, #16]
240544cc:	2b00      	cmp	r3, #0
240544ce:	d14a      	bne.n	24054566 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
240544d0:	68fb      	ldr	r3, [r7, #12]
240544d2:	2b00      	cmp	r3, #0
240544d4:	d147      	bne.n	24054566 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
240544d6:	687b      	ldr	r3, [r7, #4]
240544d8:	7d1b      	ldrb	r3, [r3, #20]
240544da:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
240544dc:	687b      	ldr	r3, [r7, #4]
240544de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
240544e0:	4313      	orrs	r3, r2
240544e2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
240544e4:	687b      	ldr	r3, [r7, #4]
240544e6:	681b      	ldr	r3, [r3, #0]
240544e8:	68da      	ldr	r2, [r3, #12]
240544ea:	4b3c      	ldr	r3, [pc, #240]	; (240545dc <HAL_ADC_Init+0x2ac>)
240544ec:	4013      	ands	r3, r2
240544ee:	687a      	ldr	r2, [r7, #4]
240544f0:	6812      	ldr	r2, [r2, #0]
240544f2:	69b9      	ldr	r1, [r7, #24]
240544f4:	430b      	orrs	r3, r1
240544f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
240544f8:	687b      	ldr	r3, [r7, #4]
240544fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
240544fe:	2b01      	cmp	r3, #1
24054500:	d11b      	bne.n	2405453a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
24054502:	687b      	ldr	r3, [r7, #4]
24054504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24054506:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
24054508:	687b      	ldr	r3, [r7, #4]
2405450a:	681b      	ldr	r3, [r3, #0]
2405450c:	691a      	ldr	r2, [r3, #16]
2405450e:	4b34      	ldr	r3, [pc, #208]	; (240545e0 <HAL_ADC_Init+0x2b0>)
24054510:	4013      	ands	r3, r2
24054512:	687a      	ldr	r2, [r7, #4]
24054514:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24054516:	3a01      	subs	r2, #1
24054518:	0411      	lsls	r1, r2, #16
2405451a:	687a      	ldr	r2, [r7, #4]
2405451c:	6c12      	ldr	r2, [r2, #64]	; 0x40
2405451e:	4311      	orrs	r1, r2
24054520:	687a      	ldr	r2, [r7, #4]
24054522:	6c52      	ldr	r2, [r2, #68]	; 0x44
24054524:	4311      	orrs	r1, r2
24054526:	687a      	ldr	r2, [r7, #4]
24054528:	6c92      	ldr	r2, [r2, #72]	; 0x48
2405452a:	430a      	orrs	r2, r1
2405452c:	431a      	orrs	r2, r3
2405452e:	687b      	ldr	r3, [r7, #4]
24054530:	681b      	ldr	r3, [r3, #0]
24054532:	f042 0201 	orr.w	r2, r2, #1
24054536:	611a      	str	r2, [r3, #16]
24054538:	e007      	b.n	2405454a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
2405453a:	687b      	ldr	r3, [r7, #4]
2405453c:	681b      	ldr	r3, [r3, #0]
2405453e:	691a      	ldr	r2, [r3, #16]
24054540:	687b      	ldr	r3, [r7, #4]
24054542:	681b      	ldr	r3, [r3, #0]
24054544:	f022 0201 	bic.w	r2, r2, #1
24054548:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
2405454a:	687b      	ldr	r3, [r7, #4]
2405454c:	681b      	ldr	r3, [r3, #0]
2405454e:	691b      	ldr	r3, [r3, #16]
24054550:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
24054554:	687b      	ldr	r3, [r7, #4]
24054556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24054558:	687b      	ldr	r3, [r7, #4]
2405455a:	681b      	ldr	r3, [r3, #0]
2405455c:	430a      	orrs	r2, r1
2405455e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
24054560:	6878      	ldr	r0, [r7, #4]
24054562:	f001 f9f5 	bl	24055950 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
24054566:	687b      	ldr	r3, [r7, #4]
24054568:	68db      	ldr	r3, [r3, #12]
2405456a:	2b01      	cmp	r3, #1
2405456c:	d10c      	bne.n	24054588 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
2405456e:	687b      	ldr	r3, [r7, #4]
24054570:	681b      	ldr	r3, [r3, #0]
24054572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24054574:	f023 010f 	bic.w	r1, r3, #15
24054578:	687b      	ldr	r3, [r7, #4]
2405457a:	699b      	ldr	r3, [r3, #24]
2405457c:	1e5a      	subs	r2, r3, #1
2405457e:	687b      	ldr	r3, [r7, #4]
24054580:	681b      	ldr	r3, [r3, #0]
24054582:	430a      	orrs	r2, r1
24054584:	631a      	str	r2, [r3, #48]	; 0x30
24054586:	e007      	b.n	24054598 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
24054588:	687b      	ldr	r3, [r7, #4]
2405458a:	681b      	ldr	r3, [r3, #0]
2405458c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2405458e:	687b      	ldr	r3, [r7, #4]
24054590:	681b      	ldr	r3, [r3, #0]
24054592:	f022 020f 	bic.w	r2, r2, #15
24054596:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
24054598:	687b      	ldr	r3, [r7, #4]
2405459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405459c:	f023 0303 	bic.w	r3, r3, #3
240545a0:	f043 0201 	orr.w	r2, r3, #1
240545a4:	687b      	ldr	r3, [r7, #4]
240545a6:	655a      	str	r2, [r3, #84]	; 0x54
240545a8:	e007      	b.n	240545ba <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240545aa:	687b      	ldr	r3, [r7, #4]
240545ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240545ae:	f043 0210 	orr.w	r2, r3, #16
240545b2:	687b      	ldr	r3, [r7, #4]
240545b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
240545b6:	2301      	movs	r3, #1
240545b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
240545ba:	7ffb      	ldrb	r3, [r7, #31]
}
240545bc:	4618      	mov	r0, r3
240545be:	3724      	adds	r7, #36	; 0x24
240545c0:	46bd      	mov	sp, r7
240545c2:	bd90      	pop	{r4, r7, pc}
240545c4:	20000044 	.word	0x20000044
240545c8:	053e2d63 	.word	0x053e2d63
240545cc:	40022000 	.word	0x40022000
240545d0:	40022100 	.word	0x40022100
240545d4:	40022300 	.word	0x40022300
240545d8:	fff0c003 	.word	0xfff0c003
240545dc:	ffffbffc 	.word	0xffffbffc
240545e0:	fc00f81e 	.word	0xfc00f81e

240545e4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
240545e4:	b580      	push	{r7, lr}
240545e6:	b086      	sub	sp, #24
240545e8:	af00      	add	r7, sp, #0
240545ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
240545ec:	4856      	ldr	r0, [pc, #344]	; (24054748 <HAL_ADC_Start+0x164>)
240545ee:	f7ff fd83 	bl	240540f8 <LL_ADC_GetMultimode>
240545f2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
240545f4:	687b      	ldr	r3, [r7, #4]
240545f6:	681b      	ldr	r3, [r3, #0]
240545f8:	4618      	mov	r0, r3
240545fa:	f7ff fe5d 	bl	240542b8 <LL_ADC_REG_IsConversionOngoing>
240545fe:	4603      	mov	r3, r0
24054600:	2b00      	cmp	r3, #0
24054602:	f040 809a 	bne.w	2405473a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
24054606:	687b      	ldr	r3, [r7, #4]
24054608:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
2405460c:	2b01      	cmp	r3, #1
2405460e:	d101      	bne.n	24054614 <HAL_ADC_Start+0x30>
24054610:	2302      	movs	r3, #2
24054612:	e095      	b.n	24054740 <HAL_ADC_Start+0x15c>
24054614:	687b      	ldr	r3, [r7, #4]
24054616:	2201      	movs	r2, #1
24054618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
2405461c:	6878      	ldr	r0, [r7, #4]
2405461e:	f001 f8bb 	bl	24055798 <ADC_Enable>
24054622:	4603      	mov	r3, r0
24054624:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
24054626:	7dfb      	ldrb	r3, [r7, #23]
24054628:	2b00      	cmp	r3, #0
2405462a:	f040 8081 	bne.w	24054730 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
2405462e:	687b      	ldr	r3, [r7, #4]
24054630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
24054632:	4b46      	ldr	r3, [pc, #280]	; (2405474c <HAL_ADC_Start+0x168>)
24054634:	4013      	ands	r3, r2
24054636:	f443 7280 	orr.w	r2, r3, #256	; 0x100
2405463a:	687b      	ldr	r3, [r7, #4]
2405463c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2405463e:	687b      	ldr	r3, [r7, #4]
24054640:	681b      	ldr	r3, [r3, #0]
24054642:	4a43      	ldr	r2, [pc, #268]	; (24054750 <HAL_ADC_Start+0x16c>)
24054644:	4293      	cmp	r3, r2
24054646:	d002      	beq.n	2405464e <HAL_ADC_Start+0x6a>
24054648:	687b      	ldr	r3, [r7, #4]
2405464a:	681b      	ldr	r3, [r3, #0]
2405464c:	e000      	b.n	24054650 <HAL_ADC_Start+0x6c>
2405464e:	4b41      	ldr	r3, [pc, #260]	; (24054754 <HAL_ADC_Start+0x170>)
24054650:	687a      	ldr	r2, [r7, #4]
24054652:	6812      	ldr	r2, [r2, #0]
24054654:	4293      	cmp	r3, r2
24054656:	d002      	beq.n	2405465e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054658:	693b      	ldr	r3, [r7, #16]
2405465a:	2b00      	cmp	r3, #0
2405465c:	d105      	bne.n	2405466a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2405465e:	687b      	ldr	r3, [r7, #4]
24054660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054662:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
24054666:	687b      	ldr	r3, [r7, #4]
24054668:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
2405466a:	687b      	ldr	r3, [r7, #4]
2405466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405466e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24054672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24054676:	d106      	bne.n	24054686 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
24054678:	687b      	ldr	r3, [r7, #4]
2405467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405467c:	f023 0206 	bic.w	r2, r3, #6
24054680:	687b      	ldr	r3, [r7, #4]
24054682:	659a      	str	r2, [r3, #88]	; 0x58
24054684:	e002      	b.n	2405468c <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
24054686:	687b      	ldr	r3, [r7, #4]
24054688:	2200      	movs	r2, #0
2405468a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
2405468c:	687b      	ldr	r3, [r7, #4]
2405468e:	681b      	ldr	r3, [r3, #0]
24054690:	221c      	movs	r2, #28
24054692:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
24054694:	687b      	ldr	r3, [r7, #4]
24054696:	2200      	movs	r2, #0
24054698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2405469c:	687b      	ldr	r3, [r7, #4]
2405469e:	681b      	ldr	r3, [r3, #0]
240546a0:	4a2b      	ldr	r2, [pc, #172]	; (24054750 <HAL_ADC_Start+0x16c>)
240546a2:	4293      	cmp	r3, r2
240546a4:	d002      	beq.n	240546ac <HAL_ADC_Start+0xc8>
240546a6:	687b      	ldr	r3, [r7, #4]
240546a8:	681b      	ldr	r3, [r3, #0]
240546aa:	e000      	b.n	240546ae <HAL_ADC_Start+0xca>
240546ac:	4b29      	ldr	r3, [pc, #164]	; (24054754 <HAL_ADC_Start+0x170>)
240546ae:	687a      	ldr	r2, [r7, #4]
240546b0:	6812      	ldr	r2, [r2, #0]
240546b2:	4293      	cmp	r3, r2
240546b4:	d008      	beq.n	240546c8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240546b6:	693b      	ldr	r3, [r7, #16]
240546b8:	2b00      	cmp	r3, #0
240546ba:	d005      	beq.n	240546c8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
240546bc:	693b      	ldr	r3, [r7, #16]
240546be:	2b05      	cmp	r3, #5
240546c0:	d002      	beq.n	240546c8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
240546c2:	693b      	ldr	r3, [r7, #16]
240546c4:	2b09      	cmp	r3, #9
240546c6:	d114      	bne.n	240546f2 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
240546c8:	687b      	ldr	r3, [r7, #4]
240546ca:	681b      	ldr	r3, [r3, #0]
240546cc:	68db      	ldr	r3, [r3, #12]
240546ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240546d2:	2b00      	cmp	r3, #0
240546d4:	d007      	beq.n	240546e6 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
240546d6:	687b      	ldr	r3, [r7, #4]
240546d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240546da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
240546de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
240546e2:	687b      	ldr	r3, [r7, #4]
240546e4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
240546e6:	687b      	ldr	r3, [r7, #4]
240546e8:	681b      	ldr	r3, [r3, #0]
240546ea:	4618      	mov	r0, r3
240546ec:	f7ff fdbc 	bl	24054268 <LL_ADC_REG_StartConversion>
240546f0:	e025      	b.n	2405473e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
240546f2:	687b      	ldr	r3, [r7, #4]
240546f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240546f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
240546fa:	687b      	ldr	r3, [r7, #4]
240546fc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
240546fe:	687b      	ldr	r3, [r7, #4]
24054700:	681b      	ldr	r3, [r3, #0]
24054702:	4a13      	ldr	r2, [pc, #76]	; (24054750 <HAL_ADC_Start+0x16c>)
24054704:	4293      	cmp	r3, r2
24054706:	d002      	beq.n	2405470e <HAL_ADC_Start+0x12a>
24054708:	687b      	ldr	r3, [r7, #4]
2405470a:	681b      	ldr	r3, [r3, #0]
2405470c:	e000      	b.n	24054710 <HAL_ADC_Start+0x12c>
2405470e:	4b11      	ldr	r3, [pc, #68]	; (24054754 <HAL_ADC_Start+0x170>)
24054710:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
24054712:	68fb      	ldr	r3, [r7, #12]
24054714:	68db      	ldr	r3, [r3, #12]
24054716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405471a:	2b00      	cmp	r3, #0
2405471c:	d00f      	beq.n	2405473e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
2405471e:	687b      	ldr	r3, [r7, #4]
24054720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054722:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24054726:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
2405472a:	687b      	ldr	r3, [r7, #4]
2405472c:	655a      	str	r2, [r3, #84]	; 0x54
2405472e:	e006      	b.n	2405473e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
24054730:	687b      	ldr	r3, [r7, #4]
24054732:	2200      	movs	r2, #0
24054734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
24054738:	e001      	b.n	2405473e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
2405473a:	2302      	movs	r3, #2
2405473c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
2405473e:	7dfb      	ldrb	r3, [r7, #23]
}
24054740:	4618      	mov	r0, r3
24054742:	3718      	adds	r7, #24
24054744:	46bd      	mov	sp, r7
24054746:	bd80      	pop	{r7, pc}
24054748:	40022300 	.word	0x40022300
2405474c:	fffff0fe 	.word	0xfffff0fe
24054750:	40022100 	.word	0x40022100
24054754:	40022000 	.word	0x40022000

24054758 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
24054758:	b580      	push	{r7, lr}
2405475a:	b088      	sub	sp, #32
2405475c:	af00      	add	r7, sp, #0
2405475e:	6078      	str	r0, [r7, #4]
24054760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24054762:	4866      	ldr	r0, [pc, #408]	; (240548fc <HAL_ADC_PollForConversion+0x1a4>)
24054764:	f7ff fcc8 	bl	240540f8 <LL_ADC_GetMultimode>
24054768:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
2405476a:	687b      	ldr	r3, [r7, #4]
2405476c:	691b      	ldr	r3, [r3, #16]
2405476e:	2b08      	cmp	r3, #8
24054770:	d102      	bne.n	24054778 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
24054772:	2308      	movs	r3, #8
24054774:	61fb      	str	r3, [r7, #28]
24054776:	e02a      	b.n	240547ce <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054778:	697b      	ldr	r3, [r7, #20]
2405477a:	2b00      	cmp	r3, #0
2405477c:	d005      	beq.n	2405478a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
2405477e:	697b      	ldr	r3, [r7, #20]
24054780:	2b05      	cmp	r3, #5
24054782:	d002      	beq.n	2405478a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
24054784:	697b      	ldr	r3, [r7, #20]
24054786:	2b09      	cmp	r3, #9
24054788:	d111      	bne.n	240547ae <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
2405478a:	687b      	ldr	r3, [r7, #4]
2405478c:	681b      	ldr	r3, [r3, #0]
2405478e:	68db      	ldr	r3, [r3, #12]
24054790:	f003 0301 	and.w	r3, r3, #1
24054794:	2b00      	cmp	r3, #0
24054796:	d007      	beq.n	240547a8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24054798:	687b      	ldr	r3, [r7, #4]
2405479a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405479c:	f043 0220 	orr.w	r2, r3, #32
240547a0:	687b      	ldr	r3, [r7, #4]
240547a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
240547a4:	2301      	movs	r3, #1
240547a6:	e0a4      	b.n	240548f2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
240547a8:	2304      	movs	r3, #4
240547aa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
240547ac:	e00f      	b.n	240547ce <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
240547ae:	4853      	ldr	r0, [pc, #332]	; (240548fc <HAL_ADC_PollForConversion+0x1a4>)
240547b0:	f7ff fcb0 	bl	24054114 <LL_ADC_GetMultiDMATransfer>
240547b4:	4603      	mov	r3, r0
240547b6:	2b00      	cmp	r3, #0
240547b8:	d007      	beq.n	240547ca <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
240547ba:	687b      	ldr	r3, [r7, #4]
240547bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240547be:	f043 0220 	orr.w	r2, r3, #32
240547c2:	687b      	ldr	r3, [r7, #4]
240547c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
240547c6:	2301      	movs	r3, #1
240547c8:	e093      	b.n	240548f2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
240547ca:	2304      	movs	r3, #4
240547cc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
240547ce:	f7ff fb39 	bl	24053e44 <HAL_GetTick>
240547d2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
240547d4:	e021      	b.n	2405481a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
240547d6:	683b      	ldr	r3, [r7, #0]
240547d8:	f1b3 3fff 	cmp.w	r3, #4294967295
240547dc:	d01d      	beq.n	2405481a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
240547de:	f7ff fb31 	bl	24053e44 <HAL_GetTick>
240547e2:	4602      	mov	r2, r0
240547e4:	693b      	ldr	r3, [r7, #16]
240547e6:	1ad3      	subs	r3, r2, r3
240547e8:	683a      	ldr	r2, [r7, #0]
240547ea:	429a      	cmp	r2, r3
240547ec:	d302      	bcc.n	240547f4 <HAL_ADC_PollForConversion+0x9c>
240547ee:	683b      	ldr	r3, [r7, #0]
240547f0:	2b00      	cmp	r3, #0
240547f2:	d112      	bne.n	2405481a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
240547f4:	687b      	ldr	r3, [r7, #4]
240547f6:	681b      	ldr	r3, [r3, #0]
240547f8:	681a      	ldr	r2, [r3, #0]
240547fa:	69fb      	ldr	r3, [r7, #28]
240547fc:	4013      	ands	r3, r2
240547fe:	2b00      	cmp	r3, #0
24054800:	d10b      	bne.n	2405481a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
24054802:	687b      	ldr	r3, [r7, #4]
24054804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054806:	f043 0204 	orr.w	r2, r3, #4
2405480a:	687b      	ldr	r3, [r7, #4]
2405480c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
2405480e:	687b      	ldr	r3, [r7, #4]
24054810:	2200      	movs	r2, #0
24054812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
24054816:	2303      	movs	r3, #3
24054818:	e06b      	b.n	240548f2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
2405481a:	687b      	ldr	r3, [r7, #4]
2405481c:	681b      	ldr	r3, [r3, #0]
2405481e:	681a      	ldr	r2, [r3, #0]
24054820:	69fb      	ldr	r3, [r7, #28]
24054822:	4013      	ands	r3, r2
24054824:	2b00      	cmp	r3, #0
24054826:	d0d6      	beq.n	240547d6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
24054828:	687b      	ldr	r3, [r7, #4]
2405482a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405482c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
24054830:	687b      	ldr	r3, [r7, #4]
24054832:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
24054834:	687b      	ldr	r3, [r7, #4]
24054836:	681b      	ldr	r3, [r3, #0]
24054838:	4618      	mov	r0, r3
2405483a:	f7ff fbbb 	bl	24053fb4 <LL_ADC_REG_IsTriggerSourceSWStart>
2405483e:	4603      	mov	r3, r0
24054840:	2b00      	cmp	r3, #0
24054842:	d01c      	beq.n	2405487e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
24054844:	687b      	ldr	r3, [r7, #4]
24054846:	7d5b      	ldrb	r3, [r3, #21]
24054848:	2b00      	cmp	r3, #0
2405484a:	d118      	bne.n	2405487e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
2405484c:	687b      	ldr	r3, [r7, #4]
2405484e:	681b      	ldr	r3, [r3, #0]
24054850:	681b      	ldr	r3, [r3, #0]
24054852:	f003 0308 	and.w	r3, r3, #8
24054856:	2b08      	cmp	r3, #8
24054858:	d111      	bne.n	2405487e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
2405485a:	687b      	ldr	r3, [r7, #4]
2405485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405485e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
24054862:	687b      	ldr	r3, [r7, #4]
24054864:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
24054866:	687b      	ldr	r3, [r7, #4]
24054868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405486a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
2405486e:	2b00      	cmp	r3, #0
24054870:	d105      	bne.n	2405487e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
24054872:	687b      	ldr	r3, [r7, #4]
24054874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054876:	f043 0201 	orr.w	r2, r3, #1
2405487a:	687b      	ldr	r3, [r7, #4]
2405487c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2405487e:	687b      	ldr	r3, [r7, #4]
24054880:	681b      	ldr	r3, [r3, #0]
24054882:	4a1f      	ldr	r2, [pc, #124]	; (24054900 <HAL_ADC_PollForConversion+0x1a8>)
24054884:	4293      	cmp	r3, r2
24054886:	d002      	beq.n	2405488e <HAL_ADC_PollForConversion+0x136>
24054888:	687b      	ldr	r3, [r7, #4]
2405488a:	681b      	ldr	r3, [r3, #0]
2405488c:	e000      	b.n	24054890 <HAL_ADC_PollForConversion+0x138>
2405488e:	4b1d      	ldr	r3, [pc, #116]	; (24054904 <HAL_ADC_PollForConversion+0x1ac>)
24054890:	687a      	ldr	r2, [r7, #4]
24054892:	6812      	ldr	r2, [r2, #0]
24054894:	4293      	cmp	r3, r2
24054896:	d008      	beq.n	240548aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054898:	697b      	ldr	r3, [r7, #20]
2405489a:	2b00      	cmp	r3, #0
2405489c:	d005      	beq.n	240548aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
2405489e:	697b      	ldr	r3, [r7, #20]
240548a0:	2b05      	cmp	r3, #5
240548a2:	d002      	beq.n	240548aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
240548a4:	697b      	ldr	r3, [r7, #20]
240548a6:	2b09      	cmp	r3, #9
240548a8:	d104      	bne.n	240548b4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
240548aa:	687b      	ldr	r3, [r7, #4]
240548ac:	681b      	ldr	r3, [r3, #0]
240548ae:	68db      	ldr	r3, [r3, #12]
240548b0:	61bb      	str	r3, [r7, #24]
240548b2:	e00c      	b.n	240548ce <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
240548b4:	687b      	ldr	r3, [r7, #4]
240548b6:	681b      	ldr	r3, [r3, #0]
240548b8:	4a11      	ldr	r2, [pc, #68]	; (24054900 <HAL_ADC_PollForConversion+0x1a8>)
240548ba:	4293      	cmp	r3, r2
240548bc:	d002      	beq.n	240548c4 <HAL_ADC_PollForConversion+0x16c>
240548be:	687b      	ldr	r3, [r7, #4]
240548c0:	681b      	ldr	r3, [r3, #0]
240548c2:	e000      	b.n	240548c6 <HAL_ADC_PollForConversion+0x16e>
240548c4:	4b0f      	ldr	r3, [pc, #60]	; (24054904 <HAL_ADC_PollForConversion+0x1ac>)
240548c6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
240548c8:	68fb      	ldr	r3, [r7, #12]
240548ca:	68db      	ldr	r3, [r3, #12]
240548cc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
240548ce:	69fb      	ldr	r3, [r7, #28]
240548d0:	2b08      	cmp	r3, #8
240548d2:	d104      	bne.n	240548de <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
240548d4:	687b      	ldr	r3, [r7, #4]
240548d6:	681b      	ldr	r3, [r3, #0]
240548d8:	2208      	movs	r2, #8
240548da:	601a      	str	r2, [r3, #0]
240548dc:	e008      	b.n	240548f0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
240548de:	69bb      	ldr	r3, [r7, #24]
240548e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
240548e4:	2b00      	cmp	r3, #0
240548e6:	d103      	bne.n	240548f0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
240548e8:	687b      	ldr	r3, [r7, #4]
240548ea:	681b      	ldr	r3, [r3, #0]
240548ec:	220c      	movs	r2, #12
240548ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
240548f0:	2300      	movs	r3, #0
}
240548f2:	4618      	mov	r0, r3
240548f4:	3720      	adds	r7, #32
240548f6:	46bd      	mov	sp, r7
240548f8:	bd80      	pop	{r7, pc}
240548fa:	bf00      	nop
240548fc:	40022300 	.word	0x40022300
24054900:	40022100 	.word	0x40022100
24054904:	40022000 	.word	0x40022000

24054908 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
24054908:	b580      	push	{r7, lr}
2405490a:	b086      	sub	sp, #24
2405490c:	af00      	add	r7, sp, #0
2405490e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24054910:	4890      	ldr	r0, [pc, #576]	; (24054b54 <HAL_ADC_Start_IT+0x24c>)
24054912:	f7ff fbf1 	bl	240540f8 <LL_ADC_GetMultimode>
24054916:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24054918:	687b      	ldr	r3, [r7, #4]
2405491a:	681b      	ldr	r3, [r3, #0]
2405491c:	4618      	mov	r0, r3
2405491e:	f7ff fccb 	bl	240542b8 <LL_ADC_REG_IsConversionOngoing>
24054922:	4603      	mov	r3, r0
24054924:	2b00      	cmp	r3, #0
24054926:	f040 810e 	bne.w	24054b46 <HAL_ADC_Start_IT+0x23e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
2405492a:	687b      	ldr	r3, [r7, #4]
2405492c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
24054930:	2b01      	cmp	r3, #1
24054932:	d101      	bne.n	24054938 <HAL_ADC_Start_IT+0x30>
24054934:	2302      	movs	r3, #2
24054936:	e109      	b.n	24054b4c <HAL_ADC_Start_IT+0x244>
24054938:	687b      	ldr	r3, [r7, #4]
2405493a:	2201      	movs	r2, #1
2405493c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
24054940:	6878      	ldr	r0, [r7, #4]
24054942:	f000 ff29 	bl	24055798 <ADC_Enable>
24054946:	4603      	mov	r3, r0
24054948:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
2405494a:	7dfb      	ldrb	r3, [r7, #23]
2405494c:	2b00      	cmp	r3, #0
2405494e:	f040 80f5 	bne.w	24054b3c <HAL_ADC_Start_IT+0x234>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
24054952:	687b      	ldr	r3, [r7, #4]
24054954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
24054956:	4b80      	ldr	r3, [pc, #512]	; (24054b58 <HAL_ADC_Start_IT+0x250>)
24054958:	4013      	ands	r3, r2
2405495a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
2405495e:	687b      	ldr	r3, [r7, #4]
24054960:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24054962:	687b      	ldr	r3, [r7, #4]
24054964:	681b      	ldr	r3, [r3, #0]
24054966:	4a7d      	ldr	r2, [pc, #500]	; (24054b5c <HAL_ADC_Start_IT+0x254>)
24054968:	4293      	cmp	r3, r2
2405496a:	d002      	beq.n	24054972 <HAL_ADC_Start_IT+0x6a>
2405496c:	687b      	ldr	r3, [r7, #4]
2405496e:	681b      	ldr	r3, [r3, #0]
24054970:	e000      	b.n	24054974 <HAL_ADC_Start_IT+0x6c>
24054972:	4b7b      	ldr	r3, [pc, #492]	; (24054b60 <HAL_ADC_Start_IT+0x258>)
24054974:	687a      	ldr	r2, [r7, #4]
24054976:	6812      	ldr	r2, [r2, #0]
24054978:	4293      	cmp	r3, r2
2405497a:	d002      	beq.n	24054982 <HAL_ADC_Start_IT+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2405497c:	693b      	ldr	r3, [r7, #16]
2405497e:	2b00      	cmp	r3, #0
24054980:	d105      	bne.n	2405498e <HAL_ADC_Start_IT+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
24054982:	687b      	ldr	r3, [r7, #4]
24054984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054986:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
2405498a:	687b      	ldr	r3, [r7, #4]
2405498c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
2405498e:	687b      	ldr	r3, [r7, #4]
24054990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24054996:	2b00      	cmp	r3, #0
24054998:	d006      	beq.n	240549a8 <HAL_ADC_Start_IT+0xa0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
2405499a:	687b      	ldr	r3, [r7, #4]
2405499c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405499e:	f023 0206 	bic.w	r2, r3, #6
240549a2:	687b      	ldr	r3, [r7, #4]
240549a4:	659a      	str	r2, [r3, #88]	; 0x58
240549a6:	e002      	b.n	240549ae <HAL_ADC_Start_IT+0xa6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
240549a8:	687b      	ldr	r3, [r7, #4]
240549aa:	2200      	movs	r2, #0
240549ac:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
240549ae:	687b      	ldr	r3, [r7, #4]
240549b0:	681b      	ldr	r3, [r3, #0]
240549b2:	221c      	movs	r2, #28
240549b4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
240549b6:	687b      	ldr	r3, [r7, #4]
240549b8:	2200      	movs	r2, #0
240549ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
240549be:	687b      	ldr	r3, [r7, #4]
240549c0:	681b      	ldr	r3, [r3, #0]
240549c2:	685a      	ldr	r2, [r3, #4]
240549c4:	687b      	ldr	r3, [r7, #4]
240549c6:	681b      	ldr	r3, [r3, #0]
240549c8:	f022 021c 	bic.w	r2, r2, #28
240549cc:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
240549ce:	687b      	ldr	r3, [r7, #4]
240549d0:	691b      	ldr	r3, [r3, #16]
240549d2:	2b08      	cmp	r3, #8
240549d4:	d108      	bne.n	240549e8 <HAL_ADC_Start_IT+0xe0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
240549d6:	687b      	ldr	r3, [r7, #4]
240549d8:	681b      	ldr	r3, [r3, #0]
240549da:	685a      	ldr	r2, [r3, #4]
240549dc:	687b      	ldr	r3, [r7, #4]
240549de:	681b      	ldr	r3, [r3, #0]
240549e0:	f042 0208 	orr.w	r2, r2, #8
240549e4:	605a      	str	r2, [r3, #4]
          break;
240549e6:	e008      	b.n	240549fa <HAL_ADC_Start_IT+0xf2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
240549e8:	687b      	ldr	r3, [r7, #4]
240549ea:	681b      	ldr	r3, [r3, #0]
240549ec:	685a      	ldr	r2, [r3, #4]
240549ee:	687b      	ldr	r3, [r7, #4]
240549f0:	681b      	ldr	r3, [r3, #0]
240549f2:	f042 0204 	orr.w	r2, r2, #4
240549f6:	605a      	str	r2, [r3, #4]
          break;
240549f8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
240549fa:	687b      	ldr	r3, [r7, #4]
240549fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240549fe:	2b00      	cmp	r3, #0
24054a00:	d107      	bne.n	24054a12 <HAL_ADC_Start_IT+0x10a>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
24054a02:	687b      	ldr	r3, [r7, #4]
24054a04:	681b      	ldr	r3, [r3, #0]
24054a06:	685a      	ldr	r2, [r3, #4]
24054a08:	687b      	ldr	r3, [r7, #4]
24054a0a:	681b      	ldr	r3, [r3, #0]
24054a0c:	f042 0210 	orr.w	r2, r2, #16
24054a10:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24054a12:	687b      	ldr	r3, [r7, #4]
24054a14:	681b      	ldr	r3, [r3, #0]
24054a16:	4a51      	ldr	r2, [pc, #324]	; (24054b5c <HAL_ADC_Start_IT+0x254>)
24054a18:	4293      	cmp	r3, r2
24054a1a:	d002      	beq.n	24054a22 <HAL_ADC_Start_IT+0x11a>
24054a1c:	687b      	ldr	r3, [r7, #4]
24054a1e:	681b      	ldr	r3, [r3, #0]
24054a20:	e000      	b.n	24054a24 <HAL_ADC_Start_IT+0x11c>
24054a22:	4b4f      	ldr	r3, [pc, #316]	; (24054b60 <HAL_ADC_Start_IT+0x258>)
24054a24:	687a      	ldr	r2, [r7, #4]
24054a26:	6812      	ldr	r2, [r2, #0]
24054a28:	4293      	cmp	r3, r2
24054a2a:	d008      	beq.n	24054a3e <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054a2c:	693b      	ldr	r3, [r7, #16]
24054a2e:	2b00      	cmp	r3, #0
24054a30:	d005      	beq.n	24054a3e <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
24054a32:	693b      	ldr	r3, [r7, #16]
24054a34:	2b05      	cmp	r3, #5
24054a36:	d002      	beq.n	24054a3e <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
24054a38:	693b      	ldr	r3, [r7, #16]
24054a3a:	2b09      	cmp	r3, #9
24054a3c:	d13a      	bne.n	24054ab4 <HAL_ADC_Start_IT+0x1ac>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
24054a3e:	687b      	ldr	r3, [r7, #4]
24054a40:	681b      	ldr	r3, [r3, #0]
24054a42:	68db      	ldr	r3, [r3, #12]
24054a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24054a48:	2b00      	cmp	r3, #0
24054a4a:	d02d      	beq.n	24054aa8 <HAL_ADC_Start_IT+0x1a0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
24054a4c:	687b      	ldr	r3, [r7, #4]
24054a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054a50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24054a54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
24054a58:	687b      	ldr	r3, [r7, #4]
24054a5a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
24054a5c:	687b      	ldr	r3, [r7, #4]
24054a5e:	691b      	ldr	r3, [r3, #16]
24054a60:	2b08      	cmp	r3, #8
24054a62:	d110      	bne.n	24054a86 <HAL_ADC_Start_IT+0x17e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
24054a64:	687b      	ldr	r3, [r7, #4]
24054a66:	681b      	ldr	r3, [r3, #0]
24054a68:	685a      	ldr	r2, [r3, #4]
24054a6a:	687b      	ldr	r3, [r7, #4]
24054a6c:	681b      	ldr	r3, [r3, #0]
24054a6e:	f022 0220 	bic.w	r2, r2, #32
24054a72:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
24054a74:	687b      	ldr	r3, [r7, #4]
24054a76:	681b      	ldr	r3, [r3, #0]
24054a78:	685a      	ldr	r2, [r3, #4]
24054a7a:	687b      	ldr	r3, [r7, #4]
24054a7c:	681b      	ldr	r3, [r3, #0]
24054a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24054a82:	605a      	str	r2, [r3, #4]
              break;
24054a84:	e010      	b.n	24054aa8 <HAL_ADC_Start_IT+0x1a0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
24054a86:	687b      	ldr	r3, [r7, #4]
24054a88:	681b      	ldr	r3, [r3, #0]
24054a8a:	685a      	ldr	r2, [r3, #4]
24054a8c:	687b      	ldr	r3, [r7, #4]
24054a8e:	681b      	ldr	r3, [r3, #0]
24054a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
24054a94:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
24054a96:	687b      	ldr	r3, [r7, #4]
24054a98:	681b      	ldr	r3, [r3, #0]
24054a9a:	685a      	ldr	r2, [r3, #4]
24054a9c:	687b      	ldr	r3, [r7, #4]
24054a9e:	681b      	ldr	r3, [r3, #0]
24054aa0:	f042 0220 	orr.w	r2, r2, #32
24054aa4:	605a      	str	r2, [r3, #4]
              break;
24054aa6:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
24054aa8:	687b      	ldr	r3, [r7, #4]
24054aaa:	681b      	ldr	r3, [r3, #0]
24054aac:	4618      	mov	r0, r3
24054aae:	f7ff fbdb 	bl	24054268 <LL_ADC_REG_StartConversion>
24054ab2:	e04a      	b.n	24054b4a <HAL_ADC_Start_IT+0x242>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
24054ab4:	687b      	ldr	r3, [r7, #4]
24054ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054ab8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
24054abc:	687b      	ldr	r3, [r7, #4]
24054abe:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
24054ac0:	687b      	ldr	r3, [r7, #4]
24054ac2:	681b      	ldr	r3, [r3, #0]
24054ac4:	4a25      	ldr	r2, [pc, #148]	; (24054b5c <HAL_ADC_Start_IT+0x254>)
24054ac6:	4293      	cmp	r3, r2
24054ac8:	d002      	beq.n	24054ad0 <HAL_ADC_Start_IT+0x1c8>
24054aca:	687b      	ldr	r3, [r7, #4]
24054acc:	681b      	ldr	r3, [r3, #0]
24054ace:	e000      	b.n	24054ad2 <HAL_ADC_Start_IT+0x1ca>
24054ad0:	4b23      	ldr	r3, [pc, #140]	; (24054b60 <HAL_ADC_Start_IT+0x258>)
24054ad2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
24054ad4:	68fb      	ldr	r3, [r7, #12]
24054ad6:	68db      	ldr	r3, [r3, #12]
24054ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24054adc:	2b00      	cmp	r3, #0
24054ade:	d034      	beq.n	24054b4a <HAL_ADC_Start_IT+0x242>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
24054ae0:	687b      	ldr	r3, [r7, #4]
24054ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054ae4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24054ae8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
24054aec:	687b      	ldr	r3, [r7, #4]
24054aee:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
24054af0:	687b      	ldr	r3, [r7, #4]
24054af2:	691b      	ldr	r3, [r3, #16]
24054af4:	2b08      	cmp	r3, #8
24054af6:	d110      	bne.n	24054b1a <HAL_ADC_Start_IT+0x212>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
24054af8:	687b      	ldr	r3, [r7, #4]
24054afa:	681b      	ldr	r3, [r3, #0]
24054afc:	685a      	ldr	r2, [r3, #4]
24054afe:	687b      	ldr	r3, [r7, #4]
24054b00:	681b      	ldr	r3, [r3, #0]
24054b02:	f022 0220 	bic.w	r2, r2, #32
24054b06:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
24054b08:	687b      	ldr	r3, [r7, #4]
24054b0a:	681b      	ldr	r3, [r3, #0]
24054b0c:	685a      	ldr	r2, [r3, #4]
24054b0e:	687b      	ldr	r3, [r7, #4]
24054b10:	681b      	ldr	r3, [r3, #0]
24054b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24054b16:	605a      	str	r2, [r3, #4]
              break;
24054b18:	e017      	b.n	24054b4a <HAL_ADC_Start_IT+0x242>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
24054b1a:	687b      	ldr	r3, [r7, #4]
24054b1c:	681b      	ldr	r3, [r3, #0]
24054b1e:	685a      	ldr	r2, [r3, #4]
24054b20:	687b      	ldr	r3, [r7, #4]
24054b22:	681b      	ldr	r3, [r3, #0]
24054b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
24054b28:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
24054b2a:	687b      	ldr	r3, [r7, #4]
24054b2c:	681b      	ldr	r3, [r3, #0]
24054b2e:	685a      	ldr	r2, [r3, #4]
24054b30:	687b      	ldr	r3, [r7, #4]
24054b32:	681b      	ldr	r3, [r3, #0]
24054b34:	f042 0220 	orr.w	r2, r2, #32
24054b38:	605a      	str	r2, [r3, #4]
              break;
24054b3a:	e006      	b.n	24054b4a <HAL_ADC_Start_IT+0x242>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
24054b3c:	687b      	ldr	r3, [r7, #4]
24054b3e:	2200      	movs	r2, #0
24054b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
24054b44:	e001      	b.n	24054b4a <HAL_ADC_Start_IT+0x242>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
24054b46:	2302      	movs	r3, #2
24054b48:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
24054b4a:	7dfb      	ldrb	r3, [r7, #23]
}
24054b4c:	4618      	mov	r0, r3
24054b4e:	3718      	adds	r7, #24
24054b50:	46bd      	mov	sp, r7
24054b52:	bd80      	pop	{r7, pc}
24054b54:	40022300 	.word	0x40022300
24054b58:	fffff0fe 	.word	0xfffff0fe
24054b5c:	40022100 	.word	0x40022100
24054b60:	40022000 	.word	0x40022000

24054b64 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
24054b64:	b580      	push	{r7, lr}
24054b66:	b084      	sub	sp, #16
24054b68:	af00      	add	r7, sp, #0
24054b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
24054b6c:	687b      	ldr	r3, [r7, #4]
24054b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
24054b72:	2b01      	cmp	r3, #1
24054b74:	d101      	bne.n	24054b7a <HAL_ADC_Stop_IT+0x16>
24054b76:	2302      	movs	r3, #2
24054b78:	e029      	b.n	24054bce <HAL_ADC_Stop_IT+0x6a>
24054b7a:	687b      	ldr	r3, [r7, #4]
24054b7c:	2201      	movs	r2, #1
24054b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
24054b82:	2103      	movs	r1, #3
24054b84:	6878      	ldr	r0, [r7, #4]
24054b86:	f000 fd4b 	bl	24055620 <ADC_ConversionStop>
24054b8a:	4603      	mov	r3, r0
24054b8c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
24054b8e:	7bfb      	ldrb	r3, [r7, #15]
24054b90:	2b00      	cmp	r3, #0
24054b92:	d117      	bne.n	24054bc4 <HAL_ADC_Stop_IT+0x60>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
24054b94:	687b      	ldr	r3, [r7, #4]
24054b96:	681b      	ldr	r3, [r3, #0]
24054b98:	685a      	ldr	r2, [r3, #4]
24054b9a:	687b      	ldr	r3, [r7, #4]
24054b9c:	681b      	ldr	r3, [r3, #0]
24054b9e:	f022 021c 	bic.w	r2, r2, #28
24054ba2:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
24054ba4:	6878      	ldr	r0, [r7, #4]
24054ba6:	f000 fe73 	bl	24055890 <ADC_Disable>
24054baa:	4603      	mov	r3, r0
24054bac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
24054bae:	7bfb      	ldrb	r3, [r7, #15]
24054bb0:	2b00      	cmp	r3, #0
24054bb2:	d107      	bne.n	24054bc4 <HAL_ADC_Stop_IT+0x60>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
24054bb4:	687b      	ldr	r3, [r7, #4]
24054bb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
24054bb8:	4b07      	ldr	r3, [pc, #28]	; (24054bd8 <HAL_ADC_Stop_IT+0x74>)
24054bba:	4013      	ands	r3, r2
24054bbc:	f043 0201 	orr.w	r2, r3, #1
24054bc0:	687b      	ldr	r3, [r7, #4]
24054bc2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
24054bc4:	687b      	ldr	r3, [r7, #4]
24054bc6:	2200      	movs	r2, #0
24054bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
24054bcc:	7bfb      	ldrb	r3, [r7, #15]
}
24054bce:	4618      	mov	r0, r3
24054bd0:	3710      	adds	r7, #16
24054bd2:	46bd      	mov	sp, r7
24054bd4:	bd80      	pop	{r7, pc}
24054bd6:	bf00      	nop
24054bd8:	ffffeefe 	.word	0xffffeefe

24054bdc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
24054bdc:	b480      	push	{r7}
24054bde:	b083      	sub	sp, #12
24054be0:	af00      	add	r7, sp, #0
24054be2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
24054be4:	687b      	ldr	r3, [r7, #4]
24054be6:	681b      	ldr	r3, [r3, #0]
24054be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
24054bea:	4618      	mov	r0, r3
24054bec:	370c      	adds	r7, #12
24054bee:	46bd      	mov	sp, r7
24054bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
24054bf4:	4770      	bx	lr
	...

24054bf8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
24054bf8:	b580      	push	{r7, lr}
24054bfa:	b08a      	sub	sp, #40	; 0x28
24054bfc:	af00      	add	r7, sp, #0
24054bfe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
24054c00:	2300      	movs	r3, #0
24054c02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
24054c04:	687b      	ldr	r3, [r7, #4]
24054c06:	681b      	ldr	r3, [r3, #0]
24054c08:	681b      	ldr	r3, [r3, #0]
24054c0a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
24054c0c:	687b      	ldr	r3, [r7, #4]
24054c0e:	681b      	ldr	r3, [r3, #0]
24054c10:	685b      	ldr	r3, [r3, #4]
24054c12:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24054c14:	4882      	ldr	r0, [pc, #520]	; (24054e20 <HAL_ADC_IRQHandler+0x228>)
24054c16:	f7ff fa6f 	bl	240540f8 <LL_ADC_GetMultimode>
24054c1a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
24054c1c:	69fb      	ldr	r3, [r7, #28]
24054c1e:	f003 0302 	and.w	r3, r3, #2
24054c22:	2b00      	cmp	r3, #0
24054c24:	d017      	beq.n	24054c56 <HAL_ADC_IRQHandler+0x5e>
24054c26:	69bb      	ldr	r3, [r7, #24]
24054c28:	f003 0302 	and.w	r3, r3, #2
24054c2c:	2b00      	cmp	r3, #0
24054c2e:	d012      	beq.n	24054c56 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24054c30:	687b      	ldr	r3, [r7, #4]
24054c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054c34:	f003 0310 	and.w	r3, r3, #16
24054c38:	2b00      	cmp	r3, #0
24054c3a:	d105      	bne.n	24054c48 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
24054c3c:	687b      	ldr	r3, [r7, #4]
24054c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054c40:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
24054c44:	687b      	ldr	r3, [r7, #4]
24054c46:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
24054c48:	6878      	ldr	r0, [r7, #4]
24054c4a:	f000 ff9d 	bl	24055b88 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
24054c4e:	687b      	ldr	r3, [r7, #4]
24054c50:	681b      	ldr	r3, [r3, #0]
24054c52:	2202      	movs	r2, #2
24054c54:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
24054c56:	69fb      	ldr	r3, [r7, #28]
24054c58:	f003 0304 	and.w	r3, r3, #4
24054c5c:	2b00      	cmp	r3, #0
24054c5e:	d004      	beq.n	24054c6a <HAL_ADC_IRQHandler+0x72>
24054c60:	69bb      	ldr	r3, [r7, #24]
24054c62:	f003 0304 	and.w	r3, r3, #4
24054c66:	2b00      	cmp	r3, #0
24054c68:	d10a      	bne.n	24054c80 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
24054c6a:	69fb      	ldr	r3, [r7, #28]
24054c6c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
24054c70:	2b00      	cmp	r3, #0
24054c72:	f000 8083 	beq.w	24054d7c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
24054c76:	69bb      	ldr	r3, [r7, #24]
24054c78:	f003 0308 	and.w	r3, r3, #8
24054c7c:	2b00      	cmp	r3, #0
24054c7e:	d07d      	beq.n	24054d7c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24054c80:	687b      	ldr	r3, [r7, #4]
24054c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054c84:	f003 0310 	and.w	r3, r3, #16
24054c88:	2b00      	cmp	r3, #0
24054c8a:	d105      	bne.n	24054c98 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
24054c8c:	687b      	ldr	r3, [r7, #4]
24054c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054c90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
24054c94:	687b      	ldr	r3, [r7, #4]
24054c96:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
24054c98:	687b      	ldr	r3, [r7, #4]
24054c9a:	681b      	ldr	r3, [r3, #0]
24054c9c:	4618      	mov	r0, r3
24054c9e:	f7ff f989 	bl	24053fb4 <LL_ADC_REG_IsTriggerSourceSWStart>
24054ca2:	4603      	mov	r3, r0
24054ca4:	2b00      	cmp	r3, #0
24054ca6:	d062      	beq.n	24054d6e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24054ca8:	687b      	ldr	r3, [r7, #4]
24054caa:	681b      	ldr	r3, [r3, #0]
24054cac:	4a5d      	ldr	r2, [pc, #372]	; (24054e24 <HAL_ADC_IRQHandler+0x22c>)
24054cae:	4293      	cmp	r3, r2
24054cb0:	d002      	beq.n	24054cb8 <HAL_ADC_IRQHandler+0xc0>
24054cb2:	687b      	ldr	r3, [r7, #4]
24054cb4:	681b      	ldr	r3, [r3, #0]
24054cb6:	e000      	b.n	24054cba <HAL_ADC_IRQHandler+0xc2>
24054cb8:	4b5b      	ldr	r3, [pc, #364]	; (24054e28 <HAL_ADC_IRQHandler+0x230>)
24054cba:	687a      	ldr	r2, [r7, #4]
24054cbc:	6812      	ldr	r2, [r2, #0]
24054cbe:	4293      	cmp	r3, r2
24054cc0:	d008      	beq.n	24054cd4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054cc2:	697b      	ldr	r3, [r7, #20]
24054cc4:	2b00      	cmp	r3, #0
24054cc6:	d005      	beq.n	24054cd4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
24054cc8:	697b      	ldr	r3, [r7, #20]
24054cca:	2b05      	cmp	r3, #5
24054ccc:	d002      	beq.n	24054cd4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
24054cce:	697b      	ldr	r3, [r7, #20]
24054cd0:	2b09      	cmp	r3, #9
24054cd2:	d104      	bne.n	24054cde <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
24054cd4:	687b      	ldr	r3, [r7, #4]
24054cd6:	681b      	ldr	r3, [r3, #0]
24054cd8:	68db      	ldr	r3, [r3, #12]
24054cda:	623b      	str	r3, [r7, #32]
24054cdc:	e00c      	b.n	24054cf8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
24054cde:	687b      	ldr	r3, [r7, #4]
24054ce0:	681b      	ldr	r3, [r3, #0]
24054ce2:	4a50      	ldr	r2, [pc, #320]	; (24054e24 <HAL_ADC_IRQHandler+0x22c>)
24054ce4:	4293      	cmp	r3, r2
24054ce6:	d002      	beq.n	24054cee <HAL_ADC_IRQHandler+0xf6>
24054ce8:	687b      	ldr	r3, [r7, #4]
24054cea:	681b      	ldr	r3, [r3, #0]
24054cec:	e000      	b.n	24054cf0 <HAL_ADC_IRQHandler+0xf8>
24054cee:	4b4e      	ldr	r3, [pc, #312]	; (24054e28 <HAL_ADC_IRQHandler+0x230>)
24054cf0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
24054cf2:	693b      	ldr	r3, [r7, #16]
24054cf4:	68db      	ldr	r3, [r3, #12]
24054cf6:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
24054cf8:	6a3b      	ldr	r3, [r7, #32]
24054cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24054cfe:	2b00      	cmp	r3, #0
24054d00:	d135      	bne.n	24054d6e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
24054d02:	687b      	ldr	r3, [r7, #4]
24054d04:	681b      	ldr	r3, [r3, #0]
24054d06:	681b      	ldr	r3, [r3, #0]
24054d08:	f003 0308 	and.w	r3, r3, #8
24054d0c:	2b08      	cmp	r3, #8
24054d0e:	d12e      	bne.n	24054d6e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24054d10:	687b      	ldr	r3, [r7, #4]
24054d12:	681b      	ldr	r3, [r3, #0]
24054d14:	4618      	mov	r0, r3
24054d16:	f7ff facf 	bl	240542b8 <LL_ADC_REG_IsConversionOngoing>
24054d1a:	4603      	mov	r3, r0
24054d1c:	2b00      	cmp	r3, #0
24054d1e:	d11a      	bne.n	24054d56 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
24054d20:	687b      	ldr	r3, [r7, #4]
24054d22:	681b      	ldr	r3, [r3, #0]
24054d24:	685a      	ldr	r2, [r3, #4]
24054d26:	687b      	ldr	r3, [r7, #4]
24054d28:	681b      	ldr	r3, [r3, #0]
24054d2a:	f022 020c 	bic.w	r2, r2, #12
24054d2e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
24054d30:	687b      	ldr	r3, [r7, #4]
24054d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
24054d38:	687b      	ldr	r3, [r7, #4]
24054d3a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
24054d3c:	687b      	ldr	r3, [r7, #4]
24054d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24054d44:	2b00      	cmp	r3, #0
24054d46:	d112      	bne.n	24054d6e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
24054d48:	687b      	ldr	r3, [r7, #4]
24054d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054d4c:	f043 0201 	orr.w	r2, r3, #1
24054d50:	687b      	ldr	r3, [r7, #4]
24054d52:	655a      	str	r2, [r3, #84]	; 0x54
24054d54:	e00b      	b.n	24054d6e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24054d56:	687b      	ldr	r3, [r7, #4]
24054d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054d5a:	f043 0210 	orr.w	r2, r3, #16
24054d5e:	687b      	ldr	r3, [r7, #4]
24054d60:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24054d62:	687b      	ldr	r3, [r7, #4]
24054d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24054d66:	f043 0201 	orr.w	r2, r3, #1
24054d6a:	687b      	ldr	r3, [r7, #4]
24054d6c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
24054d6e:	6878      	ldr	r0, [r7, #4]
24054d70:	f7fc fc02 	bl	24051578 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
24054d74:	687b      	ldr	r3, [r7, #4]
24054d76:	681b      	ldr	r3, [r3, #0]
24054d78:	220c      	movs	r2, #12
24054d7a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
24054d7c:	69fb      	ldr	r3, [r7, #28]
24054d7e:	f003 0320 	and.w	r3, r3, #32
24054d82:	2b00      	cmp	r3, #0
24054d84:	d004      	beq.n	24054d90 <HAL_ADC_IRQHandler+0x198>
24054d86:	69bb      	ldr	r3, [r7, #24]
24054d88:	f003 0320 	and.w	r3, r3, #32
24054d8c:	2b00      	cmp	r3, #0
24054d8e:	d10b      	bne.n	24054da8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
24054d90:	69fb      	ldr	r3, [r7, #28]
24054d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
24054d96:	2b00      	cmp	r3, #0
24054d98:	f000 809f 	beq.w	24054eda <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
24054d9c:	69bb      	ldr	r3, [r7, #24]
24054d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
24054da2:	2b00      	cmp	r3, #0
24054da4:	f000 8099 	beq.w	24054eda <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24054da8:	687b      	ldr	r3, [r7, #4]
24054daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054dac:	f003 0310 	and.w	r3, r3, #16
24054db0:	2b00      	cmp	r3, #0
24054db2:	d105      	bne.n	24054dc0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
24054db4:	687b      	ldr	r3, [r7, #4]
24054db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054db8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
24054dbc:	687b      	ldr	r3, [r7, #4]
24054dbe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
24054dc0:	687b      	ldr	r3, [r7, #4]
24054dc2:	681b      	ldr	r3, [r3, #0]
24054dc4:	4618      	mov	r0, r3
24054dc6:	f7ff f934 	bl	24054032 <LL_ADC_INJ_IsTriggerSourceSWStart>
24054dca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
24054dcc:	687b      	ldr	r3, [r7, #4]
24054dce:	681b      	ldr	r3, [r3, #0]
24054dd0:	4618      	mov	r0, r3
24054dd2:	f7ff f8ef 	bl	24053fb4 <LL_ADC_REG_IsTriggerSourceSWStart>
24054dd6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24054dd8:	687b      	ldr	r3, [r7, #4]
24054dda:	681b      	ldr	r3, [r3, #0]
24054ddc:	4a11      	ldr	r2, [pc, #68]	; (24054e24 <HAL_ADC_IRQHandler+0x22c>)
24054dde:	4293      	cmp	r3, r2
24054de0:	d002      	beq.n	24054de8 <HAL_ADC_IRQHandler+0x1f0>
24054de2:	687b      	ldr	r3, [r7, #4]
24054de4:	681b      	ldr	r3, [r3, #0]
24054de6:	e000      	b.n	24054dea <HAL_ADC_IRQHandler+0x1f2>
24054de8:	4b0f      	ldr	r3, [pc, #60]	; (24054e28 <HAL_ADC_IRQHandler+0x230>)
24054dea:	687a      	ldr	r2, [r7, #4]
24054dec:	6812      	ldr	r2, [r2, #0]
24054dee:	4293      	cmp	r3, r2
24054df0:	d008      	beq.n	24054e04 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054df2:	697b      	ldr	r3, [r7, #20]
24054df4:	2b00      	cmp	r3, #0
24054df6:	d005      	beq.n	24054e04 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
24054df8:	697b      	ldr	r3, [r7, #20]
24054dfa:	2b06      	cmp	r3, #6
24054dfc:	d002      	beq.n	24054e04 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
24054dfe:	697b      	ldr	r3, [r7, #20]
24054e00:	2b07      	cmp	r3, #7
24054e02:	d104      	bne.n	24054e0e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
24054e04:	687b      	ldr	r3, [r7, #4]
24054e06:	681b      	ldr	r3, [r3, #0]
24054e08:	68db      	ldr	r3, [r3, #12]
24054e0a:	623b      	str	r3, [r7, #32]
24054e0c:	e013      	b.n	24054e36 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
24054e0e:	687b      	ldr	r3, [r7, #4]
24054e10:	681b      	ldr	r3, [r3, #0]
24054e12:	4a04      	ldr	r2, [pc, #16]	; (24054e24 <HAL_ADC_IRQHandler+0x22c>)
24054e14:	4293      	cmp	r3, r2
24054e16:	d009      	beq.n	24054e2c <HAL_ADC_IRQHandler+0x234>
24054e18:	687b      	ldr	r3, [r7, #4]
24054e1a:	681b      	ldr	r3, [r3, #0]
24054e1c:	e007      	b.n	24054e2e <HAL_ADC_IRQHandler+0x236>
24054e1e:	bf00      	nop
24054e20:	40022300 	.word	0x40022300
24054e24:	40022100 	.word	0x40022100
24054e28:	40022000 	.word	0x40022000
24054e2c:	4b7d      	ldr	r3, [pc, #500]	; (24055024 <HAL_ADC_IRQHandler+0x42c>)
24054e2e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
24054e30:	693b      	ldr	r3, [r7, #16]
24054e32:	68db      	ldr	r3, [r3, #12]
24054e34:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
24054e36:	68fb      	ldr	r3, [r7, #12]
24054e38:	2b00      	cmp	r3, #0
24054e3a:	d047      	beq.n	24054ecc <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
24054e3c:	6a3b      	ldr	r3, [r7, #32]
24054e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24054e42:	2b00      	cmp	r3, #0
24054e44:	d007      	beq.n	24054e56 <HAL_ADC_IRQHandler+0x25e>
24054e46:	68bb      	ldr	r3, [r7, #8]
24054e48:	2b00      	cmp	r3, #0
24054e4a:	d03f      	beq.n	24054ecc <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
24054e4c:	6a3b      	ldr	r3, [r7, #32]
24054e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
24054e52:	2b00      	cmp	r3, #0
24054e54:	d13a      	bne.n	24054ecc <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
24054e56:	687b      	ldr	r3, [r7, #4]
24054e58:	681b      	ldr	r3, [r3, #0]
24054e5a:	681b      	ldr	r3, [r3, #0]
24054e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
24054e60:	2b40      	cmp	r3, #64	; 0x40
24054e62:	d133      	bne.n	24054ecc <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
24054e64:	6a3b      	ldr	r3, [r7, #32]
24054e66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24054e6a:	2b00      	cmp	r3, #0
24054e6c:	d12e      	bne.n	24054ecc <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
24054e6e:	687b      	ldr	r3, [r7, #4]
24054e70:	681b      	ldr	r3, [r3, #0]
24054e72:	4618      	mov	r0, r3
24054e74:	f7ff fa48 	bl	24054308 <LL_ADC_INJ_IsConversionOngoing>
24054e78:	4603      	mov	r3, r0
24054e7a:	2b00      	cmp	r3, #0
24054e7c:	d11a      	bne.n	24054eb4 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
24054e7e:	687b      	ldr	r3, [r7, #4]
24054e80:	681b      	ldr	r3, [r3, #0]
24054e82:	685a      	ldr	r2, [r3, #4]
24054e84:	687b      	ldr	r3, [r7, #4]
24054e86:	681b      	ldr	r3, [r3, #0]
24054e88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
24054e8c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
24054e8e:	687b      	ldr	r3, [r7, #4]
24054e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
24054e96:	687b      	ldr	r3, [r7, #4]
24054e98:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
24054e9a:	687b      	ldr	r3, [r7, #4]
24054e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
24054ea2:	2b00      	cmp	r3, #0
24054ea4:	d112      	bne.n	24054ecc <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
24054ea6:	687b      	ldr	r3, [r7, #4]
24054ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054eaa:	f043 0201 	orr.w	r2, r3, #1
24054eae:	687b      	ldr	r3, [r7, #4]
24054eb0:	655a      	str	r2, [r3, #84]	; 0x54
24054eb2:	e00b      	b.n	24054ecc <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24054eb4:	687b      	ldr	r3, [r7, #4]
24054eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054eb8:	f043 0210 	orr.w	r2, r3, #16
24054ebc:	687b      	ldr	r3, [r7, #4]
24054ebe:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24054ec0:	687b      	ldr	r3, [r7, #4]
24054ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24054ec4:	f043 0201 	orr.w	r2, r3, #1
24054ec8:	687b      	ldr	r3, [r7, #4]
24054eca:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
24054ecc:	6878      	ldr	r0, [r7, #4]
24054ece:	f000 fe33 	bl	24055b38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
24054ed2:	687b      	ldr	r3, [r7, #4]
24054ed4:	681b      	ldr	r3, [r3, #0]
24054ed6:	2260      	movs	r2, #96	; 0x60
24054ed8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
24054eda:	69fb      	ldr	r3, [r7, #28]
24054edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
24054ee0:	2b00      	cmp	r3, #0
24054ee2:	d011      	beq.n	24054f08 <HAL_ADC_IRQHandler+0x310>
24054ee4:	69bb      	ldr	r3, [r7, #24]
24054ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
24054eea:	2b00      	cmp	r3, #0
24054eec:	d00c      	beq.n	24054f08 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
24054eee:	687b      	ldr	r3, [r7, #4]
24054ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054ef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
24054ef6:	687b      	ldr	r3, [r7, #4]
24054ef8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
24054efa:	6878      	ldr	r0, [r7, #4]
24054efc:	f000 f896 	bl	2405502c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
24054f00:	687b      	ldr	r3, [r7, #4]
24054f02:	681b      	ldr	r3, [r3, #0]
24054f04:	2280      	movs	r2, #128	; 0x80
24054f06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
24054f08:	69fb      	ldr	r3, [r7, #28]
24054f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
24054f0e:	2b00      	cmp	r3, #0
24054f10:	d012      	beq.n	24054f38 <HAL_ADC_IRQHandler+0x340>
24054f12:	69bb      	ldr	r3, [r7, #24]
24054f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
24054f18:	2b00      	cmp	r3, #0
24054f1a:	d00d      	beq.n	24054f38 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
24054f1c:	687b      	ldr	r3, [r7, #4]
24054f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054f20:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
24054f24:	687b      	ldr	r3, [r7, #4]
24054f26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
24054f28:	6878      	ldr	r0, [r7, #4]
24054f2a:	f000 fe19 	bl	24055b60 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
24054f2e:	687b      	ldr	r3, [r7, #4]
24054f30:	681b      	ldr	r3, [r3, #0]
24054f32:	f44f 7280 	mov.w	r2, #256	; 0x100
24054f36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
24054f38:	69fb      	ldr	r3, [r7, #28]
24054f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
24054f3e:	2b00      	cmp	r3, #0
24054f40:	d012      	beq.n	24054f68 <HAL_ADC_IRQHandler+0x370>
24054f42:	69bb      	ldr	r3, [r7, #24]
24054f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
24054f48:	2b00      	cmp	r3, #0
24054f4a:	d00d      	beq.n	24054f68 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
24054f4c:	687b      	ldr	r3, [r7, #4]
24054f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054f50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
24054f54:	687b      	ldr	r3, [r7, #4]
24054f56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
24054f58:	6878      	ldr	r0, [r7, #4]
24054f5a:	f000 fe0b 	bl	24055b74 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
24054f5e:	687b      	ldr	r3, [r7, #4]
24054f60:	681b      	ldr	r3, [r3, #0]
24054f62:	f44f 7200 	mov.w	r2, #512	; 0x200
24054f66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
24054f68:	69fb      	ldr	r3, [r7, #28]
24054f6a:	f003 0310 	and.w	r3, r3, #16
24054f6e:	2b00      	cmp	r3, #0
24054f70:	d036      	beq.n	24054fe0 <HAL_ADC_IRQHandler+0x3e8>
24054f72:	69bb      	ldr	r3, [r7, #24]
24054f74:	f003 0310 	and.w	r3, r3, #16
24054f78:	2b00      	cmp	r3, #0
24054f7a:	d031      	beq.n	24054fe0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
24054f7c:	687b      	ldr	r3, [r7, #4]
24054f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24054f80:	2b00      	cmp	r3, #0
24054f82:	d102      	bne.n	24054f8a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
24054f84:	2301      	movs	r3, #1
24054f86:	627b      	str	r3, [r7, #36]	; 0x24
24054f88:	e014      	b.n	24054fb4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
24054f8a:	697b      	ldr	r3, [r7, #20]
24054f8c:	2b00      	cmp	r3, #0
24054f8e:	d008      	beq.n	24054fa2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
24054f90:	4825      	ldr	r0, [pc, #148]	; (24055028 <HAL_ADC_IRQHandler+0x430>)
24054f92:	f7ff f8bf 	bl	24054114 <LL_ADC_GetMultiDMATransfer>
24054f96:	4603      	mov	r3, r0
24054f98:	2b00      	cmp	r3, #0
24054f9a:	d00b      	beq.n	24054fb4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
24054f9c:	2301      	movs	r3, #1
24054f9e:	627b      	str	r3, [r7, #36]	; 0x24
24054fa0:	e008      	b.n	24054fb4 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
24054fa2:	687b      	ldr	r3, [r7, #4]
24054fa4:	681b      	ldr	r3, [r3, #0]
24054fa6:	68db      	ldr	r3, [r3, #12]
24054fa8:	f003 0303 	and.w	r3, r3, #3
24054fac:	2b00      	cmp	r3, #0
24054fae:	d001      	beq.n	24054fb4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
24054fb0:	2301      	movs	r3, #1
24054fb2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
24054fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24054fb6:	2b01      	cmp	r3, #1
24054fb8:	d10e      	bne.n	24054fd8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
24054fba:	687b      	ldr	r3, [r7, #4]
24054fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054fbe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
24054fc2:	687b      	ldr	r3, [r7, #4]
24054fc4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
24054fc6:	687b      	ldr	r3, [r7, #4]
24054fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24054fca:	f043 0202 	orr.w	r2, r3, #2
24054fce:	687b      	ldr	r3, [r7, #4]
24054fd0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
24054fd2:	6878      	ldr	r0, [r7, #4]
24054fd4:	f000 f834 	bl	24055040 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
24054fd8:	687b      	ldr	r3, [r7, #4]
24054fda:	681b      	ldr	r3, [r3, #0]
24054fdc:	2210      	movs	r2, #16
24054fde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
24054fe0:	69fb      	ldr	r3, [r7, #28]
24054fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24054fe6:	2b00      	cmp	r3, #0
24054fe8:	d018      	beq.n	2405501c <HAL_ADC_IRQHandler+0x424>
24054fea:	69bb      	ldr	r3, [r7, #24]
24054fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24054ff0:	2b00      	cmp	r3, #0
24054ff2:	d013      	beq.n	2405501c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
24054ff4:	687b      	ldr	r3, [r7, #4]
24054ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054ff8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
24054ffc:	687b      	ldr	r3, [r7, #4]
24054ffe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
24055000:	687b      	ldr	r3, [r7, #4]
24055002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24055004:	f043 0208 	orr.w	r2, r3, #8
24055008:	687b      	ldr	r3, [r7, #4]
2405500a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
2405500c:	687b      	ldr	r3, [r7, #4]
2405500e:	681b      	ldr	r3, [r3, #0]
24055010:	f44f 6280 	mov.w	r2, #1024	; 0x400
24055014:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
24055016:	6878      	ldr	r0, [r7, #4]
24055018:	f000 fd98 	bl	24055b4c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
2405501c:	bf00      	nop
2405501e:	3728      	adds	r7, #40	; 0x28
24055020:	46bd      	mov	sp, r7
24055022:	bd80      	pop	{r7, pc}
24055024:	40022000 	.word	0x40022000
24055028:	40022300 	.word	0x40022300

2405502c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
2405502c:	b480      	push	{r7}
2405502e:	b083      	sub	sp, #12
24055030:	af00      	add	r7, sp, #0
24055032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
24055034:	bf00      	nop
24055036:	370c      	adds	r7, #12
24055038:	46bd      	mov	sp, r7
2405503a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405503e:	4770      	bx	lr

24055040 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
24055040:	b480      	push	{r7}
24055042:	b083      	sub	sp, #12
24055044:	af00      	add	r7, sp, #0
24055046:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
24055048:	bf00      	nop
2405504a:	370c      	adds	r7, #12
2405504c:	46bd      	mov	sp, r7
2405504e:	f85d 7b04 	ldr.w	r7, [sp], #4
24055052:	4770      	bx	lr

24055054 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
24055054:	b590      	push	{r4, r7, lr}
24055056:	b0a1      	sub	sp, #132	; 0x84
24055058:	af00      	add	r7, sp, #0
2405505a:	6078      	str	r0, [r7, #4]
2405505c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2405505e:	2300      	movs	r3, #0
24055060:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
24055064:	2300      	movs	r3, #0
24055066:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
24055068:	683b      	ldr	r3, [r7, #0]
2405506a:	68db      	ldr	r3, [r3, #12]
2405506c:	4a9a      	ldr	r2, [pc, #616]	; (240552d8 <HAL_ADC_ConfigChannel+0x284>)
2405506e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
24055070:	687b      	ldr	r3, [r7, #4]
24055072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
24055076:	2b01      	cmp	r3, #1
24055078:	d101      	bne.n	2405507e <HAL_ADC_ConfigChannel+0x2a>
2405507a:	2302      	movs	r3, #2
2405507c:	e2bc      	b.n	240555f8 <HAL_ADC_ConfigChannel+0x5a4>
2405507e:	687b      	ldr	r3, [r7, #4]
24055080:	2201      	movs	r2, #1
24055082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24055086:	687b      	ldr	r3, [r7, #4]
24055088:	681b      	ldr	r3, [r3, #0]
2405508a:	4618      	mov	r0, r3
2405508c:	f7ff f914 	bl	240542b8 <LL_ADC_REG_IsConversionOngoing>
24055090:	4603      	mov	r3, r0
24055092:	2b00      	cmp	r3, #0
24055094:	f040 82a1 	bne.w	240555da <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
24055098:	683b      	ldr	r3, [r7, #0]
2405509a:	681b      	ldr	r3, [r3, #0]
2405509c:	f3c3 0313 	ubfx	r3, r3, #0, #20
240550a0:	2b00      	cmp	r3, #0
240550a2:	d108      	bne.n	240550b6 <HAL_ADC_ConfigChannel+0x62>
240550a4:	683b      	ldr	r3, [r7, #0]
240550a6:	681b      	ldr	r3, [r3, #0]
240550a8:	0e9b      	lsrs	r3, r3, #26
240550aa:	f003 031f 	and.w	r3, r3, #31
240550ae:	2201      	movs	r2, #1
240550b0:	fa02 f303 	lsl.w	r3, r2, r3
240550b4:	e016      	b.n	240550e4 <HAL_ADC_ConfigChannel+0x90>
240550b6:	683b      	ldr	r3, [r7, #0]
240550b8:	681b      	ldr	r3, [r3, #0]
240550ba:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240550bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
240550be:	fa93 f3a3 	rbit	r3, r3
240550c2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
240550c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
240550c6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
240550c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
240550ca:	2b00      	cmp	r3, #0
240550cc:	d101      	bne.n	240550d2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
240550ce:	2320      	movs	r3, #32
240550d0:	e003      	b.n	240550da <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
240550d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
240550d4:	fab3 f383 	clz	r3, r3
240550d8:	b2db      	uxtb	r3, r3
240550da:	f003 031f 	and.w	r3, r3, #31
240550de:	2201      	movs	r2, #1
240550e0:	fa02 f303 	lsl.w	r3, r2, r3
240550e4:	687a      	ldr	r2, [r7, #4]
240550e6:	6812      	ldr	r2, [r2, #0]
240550e8:	69d1      	ldr	r1, [r2, #28]
240550ea:	687a      	ldr	r2, [r7, #4]
240550ec:	6812      	ldr	r2, [r2, #0]
240550ee:	430b      	orrs	r3, r1
240550f0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
240550f2:	687b      	ldr	r3, [r7, #4]
240550f4:	6818      	ldr	r0, [r3, #0]
240550f6:	683b      	ldr	r3, [r7, #0]
240550f8:	6859      	ldr	r1, [r3, #4]
240550fa:	683b      	ldr	r3, [r7, #0]
240550fc:	681b      	ldr	r3, [r3, #0]
240550fe:	461a      	mov	r2, r3
24055100:	f7fe ff6b 	bl	24053fda <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
24055104:	687b      	ldr	r3, [r7, #4]
24055106:	681b      	ldr	r3, [r3, #0]
24055108:	4618      	mov	r0, r3
2405510a:	f7ff f8d5 	bl	240542b8 <LL_ADC_REG_IsConversionOngoing>
2405510e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
24055110:	687b      	ldr	r3, [r7, #4]
24055112:	681b      	ldr	r3, [r3, #0]
24055114:	4618      	mov	r0, r3
24055116:	f7ff f8f7 	bl	24054308 <LL_ADC_INJ_IsConversionOngoing>
2405511a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
2405511c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
2405511e:	2b00      	cmp	r3, #0
24055120:	f040 80a0 	bne.w	24055264 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
24055124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
24055126:	2b00      	cmp	r3, #0
24055128:	f040 809c 	bne.w	24055264 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
2405512c:	687b      	ldr	r3, [r7, #4]
2405512e:	6818      	ldr	r0, [r3, #0]
24055130:	683b      	ldr	r3, [r7, #0]
24055132:	6819      	ldr	r1, [r3, #0]
24055134:	683b      	ldr	r3, [r7, #0]
24055136:	689b      	ldr	r3, [r3, #8]
24055138:	461a      	mov	r2, r3
2405513a:	f7fe ff8d 	bl	24054058 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
2405513e:	687b      	ldr	r3, [r7, #4]
24055140:	681b      	ldr	r3, [r3, #0]
24055142:	68db      	ldr	r3, [r3, #12]
24055144:	f003 0310 	and.w	r3, r3, #16
24055148:	2b00      	cmp	r3, #0
2405514a:	d10b      	bne.n	24055164 <HAL_ADC_ConfigChannel+0x110>
2405514c:	683b      	ldr	r3, [r7, #0]
2405514e:	695a      	ldr	r2, [r3, #20]
24055150:	687b      	ldr	r3, [r7, #4]
24055152:	681b      	ldr	r3, [r3, #0]
24055154:	68db      	ldr	r3, [r3, #12]
24055156:	089b      	lsrs	r3, r3, #2
24055158:	f003 0307 	and.w	r3, r3, #7
2405515c:	005b      	lsls	r3, r3, #1
2405515e:	fa02 f303 	lsl.w	r3, r2, r3
24055162:	e00a      	b.n	2405517a <HAL_ADC_ConfigChannel+0x126>
24055164:	683b      	ldr	r3, [r7, #0]
24055166:	695a      	ldr	r2, [r3, #20]
24055168:	687b      	ldr	r3, [r7, #4]
2405516a:	681b      	ldr	r3, [r3, #0]
2405516c:	68db      	ldr	r3, [r3, #12]
2405516e:	089b      	lsrs	r3, r3, #2
24055170:	f003 0304 	and.w	r3, r3, #4
24055174:	005b      	lsls	r3, r3, #1
24055176:	fa02 f303 	lsl.w	r3, r2, r3
2405517a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
2405517c:	683b      	ldr	r3, [r7, #0]
2405517e:	691b      	ldr	r3, [r3, #16]
24055180:	2b04      	cmp	r3, #4
24055182:	d027      	beq.n	240551d4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
24055184:	687b      	ldr	r3, [r7, #4]
24055186:	6818      	ldr	r0, [r3, #0]
24055188:	683b      	ldr	r3, [r7, #0]
2405518a:	6919      	ldr	r1, [r3, #16]
2405518c:	683b      	ldr	r3, [r7, #0]
2405518e:	681a      	ldr	r2, [r3, #0]
24055190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
24055192:	f7fe febb 	bl	24053f0c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
24055196:	687b      	ldr	r3, [r7, #4]
24055198:	6818      	ldr	r0, [r3, #0]
2405519a:	683b      	ldr	r3, [r7, #0]
2405519c:	6919      	ldr	r1, [r3, #16]
2405519e:	683b      	ldr	r3, [r7, #0]
240551a0:	7e5b      	ldrb	r3, [r3, #25]
240551a2:	2b01      	cmp	r3, #1
240551a4:	d102      	bne.n	240551ac <HAL_ADC_ConfigChannel+0x158>
240551a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
240551aa:	e000      	b.n	240551ae <HAL_ADC_ConfigChannel+0x15a>
240551ac:	2300      	movs	r3, #0
240551ae:	461a      	mov	r2, r3
240551b0:	f7fe fee5 	bl	24053f7e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
240551b4:	687b      	ldr	r3, [r7, #4]
240551b6:	6818      	ldr	r0, [r3, #0]
240551b8:	683b      	ldr	r3, [r7, #0]
240551ba:	6919      	ldr	r1, [r3, #16]
240551bc:	683b      	ldr	r3, [r7, #0]
240551be:	7e1b      	ldrb	r3, [r3, #24]
240551c0:	2b01      	cmp	r3, #1
240551c2:	d102      	bne.n	240551ca <HAL_ADC_ConfigChannel+0x176>
240551c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
240551c8:	e000      	b.n	240551cc <HAL_ADC_ConfigChannel+0x178>
240551ca:	2300      	movs	r3, #0
240551cc:	461a      	mov	r2, r3
240551ce:	f7fe febd 	bl	24053f4c <LL_ADC_SetDataRightShift>
240551d2:	e047      	b.n	24055264 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
240551d4:	687b      	ldr	r3, [r7, #4]
240551d6:	681b      	ldr	r3, [r3, #0]
240551d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240551da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
240551de:	683b      	ldr	r3, [r7, #0]
240551e0:	681b      	ldr	r3, [r3, #0]
240551e2:	069b      	lsls	r3, r3, #26
240551e4:	429a      	cmp	r2, r3
240551e6:	d107      	bne.n	240551f8 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
240551e8:	687b      	ldr	r3, [r7, #4]
240551ea:	681b      	ldr	r3, [r3, #0]
240551ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
240551ee:	687b      	ldr	r3, [r7, #4]
240551f0:	681b      	ldr	r3, [r3, #0]
240551f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
240551f6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
240551f8:	687b      	ldr	r3, [r7, #4]
240551fa:	681b      	ldr	r3, [r3, #0]
240551fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240551fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24055202:	683b      	ldr	r3, [r7, #0]
24055204:	681b      	ldr	r3, [r3, #0]
24055206:	069b      	lsls	r3, r3, #26
24055208:	429a      	cmp	r2, r3
2405520a:	d107      	bne.n	2405521c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
2405520c:	687b      	ldr	r3, [r7, #4]
2405520e:	681b      	ldr	r3, [r3, #0]
24055210:	6e5a      	ldr	r2, [r3, #100]	; 0x64
24055212:	687b      	ldr	r3, [r7, #4]
24055214:	681b      	ldr	r3, [r3, #0]
24055216:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
2405521a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
2405521c:	687b      	ldr	r3, [r7, #4]
2405521e:	681b      	ldr	r3, [r3, #0]
24055220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24055222:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24055226:	683b      	ldr	r3, [r7, #0]
24055228:	681b      	ldr	r3, [r3, #0]
2405522a:	069b      	lsls	r3, r3, #26
2405522c:	429a      	cmp	r2, r3
2405522e:	d107      	bne.n	24055240 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
24055230:	687b      	ldr	r3, [r7, #4]
24055232:	681b      	ldr	r3, [r3, #0]
24055234:	6e9a      	ldr	r2, [r3, #104]	; 0x68
24055236:	687b      	ldr	r3, [r7, #4]
24055238:	681b      	ldr	r3, [r3, #0]
2405523a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
2405523e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24055240:	687b      	ldr	r3, [r7, #4]
24055242:	681b      	ldr	r3, [r3, #0]
24055244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24055246:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
2405524a:	683b      	ldr	r3, [r7, #0]
2405524c:	681b      	ldr	r3, [r3, #0]
2405524e:	069b      	lsls	r3, r3, #26
24055250:	429a      	cmp	r2, r3
24055252:	d107      	bne.n	24055264 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
24055254:	687b      	ldr	r3, [r7, #4]
24055256:	681b      	ldr	r3, [r3, #0]
24055258:	6eda      	ldr	r2, [r3, #108]	; 0x6c
2405525a:	687b      	ldr	r3, [r7, #4]
2405525c:	681b      	ldr	r3, [r3, #0]
2405525e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
24055262:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
24055264:	687b      	ldr	r3, [r7, #4]
24055266:	681b      	ldr	r3, [r3, #0]
24055268:	4618      	mov	r0, r3
2405526a:	f7fe ffd7 	bl	2405421c <LL_ADC_IsEnabled>
2405526e:	4603      	mov	r3, r0
24055270:	2b00      	cmp	r3, #0
24055272:	f040 81bb 	bne.w	240555ec <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
24055276:	687b      	ldr	r3, [r7, #4]
24055278:	6818      	ldr	r0, [r3, #0]
2405527a:	683b      	ldr	r3, [r7, #0]
2405527c:	6819      	ldr	r1, [r3, #0]
2405527e:	683b      	ldr	r3, [r7, #0]
24055280:	68db      	ldr	r3, [r3, #12]
24055282:	461a      	mov	r2, r3
24055284:	f7fe ff14 	bl	240540b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
24055288:	683b      	ldr	r3, [r7, #0]
2405528a:	68db      	ldr	r3, [r3, #12]
2405528c:	4a12      	ldr	r2, [pc, #72]	; (240552d8 <HAL_ADC_ConfigChannel+0x284>)
2405528e:	4293      	cmp	r3, r2
24055290:	f040 8130 	bne.w	240554f4 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24055294:	687b      	ldr	r3, [r7, #4]
24055296:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24055298:	683b      	ldr	r3, [r7, #0]
2405529a:	681b      	ldr	r3, [r3, #0]
2405529c:	f3c3 0313 	ubfx	r3, r3, #0, #20
240552a0:	2b00      	cmp	r3, #0
240552a2:	d10b      	bne.n	240552bc <HAL_ADC_ConfigChannel+0x268>
240552a4:	683b      	ldr	r3, [r7, #0]
240552a6:	681b      	ldr	r3, [r3, #0]
240552a8:	0e9b      	lsrs	r3, r3, #26
240552aa:	3301      	adds	r3, #1
240552ac:	f003 031f 	and.w	r3, r3, #31
240552b0:	2b09      	cmp	r3, #9
240552b2:	bf94      	ite	ls
240552b4:	2301      	movls	r3, #1
240552b6:	2300      	movhi	r3, #0
240552b8:	b2db      	uxtb	r3, r3
240552ba:	e01b      	b.n	240552f4 <HAL_ADC_ConfigChannel+0x2a0>
240552bc:	683b      	ldr	r3, [r7, #0]
240552be:	681b      	ldr	r3, [r3, #0]
240552c0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240552c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
240552c4:	fa93 f3a3 	rbit	r3, r3
240552c8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
240552ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
240552cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
240552ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
240552d0:	2b00      	cmp	r3, #0
240552d2:	d103      	bne.n	240552dc <HAL_ADC_ConfigChannel+0x288>
    return 32U;
240552d4:	2320      	movs	r3, #32
240552d6:	e005      	b.n	240552e4 <HAL_ADC_ConfigChannel+0x290>
240552d8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
240552dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
240552de:	fab3 f383 	clz	r3, r3
240552e2:	b2db      	uxtb	r3, r3
240552e4:	3301      	adds	r3, #1
240552e6:	f003 031f 	and.w	r3, r3, #31
240552ea:	2b09      	cmp	r3, #9
240552ec:	bf94      	ite	ls
240552ee:	2301      	movls	r3, #1
240552f0:	2300      	movhi	r3, #0
240552f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
240552f4:	2b00      	cmp	r3, #0
240552f6:	d079      	beq.n	240553ec <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
240552f8:	683b      	ldr	r3, [r7, #0]
240552fa:	681b      	ldr	r3, [r3, #0]
240552fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
24055300:	2b00      	cmp	r3, #0
24055302:	d107      	bne.n	24055314 <HAL_ADC_ConfigChannel+0x2c0>
24055304:	683b      	ldr	r3, [r7, #0]
24055306:	681b      	ldr	r3, [r3, #0]
24055308:	0e9b      	lsrs	r3, r3, #26
2405530a:	3301      	adds	r3, #1
2405530c:	069b      	lsls	r3, r3, #26
2405530e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24055312:	e015      	b.n	24055340 <HAL_ADC_ConfigChannel+0x2ec>
24055314:	683b      	ldr	r3, [r7, #0]
24055316:	681b      	ldr	r3, [r3, #0]
24055318:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2405531a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
2405531c:	fa93 f3a3 	rbit	r3, r3
24055320:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
24055322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
24055324:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
24055326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
24055328:	2b00      	cmp	r3, #0
2405532a:	d101      	bne.n	24055330 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
2405532c:	2320      	movs	r3, #32
2405532e:	e003      	b.n	24055338 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
24055330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
24055332:	fab3 f383 	clz	r3, r3
24055336:	b2db      	uxtb	r3, r3
24055338:	3301      	adds	r3, #1
2405533a:	069b      	lsls	r3, r3, #26
2405533c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24055340:	683b      	ldr	r3, [r7, #0]
24055342:	681b      	ldr	r3, [r3, #0]
24055344:	f3c3 0313 	ubfx	r3, r3, #0, #20
24055348:	2b00      	cmp	r3, #0
2405534a:	d109      	bne.n	24055360 <HAL_ADC_ConfigChannel+0x30c>
2405534c:	683b      	ldr	r3, [r7, #0]
2405534e:	681b      	ldr	r3, [r3, #0]
24055350:	0e9b      	lsrs	r3, r3, #26
24055352:	3301      	adds	r3, #1
24055354:	f003 031f 	and.w	r3, r3, #31
24055358:	2101      	movs	r1, #1
2405535a:	fa01 f303 	lsl.w	r3, r1, r3
2405535e:	e017      	b.n	24055390 <HAL_ADC_ConfigChannel+0x33c>
24055360:	683b      	ldr	r3, [r7, #0]
24055362:	681b      	ldr	r3, [r3, #0]
24055364:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24055366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
24055368:	fa93 f3a3 	rbit	r3, r3
2405536c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
2405536e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24055370:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
24055372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
24055374:	2b00      	cmp	r3, #0
24055376:	d101      	bne.n	2405537c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
24055378:	2320      	movs	r3, #32
2405537a:	e003      	b.n	24055384 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
2405537c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
2405537e:	fab3 f383 	clz	r3, r3
24055382:	b2db      	uxtb	r3, r3
24055384:	3301      	adds	r3, #1
24055386:	f003 031f 	and.w	r3, r3, #31
2405538a:	2101      	movs	r1, #1
2405538c:	fa01 f303 	lsl.w	r3, r1, r3
24055390:	ea42 0103 	orr.w	r1, r2, r3
24055394:	683b      	ldr	r3, [r7, #0]
24055396:	681b      	ldr	r3, [r3, #0]
24055398:	f3c3 0313 	ubfx	r3, r3, #0, #20
2405539c:	2b00      	cmp	r3, #0
2405539e:	d10a      	bne.n	240553b6 <HAL_ADC_ConfigChannel+0x362>
240553a0:	683b      	ldr	r3, [r7, #0]
240553a2:	681b      	ldr	r3, [r3, #0]
240553a4:	0e9b      	lsrs	r3, r3, #26
240553a6:	3301      	adds	r3, #1
240553a8:	f003 021f 	and.w	r2, r3, #31
240553ac:	4613      	mov	r3, r2
240553ae:	005b      	lsls	r3, r3, #1
240553b0:	4413      	add	r3, r2
240553b2:	051b      	lsls	r3, r3, #20
240553b4:	e018      	b.n	240553e8 <HAL_ADC_ConfigChannel+0x394>
240553b6:	683b      	ldr	r3, [r7, #0]
240553b8:	681b      	ldr	r3, [r3, #0]
240553ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240553bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240553be:	fa93 f3a3 	rbit	r3, r3
240553c2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
240553c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240553c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
240553c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240553ca:	2b00      	cmp	r3, #0
240553cc:	d101      	bne.n	240553d2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
240553ce:	2320      	movs	r3, #32
240553d0:	e003      	b.n	240553da <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
240553d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240553d4:	fab3 f383 	clz	r3, r3
240553d8:	b2db      	uxtb	r3, r3
240553da:	3301      	adds	r3, #1
240553dc:	f003 021f 	and.w	r2, r3, #31
240553e0:	4613      	mov	r3, r2
240553e2:	005b      	lsls	r3, r3, #1
240553e4:	4413      	add	r3, r2
240553e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
240553e8:	430b      	orrs	r3, r1
240553ea:	e07e      	b.n	240554ea <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
240553ec:	683b      	ldr	r3, [r7, #0]
240553ee:	681b      	ldr	r3, [r3, #0]
240553f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
240553f4:	2b00      	cmp	r3, #0
240553f6:	d107      	bne.n	24055408 <HAL_ADC_ConfigChannel+0x3b4>
240553f8:	683b      	ldr	r3, [r7, #0]
240553fa:	681b      	ldr	r3, [r3, #0]
240553fc:	0e9b      	lsrs	r3, r3, #26
240553fe:	3301      	adds	r3, #1
24055400:	069b      	lsls	r3, r3, #26
24055402:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24055406:	e015      	b.n	24055434 <HAL_ADC_ConfigChannel+0x3e0>
24055408:	683b      	ldr	r3, [r7, #0]
2405540a:	681b      	ldr	r3, [r3, #0]
2405540c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2405540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
24055410:	fa93 f3a3 	rbit	r3, r3
24055414:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
24055416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24055418:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
2405541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2405541c:	2b00      	cmp	r3, #0
2405541e:	d101      	bne.n	24055424 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
24055420:	2320      	movs	r3, #32
24055422:	e003      	b.n	2405542c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
24055424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24055426:	fab3 f383 	clz	r3, r3
2405542a:	b2db      	uxtb	r3, r3
2405542c:	3301      	adds	r3, #1
2405542e:	069b      	lsls	r3, r3, #26
24055430:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24055434:	683b      	ldr	r3, [r7, #0]
24055436:	681b      	ldr	r3, [r3, #0]
24055438:	f3c3 0313 	ubfx	r3, r3, #0, #20
2405543c:	2b00      	cmp	r3, #0
2405543e:	d109      	bne.n	24055454 <HAL_ADC_ConfigChannel+0x400>
24055440:	683b      	ldr	r3, [r7, #0]
24055442:	681b      	ldr	r3, [r3, #0]
24055444:	0e9b      	lsrs	r3, r3, #26
24055446:	3301      	adds	r3, #1
24055448:	f003 031f 	and.w	r3, r3, #31
2405544c:	2101      	movs	r1, #1
2405544e:	fa01 f303 	lsl.w	r3, r1, r3
24055452:	e017      	b.n	24055484 <HAL_ADC_ConfigChannel+0x430>
24055454:	683b      	ldr	r3, [r7, #0]
24055456:	681b      	ldr	r3, [r3, #0]
24055458:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2405545a:	69fb      	ldr	r3, [r7, #28]
2405545c:	fa93 f3a3 	rbit	r3, r3
24055460:	61bb      	str	r3, [r7, #24]
  return result;
24055462:	69bb      	ldr	r3, [r7, #24]
24055464:	623b      	str	r3, [r7, #32]
  if (value == 0U)
24055466:	6a3b      	ldr	r3, [r7, #32]
24055468:	2b00      	cmp	r3, #0
2405546a:	d101      	bne.n	24055470 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
2405546c:	2320      	movs	r3, #32
2405546e:	e003      	b.n	24055478 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
24055470:	6a3b      	ldr	r3, [r7, #32]
24055472:	fab3 f383 	clz	r3, r3
24055476:	b2db      	uxtb	r3, r3
24055478:	3301      	adds	r3, #1
2405547a:	f003 031f 	and.w	r3, r3, #31
2405547e:	2101      	movs	r1, #1
24055480:	fa01 f303 	lsl.w	r3, r1, r3
24055484:	ea42 0103 	orr.w	r1, r2, r3
24055488:	683b      	ldr	r3, [r7, #0]
2405548a:	681b      	ldr	r3, [r3, #0]
2405548c:	f3c3 0313 	ubfx	r3, r3, #0, #20
24055490:	2b00      	cmp	r3, #0
24055492:	d10d      	bne.n	240554b0 <HAL_ADC_ConfigChannel+0x45c>
24055494:	683b      	ldr	r3, [r7, #0]
24055496:	681b      	ldr	r3, [r3, #0]
24055498:	0e9b      	lsrs	r3, r3, #26
2405549a:	3301      	adds	r3, #1
2405549c:	f003 021f 	and.w	r2, r3, #31
240554a0:	4613      	mov	r3, r2
240554a2:	005b      	lsls	r3, r3, #1
240554a4:	4413      	add	r3, r2
240554a6:	3b1e      	subs	r3, #30
240554a8:	051b      	lsls	r3, r3, #20
240554aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
240554ae:	e01b      	b.n	240554e8 <HAL_ADC_ConfigChannel+0x494>
240554b0:	683b      	ldr	r3, [r7, #0]
240554b2:	681b      	ldr	r3, [r3, #0]
240554b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240554b6:	693b      	ldr	r3, [r7, #16]
240554b8:	fa93 f3a3 	rbit	r3, r3
240554bc:	60fb      	str	r3, [r7, #12]
  return result;
240554be:	68fb      	ldr	r3, [r7, #12]
240554c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
240554c2:	697b      	ldr	r3, [r7, #20]
240554c4:	2b00      	cmp	r3, #0
240554c6:	d101      	bne.n	240554cc <HAL_ADC_ConfigChannel+0x478>
    return 32U;
240554c8:	2320      	movs	r3, #32
240554ca:	e003      	b.n	240554d4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
240554cc:	697b      	ldr	r3, [r7, #20]
240554ce:	fab3 f383 	clz	r3, r3
240554d2:	b2db      	uxtb	r3, r3
240554d4:	3301      	adds	r3, #1
240554d6:	f003 021f 	and.w	r2, r3, #31
240554da:	4613      	mov	r3, r2
240554dc:	005b      	lsls	r3, r3, #1
240554de:	4413      	add	r3, r2
240554e0:	3b1e      	subs	r3, #30
240554e2:	051b      	lsls	r3, r3, #20
240554e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
240554e8:	430b      	orrs	r3, r1
240554ea:	683a      	ldr	r2, [r7, #0]
240554ec:	6892      	ldr	r2, [r2, #8]
240554ee:	4619      	mov	r1, r3
240554f0:	f7fe fdb2 	bl	24054058 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
240554f4:	683b      	ldr	r3, [r7, #0]
240554f6:	681b      	ldr	r3, [r3, #0]
240554f8:	2b00      	cmp	r3, #0
240554fa:	da77      	bge.n	240555ec <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
240554fc:	4840      	ldr	r0, [pc, #256]	; (24055600 <HAL_ADC_ConfigChannel+0x5ac>)
240554fe:	f7fe fcf7 	bl	24053ef0 <LL_ADC_GetCommonPathInternalCh>
24055502:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24055504:	483f      	ldr	r0, [pc, #252]	; (24055604 <HAL_ADC_ConfigChannel+0x5b0>)
24055506:	f7fe fe89 	bl	2405421c <LL_ADC_IsEnabled>
2405550a:	4604      	mov	r4, r0
2405550c:	483e      	ldr	r0, [pc, #248]	; (24055608 <HAL_ADC_ConfigChannel+0x5b4>)
2405550e:	f7fe fe85 	bl	2405421c <LL_ADC_IsEnabled>
24055512:	4603      	mov	r3, r0
24055514:	4323      	orrs	r3, r4
24055516:	2b00      	cmp	r3, #0
24055518:	d155      	bne.n	240555c6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
2405551a:	683b      	ldr	r3, [r7, #0]
2405551c:	681b      	ldr	r3, [r3, #0]
2405551e:	4a3b      	ldr	r2, [pc, #236]	; (2405560c <HAL_ADC_ConfigChannel+0x5b8>)
24055520:	4293      	cmp	r3, r2
24055522:	d122      	bne.n	2405556a <HAL_ADC_ConfigChannel+0x516>
24055524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
2405552a:	2b00      	cmp	r3, #0
2405552c:	d11d      	bne.n	2405556a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
2405552e:	687b      	ldr	r3, [r7, #4]
24055530:	681b      	ldr	r3, [r3, #0]
24055532:	4a35      	ldr	r2, [pc, #212]	; (24055608 <HAL_ADC_ConfigChannel+0x5b4>)
24055534:	4293      	cmp	r3, r2
24055536:	d159      	bne.n	240555ec <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
24055538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
2405553a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
2405553e:	4619      	mov	r1, r3
24055540:	482f      	ldr	r0, [pc, #188]	; (24055600 <HAL_ADC_ConfigChannel+0x5ac>)
24055542:	f7fe fcc2 	bl	24053eca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
24055546:	4b32      	ldr	r3, [pc, #200]	; (24055610 <HAL_ADC_ConfigChannel+0x5bc>)
24055548:	681b      	ldr	r3, [r3, #0]
2405554a:	099b      	lsrs	r3, r3, #6
2405554c:	4a31      	ldr	r2, [pc, #196]	; (24055614 <HAL_ADC_ConfigChannel+0x5c0>)
2405554e:	fba2 2303 	umull	r2, r3, r2, r3
24055552:	099b      	lsrs	r3, r3, #6
24055554:	3301      	adds	r3, #1
24055556:	005b      	lsls	r3, r3, #1
24055558:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
2405555a:	e002      	b.n	24055562 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
2405555c:	68bb      	ldr	r3, [r7, #8]
2405555e:	3b01      	subs	r3, #1
24055560:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
24055562:	68bb      	ldr	r3, [r7, #8]
24055564:	2b00      	cmp	r3, #0
24055566:	d1f9      	bne.n	2405555c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
24055568:	e040      	b.n	240555ec <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
2405556a:	683b      	ldr	r3, [r7, #0]
2405556c:	681b      	ldr	r3, [r3, #0]
2405556e:	4a2a      	ldr	r2, [pc, #168]	; (24055618 <HAL_ADC_ConfigChannel+0x5c4>)
24055570:	4293      	cmp	r3, r2
24055572:	d111      	bne.n	24055598 <HAL_ADC_ConfigChannel+0x544>
24055574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2405557a:	2b00      	cmp	r3, #0
2405557c:	d10c      	bne.n	24055598 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
2405557e:	687b      	ldr	r3, [r7, #4]
24055580:	681b      	ldr	r3, [r3, #0]
24055582:	4a21      	ldr	r2, [pc, #132]	; (24055608 <HAL_ADC_ConfigChannel+0x5b4>)
24055584:	4293      	cmp	r3, r2
24055586:	d131      	bne.n	240555ec <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
24055588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
2405558a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2405558e:	4619      	mov	r1, r3
24055590:	481b      	ldr	r0, [pc, #108]	; (24055600 <HAL_ADC_ConfigChannel+0x5ac>)
24055592:	f7fe fc9a 	bl	24053eca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
24055596:	e029      	b.n	240555ec <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
24055598:	683b      	ldr	r3, [r7, #0]
2405559a:	681b      	ldr	r3, [r3, #0]
2405559c:	4a1f      	ldr	r2, [pc, #124]	; (2405561c <HAL_ADC_ConfigChannel+0x5c8>)
2405559e:	4293      	cmp	r3, r2
240555a0:	d124      	bne.n	240555ec <HAL_ADC_ConfigChannel+0x598>
240555a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240555a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240555a8:	2b00      	cmp	r3, #0
240555aa:	d11f      	bne.n	240555ec <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
240555ac:	687b      	ldr	r3, [r7, #4]
240555ae:	681b      	ldr	r3, [r3, #0]
240555b0:	4a15      	ldr	r2, [pc, #84]	; (24055608 <HAL_ADC_ConfigChannel+0x5b4>)
240555b2:	4293      	cmp	r3, r2
240555b4:	d11a      	bne.n	240555ec <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
240555b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240555b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
240555bc:	4619      	mov	r1, r3
240555be:	4810      	ldr	r0, [pc, #64]	; (24055600 <HAL_ADC_ConfigChannel+0x5ac>)
240555c0:	f7fe fc83 	bl	24053eca <LL_ADC_SetCommonPathInternalCh>
240555c4:	e012      	b.n	240555ec <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
240555c6:	687b      	ldr	r3, [r7, #4]
240555c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240555ca:	f043 0220 	orr.w	r2, r3, #32
240555ce:	687b      	ldr	r3, [r7, #4]
240555d0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
240555d2:	2301      	movs	r3, #1
240555d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
240555d8:	e008      	b.n	240555ec <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
240555da:	687b      	ldr	r3, [r7, #4]
240555dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240555de:	f043 0220 	orr.w	r2, r3, #32
240555e2:	687b      	ldr	r3, [r7, #4]
240555e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
240555e6:	2301      	movs	r3, #1
240555e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
240555ec:	687b      	ldr	r3, [r7, #4]
240555ee:	2200      	movs	r2, #0
240555f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
240555f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
240555f8:	4618      	mov	r0, r3
240555fa:	3784      	adds	r7, #132	; 0x84
240555fc:	46bd      	mov	sp, r7
240555fe:	bd90      	pop	{r4, r7, pc}
24055600:	40022300 	.word	0x40022300
24055604:	40022000 	.word	0x40022000
24055608:	40022100 	.word	0x40022100
2405560c:	cb840000 	.word	0xcb840000
24055610:	20000044 	.word	0x20000044
24055614:	053e2d63 	.word	0x053e2d63
24055618:	bac04000 	.word	0xbac04000
2405561c:	cfb80000 	.word	0xcfb80000

24055620 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
24055620:	b580      	push	{r7, lr}
24055622:	b088      	sub	sp, #32
24055624:	af00      	add	r7, sp, #0
24055626:	6078      	str	r0, [r7, #4]
24055628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
2405562a:	2300      	movs	r3, #0
2405562c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
2405562e:	683b      	ldr	r3, [r7, #0]
24055630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
24055632:	687b      	ldr	r3, [r7, #4]
24055634:	681b      	ldr	r3, [r3, #0]
24055636:	4618      	mov	r0, r3
24055638:	f7fe fe3e 	bl	240542b8 <LL_ADC_REG_IsConversionOngoing>
2405563c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
2405563e:	687b      	ldr	r3, [r7, #4]
24055640:	681b      	ldr	r3, [r3, #0]
24055642:	4618      	mov	r0, r3
24055644:	f7fe fe60 	bl	24054308 <LL_ADC_INJ_IsConversionOngoing>
24055648:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
2405564a:	693b      	ldr	r3, [r7, #16]
2405564c:	2b00      	cmp	r3, #0
2405564e:	d103      	bne.n	24055658 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
24055650:	68fb      	ldr	r3, [r7, #12]
24055652:	2b00      	cmp	r3, #0
24055654:	f000 8098 	beq.w	24055788 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
24055658:	687b      	ldr	r3, [r7, #4]
2405565a:	681b      	ldr	r3, [r3, #0]
2405565c:	68db      	ldr	r3, [r3, #12]
2405565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24055662:	2b00      	cmp	r3, #0
24055664:	d02a      	beq.n	240556bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
24055666:	687b      	ldr	r3, [r7, #4]
24055668:	7d5b      	ldrb	r3, [r3, #21]
2405566a:	2b01      	cmp	r3, #1
2405566c:	d126      	bne.n	240556bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
2405566e:	687b      	ldr	r3, [r7, #4]
24055670:	7d1b      	ldrb	r3, [r3, #20]
24055672:	2b01      	cmp	r3, #1
24055674:	d122      	bne.n	240556bc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
24055676:	2301      	movs	r3, #1
24055678:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
2405567a:	e014      	b.n	240556a6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
2405567c:	69fb      	ldr	r3, [r7, #28]
2405567e:	4a45      	ldr	r2, [pc, #276]	; (24055794 <ADC_ConversionStop+0x174>)
24055680:	4293      	cmp	r3, r2
24055682:	d90d      	bls.n	240556a0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24055684:	687b      	ldr	r3, [r7, #4]
24055686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24055688:	f043 0210 	orr.w	r2, r3, #16
2405568c:	687b      	ldr	r3, [r7, #4]
2405568e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24055690:	687b      	ldr	r3, [r7, #4]
24055692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24055694:	f043 0201 	orr.w	r2, r3, #1
24055698:	687b      	ldr	r3, [r7, #4]
2405569a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
2405569c:	2301      	movs	r3, #1
2405569e:	e074      	b.n	2405578a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
240556a0:	69fb      	ldr	r3, [r7, #28]
240556a2:	3301      	adds	r3, #1
240556a4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
240556a6:	687b      	ldr	r3, [r7, #4]
240556a8:	681b      	ldr	r3, [r3, #0]
240556aa:	681b      	ldr	r3, [r3, #0]
240556ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
240556b0:	2b40      	cmp	r3, #64	; 0x40
240556b2:	d1e3      	bne.n	2405567c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
240556b4:	687b      	ldr	r3, [r7, #4]
240556b6:	681b      	ldr	r3, [r3, #0]
240556b8:	2240      	movs	r2, #64	; 0x40
240556ba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
240556bc:	69bb      	ldr	r3, [r7, #24]
240556be:	2b02      	cmp	r3, #2
240556c0:	d014      	beq.n	240556ec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
240556c2:	687b      	ldr	r3, [r7, #4]
240556c4:	681b      	ldr	r3, [r3, #0]
240556c6:	4618      	mov	r0, r3
240556c8:	f7fe fdf6 	bl	240542b8 <LL_ADC_REG_IsConversionOngoing>
240556cc:	4603      	mov	r3, r0
240556ce:	2b00      	cmp	r3, #0
240556d0:	d00c      	beq.n	240556ec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
240556d2:	687b      	ldr	r3, [r7, #4]
240556d4:	681b      	ldr	r3, [r3, #0]
240556d6:	4618      	mov	r0, r3
240556d8:	f7fe fdb3 	bl	24054242 <LL_ADC_IsDisableOngoing>
240556dc:	4603      	mov	r3, r0
240556de:	2b00      	cmp	r3, #0
240556e0:	d104      	bne.n	240556ec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
240556e2:	687b      	ldr	r3, [r7, #4]
240556e4:	681b      	ldr	r3, [r3, #0]
240556e6:	4618      	mov	r0, r3
240556e8:	f7fe fdd2 	bl	24054290 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
240556ec:	69bb      	ldr	r3, [r7, #24]
240556ee:	2b01      	cmp	r3, #1
240556f0:	d014      	beq.n	2405571c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
240556f2:	687b      	ldr	r3, [r7, #4]
240556f4:	681b      	ldr	r3, [r3, #0]
240556f6:	4618      	mov	r0, r3
240556f8:	f7fe fe06 	bl	24054308 <LL_ADC_INJ_IsConversionOngoing>
240556fc:	4603      	mov	r3, r0
240556fe:	2b00      	cmp	r3, #0
24055700:	d00c      	beq.n	2405571c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
24055702:	687b      	ldr	r3, [r7, #4]
24055704:	681b      	ldr	r3, [r3, #0]
24055706:	4618      	mov	r0, r3
24055708:	f7fe fd9b 	bl	24054242 <LL_ADC_IsDisableOngoing>
2405570c:	4603      	mov	r3, r0
2405570e:	2b00      	cmp	r3, #0
24055710:	d104      	bne.n	2405571c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
24055712:	687b      	ldr	r3, [r7, #4]
24055714:	681b      	ldr	r3, [r3, #0]
24055716:	4618      	mov	r0, r3
24055718:	f7fe fde2 	bl	240542e0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
2405571c:	69bb      	ldr	r3, [r7, #24]
2405571e:	2b02      	cmp	r3, #2
24055720:	d005      	beq.n	2405572e <ADC_ConversionStop+0x10e>
24055722:	69bb      	ldr	r3, [r7, #24]
24055724:	2b03      	cmp	r3, #3
24055726:	d105      	bne.n	24055734 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
24055728:	230c      	movs	r3, #12
2405572a:	617b      	str	r3, [r7, #20]
        break;
2405572c:	e005      	b.n	2405573a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
2405572e:	2308      	movs	r3, #8
24055730:	617b      	str	r3, [r7, #20]
        break;
24055732:	e002      	b.n	2405573a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
24055734:	2304      	movs	r3, #4
24055736:	617b      	str	r3, [r7, #20]
        break;
24055738:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
2405573a:	f7fe fb83 	bl	24053e44 <HAL_GetTick>
2405573e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
24055740:	e01b      	b.n	2405577a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
24055742:	f7fe fb7f 	bl	24053e44 <HAL_GetTick>
24055746:	4602      	mov	r2, r0
24055748:	68bb      	ldr	r3, [r7, #8]
2405574a:	1ad3      	subs	r3, r2, r3
2405574c:	2b05      	cmp	r3, #5
2405574e:	d914      	bls.n	2405577a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
24055750:	687b      	ldr	r3, [r7, #4]
24055752:	681b      	ldr	r3, [r3, #0]
24055754:	689a      	ldr	r2, [r3, #8]
24055756:	697b      	ldr	r3, [r7, #20]
24055758:	4013      	ands	r3, r2
2405575a:	2b00      	cmp	r3, #0
2405575c:	d00d      	beq.n	2405577a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2405575e:	687b      	ldr	r3, [r7, #4]
24055760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24055762:	f043 0210 	orr.w	r2, r3, #16
24055766:	687b      	ldr	r3, [r7, #4]
24055768:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2405576a:	687b      	ldr	r3, [r7, #4]
2405576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405576e:	f043 0201 	orr.w	r2, r3, #1
24055772:	687b      	ldr	r3, [r7, #4]
24055774:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
24055776:	2301      	movs	r3, #1
24055778:	e007      	b.n	2405578a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
2405577a:	687b      	ldr	r3, [r7, #4]
2405577c:	681b      	ldr	r3, [r3, #0]
2405577e:	689a      	ldr	r2, [r3, #8]
24055780:	697b      	ldr	r3, [r7, #20]
24055782:	4013      	ands	r3, r2
24055784:	2b00      	cmp	r3, #0
24055786:	d1dc      	bne.n	24055742 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
24055788:	2300      	movs	r3, #0
}
2405578a:	4618      	mov	r0, r3
2405578c:	3720      	adds	r7, #32
2405578e:	46bd      	mov	sp, r7
24055790:	bd80      	pop	{r7, pc}
24055792:	bf00      	nop
24055794:	000cdbff 	.word	0x000cdbff

24055798 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
24055798:	b580      	push	{r7, lr}
2405579a:	b084      	sub	sp, #16
2405579c:	af00      	add	r7, sp, #0
2405579e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
240557a0:	687b      	ldr	r3, [r7, #4]
240557a2:	681b      	ldr	r3, [r3, #0]
240557a4:	4618      	mov	r0, r3
240557a6:	f7fe fd39 	bl	2405421c <LL_ADC_IsEnabled>
240557aa:	4603      	mov	r3, r0
240557ac:	2b00      	cmp	r3, #0
240557ae:	d161      	bne.n	24055874 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
240557b0:	687b      	ldr	r3, [r7, #4]
240557b2:	681b      	ldr	r3, [r3, #0]
240557b4:	689a      	ldr	r2, [r3, #8]
240557b6:	4b32      	ldr	r3, [pc, #200]	; (24055880 <ADC_Enable+0xe8>)
240557b8:	4013      	ands	r3, r2
240557ba:	2b00      	cmp	r3, #0
240557bc:	d00d      	beq.n	240557da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240557be:	687b      	ldr	r3, [r7, #4]
240557c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240557c2:	f043 0210 	orr.w	r2, r3, #16
240557c6:	687b      	ldr	r3, [r7, #4]
240557c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240557ca:	687b      	ldr	r3, [r7, #4]
240557cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240557ce:	f043 0201 	orr.w	r2, r3, #1
240557d2:	687b      	ldr	r3, [r7, #4]
240557d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
240557d6:	2301      	movs	r3, #1
240557d8:	e04d      	b.n	24055876 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
240557da:	687b      	ldr	r3, [r7, #4]
240557dc:	681b      	ldr	r3, [r3, #0]
240557de:	4618      	mov	r0, r3
240557e0:	f7fe fcf4 	bl	240541cc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
240557e4:	f7fe fb2e 	bl	24053e44 <HAL_GetTick>
240557e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
240557ea:	4826      	ldr	r0, [pc, #152]	; (24055884 <ADC_Enable+0xec>)
240557ec:	f7fe fc84 	bl	240540f8 <LL_ADC_GetMultimode>
240557f0:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240557f2:	687b      	ldr	r3, [r7, #4]
240557f4:	681b      	ldr	r3, [r3, #0]
240557f6:	4a24      	ldr	r2, [pc, #144]	; (24055888 <ADC_Enable+0xf0>)
240557f8:	4293      	cmp	r3, r2
240557fa:	d002      	beq.n	24055802 <ADC_Enable+0x6a>
240557fc:	687b      	ldr	r3, [r7, #4]
240557fe:	681b      	ldr	r3, [r3, #0]
24055800:	e000      	b.n	24055804 <ADC_Enable+0x6c>
24055802:	4b22      	ldr	r3, [pc, #136]	; (2405588c <ADC_Enable+0xf4>)
24055804:	687a      	ldr	r2, [r7, #4]
24055806:	6812      	ldr	r2, [r2, #0]
24055808:	4293      	cmp	r3, r2
2405580a:	d02c      	beq.n	24055866 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2405580c:	68bb      	ldr	r3, [r7, #8]
2405580e:	2b00      	cmp	r3, #0
24055810:	d130      	bne.n	24055874 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
24055812:	e028      	b.n	24055866 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
24055814:	687b      	ldr	r3, [r7, #4]
24055816:	681b      	ldr	r3, [r3, #0]
24055818:	4618      	mov	r0, r3
2405581a:	f7fe fcff 	bl	2405421c <LL_ADC_IsEnabled>
2405581e:	4603      	mov	r3, r0
24055820:	2b00      	cmp	r3, #0
24055822:	d104      	bne.n	2405582e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
24055824:	687b      	ldr	r3, [r7, #4]
24055826:	681b      	ldr	r3, [r3, #0]
24055828:	4618      	mov	r0, r3
2405582a:	f7fe fccf 	bl	240541cc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
2405582e:	f7fe fb09 	bl	24053e44 <HAL_GetTick>
24055832:	4602      	mov	r2, r0
24055834:	68fb      	ldr	r3, [r7, #12]
24055836:	1ad3      	subs	r3, r2, r3
24055838:	2b02      	cmp	r3, #2
2405583a:	d914      	bls.n	24055866 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
2405583c:	687b      	ldr	r3, [r7, #4]
2405583e:	681b      	ldr	r3, [r3, #0]
24055840:	681b      	ldr	r3, [r3, #0]
24055842:	f003 0301 	and.w	r3, r3, #1
24055846:	2b01      	cmp	r3, #1
24055848:	d00d      	beq.n	24055866 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2405584a:	687b      	ldr	r3, [r7, #4]
2405584c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405584e:	f043 0210 	orr.w	r2, r3, #16
24055852:	687b      	ldr	r3, [r7, #4]
24055854:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24055856:	687b      	ldr	r3, [r7, #4]
24055858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405585a:	f043 0201 	orr.w	r2, r3, #1
2405585e:	687b      	ldr	r3, [r7, #4]
24055860:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
24055862:	2301      	movs	r3, #1
24055864:	e007      	b.n	24055876 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
24055866:	687b      	ldr	r3, [r7, #4]
24055868:	681b      	ldr	r3, [r3, #0]
2405586a:	681b      	ldr	r3, [r3, #0]
2405586c:	f003 0301 	and.w	r3, r3, #1
24055870:	2b01      	cmp	r3, #1
24055872:	d1cf      	bne.n	24055814 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
24055874:	2300      	movs	r3, #0
}
24055876:	4618      	mov	r0, r3
24055878:	3710      	adds	r7, #16
2405587a:	46bd      	mov	sp, r7
2405587c:	bd80      	pop	{r7, pc}
2405587e:	bf00      	nop
24055880:	8000003f 	.word	0x8000003f
24055884:	40022300 	.word	0x40022300
24055888:	40022100 	.word	0x40022100
2405588c:	40022000 	.word	0x40022000

24055890 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
24055890:	b580      	push	{r7, lr}
24055892:	b084      	sub	sp, #16
24055894:	af00      	add	r7, sp, #0
24055896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
24055898:	687b      	ldr	r3, [r7, #4]
2405589a:	681b      	ldr	r3, [r3, #0]
2405589c:	4618      	mov	r0, r3
2405589e:	f7fe fcd0 	bl	24054242 <LL_ADC_IsDisableOngoing>
240558a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
240558a4:	687b      	ldr	r3, [r7, #4]
240558a6:	681b      	ldr	r3, [r3, #0]
240558a8:	4618      	mov	r0, r3
240558aa:	f7fe fcb7 	bl	2405421c <LL_ADC_IsEnabled>
240558ae:	4603      	mov	r3, r0
240558b0:	2b00      	cmp	r3, #0
240558b2:	d047      	beq.n	24055944 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
240558b4:	68fb      	ldr	r3, [r7, #12]
240558b6:	2b00      	cmp	r3, #0
240558b8:	d144      	bne.n	24055944 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
240558ba:	687b      	ldr	r3, [r7, #4]
240558bc:	681b      	ldr	r3, [r3, #0]
240558be:	689b      	ldr	r3, [r3, #8]
240558c0:	f003 030d 	and.w	r3, r3, #13
240558c4:	2b01      	cmp	r3, #1
240558c6:	d10c      	bne.n	240558e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
240558c8:	687b      	ldr	r3, [r7, #4]
240558ca:	681b      	ldr	r3, [r3, #0]
240558cc:	4618      	mov	r0, r3
240558ce:	f7fe fc91 	bl	240541f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
240558d2:	687b      	ldr	r3, [r7, #4]
240558d4:	681b      	ldr	r3, [r3, #0]
240558d6:	2203      	movs	r2, #3
240558d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
240558da:	f7fe fab3 	bl	24053e44 <HAL_GetTick>
240558de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
240558e0:	e029      	b.n	24055936 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240558e2:	687b      	ldr	r3, [r7, #4]
240558e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240558e6:	f043 0210 	orr.w	r2, r3, #16
240558ea:	687b      	ldr	r3, [r7, #4]
240558ec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240558ee:	687b      	ldr	r3, [r7, #4]
240558f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240558f2:	f043 0201 	orr.w	r2, r3, #1
240558f6:	687b      	ldr	r3, [r7, #4]
240558f8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
240558fa:	2301      	movs	r3, #1
240558fc:	e023      	b.n	24055946 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
240558fe:	f7fe faa1 	bl	24053e44 <HAL_GetTick>
24055902:	4602      	mov	r2, r0
24055904:	68bb      	ldr	r3, [r7, #8]
24055906:	1ad3      	subs	r3, r2, r3
24055908:	2b02      	cmp	r3, #2
2405590a:	d914      	bls.n	24055936 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
2405590c:	687b      	ldr	r3, [r7, #4]
2405590e:	681b      	ldr	r3, [r3, #0]
24055910:	689b      	ldr	r3, [r3, #8]
24055912:	f003 0301 	and.w	r3, r3, #1
24055916:	2b00      	cmp	r3, #0
24055918:	d00d      	beq.n	24055936 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2405591a:	687b      	ldr	r3, [r7, #4]
2405591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405591e:	f043 0210 	orr.w	r2, r3, #16
24055922:	687b      	ldr	r3, [r7, #4]
24055924:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24055926:	687b      	ldr	r3, [r7, #4]
24055928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405592a:	f043 0201 	orr.w	r2, r3, #1
2405592e:	687b      	ldr	r3, [r7, #4]
24055930:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
24055932:	2301      	movs	r3, #1
24055934:	e007      	b.n	24055946 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
24055936:	687b      	ldr	r3, [r7, #4]
24055938:	681b      	ldr	r3, [r3, #0]
2405593a:	689b      	ldr	r3, [r3, #8]
2405593c:	f003 0301 	and.w	r3, r3, #1
24055940:	2b00      	cmp	r3, #0
24055942:	d1dc      	bne.n	240558fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
24055944:	2300      	movs	r3, #0
}
24055946:	4618      	mov	r0, r3
24055948:	3710      	adds	r7, #16
2405594a:	46bd      	mov	sp, r7
2405594c:	bd80      	pop	{r7, pc}
	...

24055950 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
24055950:	b580      	push	{r7, lr}
24055952:	b084      	sub	sp, #16
24055954:	af00      	add	r7, sp, #0
24055956:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
24055958:	4b60      	ldr	r3, [pc, #384]	; (24055adc <ADC_ConfigureBoostMode+0x18c>)
2405595a:	689b      	ldr	r3, [r3, #8]
2405595c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
24055960:	2b00      	cmp	r3, #0
24055962:	d01c      	beq.n	2405599e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
24055964:	f006 fd84 	bl	2405c470 <HAL_RCC_GetHCLKFreq>
24055968:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
2405596a:	687b      	ldr	r3, [r7, #4]
2405596c:	685b      	ldr	r3, [r3, #4]
2405596e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24055972:	d010      	beq.n	24055996 <ADC_ConfigureBoostMode+0x46>
24055974:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24055978:	d873      	bhi.n	24055a62 <ADC_ConfigureBoostMode+0x112>
2405597a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405597e:	d002      	beq.n	24055986 <ADC_ConfigureBoostMode+0x36>
24055980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24055984:	d16d      	bne.n	24055a62 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
24055986:	687b      	ldr	r3, [r7, #4]
24055988:	685b      	ldr	r3, [r3, #4]
2405598a:	0c1b      	lsrs	r3, r3, #16
2405598c:	68fa      	ldr	r2, [r7, #12]
2405598e:	fbb2 f3f3 	udiv	r3, r2, r3
24055992:	60fb      	str	r3, [r7, #12]
        break;
24055994:	e068      	b.n	24055a68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
24055996:	68fb      	ldr	r3, [r7, #12]
24055998:	089b      	lsrs	r3, r3, #2
2405599a:	60fb      	str	r3, [r7, #12]
        break;
2405599c:	e064      	b.n	24055a68 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
2405599e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
240559a2:	f04f 0100 	mov.w	r1, #0
240559a6:	f007 ff67 	bl	2405d878 <HAL_RCCEx_GetPeriphCLKFreq>
240559aa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
240559ac:	687b      	ldr	r3, [r7, #4]
240559ae:	685b      	ldr	r3, [r3, #4]
240559b0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
240559b4:	d051      	beq.n	24055a5a <ADC_ConfigureBoostMode+0x10a>
240559b6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
240559ba:	d854      	bhi.n	24055a66 <ADC_ConfigureBoostMode+0x116>
240559bc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
240559c0:	d047      	beq.n	24055a52 <ADC_ConfigureBoostMode+0x102>
240559c2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
240559c6:	d84e      	bhi.n	24055a66 <ADC_ConfigureBoostMode+0x116>
240559c8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
240559cc:	d03d      	beq.n	24055a4a <ADC_ConfigureBoostMode+0xfa>
240559ce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
240559d2:	d848      	bhi.n	24055a66 <ADC_ConfigureBoostMode+0x116>
240559d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240559d8:	d033      	beq.n	24055a42 <ADC_ConfigureBoostMode+0xf2>
240559da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240559de:	d842      	bhi.n	24055a66 <ADC_ConfigureBoostMode+0x116>
240559e0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
240559e4:	d029      	beq.n	24055a3a <ADC_ConfigureBoostMode+0xea>
240559e6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
240559ea:	d83c      	bhi.n	24055a66 <ADC_ConfigureBoostMode+0x116>
240559ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
240559f0:	d01a      	beq.n	24055a28 <ADC_ConfigureBoostMode+0xd8>
240559f2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
240559f6:	d836      	bhi.n	24055a66 <ADC_ConfigureBoostMode+0x116>
240559f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
240559fc:	d014      	beq.n	24055a28 <ADC_ConfigureBoostMode+0xd8>
240559fe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
24055a02:	d830      	bhi.n	24055a66 <ADC_ConfigureBoostMode+0x116>
24055a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24055a08:	d00e      	beq.n	24055a28 <ADC_ConfigureBoostMode+0xd8>
24055a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24055a0e:	d82a      	bhi.n	24055a66 <ADC_ConfigureBoostMode+0x116>
24055a10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
24055a14:	d008      	beq.n	24055a28 <ADC_ConfigureBoostMode+0xd8>
24055a16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
24055a1a:	d824      	bhi.n	24055a66 <ADC_ConfigureBoostMode+0x116>
24055a1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24055a20:	d002      	beq.n	24055a28 <ADC_ConfigureBoostMode+0xd8>
24055a22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
24055a26:	d11e      	bne.n	24055a66 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
24055a28:	687b      	ldr	r3, [r7, #4]
24055a2a:	685b      	ldr	r3, [r3, #4]
24055a2c:	0c9b      	lsrs	r3, r3, #18
24055a2e:	005b      	lsls	r3, r3, #1
24055a30:	68fa      	ldr	r2, [r7, #12]
24055a32:	fbb2 f3f3 	udiv	r3, r2, r3
24055a36:	60fb      	str	r3, [r7, #12]
        break;
24055a38:	e016      	b.n	24055a68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
24055a3a:	68fb      	ldr	r3, [r7, #12]
24055a3c:	091b      	lsrs	r3, r3, #4
24055a3e:	60fb      	str	r3, [r7, #12]
        break;
24055a40:	e012      	b.n	24055a68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
24055a42:	68fb      	ldr	r3, [r7, #12]
24055a44:	095b      	lsrs	r3, r3, #5
24055a46:	60fb      	str	r3, [r7, #12]
        break;
24055a48:	e00e      	b.n	24055a68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
24055a4a:	68fb      	ldr	r3, [r7, #12]
24055a4c:	099b      	lsrs	r3, r3, #6
24055a4e:	60fb      	str	r3, [r7, #12]
        break;
24055a50:	e00a      	b.n	24055a68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
24055a52:	68fb      	ldr	r3, [r7, #12]
24055a54:	09db      	lsrs	r3, r3, #7
24055a56:	60fb      	str	r3, [r7, #12]
        break;
24055a58:	e006      	b.n	24055a68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
24055a5a:	68fb      	ldr	r3, [r7, #12]
24055a5c:	0a1b      	lsrs	r3, r3, #8
24055a5e:	60fb      	str	r3, [r7, #12]
        break;
24055a60:	e002      	b.n	24055a68 <ADC_ConfigureBoostMode+0x118>
        break;
24055a62:	bf00      	nop
24055a64:	e000      	b.n	24055a68 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
24055a66:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
24055a68:	68fb      	ldr	r3, [r7, #12]
24055a6a:	085b      	lsrs	r3, r3, #1
24055a6c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
24055a6e:	68fb      	ldr	r3, [r7, #12]
24055a70:	4a1b      	ldr	r2, [pc, #108]	; (24055ae0 <ADC_ConfigureBoostMode+0x190>)
24055a72:	4293      	cmp	r3, r2
24055a74:	d808      	bhi.n	24055a88 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
24055a76:	687b      	ldr	r3, [r7, #4]
24055a78:	681b      	ldr	r3, [r3, #0]
24055a7a:	689a      	ldr	r2, [r3, #8]
24055a7c:	687b      	ldr	r3, [r7, #4]
24055a7e:	681b      	ldr	r3, [r3, #0]
24055a80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
24055a84:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
24055a86:	e025      	b.n	24055ad4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
24055a88:	68fb      	ldr	r3, [r7, #12]
24055a8a:	4a16      	ldr	r2, [pc, #88]	; (24055ae4 <ADC_ConfigureBoostMode+0x194>)
24055a8c:	4293      	cmp	r3, r2
24055a8e:	d80a      	bhi.n	24055aa6 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
24055a90:	687b      	ldr	r3, [r7, #4]
24055a92:	681b      	ldr	r3, [r3, #0]
24055a94:	689b      	ldr	r3, [r3, #8]
24055a96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
24055a9a:	687b      	ldr	r3, [r7, #4]
24055a9c:	681b      	ldr	r3, [r3, #0]
24055a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24055aa2:	609a      	str	r2, [r3, #8]
}
24055aa4:	e016      	b.n	24055ad4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
24055aa6:	68fb      	ldr	r3, [r7, #12]
24055aa8:	4a0f      	ldr	r2, [pc, #60]	; (24055ae8 <ADC_ConfigureBoostMode+0x198>)
24055aaa:	4293      	cmp	r3, r2
24055aac:	d80a      	bhi.n	24055ac4 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
24055aae:	687b      	ldr	r3, [r7, #4]
24055ab0:	681b      	ldr	r3, [r3, #0]
24055ab2:	689b      	ldr	r3, [r3, #8]
24055ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
24055ab8:	687b      	ldr	r3, [r7, #4]
24055aba:	681b      	ldr	r3, [r3, #0]
24055abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
24055ac0:	609a      	str	r2, [r3, #8]
}
24055ac2:	e007      	b.n	24055ad4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
24055ac4:	687b      	ldr	r3, [r7, #4]
24055ac6:	681b      	ldr	r3, [r3, #0]
24055ac8:	689a      	ldr	r2, [r3, #8]
24055aca:	687b      	ldr	r3, [r7, #4]
24055acc:	681b      	ldr	r3, [r3, #0]
24055ace:	f442 7240 	orr.w	r2, r2, #768	; 0x300
24055ad2:	609a      	str	r2, [r3, #8]
}
24055ad4:	bf00      	nop
24055ad6:	3710      	adds	r7, #16
24055ad8:	46bd      	mov	sp, r7
24055ada:	bd80      	pop	{r7, pc}
24055adc:	40022300 	.word	0x40022300
24055ae0:	005f5e10 	.word	0x005f5e10
24055ae4:	00bebc20 	.word	0x00bebc20
24055ae8:	017d7840 	.word	0x017d7840

24055aec <LL_ADC_IsEnabled>:
{
24055aec:	b480      	push	{r7}
24055aee:	b083      	sub	sp, #12
24055af0:	af00      	add	r7, sp, #0
24055af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
24055af4:	687b      	ldr	r3, [r7, #4]
24055af6:	689b      	ldr	r3, [r3, #8]
24055af8:	f003 0301 	and.w	r3, r3, #1
24055afc:	2b01      	cmp	r3, #1
24055afe:	d101      	bne.n	24055b04 <LL_ADC_IsEnabled+0x18>
24055b00:	2301      	movs	r3, #1
24055b02:	e000      	b.n	24055b06 <LL_ADC_IsEnabled+0x1a>
24055b04:	2300      	movs	r3, #0
}
24055b06:	4618      	mov	r0, r3
24055b08:	370c      	adds	r7, #12
24055b0a:	46bd      	mov	sp, r7
24055b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
24055b10:	4770      	bx	lr

24055b12 <LL_ADC_REG_IsConversionOngoing>:
{
24055b12:	b480      	push	{r7}
24055b14:	b083      	sub	sp, #12
24055b16:	af00      	add	r7, sp, #0
24055b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
24055b1a:	687b      	ldr	r3, [r7, #4]
24055b1c:	689b      	ldr	r3, [r3, #8]
24055b1e:	f003 0304 	and.w	r3, r3, #4
24055b22:	2b04      	cmp	r3, #4
24055b24:	d101      	bne.n	24055b2a <LL_ADC_REG_IsConversionOngoing+0x18>
24055b26:	2301      	movs	r3, #1
24055b28:	e000      	b.n	24055b2c <LL_ADC_REG_IsConversionOngoing+0x1a>
24055b2a:	2300      	movs	r3, #0
}
24055b2c:	4618      	mov	r0, r3
24055b2e:	370c      	adds	r7, #12
24055b30:	46bd      	mov	sp, r7
24055b32:	f85d 7b04 	ldr.w	r7, [sp], #4
24055b36:	4770      	bx	lr

24055b38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
24055b38:	b480      	push	{r7}
24055b3a:	b083      	sub	sp, #12
24055b3c:	af00      	add	r7, sp, #0
24055b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
24055b40:	bf00      	nop
24055b42:	370c      	adds	r7, #12
24055b44:	46bd      	mov	sp, r7
24055b46:	f85d 7b04 	ldr.w	r7, [sp], #4
24055b4a:	4770      	bx	lr

24055b4c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
24055b4c:	b480      	push	{r7}
24055b4e:	b083      	sub	sp, #12
24055b50:	af00      	add	r7, sp, #0
24055b52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
24055b54:	bf00      	nop
24055b56:	370c      	adds	r7, #12
24055b58:	46bd      	mov	sp, r7
24055b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
24055b5e:	4770      	bx	lr

24055b60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
24055b60:	b480      	push	{r7}
24055b62:	b083      	sub	sp, #12
24055b64:	af00      	add	r7, sp, #0
24055b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
24055b68:	bf00      	nop
24055b6a:	370c      	adds	r7, #12
24055b6c:	46bd      	mov	sp, r7
24055b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
24055b72:	4770      	bx	lr

24055b74 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
24055b74:	b480      	push	{r7}
24055b76:	b083      	sub	sp, #12
24055b78:	af00      	add	r7, sp, #0
24055b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
24055b7c:	bf00      	nop
24055b7e:	370c      	adds	r7, #12
24055b80:	46bd      	mov	sp, r7
24055b82:	f85d 7b04 	ldr.w	r7, [sp], #4
24055b86:	4770      	bx	lr

24055b88 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
24055b88:	b480      	push	{r7}
24055b8a:	b083      	sub	sp, #12
24055b8c:	af00      	add	r7, sp, #0
24055b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
24055b90:	bf00      	nop
24055b92:	370c      	adds	r7, #12
24055b94:	46bd      	mov	sp, r7
24055b96:	f85d 7b04 	ldr.w	r7, [sp], #4
24055b9a:	4770      	bx	lr

24055b9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
24055b9c:	b590      	push	{r4, r7, lr}
24055b9e:	b09f      	sub	sp, #124	; 0x7c
24055ba0:	af00      	add	r7, sp, #0
24055ba2:	6078      	str	r0, [r7, #4]
24055ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
24055ba6:	2300      	movs	r3, #0
24055ba8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
24055bac:	687b      	ldr	r3, [r7, #4]
24055bae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
24055bb2:	2b01      	cmp	r3, #1
24055bb4:	d101      	bne.n	24055bba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
24055bb6:	2302      	movs	r3, #2
24055bb8:	e080      	b.n	24055cbc <HAL_ADCEx_MultiModeConfigChannel+0x120>
24055bba:	687b      	ldr	r3, [r7, #4]
24055bbc:	2201      	movs	r2, #1
24055bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
24055bc2:	2300      	movs	r3, #0
24055bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
24055bc6:	2300      	movs	r3, #0
24055bc8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
24055bca:	687b      	ldr	r3, [r7, #4]
24055bcc:	681b      	ldr	r3, [r3, #0]
24055bce:	4a3d      	ldr	r2, [pc, #244]	; (24055cc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
24055bd0:	4293      	cmp	r3, r2
24055bd2:	d102      	bne.n	24055bda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
24055bd4:	4b3c      	ldr	r3, [pc, #240]	; (24055cc8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
24055bd6:	60bb      	str	r3, [r7, #8]
24055bd8:	e001      	b.n	24055bde <HAL_ADCEx_MultiModeConfigChannel+0x42>
24055bda:	2300      	movs	r3, #0
24055bdc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
24055bde:	68bb      	ldr	r3, [r7, #8]
24055be0:	2b00      	cmp	r3, #0
24055be2:	d10b      	bne.n	24055bfc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24055be4:	687b      	ldr	r3, [r7, #4]
24055be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24055be8:	f043 0220 	orr.w	r2, r3, #32
24055bec:	687b      	ldr	r3, [r7, #4]
24055bee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
24055bf0:	687b      	ldr	r3, [r7, #4]
24055bf2:	2200      	movs	r2, #0
24055bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
24055bf8:	2301      	movs	r3, #1
24055bfa:	e05f      	b.n	24055cbc <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
24055bfc:	68bb      	ldr	r3, [r7, #8]
24055bfe:	4618      	mov	r0, r3
24055c00:	f7ff ff87 	bl	24055b12 <LL_ADC_REG_IsConversionOngoing>
24055c04:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24055c06:	687b      	ldr	r3, [r7, #4]
24055c08:	681b      	ldr	r3, [r3, #0]
24055c0a:	4618      	mov	r0, r3
24055c0c:	f7ff ff81 	bl	24055b12 <LL_ADC_REG_IsConversionOngoing>
24055c10:	4603      	mov	r3, r0
24055c12:	2b00      	cmp	r3, #0
24055c14:	d141      	bne.n	24055c9a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
24055c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
24055c18:	2b00      	cmp	r3, #0
24055c1a:	d13e      	bne.n	24055c9a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
24055c1c:	4b2b      	ldr	r3, [pc, #172]	; (24055ccc <HAL_ADCEx_MultiModeConfigChannel+0x130>)
24055c1e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24055c20:	683b      	ldr	r3, [r7, #0]
24055c22:	681b      	ldr	r3, [r3, #0]
24055c24:	2b00      	cmp	r3, #0
24055c26:	d020      	beq.n	24055c6a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
24055c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055c2a:	689b      	ldr	r3, [r3, #8]
24055c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24055c30:	683b      	ldr	r3, [r7, #0]
24055c32:	685b      	ldr	r3, [r3, #4]
24055c34:	431a      	orrs	r2, r3
24055c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055c38:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24055c3a:	4822      	ldr	r0, [pc, #136]	; (24055cc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
24055c3c:	f7ff ff56 	bl	24055aec <LL_ADC_IsEnabled>
24055c40:	4604      	mov	r4, r0
24055c42:	4821      	ldr	r0, [pc, #132]	; (24055cc8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
24055c44:	f7ff ff52 	bl	24055aec <LL_ADC_IsEnabled>
24055c48:	4603      	mov	r3, r0
24055c4a:	4323      	orrs	r3, r4
24055c4c:	2b00      	cmp	r3, #0
24055c4e:	d12e      	bne.n	24055cae <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
24055c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055c52:	689a      	ldr	r2, [r3, #8]
24055c54:	4b1e      	ldr	r3, [pc, #120]	; (24055cd0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
24055c56:	4013      	ands	r3, r2
24055c58:	683a      	ldr	r2, [r7, #0]
24055c5a:	6811      	ldr	r1, [r2, #0]
24055c5c:	683a      	ldr	r2, [r7, #0]
24055c5e:	6892      	ldr	r2, [r2, #8]
24055c60:	430a      	orrs	r2, r1
24055c62:	431a      	orrs	r2, r3
24055c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055c66:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24055c68:	e021      	b.n	24055cae <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
24055c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055c6c:	689b      	ldr	r3, [r3, #8]
24055c6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24055c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055c74:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24055c76:	4813      	ldr	r0, [pc, #76]	; (24055cc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
24055c78:	f7ff ff38 	bl	24055aec <LL_ADC_IsEnabled>
24055c7c:	4604      	mov	r4, r0
24055c7e:	4812      	ldr	r0, [pc, #72]	; (24055cc8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
24055c80:	f7ff ff34 	bl	24055aec <LL_ADC_IsEnabled>
24055c84:	4603      	mov	r3, r0
24055c86:	4323      	orrs	r3, r4
24055c88:	2b00      	cmp	r3, #0
24055c8a:	d110      	bne.n	24055cae <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
24055c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055c8e:	689a      	ldr	r2, [r3, #8]
24055c90:	4b0f      	ldr	r3, [pc, #60]	; (24055cd0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
24055c92:	4013      	ands	r3, r2
24055c94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
24055c96:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24055c98:	e009      	b.n	24055cae <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24055c9a:	687b      	ldr	r3, [r7, #4]
24055c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24055c9e:	f043 0220 	orr.w	r2, r3, #32
24055ca2:	687b      	ldr	r3, [r7, #4]
24055ca4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
24055ca6:	2301      	movs	r3, #1
24055ca8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
24055cac:	e000      	b.n	24055cb0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24055cae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
24055cb0:	687b      	ldr	r3, [r7, #4]
24055cb2:	2200      	movs	r2, #0
24055cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
24055cb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
24055cbc:	4618      	mov	r0, r3
24055cbe:	377c      	adds	r7, #124	; 0x7c
24055cc0:	46bd      	mov	sp, r7
24055cc2:	bd90      	pop	{r4, r7, pc}
24055cc4:	40022000 	.word	0x40022000
24055cc8:	40022100 	.word	0x40022100
24055ccc:	40022300 	.word	0x40022300
24055cd0:	fffff0e0 	.word	0xfffff0e0

24055cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24055cd4:	b480      	push	{r7}
24055cd6:	b085      	sub	sp, #20
24055cd8:	af00      	add	r7, sp, #0
24055cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
24055cdc:	687b      	ldr	r3, [r7, #4]
24055cde:	f003 0307 	and.w	r3, r3, #7
24055ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24055ce4:	4b0b      	ldr	r3, [pc, #44]	; (24055d14 <__NVIC_SetPriorityGrouping+0x40>)
24055ce6:	68db      	ldr	r3, [r3, #12]
24055ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24055cea:	68ba      	ldr	r2, [r7, #8]
24055cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
24055cf0:	4013      	ands	r3, r2
24055cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24055cf4:	68fb      	ldr	r3, [r7, #12]
24055cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24055cf8:	68bb      	ldr	r3, [r7, #8]
24055cfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
24055cfc:	4b06      	ldr	r3, [pc, #24]	; (24055d18 <__NVIC_SetPriorityGrouping+0x44>)
24055cfe:	4313      	orrs	r3, r2
24055d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
24055d02:	4a04      	ldr	r2, [pc, #16]	; (24055d14 <__NVIC_SetPriorityGrouping+0x40>)
24055d04:	68bb      	ldr	r3, [r7, #8]
24055d06:	60d3      	str	r3, [r2, #12]
}
24055d08:	bf00      	nop
24055d0a:	3714      	adds	r7, #20
24055d0c:	46bd      	mov	sp, r7
24055d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
24055d12:	4770      	bx	lr
24055d14:	e000ed00 	.word	0xe000ed00
24055d18:	05fa0000 	.word	0x05fa0000

24055d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
24055d1c:	b480      	push	{r7}
24055d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24055d20:	4b04      	ldr	r3, [pc, #16]	; (24055d34 <__NVIC_GetPriorityGrouping+0x18>)
24055d22:	68db      	ldr	r3, [r3, #12]
24055d24:	0a1b      	lsrs	r3, r3, #8
24055d26:	f003 0307 	and.w	r3, r3, #7
}
24055d2a:	4618      	mov	r0, r3
24055d2c:	46bd      	mov	sp, r7
24055d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
24055d32:	4770      	bx	lr
24055d34:	e000ed00 	.word	0xe000ed00

24055d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
24055d38:	b480      	push	{r7}
24055d3a:	b083      	sub	sp, #12
24055d3c:	af00      	add	r7, sp, #0
24055d3e:	4603      	mov	r3, r0
24055d40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24055d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24055d46:	2b00      	cmp	r3, #0
24055d48:	db0b      	blt.n	24055d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24055d4a:	88fb      	ldrh	r3, [r7, #6]
24055d4c:	f003 021f 	and.w	r2, r3, #31
24055d50:	4907      	ldr	r1, [pc, #28]	; (24055d70 <__NVIC_EnableIRQ+0x38>)
24055d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24055d56:	095b      	lsrs	r3, r3, #5
24055d58:	2001      	movs	r0, #1
24055d5a:	fa00 f202 	lsl.w	r2, r0, r2
24055d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
24055d62:	bf00      	nop
24055d64:	370c      	adds	r7, #12
24055d66:	46bd      	mov	sp, r7
24055d68:	f85d 7b04 	ldr.w	r7, [sp], #4
24055d6c:	4770      	bx	lr
24055d6e:	bf00      	nop
24055d70:	e000e100 	.word	0xe000e100

24055d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
24055d74:	b480      	push	{r7}
24055d76:	b083      	sub	sp, #12
24055d78:	af00      	add	r7, sp, #0
24055d7a:	4603      	mov	r3, r0
24055d7c:	6039      	str	r1, [r7, #0]
24055d7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24055d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24055d84:	2b00      	cmp	r3, #0
24055d86:	db0a      	blt.n	24055d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24055d88:	683b      	ldr	r3, [r7, #0]
24055d8a:	b2da      	uxtb	r2, r3
24055d8c:	490c      	ldr	r1, [pc, #48]	; (24055dc0 <__NVIC_SetPriority+0x4c>)
24055d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24055d92:	0112      	lsls	r2, r2, #4
24055d94:	b2d2      	uxtb	r2, r2
24055d96:	440b      	add	r3, r1
24055d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
24055d9c:	e00a      	b.n	24055db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24055d9e:	683b      	ldr	r3, [r7, #0]
24055da0:	b2da      	uxtb	r2, r3
24055da2:	4908      	ldr	r1, [pc, #32]	; (24055dc4 <__NVIC_SetPriority+0x50>)
24055da4:	88fb      	ldrh	r3, [r7, #6]
24055da6:	f003 030f 	and.w	r3, r3, #15
24055daa:	3b04      	subs	r3, #4
24055dac:	0112      	lsls	r2, r2, #4
24055dae:	b2d2      	uxtb	r2, r2
24055db0:	440b      	add	r3, r1
24055db2:	761a      	strb	r2, [r3, #24]
}
24055db4:	bf00      	nop
24055db6:	370c      	adds	r7, #12
24055db8:	46bd      	mov	sp, r7
24055dba:	f85d 7b04 	ldr.w	r7, [sp], #4
24055dbe:	4770      	bx	lr
24055dc0:	e000e100 	.word	0xe000e100
24055dc4:	e000ed00 	.word	0xe000ed00

24055dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
24055dc8:	b480      	push	{r7}
24055dca:	b089      	sub	sp, #36	; 0x24
24055dcc:	af00      	add	r7, sp, #0
24055dce:	60f8      	str	r0, [r7, #12]
24055dd0:	60b9      	str	r1, [r7, #8]
24055dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24055dd4:	68fb      	ldr	r3, [r7, #12]
24055dd6:	f003 0307 	and.w	r3, r3, #7
24055dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24055ddc:	69fb      	ldr	r3, [r7, #28]
24055dde:	f1c3 0307 	rsb	r3, r3, #7
24055de2:	2b04      	cmp	r3, #4
24055de4:	bf28      	it	cs
24055de6:	2304      	movcs	r3, #4
24055de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24055dea:	69fb      	ldr	r3, [r7, #28]
24055dec:	3304      	adds	r3, #4
24055dee:	2b06      	cmp	r3, #6
24055df0:	d902      	bls.n	24055df8 <NVIC_EncodePriority+0x30>
24055df2:	69fb      	ldr	r3, [r7, #28]
24055df4:	3b03      	subs	r3, #3
24055df6:	e000      	b.n	24055dfa <NVIC_EncodePriority+0x32>
24055df8:	2300      	movs	r3, #0
24055dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24055dfc:	f04f 32ff 	mov.w	r2, #4294967295
24055e00:	69bb      	ldr	r3, [r7, #24]
24055e02:	fa02 f303 	lsl.w	r3, r2, r3
24055e06:	43da      	mvns	r2, r3
24055e08:	68bb      	ldr	r3, [r7, #8]
24055e0a:	401a      	ands	r2, r3
24055e0c:	697b      	ldr	r3, [r7, #20]
24055e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24055e10:	f04f 31ff 	mov.w	r1, #4294967295
24055e14:	697b      	ldr	r3, [r7, #20]
24055e16:	fa01 f303 	lsl.w	r3, r1, r3
24055e1a:	43d9      	mvns	r1, r3
24055e1c:	687b      	ldr	r3, [r7, #4]
24055e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24055e20:	4313      	orrs	r3, r2
         );
}
24055e22:	4618      	mov	r0, r3
24055e24:	3724      	adds	r7, #36	; 0x24
24055e26:	46bd      	mov	sp, r7
24055e28:	f85d 7b04 	ldr.w	r7, [sp], #4
24055e2c:	4770      	bx	lr
	...

24055e30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
24055e30:	b480      	push	{r7}
24055e32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
24055e34:	f3bf 8f4f 	dsb	sy
}
24055e38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
24055e3a:	4b06      	ldr	r3, [pc, #24]	; (24055e54 <__NVIC_SystemReset+0x24>)
24055e3c:	68db      	ldr	r3, [r3, #12]
24055e3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
24055e42:	4904      	ldr	r1, [pc, #16]	; (24055e54 <__NVIC_SystemReset+0x24>)
24055e44:	4b04      	ldr	r3, [pc, #16]	; (24055e58 <__NVIC_SystemReset+0x28>)
24055e46:	4313      	orrs	r3, r2
24055e48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
24055e4a:	f3bf 8f4f 	dsb	sy
}
24055e4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
24055e50:	bf00      	nop
24055e52:	e7fd      	b.n	24055e50 <__NVIC_SystemReset+0x20>
24055e54:	e000ed00 	.word	0xe000ed00
24055e58:	05fa0004 	.word	0x05fa0004

24055e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
24055e5c:	b580      	push	{r7, lr}
24055e5e:	b082      	sub	sp, #8
24055e60:	af00      	add	r7, sp, #0
24055e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24055e64:	687b      	ldr	r3, [r7, #4]
24055e66:	3b01      	subs	r3, #1
24055e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24055e6c:	d301      	bcc.n	24055e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
24055e6e:	2301      	movs	r3, #1
24055e70:	e00f      	b.n	24055e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24055e72:	4a0a      	ldr	r2, [pc, #40]	; (24055e9c <SysTick_Config+0x40>)
24055e74:	687b      	ldr	r3, [r7, #4]
24055e76:	3b01      	subs	r3, #1
24055e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
24055e7a:	210f      	movs	r1, #15
24055e7c:	f04f 30ff 	mov.w	r0, #4294967295
24055e80:	f7ff ff78 	bl	24055d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24055e84:	4b05      	ldr	r3, [pc, #20]	; (24055e9c <SysTick_Config+0x40>)
24055e86:	2200      	movs	r2, #0
24055e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24055e8a:	4b04      	ldr	r3, [pc, #16]	; (24055e9c <SysTick_Config+0x40>)
24055e8c:	2207      	movs	r2, #7
24055e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24055e90:	2300      	movs	r3, #0
}
24055e92:	4618      	mov	r0, r3
24055e94:	3708      	adds	r7, #8
24055e96:	46bd      	mov	sp, r7
24055e98:	bd80      	pop	{r7, pc}
24055e9a:	bf00      	nop
24055e9c:	e000e010 	.word	0xe000e010

24055ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24055ea0:	b580      	push	{r7, lr}
24055ea2:	b082      	sub	sp, #8
24055ea4:	af00      	add	r7, sp, #0
24055ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
24055ea8:	6878      	ldr	r0, [r7, #4]
24055eaa:	f7ff ff13 	bl	24055cd4 <__NVIC_SetPriorityGrouping>
}
24055eae:	bf00      	nop
24055eb0:	3708      	adds	r7, #8
24055eb2:	46bd      	mov	sp, r7
24055eb4:	bd80      	pop	{r7, pc}

24055eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24055eb6:	b580      	push	{r7, lr}
24055eb8:	b086      	sub	sp, #24
24055eba:	af00      	add	r7, sp, #0
24055ebc:	4603      	mov	r3, r0
24055ebe:	60b9      	str	r1, [r7, #8]
24055ec0:	607a      	str	r2, [r7, #4]
24055ec2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
24055ec4:	f7ff ff2a 	bl	24055d1c <__NVIC_GetPriorityGrouping>
24055ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
24055eca:	687a      	ldr	r2, [r7, #4]
24055ecc:	68b9      	ldr	r1, [r7, #8]
24055ece:	6978      	ldr	r0, [r7, #20]
24055ed0:	f7ff ff7a 	bl	24055dc8 <NVIC_EncodePriority>
24055ed4:	4602      	mov	r2, r0
24055ed6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24055eda:	4611      	mov	r1, r2
24055edc:	4618      	mov	r0, r3
24055ede:	f7ff ff49 	bl	24055d74 <__NVIC_SetPriority>
}
24055ee2:	bf00      	nop
24055ee4:	3718      	adds	r7, #24
24055ee6:	46bd      	mov	sp, r7
24055ee8:	bd80      	pop	{r7, pc}

24055eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
24055eea:	b580      	push	{r7, lr}
24055eec:	b082      	sub	sp, #8
24055eee:	af00      	add	r7, sp, #0
24055ef0:	4603      	mov	r3, r0
24055ef2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
24055ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24055ef8:	4618      	mov	r0, r3
24055efa:	f7ff ff1d 	bl	24055d38 <__NVIC_EnableIRQ>
}
24055efe:	bf00      	nop
24055f00:	3708      	adds	r7, #8
24055f02:	46bd      	mov	sp, r7
24055f04:	bd80      	pop	{r7, pc}

24055f06 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
24055f06:	b580      	push	{r7, lr}
24055f08:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
24055f0a:	f7ff ff91 	bl	24055e30 <__NVIC_SystemReset>

24055f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24055f0e:	b580      	push	{r7, lr}
24055f10:	b082      	sub	sp, #8
24055f12:	af00      	add	r7, sp, #0
24055f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
24055f16:	6878      	ldr	r0, [r7, #4]
24055f18:	f7ff ffa0 	bl	24055e5c <SysTick_Config>
24055f1c:	4603      	mov	r3, r0
}
24055f1e:	4618      	mov	r0, r3
24055f20:	3708      	adds	r7, #8
24055f22:	46bd      	mov	sp, r7
24055f24:	bd80      	pop	{r7, pc}

24055f26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
24055f26:	b580      	push	{r7, lr}
24055f28:	b082      	sub	sp, #8
24055f2a:	af00      	add	r7, sp, #0
24055f2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
24055f2e:	687b      	ldr	r3, [r7, #4]
24055f30:	2b00      	cmp	r3, #0
24055f32:	d101      	bne.n	24055f38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
24055f34:	2301      	movs	r3, #1
24055f36:	e014      	b.n	24055f62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
24055f38:	687b      	ldr	r3, [r7, #4]
24055f3a:	791b      	ldrb	r3, [r3, #4]
24055f3c:	b2db      	uxtb	r3, r3
24055f3e:	2b00      	cmp	r3, #0
24055f40:	d105      	bne.n	24055f4e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
24055f42:	687b      	ldr	r3, [r7, #4]
24055f44:	2200      	movs	r2, #0
24055f46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
24055f48:	6878      	ldr	r0, [r7, #4]
24055f4a:	f7fd f88b 	bl	24053064 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
24055f4e:	687b      	ldr	r3, [r7, #4]
24055f50:	2202      	movs	r2, #2
24055f52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
24055f54:	687b      	ldr	r3, [r7, #4]
24055f56:	2200      	movs	r2, #0
24055f58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
24055f5a:	687b      	ldr	r3, [r7, #4]
24055f5c:	2201      	movs	r2, #1
24055f5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
24055f60:	2300      	movs	r3, #0
}
24055f62:	4618      	mov	r0, r3
24055f64:	3708      	adds	r7, #8
24055f66:	46bd      	mov	sp, r7
24055f68:	bd80      	pop	{r7, pc}

24055f6a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
24055f6a:	b480      	push	{r7}
24055f6c:	b083      	sub	sp, #12
24055f6e:	af00      	add	r7, sp, #0
24055f70:	6078      	str	r0, [r7, #4]
24055f72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
24055f74:	687b      	ldr	r3, [r7, #4]
24055f76:	795b      	ldrb	r3, [r3, #5]
24055f78:	2b01      	cmp	r3, #1
24055f7a:	d101      	bne.n	24055f80 <HAL_DAC_Start+0x16>
24055f7c:	2302      	movs	r3, #2
24055f7e:	e040      	b.n	24056002 <HAL_DAC_Start+0x98>
24055f80:	687b      	ldr	r3, [r7, #4]
24055f82:	2201      	movs	r2, #1
24055f84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
24055f86:	687b      	ldr	r3, [r7, #4]
24055f88:	2202      	movs	r2, #2
24055f8a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
24055f8c:	687b      	ldr	r3, [r7, #4]
24055f8e:	681b      	ldr	r3, [r3, #0]
24055f90:	6819      	ldr	r1, [r3, #0]
24055f92:	683b      	ldr	r3, [r7, #0]
24055f94:	f003 0310 	and.w	r3, r3, #16
24055f98:	2201      	movs	r2, #1
24055f9a:	409a      	lsls	r2, r3
24055f9c:	687b      	ldr	r3, [r7, #4]
24055f9e:	681b      	ldr	r3, [r3, #0]
24055fa0:	430a      	orrs	r2, r1
24055fa2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
24055fa4:	683b      	ldr	r3, [r7, #0]
24055fa6:	2b00      	cmp	r3, #0
24055fa8:	d10f      	bne.n	24055fca <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
24055faa:	687b      	ldr	r3, [r7, #4]
24055fac:	681b      	ldr	r3, [r3, #0]
24055fae:	681b      	ldr	r3, [r3, #0]
24055fb0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
24055fb4:	2b02      	cmp	r3, #2
24055fb6:	d11d      	bne.n	24055ff4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
24055fb8:	687b      	ldr	r3, [r7, #4]
24055fba:	681b      	ldr	r3, [r3, #0]
24055fbc:	685a      	ldr	r2, [r3, #4]
24055fbe:	687b      	ldr	r3, [r7, #4]
24055fc0:	681b      	ldr	r3, [r3, #0]
24055fc2:	f042 0201 	orr.w	r2, r2, #1
24055fc6:	605a      	str	r2, [r3, #4]
24055fc8:	e014      	b.n	24055ff4 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
24055fca:	687b      	ldr	r3, [r7, #4]
24055fcc:	681b      	ldr	r3, [r3, #0]
24055fce:	681b      	ldr	r3, [r3, #0]
24055fd0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
24055fd4:	683b      	ldr	r3, [r7, #0]
24055fd6:	f003 0310 	and.w	r3, r3, #16
24055fda:	2102      	movs	r1, #2
24055fdc:	fa01 f303 	lsl.w	r3, r1, r3
24055fe0:	429a      	cmp	r2, r3
24055fe2:	d107      	bne.n	24055ff4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
24055fe4:	687b      	ldr	r3, [r7, #4]
24055fe6:	681b      	ldr	r3, [r3, #0]
24055fe8:	685a      	ldr	r2, [r3, #4]
24055fea:	687b      	ldr	r3, [r7, #4]
24055fec:	681b      	ldr	r3, [r3, #0]
24055fee:	f042 0202 	orr.w	r2, r2, #2
24055ff2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
24055ff4:	687b      	ldr	r3, [r7, #4]
24055ff6:	2201      	movs	r2, #1
24055ff8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
24055ffa:	687b      	ldr	r3, [r7, #4]
24055ffc:	2200      	movs	r2, #0
24055ffe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
24056000:	2300      	movs	r3, #0
}
24056002:	4618      	mov	r0, r3
24056004:	370c      	adds	r7, #12
24056006:	46bd      	mov	sp, r7
24056008:	f85d 7b04 	ldr.w	r7, [sp], #4
2405600c:	4770      	bx	lr

2405600e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
2405600e:	b480      	push	{r7}
24056010:	b087      	sub	sp, #28
24056012:	af00      	add	r7, sp, #0
24056014:	60f8      	str	r0, [r7, #12]
24056016:	60b9      	str	r1, [r7, #8]
24056018:	607a      	str	r2, [r7, #4]
2405601a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
2405601c:	2300      	movs	r3, #0
2405601e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
24056020:	68fb      	ldr	r3, [r7, #12]
24056022:	681b      	ldr	r3, [r3, #0]
24056024:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
24056026:	68bb      	ldr	r3, [r7, #8]
24056028:	2b00      	cmp	r3, #0
2405602a:	d105      	bne.n	24056038 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
2405602c:	697a      	ldr	r2, [r7, #20]
2405602e:	687b      	ldr	r3, [r7, #4]
24056030:	4413      	add	r3, r2
24056032:	3308      	adds	r3, #8
24056034:	617b      	str	r3, [r7, #20]
24056036:	e004      	b.n	24056042 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
24056038:	697a      	ldr	r2, [r7, #20]
2405603a:	687b      	ldr	r3, [r7, #4]
2405603c:	4413      	add	r3, r2
2405603e:	3314      	adds	r3, #20
24056040:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
24056042:	697b      	ldr	r3, [r7, #20]
24056044:	461a      	mov	r2, r3
24056046:	683b      	ldr	r3, [r7, #0]
24056048:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
2405604a:	2300      	movs	r3, #0
}
2405604c:	4618      	mov	r0, r3
2405604e:	371c      	adds	r7, #28
24056050:	46bd      	mov	sp, r7
24056052:	f85d 7b04 	ldr.w	r7, [sp], #4
24056056:	4770      	bx	lr

24056058 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
24056058:	b580      	push	{r7, lr}
2405605a:	b088      	sub	sp, #32
2405605c:	af00      	add	r7, sp, #0
2405605e:	60f8      	str	r0, [r7, #12]
24056060:	60b9      	str	r1, [r7, #8]
24056062:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
24056064:	68fb      	ldr	r3, [r7, #12]
24056066:	795b      	ldrb	r3, [r3, #5]
24056068:	2b01      	cmp	r3, #1
2405606a:	d101      	bne.n	24056070 <HAL_DAC_ConfigChannel+0x18>
2405606c:	2302      	movs	r3, #2
2405606e:	e12a      	b.n	240562c6 <HAL_DAC_ConfigChannel+0x26e>
24056070:	68fb      	ldr	r3, [r7, #12]
24056072:	2201      	movs	r2, #1
24056074:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
24056076:	68fb      	ldr	r3, [r7, #12]
24056078:	2202      	movs	r2, #2
2405607a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
2405607c:	68bb      	ldr	r3, [r7, #8]
2405607e:	681b      	ldr	r3, [r3, #0]
24056080:	2b04      	cmp	r3, #4
24056082:	f040 8081 	bne.w	24056188 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
24056086:	f7fd fedd 	bl	24053e44 <HAL_GetTick>
2405608a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
2405608c:	687b      	ldr	r3, [r7, #4]
2405608e:	2b00      	cmp	r3, #0
24056090:	d140      	bne.n	24056114 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
24056092:	e018      	b.n	240560c6 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
24056094:	f7fd fed6 	bl	24053e44 <HAL_GetTick>
24056098:	4602      	mov	r2, r0
2405609a:	69bb      	ldr	r3, [r7, #24]
2405609c:	1ad3      	subs	r3, r2, r3
2405609e:	2b01      	cmp	r3, #1
240560a0:	d911      	bls.n	240560c6 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
240560a2:	68fb      	ldr	r3, [r7, #12]
240560a4:	681b      	ldr	r3, [r3, #0]
240560a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240560a8:	4b89      	ldr	r3, [pc, #548]	; (240562d0 <HAL_DAC_ConfigChannel+0x278>)
240560aa:	4013      	ands	r3, r2
240560ac:	2b00      	cmp	r3, #0
240560ae:	d00a      	beq.n	240560c6 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
240560b0:	68fb      	ldr	r3, [r7, #12]
240560b2:	691b      	ldr	r3, [r3, #16]
240560b4:	f043 0208 	orr.w	r2, r3, #8
240560b8:	68fb      	ldr	r3, [r7, #12]
240560ba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
240560bc:	68fb      	ldr	r3, [r7, #12]
240560be:	2203      	movs	r2, #3
240560c0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
240560c2:	2303      	movs	r3, #3
240560c4:	e0ff      	b.n	240562c6 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
240560c6:	68fb      	ldr	r3, [r7, #12]
240560c8:	681b      	ldr	r3, [r3, #0]
240560ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240560cc:	4b80      	ldr	r3, [pc, #512]	; (240562d0 <HAL_DAC_ConfigChannel+0x278>)
240560ce:	4013      	ands	r3, r2
240560d0:	2b00      	cmp	r3, #0
240560d2:	d1df      	bne.n	24056094 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
240560d4:	2001      	movs	r0, #1
240560d6:	f7fd fec1 	bl	24053e5c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
240560da:	68fb      	ldr	r3, [r7, #12]
240560dc:	681b      	ldr	r3, [r3, #0]
240560de:	68ba      	ldr	r2, [r7, #8]
240560e0:	6992      	ldr	r2, [r2, #24]
240560e2:	641a      	str	r2, [r3, #64]	; 0x40
240560e4:	e023      	b.n	2405612e <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
240560e6:	f7fd fead 	bl	24053e44 <HAL_GetTick>
240560ea:	4602      	mov	r2, r0
240560ec:	69bb      	ldr	r3, [r7, #24]
240560ee:	1ad3      	subs	r3, r2, r3
240560f0:	2b01      	cmp	r3, #1
240560f2:	d90f      	bls.n	24056114 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
240560f4:	68fb      	ldr	r3, [r7, #12]
240560f6:	681b      	ldr	r3, [r3, #0]
240560f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240560fa:	2b00      	cmp	r3, #0
240560fc:	da0a      	bge.n	24056114 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
240560fe:	68fb      	ldr	r3, [r7, #12]
24056100:	691b      	ldr	r3, [r3, #16]
24056102:	f043 0208 	orr.w	r2, r3, #8
24056106:	68fb      	ldr	r3, [r7, #12]
24056108:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
2405610a:	68fb      	ldr	r3, [r7, #12]
2405610c:	2203      	movs	r2, #3
2405610e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
24056110:	2303      	movs	r3, #3
24056112:	e0d8      	b.n	240562c6 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
24056114:	68fb      	ldr	r3, [r7, #12]
24056116:	681b      	ldr	r3, [r3, #0]
24056118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405611a:	2b00      	cmp	r3, #0
2405611c:	dbe3      	blt.n	240560e6 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
2405611e:	2001      	movs	r0, #1
24056120:	f7fd fe9c 	bl	24053e5c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
24056124:	68fb      	ldr	r3, [r7, #12]
24056126:	681b      	ldr	r3, [r3, #0]
24056128:	68ba      	ldr	r2, [r7, #8]
2405612a:	6992      	ldr	r2, [r2, #24]
2405612c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
2405612e:	68fb      	ldr	r3, [r7, #12]
24056130:	681b      	ldr	r3, [r3, #0]
24056132:	6c9a      	ldr	r2, [r3, #72]	; 0x48
24056134:	687b      	ldr	r3, [r7, #4]
24056136:	f003 0310 	and.w	r3, r3, #16
2405613a:	f240 31ff 	movw	r1, #1023	; 0x3ff
2405613e:	fa01 f303 	lsl.w	r3, r1, r3
24056142:	43db      	mvns	r3, r3
24056144:	ea02 0103 	and.w	r1, r2, r3
24056148:	68bb      	ldr	r3, [r7, #8]
2405614a:	69da      	ldr	r2, [r3, #28]
2405614c:	687b      	ldr	r3, [r7, #4]
2405614e:	f003 0310 	and.w	r3, r3, #16
24056152:	409a      	lsls	r2, r3
24056154:	68fb      	ldr	r3, [r7, #12]
24056156:	681b      	ldr	r3, [r3, #0]
24056158:	430a      	orrs	r2, r1
2405615a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
2405615c:	68fb      	ldr	r3, [r7, #12]
2405615e:	681b      	ldr	r3, [r3, #0]
24056160:	6cda      	ldr	r2, [r3, #76]	; 0x4c
24056162:	687b      	ldr	r3, [r7, #4]
24056164:	f003 0310 	and.w	r3, r3, #16
24056168:	21ff      	movs	r1, #255	; 0xff
2405616a:	fa01 f303 	lsl.w	r3, r1, r3
2405616e:	43db      	mvns	r3, r3
24056170:	ea02 0103 	and.w	r1, r2, r3
24056174:	68bb      	ldr	r3, [r7, #8]
24056176:	6a1a      	ldr	r2, [r3, #32]
24056178:	687b      	ldr	r3, [r7, #4]
2405617a:	f003 0310 	and.w	r3, r3, #16
2405617e:	409a      	lsls	r2, r3
24056180:	68fb      	ldr	r3, [r7, #12]
24056182:	681b      	ldr	r3, [r3, #0]
24056184:	430a      	orrs	r2, r1
24056186:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
24056188:	68bb      	ldr	r3, [r7, #8]
2405618a:	691b      	ldr	r3, [r3, #16]
2405618c:	2b01      	cmp	r3, #1
2405618e:	d11d      	bne.n	240561cc <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
24056190:	68fb      	ldr	r3, [r7, #12]
24056192:	681b      	ldr	r3, [r3, #0]
24056194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24056196:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
24056198:	687b      	ldr	r3, [r7, #4]
2405619a:	f003 0310 	and.w	r3, r3, #16
2405619e:	221f      	movs	r2, #31
240561a0:	fa02 f303 	lsl.w	r3, r2, r3
240561a4:	43db      	mvns	r3, r3
240561a6:	697a      	ldr	r2, [r7, #20]
240561a8:	4013      	ands	r3, r2
240561aa:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
240561ac:	68bb      	ldr	r3, [r7, #8]
240561ae:	695b      	ldr	r3, [r3, #20]
240561b0:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
240561b2:	687b      	ldr	r3, [r7, #4]
240561b4:	f003 0310 	and.w	r3, r3, #16
240561b8:	693a      	ldr	r2, [r7, #16]
240561ba:	fa02 f303 	lsl.w	r3, r2, r3
240561be:	697a      	ldr	r2, [r7, #20]
240561c0:	4313      	orrs	r3, r2
240561c2:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
240561c4:	68fb      	ldr	r3, [r7, #12]
240561c6:	681b      	ldr	r3, [r3, #0]
240561c8:	697a      	ldr	r2, [r7, #20]
240561ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
240561cc:	68fb      	ldr	r3, [r7, #12]
240561ce:	681b      	ldr	r3, [r3, #0]
240561d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240561d2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
240561d4:	687b      	ldr	r3, [r7, #4]
240561d6:	f003 0310 	and.w	r3, r3, #16
240561da:	2207      	movs	r2, #7
240561dc:	fa02 f303 	lsl.w	r3, r2, r3
240561e0:	43db      	mvns	r3, r3
240561e2:	697a      	ldr	r2, [r7, #20]
240561e4:	4013      	ands	r3, r2
240561e6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
240561e8:	68bb      	ldr	r3, [r7, #8]
240561ea:	68db      	ldr	r3, [r3, #12]
240561ec:	2b01      	cmp	r3, #1
240561ee:	d102      	bne.n	240561f6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
240561f0:	2300      	movs	r3, #0
240561f2:	61fb      	str	r3, [r7, #28]
240561f4:	e00f      	b.n	24056216 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
240561f6:	68bb      	ldr	r3, [r7, #8]
240561f8:	68db      	ldr	r3, [r3, #12]
240561fa:	2b02      	cmp	r3, #2
240561fc:	d102      	bne.n	24056204 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
240561fe:	2301      	movs	r3, #1
24056200:	61fb      	str	r3, [r7, #28]
24056202:	e008      	b.n	24056216 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
24056204:	68bb      	ldr	r3, [r7, #8]
24056206:	689b      	ldr	r3, [r3, #8]
24056208:	2b00      	cmp	r3, #0
2405620a:	d102      	bne.n	24056212 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
2405620c:	2301      	movs	r3, #1
2405620e:	61fb      	str	r3, [r7, #28]
24056210:	e001      	b.n	24056216 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
24056212:	2300      	movs	r3, #0
24056214:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
24056216:	68bb      	ldr	r3, [r7, #8]
24056218:	681a      	ldr	r2, [r3, #0]
2405621a:	68bb      	ldr	r3, [r7, #8]
2405621c:	689b      	ldr	r3, [r3, #8]
2405621e:	4313      	orrs	r3, r2
24056220:	69fa      	ldr	r2, [r7, #28]
24056222:	4313      	orrs	r3, r2
24056224:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24056226:	687b      	ldr	r3, [r7, #4]
24056228:	f003 0310 	and.w	r3, r3, #16
2405622c:	693a      	ldr	r2, [r7, #16]
2405622e:	fa02 f303 	lsl.w	r3, r2, r3
24056232:	697a      	ldr	r2, [r7, #20]
24056234:	4313      	orrs	r3, r2
24056236:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
24056238:	68fb      	ldr	r3, [r7, #12]
2405623a:	681b      	ldr	r3, [r3, #0]
2405623c:	697a      	ldr	r2, [r7, #20]
2405623e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
24056240:	68fb      	ldr	r3, [r7, #12]
24056242:	681b      	ldr	r3, [r3, #0]
24056244:	6819      	ldr	r1, [r3, #0]
24056246:	687b      	ldr	r3, [r7, #4]
24056248:	f003 0310 	and.w	r3, r3, #16
2405624c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
24056250:	fa02 f303 	lsl.w	r3, r2, r3
24056254:	43da      	mvns	r2, r3
24056256:	68fb      	ldr	r3, [r7, #12]
24056258:	681b      	ldr	r3, [r3, #0]
2405625a:	400a      	ands	r2, r1
2405625c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
2405625e:	68fb      	ldr	r3, [r7, #12]
24056260:	681b      	ldr	r3, [r3, #0]
24056262:	681b      	ldr	r3, [r3, #0]
24056264:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
24056266:	687b      	ldr	r3, [r7, #4]
24056268:	f003 0310 	and.w	r3, r3, #16
2405626c:	f640 72fe 	movw	r2, #4094	; 0xffe
24056270:	fa02 f303 	lsl.w	r3, r2, r3
24056274:	43db      	mvns	r3, r3
24056276:	697a      	ldr	r2, [r7, #20]
24056278:	4013      	ands	r3, r2
2405627a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
2405627c:	68bb      	ldr	r3, [r7, #8]
2405627e:	685b      	ldr	r3, [r3, #4]
24056280:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24056282:	687b      	ldr	r3, [r7, #4]
24056284:	f003 0310 	and.w	r3, r3, #16
24056288:	693a      	ldr	r2, [r7, #16]
2405628a:	fa02 f303 	lsl.w	r3, r2, r3
2405628e:	697a      	ldr	r2, [r7, #20]
24056290:	4313      	orrs	r3, r2
24056292:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
24056294:	68fb      	ldr	r3, [r7, #12]
24056296:	681b      	ldr	r3, [r3, #0]
24056298:	697a      	ldr	r2, [r7, #20]
2405629a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
2405629c:	68fb      	ldr	r3, [r7, #12]
2405629e:	681b      	ldr	r3, [r3, #0]
240562a0:	6819      	ldr	r1, [r3, #0]
240562a2:	687b      	ldr	r3, [r7, #4]
240562a4:	f003 0310 	and.w	r3, r3, #16
240562a8:	22c0      	movs	r2, #192	; 0xc0
240562aa:	fa02 f303 	lsl.w	r3, r2, r3
240562ae:	43da      	mvns	r2, r3
240562b0:	68fb      	ldr	r3, [r7, #12]
240562b2:	681b      	ldr	r3, [r3, #0]
240562b4:	400a      	ands	r2, r1
240562b6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
240562b8:	68fb      	ldr	r3, [r7, #12]
240562ba:	2201      	movs	r2, #1
240562bc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
240562be:	68fb      	ldr	r3, [r7, #12]
240562c0:	2200      	movs	r2, #0
240562c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
240562c4:	2300      	movs	r3, #0
}
240562c6:	4618      	mov	r0, r3
240562c8:	3720      	adds	r7, #32
240562ca:	46bd      	mov	sp, r7
240562cc:	bd80      	pop	{r7, pc}
240562ce:	bf00      	nop
240562d0:	20008000 	.word	0x20008000

240562d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
240562d4:	b580      	push	{r7, lr}
240562d6:	b086      	sub	sp, #24
240562d8:	af00      	add	r7, sp, #0
240562da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
240562dc:	f7fd fdb2 	bl	24053e44 <HAL_GetTick>
240562e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
240562e2:	687b      	ldr	r3, [r7, #4]
240562e4:	2b00      	cmp	r3, #0
240562e6:	d101      	bne.n	240562ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
240562e8:	2301      	movs	r3, #1
240562ea:	e37d      	b.n	240569e8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240562ec:	687b      	ldr	r3, [r7, #4]
240562ee:	681b      	ldr	r3, [r3, #0]
240562f0:	4a66      	ldr	r2, [pc, #408]	; (2405648c <HAL_DMA_Init+0x1b8>)
240562f2:	4293      	cmp	r3, r2
240562f4:	d04a      	beq.n	2405638c <HAL_DMA_Init+0xb8>
240562f6:	687b      	ldr	r3, [r7, #4]
240562f8:	681b      	ldr	r3, [r3, #0]
240562fa:	4a65      	ldr	r2, [pc, #404]	; (24056490 <HAL_DMA_Init+0x1bc>)
240562fc:	4293      	cmp	r3, r2
240562fe:	d045      	beq.n	2405638c <HAL_DMA_Init+0xb8>
24056300:	687b      	ldr	r3, [r7, #4]
24056302:	681b      	ldr	r3, [r3, #0]
24056304:	4a63      	ldr	r2, [pc, #396]	; (24056494 <HAL_DMA_Init+0x1c0>)
24056306:	4293      	cmp	r3, r2
24056308:	d040      	beq.n	2405638c <HAL_DMA_Init+0xb8>
2405630a:	687b      	ldr	r3, [r7, #4]
2405630c:	681b      	ldr	r3, [r3, #0]
2405630e:	4a62      	ldr	r2, [pc, #392]	; (24056498 <HAL_DMA_Init+0x1c4>)
24056310:	4293      	cmp	r3, r2
24056312:	d03b      	beq.n	2405638c <HAL_DMA_Init+0xb8>
24056314:	687b      	ldr	r3, [r7, #4]
24056316:	681b      	ldr	r3, [r3, #0]
24056318:	4a60      	ldr	r2, [pc, #384]	; (2405649c <HAL_DMA_Init+0x1c8>)
2405631a:	4293      	cmp	r3, r2
2405631c:	d036      	beq.n	2405638c <HAL_DMA_Init+0xb8>
2405631e:	687b      	ldr	r3, [r7, #4]
24056320:	681b      	ldr	r3, [r3, #0]
24056322:	4a5f      	ldr	r2, [pc, #380]	; (240564a0 <HAL_DMA_Init+0x1cc>)
24056324:	4293      	cmp	r3, r2
24056326:	d031      	beq.n	2405638c <HAL_DMA_Init+0xb8>
24056328:	687b      	ldr	r3, [r7, #4]
2405632a:	681b      	ldr	r3, [r3, #0]
2405632c:	4a5d      	ldr	r2, [pc, #372]	; (240564a4 <HAL_DMA_Init+0x1d0>)
2405632e:	4293      	cmp	r3, r2
24056330:	d02c      	beq.n	2405638c <HAL_DMA_Init+0xb8>
24056332:	687b      	ldr	r3, [r7, #4]
24056334:	681b      	ldr	r3, [r3, #0]
24056336:	4a5c      	ldr	r2, [pc, #368]	; (240564a8 <HAL_DMA_Init+0x1d4>)
24056338:	4293      	cmp	r3, r2
2405633a:	d027      	beq.n	2405638c <HAL_DMA_Init+0xb8>
2405633c:	687b      	ldr	r3, [r7, #4]
2405633e:	681b      	ldr	r3, [r3, #0]
24056340:	4a5a      	ldr	r2, [pc, #360]	; (240564ac <HAL_DMA_Init+0x1d8>)
24056342:	4293      	cmp	r3, r2
24056344:	d022      	beq.n	2405638c <HAL_DMA_Init+0xb8>
24056346:	687b      	ldr	r3, [r7, #4]
24056348:	681b      	ldr	r3, [r3, #0]
2405634a:	4a59      	ldr	r2, [pc, #356]	; (240564b0 <HAL_DMA_Init+0x1dc>)
2405634c:	4293      	cmp	r3, r2
2405634e:	d01d      	beq.n	2405638c <HAL_DMA_Init+0xb8>
24056350:	687b      	ldr	r3, [r7, #4]
24056352:	681b      	ldr	r3, [r3, #0]
24056354:	4a57      	ldr	r2, [pc, #348]	; (240564b4 <HAL_DMA_Init+0x1e0>)
24056356:	4293      	cmp	r3, r2
24056358:	d018      	beq.n	2405638c <HAL_DMA_Init+0xb8>
2405635a:	687b      	ldr	r3, [r7, #4]
2405635c:	681b      	ldr	r3, [r3, #0]
2405635e:	4a56      	ldr	r2, [pc, #344]	; (240564b8 <HAL_DMA_Init+0x1e4>)
24056360:	4293      	cmp	r3, r2
24056362:	d013      	beq.n	2405638c <HAL_DMA_Init+0xb8>
24056364:	687b      	ldr	r3, [r7, #4]
24056366:	681b      	ldr	r3, [r3, #0]
24056368:	4a54      	ldr	r2, [pc, #336]	; (240564bc <HAL_DMA_Init+0x1e8>)
2405636a:	4293      	cmp	r3, r2
2405636c:	d00e      	beq.n	2405638c <HAL_DMA_Init+0xb8>
2405636e:	687b      	ldr	r3, [r7, #4]
24056370:	681b      	ldr	r3, [r3, #0]
24056372:	4a53      	ldr	r2, [pc, #332]	; (240564c0 <HAL_DMA_Init+0x1ec>)
24056374:	4293      	cmp	r3, r2
24056376:	d009      	beq.n	2405638c <HAL_DMA_Init+0xb8>
24056378:	687b      	ldr	r3, [r7, #4]
2405637a:	681b      	ldr	r3, [r3, #0]
2405637c:	4a51      	ldr	r2, [pc, #324]	; (240564c4 <HAL_DMA_Init+0x1f0>)
2405637e:	4293      	cmp	r3, r2
24056380:	d004      	beq.n	2405638c <HAL_DMA_Init+0xb8>
24056382:	687b      	ldr	r3, [r7, #4]
24056384:	681b      	ldr	r3, [r3, #0]
24056386:	4a50      	ldr	r2, [pc, #320]	; (240564c8 <HAL_DMA_Init+0x1f4>)
24056388:	4293      	cmp	r3, r2
2405638a:	d101      	bne.n	24056390 <HAL_DMA_Init+0xbc>
2405638c:	2301      	movs	r3, #1
2405638e:	e000      	b.n	24056392 <HAL_DMA_Init+0xbe>
24056390:	2300      	movs	r3, #0
24056392:	2b00      	cmp	r3, #0
24056394:	f000 813c 	beq.w	24056610 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24056398:	687b      	ldr	r3, [r7, #4]
2405639a:	2202      	movs	r2, #2
2405639c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
240563a0:	687b      	ldr	r3, [r7, #4]
240563a2:	2200      	movs	r2, #0
240563a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
240563a8:	687b      	ldr	r3, [r7, #4]
240563aa:	681b      	ldr	r3, [r3, #0]
240563ac:	4a37      	ldr	r2, [pc, #220]	; (2405648c <HAL_DMA_Init+0x1b8>)
240563ae:	4293      	cmp	r3, r2
240563b0:	d04a      	beq.n	24056448 <HAL_DMA_Init+0x174>
240563b2:	687b      	ldr	r3, [r7, #4]
240563b4:	681b      	ldr	r3, [r3, #0]
240563b6:	4a36      	ldr	r2, [pc, #216]	; (24056490 <HAL_DMA_Init+0x1bc>)
240563b8:	4293      	cmp	r3, r2
240563ba:	d045      	beq.n	24056448 <HAL_DMA_Init+0x174>
240563bc:	687b      	ldr	r3, [r7, #4]
240563be:	681b      	ldr	r3, [r3, #0]
240563c0:	4a34      	ldr	r2, [pc, #208]	; (24056494 <HAL_DMA_Init+0x1c0>)
240563c2:	4293      	cmp	r3, r2
240563c4:	d040      	beq.n	24056448 <HAL_DMA_Init+0x174>
240563c6:	687b      	ldr	r3, [r7, #4]
240563c8:	681b      	ldr	r3, [r3, #0]
240563ca:	4a33      	ldr	r2, [pc, #204]	; (24056498 <HAL_DMA_Init+0x1c4>)
240563cc:	4293      	cmp	r3, r2
240563ce:	d03b      	beq.n	24056448 <HAL_DMA_Init+0x174>
240563d0:	687b      	ldr	r3, [r7, #4]
240563d2:	681b      	ldr	r3, [r3, #0]
240563d4:	4a31      	ldr	r2, [pc, #196]	; (2405649c <HAL_DMA_Init+0x1c8>)
240563d6:	4293      	cmp	r3, r2
240563d8:	d036      	beq.n	24056448 <HAL_DMA_Init+0x174>
240563da:	687b      	ldr	r3, [r7, #4]
240563dc:	681b      	ldr	r3, [r3, #0]
240563de:	4a30      	ldr	r2, [pc, #192]	; (240564a0 <HAL_DMA_Init+0x1cc>)
240563e0:	4293      	cmp	r3, r2
240563e2:	d031      	beq.n	24056448 <HAL_DMA_Init+0x174>
240563e4:	687b      	ldr	r3, [r7, #4]
240563e6:	681b      	ldr	r3, [r3, #0]
240563e8:	4a2e      	ldr	r2, [pc, #184]	; (240564a4 <HAL_DMA_Init+0x1d0>)
240563ea:	4293      	cmp	r3, r2
240563ec:	d02c      	beq.n	24056448 <HAL_DMA_Init+0x174>
240563ee:	687b      	ldr	r3, [r7, #4]
240563f0:	681b      	ldr	r3, [r3, #0]
240563f2:	4a2d      	ldr	r2, [pc, #180]	; (240564a8 <HAL_DMA_Init+0x1d4>)
240563f4:	4293      	cmp	r3, r2
240563f6:	d027      	beq.n	24056448 <HAL_DMA_Init+0x174>
240563f8:	687b      	ldr	r3, [r7, #4]
240563fa:	681b      	ldr	r3, [r3, #0]
240563fc:	4a2b      	ldr	r2, [pc, #172]	; (240564ac <HAL_DMA_Init+0x1d8>)
240563fe:	4293      	cmp	r3, r2
24056400:	d022      	beq.n	24056448 <HAL_DMA_Init+0x174>
24056402:	687b      	ldr	r3, [r7, #4]
24056404:	681b      	ldr	r3, [r3, #0]
24056406:	4a2a      	ldr	r2, [pc, #168]	; (240564b0 <HAL_DMA_Init+0x1dc>)
24056408:	4293      	cmp	r3, r2
2405640a:	d01d      	beq.n	24056448 <HAL_DMA_Init+0x174>
2405640c:	687b      	ldr	r3, [r7, #4]
2405640e:	681b      	ldr	r3, [r3, #0]
24056410:	4a28      	ldr	r2, [pc, #160]	; (240564b4 <HAL_DMA_Init+0x1e0>)
24056412:	4293      	cmp	r3, r2
24056414:	d018      	beq.n	24056448 <HAL_DMA_Init+0x174>
24056416:	687b      	ldr	r3, [r7, #4]
24056418:	681b      	ldr	r3, [r3, #0]
2405641a:	4a27      	ldr	r2, [pc, #156]	; (240564b8 <HAL_DMA_Init+0x1e4>)
2405641c:	4293      	cmp	r3, r2
2405641e:	d013      	beq.n	24056448 <HAL_DMA_Init+0x174>
24056420:	687b      	ldr	r3, [r7, #4]
24056422:	681b      	ldr	r3, [r3, #0]
24056424:	4a25      	ldr	r2, [pc, #148]	; (240564bc <HAL_DMA_Init+0x1e8>)
24056426:	4293      	cmp	r3, r2
24056428:	d00e      	beq.n	24056448 <HAL_DMA_Init+0x174>
2405642a:	687b      	ldr	r3, [r7, #4]
2405642c:	681b      	ldr	r3, [r3, #0]
2405642e:	4a24      	ldr	r2, [pc, #144]	; (240564c0 <HAL_DMA_Init+0x1ec>)
24056430:	4293      	cmp	r3, r2
24056432:	d009      	beq.n	24056448 <HAL_DMA_Init+0x174>
24056434:	687b      	ldr	r3, [r7, #4]
24056436:	681b      	ldr	r3, [r3, #0]
24056438:	4a22      	ldr	r2, [pc, #136]	; (240564c4 <HAL_DMA_Init+0x1f0>)
2405643a:	4293      	cmp	r3, r2
2405643c:	d004      	beq.n	24056448 <HAL_DMA_Init+0x174>
2405643e:	687b      	ldr	r3, [r7, #4]
24056440:	681b      	ldr	r3, [r3, #0]
24056442:	4a21      	ldr	r2, [pc, #132]	; (240564c8 <HAL_DMA_Init+0x1f4>)
24056444:	4293      	cmp	r3, r2
24056446:	d108      	bne.n	2405645a <HAL_DMA_Init+0x186>
24056448:	687b      	ldr	r3, [r7, #4]
2405644a:	681b      	ldr	r3, [r3, #0]
2405644c:	681a      	ldr	r2, [r3, #0]
2405644e:	687b      	ldr	r3, [r7, #4]
24056450:	681b      	ldr	r3, [r3, #0]
24056452:	f022 0201 	bic.w	r2, r2, #1
24056456:	601a      	str	r2, [r3, #0]
24056458:	e007      	b.n	2405646a <HAL_DMA_Init+0x196>
2405645a:	687b      	ldr	r3, [r7, #4]
2405645c:	681b      	ldr	r3, [r3, #0]
2405645e:	681a      	ldr	r2, [r3, #0]
24056460:	687b      	ldr	r3, [r7, #4]
24056462:	681b      	ldr	r3, [r3, #0]
24056464:	f022 0201 	bic.w	r2, r2, #1
24056468:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
2405646a:	e02f      	b.n	240564cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2405646c:	f7fd fcea 	bl	24053e44 <HAL_GetTick>
24056470:	4602      	mov	r2, r0
24056472:	693b      	ldr	r3, [r7, #16]
24056474:	1ad3      	subs	r3, r2, r3
24056476:	2b05      	cmp	r3, #5
24056478:	d928      	bls.n	240564cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2405647a:	687b      	ldr	r3, [r7, #4]
2405647c:	2220      	movs	r2, #32
2405647e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24056480:	687b      	ldr	r3, [r7, #4]
24056482:	2203      	movs	r2, #3
24056484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
24056488:	2301      	movs	r3, #1
2405648a:	e2ad      	b.n	240569e8 <HAL_DMA_Init+0x714>
2405648c:	40020010 	.word	0x40020010
24056490:	40020028 	.word	0x40020028
24056494:	40020040 	.word	0x40020040
24056498:	40020058 	.word	0x40020058
2405649c:	40020070 	.word	0x40020070
240564a0:	40020088 	.word	0x40020088
240564a4:	400200a0 	.word	0x400200a0
240564a8:	400200b8 	.word	0x400200b8
240564ac:	40020410 	.word	0x40020410
240564b0:	40020428 	.word	0x40020428
240564b4:	40020440 	.word	0x40020440
240564b8:	40020458 	.word	0x40020458
240564bc:	40020470 	.word	0x40020470
240564c0:	40020488 	.word	0x40020488
240564c4:	400204a0 	.word	0x400204a0
240564c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
240564cc:	687b      	ldr	r3, [r7, #4]
240564ce:	681b      	ldr	r3, [r3, #0]
240564d0:	681b      	ldr	r3, [r3, #0]
240564d2:	f003 0301 	and.w	r3, r3, #1
240564d6:	2b00      	cmp	r3, #0
240564d8:	d1c8      	bne.n	2405646c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
240564da:	687b      	ldr	r3, [r7, #4]
240564dc:	681b      	ldr	r3, [r3, #0]
240564de:	681b      	ldr	r3, [r3, #0]
240564e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
240564e2:	697a      	ldr	r2, [r7, #20]
240564e4:	4b73      	ldr	r3, [pc, #460]	; (240566b4 <HAL_DMA_Init+0x3e0>)
240564e6:	4013      	ands	r3, r2
240564e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
240564ea:	687b      	ldr	r3, [r7, #4]
240564ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240564ee:	687b      	ldr	r3, [r7, #4]
240564f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
240564f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240564f4:	687b      	ldr	r3, [r7, #4]
240564f6:	691b      	ldr	r3, [r3, #16]
240564f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
240564fa:	687b      	ldr	r3, [r7, #4]
240564fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240564fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24056500:	687b      	ldr	r3, [r7, #4]
24056502:	699b      	ldr	r3, [r3, #24]
24056504:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
24056506:	687b      	ldr	r3, [r7, #4]
24056508:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2405650a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
2405650c:	687b      	ldr	r3, [r7, #4]
2405650e:	6a1b      	ldr	r3, [r3, #32]
24056510:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
24056512:	697a      	ldr	r2, [r7, #20]
24056514:	4313      	orrs	r3, r2
24056516:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24056518:	687b      	ldr	r3, [r7, #4]
2405651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405651c:	2b04      	cmp	r3, #4
2405651e:	d107      	bne.n	24056530 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24056520:	687b      	ldr	r3, [r7, #4]
24056522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24056524:	687b      	ldr	r3, [r7, #4]
24056526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24056528:	4313      	orrs	r3, r2
2405652a:	697a      	ldr	r2, [r7, #20]
2405652c:	4313      	orrs	r3, r2
2405652e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24056530:	687b      	ldr	r3, [r7, #4]
24056532:	685b      	ldr	r3, [r3, #4]
24056534:	2b28      	cmp	r3, #40	; 0x28
24056536:	d903      	bls.n	24056540 <HAL_DMA_Init+0x26c>
24056538:	687b      	ldr	r3, [r7, #4]
2405653a:	685b      	ldr	r3, [r3, #4]
2405653c:	2b2e      	cmp	r3, #46	; 0x2e
2405653e:	d91f      	bls.n	24056580 <HAL_DMA_Init+0x2ac>
24056540:	687b      	ldr	r3, [r7, #4]
24056542:	685b      	ldr	r3, [r3, #4]
24056544:	2b3e      	cmp	r3, #62	; 0x3e
24056546:	d903      	bls.n	24056550 <HAL_DMA_Init+0x27c>
24056548:	687b      	ldr	r3, [r7, #4]
2405654a:	685b      	ldr	r3, [r3, #4]
2405654c:	2b42      	cmp	r3, #66	; 0x42
2405654e:	d917      	bls.n	24056580 <HAL_DMA_Init+0x2ac>
24056550:	687b      	ldr	r3, [r7, #4]
24056552:	685b      	ldr	r3, [r3, #4]
24056554:	2b46      	cmp	r3, #70	; 0x46
24056556:	d903      	bls.n	24056560 <HAL_DMA_Init+0x28c>
24056558:	687b      	ldr	r3, [r7, #4]
2405655a:	685b      	ldr	r3, [r3, #4]
2405655c:	2b48      	cmp	r3, #72	; 0x48
2405655e:	d90f      	bls.n	24056580 <HAL_DMA_Init+0x2ac>
24056560:	687b      	ldr	r3, [r7, #4]
24056562:	685b      	ldr	r3, [r3, #4]
24056564:	2b4e      	cmp	r3, #78	; 0x4e
24056566:	d903      	bls.n	24056570 <HAL_DMA_Init+0x29c>
24056568:	687b      	ldr	r3, [r7, #4]
2405656a:	685b      	ldr	r3, [r3, #4]
2405656c:	2b52      	cmp	r3, #82	; 0x52
2405656e:	d907      	bls.n	24056580 <HAL_DMA_Init+0x2ac>
24056570:	687b      	ldr	r3, [r7, #4]
24056572:	685b      	ldr	r3, [r3, #4]
24056574:	2b73      	cmp	r3, #115	; 0x73
24056576:	d905      	bls.n	24056584 <HAL_DMA_Init+0x2b0>
24056578:	687b      	ldr	r3, [r7, #4]
2405657a:	685b      	ldr	r3, [r3, #4]
2405657c:	2b77      	cmp	r3, #119	; 0x77
2405657e:	d801      	bhi.n	24056584 <HAL_DMA_Init+0x2b0>
24056580:	2301      	movs	r3, #1
24056582:	e000      	b.n	24056586 <HAL_DMA_Init+0x2b2>
24056584:	2300      	movs	r3, #0
24056586:	2b00      	cmp	r3, #0
24056588:	d003      	beq.n	24056592 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
2405658a:	697b      	ldr	r3, [r7, #20]
2405658c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
24056590:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24056592:	687b      	ldr	r3, [r7, #4]
24056594:	681b      	ldr	r3, [r3, #0]
24056596:	697a      	ldr	r2, [r7, #20]
24056598:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
2405659a:	687b      	ldr	r3, [r7, #4]
2405659c:	681b      	ldr	r3, [r3, #0]
2405659e:	695b      	ldr	r3, [r3, #20]
240565a0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
240565a2:	697b      	ldr	r3, [r7, #20]
240565a4:	f023 0307 	bic.w	r3, r3, #7
240565a8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
240565aa:	687b      	ldr	r3, [r7, #4]
240565ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240565ae:	697a      	ldr	r2, [r7, #20]
240565b0:	4313      	orrs	r3, r2
240565b2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240565b4:	687b      	ldr	r3, [r7, #4]
240565b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240565b8:	2b04      	cmp	r3, #4
240565ba:	d117      	bne.n	240565ec <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
240565bc:	687b      	ldr	r3, [r7, #4]
240565be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240565c0:	697a      	ldr	r2, [r7, #20]
240565c2:	4313      	orrs	r3, r2
240565c4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
240565c6:	687b      	ldr	r3, [r7, #4]
240565c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240565ca:	2b00      	cmp	r3, #0
240565cc:	d00e      	beq.n	240565ec <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
240565ce:	6878      	ldr	r0, [r7, #4]
240565d0:	f002 fbe0 	bl	24058d94 <DMA_CheckFifoParam>
240565d4:	4603      	mov	r3, r0
240565d6:	2b00      	cmp	r3, #0
240565d8:	d008      	beq.n	240565ec <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240565da:	687b      	ldr	r3, [r7, #4]
240565dc:	2240      	movs	r2, #64	; 0x40
240565de:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
240565e0:	687b      	ldr	r3, [r7, #4]
240565e2:	2201      	movs	r2, #1
240565e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
240565e8:	2301      	movs	r3, #1
240565ea:	e1fd      	b.n	240569e8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
240565ec:	687b      	ldr	r3, [r7, #4]
240565ee:	681b      	ldr	r3, [r3, #0]
240565f0:	697a      	ldr	r2, [r7, #20]
240565f2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
240565f4:	6878      	ldr	r0, [r7, #4]
240565f6:	f002 fb1b 	bl	24058c30 <DMA_CalcBaseAndBitshift>
240565fa:	4603      	mov	r3, r0
240565fc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240565fe:	687b      	ldr	r3, [r7, #4]
24056600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056602:	f003 031f 	and.w	r3, r3, #31
24056606:	223f      	movs	r2, #63	; 0x3f
24056608:	409a      	lsls	r2, r3
2405660a:	68bb      	ldr	r3, [r7, #8]
2405660c:	609a      	str	r2, [r3, #8]
2405660e:	e0fd      	b.n	2405680c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24056610:	687b      	ldr	r3, [r7, #4]
24056612:	681b      	ldr	r3, [r3, #0]
24056614:	4a28      	ldr	r2, [pc, #160]	; (240566b8 <HAL_DMA_Init+0x3e4>)
24056616:	4293      	cmp	r3, r2
24056618:	d04a      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
2405661a:	687b      	ldr	r3, [r7, #4]
2405661c:	681b      	ldr	r3, [r3, #0]
2405661e:	4a27      	ldr	r2, [pc, #156]	; (240566bc <HAL_DMA_Init+0x3e8>)
24056620:	4293      	cmp	r3, r2
24056622:	d045      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
24056624:	687b      	ldr	r3, [r7, #4]
24056626:	681b      	ldr	r3, [r3, #0]
24056628:	4a25      	ldr	r2, [pc, #148]	; (240566c0 <HAL_DMA_Init+0x3ec>)
2405662a:	4293      	cmp	r3, r2
2405662c:	d040      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
2405662e:	687b      	ldr	r3, [r7, #4]
24056630:	681b      	ldr	r3, [r3, #0]
24056632:	4a24      	ldr	r2, [pc, #144]	; (240566c4 <HAL_DMA_Init+0x3f0>)
24056634:	4293      	cmp	r3, r2
24056636:	d03b      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
24056638:	687b      	ldr	r3, [r7, #4]
2405663a:	681b      	ldr	r3, [r3, #0]
2405663c:	4a22      	ldr	r2, [pc, #136]	; (240566c8 <HAL_DMA_Init+0x3f4>)
2405663e:	4293      	cmp	r3, r2
24056640:	d036      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
24056642:	687b      	ldr	r3, [r7, #4]
24056644:	681b      	ldr	r3, [r3, #0]
24056646:	4a21      	ldr	r2, [pc, #132]	; (240566cc <HAL_DMA_Init+0x3f8>)
24056648:	4293      	cmp	r3, r2
2405664a:	d031      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
2405664c:	687b      	ldr	r3, [r7, #4]
2405664e:	681b      	ldr	r3, [r3, #0]
24056650:	4a1f      	ldr	r2, [pc, #124]	; (240566d0 <HAL_DMA_Init+0x3fc>)
24056652:	4293      	cmp	r3, r2
24056654:	d02c      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
24056656:	687b      	ldr	r3, [r7, #4]
24056658:	681b      	ldr	r3, [r3, #0]
2405665a:	4a1e      	ldr	r2, [pc, #120]	; (240566d4 <HAL_DMA_Init+0x400>)
2405665c:	4293      	cmp	r3, r2
2405665e:	d027      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
24056660:	687b      	ldr	r3, [r7, #4]
24056662:	681b      	ldr	r3, [r3, #0]
24056664:	4a1c      	ldr	r2, [pc, #112]	; (240566d8 <HAL_DMA_Init+0x404>)
24056666:	4293      	cmp	r3, r2
24056668:	d022      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
2405666a:	687b      	ldr	r3, [r7, #4]
2405666c:	681b      	ldr	r3, [r3, #0]
2405666e:	4a1b      	ldr	r2, [pc, #108]	; (240566dc <HAL_DMA_Init+0x408>)
24056670:	4293      	cmp	r3, r2
24056672:	d01d      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
24056674:	687b      	ldr	r3, [r7, #4]
24056676:	681b      	ldr	r3, [r3, #0]
24056678:	4a19      	ldr	r2, [pc, #100]	; (240566e0 <HAL_DMA_Init+0x40c>)
2405667a:	4293      	cmp	r3, r2
2405667c:	d018      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
2405667e:	687b      	ldr	r3, [r7, #4]
24056680:	681b      	ldr	r3, [r3, #0]
24056682:	4a18      	ldr	r2, [pc, #96]	; (240566e4 <HAL_DMA_Init+0x410>)
24056684:	4293      	cmp	r3, r2
24056686:	d013      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
24056688:	687b      	ldr	r3, [r7, #4]
2405668a:	681b      	ldr	r3, [r3, #0]
2405668c:	4a16      	ldr	r2, [pc, #88]	; (240566e8 <HAL_DMA_Init+0x414>)
2405668e:	4293      	cmp	r3, r2
24056690:	d00e      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
24056692:	687b      	ldr	r3, [r7, #4]
24056694:	681b      	ldr	r3, [r3, #0]
24056696:	4a15      	ldr	r2, [pc, #84]	; (240566ec <HAL_DMA_Init+0x418>)
24056698:	4293      	cmp	r3, r2
2405669a:	d009      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
2405669c:	687b      	ldr	r3, [r7, #4]
2405669e:	681b      	ldr	r3, [r3, #0]
240566a0:	4a13      	ldr	r2, [pc, #76]	; (240566f0 <HAL_DMA_Init+0x41c>)
240566a2:	4293      	cmp	r3, r2
240566a4:	d004      	beq.n	240566b0 <HAL_DMA_Init+0x3dc>
240566a6:	687b      	ldr	r3, [r7, #4]
240566a8:	681b      	ldr	r3, [r3, #0]
240566aa:	4a12      	ldr	r2, [pc, #72]	; (240566f4 <HAL_DMA_Init+0x420>)
240566ac:	4293      	cmp	r3, r2
240566ae:	d123      	bne.n	240566f8 <HAL_DMA_Init+0x424>
240566b0:	2301      	movs	r3, #1
240566b2:	e022      	b.n	240566fa <HAL_DMA_Init+0x426>
240566b4:	fe10803f 	.word	0xfe10803f
240566b8:	48022c08 	.word	0x48022c08
240566bc:	48022c1c 	.word	0x48022c1c
240566c0:	48022c30 	.word	0x48022c30
240566c4:	48022c44 	.word	0x48022c44
240566c8:	48022c58 	.word	0x48022c58
240566cc:	48022c6c 	.word	0x48022c6c
240566d0:	48022c80 	.word	0x48022c80
240566d4:	48022c94 	.word	0x48022c94
240566d8:	58025408 	.word	0x58025408
240566dc:	5802541c 	.word	0x5802541c
240566e0:	58025430 	.word	0x58025430
240566e4:	58025444 	.word	0x58025444
240566e8:	58025458 	.word	0x58025458
240566ec:	5802546c 	.word	0x5802546c
240566f0:	58025480 	.word	0x58025480
240566f4:	58025494 	.word	0x58025494
240566f8:	2300      	movs	r3, #0
240566fa:	2b00      	cmp	r3, #0
240566fc:	d07d      	beq.n	240567fa <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240566fe:	687b      	ldr	r3, [r7, #4]
24056700:	681b      	ldr	r3, [r3, #0]
24056702:	4a7f      	ldr	r2, [pc, #508]	; (24056900 <HAL_DMA_Init+0x62c>)
24056704:	4293      	cmp	r3, r2
24056706:	d021      	beq.n	2405674c <HAL_DMA_Init+0x478>
24056708:	687b      	ldr	r3, [r7, #4]
2405670a:	681b      	ldr	r3, [r3, #0]
2405670c:	4a7d      	ldr	r2, [pc, #500]	; (24056904 <HAL_DMA_Init+0x630>)
2405670e:	4293      	cmp	r3, r2
24056710:	d01c      	beq.n	2405674c <HAL_DMA_Init+0x478>
24056712:	687b      	ldr	r3, [r7, #4]
24056714:	681b      	ldr	r3, [r3, #0]
24056716:	4a7c      	ldr	r2, [pc, #496]	; (24056908 <HAL_DMA_Init+0x634>)
24056718:	4293      	cmp	r3, r2
2405671a:	d017      	beq.n	2405674c <HAL_DMA_Init+0x478>
2405671c:	687b      	ldr	r3, [r7, #4]
2405671e:	681b      	ldr	r3, [r3, #0]
24056720:	4a7a      	ldr	r2, [pc, #488]	; (2405690c <HAL_DMA_Init+0x638>)
24056722:	4293      	cmp	r3, r2
24056724:	d012      	beq.n	2405674c <HAL_DMA_Init+0x478>
24056726:	687b      	ldr	r3, [r7, #4]
24056728:	681b      	ldr	r3, [r3, #0]
2405672a:	4a79      	ldr	r2, [pc, #484]	; (24056910 <HAL_DMA_Init+0x63c>)
2405672c:	4293      	cmp	r3, r2
2405672e:	d00d      	beq.n	2405674c <HAL_DMA_Init+0x478>
24056730:	687b      	ldr	r3, [r7, #4]
24056732:	681b      	ldr	r3, [r3, #0]
24056734:	4a77      	ldr	r2, [pc, #476]	; (24056914 <HAL_DMA_Init+0x640>)
24056736:	4293      	cmp	r3, r2
24056738:	d008      	beq.n	2405674c <HAL_DMA_Init+0x478>
2405673a:	687b      	ldr	r3, [r7, #4]
2405673c:	681b      	ldr	r3, [r3, #0]
2405673e:	4a76      	ldr	r2, [pc, #472]	; (24056918 <HAL_DMA_Init+0x644>)
24056740:	4293      	cmp	r3, r2
24056742:	d003      	beq.n	2405674c <HAL_DMA_Init+0x478>
24056744:	687b      	ldr	r3, [r7, #4]
24056746:	681b      	ldr	r3, [r3, #0]
24056748:	4a74      	ldr	r2, [pc, #464]	; (2405691c <HAL_DMA_Init+0x648>)
2405674a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
2405674c:	687b      	ldr	r3, [r7, #4]
2405674e:	2202      	movs	r2, #2
24056750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
24056754:	687b      	ldr	r3, [r7, #4]
24056756:	2200      	movs	r2, #0
24056758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
2405675c:	687b      	ldr	r3, [r7, #4]
2405675e:	681b      	ldr	r3, [r3, #0]
24056760:	681b      	ldr	r3, [r3, #0]
24056762:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24056764:	697a      	ldr	r2, [r7, #20]
24056766:	4b6e      	ldr	r3, [pc, #440]	; (24056920 <HAL_DMA_Init+0x64c>)
24056768:	4013      	ands	r3, r2
2405676a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
2405676c:	687b      	ldr	r3, [r7, #4]
2405676e:	689b      	ldr	r3, [r3, #8]
24056770:	2b40      	cmp	r3, #64	; 0x40
24056772:	d008      	beq.n	24056786 <HAL_DMA_Init+0x4b2>
24056774:	687b      	ldr	r3, [r7, #4]
24056776:	689b      	ldr	r3, [r3, #8]
24056778:	2b80      	cmp	r3, #128	; 0x80
2405677a:	d102      	bne.n	24056782 <HAL_DMA_Init+0x4ae>
2405677c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24056780:	e002      	b.n	24056788 <HAL_DMA_Init+0x4b4>
24056782:	2300      	movs	r3, #0
24056784:	e000      	b.n	24056788 <HAL_DMA_Init+0x4b4>
24056786:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
24056788:	687a      	ldr	r2, [r7, #4]
2405678a:	68d2      	ldr	r2, [r2, #12]
2405678c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
2405678e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24056790:	687b      	ldr	r3, [r7, #4]
24056792:	691b      	ldr	r3, [r3, #16]
24056794:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
24056796:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24056798:	687b      	ldr	r3, [r7, #4]
2405679a:	695b      	ldr	r3, [r3, #20]
2405679c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
2405679e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
240567a0:	687b      	ldr	r3, [r7, #4]
240567a2:	699b      	ldr	r3, [r3, #24]
240567a4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
240567a6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
240567a8:	687b      	ldr	r3, [r7, #4]
240567aa:	69db      	ldr	r3, [r3, #28]
240567ac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
240567ae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
240567b0:	687b      	ldr	r3, [r7, #4]
240567b2:	6a1b      	ldr	r3, [r3, #32]
240567b4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
240567b6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240567b8:	697a      	ldr	r2, [r7, #20]
240567ba:	4313      	orrs	r3, r2
240567bc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
240567be:	687b      	ldr	r3, [r7, #4]
240567c0:	681b      	ldr	r3, [r3, #0]
240567c2:	697a      	ldr	r2, [r7, #20]
240567c4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
240567c6:	687b      	ldr	r3, [r7, #4]
240567c8:	681b      	ldr	r3, [r3, #0]
240567ca:	461a      	mov	r2, r3
240567cc:	4b55      	ldr	r3, [pc, #340]	; (24056924 <HAL_DMA_Init+0x650>)
240567ce:	4413      	add	r3, r2
240567d0:	4a55      	ldr	r2, [pc, #340]	; (24056928 <HAL_DMA_Init+0x654>)
240567d2:	fba2 2303 	umull	r2, r3, r2, r3
240567d6:	091b      	lsrs	r3, r3, #4
240567d8:	009a      	lsls	r2, r3, #2
240567da:	687b      	ldr	r3, [r7, #4]
240567dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
240567de:	6878      	ldr	r0, [r7, #4]
240567e0:	f002 fa26 	bl	24058c30 <DMA_CalcBaseAndBitshift>
240567e4:	4603      	mov	r3, r0
240567e6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240567e8:	687b      	ldr	r3, [r7, #4]
240567ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240567ec:	f003 031f 	and.w	r3, r3, #31
240567f0:	2201      	movs	r2, #1
240567f2:	409a      	lsls	r2, r3
240567f4:	68fb      	ldr	r3, [r7, #12]
240567f6:	605a      	str	r2, [r3, #4]
240567f8:	e008      	b.n	2405680c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240567fa:	687b      	ldr	r3, [r7, #4]
240567fc:	2240      	movs	r2, #64	; 0x40
240567fe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24056800:	687b      	ldr	r3, [r7, #4]
24056802:	2203      	movs	r2, #3
24056804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
24056808:	2301      	movs	r3, #1
2405680a:	e0ed      	b.n	240569e8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2405680c:	687b      	ldr	r3, [r7, #4]
2405680e:	681b      	ldr	r3, [r3, #0]
24056810:	4a46      	ldr	r2, [pc, #280]	; (2405692c <HAL_DMA_Init+0x658>)
24056812:	4293      	cmp	r3, r2
24056814:	d072      	beq.n	240568fc <HAL_DMA_Init+0x628>
24056816:	687b      	ldr	r3, [r7, #4]
24056818:	681b      	ldr	r3, [r3, #0]
2405681a:	4a45      	ldr	r2, [pc, #276]	; (24056930 <HAL_DMA_Init+0x65c>)
2405681c:	4293      	cmp	r3, r2
2405681e:	d06d      	beq.n	240568fc <HAL_DMA_Init+0x628>
24056820:	687b      	ldr	r3, [r7, #4]
24056822:	681b      	ldr	r3, [r3, #0]
24056824:	4a43      	ldr	r2, [pc, #268]	; (24056934 <HAL_DMA_Init+0x660>)
24056826:	4293      	cmp	r3, r2
24056828:	d068      	beq.n	240568fc <HAL_DMA_Init+0x628>
2405682a:	687b      	ldr	r3, [r7, #4]
2405682c:	681b      	ldr	r3, [r3, #0]
2405682e:	4a42      	ldr	r2, [pc, #264]	; (24056938 <HAL_DMA_Init+0x664>)
24056830:	4293      	cmp	r3, r2
24056832:	d063      	beq.n	240568fc <HAL_DMA_Init+0x628>
24056834:	687b      	ldr	r3, [r7, #4]
24056836:	681b      	ldr	r3, [r3, #0]
24056838:	4a40      	ldr	r2, [pc, #256]	; (2405693c <HAL_DMA_Init+0x668>)
2405683a:	4293      	cmp	r3, r2
2405683c:	d05e      	beq.n	240568fc <HAL_DMA_Init+0x628>
2405683e:	687b      	ldr	r3, [r7, #4]
24056840:	681b      	ldr	r3, [r3, #0]
24056842:	4a3f      	ldr	r2, [pc, #252]	; (24056940 <HAL_DMA_Init+0x66c>)
24056844:	4293      	cmp	r3, r2
24056846:	d059      	beq.n	240568fc <HAL_DMA_Init+0x628>
24056848:	687b      	ldr	r3, [r7, #4]
2405684a:	681b      	ldr	r3, [r3, #0]
2405684c:	4a3d      	ldr	r2, [pc, #244]	; (24056944 <HAL_DMA_Init+0x670>)
2405684e:	4293      	cmp	r3, r2
24056850:	d054      	beq.n	240568fc <HAL_DMA_Init+0x628>
24056852:	687b      	ldr	r3, [r7, #4]
24056854:	681b      	ldr	r3, [r3, #0]
24056856:	4a3c      	ldr	r2, [pc, #240]	; (24056948 <HAL_DMA_Init+0x674>)
24056858:	4293      	cmp	r3, r2
2405685a:	d04f      	beq.n	240568fc <HAL_DMA_Init+0x628>
2405685c:	687b      	ldr	r3, [r7, #4]
2405685e:	681b      	ldr	r3, [r3, #0]
24056860:	4a3a      	ldr	r2, [pc, #232]	; (2405694c <HAL_DMA_Init+0x678>)
24056862:	4293      	cmp	r3, r2
24056864:	d04a      	beq.n	240568fc <HAL_DMA_Init+0x628>
24056866:	687b      	ldr	r3, [r7, #4]
24056868:	681b      	ldr	r3, [r3, #0]
2405686a:	4a39      	ldr	r2, [pc, #228]	; (24056950 <HAL_DMA_Init+0x67c>)
2405686c:	4293      	cmp	r3, r2
2405686e:	d045      	beq.n	240568fc <HAL_DMA_Init+0x628>
24056870:	687b      	ldr	r3, [r7, #4]
24056872:	681b      	ldr	r3, [r3, #0]
24056874:	4a37      	ldr	r2, [pc, #220]	; (24056954 <HAL_DMA_Init+0x680>)
24056876:	4293      	cmp	r3, r2
24056878:	d040      	beq.n	240568fc <HAL_DMA_Init+0x628>
2405687a:	687b      	ldr	r3, [r7, #4]
2405687c:	681b      	ldr	r3, [r3, #0]
2405687e:	4a36      	ldr	r2, [pc, #216]	; (24056958 <HAL_DMA_Init+0x684>)
24056880:	4293      	cmp	r3, r2
24056882:	d03b      	beq.n	240568fc <HAL_DMA_Init+0x628>
24056884:	687b      	ldr	r3, [r7, #4]
24056886:	681b      	ldr	r3, [r3, #0]
24056888:	4a34      	ldr	r2, [pc, #208]	; (2405695c <HAL_DMA_Init+0x688>)
2405688a:	4293      	cmp	r3, r2
2405688c:	d036      	beq.n	240568fc <HAL_DMA_Init+0x628>
2405688e:	687b      	ldr	r3, [r7, #4]
24056890:	681b      	ldr	r3, [r3, #0]
24056892:	4a33      	ldr	r2, [pc, #204]	; (24056960 <HAL_DMA_Init+0x68c>)
24056894:	4293      	cmp	r3, r2
24056896:	d031      	beq.n	240568fc <HAL_DMA_Init+0x628>
24056898:	687b      	ldr	r3, [r7, #4]
2405689a:	681b      	ldr	r3, [r3, #0]
2405689c:	4a31      	ldr	r2, [pc, #196]	; (24056964 <HAL_DMA_Init+0x690>)
2405689e:	4293      	cmp	r3, r2
240568a0:	d02c      	beq.n	240568fc <HAL_DMA_Init+0x628>
240568a2:	687b      	ldr	r3, [r7, #4]
240568a4:	681b      	ldr	r3, [r3, #0]
240568a6:	4a30      	ldr	r2, [pc, #192]	; (24056968 <HAL_DMA_Init+0x694>)
240568a8:	4293      	cmp	r3, r2
240568aa:	d027      	beq.n	240568fc <HAL_DMA_Init+0x628>
240568ac:	687b      	ldr	r3, [r7, #4]
240568ae:	681b      	ldr	r3, [r3, #0]
240568b0:	4a13      	ldr	r2, [pc, #76]	; (24056900 <HAL_DMA_Init+0x62c>)
240568b2:	4293      	cmp	r3, r2
240568b4:	d022      	beq.n	240568fc <HAL_DMA_Init+0x628>
240568b6:	687b      	ldr	r3, [r7, #4]
240568b8:	681b      	ldr	r3, [r3, #0]
240568ba:	4a12      	ldr	r2, [pc, #72]	; (24056904 <HAL_DMA_Init+0x630>)
240568bc:	4293      	cmp	r3, r2
240568be:	d01d      	beq.n	240568fc <HAL_DMA_Init+0x628>
240568c0:	687b      	ldr	r3, [r7, #4]
240568c2:	681b      	ldr	r3, [r3, #0]
240568c4:	4a10      	ldr	r2, [pc, #64]	; (24056908 <HAL_DMA_Init+0x634>)
240568c6:	4293      	cmp	r3, r2
240568c8:	d018      	beq.n	240568fc <HAL_DMA_Init+0x628>
240568ca:	687b      	ldr	r3, [r7, #4]
240568cc:	681b      	ldr	r3, [r3, #0]
240568ce:	4a0f      	ldr	r2, [pc, #60]	; (2405690c <HAL_DMA_Init+0x638>)
240568d0:	4293      	cmp	r3, r2
240568d2:	d013      	beq.n	240568fc <HAL_DMA_Init+0x628>
240568d4:	687b      	ldr	r3, [r7, #4]
240568d6:	681b      	ldr	r3, [r3, #0]
240568d8:	4a0d      	ldr	r2, [pc, #52]	; (24056910 <HAL_DMA_Init+0x63c>)
240568da:	4293      	cmp	r3, r2
240568dc:	d00e      	beq.n	240568fc <HAL_DMA_Init+0x628>
240568de:	687b      	ldr	r3, [r7, #4]
240568e0:	681b      	ldr	r3, [r3, #0]
240568e2:	4a0c      	ldr	r2, [pc, #48]	; (24056914 <HAL_DMA_Init+0x640>)
240568e4:	4293      	cmp	r3, r2
240568e6:	d009      	beq.n	240568fc <HAL_DMA_Init+0x628>
240568e8:	687b      	ldr	r3, [r7, #4]
240568ea:	681b      	ldr	r3, [r3, #0]
240568ec:	4a0a      	ldr	r2, [pc, #40]	; (24056918 <HAL_DMA_Init+0x644>)
240568ee:	4293      	cmp	r3, r2
240568f0:	d004      	beq.n	240568fc <HAL_DMA_Init+0x628>
240568f2:	687b      	ldr	r3, [r7, #4]
240568f4:	681b      	ldr	r3, [r3, #0]
240568f6:	4a09      	ldr	r2, [pc, #36]	; (2405691c <HAL_DMA_Init+0x648>)
240568f8:	4293      	cmp	r3, r2
240568fa:	d137      	bne.n	2405696c <HAL_DMA_Init+0x698>
240568fc:	2301      	movs	r3, #1
240568fe:	e036      	b.n	2405696e <HAL_DMA_Init+0x69a>
24056900:	58025408 	.word	0x58025408
24056904:	5802541c 	.word	0x5802541c
24056908:	58025430 	.word	0x58025430
2405690c:	58025444 	.word	0x58025444
24056910:	58025458 	.word	0x58025458
24056914:	5802546c 	.word	0x5802546c
24056918:	58025480 	.word	0x58025480
2405691c:	58025494 	.word	0x58025494
24056920:	fffe000f 	.word	0xfffe000f
24056924:	a7fdabf8 	.word	0xa7fdabf8
24056928:	cccccccd 	.word	0xcccccccd
2405692c:	40020010 	.word	0x40020010
24056930:	40020028 	.word	0x40020028
24056934:	40020040 	.word	0x40020040
24056938:	40020058 	.word	0x40020058
2405693c:	40020070 	.word	0x40020070
24056940:	40020088 	.word	0x40020088
24056944:	400200a0 	.word	0x400200a0
24056948:	400200b8 	.word	0x400200b8
2405694c:	40020410 	.word	0x40020410
24056950:	40020428 	.word	0x40020428
24056954:	40020440 	.word	0x40020440
24056958:	40020458 	.word	0x40020458
2405695c:	40020470 	.word	0x40020470
24056960:	40020488 	.word	0x40020488
24056964:	400204a0 	.word	0x400204a0
24056968:	400204b8 	.word	0x400204b8
2405696c:	2300      	movs	r3, #0
2405696e:	2b00      	cmp	r3, #0
24056970:	d032      	beq.n	240569d8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24056972:	6878      	ldr	r0, [r7, #4]
24056974:	f002 fa8a 	bl	24058e8c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24056978:	687b      	ldr	r3, [r7, #4]
2405697a:	689b      	ldr	r3, [r3, #8]
2405697c:	2b80      	cmp	r3, #128	; 0x80
2405697e:	d102      	bne.n	24056986 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
24056980:	687b      	ldr	r3, [r7, #4]
24056982:	2200      	movs	r2, #0
24056984:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24056986:	687b      	ldr	r3, [r7, #4]
24056988:	685a      	ldr	r2, [r3, #4]
2405698a:	687b      	ldr	r3, [r7, #4]
2405698c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405698e:	b2d2      	uxtb	r2, r2
24056990:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24056992:	687b      	ldr	r3, [r7, #4]
24056994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24056996:	687a      	ldr	r2, [r7, #4]
24056998:	6e92      	ldr	r2, [r2, #104]	; 0x68
2405699a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
2405699c:	687b      	ldr	r3, [r7, #4]
2405699e:	685b      	ldr	r3, [r3, #4]
240569a0:	2b00      	cmp	r3, #0
240569a2:	d010      	beq.n	240569c6 <HAL_DMA_Init+0x6f2>
240569a4:	687b      	ldr	r3, [r7, #4]
240569a6:	685b      	ldr	r3, [r3, #4]
240569a8:	2b08      	cmp	r3, #8
240569aa:	d80c      	bhi.n	240569c6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
240569ac:	6878      	ldr	r0, [r7, #4]
240569ae:	f002 fb07 	bl	24058fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
240569b2:	687b      	ldr	r3, [r7, #4]
240569b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240569b6:	2200      	movs	r2, #0
240569b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240569ba:	687b      	ldr	r3, [r7, #4]
240569bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240569be:	687a      	ldr	r2, [r7, #4]
240569c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
240569c2:	605a      	str	r2, [r3, #4]
240569c4:	e008      	b.n	240569d8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
240569c6:	687b      	ldr	r3, [r7, #4]
240569c8:	2200      	movs	r2, #0
240569ca:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
240569cc:	687b      	ldr	r3, [r7, #4]
240569ce:	2200      	movs	r2, #0
240569d0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
240569d2:	687b      	ldr	r3, [r7, #4]
240569d4:	2200      	movs	r2, #0
240569d6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
240569d8:	687b      	ldr	r3, [r7, #4]
240569da:	2200      	movs	r2, #0
240569dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
240569de:	687b      	ldr	r3, [r7, #4]
240569e0:	2201      	movs	r2, #1
240569e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
240569e6:	2300      	movs	r3, #0
}
240569e8:	4618      	mov	r0, r3
240569ea:	3718      	adds	r7, #24
240569ec:	46bd      	mov	sp, r7
240569ee:	bd80      	pop	{r7, pc}

240569f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
240569f0:	b580      	push	{r7, lr}
240569f2:	b086      	sub	sp, #24
240569f4:	af00      	add	r7, sp, #0
240569f6:	60f8      	str	r0, [r7, #12]
240569f8:	60b9      	str	r1, [r7, #8]
240569fa:	607a      	str	r2, [r7, #4]
240569fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240569fe:	2300      	movs	r3, #0
24056a00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24056a02:	68fb      	ldr	r3, [r7, #12]
24056a04:	2b00      	cmp	r3, #0
24056a06:	d101      	bne.n	24056a0c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
24056a08:	2301      	movs	r3, #1
24056a0a:	e226      	b.n	24056e5a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24056a0c:	68fb      	ldr	r3, [r7, #12]
24056a0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24056a12:	2b01      	cmp	r3, #1
24056a14:	d101      	bne.n	24056a1a <HAL_DMA_Start_IT+0x2a>
24056a16:	2302      	movs	r3, #2
24056a18:	e21f      	b.n	24056e5a <HAL_DMA_Start_IT+0x46a>
24056a1a:	68fb      	ldr	r3, [r7, #12]
24056a1c:	2201      	movs	r2, #1
24056a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24056a22:	68fb      	ldr	r3, [r7, #12]
24056a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24056a28:	b2db      	uxtb	r3, r3
24056a2a:	2b01      	cmp	r3, #1
24056a2c:	f040 820a 	bne.w	24056e44 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24056a30:	68fb      	ldr	r3, [r7, #12]
24056a32:	2202      	movs	r2, #2
24056a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24056a38:	68fb      	ldr	r3, [r7, #12]
24056a3a:	2200      	movs	r2, #0
24056a3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24056a3e:	68fb      	ldr	r3, [r7, #12]
24056a40:	681b      	ldr	r3, [r3, #0]
24056a42:	4a68      	ldr	r2, [pc, #416]	; (24056be4 <HAL_DMA_Start_IT+0x1f4>)
24056a44:	4293      	cmp	r3, r2
24056a46:	d04a      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056a48:	68fb      	ldr	r3, [r7, #12]
24056a4a:	681b      	ldr	r3, [r3, #0]
24056a4c:	4a66      	ldr	r2, [pc, #408]	; (24056be8 <HAL_DMA_Start_IT+0x1f8>)
24056a4e:	4293      	cmp	r3, r2
24056a50:	d045      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056a52:	68fb      	ldr	r3, [r7, #12]
24056a54:	681b      	ldr	r3, [r3, #0]
24056a56:	4a65      	ldr	r2, [pc, #404]	; (24056bec <HAL_DMA_Start_IT+0x1fc>)
24056a58:	4293      	cmp	r3, r2
24056a5a:	d040      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056a5c:	68fb      	ldr	r3, [r7, #12]
24056a5e:	681b      	ldr	r3, [r3, #0]
24056a60:	4a63      	ldr	r2, [pc, #396]	; (24056bf0 <HAL_DMA_Start_IT+0x200>)
24056a62:	4293      	cmp	r3, r2
24056a64:	d03b      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056a66:	68fb      	ldr	r3, [r7, #12]
24056a68:	681b      	ldr	r3, [r3, #0]
24056a6a:	4a62      	ldr	r2, [pc, #392]	; (24056bf4 <HAL_DMA_Start_IT+0x204>)
24056a6c:	4293      	cmp	r3, r2
24056a6e:	d036      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056a70:	68fb      	ldr	r3, [r7, #12]
24056a72:	681b      	ldr	r3, [r3, #0]
24056a74:	4a60      	ldr	r2, [pc, #384]	; (24056bf8 <HAL_DMA_Start_IT+0x208>)
24056a76:	4293      	cmp	r3, r2
24056a78:	d031      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056a7a:	68fb      	ldr	r3, [r7, #12]
24056a7c:	681b      	ldr	r3, [r3, #0]
24056a7e:	4a5f      	ldr	r2, [pc, #380]	; (24056bfc <HAL_DMA_Start_IT+0x20c>)
24056a80:	4293      	cmp	r3, r2
24056a82:	d02c      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056a84:	68fb      	ldr	r3, [r7, #12]
24056a86:	681b      	ldr	r3, [r3, #0]
24056a88:	4a5d      	ldr	r2, [pc, #372]	; (24056c00 <HAL_DMA_Start_IT+0x210>)
24056a8a:	4293      	cmp	r3, r2
24056a8c:	d027      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056a8e:	68fb      	ldr	r3, [r7, #12]
24056a90:	681b      	ldr	r3, [r3, #0]
24056a92:	4a5c      	ldr	r2, [pc, #368]	; (24056c04 <HAL_DMA_Start_IT+0x214>)
24056a94:	4293      	cmp	r3, r2
24056a96:	d022      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056a98:	68fb      	ldr	r3, [r7, #12]
24056a9a:	681b      	ldr	r3, [r3, #0]
24056a9c:	4a5a      	ldr	r2, [pc, #360]	; (24056c08 <HAL_DMA_Start_IT+0x218>)
24056a9e:	4293      	cmp	r3, r2
24056aa0:	d01d      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056aa2:	68fb      	ldr	r3, [r7, #12]
24056aa4:	681b      	ldr	r3, [r3, #0]
24056aa6:	4a59      	ldr	r2, [pc, #356]	; (24056c0c <HAL_DMA_Start_IT+0x21c>)
24056aa8:	4293      	cmp	r3, r2
24056aaa:	d018      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056aac:	68fb      	ldr	r3, [r7, #12]
24056aae:	681b      	ldr	r3, [r3, #0]
24056ab0:	4a57      	ldr	r2, [pc, #348]	; (24056c10 <HAL_DMA_Start_IT+0x220>)
24056ab2:	4293      	cmp	r3, r2
24056ab4:	d013      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056ab6:	68fb      	ldr	r3, [r7, #12]
24056ab8:	681b      	ldr	r3, [r3, #0]
24056aba:	4a56      	ldr	r2, [pc, #344]	; (24056c14 <HAL_DMA_Start_IT+0x224>)
24056abc:	4293      	cmp	r3, r2
24056abe:	d00e      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056ac0:	68fb      	ldr	r3, [r7, #12]
24056ac2:	681b      	ldr	r3, [r3, #0]
24056ac4:	4a54      	ldr	r2, [pc, #336]	; (24056c18 <HAL_DMA_Start_IT+0x228>)
24056ac6:	4293      	cmp	r3, r2
24056ac8:	d009      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056aca:	68fb      	ldr	r3, [r7, #12]
24056acc:	681b      	ldr	r3, [r3, #0]
24056ace:	4a53      	ldr	r2, [pc, #332]	; (24056c1c <HAL_DMA_Start_IT+0x22c>)
24056ad0:	4293      	cmp	r3, r2
24056ad2:	d004      	beq.n	24056ade <HAL_DMA_Start_IT+0xee>
24056ad4:	68fb      	ldr	r3, [r7, #12]
24056ad6:	681b      	ldr	r3, [r3, #0]
24056ad8:	4a51      	ldr	r2, [pc, #324]	; (24056c20 <HAL_DMA_Start_IT+0x230>)
24056ada:	4293      	cmp	r3, r2
24056adc:	d108      	bne.n	24056af0 <HAL_DMA_Start_IT+0x100>
24056ade:	68fb      	ldr	r3, [r7, #12]
24056ae0:	681b      	ldr	r3, [r3, #0]
24056ae2:	681a      	ldr	r2, [r3, #0]
24056ae4:	68fb      	ldr	r3, [r7, #12]
24056ae6:	681b      	ldr	r3, [r3, #0]
24056ae8:	f022 0201 	bic.w	r2, r2, #1
24056aec:	601a      	str	r2, [r3, #0]
24056aee:	e007      	b.n	24056b00 <HAL_DMA_Start_IT+0x110>
24056af0:	68fb      	ldr	r3, [r7, #12]
24056af2:	681b      	ldr	r3, [r3, #0]
24056af4:	681a      	ldr	r2, [r3, #0]
24056af6:	68fb      	ldr	r3, [r7, #12]
24056af8:	681b      	ldr	r3, [r3, #0]
24056afa:	f022 0201 	bic.w	r2, r2, #1
24056afe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24056b00:	683b      	ldr	r3, [r7, #0]
24056b02:	687a      	ldr	r2, [r7, #4]
24056b04:	68b9      	ldr	r1, [r7, #8]
24056b06:	68f8      	ldr	r0, [r7, #12]
24056b08:	f001 feae 	bl	24058868 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24056b0c:	68fb      	ldr	r3, [r7, #12]
24056b0e:	681b      	ldr	r3, [r3, #0]
24056b10:	4a34      	ldr	r2, [pc, #208]	; (24056be4 <HAL_DMA_Start_IT+0x1f4>)
24056b12:	4293      	cmp	r3, r2
24056b14:	d04a      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b16:	68fb      	ldr	r3, [r7, #12]
24056b18:	681b      	ldr	r3, [r3, #0]
24056b1a:	4a33      	ldr	r2, [pc, #204]	; (24056be8 <HAL_DMA_Start_IT+0x1f8>)
24056b1c:	4293      	cmp	r3, r2
24056b1e:	d045      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b20:	68fb      	ldr	r3, [r7, #12]
24056b22:	681b      	ldr	r3, [r3, #0]
24056b24:	4a31      	ldr	r2, [pc, #196]	; (24056bec <HAL_DMA_Start_IT+0x1fc>)
24056b26:	4293      	cmp	r3, r2
24056b28:	d040      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b2a:	68fb      	ldr	r3, [r7, #12]
24056b2c:	681b      	ldr	r3, [r3, #0]
24056b2e:	4a30      	ldr	r2, [pc, #192]	; (24056bf0 <HAL_DMA_Start_IT+0x200>)
24056b30:	4293      	cmp	r3, r2
24056b32:	d03b      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b34:	68fb      	ldr	r3, [r7, #12]
24056b36:	681b      	ldr	r3, [r3, #0]
24056b38:	4a2e      	ldr	r2, [pc, #184]	; (24056bf4 <HAL_DMA_Start_IT+0x204>)
24056b3a:	4293      	cmp	r3, r2
24056b3c:	d036      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b3e:	68fb      	ldr	r3, [r7, #12]
24056b40:	681b      	ldr	r3, [r3, #0]
24056b42:	4a2d      	ldr	r2, [pc, #180]	; (24056bf8 <HAL_DMA_Start_IT+0x208>)
24056b44:	4293      	cmp	r3, r2
24056b46:	d031      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b48:	68fb      	ldr	r3, [r7, #12]
24056b4a:	681b      	ldr	r3, [r3, #0]
24056b4c:	4a2b      	ldr	r2, [pc, #172]	; (24056bfc <HAL_DMA_Start_IT+0x20c>)
24056b4e:	4293      	cmp	r3, r2
24056b50:	d02c      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b52:	68fb      	ldr	r3, [r7, #12]
24056b54:	681b      	ldr	r3, [r3, #0]
24056b56:	4a2a      	ldr	r2, [pc, #168]	; (24056c00 <HAL_DMA_Start_IT+0x210>)
24056b58:	4293      	cmp	r3, r2
24056b5a:	d027      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b5c:	68fb      	ldr	r3, [r7, #12]
24056b5e:	681b      	ldr	r3, [r3, #0]
24056b60:	4a28      	ldr	r2, [pc, #160]	; (24056c04 <HAL_DMA_Start_IT+0x214>)
24056b62:	4293      	cmp	r3, r2
24056b64:	d022      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b66:	68fb      	ldr	r3, [r7, #12]
24056b68:	681b      	ldr	r3, [r3, #0]
24056b6a:	4a27      	ldr	r2, [pc, #156]	; (24056c08 <HAL_DMA_Start_IT+0x218>)
24056b6c:	4293      	cmp	r3, r2
24056b6e:	d01d      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b70:	68fb      	ldr	r3, [r7, #12]
24056b72:	681b      	ldr	r3, [r3, #0]
24056b74:	4a25      	ldr	r2, [pc, #148]	; (24056c0c <HAL_DMA_Start_IT+0x21c>)
24056b76:	4293      	cmp	r3, r2
24056b78:	d018      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b7a:	68fb      	ldr	r3, [r7, #12]
24056b7c:	681b      	ldr	r3, [r3, #0]
24056b7e:	4a24      	ldr	r2, [pc, #144]	; (24056c10 <HAL_DMA_Start_IT+0x220>)
24056b80:	4293      	cmp	r3, r2
24056b82:	d013      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b84:	68fb      	ldr	r3, [r7, #12]
24056b86:	681b      	ldr	r3, [r3, #0]
24056b88:	4a22      	ldr	r2, [pc, #136]	; (24056c14 <HAL_DMA_Start_IT+0x224>)
24056b8a:	4293      	cmp	r3, r2
24056b8c:	d00e      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b8e:	68fb      	ldr	r3, [r7, #12]
24056b90:	681b      	ldr	r3, [r3, #0]
24056b92:	4a21      	ldr	r2, [pc, #132]	; (24056c18 <HAL_DMA_Start_IT+0x228>)
24056b94:	4293      	cmp	r3, r2
24056b96:	d009      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056b98:	68fb      	ldr	r3, [r7, #12]
24056b9a:	681b      	ldr	r3, [r3, #0]
24056b9c:	4a1f      	ldr	r2, [pc, #124]	; (24056c1c <HAL_DMA_Start_IT+0x22c>)
24056b9e:	4293      	cmp	r3, r2
24056ba0:	d004      	beq.n	24056bac <HAL_DMA_Start_IT+0x1bc>
24056ba2:	68fb      	ldr	r3, [r7, #12]
24056ba4:	681b      	ldr	r3, [r3, #0]
24056ba6:	4a1e      	ldr	r2, [pc, #120]	; (24056c20 <HAL_DMA_Start_IT+0x230>)
24056ba8:	4293      	cmp	r3, r2
24056baa:	d101      	bne.n	24056bb0 <HAL_DMA_Start_IT+0x1c0>
24056bac:	2301      	movs	r3, #1
24056bae:	e000      	b.n	24056bb2 <HAL_DMA_Start_IT+0x1c2>
24056bb0:	2300      	movs	r3, #0
24056bb2:	2b00      	cmp	r3, #0
24056bb4:	d036      	beq.n	24056c24 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24056bb6:	68fb      	ldr	r3, [r7, #12]
24056bb8:	681b      	ldr	r3, [r3, #0]
24056bba:	681b      	ldr	r3, [r3, #0]
24056bbc:	f023 021e 	bic.w	r2, r3, #30
24056bc0:	68fb      	ldr	r3, [r7, #12]
24056bc2:	681b      	ldr	r3, [r3, #0]
24056bc4:	f042 0216 	orr.w	r2, r2, #22
24056bc8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24056bca:	68fb      	ldr	r3, [r7, #12]
24056bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056bce:	2b00      	cmp	r3, #0
24056bd0:	d03e      	beq.n	24056c50 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24056bd2:	68fb      	ldr	r3, [r7, #12]
24056bd4:	681b      	ldr	r3, [r3, #0]
24056bd6:	681a      	ldr	r2, [r3, #0]
24056bd8:	68fb      	ldr	r3, [r7, #12]
24056bda:	681b      	ldr	r3, [r3, #0]
24056bdc:	f042 0208 	orr.w	r2, r2, #8
24056be0:	601a      	str	r2, [r3, #0]
24056be2:	e035      	b.n	24056c50 <HAL_DMA_Start_IT+0x260>
24056be4:	40020010 	.word	0x40020010
24056be8:	40020028 	.word	0x40020028
24056bec:	40020040 	.word	0x40020040
24056bf0:	40020058 	.word	0x40020058
24056bf4:	40020070 	.word	0x40020070
24056bf8:	40020088 	.word	0x40020088
24056bfc:	400200a0 	.word	0x400200a0
24056c00:	400200b8 	.word	0x400200b8
24056c04:	40020410 	.word	0x40020410
24056c08:	40020428 	.word	0x40020428
24056c0c:	40020440 	.word	0x40020440
24056c10:	40020458 	.word	0x40020458
24056c14:	40020470 	.word	0x40020470
24056c18:	40020488 	.word	0x40020488
24056c1c:	400204a0 	.word	0x400204a0
24056c20:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24056c24:	68fb      	ldr	r3, [r7, #12]
24056c26:	681b      	ldr	r3, [r3, #0]
24056c28:	681b      	ldr	r3, [r3, #0]
24056c2a:	f023 020e 	bic.w	r2, r3, #14
24056c2e:	68fb      	ldr	r3, [r7, #12]
24056c30:	681b      	ldr	r3, [r3, #0]
24056c32:	f042 020a 	orr.w	r2, r2, #10
24056c36:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24056c38:	68fb      	ldr	r3, [r7, #12]
24056c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056c3c:	2b00      	cmp	r3, #0
24056c3e:	d007      	beq.n	24056c50 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24056c40:	68fb      	ldr	r3, [r7, #12]
24056c42:	681b      	ldr	r3, [r3, #0]
24056c44:	681a      	ldr	r2, [r3, #0]
24056c46:	68fb      	ldr	r3, [r7, #12]
24056c48:	681b      	ldr	r3, [r3, #0]
24056c4a:	f042 0204 	orr.w	r2, r2, #4
24056c4e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24056c50:	68fb      	ldr	r3, [r7, #12]
24056c52:	681b      	ldr	r3, [r3, #0]
24056c54:	4a83      	ldr	r2, [pc, #524]	; (24056e64 <HAL_DMA_Start_IT+0x474>)
24056c56:	4293      	cmp	r3, r2
24056c58:	d072      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056c5a:	68fb      	ldr	r3, [r7, #12]
24056c5c:	681b      	ldr	r3, [r3, #0]
24056c5e:	4a82      	ldr	r2, [pc, #520]	; (24056e68 <HAL_DMA_Start_IT+0x478>)
24056c60:	4293      	cmp	r3, r2
24056c62:	d06d      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056c64:	68fb      	ldr	r3, [r7, #12]
24056c66:	681b      	ldr	r3, [r3, #0]
24056c68:	4a80      	ldr	r2, [pc, #512]	; (24056e6c <HAL_DMA_Start_IT+0x47c>)
24056c6a:	4293      	cmp	r3, r2
24056c6c:	d068      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056c6e:	68fb      	ldr	r3, [r7, #12]
24056c70:	681b      	ldr	r3, [r3, #0]
24056c72:	4a7f      	ldr	r2, [pc, #508]	; (24056e70 <HAL_DMA_Start_IT+0x480>)
24056c74:	4293      	cmp	r3, r2
24056c76:	d063      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056c78:	68fb      	ldr	r3, [r7, #12]
24056c7a:	681b      	ldr	r3, [r3, #0]
24056c7c:	4a7d      	ldr	r2, [pc, #500]	; (24056e74 <HAL_DMA_Start_IT+0x484>)
24056c7e:	4293      	cmp	r3, r2
24056c80:	d05e      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056c82:	68fb      	ldr	r3, [r7, #12]
24056c84:	681b      	ldr	r3, [r3, #0]
24056c86:	4a7c      	ldr	r2, [pc, #496]	; (24056e78 <HAL_DMA_Start_IT+0x488>)
24056c88:	4293      	cmp	r3, r2
24056c8a:	d059      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056c8c:	68fb      	ldr	r3, [r7, #12]
24056c8e:	681b      	ldr	r3, [r3, #0]
24056c90:	4a7a      	ldr	r2, [pc, #488]	; (24056e7c <HAL_DMA_Start_IT+0x48c>)
24056c92:	4293      	cmp	r3, r2
24056c94:	d054      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056c96:	68fb      	ldr	r3, [r7, #12]
24056c98:	681b      	ldr	r3, [r3, #0]
24056c9a:	4a79      	ldr	r2, [pc, #484]	; (24056e80 <HAL_DMA_Start_IT+0x490>)
24056c9c:	4293      	cmp	r3, r2
24056c9e:	d04f      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056ca0:	68fb      	ldr	r3, [r7, #12]
24056ca2:	681b      	ldr	r3, [r3, #0]
24056ca4:	4a77      	ldr	r2, [pc, #476]	; (24056e84 <HAL_DMA_Start_IT+0x494>)
24056ca6:	4293      	cmp	r3, r2
24056ca8:	d04a      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056caa:	68fb      	ldr	r3, [r7, #12]
24056cac:	681b      	ldr	r3, [r3, #0]
24056cae:	4a76      	ldr	r2, [pc, #472]	; (24056e88 <HAL_DMA_Start_IT+0x498>)
24056cb0:	4293      	cmp	r3, r2
24056cb2:	d045      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056cb4:	68fb      	ldr	r3, [r7, #12]
24056cb6:	681b      	ldr	r3, [r3, #0]
24056cb8:	4a74      	ldr	r2, [pc, #464]	; (24056e8c <HAL_DMA_Start_IT+0x49c>)
24056cba:	4293      	cmp	r3, r2
24056cbc:	d040      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056cbe:	68fb      	ldr	r3, [r7, #12]
24056cc0:	681b      	ldr	r3, [r3, #0]
24056cc2:	4a73      	ldr	r2, [pc, #460]	; (24056e90 <HAL_DMA_Start_IT+0x4a0>)
24056cc4:	4293      	cmp	r3, r2
24056cc6:	d03b      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056cc8:	68fb      	ldr	r3, [r7, #12]
24056cca:	681b      	ldr	r3, [r3, #0]
24056ccc:	4a71      	ldr	r2, [pc, #452]	; (24056e94 <HAL_DMA_Start_IT+0x4a4>)
24056cce:	4293      	cmp	r3, r2
24056cd0:	d036      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056cd2:	68fb      	ldr	r3, [r7, #12]
24056cd4:	681b      	ldr	r3, [r3, #0]
24056cd6:	4a70      	ldr	r2, [pc, #448]	; (24056e98 <HAL_DMA_Start_IT+0x4a8>)
24056cd8:	4293      	cmp	r3, r2
24056cda:	d031      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056cdc:	68fb      	ldr	r3, [r7, #12]
24056cde:	681b      	ldr	r3, [r3, #0]
24056ce0:	4a6e      	ldr	r2, [pc, #440]	; (24056e9c <HAL_DMA_Start_IT+0x4ac>)
24056ce2:	4293      	cmp	r3, r2
24056ce4:	d02c      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056ce6:	68fb      	ldr	r3, [r7, #12]
24056ce8:	681b      	ldr	r3, [r3, #0]
24056cea:	4a6d      	ldr	r2, [pc, #436]	; (24056ea0 <HAL_DMA_Start_IT+0x4b0>)
24056cec:	4293      	cmp	r3, r2
24056cee:	d027      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056cf0:	68fb      	ldr	r3, [r7, #12]
24056cf2:	681b      	ldr	r3, [r3, #0]
24056cf4:	4a6b      	ldr	r2, [pc, #428]	; (24056ea4 <HAL_DMA_Start_IT+0x4b4>)
24056cf6:	4293      	cmp	r3, r2
24056cf8:	d022      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056cfa:	68fb      	ldr	r3, [r7, #12]
24056cfc:	681b      	ldr	r3, [r3, #0]
24056cfe:	4a6a      	ldr	r2, [pc, #424]	; (24056ea8 <HAL_DMA_Start_IT+0x4b8>)
24056d00:	4293      	cmp	r3, r2
24056d02:	d01d      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056d04:	68fb      	ldr	r3, [r7, #12]
24056d06:	681b      	ldr	r3, [r3, #0]
24056d08:	4a68      	ldr	r2, [pc, #416]	; (24056eac <HAL_DMA_Start_IT+0x4bc>)
24056d0a:	4293      	cmp	r3, r2
24056d0c:	d018      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056d0e:	68fb      	ldr	r3, [r7, #12]
24056d10:	681b      	ldr	r3, [r3, #0]
24056d12:	4a67      	ldr	r2, [pc, #412]	; (24056eb0 <HAL_DMA_Start_IT+0x4c0>)
24056d14:	4293      	cmp	r3, r2
24056d16:	d013      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056d18:	68fb      	ldr	r3, [r7, #12]
24056d1a:	681b      	ldr	r3, [r3, #0]
24056d1c:	4a65      	ldr	r2, [pc, #404]	; (24056eb4 <HAL_DMA_Start_IT+0x4c4>)
24056d1e:	4293      	cmp	r3, r2
24056d20:	d00e      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056d22:	68fb      	ldr	r3, [r7, #12]
24056d24:	681b      	ldr	r3, [r3, #0]
24056d26:	4a64      	ldr	r2, [pc, #400]	; (24056eb8 <HAL_DMA_Start_IT+0x4c8>)
24056d28:	4293      	cmp	r3, r2
24056d2a:	d009      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056d2c:	68fb      	ldr	r3, [r7, #12]
24056d2e:	681b      	ldr	r3, [r3, #0]
24056d30:	4a62      	ldr	r2, [pc, #392]	; (24056ebc <HAL_DMA_Start_IT+0x4cc>)
24056d32:	4293      	cmp	r3, r2
24056d34:	d004      	beq.n	24056d40 <HAL_DMA_Start_IT+0x350>
24056d36:	68fb      	ldr	r3, [r7, #12]
24056d38:	681b      	ldr	r3, [r3, #0]
24056d3a:	4a61      	ldr	r2, [pc, #388]	; (24056ec0 <HAL_DMA_Start_IT+0x4d0>)
24056d3c:	4293      	cmp	r3, r2
24056d3e:	d101      	bne.n	24056d44 <HAL_DMA_Start_IT+0x354>
24056d40:	2301      	movs	r3, #1
24056d42:	e000      	b.n	24056d46 <HAL_DMA_Start_IT+0x356>
24056d44:	2300      	movs	r3, #0
24056d46:	2b00      	cmp	r3, #0
24056d48:	d01a      	beq.n	24056d80 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24056d4a:	68fb      	ldr	r3, [r7, #12]
24056d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24056d4e:	681b      	ldr	r3, [r3, #0]
24056d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24056d54:	2b00      	cmp	r3, #0
24056d56:	d007      	beq.n	24056d68 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24056d58:	68fb      	ldr	r3, [r7, #12]
24056d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24056d5c:	681a      	ldr	r2, [r3, #0]
24056d5e:	68fb      	ldr	r3, [r7, #12]
24056d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24056d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24056d66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
24056d68:	68fb      	ldr	r3, [r7, #12]
24056d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24056d6c:	2b00      	cmp	r3, #0
24056d6e:	d007      	beq.n	24056d80 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24056d70:	68fb      	ldr	r3, [r7, #12]
24056d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24056d74:	681a      	ldr	r2, [r3, #0]
24056d76:	68fb      	ldr	r3, [r7, #12]
24056d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24056d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24056d7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
24056d80:	68fb      	ldr	r3, [r7, #12]
24056d82:	681b      	ldr	r3, [r3, #0]
24056d84:	4a37      	ldr	r2, [pc, #220]	; (24056e64 <HAL_DMA_Start_IT+0x474>)
24056d86:	4293      	cmp	r3, r2
24056d88:	d04a      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056d8a:	68fb      	ldr	r3, [r7, #12]
24056d8c:	681b      	ldr	r3, [r3, #0]
24056d8e:	4a36      	ldr	r2, [pc, #216]	; (24056e68 <HAL_DMA_Start_IT+0x478>)
24056d90:	4293      	cmp	r3, r2
24056d92:	d045      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056d94:	68fb      	ldr	r3, [r7, #12]
24056d96:	681b      	ldr	r3, [r3, #0]
24056d98:	4a34      	ldr	r2, [pc, #208]	; (24056e6c <HAL_DMA_Start_IT+0x47c>)
24056d9a:	4293      	cmp	r3, r2
24056d9c:	d040      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056d9e:	68fb      	ldr	r3, [r7, #12]
24056da0:	681b      	ldr	r3, [r3, #0]
24056da2:	4a33      	ldr	r2, [pc, #204]	; (24056e70 <HAL_DMA_Start_IT+0x480>)
24056da4:	4293      	cmp	r3, r2
24056da6:	d03b      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056da8:	68fb      	ldr	r3, [r7, #12]
24056daa:	681b      	ldr	r3, [r3, #0]
24056dac:	4a31      	ldr	r2, [pc, #196]	; (24056e74 <HAL_DMA_Start_IT+0x484>)
24056dae:	4293      	cmp	r3, r2
24056db0:	d036      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056db2:	68fb      	ldr	r3, [r7, #12]
24056db4:	681b      	ldr	r3, [r3, #0]
24056db6:	4a30      	ldr	r2, [pc, #192]	; (24056e78 <HAL_DMA_Start_IT+0x488>)
24056db8:	4293      	cmp	r3, r2
24056dba:	d031      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056dbc:	68fb      	ldr	r3, [r7, #12]
24056dbe:	681b      	ldr	r3, [r3, #0]
24056dc0:	4a2e      	ldr	r2, [pc, #184]	; (24056e7c <HAL_DMA_Start_IT+0x48c>)
24056dc2:	4293      	cmp	r3, r2
24056dc4:	d02c      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056dc6:	68fb      	ldr	r3, [r7, #12]
24056dc8:	681b      	ldr	r3, [r3, #0]
24056dca:	4a2d      	ldr	r2, [pc, #180]	; (24056e80 <HAL_DMA_Start_IT+0x490>)
24056dcc:	4293      	cmp	r3, r2
24056dce:	d027      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056dd0:	68fb      	ldr	r3, [r7, #12]
24056dd2:	681b      	ldr	r3, [r3, #0]
24056dd4:	4a2b      	ldr	r2, [pc, #172]	; (24056e84 <HAL_DMA_Start_IT+0x494>)
24056dd6:	4293      	cmp	r3, r2
24056dd8:	d022      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056dda:	68fb      	ldr	r3, [r7, #12]
24056ddc:	681b      	ldr	r3, [r3, #0]
24056dde:	4a2a      	ldr	r2, [pc, #168]	; (24056e88 <HAL_DMA_Start_IT+0x498>)
24056de0:	4293      	cmp	r3, r2
24056de2:	d01d      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056de4:	68fb      	ldr	r3, [r7, #12]
24056de6:	681b      	ldr	r3, [r3, #0]
24056de8:	4a28      	ldr	r2, [pc, #160]	; (24056e8c <HAL_DMA_Start_IT+0x49c>)
24056dea:	4293      	cmp	r3, r2
24056dec:	d018      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056dee:	68fb      	ldr	r3, [r7, #12]
24056df0:	681b      	ldr	r3, [r3, #0]
24056df2:	4a27      	ldr	r2, [pc, #156]	; (24056e90 <HAL_DMA_Start_IT+0x4a0>)
24056df4:	4293      	cmp	r3, r2
24056df6:	d013      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056df8:	68fb      	ldr	r3, [r7, #12]
24056dfa:	681b      	ldr	r3, [r3, #0]
24056dfc:	4a25      	ldr	r2, [pc, #148]	; (24056e94 <HAL_DMA_Start_IT+0x4a4>)
24056dfe:	4293      	cmp	r3, r2
24056e00:	d00e      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056e02:	68fb      	ldr	r3, [r7, #12]
24056e04:	681b      	ldr	r3, [r3, #0]
24056e06:	4a24      	ldr	r2, [pc, #144]	; (24056e98 <HAL_DMA_Start_IT+0x4a8>)
24056e08:	4293      	cmp	r3, r2
24056e0a:	d009      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056e0c:	68fb      	ldr	r3, [r7, #12]
24056e0e:	681b      	ldr	r3, [r3, #0]
24056e10:	4a22      	ldr	r2, [pc, #136]	; (24056e9c <HAL_DMA_Start_IT+0x4ac>)
24056e12:	4293      	cmp	r3, r2
24056e14:	d004      	beq.n	24056e20 <HAL_DMA_Start_IT+0x430>
24056e16:	68fb      	ldr	r3, [r7, #12]
24056e18:	681b      	ldr	r3, [r3, #0]
24056e1a:	4a21      	ldr	r2, [pc, #132]	; (24056ea0 <HAL_DMA_Start_IT+0x4b0>)
24056e1c:	4293      	cmp	r3, r2
24056e1e:	d108      	bne.n	24056e32 <HAL_DMA_Start_IT+0x442>
24056e20:	68fb      	ldr	r3, [r7, #12]
24056e22:	681b      	ldr	r3, [r3, #0]
24056e24:	681a      	ldr	r2, [r3, #0]
24056e26:	68fb      	ldr	r3, [r7, #12]
24056e28:	681b      	ldr	r3, [r3, #0]
24056e2a:	f042 0201 	orr.w	r2, r2, #1
24056e2e:	601a      	str	r2, [r3, #0]
24056e30:	e012      	b.n	24056e58 <HAL_DMA_Start_IT+0x468>
24056e32:	68fb      	ldr	r3, [r7, #12]
24056e34:	681b      	ldr	r3, [r3, #0]
24056e36:	681a      	ldr	r2, [r3, #0]
24056e38:	68fb      	ldr	r3, [r7, #12]
24056e3a:	681b      	ldr	r3, [r3, #0]
24056e3c:	f042 0201 	orr.w	r2, r2, #1
24056e40:	601a      	str	r2, [r3, #0]
24056e42:	e009      	b.n	24056e58 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24056e44:	68fb      	ldr	r3, [r7, #12]
24056e46:	f44f 6200 	mov.w	r2, #2048	; 0x800
24056e4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
24056e4c:	68fb      	ldr	r3, [r7, #12]
24056e4e:	2200      	movs	r2, #0
24056e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
24056e54:	2301      	movs	r3, #1
24056e56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
24056e58:	7dfb      	ldrb	r3, [r7, #23]
}
24056e5a:	4618      	mov	r0, r3
24056e5c:	3718      	adds	r7, #24
24056e5e:	46bd      	mov	sp, r7
24056e60:	bd80      	pop	{r7, pc}
24056e62:	bf00      	nop
24056e64:	40020010 	.word	0x40020010
24056e68:	40020028 	.word	0x40020028
24056e6c:	40020040 	.word	0x40020040
24056e70:	40020058 	.word	0x40020058
24056e74:	40020070 	.word	0x40020070
24056e78:	40020088 	.word	0x40020088
24056e7c:	400200a0 	.word	0x400200a0
24056e80:	400200b8 	.word	0x400200b8
24056e84:	40020410 	.word	0x40020410
24056e88:	40020428 	.word	0x40020428
24056e8c:	40020440 	.word	0x40020440
24056e90:	40020458 	.word	0x40020458
24056e94:	40020470 	.word	0x40020470
24056e98:	40020488 	.word	0x40020488
24056e9c:	400204a0 	.word	0x400204a0
24056ea0:	400204b8 	.word	0x400204b8
24056ea4:	58025408 	.word	0x58025408
24056ea8:	5802541c 	.word	0x5802541c
24056eac:	58025430 	.word	0x58025430
24056eb0:	58025444 	.word	0x58025444
24056eb4:	58025458 	.word	0x58025458
24056eb8:	5802546c 	.word	0x5802546c
24056ebc:	58025480 	.word	0x58025480
24056ec0:	58025494 	.word	0x58025494

24056ec4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
24056ec4:	b580      	push	{r7, lr}
24056ec6:	b086      	sub	sp, #24
24056ec8:	af00      	add	r7, sp, #0
24056eca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
24056ecc:	f7fc ffba 	bl	24053e44 <HAL_GetTick>
24056ed0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
24056ed2:	687b      	ldr	r3, [r7, #4]
24056ed4:	2b00      	cmp	r3, #0
24056ed6:	d101      	bne.n	24056edc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
24056ed8:	2301      	movs	r3, #1
24056eda:	e2dc      	b.n	24057496 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
24056edc:	687b      	ldr	r3, [r7, #4]
24056ede:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24056ee2:	b2db      	uxtb	r3, r3
24056ee4:	2b02      	cmp	r3, #2
24056ee6:	d008      	beq.n	24056efa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24056ee8:	687b      	ldr	r3, [r7, #4]
24056eea:	2280      	movs	r2, #128	; 0x80
24056eec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24056eee:	687b      	ldr	r3, [r7, #4]
24056ef0:	2200      	movs	r2, #0
24056ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
24056ef6:	2301      	movs	r3, #1
24056ef8:	e2cd      	b.n	24057496 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24056efa:	687b      	ldr	r3, [r7, #4]
24056efc:	681b      	ldr	r3, [r3, #0]
24056efe:	4a76      	ldr	r2, [pc, #472]	; (240570d8 <HAL_DMA_Abort+0x214>)
24056f00:	4293      	cmp	r3, r2
24056f02:	d04a      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f04:	687b      	ldr	r3, [r7, #4]
24056f06:	681b      	ldr	r3, [r3, #0]
24056f08:	4a74      	ldr	r2, [pc, #464]	; (240570dc <HAL_DMA_Abort+0x218>)
24056f0a:	4293      	cmp	r3, r2
24056f0c:	d045      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f0e:	687b      	ldr	r3, [r7, #4]
24056f10:	681b      	ldr	r3, [r3, #0]
24056f12:	4a73      	ldr	r2, [pc, #460]	; (240570e0 <HAL_DMA_Abort+0x21c>)
24056f14:	4293      	cmp	r3, r2
24056f16:	d040      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f18:	687b      	ldr	r3, [r7, #4]
24056f1a:	681b      	ldr	r3, [r3, #0]
24056f1c:	4a71      	ldr	r2, [pc, #452]	; (240570e4 <HAL_DMA_Abort+0x220>)
24056f1e:	4293      	cmp	r3, r2
24056f20:	d03b      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f22:	687b      	ldr	r3, [r7, #4]
24056f24:	681b      	ldr	r3, [r3, #0]
24056f26:	4a70      	ldr	r2, [pc, #448]	; (240570e8 <HAL_DMA_Abort+0x224>)
24056f28:	4293      	cmp	r3, r2
24056f2a:	d036      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f2c:	687b      	ldr	r3, [r7, #4]
24056f2e:	681b      	ldr	r3, [r3, #0]
24056f30:	4a6e      	ldr	r2, [pc, #440]	; (240570ec <HAL_DMA_Abort+0x228>)
24056f32:	4293      	cmp	r3, r2
24056f34:	d031      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f36:	687b      	ldr	r3, [r7, #4]
24056f38:	681b      	ldr	r3, [r3, #0]
24056f3a:	4a6d      	ldr	r2, [pc, #436]	; (240570f0 <HAL_DMA_Abort+0x22c>)
24056f3c:	4293      	cmp	r3, r2
24056f3e:	d02c      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f40:	687b      	ldr	r3, [r7, #4]
24056f42:	681b      	ldr	r3, [r3, #0]
24056f44:	4a6b      	ldr	r2, [pc, #428]	; (240570f4 <HAL_DMA_Abort+0x230>)
24056f46:	4293      	cmp	r3, r2
24056f48:	d027      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f4a:	687b      	ldr	r3, [r7, #4]
24056f4c:	681b      	ldr	r3, [r3, #0]
24056f4e:	4a6a      	ldr	r2, [pc, #424]	; (240570f8 <HAL_DMA_Abort+0x234>)
24056f50:	4293      	cmp	r3, r2
24056f52:	d022      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f54:	687b      	ldr	r3, [r7, #4]
24056f56:	681b      	ldr	r3, [r3, #0]
24056f58:	4a68      	ldr	r2, [pc, #416]	; (240570fc <HAL_DMA_Abort+0x238>)
24056f5a:	4293      	cmp	r3, r2
24056f5c:	d01d      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f5e:	687b      	ldr	r3, [r7, #4]
24056f60:	681b      	ldr	r3, [r3, #0]
24056f62:	4a67      	ldr	r2, [pc, #412]	; (24057100 <HAL_DMA_Abort+0x23c>)
24056f64:	4293      	cmp	r3, r2
24056f66:	d018      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f68:	687b      	ldr	r3, [r7, #4]
24056f6a:	681b      	ldr	r3, [r3, #0]
24056f6c:	4a65      	ldr	r2, [pc, #404]	; (24057104 <HAL_DMA_Abort+0x240>)
24056f6e:	4293      	cmp	r3, r2
24056f70:	d013      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f72:	687b      	ldr	r3, [r7, #4]
24056f74:	681b      	ldr	r3, [r3, #0]
24056f76:	4a64      	ldr	r2, [pc, #400]	; (24057108 <HAL_DMA_Abort+0x244>)
24056f78:	4293      	cmp	r3, r2
24056f7a:	d00e      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f7c:	687b      	ldr	r3, [r7, #4]
24056f7e:	681b      	ldr	r3, [r3, #0]
24056f80:	4a62      	ldr	r2, [pc, #392]	; (2405710c <HAL_DMA_Abort+0x248>)
24056f82:	4293      	cmp	r3, r2
24056f84:	d009      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f86:	687b      	ldr	r3, [r7, #4]
24056f88:	681b      	ldr	r3, [r3, #0]
24056f8a:	4a61      	ldr	r2, [pc, #388]	; (24057110 <HAL_DMA_Abort+0x24c>)
24056f8c:	4293      	cmp	r3, r2
24056f8e:	d004      	beq.n	24056f9a <HAL_DMA_Abort+0xd6>
24056f90:	687b      	ldr	r3, [r7, #4]
24056f92:	681b      	ldr	r3, [r3, #0]
24056f94:	4a5f      	ldr	r2, [pc, #380]	; (24057114 <HAL_DMA_Abort+0x250>)
24056f96:	4293      	cmp	r3, r2
24056f98:	d101      	bne.n	24056f9e <HAL_DMA_Abort+0xda>
24056f9a:	2301      	movs	r3, #1
24056f9c:	e000      	b.n	24056fa0 <HAL_DMA_Abort+0xdc>
24056f9e:	2300      	movs	r3, #0
24056fa0:	2b00      	cmp	r3, #0
24056fa2:	d013      	beq.n	24056fcc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
24056fa4:	687b      	ldr	r3, [r7, #4]
24056fa6:	681b      	ldr	r3, [r3, #0]
24056fa8:	681a      	ldr	r2, [r3, #0]
24056faa:	687b      	ldr	r3, [r7, #4]
24056fac:	681b      	ldr	r3, [r3, #0]
24056fae:	f022 021e 	bic.w	r2, r2, #30
24056fb2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24056fb4:	687b      	ldr	r3, [r7, #4]
24056fb6:	681b      	ldr	r3, [r3, #0]
24056fb8:	695a      	ldr	r2, [r3, #20]
24056fba:	687b      	ldr	r3, [r7, #4]
24056fbc:	681b      	ldr	r3, [r3, #0]
24056fbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24056fc2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
24056fc4:	687b      	ldr	r3, [r7, #4]
24056fc6:	681b      	ldr	r3, [r3, #0]
24056fc8:	617b      	str	r3, [r7, #20]
24056fca:	e00a      	b.n	24056fe2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24056fcc:	687b      	ldr	r3, [r7, #4]
24056fce:	681b      	ldr	r3, [r3, #0]
24056fd0:	681a      	ldr	r2, [r3, #0]
24056fd2:	687b      	ldr	r3, [r7, #4]
24056fd4:	681b      	ldr	r3, [r3, #0]
24056fd6:	f022 020e 	bic.w	r2, r2, #14
24056fda:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
24056fdc:	687b      	ldr	r3, [r7, #4]
24056fde:	681b      	ldr	r3, [r3, #0]
24056fe0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24056fe2:	687b      	ldr	r3, [r7, #4]
24056fe4:	681b      	ldr	r3, [r3, #0]
24056fe6:	4a3c      	ldr	r2, [pc, #240]	; (240570d8 <HAL_DMA_Abort+0x214>)
24056fe8:	4293      	cmp	r3, r2
24056fea:	d072      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
24056fec:	687b      	ldr	r3, [r7, #4]
24056fee:	681b      	ldr	r3, [r3, #0]
24056ff0:	4a3a      	ldr	r2, [pc, #232]	; (240570dc <HAL_DMA_Abort+0x218>)
24056ff2:	4293      	cmp	r3, r2
24056ff4:	d06d      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
24056ff6:	687b      	ldr	r3, [r7, #4]
24056ff8:	681b      	ldr	r3, [r3, #0]
24056ffa:	4a39      	ldr	r2, [pc, #228]	; (240570e0 <HAL_DMA_Abort+0x21c>)
24056ffc:	4293      	cmp	r3, r2
24056ffe:	d068      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
24057000:	687b      	ldr	r3, [r7, #4]
24057002:	681b      	ldr	r3, [r3, #0]
24057004:	4a37      	ldr	r2, [pc, #220]	; (240570e4 <HAL_DMA_Abort+0x220>)
24057006:	4293      	cmp	r3, r2
24057008:	d063      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
2405700a:	687b      	ldr	r3, [r7, #4]
2405700c:	681b      	ldr	r3, [r3, #0]
2405700e:	4a36      	ldr	r2, [pc, #216]	; (240570e8 <HAL_DMA_Abort+0x224>)
24057010:	4293      	cmp	r3, r2
24057012:	d05e      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
24057014:	687b      	ldr	r3, [r7, #4]
24057016:	681b      	ldr	r3, [r3, #0]
24057018:	4a34      	ldr	r2, [pc, #208]	; (240570ec <HAL_DMA_Abort+0x228>)
2405701a:	4293      	cmp	r3, r2
2405701c:	d059      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
2405701e:	687b      	ldr	r3, [r7, #4]
24057020:	681b      	ldr	r3, [r3, #0]
24057022:	4a33      	ldr	r2, [pc, #204]	; (240570f0 <HAL_DMA_Abort+0x22c>)
24057024:	4293      	cmp	r3, r2
24057026:	d054      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
24057028:	687b      	ldr	r3, [r7, #4]
2405702a:	681b      	ldr	r3, [r3, #0]
2405702c:	4a31      	ldr	r2, [pc, #196]	; (240570f4 <HAL_DMA_Abort+0x230>)
2405702e:	4293      	cmp	r3, r2
24057030:	d04f      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
24057032:	687b      	ldr	r3, [r7, #4]
24057034:	681b      	ldr	r3, [r3, #0]
24057036:	4a30      	ldr	r2, [pc, #192]	; (240570f8 <HAL_DMA_Abort+0x234>)
24057038:	4293      	cmp	r3, r2
2405703a:	d04a      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
2405703c:	687b      	ldr	r3, [r7, #4]
2405703e:	681b      	ldr	r3, [r3, #0]
24057040:	4a2e      	ldr	r2, [pc, #184]	; (240570fc <HAL_DMA_Abort+0x238>)
24057042:	4293      	cmp	r3, r2
24057044:	d045      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
24057046:	687b      	ldr	r3, [r7, #4]
24057048:	681b      	ldr	r3, [r3, #0]
2405704a:	4a2d      	ldr	r2, [pc, #180]	; (24057100 <HAL_DMA_Abort+0x23c>)
2405704c:	4293      	cmp	r3, r2
2405704e:	d040      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
24057050:	687b      	ldr	r3, [r7, #4]
24057052:	681b      	ldr	r3, [r3, #0]
24057054:	4a2b      	ldr	r2, [pc, #172]	; (24057104 <HAL_DMA_Abort+0x240>)
24057056:	4293      	cmp	r3, r2
24057058:	d03b      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
2405705a:	687b      	ldr	r3, [r7, #4]
2405705c:	681b      	ldr	r3, [r3, #0]
2405705e:	4a2a      	ldr	r2, [pc, #168]	; (24057108 <HAL_DMA_Abort+0x244>)
24057060:	4293      	cmp	r3, r2
24057062:	d036      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
24057064:	687b      	ldr	r3, [r7, #4]
24057066:	681b      	ldr	r3, [r3, #0]
24057068:	4a28      	ldr	r2, [pc, #160]	; (2405710c <HAL_DMA_Abort+0x248>)
2405706a:	4293      	cmp	r3, r2
2405706c:	d031      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
2405706e:	687b      	ldr	r3, [r7, #4]
24057070:	681b      	ldr	r3, [r3, #0]
24057072:	4a27      	ldr	r2, [pc, #156]	; (24057110 <HAL_DMA_Abort+0x24c>)
24057074:	4293      	cmp	r3, r2
24057076:	d02c      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
24057078:	687b      	ldr	r3, [r7, #4]
2405707a:	681b      	ldr	r3, [r3, #0]
2405707c:	4a25      	ldr	r2, [pc, #148]	; (24057114 <HAL_DMA_Abort+0x250>)
2405707e:	4293      	cmp	r3, r2
24057080:	d027      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
24057082:	687b      	ldr	r3, [r7, #4]
24057084:	681b      	ldr	r3, [r3, #0]
24057086:	4a24      	ldr	r2, [pc, #144]	; (24057118 <HAL_DMA_Abort+0x254>)
24057088:	4293      	cmp	r3, r2
2405708a:	d022      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
2405708c:	687b      	ldr	r3, [r7, #4]
2405708e:	681b      	ldr	r3, [r3, #0]
24057090:	4a22      	ldr	r2, [pc, #136]	; (2405711c <HAL_DMA_Abort+0x258>)
24057092:	4293      	cmp	r3, r2
24057094:	d01d      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
24057096:	687b      	ldr	r3, [r7, #4]
24057098:	681b      	ldr	r3, [r3, #0]
2405709a:	4a21      	ldr	r2, [pc, #132]	; (24057120 <HAL_DMA_Abort+0x25c>)
2405709c:	4293      	cmp	r3, r2
2405709e:	d018      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
240570a0:	687b      	ldr	r3, [r7, #4]
240570a2:	681b      	ldr	r3, [r3, #0]
240570a4:	4a1f      	ldr	r2, [pc, #124]	; (24057124 <HAL_DMA_Abort+0x260>)
240570a6:	4293      	cmp	r3, r2
240570a8:	d013      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
240570aa:	687b      	ldr	r3, [r7, #4]
240570ac:	681b      	ldr	r3, [r3, #0]
240570ae:	4a1e      	ldr	r2, [pc, #120]	; (24057128 <HAL_DMA_Abort+0x264>)
240570b0:	4293      	cmp	r3, r2
240570b2:	d00e      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
240570b4:	687b      	ldr	r3, [r7, #4]
240570b6:	681b      	ldr	r3, [r3, #0]
240570b8:	4a1c      	ldr	r2, [pc, #112]	; (2405712c <HAL_DMA_Abort+0x268>)
240570ba:	4293      	cmp	r3, r2
240570bc:	d009      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
240570be:	687b      	ldr	r3, [r7, #4]
240570c0:	681b      	ldr	r3, [r3, #0]
240570c2:	4a1b      	ldr	r2, [pc, #108]	; (24057130 <HAL_DMA_Abort+0x26c>)
240570c4:	4293      	cmp	r3, r2
240570c6:	d004      	beq.n	240570d2 <HAL_DMA_Abort+0x20e>
240570c8:	687b      	ldr	r3, [r7, #4]
240570ca:	681b      	ldr	r3, [r3, #0]
240570cc:	4a19      	ldr	r2, [pc, #100]	; (24057134 <HAL_DMA_Abort+0x270>)
240570ce:	4293      	cmp	r3, r2
240570d0:	d132      	bne.n	24057138 <HAL_DMA_Abort+0x274>
240570d2:	2301      	movs	r3, #1
240570d4:	e031      	b.n	2405713a <HAL_DMA_Abort+0x276>
240570d6:	bf00      	nop
240570d8:	40020010 	.word	0x40020010
240570dc:	40020028 	.word	0x40020028
240570e0:	40020040 	.word	0x40020040
240570e4:	40020058 	.word	0x40020058
240570e8:	40020070 	.word	0x40020070
240570ec:	40020088 	.word	0x40020088
240570f0:	400200a0 	.word	0x400200a0
240570f4:	400200b8 	.word	0x400200b8
240570f8:	40020410 	.word	0x40020410
240570fc:	40020428 	.word	0x40020428
24057100:	40020440 	.word	0x40020440
24057104:	40020458 	.word	0x40020458
24057108:	40020470 	.word	0x40020470
2405710c:	40020488 	.word	0x40020488
24057110:	400204a0 	.word	0x400204a0
24057114:	400204b8 	.word	0x400204b8
24057118:	58025408 	.word	0x58025408
2405711c:	5802541c 	.word	0x5802541c
24057120:	58025430 	.word	0x58025430
24057124:	58025444 	.word	0x58025444
24057128:	58025458 	.word	0x58025458
2405712c:	5802546c 	.word	0x5802546c
24057130:	58025480 	.word	0x58025480
24057134:	58025494 	.word	0x58025494
24057138:	2300      	movs	r3, #0
2405713a:	2b00      	cmp	r3, #0
2405713c:	d007      	beq.n	2405714e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2405713e:	687b      	ldr	r3, [r7, #4]
24057140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24057142:	681a      	ldr	r2, [r3, #0]
24057144:	687b      	ldr	r3, [r7, #4]
24057146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24057148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2405714c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
2405714e:	687b      	ldr	r3, [r7, #4]
24057150:	681b      	ldr	r3, [r3, #0]
24057152:	4a6d      	ldr	r2, [pc, #436]	; (24057308 <HAL_DMA_Abort+0x444>)
24057154:	4293      	cmp	r3, r2
24057156:	d04a      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
24057158:	687b      	ldr	r3, [r7, #4]
2405715a:	681b      	ldr	r3, [r3, #0]
2405715c:	4a6b      	ldr	r2, [pc, #428]	; (2405730c <HAL_DMA_Abort+0x448>)
2405715e:	4293      	cmp	r3, r2
24057160:	d045      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
24057162:	687b      	ldr	r3, [r7, #4]
24057164:	681b      	ldr	r3, [r3, #0]
24057166:	4a6a      	ldr	r2, [pc, #424]	; (24057310 <HAL_DMA_Abort+0x44c>)
24057168:	4293      	cmp	r3, r2
2405716a:	d040      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
2405716c:	687b      	ldr	r3, [r7, #4]
2405716e:	681b      	ldr	r3, [r3, #0]
24057170:	4a68      	ldr	r2, [pc, #416]	; (24057314 <HAL_DMA_Abort+0x450>)
24057172:	4293      	cmp	r3, r2
24057174:	d03b      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
24057176:	687b      	ldr	r3, [r7, #4]
24057178:	681b      	ldr	r3, [r3, #0]
2405717a:	4a67      	ldr	r2, [pc, #412]	; (24057318 <HAL_DMA_Abort+0x454>)
2405717c:	4293      	cmp	r3, r2
2405717e:	d036      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
24057180:	687b      	ldr	r3, [r7, #4]
24057182:	681b      	ldr	r3, [r3, #0]
24057184:	4a65      	ldr	r2, [pc, #404]	; (2405731c <HAL_DMA_Abort+0x458>)
24057186:	4293      	cmp	r3, r2
24057188:	d031      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
2405718a:	687b      	ldr	r3, [r7, #4]
2405718c:	681b      	ldr	r3, [r3, #0]
2405718e:	4a64      	ldr	r2, [pc, #400]	; (24057320 <HAL_DMA_Abort+0x45c>)
24057190:	4293      	cmp	r3, r2
24057192:	d02c      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
24057194:	687b      	ldr	r3, [r7, #4]
24057196:	681b      	ldr	r3, [r3, #0]
24057198:	4a62      	ldr	r2, [pc, #392]	; (24057324 <HAL_DMA_Abort+0x460>)
2405719a:	4293      	cmp	r3, r2
2405719c:	d027      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
2405719e:	687b      	ldr	r3, [r7, #4]
240571a0:	681b      	ldr	r3, [r3, #0]
240571a2:	4a61      	ldr	r2, [pc, #388]	; (24057328 <HAL_DMA_Abort+0x464>)
240571a4:	4293      	cmp	r3, r2
240571a6:	d022      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
240571a8:	687b      	ldr	r3, [r7, #4]
240571aa:	681b      	ldr	r3, [r3, #0]
240571ac:	4a5f      	ldr	r2, [pc, #380]	; (2405732c <HAL_DMA_Abort+0x468>)
240571ae:	4293      	cmp	r3, r2
240571b0:	d01d      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
240571b2:	687b      	ldr	r3, [r7, #4]
240571b4:	681b      	ldr	r3, [r3, #0]
240571b6:	4a5e      	ldr	r2, [pc, #376]	; (24057330 <HAL_DMA_Abort+0x46c>)
240571b8:	4293      	cmp	r3, r2
240571ba:	d018      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
240571bc:	687b      	ldr	r3, [r7, #4]
240571be:	681b      	ldr	r3, [r3, #0]
240571c0:	4a5c      	ldr	r2, [pc, #368]	; (24057334 <HAL_DMA_Abort+0x470>)
240571c2:	4293      	cmp	r3, r2
240571c4:	d013      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
240571c6:	687b      	ldr	r3, [r7, #4]
240571c8:	681b      	ldr	r3, [r3, #0]
240571ca:	4a5b      	ldr	r2, [pc, #364]	; (24057338 <HAL_DMA_Abort+0x474>)
240571cc:	4293      	cmp	r3, r2
240571ce:	d00e      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
240571d0:	687b      	ldr	r3, [r7, #4]
240571d2:	681b      	ldr	r3, [r3, #0]
240571d4:	4a59      	ldr	r2, [pc, #356]	; (2405733c <HAL_DMA_Abort+0x478>)
240571d6:	4293      	cmp	r3, r2
240571d8:	d009      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
240571da:	687b      	ldr	r3, [r7, #4]
240571dc:	681b      	ldr	r3, [r3, #0]
240571de:	4a58      	ldr	r2, [pc, #352]	; (24057340 <HAL_DMA_Abort+0x47c>)
240571e0:	4293      	cmp	r3, r2
240571e2:	d004      	beq.n	240571ee <HAL_DMA_Abort+0x32a>
240571e4:	687b      	ldr	r3, [r7, #4]
240571e6:	681b      	ldr	r3, [r3, #0]
240571e8:	4a56      	ldr	r2, [pc, #344]	; (24057344 <HAL_DMA_Abort+0x480>)
240571ea:	4293      	cmp	r3, r2
240571ec:	d108      	bne.n	24057200 <HAL_DMA_Abort+0x33c>
240571ee:	687b      	ldr	r3, [r7, #4]
240571f0:	681b      	ldr	r3, [r3, #0]
240571f2:	681a      	ldr	r2, [r3, #0]
240571f4:	687b      	ldr	r3, [r7, #4]
240571f6:	681b      	ldr	r3, [r3, #0]
240571f8:	f022 0201 	bic.w	r2, r2, #1
240571fc:	601a      	str	r2, [r3, #0]
240571fe:	e007      	b.n	24057210 <HAL_DMA_Abort+0x34c>
24057200:	687b      	ldr	r3, [r7, #4]
24057202:	681b      	ldr	r3, [r3, #0]
24057204:	681a      	ldr	r2, [r3, #0]
24057206:	687b      	ldr	r3, [r7, #4]
24057208:	681b      	ldr	r3, [r3, #0]
2405720a:	f022 0201 	bic.w	r2, r2, #1
2405720e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24057210:	e013      	b.n	2405723a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24057212:	f7fc fe17 	bl	24053e44 <HAL_GetTick>
24057216:	4602      	mov	r2, r0
24057218:	693b      	ldr	r3, [r7, #16]
2405721a:	1ad3      	subs	r3, r2, r3
2405721c:	2b05      	cmp	r3, #5
2405721e:	d90c      	bls.n	2405723a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24057220:	687b      	ldr	r3, [r7, #4]
24057222:	2220      	movs	r2, #32
24057224:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24057226:	687b      	ldr	r3, [r7, #4]
24057228:	2203      	movs	r2, #3
2405722a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
2405722e:	687b      	ldr	r3, [r7, #4]
24057230:	2200      	movs	r2, #0
24057232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
24057236:	2301      	movs	r3, #1
24057238:	e12d      	b.n	24057496 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
2405723a:	697b      	ldr	r3, [r7, #20]
2405723c:	681b      	ldr	r3, [r3, #0]
2405723e:	f003 0301 	and.w	r3, r3, #1
24057242:	2b00      	cmp	r3, #0
24057244:	d1e5      	bne.n	24057212 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24057246:	687b      	ldr	r3, [r7, #4]
24057248:	681b      	ldr	r3, [r3, #0]
2405724a:	4a2f      	ldr	r2, [pc, #188]	; (24057308 <HAL_DMA_Abort+0x444>)
2405724c:	4293      	cmp	r3, r2
2405724e:	d04a      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
24057250:	687b      	ldr	r3, [r7, #4]
24057252:	681b      	ldr	r3, [r3, #0]
24057254:	4a2d      	ldr	r2, [pc, #180]	; (2405730c <HAL_DMA_Abort+0x448>)
24057256:	4293      	cmp	r3, r2
24057258:	d045      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
2405725a:	687b      	ldr	r3, [r7, #4]
2405725c:	681b      	ldr	r3, [r3, #0]
2405725e:	4a2c      	ldr	r2, [pc, #176]	; (24057310 <HAL_DMA_Abort+0x44c>)
24057260:	4293      	cmp	r3, r2
24057262:	d040      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
24057264:	687b      	ldr	r3, [r7, #4]
24057266:	681b      	ldr	r3, [r3, #0]
24057268:	4a2a      	ldr	r2, [pc, #168]	; (24057314 <HAL_DMA_Abort+0x450>)
2405726a:	4293      	cmp	r3, r2
2405726c:	d03b      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
2405726e:	687b      	ldr	r3, [r7, #4]
24057270:	681b      	ldr	r3, [r3, #0]
24057272:	4a29      	ldr	r2, [pc, #164]	; (24057318 <HAL_DMA_Abort+0x454>)
24057274:	4293      	cmp	r3, r2
24057276:	d036      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
24057278:	687b      	ldr	r3, [r7, #4]
2405727a:	681b      	ldr	r3, [r3, #0]
2405727c:	4a27      	ldr	r2, [pc, #156]	; (2405731c <HAL_DMA_Abort+0x458>)
2405727e:	4293      	cmp	r3, r2
24057280:	d031      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
24057282:	687b      	ldr	r3, [r7, #4]
24057284:	681b      	ldr	r3, [r3, #0]
24057286:	4a26      	ldr	r2, [pc, #152]	; (24057320 <HAL_DMA_Abort+0x45c>)
24057288:	4293      	cmp	r3, r2
2405728a:	d02c      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
2405728c:	687b      	ldr	r3, [r7, #4]
2405728e:	681b      	ldr	r3, [r3, #0]
24057290:	4a24      	ldr	r2, [pc, #144]	; (24057324 <HAL_DMA_Abort+0x460>)
24057292:	4293      	cmp	r3, r2
24057294:	d027      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
24057296:	687b      	ldr	r3, [r7, #4]
24057298:	681b      	ldr	r3, [r3, #0]
2405729a:	4a23      	ldr	r2, [pc, #140]	; (24057328 <HAL_DMA_Abort+0x464>)
2405729c:	4293      	cmp	r3, r2
2405729e:	d022      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
240572a0:	687b      	ldr	r3, [r7, #4]
240572a2:	681b      	ldr	r3, [r3, #0]
240572a4:	4a21      	ldr	r2, [pc, #132]	; (2405732c <HAL_DMA_Abort+0x468>)
240572a6:	4293      	cmp	r3, r2
240572a8:	d01d      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
240572aa:	687b      	ldr	r3, [r7, #4]
240572ac:	681b      	ldr	r3, [r3, #0]
240572ae:	4a20      	ldr	r2, [pc, #128]	; (24057330 <HAL_DMA_Abort+0x46c>)
240572b0:	4293      	cmp	r3, r2
240572b2:	d018      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
240572b4:	687b      	ldr	r3, [r7, #4]
240572b6:	681b      	ldr	r3, [r3, #0]
240572b8:	4a1e      	ldr	r2, [pc, #120]	; (24057334 <HAL_DMA_Abort+0x470>)
240572ba:	4293      	cmp	r3, r2
240572bc:	d013      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
240572be:	687b      	ldr	r3, [r7, #4]
240572c0:	681b      	ldr	r3, [r3, #0]
240572c2:	4a1d      	ldr	r2, [pc, #116]	; (24057338 <HAL_DMA_Abort+0x474>)
240572c4:	4293      	cmp	r3, r2
240572c6:	d00e      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
240572c8:	687b      	ldr	r3, [r7, #4]
240572ca:	681b      	ldr	r3, [r3, #0]
240572cc:	4a1b      	ldr	r2, [pc, #108]	; (2405733c <HAL_DMA_Abort+0x478>)
240572ce:	4293      	cmp	r3, r2
240572d0:	d009      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
240572d2:	687b      	ldr	r3, [r7, #4]
240572d4:	681b      	ldr	r3, [r3, #0]
240572d6:	4a1a      	ldr	r2, [pc, #104]	; (24057340 <HAL_DMA_Abort+0x47c>)
240572d8:	4293      	cmp	r3, r2
240572da:	d004      	beq.n	240572e6 <HAL_DMA_Abort+0x422>
240572dc:	687b      	ldr	r3, [r7, #4]
240572de:	681b      	ldr	r3, [r3, #0]
240572e0:	4a18      	ldr	r2, [pc, #96]	; (24057344 <HAL_DMA_Abort+0x480>)
240572e2:	4293      	cmp	r3, r2
240572e4:	d101      	bne.n	240572ea <HAL_DMA_Abort+0x426>
240572e6:	2301      	movs	r3, #1
240572e8:	e000      	b.n	240572ec <HAL_DMA_Abort+0x428>
240572ea:	2300      	movs	r3, #0
240572ec:	2b00      	cmp	r3, #0
240572ee:	d02b      	beq.n	24057348 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240572f0:	687b      	ldr	r3, [r7, #4]
240572f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240572f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240572f6:	687b      	ldr	r3, [r7, #4]
240572f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240572fa:	f003 031f 	and.w	r3, r3, #31
240572fe:	223f      	movs	r2, #63	; 0x3f
24057300:	409a      	lsls	r2, r3
24057302:	68bb      	ldr	r3, [r7, #8]
24057304:	609a      	str	r2, [r3, #8]
24057306:	e02a      	b.n	2405735e <HAL_DMA_Abort+0x49a>
24057308:	40020010 	.word	0x40020010
2405730c:	40020028 	.word	0x40020028
24057310:	40020040 	.word	0x40020040
24057314:	40020058 	.word	0x40020058
24057318:	40020070 	.word	0x40020070
2405731c:	40020088 	.word	0x40020088
24057320:	400200a0 	.word	0x400200a0
24057324:	400200b8 	.word	0x400200b8
24057328:	40020410 	.word	0x40020410
2405732c:	40020428 	.word	0x40020428
24057330:	40020440 	.word	0x40020440
24057334:	40020458 	.word	0x40020458
24057338:	40020470 	.word	0x40020470
2405733c:	40020488 	.word	0x40020488
24057340:	400204a0 	.word	0x400204a0
24057344:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24057348:	687b      	ldr	r3, [r7, #4]
2405734a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405734c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2405734e:	687b      	ldr	r3, [r7, #4]
24057350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057352:	f003 031f 	and.w	r3, r3, #31
24057356:	2201      	movs	r2, #1
24057358:	409a      	lsls	r2, r3
2405735a:	68fb      	ldr	r3, [r7, #12]
2405735c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2405735e:	687b      	ldr	r3, [r7, #4]
24057360:	681b      	ldr	r3, [r3, #0]
24057362:	4a4f      	ldr	r2, [pc, #316]	; (240574a0 <HAL_DMA_Abort+0x5dc>)
24057364:	4293      	cmp	r3, r2
24057366:	d072      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
24057368:	687b      	ldr	r3, [r7, #4]
2405736a:	681b      	ldr	r3, [r3, #0]
2405736c:	4a4d      	ldr	r2, [pc, #308]	; (240574a4 <HAL_DMA_Abort+0x5e0>)
2405736e:	4293      	cmp	r3, r2
24057370:	d06d      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
24057372:	687b      	ldr	r3, [r7, #4]
24057374:	681b      	ldr	r3, [r3, #0]
24057376:	4a4c      	ldr	r2, [pc, #304]	; (240574a8 <HAL_DMA_Abort+0x5e4>)
24057378:	4293      	cmp	r3, r2
2405737a:	d068      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
2405737c:	687b      	ldr	r3, [r7, #4]
2405737e:	681b      	ldr	r3, [r3, #0]
24057380:	4a4a      	ldr	r2, [pc, #296]	; (240574ac <HAL_DMA_Abort+0x5e8>)
24057382:	4293      	cmp	r3, r2
24057384:	d063      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
24057386:	687b      	ldr	r3, [r7, #4]
24057388:	681b      	ldr	r3, [r3, #0]
2405738a:	4a49      	ldr	r2, [pc, #292]	; (240574b0 <HAL_DMA_Abort+0x5ec>)
2405738c:	4293      	cmp	r3, r2
2405738e:	d05e      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
24057390:	687b      	ldr	r3, [r7, #4]
24057392:	681b      	ldr	r3, [r3, #0]
24057394:	4a47      	ldr	r2, [pc, #284]	; (240574b4 <HAL_DMA_Abort+0x5f0>)
24057396:	4293      	cmp	r3, r2
24057398:	d059      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
2405739a:	687b      	ldr	r3, [r7, #4]
2405739c:	681b      	ldr	r3, [r3, #0]
2405739e:	4a46      	ldr	r2, [pc, #280]	; (240574b8 <HAL_DMA_Abort+0x5f4>)
240573a0:	4293      	cmp	r3, r2
240573a2:	d054      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
240573a4:	687b      	ldr	r3, [r7, #4]
240573a6:	681b      	ldr	r3, [r3, #0]
240573a8:	4a44      	ldr	r2, [pc, #272]	; (240574bc <HAL_DMA_Abort+0x5f8>)
240573aa:	4293      	cmp	r3, r2
240573ac:	d04f      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
240573ae:	687b      	ldr	r3, [r7, #4]
240573b0:	681b      	ldr	r3, [r3, #0]
240573b2:	4a43      	ldr	r2, [pc, #268]	; (240574c0 <HAL_DMA_Abort+0x5fc>)
240573b4:	4293      	cmp	r3, r2
240573b6:	d04a      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
240573b8:	687b      	ldr	r3, [r7, #4]
240573ba:	681b      	ldr	r3, [r3, #0]
240573bc:	4a41      	ldr	r2, [pc, #260]	; (240574c4 <HAL_DMA_Abort+0x600>)
240573be:	4293      	cmp	r3, r2
240573c0:	d045      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
240573c2:	687b      	ldr	r3, [r7, #4]
240573c4:	681b      	ldr	r3, [r3, #0]
240573c6:	4a40      	ldr	r2, [pc, #256]	; (240574c8 <HAL_DMA_Abort+0x604>)
240573c8:	4293      	cmp	r3, r2
240573ca:	d040      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
240573cc:	687b      	ldr	r3, [r7, #4]
240573ce:	681b      	ldr	r3, [r3, #0]
240573d0:	4a3e      	ldr	r2, [pc, #248]	; (240574cc <HAL_DMA_Abort+0x608>)
240573d2:	4293      	cmp	r3, r2
240573d4:	d03b      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
240573d6:	687b      	ldr	r3, [r7, #4]
240573d8:	681b      	ldr	r3, [r3, #0]
240573da:	4a3d      	ldr	r2, [pc, #244]	; (240574d0 <HAL_DMA_Abort+0x60c>)
240573dc:	4293      	cmp	r3, r2
240573de:	d036      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
240573e0:	687b      	ldr	r3, [r7, #4]
240573e2:	681b      	ldr	r3, [r3, #0]
240573e4:	4a3b      	ldr	r2, [pc, #236]	; (240574d4 <HAL_DMA_Abort+0x610>)
240573e6:	4293      	cmp	r3, r2
240573e8:	d031      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
240573ea:	687b      	ldr	r3, [r7, #4]
240573ec:	681b      	ldr	r3, [r3, #0]
240573ee:	4a3a      	ldr	r2, [pc, #232]	; (240574d8 <HAL_DMA_Abort+0x614>)
240573f0:	4293      	cmp	r3, r2
240573f2:	d02c      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
240573f4:	687b      	ldr	r3, [r7, #4]
240573f6:	681b      	ldr	r3, [r3, #0]
240573f8:	4a38      	ldr	r2, [pc, #224]	; (240574dc <HAL_DMA_Abort+0x618>)
240573fa:	4293      	cmp	r3, r2
240573fc:	d027      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
240573fe:	687b      	ldr	r3, [r7, #4]
24057400:	681b      	ldr	r3, [r3, #0]
24057402:	4a37      	ldr	r2, [pc, #220]	; (240574e0 <HAL_DMA_Abort+0x61c>)
24057404:	4293      	cmp	r3, r2
24057406:	d022      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
24057408:	687b      	ldr	r3, [r7, #4]
2405740a:	681b      	ldr	r3, [r3, #0]
2405740c:	4a35      	ldr	r2, [pc, #212]	; (240574e4 <HAL_DMA_Abort+0x620>)
2405740e:	4293      	cmp	r3, r2
24057410:	d01d      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
24057412:	687b      	ldr	r3, [r7, #4]
24057414:	681b      	ldr	r3, [r3, #0]
24057416:	4a34      	ldr	r2, [pc, #208]	; (240574e8 <HAL_DMA_Abort+0x624>)
24057418:	4293      	cmp	r3, r2
2405741a:	d018      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
2405741c:	687b      	ldr	r3, [r7, #4]
2405741e:	681b      	ldr	r3, [r3, #0]
24057420:	4a32      	ldr	r2, [pc, #200]	; (240574ec <HAL_DMA_Abort+0x628>)
24057422:	4293      	cmp	r3, r2
24057424:	d013      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
24057426:	687b      	ldr	r3, [r7, #4]
24057428:	681b      	ldr	r3, [r3, #0]
2405742a:	4a31      	ldr	r2, [pc, #196]	; (240574f0 <HAL_DMA_Abort+0x62c>)
2405742c:	4293      	cmp	r3, r2
2405742e:	d00e      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
24057430:	687b      	ldr	r3, [r7, #4]
24057432:	681b      	ldr	r3, [r3, #0]
24057434:	4a2f      	ldr	r2, [pc, #188]	; (240574f4 <HAL_DMA_Abort+0x630>)
24057436:	4293      	cmp	r3, r2
24057438:	d009      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
2405743a:	687b      	ldr	r3, [r7, #4]
2405743c:	681b      	ldr	r3, [r3, #0]
2405743e:	4a2e      	ldr	r2, [pc, #184]	; (240574f8 <HAL_DMA_Abort+0x634>)
24057440:	4293      	cmp	r3, r2
24057442:	d004      	beq.n	2405744e <HAL_DMA_Abort+0x58a>
24057444:	687b      	ldr	r3, [r7, #4]
24057446:	681b      	ldr	r3, [r3, #0]
24057448:	4a2c      	ldr	r2, [pc, #176]	; (240574fc <HAL_DMA_Abort+0x638>)
2405744a:	4293      	cmp	r3, r2
2405744c:	d101      	bne.n	24057452 <HAL_DMA_Abort+0x58e>
2405744e:	2301      	movs	r3, #1
24057450:	e000      	b.n	24057454 <HAL_DMA_Abort+0x590>
24057452:	2300      	movs	r3, #0
24057454:	2b00      	cmp	r3, #0
24057456:	d015      	beq.n	24057484 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24057458:	687b      	ldr	r3, [r7, #4]
2405745a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2405745c:	687a      	ldr	r2, [r7, #4]
2405745e:	6e92      	ldr	r2, [r2, #104]	; 0x68
24057460:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
24057462:	687b      	ldr	r3, [r7, #4]
24057464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24057466:	2b00      	cmp	r3, #0
24057468:	d00c      	beq.n	24057484 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
2405746a:	687b      	ldr	r3, [r7, #4]
2405746c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405746e:	681a      	ldr	r2, [r3, #0]
24057470:	687b      	ldr	r3, [r7, #4]
24057472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24057474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24057478:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2405747a:	687b      	ldr	r3, [r7, #4]
2405747c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405747e:	687a      	ldr	r2, [r7, #4]
24057480:	6f52      	ldr	r2, [r2, #116]	; 0x74
24057482:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
24057484:	687b      	ldr	r3, [r7, #4]
24057486:	2201      	movs	r2, #1
24057488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
2405748c:	687b      	ldr	r3, [r7, #4]
2405748e:	2200      	movs	r2, #0
24057490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
24057494:	2300      	movs	r3, #0
}
24057496:	4618      	mov	r0, r3
24057498:	3718      	adds	r7, #24
2405749a:	46bd      	mov	sp, r7
2405749c:	bd80      	pop	{r7, pc}
2405749e:	bf00      	nop
240574a0:	40020010 	.word	0x40020010
240574a4:	40020028 	.word	0x40020028
240574a8:	40020040 	.word	0x40020040
240574ac:	40020058 	.word	0x40020058
240574b0:	40020070 	.word	0x40020070
240574b4:	40020088 	.word	0x40020088
240574b8:	400200a0 	.word	0x400200a0
240574bc:	400200b8 	.word	0x400200b8
240574c0:	40020410 	.word	0x40020410
240574c4:	40020428 	.word	0x40020428
240574c8:	40020440 	.word	0x40020440
240574cc:	40020458 	.word	0x40020458
240574d0:	40020470 	.word	0x40020470
240574d4:	40020488 	.word	0x40020488
240574d8:	400204a0 	.word	0x400204a0
240574dc:	400204b8 	.word	0x400204b8
240574e0:	58025408 	.word	0x58025408
240574e4:	5802541c 	.word	0x5802541c
240574e8:	58025430 	.word	0x58025430
240574ec:	58025444 	.word	0x58025444
240574f0:	58025458 	.word	0x58025458
240574f4:	5802546c 	.word	0x5802546c
240574f8:	58025480 	.word	0x58025480
240574fc:	58025494 	.word	0x58025494

24057500 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
24057500:	b580      	push	{r7, lr}
24057502:	b084      	sub	sp, #16
24057504:	af00      	add	r7, sp, #0
24057506:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24057508:	687b      	ldr	r3, [r7, #4]
2405750a:	2b00      	cmp	r3, #0
2405750c:	d101      	bne.n	24057512 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
2405750e:	2301      	movs	r3, #1
24057510:	e237      	b.n	24057982 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
24057512:	687b      	ldr	r3, [r7, #4]
24057514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24057518:	b2db      	uxtb	r3, r3
2405751a:	2b02      	cmp	r3, #2
2405751c:	d004      	beq.n	24057528 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2405751e:	687b      	ldr	r3, [r7, #4]
24057520:	2280      	movs	r2, #128	; 0x80
24057522:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
24057524:	2301      	movs	r3, #1
24057526:	e22c      	b.n	24057982 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24057528:	687b      	ldr	r3, [r7, #4]
2405752a:	681b      	ldr	r3, [r3, #0]
2405752c:	4a5c      	ldr	r2, [pc, #368]	; (240576a0 <HAL_DMA_Abort_IT+0x1a0>)
2405752e:	4293      	cmp	r3, r2
24057530:	d04a      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
24057532:	687b      	ldr	r3, [r7, #4]
24057534:	681b      	ldr	r3, [r3, #0]
24057536:	4a5b      	ldr	r2, [pc, #364]	; (240576a4 <HAL_DMA_Abort_IT+0x1a4>)
24057538:	4293      	cmp	r3, r2
2405753a:	d045      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
2405753c:	687b      	ldr	r3, [r7, #4]
2405753e:	681b      	ldr	r3, [r3, #0]
24057540:	4a59      	ldr	r2, [pc, #356]	; (240576a8 <HAL_DMA_Abort_IT+0x1a8>)
24057542:	4293      	cmp	r3, r2
24057544:	d040      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
24057546:	687b      	ldr	r3, [r7, #4]
24057548:	681b      	ldr	r3, [r3, #0]
2405754a:	4a58      	ldr	r2, [pc, #352]	; (240576ac <HAL_DMA_Abort_IT+0x1ac>)
2405754c:	4293      	cmp	r3, r2
2405754e:	d03b      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
24057550:	687b      	ldr	r3, [r7, #4]
24057552:	681b      	ldr	r3, [r3, #0]
24057554:	4a56      	ldr	r2, [pc, #344]	; (240576b0 <HAL_DMA_Abort_IT+0x1b0>)
24057556:	4293      	cmp	r3, r2
24057558:	d036      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
2405755a:	687b      	ldr	r3, [r7, #4]
2405755c:	681b      	ldr	r3, [r3, #0]
2405755e:	4a55      	ldr	r2, [pc, #340]	; (240576b4 <HAL_DMA_Abort_IT+0x1b4>)
24057560:	4293      	cmp	r3, r2
24057562:	d031      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
24057564:	687b      	ldr	r3, [r7, #4]
24057566:	681b      	ldr	r3, [r3, #0]
24057568:	4a53      	ldr	r2, [pc, #332]	; (240576b8 <HAL_DMA_Abort_IT+0x1b8>)
2405756a:	4293      	cmp	r3, r2
2405756c:	d02c      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
2405756e:	687b      	ldr	r3, [r7, #4]
24057570:	681b      	ldr	r3, [r3, #0]
24057572:	4a52      	ldr	r2, [pc, #328]	; (240576bc <HAL_DMA_Abort_IT+0x1bc>)
24057574:	4293      	cmp	r3, r2
24057576:	d027      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
24057578:	687b      	ldr	r3, [r7, #4]
2405757a:	681b      	ldr	r3, [r3, #0]
2405757c:	4a50      	ldr	r2, [pc, #320]	; (240576c0 <HAL_DMA_Abort_IT+0x1c0>)
2405757e:	4293      	cmp	r3, r2
24057580:	d022      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
24057582:	687b      	ldr	r3, [r7, #4]
24057584:	681b      	ldr	r3, [r3, #0]
24057586:	4a4f      	ldr	r2, [pc, #316]	; (240576c4 <HAL_DMA_Abort_IT+0x1c4>)
24057588:	4293      	cmp	r3, r2
2405758a:	d01d      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
2405758c:	687b      	ldr	r3, [r7, #4]
2405758e:	681b      	ldr	r3, [r3, #0]
24057590:	4a4d      	ldr	r2, [pc, #308]	; (240576c8 <HAL_DMA_Abort_IT+0x1c8>)
24057592:	4293      	cmp	r3, r2
24057594:	d018      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
24057596:	687b      	ldr	r3, [r7, #4]
24057598:	681b      	ldr	r3, [r3, #0]
2405759a:	4a4c      	ldr	r2, [pc, #304]	; (240576cc <HAL_DMA_Abort_IT+0x1cc>)
2405759c:	4293      	cmp	r3, r2
2405759e:	d013      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
240575a0:	687b      	ldr	r3, [r7, #4]
240575a2:	681b      	ldr	r3, [r3, #0]
240575a4:	4a4a      	ldr	r2, [pc, #296]	; (240576d0 <HAL_DMA_Abort_IT+0x1d0>)
240575a6:	4293      	cmp	r3, r2
240575a8:	d00e      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
240575aa:	687b      	ldr	r3, [r7, #4]
240575ac:	681b      	ldr	r3, [r3, #0]
240575ae:	4a49      	ldr	r2, [pc, #292]	; (240576d4 <HAL_DMA_Abort_IT+0x1d4>)
240575b0:	4293      	cmp	r3, r2
240575b2:	d009      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
240575b4:	687b      	ldr	r3, [r7, #4]
240575b6:	681b      	ldr	r3, [r3, #0]
240575b8:	4a47      	ldr	r2, [pc, #284]	; (240576d8 <HAL_DMA_Abort_IT+0x1d8>)
240575ba:	4293      	cmp	r3, r2
240575bc:	d004      	beq.n	240575c8 <HAL_DMA_Abort_IT+0xc8>
240575be:	687b      	ldr	r3, [r7, #4]
240575c0:	681b      	ldr	r3, [r3, #0]
240575c2:	4a46      	ldr	r2, [pc, #280]	; (240576dc <HAL_DMA_Abort_IT+0x1dc>)
240575c4:	4293      	cmp	r3, r2
240575c6:	d101      	bne.n	240575cc <HAL_DMA_Abort_IT+0xcc>
240575c8:	2301      	movs	r3, #1
240575ca:	e000      	b.n	240575ce <HAL_DMA_Abort_IT+0xce>
240575cc:	2300      	movs	r3, #0
240575ce:	2b00      	cmp	r3, #0
240575d0:	f000 8086 	beq.w	240576e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
240575d4:	687b      	ldr	r3, [r7, #4]
240575d6:	2204      	movs	r2, #4
240575d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
240575dc:	687b      	ldr	r3, [r7, #4]
240575de:	681b      	ldr	r3, [r3, #0]
240575e0:	4a2f      	ldr	r2, [pc, #188]	; (240576a0 <HAL_DMA_Abort_IT+0x1a0>)
240575e2:	4293      	cmp	r3, r2
240575e4:	d04a      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
240575e6:	687b      	ldr	r3, [r7, #4]
240575e8:	681b      	ldr	r3, [r3, #0]
240575ea:	4a2e      	ldr	r2, [pc, #184]	; (240576a4 <HAL_DMA_Abort_IT+0x1a4>)
240575ec:	4293      	cmp	r3, r2
240575ee:	d045      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
240575f0:	687b      	ldr	r3, [r7, #4]
240575f2:	681b      	ldr	r3, [r3, #0]
240575f4:	4a2c      	ldr	r2, [pc, #176]	; (240576a8 <HAL_DMA_Abort_IT+0x1a8>)
240575f6:	4293      	cmp	r3, r2
240575f8:	d040      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
240575fa:	687b      	ldr	r3, [r7, #4]
240575fc:	681b      	ldr	r3, [r3, #0]
240575fe:	4a2b      	ldr	r2, [pc, #172]	; (240576ac <HAL_DMA_Abort_IT+0x1ac>)
24057600:	4293      	cmp	r3, r2
24057602:	d03b      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
24057604:	687b      	ldr	r3, [r7, #4]
24057606:	681b      	ldr	r3, [r3, #0]
24057608:	4a29      	ldr	r2, [pc, #164]	; (240576b0 <HAL_DMA_Abort_IT+0x1b0>)
2405760a:	4293      	cmp	r3, r2
2405760c:	d036      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
2405760e:	687b      	ldr	r3, [r7, #4]
24057610:	681b      	ldr	r3, [r3, #0]
24057612:	4a28      	ldr	r2, [pc, #160]	; (240576b4 <HAL_DMA_Abort_IT+0x1b4>)
24057614:	4293      	cmp	r3, r2
24057616:	d031      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
24057618:	687b      	ldr	r3, [r7, #4]
2405761a:	681b      	ldr	r3, [r3, #0]
2405761c:	4a26      	ldr	r2, [pc, #152]	; (240576b8 <HAL_DMA_Abort_IT+0x1b8>)
2405761e:	4293      	cmp	r3, r2
24057620:	d02c      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
24057622:	687b      	ldr	r3, [r7, #4]
24057624:	681b      	ldr	r3, [r3, #0]
24057626:	4a25      	ldr	r2, [pc, #148]	; (240576bc <HAL_DMA_Abort_IT+0x1bc>)
24057628:	4293      	cmp	r3, r2
2405762a:	d027      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
2405762c:	687b      	ldr	r3, [r7, #4]
2405762e:	681b      	ldr	r3, [r3, #0]
24057630:	4a23      	ldr	r2, [pc, #140]	; (240576c0 <HAL_DMA_Abort_IT+0x1c0>)
24057632:	4293      	cmp	r3, r2
24057634:	d022      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
24057636:	687b      	ldr	r3, [r7, #4]
24057638:	681b      	ldr	r3, [r3, #0]
2405763a:	4a22      	ldr	r2, [pc, #136]	; (240576c4 <HAL_DMA_Abort_IT+0x1c4>)
2405763c:	4293      	cmp	r3, r2
2405763e:	d01d      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
24057640:	687b      	ldr	r3, [r7, #4]
24057642:	681b      	ldr	r3, [r3, #0]
24057644:	4a20      	ldr	r2, [pc, #128]	; (240576c8 <HAL_DMA_Abort_IT+0x1c8>)
24057646:	4293      	cmp	r3, r2
24057648:	d018      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
2405764a:	687b      	ldr	r3, [r7, #4]
2405764c:	681b      	ldr	r3, [r3, #0]
2405764e:	4a1f      	ldr	r2, [pc, #124]	; (240576cc <HAL_DMA_Abort_IT+0x1cc>)
24057650:	4293      	cmp	r3, r2
24057652:	d013      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
24057654:	687b      	ldr	r3, [r7, #4]
24057656:	681b      	ldr	r3, [r3, #0]
24057658:	4a1d      	ldr	r2, [pc, #116]	; (240576d0 <HAL_DMA_Abort_IT+0x1d0>)
2405765a:	4293      	cmp	r3, r2
2405765c:	d00e      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
2405765e:	687b      	ldr	r3, [r7, #4]
24057660:	681b      	ldr	r3, [r3, #0]
24057662:	4a1c      	ldr	r2, [pc, #112]	; (240576d4 <HAL_DMA_Abort_IT+0x1d4>)
24057664:	4293      	cmp	r3, r2
24057666:	d009      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
24057668:	687b      	ldr	r3, [r7, #4]
2405766a:	681b      	ldr	r3, [r3, #0]
2405766c:	4a1a      	ldr	r2, [pc, #104]	; (240576d8 <HAL_DMA_Abort_IT+0x1d8>)
2405766e:	4293      	cmp	r3, r2
24057670:	d004      	beq.n	2405767c <HAL_DMA_Abort_IT+0x17c>
24057672:	687b      	ldr	r3, [r7, #4]
24057674:	681b      	ldr	r3, [r3, #0]
24057676:	4a19      	ldr	r2, [pc, #100]	; (240576dc <HAL_DMA_Abort_IT+0x1dc>)
24057678:	4293      	cmp	r3, r2
2405767a:	d108      	bne.n	2405768e <HAL_DMA_Abort_IT+0x18e>
2405767c:	687b      	ldr	r3, [r7, #4]
2405767e:	681b      	ldr	r3, [r3, #0]
24057680:	681a      	ldr	r2, [r3, #0]
24057682:	687b      	ldr	r3, [r7, #4]
24057684:	681b      	ldr	r3, [r3, #0]
24057686:	f022 0201 	bic.w	r2, r2, #1
2405768a:	601a      	str	r2, [r3, #0]
2405768c:	e178      	b.n	24057980 <HAL_DMA_Abort_IT+0x480>
2405768e:	687b      	ldr	r3, [r7, #4]
24057690:	681b      	ldr	r3, [r3, #0]
24057692:	681a      	ldr	r2, [r3, #0]
24057694:	687b      	ldr	r3, [r7, #4]
24057696:	681b      	ldr	r3, [r3, #0]
24057698:	f022 0201 	bic.w	r2, r2, #1
2405769c:	601a      	str	r2, [r3, #0]
2405769e:	e16f      	b.n	24057980 <HAL_DMA_Abort_IT+0x480>
240576a0:	40020010 	.word	0x40020010
240576a4:	40020028 	.word	0x40020028
240576a8:	40020040 	.word	0x40020040
240576ac:	40020058 	.word	0x40020058
240576b0:	40020070 	.word	0x40020070
240576b4:	40020088 	.word	0x40020088
240576b8:	400200a0 	.word	0x400200a0
240576bc:	400200b8 	.word	0x400200b8
240576c0:	40020410 	.word	0x40020410
240576c4:	40020428 	.word	0x40020428
240576c8:	40020440 	.word	0x40020440
240576cc:	40020458 	.word	0x40020458
240576d0:	40020470 	.word	0x40020470
240576d4:	40020488 	.word	0x40020488
240576d8:	400204a0 	.word	0x400204a0
240576dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240576e0:	687b      	ldr	r3, [r7, #4]
240576e2:	681b      	ldr	r3, [r3, #0]
240576e4:	681a      	ldr	r2, [r3, #0]
240576e6:	687b      	ldr	r3, [r7, #4]
240576e8:	681b      	ldr	r3, [r3, #0]
240576ea:	f022 020e 	bic.w	r2, r2, #14
240576ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
240576f0:	687b      	ldr	r3, [r7, #4]
240576f2:	681b      	ldr	r3, [r3, #0]
240576f4:	4a6c      	ldr	r2, [pc, #432]	; (240578a8 <HAL_DMA_Abort_IT+0x3a8>)
240576f6:	4293      	cmp	r3, r2
240576f8:	d04a      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
240576fa:	687b      	ldr	r3, [r7, #4]
240576fc:	681b      	ldr	r3, [r3, #0]
240576fe:	4a6b      	ldr	r2, [pc, #428]	; (240578ac <HAL_DMA_Abort_IT+0x3ac>)
24057700:	4293      	cmp	r3, r2
24057702:	d045      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
24057704:	687b      	ldr	r3, [r7, #4]
24057706:	681b      	ldr	r3, [r3, #0]
24057708:	4a69      	ldr	r2, [pc, #420]	; (240578b0 <HAL_DMA_Abort_IT+0x3b0>)
2405770a:	4293      	cmp	r3, r2
2405770c:	d040      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
2405770e:	687b      	ldr	r3, [r7, #4]
24057710:	681b      	ldr	r3, [r3, #0]
24057712:	4a68      	ldr	r2, [pc, #416]	; (240578b4 <HAL_DMA_Abort_IT+0x3b4>)
24057714:	4293      	cmp	r3, r2
24057716:	d03b      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
24057718:	687b      	ldr	r3, [r7, #4]
2405771a:	681b      	ldr	r3, [r3, #0]
2405771c:	4a66      	ldr	r2, [pc, #408]	; (240578b8 <HAL_DMA_Abort_IT+0x3b8>)
2405771e:	4293      	cmp	r3, r2
24057720:	d036      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
24057722:	687b      	ldr	r3, [r7, #4]
24057724:	681b      	ldr	r3, [r3, #0]
24057726:	4a65      	ldr	r2, [pc, #404]	; (240578bc <HAL_DMA_Abort_IT+0x3bc>)
24057728:	4293      	cmp	r3, r2
2405772a:	d031      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
2405772c:	687b      	ldr	r3, [r7, #4]
2405772e:	681b      	ldr	r3, [r3, #0]
24057730:	4a63      	ldr	r2, [pc, #396]	; (240578c0 <HAL_DMA_Abort_IT+0x3c0>)
24057732:	4293      	cmp	r3, r2
24057734:	d02c      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
24057736:	687b      	ldr	r3, [r7, #4]
24057738:	681b      	ldr	r3, [r3, #0]
2405773a:	4a62      	ldr	r2, [pc, #392]	; (240578c4 <HAL_DMA_Abort_IT+0x3c4>)
2405773c:	4293      	cmp	r3, r2
2405773e:	d027      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
24057740:	687b      	ldr	r3, [r7, #4]
24057742:	681b      	ldr	r3, [r3, #0]
24057744:	4a60      	ldr	r2, [pc, #384]	; (240578c8 <HAL_DMA_Abort_IT+0x3c8>)
24057746:	4293      	cmp	r3, r2
24057748:	d022      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
2405774a:	687b      	ldr	r3, [r7, #4]
2405774c:	681b      	ldr	r3, [r3, #0]
2405774e:	4a5f      	ldr	r2, [pc, #380]	; (240578cc <HAL_DMA_Abort_IT+0x3cc>)
24057750:	4293      	cmp	r3, r2
24057752:	d01d      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
24057754:	687b      	ldr	r3, [r7, #4]
24057756:	681b      	ldr	r3, [r3, #0]
24057758:	4a5d      	ldr	r2, [pc, #372]	; (240578d0 <HAL_DMA_Abort_IT+0x3d0>)
2405775a:	4293      	cmp	r3, r2
2405775c:	d018      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
2405775e:	687b      	ldr	r3, [r7, #4]
24057760:	681b      	ldr	r3, [r3, #0]
24057762:	4a5c      	ldr	r2, [pc, #368]	; (240578d4 <HAL_DMA_Abort_IT+0x3d4>)
24057764:	4293      	cmp	r3, r2
24057766:	d013      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
24057768:	687b      	ldr	r3, [r7, #4]
2405776a:	681b      	ldr	r3, [r3, #0]
2405776c:	4a5a      	ldr	r2, [pc, #360]	; (240578d8 <HAL_DMA_Abort_IT+0x3d8>)
2405776e:	4293      	cmp	r3, r2
24057770:	d00e      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
24057772:	687b      	ldr	r3, [r7, #4]
24057774:	681b      	ldr	r3, [r3, #0]
24057776:	4a59      	ldr	r2, [pc, #356]	; (240578dc <HAL_DMA_Abort_IT+0x3dc>)
24057778:	4293      	cmp	r3, r2
2405777a:	d009      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
2405777c:	687b      	ldr	r3, [r7, #4]
2405777e:	681b      	ldr	r3, [r3, #0]
24057780:	4a57      	ldr	r2, [pc, #348]	; (240578e0 <HAL_DMA_Abort_IT+0x3e0>)
24057782:	4293      	cmp	r3, r2
24057784:	d004      	beq.n	24057790 <HAL_DMA_Abort_IT+0x290>
24057786:	687b      	ldr	r3, [r7, #4]
24057788:	681b      	ldr	r3, [r3, #0]
2405778a:	4a56      	ldr	r2, [pc, #344]	; (240578e4 <HAL_DMA_Abort_IT+0x3e4>)
2405778c:	4293      	cmp	r3, r2
2405778e:	d108      	bne.n	240577a2 <HAL_DMA_Abort_IT+0x2a2>
24057790:	687b      	ldr	r3, [r7, #4]
24057792:	681b      	ldr	r3, [r3, #0]
24057794:	681a      	ldr	r2, [r3, #0]
24057796:	687b      	ldr	r3, [r7, #4]
24057798:	681b      	ldr	r3, [r3, #0]
2405779a:	f022 0201 	bic.w	r2, r2, #1
2405779e:	601a      	str	r2, [r3, #0]
240577a0:	e007      	b.n	240577b2 <HAL_DMA_Abort_IT+0x2b2>
240577a2:	687b      	ldr	r3, [r7, #4]
240577a4:	681b      	ldr	r3, [r3, #0]
240577a6:	681a      	ldr	r2, [r3, #0]
240577a8:	687b      	ldr	r3, [r7, #4]
240577aa:	681b      	ldr	r3, [r3, #0]
240577ac:	f022 0201 	bic.w	r2, r2, #1
240577b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240577b2:	687b      	ldr	r3, [r7, #4]
240577b4:	681b      	ldr	r3, [r3, #0]
240577b6:	4a3c      	ldr	r2, [pc, #240]	; (240578a8 <HAL_DMA_Abort_IT+0x3a8>)
240577b8:	4293      	cmp	r3, r2
240577ba:	d072      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
240577bc:	687b      	ldr	r3, [r7, #4]
240577be:	681b      	ldr	r3, [r3, #0]
240577c0:	4a3a      	ldr	r2, [pc, #232]	; (240578ac <HAL_DMA_Abort_IT+0x3ac>)
240577c2:	4293      	cmp	r3, r2
240577c4:	d06d      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
240577c6:	687b      	ldr	r3, [r7, #4]
240577c8:	681b      	ldr	r3, [r3, #0]
240577ca:	4a39      	ldr	r2, [pc, #228]	; (240578b0 <HAL_DMA_Abort_IT+0x3b0>)
240577cc:	4293      	cmp	r3, r2
240577ce:	d068      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
240577d0:	687b      	ldr	r3, [r7, #4]
240577d2:	681b      	ldr	r3, [r3, #0]
240577d4:	4a37      	ldr	r2, [pc, #220]	; (240578b4 <HAL_DMA_Abort_IT+0x3b4>)
240577d6:	4293      	cmp	r3, r2
240577d8:	d063      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
240577da:	687b      	ldr	r3, [r7, #4]
240577dc:	681b      	ldr	r3, [r3, #0]
240577de:	4a36      	ldr	r2, [pc, #216]	; (240578b8 <HAL_DMA_Abort_IT+0x3b8>)
240577e0:	4293      	cmp	r3, r2
240577e2:	d05e      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
240577e4:	687b      	ldr	r3, [r7, #4]
240577e6:	681b      	ldr	r3, [r3, #0]
240577e8:	4a34      	ldr	r2, [pc, #208]	; (240578bc <HAL_DMA_Abort_IT+0x3bc>)
240577ea:	4293      	cmp	r3, r2
240577ec:	d059      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
240577ee:	687b      	ldr	r3, [r7, #4]
240577f0:	681b      	ldr	r3, [r3, #0]
240577f2:	4a33      	ldr	r2, [pc, #204]	; (240578c0 <HAL_DMA_Abort_IT+0x3c0>)
240577f4:	4293      	cmp	r3, r2
240577f6:	d054      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
240577f8:	687b      	ldr	r3, [r7, #4]
240577fa:	681b      	ldr	r3, [r3, #0]
240577fc:	4a31      	ldr	r2, [pc, #196]	; (240578c4 <HAL_DMA_Abort_IT+0x3c4>)
240577fe:	4293      	cmp	r3, r2
24057800:	d04f      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
24057802:	687b      	ldr	r3, [r7, #4]
24057804:	681b      	ldr	r3, [r3, #0]
24057806:	4a30      	ldr	r2, [pc, #192]	; (240578c8 <HAL_DMA_Abort_IT+0x3c8>)
24057808:	4293      	cmp	r3, r2
2405780a:	d04a      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
2405780c:	687b      	ldr	r3, [r7, #4]
2405780e:	681b      	ldr	r3, [r3, #0]
24057810:	4a2e      	ldr	r2, [pc, #184]	; (240578cc <HAL_DMA_Abort_IT+0x3cc>)
24057812:	4293      	cmp	r3, r2
24057814:	d045      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
24057816:	687b      	ldr	r3, [r7, #4]
24057818:	681b      	ldr	r3, [r3, #0]
2405781a:	4a2d      	ldr	r2, [pc, #180]	; (240578d0 <HAL_DMA_Abort_IT+0x3d0>)
2405781c:	4293      	cmp	r3, r2
2405781e:	d040      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
24057820:	687b      	ldr	r3, [r7, #4]
24057822:	681b      	ldr	r3, [r3, #0]
24057824:	4a2b      	ldr	r2, [pc, #172]	; (240578d4 <HAL_DMA_Abort_IT+0x3d4>)
24057826:	4293      	cmp	r3, r2
24057828:	d03b      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
2405782a:	687b      	ldr	r3, [r7, #4]
2405782c:	681b      	ldr	r3, [r3, #0]
2405782e:	4a2a      	ldr	r2, [pc, #168]	; (240578d8 <HAL_DMA_Abort_IT+0x3d8>)
24057830:	4293      	cmp	r3, r2
24057832:	d036      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
24057834:	687b      	ldr	r3, [r7, #4]
24057836:	681b      	ldr	r3, [r3, #0]
24057838:	4a28      	ldr	r2, [pc, #160]	; (240578dc <HAL_DMA_Abort_IT+0x3dc>)
2405783a:	4293      	cmp	r3, r2
2405783c:	d031      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
2405783e:	687b      	ldr	r3, [r7, #4]
24057840:	681b      	ldr	r3, [r3, #0]
24057842:	4a27      	ldr	r2, [pc, #156]	; (240578e0 <HAL_DMA_Abort_IT+0x3e0>)
24057844:	4293      	cmp	r3, r2
24057846:	d02c      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
24057848:	687b      	ldr	r3, [r7, #4]
2405784a:	681b      	ldr	r3, [r3, #0]
2405784c:	4a25      	ldr	r2, [pc, #148]	; (240578e4 <HAL_DMA_Abort_IT+0x3e4>)
2405784e:	4293      	cmp	r3, r2
24057850:	d027      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
24057852:	687b      	ldr	r3, [r7, #4]
24057854:	681b      	ldr	r3, [r3, #0]
24057856:	4a24      	ldr	r2, [pc, #144]	; (240578e8 <HAL_DMA_Abort_IT+0x3e8>)
24057858:	4293      	cmp	r3, r2
2405785a:	d022      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
2405785c:	687b      	ldr	r3, [r7, #4]
2405785e:	681b      	ldr	r3, [r3, #0]
24057860:	4a22      	ldr	r2, [pc, #136]	; (240578ec <HAL_DMA_Abort_IT+0x3ec>)
24057862:	4293      	cmp	r3, r2
24057864:	d01d      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
24057866:	687b      	ldr	r3, [r7, #4]
24057868:	681b      	ldr	r3, [r3, #0]
2405786a:	4a21      	ldr	r2, [pc, #132]	; (240578f0 <HAL_DMA_Abort_IT+0x3f0>)
2405786c:	4293      	cmp	r3, r2
2405786e:	d018      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
24057870:	687b      	ldr	r3, [r7, #4]
24057872:	681b      	ldr	r3, [r3, #0]
24057874:	4a1f      	ldr	r2, [pc, #124]	; (240578f4 <HAL_DMA_Abort_IT+0x3f4>)
24057876:	4293      	cmp	r3, r2
24057878:	d013      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
2405787a:	687b      	ldr	r3, [r7, #4]
2405787c:	681b      	ldr	r3, [r3, #0]
2405787e:	4a1e      	ldr	r2, [pc, #120]	; (240578f8 <HAL_DMA_Abort_IT+0x3f8>)
24057880:	4293      	cmp	r3, r2
24057882:	d00e      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
24057884:	687b      	ldr	r3, [r7, #4]
24057886:	681b      	ldr	r3, [r3, #0]
24057888:	4a1c      	ldr	r2, [pc, #112]	; (240578fc <HAL_DMA_Abort_IT+0x3fc>)
2405788a:	4293      	cmp	r3, r2
2405788c:	d009      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
2405788e:	687b      	ldr	r3, [r7, #4]
24057890:	681b      	ldr	r3, [r3, #0]
24057892:	4a1b      	ldr	r2, [pc, #108]	; (24057900 <HAL_DMA_Abort_IT+0x400>)
24057894:	4293      	cmp	r3, r2
24057896:	d004      	beq.n	240578a2 <HAL_DMA_Abort_IT+0x3a2>
24057898:	687b      	ldr	r3, [r7, #4]
2405789a:	681b      	ldr	r3, [r3, #0]
2405789c:	4a19      	ldr	r2, [pc, #100]	; (24057904 <HAL_DMA_Abort_IT+0x404>)
2405789e:	4293      	cmp	r3, r2
240578a0:	d132      	bne.n	24057908 <HAL_DMA_Abort_IT+0x408>
240578a2:	2301      	movs	r3, #1
240578a4:	e031      	b.n	2405790a <HAL_DMA_Abort_IT+0x40a>
240578a6:	bf00      	nop
240578a8:	40020010 	.word	0x40020010
240578ac:	40020028 	.word	0x40020028
240578b0:	40020040 	.word	0x40020040
240578b4:	40020058 	.word	0x40020058
240578b8:	40020070 	.word	0x40020070
240578bc:	40020088 	.word	0x40020088
240578c0:	400200a0 	.word	0x400200a0
240578c4:	400200b8 	.word	0x400200b8
240578c8:	40020410 	.word	0x40020410
240578cc:	40020428 	.word	0x40020428
240578d0:	40020440 	.word	0x40020440
240578d4:	40020458 	.word	0x40020458
240578d8:	40020470 	.word	0x40020470
240578dc:	40020488 	.word	0x40020488
240578e0:	400204a0 	.word	0x400204a0
240578e4:	400204b8 	.word	0x400204b8
240578e8:	58025408 	.word	0x58025408
240578ec:	5802541c 	.word	0x5802541c
240578f0:	58025430 	.word	0x58025430
240578f4:	58025444 	.word	0x58025444
240578f8:	58025458 	.word	0x58025458
240578fc:	5802546c 	.word	0x5802546c
24057900:	58025480 	.word	0x58025480
24057904:	58025494 	.word	0x58025494
24057908:	2300      	movs	r3, #0
2405790a:	2b00      	cmp	r3, #0
2405790c:	d028      	beq.n	24057960 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2405790e:	687b      	ldr	r3, [r7, #4]
24057910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24057912:	681a      	ldr	r2, [r3, #0]
24057914:	687b      	ldr	r3, [r7, #4]
24057916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24057918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2405791c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
2405791e:	687b      	ldr	r3, [r7, #4]
24057920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24057922:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24057924:	687b      	ldr	r3, [r7, #4]
24057926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057928:	f003 031f 	and.w	r3, r3, #31
2405792c:	2201      	movs	r2, #1
2405792e:	409a      	lsls	r2, r3
24057930:	68fb      	ldr	r3, [r7, #12]
24057932:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24057934:	687b      	ldr	r3, [r7, #4]
24057936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24057938:	687a      	ldr	r2, [r7, #4]
2405793a:	6e92      	ldr	r2, [r2, #104]	; 0x68
2405793c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
2405793e:	687b      	ldr	r3, [r7, #4]
24057940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24057942:	2b00      	cmp	r3, #0
24057944:	d00c      	beq.n	24057960 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24057946:	687b      	ldr	r3, [r7, #4]
24057948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405794a:	681a      	ldr	r2, [r3, #0]
2405794c:	687b      	ldr	r3, [r7, #4]
2405794e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24057950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24057954:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24057956:	687b      	ldr	r3, [r7, #4]
24057958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405795a:	687a      	ldr	r2, [r7, #4]
2405795c:	6f52      	ldr	r2, [r2, #116]	; 0x74
2405795e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24057960:	687b      	ldr	r3, [r7, #4]
24057962:	2201      	movs	r2, #1
24057964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
24057968:	687b      	ldr	r3, [r7, #4]
2405796a:	2200      	movs	r2, #0
2405796c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
24057970:	687b      	ldr	r3, [r7, #4]
24057972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24057974:	2b00      	cmp	r3, #0
24057976:	d003      	beq.n	24057980 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
24057978:	687b      	ldr	r3, [r7, #4]
2405797a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405797c:	6878      	ldr	r0, [r7, #4]
2405797e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
24057980:	2300      	movs	r3, #0
}
24057982:	4618      	mov	r0, r3
24057984:	3710      	adds	r7, #16
24057986:	46bd      	mov	sp, r7
24057988:	bd80      	pop	{r7, pc}
2405798a:	bf00      	nop

2405798c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
2405798c:	b580      	push	{r7, lr}
2405798e:	b08a      	sub	sp, #40	; 0x28
24057990:	af00      	add	r7, sp, #0
24057992:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
24057994:	2300      	movs	r3, #0
24057996:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
24057998:	4b67      	ldr	r3, [pc, #412]	; (24057b38 <HAL_DMA_IRQHandler+0x1ac>)
2405799a:	681b      	ldr	r3, [r3, #0]
2405799c:	4a67      	ldr	r2, [pc, #412]	; (24057b3c <HAL_DMA_IRQHandler+0x1b0>)
2405799e:	fba2 2303 	umull	r2, r3, r2, r3
240579a2:	0a9b      	lsrs	r3, r3, #10
240579a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240579a6:	687b      	ldr	r3, [r7, #4]
240579a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240579aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240579ac:	687b      	ldr	r3, [r7, #4]
240579ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240579b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
240579b2:	6a3b      	ldr	r3, [r7, #32]
240579b4:	681b      	ldr	r3, [r3, #0]
240579b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
240579b8:	69fb      	ldr	r3, [r7, #28]
240579ba:	681b      	ldr	r3, [r3, #0]
240579bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
240579be:	687b      	ldr	r3, [r7, #4]
240579c0:	681b      	ldr	r3, [r3, #0]
240579c2:	4a5f      	ldr	r2, [pc, #380]	; (24057b40 <HAL_DMA_IRQHandler+0x1b4>)
240579c4:	4293      	cmp	r3, r2
240579c6:	d04a      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
240579c8:	687b      	ldr	r3, [r7, #4]
240579ca:	681b      	ldr	r3, [r3, #0]
240579cc:	4a5d      	ldr	r2, [pc, #372]	; (24057b44 <HAL_DMA_IRQHandler+0x1b8>)
240579ce:	4293      	cmp	r3, r2
240579d0:	d045      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
240579d2:	687b      	ldr	r3, [r7, #4]
240579d4:	681b      	ldr	r3, [r3, #0]
240579d6:	4a5c      	ldr	r2, [pc, #368]	; (24057b48 <HAL_DMA_IRQHandler+0x1bc>)
240579d8:	4293      	cmp	r3, r2
240579da:	d040      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
240579dc:	687b      	ldr	r3, [r7, #4]
240579de:	681b      	ldr	r3, [r3, #0]
240579e0:	4a5a      	ldr	r2, [pc, #360]	; (24057b4c <HAL_DMA_IRQHandler+0x1c0>)
240579e2:	4293      	cmp	r3, r2
240579e4:	d03b      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
240579e6:	687b      	ldr	r3, [r7, #4]
240579e8:	681b      	ldr	r3, [r3, #0]
240579ea:	4a59      	ldr	r2, [pc, #356]	; (24057b50 <HAL_DMA_IRQHandler+0x1c4>)
240579ec:	4293      	cmp	r3, r2
240579ee:	d036      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
240579f0:	687b      	ldr	r3, [r7, #4]
240579f2:	681b      	ldr	r3, [r3, #0]
240579f4:	4a57      	ldr	r2, [pc, #348]	; (24057b54 <HAL_DMA_IRQHandler+0x1c8>)
240579f6:	4293      	cmp	r3, r2
240579f8:	d031      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
240579fa:	687b      	ldr	r3, [r7, #4]
240579fc:	681b      	ldr	r3, [r3, #0]
240579fe:	4a56      	ldr	r2, [pc, #344]	; (24057b58 <HAL_DMA_IRQHandler+0x1cc>)
24057a00:	4293      	cmp	r3, r2
24057a02:	d02c      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
24057a04:	687b      	ldr	r3, [r7, #4]
24057a06:	681b      	ldr	r3, [r3, #0]
24057a08:	4a54      	ldr	r2, [pc, #336]	; (24057b5c <HAL_DMA_IRQHandler+0x1d0>)
24057a0a:	4293      	cmp	r3, r2
24057a0c:	d027      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
24057a0e:	687b      	ldr	r3, [r7, #4]
24057a10:	681b      	ldr	r3, [r3, #0]
24057a12:	4a53      	ldr	r2, [pc, #332]	; (24057b60 <HAL_DMA_IRQHandler+0x1d4>)
24057a14:	4293      	cmp	r3, r2
24057a16:	d022      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
24057a18:	687b      	ldr	r3, [r7, #4]
24057a1a:	681b      	ldr	r3, [r3, #0]
24057a1c:	4a51      	ldr	r2, [pc, #324]	; (24057b64 <HAL_DMA_IRQHandler+0x1d8>)
24057a1e:	4293      	cmp	r3, r2
24057a20:	d01d      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
24057a22:	687b      	ldr	r3, [r7, #4]
24057a24:	681b      	ldr	r3, [r3, #0]
24057a26:	4a50      	ldr	r2, [pc, #320]	; (24057b68 <HAL_DMA_IRQHandler+0x1dc>)
24057a28:	4293      	cmp	r3, r2
24057a2a:	d018      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
24057a2c:	687b      	ldr	r3, [r7, #4]
24057a2e:	681b      	ldr	r3, [r3, #0]
24057a30:	4a4e      	ldr	r2, [pc, #312]	; (24057b6c <HAL_DMA_IRQHandler+0x1e0>)
24057a32:	4293      	cmp	r3, r2
24057a34:	d013      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
24057a36:	687b      	ldr	r3, [r7, #4]
24057a38:	681b      	ldr	r3, [r3, #0]
24057a3a:	4a4d      	ldr	r2, [pc, #308]	; (24057b70 <HAL_DMA_IRQHandler+0x1e4>)
24057a3c:	4293      	cmp	r3, r2
24057a3e:	d00e      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
24057a40:	687b      	ldr	r3, [r7, #4]
24057a42:	681b      	ldr	r3, [r3, #0]
24057a44:	4a4b      	ldr	r2, [pc, #300]	; (24057b74 <HAL_DMA_IRQHandler+0x1e8>)
24057a46:	4293      	cmp	r3, r2
24057a48:	d009      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
24057a4a:	687b      	ldr	r3, [r7, #4]
24057a4c:	681b      	ldr	r3, [r3, #0]
24057a4e:	4a4a      	ldr	r2, [pc, #296]	; (24057b78 <HAL_DMA_IRQHandler+0x1ec>)
24057a50:	4293      	cmp	r3, r2
24057a52:	d004      	beq.n	24057a5e <HAL_DMA_IRQHandler+0xd2>
24057a54:	687b      	ldr	r3, [r7, #4]
24057a56:	681b      	ldr	r3, [r3, #0]
24057a58:	4a48      	ldr	r2, [pc, #288]	; (24057b7c <HAL_DMA_IRQHandler+0x1f0>)
24057a5a:	4293      	cmp	r3, r2
24057a5c:	d101      	bne.n	24057a62 <HAL_DMA_IRQHandler+0xd6>
24057a5e:	2301      	movs	r3, #1
24057a60:	e000      	b.n	24057a64 <HAL_DMA_IRQHandler+0xd8>
24057a62:	2300      	movs	r3, #0
24057a64:	2b00      	cmp	r3, #0
24057a66:	f000 842b 	beq.w	240582c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24057a6a:	687b      	ldr	r3, [r7, #4]
24057a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057a6e:	f003 031f 	and.w	r3, r3, #31
24057a72:	2208      	movs	r2, #8
24057a74:	409a      	lsls	r2, r3
24057a76:	69bb      	ldr	r3, [r7, #24]
24057a78:	4013      	ands	r3, r2
24057a7a:	2b00      	cmp	r3, #0
24057a7c:	f000 80a2 	beq.w	24057bc4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24057a80:	687b      	ldr	r3, [r7, #4]
24057a82:	681b      	ldr	r3, [r3, #0]
24057a84:	4a2e      	ldr	r2, [pc, #184]	; (24057b40 <HAL_DMA_IRQHandler+0x1b4>)
24057a86:	4293      	cmp	r3, r2
24057a88:	d04a      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057a8a:	687b      	ldr	r3, [r7, #4]
24057a8c:	681b      	ldr	r3, [r3, #0]
24057a8e:	4a2d      	ldr	r2, [pc, #180]	; (24057b44 <HAL_DMA_IRQHandler+0x1b8>)
24057a90:	4293      	cmp	r3, r2
24057a92:	d045      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057a94:	687b      	ldr	r3, [r7, #4]
24057a96:	681b      	ldr	r3, [r3, #0]
24057a98:	4a2b      	ldr	r2, [pc, #172]	; (24057b48 <HAL_DMA_IRQHandler+0x1bc>)
24057a9a:	4293      	cmp	r3, r2
24057a9c:	d040      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057a9e:	687b      	ldr	r3, [r7, #4]
24057aa0:	681b      	ldr	r3, [r3, #0]
24057aa2:	4a2a      	ldr	r2, [pc, #168]	; (24057b4c <HAL_DMA_IRQHandler+0x1c0>)
24057aa4:	4293      	cmp	r3, r2
24057aa6:	d03b      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057aa8:	687b      	ldr	r3, [r7, #4]
24057aaa:	681b      	ldr	r3, [r3, #0]
24057aac:	4a28      	ldr	r2, [pc, #160]	; (24057b50 <HAL_DMA_IRQHandler+0x1c4>)
24057aae:	4293      	cmp	r3, r2
24057ab0:	d036      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057ab2:	687b      	ldr	r3, [r7, #4]
24057ab4:	681b      	ldr	r3, [r3, #0]
24057ab6:	4a27      	ldr	r2, [pc, #156]	; (24057b54 <HAL_DMA_IRQHandler+0x1c8>)
24057ab8:	4293      	cmp	r3, r2
24057aba:	d031      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057abc:	687b      	ldr	r3, [r7, #4]
24057abe:	681b      	ldr	r3, [r3, #0]
24057ac0:	4a25      	ldr	r2, [pc, #148]	; (24057b58 <HAL_DMA_IRQHandler+0x1cc>)
24057ac2:	4293      	cmp	r3, r2
24057ac4:	d02c      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057ac6:	687b      	ldr	r3, [r7, #4]
24057ac8:	681b      	ldr	r3, [r3, #0]
24057aca:	4a24      	ldr	r2, [pc, #144]	; (24057b5c <HAL_DMA_IRQHandler+0x1d0>)
24057acc:	4293      	cmp	r3, r2
24057ace:	d027      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057ad0:	687b      	ldr	r3, [r7, #4]
24057ad2:	681b      	ldr	r3, [r3, #0]
24057ad4:	4a22      	ldr	r2, [pc, #136]	; (24057b60 <HAL_DMA_IRQHandler+0x1d4>)
24057ad6:	4293      	cmp	r3, r2
24057ad8:	d022      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057ada:	687b      	ldr	r3, [r7, #4]
24057adc:	681b      	ldr	r3, [r3, #0]
24057ade:	4a21      	ldr	r2, [pc, #132]	; (24057b64 <HAL_DMA_IRQHandler+0x1d8>)
24057ae0:	4293      	cmp	r3, r2
24057ae2:	d01d      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057ae4:	687b      	ldr	r3, [r7, #4]
24057ae6:	681b      	ldr	r3, [r3, #0]
24057ae8:	4a1f      	ldr	r2, [pc, #124]	; (24057b68 <HAL_DMA_IRQHandler+0x1dc>)
24057aea:	4293      	cmp	r3, r2
24057aec:	d018      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057aee:	687b      	ldr	r3, [r7, #4]
24057af0:	681b      	ldr	r3, [r3, #0]
24057af2:	4a1e      	ldr	r2, [pc, #120]	; (24057b6c <HAL_DMA_IRQHandler+0x1e0>)
24057af4:	4293      	cmp	r3, r2
24057af6:	d013      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057af8:	687b      	ldr	r3, [r7, #4]
24057afa:	681b      	ldr	r3, [r3, #0]
24057afc:	4a1c      	ldr	r2, [pc, #112]	; (24057b70 <HAL_DMA_IRQHandler+0x1e4>)
24057afe:	4293      	cmp	r3, r2
24057b00:	d00e      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057b02:	687b      	ldr	r3, [r7, #4]
24057b04:	681b      	ldr	r3, [r3, #0]
24057b06:	4a1b      	ldr	r2, [pc, #108]	; (24057b74 <HAL_DMA_IRQHandler+0x1e8>)
24057b08:	4293      	cmp	r3, r2
24057b0a:	d009      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057b0c:	687b      	ldr	r3, [r7, #4]
24057b0e:	681b      	ldr	r3, [r3, #0]
24057b10:	4a19      	ldr	r2, [pc, #100]	; (24057b78 <HAL_DMA_IRQHandler+0x1ec>)
24057b12:	4293      	cmp	r3, r2
24057b14:	d004      	beq.n	24057b20 <HAL_DMA_IRQHandler+0x194>
24057b16:	687b      	ldr	r3, [r7, #4]
24057b18:	681b      	ldr	r3, [r3, #0]
24057b1a:	4a18      	ldr	r2, [pc, #96]	; (24057b7c <HAL_DMA_IRQHandler+0x1f0>)
24057b1c:	4293      	cmp	r3, r2
24057b1e:	d12f      	bne.n	24057b80 <HAL_DMA_IRQHandler+0x1f4>
24057b20:	687b      	ldr	r3, [r7, #4]
24057b22:	681b      	ldr	r3, [r3, #0]
24057b24:	681b      	ldr	r3, [r3, #0]
24057b26:	f003 0304 	and.w	r3, r3, #4
24057b2a:	2b00      	cmp	r3, #0
24057b2c:	bf14      	ite	ne
24057b2e:	2301      	movne	r3, #1
24057b30:	2300      	moveq	r3, #0
24057b32:	b2db      	uxtb	r3, r3
24057b34:	e02e      	b.n	24057b94 <HAL_DMA_IRQHandler+0x208>
24057b36:	bf00      	nop
24057b38:	20000044 	.word	0x20000044
24057b3c:	1b4e81b5 	.word	0x1b4e81b5
24057b40:	40020010 	.word	0x40020010
24057b44:	40020028 	.word	0x40020028
24057b48:	40020040 	.word	0x40020040
24057b4c:	40020058 	.word	0x40020058
24057b50:	40020070 	.word	0x40020070
24057b54:	40020088 	.word	0x40020088
24057b58:	400200a0 	.word	0x400200a0
24057b5c:	400200b8 	.word	0x400200b8
24057b60:	40020410 	.word	0x40020410
24057b64:	40020428 	.word	0x40020428
24057b68:	40020440 	.word	0x40020440
24057b6c:	40020458 	.word	0x40020458
24057b70:	40020470 	.word	0x40020470
24057b74:	40020488 	.word	0x40020488
24057b78:	400204a0 	.word	0x400204a0
24057b7c:	400204b8 	.word	0x400204b8
24057b80:	687b      	ldr	r3, [r7, #4]
24057b82:	681b      	ldr	r3, [r3, #0]
24057b84:	681b      	ldr	r3, [r3, #0]
24057b86:	f003 0308 	and.w	r3, r3, #8
24057b8a:	2b00      	cmp	r3, #0
24057b8c:	bf14      	ite	ne
24057b8e:	2301      	movne	r3, #1
24057b90:	2300      	moveq	r3, #0
24057b92:	b2db      	uxtb	r3, r3
24057b94:	2b00      	cmp	r3, #0
24057b96:	d015      	beq.n	24057bc4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24057b98:	687b      	ldr	r3, [r7, #4]
24057b9a:	681b      	ldr	r3, [r3, #0]
24057b9c:	681a      	ldr	r2, [r3, #0]
24057b9e:	687b      	ldr	r3, [r7, #4]
24057ba0:	681b      	ldr	r3, [r3, #0]
24057ba2:	f022 0204 	bic.w	r2, r2, #4
24057ba6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24057ba8:	687b      	ldr	r3, [r7, #4]
24057baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057bac:	f003 031f 	and.w	r3, r3, #31
24057bb0:	2208      	movs	r2, #8
24057bb2:	409a      	lsls	r2, r3
24057bb4:	6a3b      	ldr	r3, [r7, #32]
24057bb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24057bb8:	687b      	ldr	r3, [r7, #4]
24057bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24057bbc:	f043 0201 	orr.w	r2, r3, #1
24057bc0:	687b      	ldr	r3, [r7, #4]
24057bc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24057bc4:	687b      	ldr	r3, [r7, #4]
24057bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057bc8:	f003 031f 	and.w	r3, r3, #31
24057bcc:	69ba      	ldr	r2, [r7, #24]
24057bce:	fa22 f303 	lsr.w	r3, r2, r3
24057bd2:	f003 0301 	and.w	r3, r3, #1
24057bd6:	2b00      	cmp	r3, #0
24057bd8:	d06e      	beq.n	24057cb8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24057bda:	687b      	ldr	r3, [r7, #4]
24057bdc:	681b      	ldr	r3, [r3, #0]
24057bde:	4a69      	ldr	r2, [pc, #420]	; (24057d84 <HAL_DMA_IRQHandler+0x3f8>)
24057be0:	4293      	cmp	r3, r2
24057be2:	d04a      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057be4:	687b      	ldr	r3, [r7, #4]
24057be6:	681b      	ldr	r3, [r3, #0]
24057be8:	4a67      	ldr	r2, [pc, #412]	; (24057d88 <HAL_DMA_IRQHandler+0x3fc>)
24057bea:	4293      	cmp	r3, r2
24057bec:	d045      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057bee:	687b      	ldr	r3, [r7, #4]
24057bf0:	681b      	ldr	r3, [r3, #0]
24057bf2:	4a66      	ldr	r2, [pc, #408]	; (24057d8c <HAL_DMA_IRQHandler+0x400>)
24057bf4:	4293      	cmp	r3, r2
24057bf6:	d040      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057bf8:	687b      	ldr	r3, [r7, #4]
24057bfa:	681b      	ldr	r3, [r3, #0]
24057bfc:	4a64      	ldr	r2, [pc, #400]	; (24057d90 <HAL_DMA_IRQHandler+0x404>)
24057bfe:	4293      	cmp	r3, r2
24057c00:	d03b      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057c02:	687b      	ldr	r3, [r7, #4]
24057c04:	681b      	ldr	r3, [r3, #0]
24057c06:	4a63      	ldr	r2, [pc, #396]	; (24057d94 <HAL_DMA_IRQHandler+0x408>)
24057c08:	4293      	cmp	r3, r2
24057c0a:	d036      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057c0c:	687b      	ldr	r3, [r7, #4]
24057c0e:	681b      	ldr	r3, [r3, #0]
24057c10:	4a61      	ldr	r2, [pc, #388]	; (24057d98 <HAL_DMA_IRQHandler+0x40c>)
24057c12:	4293      	cmp	r3, r2
24057c14:	d031      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057c16:	687b      	ldr	r3, [r7, #4]
24057c18:	681b      	ldr	r3, [r3, #0]
24057c1a:	4a60      	ldr	r2, [pc, #384]	; (24057d9c <HAL_DMA_IRQHandler+0x410>)
24057c1c:	4293      	cmp	r3, r2
24057c1e:	d02c      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057c20:	687b      	ldr	r3, [r7, #4]
24057c22:	681b      	ldr	r3, [r3, #0]
24057c24:	4a5e      	ldr	r2, [pc, #376]	; (24057da0 <HAL_DMA_IRQHandler+0x414>)
24057c26:	4293      	cmp	r3, r2
24057c28:	d027      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057c2a:	687b      	ldr	r3, [r7, #4]
24057c2c:	681b      	ldr	r3, [r3, #0]
24057c2e:	4a5d      	ldr	r2, [pc, #372]	; (24057da4 <HAL_DMA_IRQHandler+0x418>)
24057c30:	4293      	cmp	r3, r2
24057c32:	d022      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057c34:	687b      	ldr	r3, [r7, #4]
24057c36:	681b      	ldr	r3, [r3, #0]
24057c38:	4a5b      	ldr	r2, [pc, #364]	; (24057da8 <HAL_DMA_IRQHandler+0x41c>)
24057c3a:	4293      	cmp	r3, r2
24057c3c:	d01d      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057c3e:	687b      	ldr	r3, [r7, #4]
24057c40:	681b      	ldr	r3, [r3, #0]
24057c42:	4a5a      	ldr	r2, [pc, #360]	; (24057dac <HAL_DMA_IRQHandler+0x420>)
24057c44:	4293      	cmp	r3, r2
24057c46:	d018      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057c48:	687b      	ldr	r3, [r7, #4]
24057c4a:	681b      	ldr	r3, [r3, #0]
24057c4c:	4a58      	ldr	r2, [pc, #352]	; (24057db0 <HAL_DMA_IRQHandler+0x424>)
24057c4e:	4293      	cmp	r3, r2
24057c50:	d013      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057c52:	687b      	ldr	r3, [r7, #4]
24057c54:	681b      	ldr	r3, [r3, #0]
24057c56:	4a57      	ldr	r2, [pc, #348]	; (24057db4 <HAL_DMA_IRQHandler+0x428>)
24057c58:	4293      	cmp	r3, r2
24057c5a:	d00e      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057c5c:	687b      	ldr	r3, [r7, #4]
24057c5e:	681b      	ldr	r3, [r3, #0]
24057c60:	4a55      	ldr	r2, [pc, #340]	; (24057db8 <HAL_DMA_IRQHandler+0x42c>)
24057c62:	4293      	cmp	r3, r2
24057c64:	d009      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057c66:	687b      	ldr	r3, [r7, #4]
24057c68:	681b      	ldr	r3, [r3, #0]
24057c6a:	4a54      	ldr	r2, [pc, #336]	; (24057dbc <HAL_DMA_IRQHandler+0x430>)
24057c6c:	4293      	cmp	r3, r2
24057c6e:	d004      	beq.n	24057c7a <HAL_DMA_IRQHandler+0x2ee>
24057c70:	687b      	ldr	r3, [r7, #4]
24057c72:	681b      	ldr	r3, [r3, #0]
24057c74:	4a52      	ldr	r2, [pc, #328]	; (24057dc0 <HAL_DMA_IRQHandler+0x434>)
24057c76:	4293      	cmp	r3, r2
24057c78:	d10a      	bne.n	24057c90 <HAL_DMA_IRQHandler+0x304>
24057c7a:	687b      	ldr	r3, [r7, #4]
24057c7c:	681b      	ldr	r3, [r3, #0]
24057c7e:	695b      	ldr	r3, [r3, #20]
24057c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
24057c84:	2b00      	cmp	r3, #0
24057c86:	bf14      	ite	ne
24057c88:	2301      	movne	r3, #1
24057c8a:	2300      	moveq	r3, #0
24057c8c:	b2db      	uxtb	r3, r3
24057c8e:	e003      	b.n	24057c98 <HAL_DMA_IRQHandler+0x30c>
24057c90:	687b      	ldr	r3, [r7, #4]
24057c92:	681b      	ldr	r3, [r3, #0]
24057c94:	681b      	ldr	r3, [r3, #0]
24057c96:	2300      	movs	r3, #0
24057c98:	2b00      	cmp	r3, #0
24057c9a:	d00d      	beq.n	24057cb8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24057c9c:	687b      	ldr	r3, [r7, #4]
24057c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057ca0:	f003 031f 	and.w	r3, r3, #31
24057ca4:	2201      	movs	r2, #1
24057ca6:	409a      	lsls	r2, r3
24057ca8:	6a3b      	ldr	r3, [r7, #32]
24057caa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24057cac:	687b      	ldr	r3, [r7, #4]
24057cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24057cb0:	f043 0202 	orr.w	r2, r3, #2
24057cb4:	687b      	ldr	r3, [r7, #4]
24057cb6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24057cb8:	687b      	ldr	r3, [r7, #4]
24057cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057cbc:	f003 031f 	and.w	r3, r3, #31
24057cc0:	2204      	movs	r2, #4
24057cc2:	409a      	lsls	r2, r3
24057cc4:	69bb      	ldr	r3, [r7, #24]
24057cc6:	4013      	ands	r3, r2
24057cc8:	2b00      	cmp	r3, #0
24057cca:	f000 808f 	beq.w	24057dec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24057cce:	687b      	ldr	r3, [r7, #4]
24057cd0:	681b      	ldr	r3, [r3, #0]
24057cd2:	4a2c      	ldr	r2, [pc, #176]	; (24057d84 <HAL_DMA_IRQHandler+0x3f8>)
24057cd4:	4293      	cmp	r3, r2
24057cd6:	d04a      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057cd8:	687b      	ldr	r3, [r7, #4]
24057cda:	681b      	ldr	r3, [r3, #0]
24057cdc:	4a2a      	ldr	r2, [pc, #168]	; (24057d88 <HAL_DMA_IRQHandler+0x3fc>)
24057cde:	4293      	cmp	r3, r2
24057ce0:	d045      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057ce2:	687b      	ldr	r3, [r7, #4]
24057ce4:	681b      	ldr	r3, [r3, #0]
24057ce6:	4a29      	ldr	r2, [pc, #164]	; (24057d8c <HAL_DMA_IRQHandler+0x400>)
24057ce8:	4293      	cmp	r3, r2
24057cea:	d040      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057cec:	687b      	ldr	r3, [r7, #4]
24057cee:	681b      	ldr	r3, [r3, #0]
24057cf0:	4a27      	ldr	r2, [pc, #156]	; (24057d90 <HAL_DMA_IRQHandler+0x404>)
24057cf2:	4293      	cmp	r3, r2
24057cf4:	d03b      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057cf6:	687b      	ldr	r3, [r7, #4]
24057cf8:	681b      	ldr	r3, [r3, #0]
24057cfa:	4a26      	ldr	r2, [pc, #152]	; (24057d94 <HAL_DMA_IRQHandler+0x408>)
24057cfc:	4293      	cmp	r3, r2
24057cfe:	d036      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057d00:	687b      	ldr	r3, [r7, #4]
24057d02:	681b      	ldr	r3, [r3, #0]
24057d04:	4a24      	ldr	r2, [pc, #144]	; (24057d98 <HAL_DMA_IRQHandler+0x40c>)
24057d06:	4293      	cmp	r3, r2
24057d08:	d031      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057d0a:	687b      	ldr	r3, [r7, #4]
24057d0c:	681b      	ldr	r3, [r3, #0]
24057d0e:	4a23      	ldr	r2, [pc, #140]	; (24057d9c <HAL_DMA_IRQHandler+0x410>)
24057d10:	4293      	cmp	r3, r2
24057d12:	d02c      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057d14:	687b      	ldr	r3, [r7, #4]
24057d16:	681b      	ldr	r3, [r3, #0]
24057d18:	4a21      	ldr	r2, [pc, #132]	; (24057da0 <HAL_DMA_IRQHandler+0x414>)
24057d1a:	4293      	cmp	r3, r2
24057d1c:	d027      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057d1e:	687b      	ldr	r3, [r7, #4]
24057d20:	681b      	ldr	r3, [r3, #0]
24057d22:	4a20      	ldr	r2, [pc, #128]	; (24057da4 <HAL_DMA_IRQHandler+0x418>)
24057d24:	4293      	cmp	r3, r2
24057d26:	d022      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057d28:	687b      	ldr	r3, [r7, #4]
24057d2a:	681b      	ldr	r3, [r3, #0]
24057d2c:	4a1e      	ldr	r2, [pc, #120]	; (24057da8 <HAL_DMA_IRQHandler+0x41c>)
24057d2e:	4293      	cmp	r3, r2
24057d30:	d01d      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057d32:	687b      	ldr	r3, [r7, #4]
24057d34:	681b      	ldr	r3, [r3, #0]
24057d36:	4a1d      	ldr	r2, [pc, #116]	; (24057dac <HAL_DMA_IRQHandler+0x420>)
24057d38:	4293      	cmp	r3, r2
24057d3a:	d018      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057d3c:	687b      	ldr	r3, [r7, #4]
24057d3e:	681b      	ldr	r3, [r3, #0]
24057d40:	4a1b      	ldr	r2, [pc, #108]	; (24057db0 <HAL_DMA_IRQHandler+0x424>)
24057d42:	4293      	cmp	r3, r2
24057d44:	d013      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057d46:	687b      	ldr	r3, [r7, #4]
24057d48:	681b      	ldr	r3, [r3, #0]
24057d4a:	4a1a      	ldr	r2, [pc, #104]	; (24057db4 <HAL_DMA_IRQHandler+0x428>)
24057d4c:	4293      	cmp	r3, r2
24057d4e:	d00e      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057d50:	687b      	ldr	r3, [r7, #4]
24057d52:	681b      	ldr	r3, [r3, #0]
24057d54:	4a18      	ldr	r2, [pc, #96]	; (24057db8 <HAL_DMA_IRQHandler+0x42c>)
24057d56:	4293      	cmp	r3, r2
24057d58:	d009      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057d5a:	687b      	ldr	r3, [r7, #4]
24057d5c:	681b      	ldr	r3, [r3, #0]
24057d5e:	4a17      	ldr	r2, [pc, #92]	; (24057dbc <HAL_DMA_IRQHandler+0x430>)
24057d60:	4293      	cmp	r3, r2
24057d62:	d004      	beq.n	24057d6e <HAL_DMA_IRQHandler+0x3e2>
24057d64:	687b      	ldr	r3, [r7, #4]
24057d66:	681b      	ldr	r3, [r3, #0]
24057d68:	4a15      	ldr	r2, [pc, #84]	; (24057dc0 <HAL_DMA_IRQHandler+0x434>)
24057d6a:	4293      	cmp	r3, r2
24057d6c:	d12a      	bne.n	24057dc4 <HAL_DMA_IRQHandler+0x438>
24057d6e:	687b      	ldr	r3, [r7, #4]
24057d70:	681b      	ldr	r3, [r3, #0]
24057d72:	681b      	ldr	r3, [r3, #0]
24057d74:	f003 0302 	and.w	r3, r3, #2
24057d78:	2b00      	cmp	r3, #0
24057d7a:	bf14      	ite	ne
24057d7c:	2301      	movne	r3, #1
24057d7e:	2300      	moveq	r3, #0
24057d80:	b2db      	uxtb	r3, r3
24057d82:	e023      	b.n	24057dcc <HAL_DMA_IRQHandler+0x440>
24057d84:	40020010 	.word	0x40020010
24057d88:	40020028 	.word	0x40020028
24057d8c:	40020040 	.word	0x40020040
24057d90:	40020058 	.word	0x40020058
24057d94:	40020070 	.word	0x40020070
24057d98:	40020088 	.word	0x40020088
24057d9c:	400200a0 	.word	0x400200a0
24057da0:	400200b8 	.word	0x400200b8
24057da4:	40020410 	.word	0x40020410
24057da8:	40020428 	.word	0x40020428
24057dac:	40020440 	.word	0x40020440
24057db0:	40020458 	.word	0x40020458
24057db4:	40020470 	.word	0x40020470
24057db8:	40020488 	.word	0x40020488
24057dbc:	400204a0 	.word	0x400204a0
24057dc0:	400204b8 	.word	0x400204b8
24057dc4:	687b      	ldr	r3, [r7, #4]
24057dc6:	681b      	ldr	r3, [r3, #0]
24057dc8:	681b      	ldr	r3, [r3, #0]
24057dca:	2300      	movs	r3, #0
24057dcc:	2b00      	cmp	r3, #0
24057dce:	d00d      	beq.n	24057dec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24057dd0:	687b      	ldr	r3, [r7, #4]
24057dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057dd4:	f003 031f 	and.w	r3, r3, #31
24057dd8:	2204      	movs	r2, #4
24057dda:	409a      	lsls	r2, r3
24057ddc:	6a3b      	ldr	r3, [r7, #32]
24057dde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24057de0:	687b      	ldr	r3, [r7, #4]
24057de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24057de4:	f043 0204 	orr.w	r2, r3, #4
24057de8:	687b      	ldr	r3, [r7, #4]
24057dea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24057dec:	687b      	ldr	r3, [r7, #4]
24057dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057df0:	f003 031f 	and.w	r3, r3, #31
24057df4:	2210      	movs	r2, #16
24057df6:	409a      	lsls	r2, r3
24057df8:	69bb      	ldr	r3, [r7, #24]
24057dfa:	4013      	ands	r3, r2
24057dfc:	2b00      	cmp	r3, #0
24057dfe:	f000 80a6 	beq.w	24057f4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24057e02:	687b      	ldr	r3, [r7, #4]
24057e04:	681b      	ldr	r3, [r3, #0]
24057e06:	4a85      	ldr	r2, [pc, #532]	; (2405801c <HAL_DMA_IRQHandler+0x690>)
24057e08:	4293      	cmp	r3, r2
24057e0a:	d04a      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e0c:	687b      	ldr	r3, [r7, #4]
24057e0e:	681b      	ldr	r3, [r3, #0]
24057e10:	4a83      	ldr	r2, [pc, #524]	; (24058020 <HAL_DMA_IRQHandler+0x694>)
24057e12:	4293      	cmp	r3, r2
24057e14:	d045      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e16:	687b      	ldr	r3, [r7, #4]
24057e18:	681b      	ldr	r3, [r3, #0]
24057e1a:	4a82      	ldr	r2, [pc, #520]	; (24058024 <HAL_DMA_IRQHandler+0x698>)
24057e1c:	4293      	cmp	r3, r2
24057e1e:	d040      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e20:	687b      	ldr	r3, [r7, #4]
24057e22:	681b      	ldr	r3, [r3, #0]
24057e24:	4a80      	ldr	r2, [pc, #512]	; (24058028 <HAL_DMA_IRQHandler+0x69c>)
24057e26:	4293      	cmp	r3, r2
24057e28:	d03b      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e2a:	687b      	ldr	r3, [r7, #4]
24057e2c:	681b      	ldr	r3, [r3, #0]
24057e2e:	4a7f      	ldr	r2, [pc, #508]	; (2405802c <HAL_DMA_IRQHandler+0x6a0>)
24057e30:	4293      	cmp	r3, r2
24057e32:	d036      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e34:	687b      	ldr	r3, [r7, #4]
24057e36:	681b      	ldr	r3, [r3, #0]
24057e38:	4a7d      	ldr	r2, [pc, #500]	; (24058030 <HAL_DMA_IRQHandler+0x6a4>)
24057e3a:	4293      	cmp	r3, r2
24057e3c:	d031      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e3e:	687b      	ldr	r3, [r7, #4]
24057e40:	681b      	ldr	r3, [r3, #0]
24057e42:	4a7c      	ldr	r2, [pc, #496]	; (24058034 <HAL_DMA_IRQHandler+0x6a8>)
24057e44:	4293      	cmp	r3, r2
24057e46:	d02c      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e48:	687b      	ldr	r3, [r7, #4]
24057e4a:	681b      	ldr	r3, [r3, #0]
24057e4c:	4a7a      	ldr	r2, [pc, #488]	; (24058038 <HAL_DMA_IRQHandler+0x6ac>)
24057e4e:	4293      	cmp	r3, r2
24057e50:	d027      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e52:	687b      	ldr	r3, [r7, #4]
24057e54:	681b      	ldr	r3, [r3, #0]
24057e56:	4a79      	ldr	r2, [pc, #484]	; (2405803c <HAL_DMA_IRQHandler+0x6b0>)
24057e58:	4293      	cmp	r3, r2
24057e5a:	d022      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e5c:	687b      	ldr	r3, [r7, #4]
24057e5e:	681b      	ldr	r3, [r3, #0]
24057e60:	4a77      	ldr	r2, [pc, #476]	; (24058040 <HAL_DMA_IRQHandler+0x6b4>)
24057e62:	4293      	cmp	r3, r2
24057e64:	d01d      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e66:	687b      	ldr	r3, [r7, #4]
24057e68:	681b      	ldr	r3, [r3, #0]
24057e6a:	4a76      	ldr	r2, [pc, #472]	; (24058044 <HAL_DMA_IRQHandler+0x6b8>)
24057e6c:	4293      	cmp	r3, r2
24057e6e:	d018      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e70:	687b      	ldr	r3, [r7, #4]
24057e72:	681b      	ldr	r3, [r3, #0]
24057e74:	4a74      	ldr	r2, [pc, #464]	; (24058048 <HAL_DMA_IRQHandler+0x6bc>)
24057e76:	4293      	cmp	r3, r2
24057e78:	d013      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e7a:	687b      	ldr	r3, [r7, #4]
24057e7c:	681b      	ldr	r3, [r3, #0]
24057e7e:	4a73      	ldr	r2, [pc, #460]	; (2405804c <HAL_DMA_IRQHandler+0x6c0>)
24057e80:	4293      	cmp	r3, r2
24057e82:	d00e      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e84:	687b      	ldr	r3, [r7, #4]
24057e86:	681b      	ldr	r3, [r3, #0]
24057e88:	4a71      	ldr	r2, [pc, #452]	; (24058050 <HAL_DMA_IRQHandler+0x6c4>)
24057e8a:	4293      	cmp	r3, r2
24057e8c:	d009      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e8e:	687b      	ldr	r3, [r7, #4]
24057e90:	681b      	ldr	r3, [r3, #0]
24057e92:	4a70      	ldr	r2, [pc, #448]	; (24058054 <HAL_DMA_IRQHandler+0x6c8>)
24057e94:	4293      	cmp	r3, r2
24057e96:	d004      	beq.n	24057ea2 <HAL_DMA_IRQHandler+0x516>
24057e98:	687b      	ldr	r3, [r7, #4]
24057e9a:	681b      	ldr	r3, [r3, #0]
24057e9c:	4a6e      	ldr	r2, [pc, #440]	; (24058058 <HAL_DMA_IRQHandler+0x6cc>)
24057e9e:	4293      	cmp	r3, r2
24057ea0:	d10a      	bne.n	24057eb8 <HAL_DMA_IRQHandler+0x52c>
24057ea2:	687b      	ldr	r3, [r7, #4]
24057ea4:	681b      	ldr	r3, [r3, #0]
24057ea6:	681b      	ldr	r3, [r3, #0]
24057ea8:	f003 0308 	and.w	r3, r3, #8
24057eac:	2b00      	cmp	r3, #0
24057eae:	bf14      	ite	ne
24057eb0:	2301      	movne	r3, #1
24057eb2:	2300      	moveq	r3, #0
24057eb4:	b2db      	uxtb	r3, r3
24057eb6:	e009      	b.n	24057ecc <HAL_DMA_IRQHandler+0x540>
24057eb8:	687b      	ldr	r3, [r7, #4]
24057eba:	681b      	ldr	r3, [r3, #0]
24057ebc:	681b      	ldr	r3, [r3, #0]
24057ebe:	f003 0304 	and.w	r3, r3, #4
24057ec2:	2b00      	cmp	r3, #0
24057ec4:	bf14      	ite	ne
24057ec6:	2301      	movne	r3, #1
24057ec8:	2300      	moveq	r3, #0
24057eca:	b2db      	uxtb	r3, r3
24057ecc:	2b00      	cmp	r3, #0
24057ece:	d03e      	beq.n	24057f4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24057ed0:	687b      	ldr	r3, [r7, #4]
24057ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057ed4:	f003 031f 	and.w	r3, r3, #31
24057ed8:	2210      	movs	r2, #16
24057eda:	409a      	lsls	r2, r3
24057edc:	6a3b      	ldr	r3, [r7, #32]
24057ede:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24057ee0:	687b      	ldr	r3, [r7, #4]
24057ee2:	681b      	ldr	r3, [r3, #0]
24057ee4:	681b      	ldr	r3, [r3, #0]
24057ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24057eea:	2b00      	cmp	r3, #0
24057eec:	d018      	beq.n	24057f20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24057eee:	687b      	ldr	r3, [r7, #4]
24057ef0:	681b      	ldr	r3, [r3, #0]
24057ef2:	681b      	ldr	r3, [r3, #0]
24057ef4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24057ef8:	2b00      	cmp	r3, #0
24057efa:	d108      	bne.n	24057f0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
24057efc:	687b      	ldr	r3, [r7, #4]
24057efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24057f00:	2b00      	cmp	r3, #0
24057f02:	d024      	beq.n	24057f4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
24057f04:	687b      	ldr	r3, [r7, #4]
24057f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24057f08:	6878      	ldr	r0, [r7, #4]
24057f0a:	4798      	blx	r3
24057f0c:	e01f      	b.n	24057f4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
24057f0e:	687b      	ldr	r3, [r7, #4]
24057f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24057f12:	2b00      	cmp	r3, #0
24057f14:	d01b      	beq.n	24057f4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
24057f16:	687b      	ldr	r3, [r7, #4]
24057f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24057f1a:	6878      	ldr	r0, [r7, #4]
24057f1c:	4798      	blx	r3
24057f1e:	e016      	b.n	24057f4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24057f20:	687b      	ldr	r3, [r7, #4]
24057f22:	681b      	ldr	r3, [r3, #0]
24057f24:	681b      	ldr	r3, [r3, #0]
24057f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
24057f2a:	2b00      	cmp	r3, #0
24057f2c:	d107      	bne.n	24057f3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24057f2e:	687b      	ldr	r3, [r7, #4]
24057f30:	681b      	ldr	r3, [r3, #0]
24057f32:	681a      	ldr	r2, [r3, #0]
24057f34:	687b      	ldr	r3, [r7, #4]
24057f36:	681b      	ldr	r3, [r3, #0]
24057f38:	f022 0208 	bic.w	r2, r2, #8
24057f3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
24057f3e:	687b      	ldr	r3, [r7, #4]
24057f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24057f42:	2b00      	cmp	r3, #0
24057f44:	d003      	beq.n	24057f4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
24057f46:	687b      	ldr	r3, [r7, #4]
24057f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24057f4a:	6878      	ldr	r0, [r7, #4]
24057f4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24057f4e:	687b      	ldr	r3, [r7, #4]
24057f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057f52:	f003 031f 	and.w	r3, r3, #31
24057f56:	2220      	movs	r2, #32
24057f58:	409a      	lsls	r2, r3
24057f5a:	69bb      	ldr	r3, [r7, #24]
24057f5c:	4013      	ands	r3, r2
24057f5e:	2b00      	cmp	r3, #0
24057f60:	f000 8110 	beq.w	24058184 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24057f64:	687b      	ldr	r3, [r7, #4]
24057f66:	681b      	ldr	r3, [r3, #0]
24057f68:	4a2c      	ldr	r2, [pc, #176]	; (2405801c <HAL_DMA_IRQHandler+0x690>)
24057f6a:	4293      	cmp	r3, r2
24057f6c:	d04a      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057f6e:	687b      	ldr	r3, [r7, #4]
24057f70:	681b      	ldr	r3, [r3, #0]
24057f72:	4a2b      	ldr	r2, [pc, #172]	; (24058020 <HAL_DMA_IRQHandler+0x694>)
24057f74:	4293      	cmp	r3, r2
24057f76:	d045      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057f78:	687b      	ldr	r3, [r7, #4]
24057f7a:	681b      	ldr	r3, [r3, #0]
24057f7c:	4a29      	ldr	r2, [pc, #164]	; (24058024 <HAL_DMA_IRQHandler+0x698>)
24057f7e:	4293      	cmp	r3, r2
24057f80:	d040      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057f82:	687b      	ldr	r3, [r7, #4]
24057f84:	681b      	ldr	r3, [r3, #0]
24057f86:	4a28      	ldr	r2, [pc, #160]	; (24058028 <HAL_DMA_IRQHandler+0x69c>)
24057f88:	4293      	cmp	r3, r2
24057f8a:	d03b      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057f8c:	687b      	ldr	r3, [r7, #4]
24057f8e:	681b      	ldr	r3, [r3, #0]
24057f90:	4a26      	ldr	r2, [pc, #152]	; (2405802c <HAL_DMA_IRQHandler+0x6a0>)
24057f92:	4293      	cmp	r3, r2
24057f94:	d036      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057f96:	687b      	ldr	r3, [r7, #4]
24057f98:	681b      	ldr	r3, [r3, #0]
24057f9a:	4a25      	ldr	r2, [pc, #148]	; (24058030 <HAL_DMA_IRQHandler+0x6a4>)
24057f9c:	4293      	cmp	r3, r2
24057f9e:	d031      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057fa0:	687b      	ldr	r3, [r7, #4]
24057fa2:	681b      	ldr	r3, [r3, #0]
24057fa4:	4a23      	ldr	r2, [pc, #140]	; (24058034 <HAL_DMA_IRQHandler+0x6a8>)
24057fa6:	4293      	cmp	r3, r2
24057fa8:	d02c      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057faa:	687b      	ldr	r3, [r7, #4]
24057fac:	681b      	ldr	r3, [r3, #0]
24057fae:	4a22      	ldr	r2, [pc, #136]	; (24058038 <HAL_DMA_IRQHandler+0x6ac>)
24057fb0:	4293      	cmp	r3, r2
24057fb2:	d027      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057fb4:	687b      	ldr	r3, [r7, #4]
24057fb6:	681b      	ldr	r3, [r3, #0]
24057fb8:	4a20      	ldr	r2, [pc, #128]	; (2405803c <HAL_DMA_IRQHandler+0x6b0>)
24057fba:	4293      	cmp	r3, r2
24057fbc:	d022      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057fbe:	687b      	ldr	r3, [r7, #4]
24057fc0:	681b      	ldr	r3, [r3, #0]
24057fc2:	4a1f      	ldr	r2, [pc, #124]	; (24058040 <HAL_DMA_IRQHandler+0x6b4>)
24057fc4:	4293      	cmp	r3, r2
24057fc6:	d01d      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057fc8:	687b      	ldr	r3, [r7, #4]
24057fca:	681b      	ldr	r3, [r3, #0]
24057fcc:	4a1d      	ldr	r2, [pc, #116]	; (24058044 <HAL_DMA_IRQHandler+0x6b8>)
24057fce:	4293      	cmp	r3, r2
24057fd0:	d018      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057fd2:	687b      	ldr	r3, [r7, #4]
24057fd4:	681b      	ldr	r3, [r3, #0]
24057fd6:	4a1c      	ldr	r2, [pc, #112]	; (24058048 <HAL_DMA_IRQHandler+0x6bc>)
24057fd8:	4293      	cmp	r3, r2
24057fda:	d013      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057fdc:	687b      	ldr	r3, [r7, #4]
24057fde:	681b      	ldr	r3, [r3, #0]
24057fe0:	4a1a      	ldr	r2, [pc, #104]	; (2405804c <HAL_DMA_IRQHandler+0x6c0>)
24057fe2:	4293      	cmp	r3, r2
24057fe4:	d00e      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057fe6:	687b      	ldr	r3, [r7, #4]
24057fe8:	681b      	ldr	r3, [r3, #0]
24057fea:	4a19      	ldr	r2, [pc, #100]	; (24058050 <HAL_DMA_IRQHandler+0x6c4>)
24057fec:	4293      	cmp	r3, r2
24057fee:	d009      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057ff0:	687b      	ldr	r3, [r7, #4]
24057ff2:	681b      	ldr	r3, [r3, #0]
24057ff4:	4a17      	ldr	r2, [pc, #92]	; (24058054 <HAL_DMA_IRQHandler+0x6c8>)
24057ff6:	4293      	cmp	r3, r2
24057ff8:	d004      	beq.n	24058004 <HAL_DMA_IRQHandler+0x678>
24057ffa:	687b      	ldr	r3, [r7, #4]
24057ffc:	681b      	ldr	r3, [r3, #0]
24057ffe:	4a16      	ldr	r2, [pc, #88]	; (24058058 <HAL_DMA_IRQHandler+0x6cc>)
24058000:	4293      	cmp	r3, r2
24058002:	d12b      	bne.n	2405805c <HAL_DMA_IRQHandler+0x6d0>
24058004:	687b      	ldr	r3, [r7, #4]
24058006:	681b      	ldr	r3, [r3, #0]
24058008:	681b      	ldr	r3, [r3, #0]
2405800a:	f003 0310 	and.w	r3, r3, #16
2405800e:	2b00      	cmp	r3, #0
24058010:	bf14      	ite	ne
24058012:	2301      	movne	r3, #1
24058014:	2300      	moveq	r3, #0
24058016:	b2db      	uxtb	r3, r3
24058018:	e02a      	b.n	24058070 <HAL_DMA_IRQHandler+0x6e4>
2405801a:	bf00      	nop
2405801c:	40020010 	.word	0x40020010
24058020:	40020028 	.word	0x40020028
24058024:	40020040 	.word	0x40020040
24058028:	40020058 	.word	0x40020058
2405802c:	40020070 	.word	0x40020070
24058030:	40020088 	.word	0x40020088
24058034:	400200a0 	.word	0x400200a0
24058038:	400200b8 	.word	0x400200b8
2405803c:	40020410 	.word	0x40020410
24058040:	40020428 	.word	0x40020428
24058044:	40020440 	.word	0x40020440
24058048:	40020458 	.word	0x40020458
2405804c:	40020470 	.word	0x40020470
24058050:	40020488 	.word	0x40020488
24058054:	400204a0 	.word	0x400204a0
24058058:	400204b8 	.word	0x400204b8
2405805c:	687b      	ldr	r3, [r7, #4]
2405805e:	681b      	ldr	r3, [r3, #0]
24058060:	681b      	ldr	r3, [r3, #0]
24058062:	f003 0302 	and.w	r3, r3, #2
24058066:	2b00      	cmp	r3, #0
24058068:	bf14      	ite	ne
2405806a:	2301      	movne	r3, #1
2405806c:	2300      	moveq	r3, #0
2405806e:	b2db      	uxtb	r3, r3
24058070:	2b00      	cmp	r3, #0
24058072:	f000 8087 	beq.w	24058184 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24058076:	687b      	ldr	r3, [r7, #4]
24058078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405807a:	f003 031f 	and.w	r3, r3, #31
2405807e:	2220      	movs	r2, #32
24058080:	409a      	lsls	r2, r3
24058082:	6a3b      	ldr	r3, [r7, #32]
24058084:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
24058086:	687b      	ldr	r3, [r7, #4]
24058088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2405808c:	b2db      	uxtb	r3, r3
2405808e:	2b04      	cmp	r3, #4
24058090:	d139      	bne.n	24058106 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24058092:	687b      	ldr	r3, [r7, #4]
24058094:	681b      	ldr	r3, [r3, #0]
24058096:	681a      	ldr	r2, [r3, #0]
24058098:	687b      	ldr	r3, [r7, #4]
2405809a:	681b      	ldr	r3, [r3, #0]
2405809c:	f022 0216 	bic.w	r2, r2, #22
240580a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240580a2:	687b      	ldr	r3, [r7, #4]
240580a4:	681b      	ldr	r3, [r3, #0]
240580a6:	695a      	ldr	r2, [r3, #20]
240580a8:	687b      	ldr	r3, [r7, #4]
240580aa:	681b      	ldr	r3, [r3, #0]
240580ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
240580b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
240580b2:	687b      	ldr	r3, [r7, #4]
240580b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240580b6:	2b00      	cmp	r3, #0
240580b8:	d103      	bne.n	240580c2 <HAL_DMA_IRQHandler+0x736>
240580ba:	687b      	ldr	r3, [r7, #4]
240580bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240580be:	2b00      	cmp	r3, #0
240580c0:	d007      	beq.n	240580d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
240580c2:	687b      	ldr	r3, [r7, #4]
240580c4:	681b      	ldr	r3, [r3, #0]
240580c6:	681a      	ldr	r2, [r3, #0]
240580c8:	687b      	ldr	r3, [r7, #4]
240580ca:	681b      	ldr	r3, [r3, #0]
240580cc:	f022 0208 	bic.w	r2, r2, #8
240580d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240580d2:	687b      	ldr	r3, [r7, #4]
240580d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240580d6:	f003 031f 	and.w	r3, r3, #31
240580da:	223f      	movs	r2, #63	; 0x3f
240580dc:	409a      	lsls	r2, r3
240580de:	6a3b      	ldr	r3, [r7, #32]
240580e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
240580e2:	687b      	ldr	r3, [r7, #4]
240580e4:	2201      	movs	r2, #1
240580e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
240580ea:	687b      	ldr	r3, [r7, #4]
240580ec:	2200      	movs	r2, #0
240580ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
240580f2:	687b      	ldr	r3, [r7, #4]
240580f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240580f6:	2b00      	cmp	r3, #0
240580f8:	f000 8382 	beq.w	24058800 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
240580fc:	687b      	ldr	r3, [r7, #4]
240580fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24058100:	6878      	ldr	r0, [r7, #4]
24058102:	4798      	blx	r3
          }
          return;
24058104:	e37c      	b.n	24058800 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24058106:	687b      	ldr	r3, [r7, #4]
24058108:	681b      	ldr	r3, [r3, #0]
2405810a:	681b      	ldr	r3, [r3, #0]
2405810c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24058110:	2b00      	cmp	r3, #0
24058112:	d018      	beq.n	24058146 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24058114:	687b      	ldr	r3, [r7, #4]
24058116:	681b      	ldr	r3, [r3, #0]
24058118:	681b      	ldr	r3, [r3, #0]
2405811a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2405811e:	2b00      	cmp	r3, #0
24058120:	d108      	bne.n	24058134 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
24058122:	687b      	ldr	r3, [r7, #4]
24058124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24058126:	2b00      	cmp	r3, #0
24058128:	d02c      	beq.n	24058184 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
2405812a:	687b      	ldr	r3, [r7, #4]
2405812c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405812e:	6878      	ldr	r0, [r7, #4]
24058130:	4798      	blx	r3
24058132:	e027      	b.n	24058184 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
24058134:	687b      	ldr	r3, [r7, #4]
24058136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24058138:	2b00      	cmp	r3, #0
2405813a:	d023      	beq.n	24058184 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
2405813c:	687b      	ldr	r3, [r7, #4]
2405813e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24058140:	6878      	ldr	r0, [r7, #4]
24058142:	4798      	blx	r3
24058144:	e01e      	b.n	24058184 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24058146:	687b      	ldr	r3, [r7, #4]
24058148:	681b      	ldr	r3, [r3, #0]
2405814a:	681b      	ldr	r3, [r3, #0]
2405814c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24058150:	2b00      	cmp	r3, #0
24058152:	d10f      	bne.n	24058174 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24058154:	687b      	ldr	r3, [r7, #4]
24058156:	681b      	ldr	r3, [r3, #0]
24058158:	681a      	ldr	r2, [r3, #0]
2405815a:	687b      	ldr	r3, [r7, #4]
2405815c:	681b      	ldr	r3, [r3, #0]
2405815e:	f022 0210 	bic.w	r2, r2, #16
24058162:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
24058164:	687b      	ldr	r3, [r7, #4]
24058166:	2201      	movs	r2, #1
24058168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
2405816c:	687b      	ldr	r3, [r7, #4]
2405816e:	2200      	movs	r2, #0
24058170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
24058174:	687b      	ldr	r3, [r7, #4]
24058176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24058178:	2b00      	cmp	r3, #0
2405817a:	d003      	beq.n	24058184 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
2405817c:	687b      	ldr	r3, [r7, #4]
2405817e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24058180:	6878      	ldr	r0, [r7, #4]
24058182:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24058184:	687b      	ldr	r3, [r7, #4]
24058186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24058188:	2b00      	cmp	r3, #0
2405818a:	f000 833e 	beq.w	2405880a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
2405818e:	687b      	ldr	r3, [r7, #4]
24058190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24058192:	f003 0301 	and.w	r3, r3, #1
24058196:	2b00      	cmp	r3, #0
24058198:	f000 8088 	beq.w	240582ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
2405819c:	687b      	ldr	r3, [r7, #4]
2405819e:	2204      	movs	r2, #4
240581a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
240581a4:	687b      	ldr	r3, [r7, #4]
240581a6:	681b      	ldr	r3, [r3, #0]
240581a8:	4a89      	ldr	r2, [pc, #548]	; (240583d0 <HAL_DMA_IRQHandler+0xa44>)
240581aa:	4293      	cmp	r3, r2
240581ac:	d04a      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
240581ae:	687b      	ldr	r3, [r7, #4]
240581b0:	681b      	ldr	r3, [r3, #0]
240581b2:	4a88      	ldr	r2, [pc, #544]	; (240583d4 <HAL_DMA_IRQHandler+0xa48>)
240581b4:	4293      	cmp	r3, r2
240581b6:	d045      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
240581b8:	687b      	ldr	r3, [r7, #4]
240581ba:	681b      	ldr	r3, [r3, #0]
240581bc:	4a86      	ldr	r2, [pc, #536]	; (240583d8 <HAL_DMA_IRQHandler+0xa4c>)
240581be:	4293      	cmp	r3, r2
240581c0:	d040      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
240581c2:	687b      	ldr	r3, [r7, #4]
240581c4:	681b      	ldr	r3, [r3, #0]
240581c6:	4a85      	ldr	r2, [pc, #532]	; (240583dc <HAL_DMA_IRQHandler+0xa50>)
240581c8:	4293      	cmp	r3, r2
240581ca:	d03b      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
240581cc:	687b      	ldr	r3, [r7, #4]
240581ce:	681b      	ldr	r3, [r3, #0]
240581d0:	4a83      	ldr	r2, [pc, #524]	; (240583e0 <HAL_DMA_IRQHandler+0xa54>)
240581d2:	4293      	cmp	r3, r2
240581d4:	d036      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
240581d6:	687b      	ldr	r3, [r7, #4]
240581d8:	681b      	ldr	r3, [r3, #0]
240581da:	4a82      	ldr	r2, [pc, #520]	; (240583e4 <HAL_DMA_IRQHandler+0xa58>)
240581dc:	4293      	cmp	r3, r2
240581de:	d031      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
240581e0:	687b      	ldr	r3, [r7, #4]
240581e2:	681b      	ldr	r3, [r3, #0]
240581e4:	4a80      	ldr	r2, [pc, #512]	; (240583e8 <HAL_DMA_IRQHandler+0xa5c>)
240581e6:	4293      	cmp	r3, r2
240581e8:	d02c      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
240581ea:	687b      	ldr	r3, [r7, #4]
240581ec:	681b      	ldr	r3, [r3, #0]
240581ee:	4a7f      	ldr	r2, [pc, #508]	; (240583ec <HAL_DMA_IRQHandler+0xa60>)
240581f0:	4293      	cmp	r3, r2
240581f2:	d027      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
240581f4:	687b      	ldr	r3, [r7, #4]
240581f6:	681b      	ldr	r3, [r3, #0]
240581f8:	4a7d      	ldr	r2, [pc, #500]	; (240583f0 <HAL_DMA_IRQHandler+0xa64>)
240581fa:	4293      	cmp	r3, r2
240581fc:	d022      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
240581fe:	687b      	ldr	r3, [r7, #4]
24058200:	681b      	ldr	r3, [r3, #0]
24058202:	4a7c      	ldr	r2, [pc, #496]	; (240583f4 <HAL_DMA_IRQHandler+0xa68>)
24058204:	4293      	cmp	r3, r2
24058206:	d01d      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
24058208:	687b      	ldr	r3, [r7, #4]
2405820a:	681b      	ldr	r3, [r3, #0]
2405820c:	4a7a      	ldr	r2, [pc, #488]	; (240583f8 <HAL_DMA_IRQHandler+0xa6c>)
2405820e:	4293      	cmp	r3, r2
24058210:	d018      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
24058212:	687b      	ldr	r3, [r7, #4]
24058214:	681b      	ldr	r3, [r3, #0]
24058216:	4a79      	ldr	r2, [pc, #484]	; (240583fc <HAL_DMA_IRQHandler+0xa70>)
24058218:	4293      	cmp	r3, r2
2405821a:	d013      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
2405821c:	687b      	ldr	r3, [r7, #4]
2405821e:	681b      	ldr	r3, [r3, #0]
24058220:	4a77      	ldr	r2, [pc, #476]	; (24058400 <HAL_DMA_IRQHandler+0xa74>)
24058222:	4293      	cmp	r3, r2
24058224:	d00e      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
24058226:	687b      	ldr	r3, [r7, #4]
24058228:	681b      	ldr	r3, [r3, #0]
2405822a:	4a76      	ldr	r2, [pc, #472]	; (24058404 <HAL_DMA_IRQHandler+0xa78>)
2405822c:	4293      	cmp	r3, r2
2405822e:	d009      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
24058230:	687b      	ldr	r3, [r7, #4]
24058232:	681b      	ldr	r3, [r3, #0]
24058234:	4a74      	ldr	r2, [pc, #464]	; (24058408 <HAL_DMA_IRQHandler+0xa7c>)
24058236:	4293      	cmp	r3, r2
24058238:	d004      	beq.n	24058244 <HAL_DMA_IRQHandler+0x8b8>
2405823a:	687b      	ldr	r3, [r7, #4]
2405823c:	681b      	ldr	r3, [r3, #0]
2405823e:	4a73      	ldr	r2, [pc, #460]	; (2405840c <HAL_DMA_IRQHandler+0xa80>)
24058240:	4293      	cmp	r3, r2
24058242:	d108      	bne.n	24058256 <HAL_DMA_IRQHandler+0x8ca>
24058244:	687b      	ldr	r3, [r7, #4]
24058246:	681b      	ldr	r3, [r3, #0]
24058248:	681a      	ldr	r2, [r3, #0]
2405824a:	687b      	ldr	r3, [r7, #4]
2405824c:	681b      	ldr	r3, [r3, #0]
2405824e:	f022 0201 	bic.w	r2, r2, #1
24058252:	601a      	str	r2, [r3, #0]
24058254:	e007      	b.n	24058266 <HAL_DMA_IRQHandler+0x8da>
24058256:	687b      	ldr	r3, [r7, #4]
24058258:	681b      	ldr	r3, [r3, #0]
2405825a:	681a      	ldr	r2, [r3, #0]
2405825c:	687b      	ldr	r3, [r7, #4]
2405825e:	681b      	ldr	r3, [r3, #0]
24058260:	f022 0201 	bic.w	r2, r2, #1
24058264:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
24058266:	68fb      	ldr	r3, [r7, #12]
24058268:	3301      	adds	r3, #1
2405826a:	60fb      	str	r3, [r7, #12]
2405826c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2405826e:	429a      	cmp	r2, r3
24058270:	d307      	bcc.n	24058282 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24058272:	687b      	ldr	r3, [r7, #4]
24058274:	681b      	ldr	r3, [r3, #0]
24058276:	681b      	ldr	r3, [r3, #0]
24058278:	f003 0301 	and.w	r3, r3, #1
2405827c:	2b00      	cmp	r3, #0
2405827e:	d1f2      	bne.n	24058266 <HAL_DMA_IRQHandler+0x8da>
24058280:	e000      	b.n	24058284 <HAL_DMA_IRQHandler+0x8f8>
            break;
24058282:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24058284:	687b      	ldr	r3, [r7, #4]
24058286:	681b      	ldr	r3, [r3, #0]
24058288:	681b      	ldr	r3, [r3, #0]
2405828a:	f003 0301 	and.w	r3, r3, #1
2405828e:	2b00      	cmp	r3, #0
24058290:	d004      	beq.n	2405829c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
24058292:	687b      	ldr	r3, [r7, #4]
24058294:	2203      	movs	r2, #3
24058296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
2405829a:	e003      	b.n	240582a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
2405829c:	687b      	ldr	r3, [r7, #4]
2405829e:	2201      	movs	r2, #1
240582a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
240582a4:	687b      	ldr	r3, [r7, #4]
240582a6:	2200      	movs	r2, #0
240582a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
240582ac:	687b      	ldr	r3, [r7, #4]
240582ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240582b0:	2b00      	cmp	r3, #0
240582b2:	f000 82aa 	beq.w	2405880a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
240582b6:	687b      	ldr	r3, [r7, #4]
240582b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240582ba:	6878      	ldr	r0, [r7, #4]
240582bc:	4798      	blx	r3
240582be:	e2a4      	b.n	2405880a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
240582c0:	687b      	ldr	r3, [r7, #4]
240582c2:	681b      	ldr	r3, [r3, #0]
240582c4:	4a52      	ldr	r2, [pc, #328]	; (24058410 <HAL_DMA_IRQHandler+0xa84>)
240582c6:	4293      	cmp	r3, r2
240582c8:	d04a      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
240582ca:	687b      	ldr	r3, [r7, #4]
240582cc:	681b      	ldr	r3, [r3, #0]
240582ce:	4a51      	ldr	r2, [pc, #324]	; (24058414 <HAL_DMA_IRQHandler+0xa88>)
240582d0:	4293      	cmp	r3, r2
240582d2:	d045      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
240582d4:	687b      	ldr	r3, [r7, #4]
240582d6:	681b      	ldr	r3, [r3, #0]
240582d8:	4a4f      	ldr	r2, [pc, #316]	; (24058418 <HAL_DMA_IRQHandler+0xa8c>)
240582da:	4293      	cmp	r3, r2
240582dc:	d040      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
240582de:	687b      	ldr	r3, [r7, #4]
240582e0:	681b      	ldr	r3, [r3, #0]
240582e2:	4a4e      	ldr	r2, [pc, #312]	; (2405841c <HAL_DMA_IRQHandler+0xa90>)
240582e4:	4293      	cmp	r3, r2
240582e6:	d03b      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
240582e8:	687b      	ldr	r3, [r7, #4]
240582ea:	681b      	ldr	r3, [r3, #0]
240582ec:	4a4c      	ldr	r2, [pc, #304]	; (24058420 <HAL_DMA_IRQHandler+0xa94>)
240582ee:	4293      	cmp	r3, r2
240582f0:	d036      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
240582f2:	687b      	ldr	r3, [r7, #4]
240582f4:	681b      	ldr	r3, [r3, #0]
240582f6:	4a4b      	ldr	r2, [pc, #300]	; (24058424 <HAL_DMA_IRQHandler+0xa98>)
240582f8:	4293      	cmp	r3, r2
240582fa:	d031      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
240582fc:	687b      	ldr	r3, [r7, #4]
240582fe:	681b      	ldr	r3, [r3, #0]
24058300:	4a49      	ldr	r2, [pc, #292]	; (24058428 <HAL_DMA_IRQHandler+0xa9c>)
24058302:	4293      	cmp	r3, r2
24058304:	d02c      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
24058306:	687b      	ldr	r3, [r7, #4]
24058308:	681b      	ldr	r3, [r3, #0]
2405830a:	4a48      	ldr	r2, [pc, #288]	; (2405842c <HAL_DMA_IRQHandler+0xaa0>)
2405830c:	4293      	cmp	r3, r2
2405830e:	d027      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
24058310:	687b      	ldr	r3, [r7, #4]
24058312:	681b      	ldr	r3, [r3, #0]
24058314:	4a46      	ldr	r2, [pc, #280]	; (24058430 <HAL_DMA_IRQHandler+0xaa4>)
24058316:	4293      	cmp	r3, r2
24058318:	d022      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
2405831a:	687b      	ldr	r3, [r7, #4]
2405831c:	681b      	ldr	r3, [r3, #0]
2405831e:	4a45      	ldr	r2, [pc, #276]	; (24058434 <HAL_DMA_IRQHandler+0xaa8>)
24058320:	4293      	cmp	r3, r2
24058322:	d01d      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
24058324:	687b      	ldr	r3, [r7, #4]
24058326:	681b      	ldr	r3, [r3, #0]
24058328:	4a43      	ldr	r2, [pc, #268]	; (24058438 <HAL_DMA_IRQHandler+0xaac>)
2405832a:	4293      	cmp	r3, r2
2405832c:	d018      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
2405832e:	687b      	ldr	r3, [r7, #4]
24058330:	681b      	ldr	r3, [r3, #0]
24058332:	4a42      	ldr	r2, [pc, #264]	; (2405843c <HAL_DMA_IRQHandler+0xab0>)
24058334:	4293      	cmp	r3, r2
24058336:	d013      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
24058338:	687b      	ldr	r3, [r7, #4]
2405833a:	681b      	ldr	r3, [r3, #0]
2405833c:	4a40      	ldr	r2, [pc, #256]	; (24058440 <HAL_DMA_IRQHandler+0xab4>)
2405833e:	4293      	cmp	r3, r2
24058340:	d00e      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
24058342:	687b      	ldr	r3, [r7, #4]
24058344:	681b      	ldr	r3, [r3, #0]
24058346:	4a3f      	ldr	r2, [pc, #252]	; (24058444 <HAL_DMA_IRQHandler+0xab8>)
24058348:	4293      	cmp	r3, r2
2405834a:	d009      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
2405834c:	687b      	ldr	r3, [r7, #4]
2405834e:	681b      	ldr	r3, [r3, #0]
24058350:	4a3d      	ldr	r2, [pc, #244]	; (24058448 <HAL_DMA_IRQHandler+0xabc>)
24058352:	4293      	cmp	r3, r2
24058354:	d004      	beq.n	24058360 <HAL_DMA_IRQHandler+0x9d4>
24058356:	687b      	ldr	r3, [r7, #4]
24058358:	681b      	ldr	r3, [r3, #0]
2405835a:	4a3c      	ldr	r2, [pc, #240]	; (2405844c <HAL_DMA_IRQHandler+0xac0>)
2405835c:	4293      	cmp	r3, r2
2405835e:	d101      	bne.n	24058364 <HAL_DMA_IRQHandler+0x9d8>
24058360:	2301      	movs	r3, #1
24058362:	e000      	b.n	24058366 <HAL_DMA_IRQHandler+0x9da>
24058364:	2300      	movs	r3, #0
24058366:	2b00      	cmp	r3, #0
24058368:	f000 824f 	beq.w	2405880a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
2405836c:	687b      	ldr	r3, [r7, #4]
2405836e:	681b      	ldr	r3, [r3, #0]
24058370:	681b      	ldr	r3, [r3, #0]
24058372:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24058374:	687b      	ldr	r3, [r7, #4]
24058376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24058378:	f003 031f 	and.w	r3, r3, #31
2405837c:	2204      	movs	r2, #4
2405837e:	409a      	lsls	r2, r3
24058380:	697b      	ldr	r3, [r7, #20]
24058382:	4013      	ands	r3, r2
24058384:	2b00      	cmp	r3, #0
24058386:	f000 80dd 	beq.w	24058544 <HAL_DMA_IRQHandler+0xbb8>
2405838a:	693b      	ldr	r3, [r7, #16]
2405838c:	f003 0304 	and.w	r3, r3, #4
24058390:	2b00      	cmp	r3, #0
24058392:	f000 80d7 	beq.w	24058544 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24058396:	687b      	ldr	r3, [r7, #4]
24058398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405839a:	f003 031f 	and.w	r3, r3, #31
2405839e:	2204      	movs	r2, #4
240583a0:	409a      	lsls	r2, r3
240583a2:	69fb      	ldr	r3, [r7, #28]
240583a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240583a6:	693b      	ldr	r3, [r7, #16]
240583a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
240583ac:	2b00      	cmp	r3, #0
240583ae:	d059      	beq.n	24058464 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
240583b0:	693b      	ldr	r3, [r7, #16]
240583b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240583b6:	2b00      	cmp	r3, #0
240583b8:	d14a      	bne.n	24058450 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
240583ba:	687b      	ldr	r3, [r7, #4]
240583bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240583be:	2b00      	cmp	r3, #0
240583c0:	f000 8220 	beq.w	24058804 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
240583c4:	687b      	ldr	r3, [r7, #4]
240583c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240583c8:	6878      	ldr	r0, [r7, #4]
240583ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240583cc:	e21a      	b.n	24058804 <HAL_DMA_IRQHandler+0xe78>
240583ce:	bf00      	nop
240583d0:	40020010 	.word	0x40020010
240583d4:	40020028 	.word	0x40020028
240583d8:	40020040 	.word	0x40020040
240583dc:	40020058 	.word	0x40020058
240583e0:	40020070 	.word	0x40020070
240583e4:	40020088 	.word	0x40020088
240583e8:	400200a0 	.word	0x400200a0
240583ec:	400200b8 	.word	0x400200b8
240583f0:	40020410 	.word	0x40020410
240583f4:	40020428 	.word	0x40020428
240583f8:	40020440 	.word	0x40020440
240583fc:	40020458 	.word	0x40020458
24058400:	40020470 	.word	0x40020470
24058404:	40020488 	.word	0x40020488
24058408:	400204a0 	.word	0x400204a0
2405840c:	400204b8 	.word	0x400204b8
24058410:	48022c08 	.word	0x48022c08
24058414:	48022c1c 	.word	0x48022c1c
24058418:	48022c30 	.word	0x48022c30
2405841c:	48022c44 	.word	0x48022c44
24058420:	48022c58 	.word	0x48022c58
24058424:	48022c6c 	.word	0x48022c6c
24058428:	48022c80 	.word	0x48022c80
2405842c:	48022c94 	.word	0x48022c94
24058430:	58025408 	.word	0x58025408
24058434:	5802541c 	.word	0x5802541c
24058438:	58025430 	.word	0x58025430
2405843c:	58025444 	.word	0x58025444
24058440:	58025458 	.word	0x58025458
24058444:	5802546c 	.word	0x5802546c
24058448:	58025480 	.word	0x58025480
2405844c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
24058450:	687b      	ldr	r3, [r7, #4]
24058452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24058454:	2b00      	cmp	r3, #0
24058456:	f000 81d5 	beq.w	24058804 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
2405845a:	687b      	ldr	r3, [r7, #4]
2405845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405845e:	6878      	ldr	r0, [r7, #4]
24058460:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24058462:	e1cf      	b.n	24058804 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24058464:	693b      	ldr	r3, [r7, #16]
24058466:	f003 0320 	and.w	r3, r3, #32
2405846a:	2b00      	cmp	r3, #0
2405846c:	d160      	bne.n	24058530 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
2405846e:	687b      	ldr	r3, [r7, #4]
24058470:	681b      	ldr	r3, [r3, #0]
24058472:	4a7f      	ldr	r2, [pc, #508]	; (24058670 <HAL_DMA_IRQHandler+0xce4>)
24058474:	4293      	cmp	r3, r2
24058476:	d04a      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
24058478:	687b      	ldr	r3, [r7, #4]
2405847a:	681b      	ldr	r3, [r3, #0]
2405847c:	4a7d      	ldr	r2, [pc, #500]	; (24058674 <HAL_DMA_IRQHandler+0xce8>)
2405847e:	4293      	cmp	r3, r2
24058480:	d045      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
24058482:	687b      	ldr	r3, [r7, #4]
24058484:	681b      	ldr	r3, [r3, #0]
24058486:	4a7c      	ldr	r2, [pc, #496]	; (24058678 <HAL_DMA_IRQHandler+0xcec>)
24058488:	4293      	cmp	r3, r2
2405848a:	d040      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
2405848c:	687b      	ldr	r3, [r7, #4]
2405848e:	681b      	ldr	r3, [r3, #0]
24058490:	4a7a      	ldr	r2, [pc, #488]	; (2405867c <HAL_DMA_IRQHandler+0xcf0>)
24058492:	4293      	cmp	r3, r2
24058494:	d03b      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
24058496:	687b      	ldr	r3, [r7, #4]
24058498:	681b      	ldr	r3, [r3, #0]
2405849a:	4a79      	ldr	r2, [pc, #484]	; (24058680 <HAL_DMA_IRQHandler+0xcf4>)
2405849c:	4293      	cmp	r3, r2
2405849e:	d036      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
240584a0:	687b      	ldr	r3, [r7, #4]
240584a2:	681b      	ldr	r3, [r3, #0]
240584a4:	4a77      	ldr	r2, [pc, #476]	; (24058684 <HAL_DMA_IRQHandler+0xcf8>)
240584a6:	4293      	cmp	r3, r2
240584a8:	d031      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
240584aa:	687b      	ldr	r3, [r7, #4]
240584ac:	681b      	ldr	r3, [r3, #0]
240584ae:	4a76      	ldr	r2, [pc, #472]	; (24058688 <HAL_DMA_IRQHandler+0xcfc>)
240584b0:	4293      	cmp	r3, r2
240584b2:	d02c      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
240584b4:	687b      	ldr	r3, [r7, #4]
240584b6:	681b      	ldr	r3, [r3, #0]
240584b8:	4a74      	ldr	r2, [pc, #464]	; (2405868c <HAL_DMA_IRQHandler+0xd00>)
240584ba:	4293      	cmp	r3, r2
240584bc:	d027      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
240584be:	687b      	ldr	r3, [r7, #4]
240584c0:	681b      	ldr	r3, [r3, #0]
240584c2:	4a73      	ldr	r2, [pc, #460]	; (24058690 <HAL_DMA_IRQHandler+0xd04>)
240584c4:	4293      	cmp	r3, r2
240584c6:	d022      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
240584c8:	687b      	ldr	r3, [r7, #4]
240584ca:	681b      	ldr	r3, [r3, #0]
240584cc:	4a71      	ldr	r2, [pc, #452]	; (24058694 <HAL_DMA_IRQHandler+0xd08>)
240584ce:	4293      	cmp	r3, r2
240584d0:	d01d      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
240584d2:	687b      	ldr	r3, [r7, #4]
240584d4:	681b      	ldr	r3, [r3, #0]
240584d6:	4a70      	ldr	r2, [pc, #448]	; (24058698 <HAL_DMA_IRQHandler+0xd0c>)
240584d8:	4293      	cmp	r3, r2
240584da:	d018      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
240584dc:	687b      	ldr	r3, [r7, #4]
240584de:	681b      	ldr	r3, [r3, #0]
240584e0:	4a6e      	ldr	r2, [pc, #440]	; (2405869c <HAL_DMA_IRQHandler+0xd10>)
240584e2:	4293      	cmp	r3, r2
240584e4:	d013      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
240584e6:	687b      	ldr	r3, [r7, #4]
240584e8:	681b      	ldr	r3, [r3, #0]
240584ea:	4a6d      	ldr	r2, [pc, #436]	; (240586a0 <HAL_DMA_IRQHandler+0xd14>)
240584ec:	4293      	cmp	r3, r2
240584ee:	d00e      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
240584f0:	687b      	ldr	r3, [r7, #4]
240584f2:	681b      	ldr	r3, [r3, #0]
240584f4:	4a6b      	ldr	r2, [pc, #428]	; (240586a4 <HAL_DMA_IRQHandler+0xd18>)
240584f6:	4293      	cmp	r3, r2
240584f8:	d009      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
240584fa:	687b      	ldr	r3, [r7, #4]
240584fc:	681b      	ldr	r3, [r3, #0]
240584fe:	4a6a      	ldr	r2, [pc, #424]	; (240586a8 <HAL_DMA_IRQHandler+0xd1c>)
24058500:	4293      	cmp	r3, r2
24058502:	d004      	beq.n	2405850e <HAL_DMA_IRQHandler+0xb82>
24058504:	687b      	ldr	r3, [r7, #4]
24058506:	681b      	ldr	r3, [r3, #0]
24058508:	4a68      	ldr	r2, [pc, #416]	; (240586ac <HAL_DMA_IRQHandler+0xd20>)
2405850a:	4293      	cmp	r3, r2
2405850c:	d108      	bne.n	24058520 <HAL_DMA_IRQHandler+0xb94>
2405850e:	687b      	ldr	r3, [r7, #4]
24058510:	681b      	ldr	r3, [r3, #0]
24058512:	681a      	ldr	r2, [r3, #0]
24058514:	687b      	ldr	r3, [r7, #4]
24058516:	681b      	ldr	r3, [r3, #0]
24058518:	f022 0208 	bic.w	r2, r2, #8
2405851c:	601a      	str	r2, [r3, #0]
2405851e:	e007      	b.n	24058530 <HAL_DMA_IRQHandler+0xba4>
24058520:	687b      	ldr	r3, [r7, #4]
24058522:	681b      	ldr	r3, [r3, #0]
24058524:	681a      	ldr	r2, [r3, #0]
24058526:	687b      	ldr	r3, [r7, #4]
24058528:	681b      	ldr	r3, [r3, #0]
2405852a:	f022 0204 	bic.w	r2, r2, #4
2405852e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
24058530:	687b      	ldr	r3, [r7, #4]
24058532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24058534:	2b00      	cmp	r3, #0
24058536:	f000 8165 	beq.w	24058804 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
2405853a:	687b      	ldr	r3, [r7, #4]
2405853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405853e:	6878      	ldr	r0, [r7, #4]
24058540:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24058542:	e15f      	b.n	24058804 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24058544:	687b      	ldr	r3, [r7, #4]
24058546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24058548:	f003 031f 	and.w	r3, r3, #31
2405854c:	2202      	movs	r2, #2
2405854e:	409a      	lsls	r2, r3
24058550:	697b      	ldr	r3, [r7, #20]
24058552:	4013      	ands	r3, r2
24058554:	2b00      	cmp	r3, #0
24058556:	f000 80c5 	beq.w	240586e4 <HAL_DMA_IRQHandler+0xd58>
2405855a:	693b      	ldr	r3, [r7, #16]
2405855c:	f003 0302 	and.w	r3, r3, #2
24058560:	2b00      	cmp	r3, #0
24058562:	f000 80bf 	beq.w	240586e4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24058566:	687b      	ldr	r3, [r7, #4]
24058568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405856a:	f003 031f 	and.w	r3, r3, #31
2405856e:	2202      	movs	r2, #2
24058570:	409a      	lsls	r2, r3
24058572:	69fb      	ldr	r3, [r7, #28]
24058574:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24058576:	693b      	ldr	r3, [r7, #16]
24058578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2405857c:	2b00      	cmp	r3, #0
2405857e:	d018      	beq.n	240585b2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24058580:	693b      	ldr	r3, [r7, #16]
24058582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24058586:	2b00      	cmp	r3, #0
24058588:	d109      	bne.n	2405859e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
2405858a:	687b      	ldr	r3, [r7, #4]
2405858c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405858e:	2b00      	cmp	r3, #0
24058590:	f000 813a 	beq.w	24058808 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
24058594:	687b      	ldr	r3, [r7, #4]
24058596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24058598:	6878      	ldr	r0, [r7, #4]
2405859a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405859c:	e134      	b.n	24058808 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
2405859e:	687b      	ldr	r3, [r7, #4]
240585a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240585a2:	2b00      	cmp	r3, #0
240585a4:	f000 8130 	beq.w	24058808 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
240585a8:	687b      	ldr	r3, [r7, #4]
240585aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240585ac:	6878      	ldr	r0, [r7, #4]
240585ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240585b0:	e12a      	b.n	24058808 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
240585b2:	693b      	ldr	r3, [r7, #16]
240585b4:	f003 0320 	and.w	r3, r3, #32
240585b8:	2b00      	cmp	r3, #0
240585ba:	f040 8089 	bne.w	240586d0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
240585be:	687b      	ldr	r3, [r7, #4]
240585c0:	681b      	ldr	r3, [r3, #0]
240585c2:	4a2b      	ldr	r2, [pc, #172]	; (24058670 <HAL_DMA_IRQHandler+0xce4>)
240585c4:	4293      	cmp	r3, r2
240585c6:	d04a      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
240585c8:	687b      	ldr	r3, [r7, #4]
240585ca:	681b      	ldr	r3, [r3, #0]
240585cc:	4a29      	ldr	r2, [pc, #164]	; (24058674 <HAL_DMA_IRQHandler+0xce8>)
240585ce:	4293      	cmp	r3, r2
240585d0:	d045      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
240585d2:	687b      	ldr	r3, [r7, #4]
240585d4:	681b      	ldr	r3, [r3, #0]
240585d6:	4a28      	ldr	r2, [pc, #160]	; (24058678 <HAL_DMA_IRQHandler+0xcec>)
240585d8:	4293      	cmp	r3, r2
240585da:	d040      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
240585dc:	687b      	ldr	r3, [r7, #4]
240585de:	681b      	ldr	r3, [r3, #0]
240585e0:	4a26      	ldr	r2, [pc, #152]	; (2405867c <HAL_DMA_IRQHandler+0xcf0>)
240585e2:	4293      	cmp	r3, r2
240585e4:	d03b      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
240585e6:	687b      	ldr	r3, [r7, #4]
240585e8:	681b      	ldr	r3, [r3, #0]
240585ea:	4a25      	ldr	r2, [pc, #148]	; (24058680 <HAL_DMA_IRQHandler+0xcf4>)
240585ec:	4293      	cmp	r3, r2
240585ee:	d036      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
240585f0:	687b      	ldr	r3, [r7, #4]
240585f2:	681b      	ldr	r3, [r3, #0]
240585f4:	4a23      	ldr	r2, [pc, #140]	; (24058684 <HAL_DMA_IRQHandler+0xcf8>)
240585f6:	4293      	cmp	r3, r2
240585f8:	d031      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
240585fa:	687b      	ldr	r3, [r7, #4]
240585fc:	681b      	ldr	r3, [r3, #0]
240585fe:	4a22      	ldr	r2, [pc, #136]	; (24058688 <HAL_DMA_IRQHandler+0xcfc>)
24058600:	4293      	cmp	r3, r2
24058602:	d02c      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
24058604:	687b      	ldr	r3, [r7, #4]
24058606:	681b      	ldr	r3, [r3, #0]
24058608:	4a20      	ldr	r2, [pc, #128]	; (2405868c <HAL_DMA_IRQHandler+0xd00>)
2405860a:	4293      	cmp	r3, r2
2405860c:	d027      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
2405860e:	687b      	ldr	r3, [r7, #4]
24058610:	681b      	ldr	r3, [r3, #0]
24058612:	4a1f      	ldr	r2, [pc, #124]	; (24058690 <HAL_DMA_IRQHandler+0xd04>)
24058614:	4293      	cmp	r3, r2
24058616:	d022      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
24058618:	687b      	ldr	r3, [r7, #4]
2405861a:	681b      	ldr	r3, [r3, #0]
2405861c:	4a1d      	ldr	r2, [pc, #116]	; (24058694 <HAL_DMA_IRQHandler+0xd08>)
2405861e:	4293      	cmp	r3, r2
24058620:	d01d      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
24058622:	687b      	ldr	r3, [r7, #4]
24058624:	681b      	ldr	r3, [r3, #0]
24058626:	4a1c      	ldr	r2, [pc, #112]	; (24058698 <HAL_DMA_IRQHandler+0xd0c>)
24058628:	4293      	cmp	r3, r2
2405862a:	d018      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
2405862c:	687b      	ldr	r3, [r7, #4]
2405862e:	681b      	ldr	r3, [r3, #0]
24058630:	4a1a      	ldr	r2, [pc, #104]	; (2405869c <HAL_DMA_IRQHandler+0xd10>)
24058632:	4293      	cmp	r3, r2
24058634:	d013      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
24058636:	687b      	ldr	r3, [r7, #4]
24058638:	681b      	ldr	r3, [r3, #0]
2405863a:	4a19      	ldr	r2, [pc, #100]	; (240586a0 <HAL_DMA_IRQHandler+0xd14>)
2405863c:	4293      	cmp	r3, r2
2405863e:	d00e      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
24058640:	687b      	ldr	r3, [r7, #4]
24058642:	681b      	ldr	r3, [r3, #0]
24058644:	4a17      	ldr	r2, [pc, #92]	; (240586a4 <HAL_DMA_IRQHandler+0xd18>)
24058646:	4293      	cmp	r3, r2
24058648:	d009      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
2405864a:	687b      	ldr	r3, [r7, #4]
2405864c:	681b      	ldr	r3, [r3, #0]
2405864e:	4a16      	ldr	r2, [pc, #88]	; (240586a8 <HAL_DMA_IRQHandler+0xd1c>)
24058650:	4293      	cmp	r3, r2
24058652:	d004      	beq.n	2405865e <HAL_DMA_IRQHandler+0xcd2>
24058654:	687b      	ldr	r3, [r7, #4]
24058656:	681b      	ldr	r3, [r3, #0]
24058658:	4a14      	ldr	r2, [pc, #80]	; (240586ac <HAL_DMA_IRQHandler+0xd20>)
2405865a:	4293      	cmp	r3, r2
2405865c:	d128      	bne.n	240586b0 <HAL_DMA_IRQHandler+0xd24>
2405865e:	687b      	ldr	r3, [r7, #4]
24058660:	681b      	ldr	r3, [r3, #0]
24058662:	681a      	ldr	r2, [r3, #0]
24058664:	687b      	ldr	r3, [r7, #4]
24058666:	681b      	ldr	r3, [r3, #0]
24058668:	f022 0214 	bic.w	r2, r2, #20
2405866c:	601a      	str	r2, [r3, #0]
2405866e:	e027      	b.n	240586c0 <HAL_DMA_IRQHandler+0xd34>
24058670:	40020010 	.word	0x40020010
24058674:	40020028 	.word	0x40020028
24058678:	40020040 	.word	0x40020040
2405867c:	40020058 	.word	0x40020058
24058680:	40020070 	.word	0x40020070
24058684:	40020088 	.word	0x40020088
24058688:	400200a0 	.word	0x400200a0
2405868c:	400200b8 	.word	0x400200b8
24058690:	40020410 	.word	0x40020410
24058694:	40020428 	.word	0x40020428
24058698:	40020440 	.word	0x40020440
2405869c:	40020458 	.word	0x40020458
240586a0:	40020470 	.word	0x40020470
240586a4:	40020488 	.word	0x40020488
240586a8:	400204a0 	.word	0x400204a0
240586ac:	400204b8 	.word	0x400204b8
240586b0:	687b      	ldr	r3, [r7, #4]
240586b2:	681b      	ldr	r3, [r3, #0]
240586b4:	681a      	ldr	r2, [r3, #0]
240586b6:	687b      	ldr	r3, [r7, #4]
240586b8:	681b      	ldr	r3, [r3, #0]
240586ba:	f022 020a 	bic.w	r2, r2, #10
240586be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
240586c0:	687b      	ldr	r3, [r7, #4]
240586c2:	2201      	movs	r2, #1
240586c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
240586c8:	687b      	ldr	r3, [r7, #4]
240586ca:	2200      	movs	r2, #0
240586cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
240586d0:	687b      	ldr	r3, [r7, #4]
240586d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240586d4:	2b00      	cmp	r3, #0
240586d6:	f000 8097 	beq.w	24058808 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
240586da:	687b      	ldr	r3, [r7, #4]
240586dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240586de:	6878      	ldr	r0, [r7, #4]
240586e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240586e2:	e091      	b.n	24058808 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
240586e4:	687b      	ldr	r3, [r7, #4]
240586e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240586e8:	f003 031f 	and.w	r3, r3, #31
240586ec:	2208      	movs	r2, #8
240586ee:	409a      	lsls	r2, r3
240586f0:	697b      	ldr	r3, [r7, #20]
240586f2:	4013      	ands	r3, r2
240586f4:	2b00      	cmp	r3, #0
240586f6:	f000 8088 	beq.w	2405880a <HAL_DMA_IRQHandler+0xe7e>
240586fa:	693b      	ldr	r3, [r7, #16]
240586fc:	f003 0308 	and.w	r3, r3, #8
24058700:	2b00      	cmp	r3, #0
24058702:	f000 8082 	beq.w	2405880a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24058706:	687b      	ldr	r3, [r7, #4]
24058708:	681b      	ldr	r3, [r3, #0]
2405870a:	4a41      	ldr	r2, [pc, #260]	; (24058810 <HAL_DMA_IRQHandler+0xe84>)
2405870c:	4293      	cmp	r3, r2
2405870e:	d04a      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
24058710:	687b      	ldr	r3, [r7, #4]
24058712:	681b      	ldr	r3, [r3, #0]
24058714:	4a3f      	ldr	r2, [pc, #252]	; (24058814 <HAL_DMA_IRQHandler+0xe88>)
24058716:	4293      	cmp	r3, r2
24058718:	d045      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
2405871a:	687b      	ldr	r3, [r7, #4]
2405871c:	681b      	ldr	r3, [r3, #0]
2405871e:	4a3e      	ldr	r2, [pc, #248]	; (24058818 <HAL_DMA_IRQHandler+0xe8c>)
24058720:	4293      	cmp	r3, r2
24058722:	d040      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
24058724:	687b      	ldr	r3, [r7, #4]
24058726:	681b      	ldr	r3, [r3, #0]
24058728:	4a3c      	ldr	r2, [pc, #240]	; (2405881c <HAL_DMA_IRQHandler+0xe90>)
2405872a:	4293      	cmp	r3, r2
2405872c:	d03b      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
2405872e:	687b      	ldr	r3, [r7, #4]
24058730:	681b      	ldr	r3, [r3, #0]
24058732:	4a3b      	ldr	r2, [pc, #236]	; (24058820 <HAL_DMA_IRQHandler+0xe94>)
24058734:	4293      	cmp	r3, r2
24058736:	d036      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
24058738:	687b      	ldr	r3, [r7, #4]
2405873a:	681b      	ldr	r3, [r3, #0]
2405873c:	4a39      	ldr	r2, [pc, #228]	; (24058824 <HAL_DMA_IRQHandler+0xe98>)
2405873e:	4293      	cmp	r3, r2
24058740:	d031      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
24058742:	687b      	ldr	r3, [r7, #4]
24058744:	681b      	ldr	r3, [r3, #0]
24058746:	4a38      	ldr	r2, [pc, #224]	; (24058828 <HAL_DMA_IRQHandler+0xe9c>)
24058748:	4293      	cmp	r3, r2
2405874a:	d02c      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
2405874c:	687b      	ldr	r3, [r7, #4]
2405874e:	681b      	ldr	r3, [r3, #0]
24058750:	4a36      	ldr	r2, [pc, #216]	; (2405882c <HAL_DMA_IRQHandler+0xea0>)
24058752:	4293      	cmp	r3, r2
24058754:	d027      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
24058756:	687b      	ldr	r3, [r7, #4]
24058758:	681b      	ldr	r3, [r3, #0]
2405875a:	4a35      	ldr	r2, [pc, #212]	; (24058830 <HAL_DMA_IRQHandler+0xea4>)
2405875c:	4293      	cmp	r3, r2
2405875e:	d022      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
24058760:	687b      	ldr	r3, [r7, #4]
24058762:	681b      	ldr	r3, [r3, #0]
24058764:	4a33      	ldr	r2, [pc, #204]	; (24058834 <HAL_DMA_IRQHandler+0xea8>)
24058766:	4293      	cmp	r3, r2
24058768:	d01d      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
2405876a:	687b      	ldr	r3, [r7, #4]
2405876c:	681b      	ldr	r3, [r3, #0]
2405876e:	4a32      	ldr	r2, [pc, #200]	; (24058838 <HAL_DMA_IRQHandler+0xeac>)
24058770:	4293      	cmp	r3, r2
24058772:	d018      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
24058774:	687b      	ldr	r3, [r7, #4]
24058776:	681b      	ldr	r3, [r3, #0]
24058778:	4a30      	ldr	r2, [pc, #192]	; (2405883c <HAL_DMA_IRQHandler+0xeb0>)
2405877a:	4293      	cmp	r3, r2
2405877c:	d013      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
2405877e:	687b      	ldr	r3, [r7, #4]
24058780:	681b      	ldr	r3, [r3, #0]
24058782:	4a2f      	ldr	r2, [pc, #188]	; (24058840 <HAL_DMA_IRQHandler+0xeb4>)
24058784:	4293      	cmp	r3, r2
24058786:	d00e      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
24058788:	687b      	ldr	r3, [r7, #4]
2405878a:	681b      	ldr	r3, [r3, #0]
2405878c:	4a2d      	ldr	r2, [pc, #180]	; (24058844 <HAL_DMA_IRQHandler+0xeb8>)
2405878e:	4293      	cmp	r3, r2
24058790:	d009      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
24058792:	687b      	ldr	r3, [r7, #4]
24058794:	681b      	ldr	r3, [r3, #0]
24058796:	4a2c      	ldr	r2, [pc, #176]	; (24058848 <HAL_DMA_IRQHandler+0xebc>)
24058798:	4293      	cmp	r3, r2
2405879a:	d004      	beq.n	240587a6 <HAL_DMA_IRQHandler+0xe1a>
2405879c:	687b      	ldr	r3, [r7, #4]
2405879e:	681b      	ldr	r3, [r3, #0]
240587a0:	4a2a      	ldr	r2, [pc, #168]	; (2405884c <HAL_DMA_IRQHandler+0xec0>)
240587a2:	4293      	cmp	r3, r2
240587a4:	d108      	bne.n	240587b8 <HAL_DMA_IRQHandler+0xe2c>
240587a6:	687b      	ldr	r3, [r7, #4]
240587a8:	681b      	ldr	r3, [r3, #0]
240587aa:	681a      	ldr	r2, [r3, #0]
240587ac:	687b      	ldr	r3, [r7, #4]
240587ae:	681b      	ldr	r3, [r3, #0]
240587b0:	f022 021c 	bic.w	r2, r2, #28
240587b4:	601a      	str	r2, [r3, #0]
240587b6:	e007      	b.n	240587c8 <HAL_DMA_IRQHandler+0xe3c>
240587b8:	687b      	ldr	r3, [r7, #4]
240587ba:	681b      	ldr	r3, [r3, #0]
240587bc:	681a      	ldr	r2, [r3, #0]
240587be:	687b      	ldr	r3, [r7, #4]
240587c0:	681b      	ldr	r3, [r3, #0]
240587c2:	f022 020e 	bic.w	r2, r2, #14
240587c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240587c8:	687b      	ldr	r3, [r7, #4]
240587ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240587cc:	f003 031f 	and.w	r3, r3, #31
240587d0:	2201      	movs	r2, #1
240587d2:	409a      	lsls	r2, r3
240587d4:	69fb      	ldr	r3, [r7, #28]
240587d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
240587d8:	687b      	ldr	r3, [r7, #4]
240587da:	2201      	movs	r2, #1
240587dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
240587de:	687b      	ldr	r3, [r7, #4]
240587e0:	2201      	movs	r2, #1
240587e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
240587e6:	687b      	ldr	r3, [r7, #4]
240587e8:	2200      	movs	r2, #0
240587ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
240587ee:	687b      	ldr	r3, [r7, #4]
240587f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240587f2:	2b00      	cmp	r3, #0
240587f4:	d009      	beq.n	2405880a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
240587f6:	687b      	ldr	r3, [r7, #4]
240587f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240587fa:	6878      	ldr	r0, [r7, #4]
240587fc:	4798      	blx	r3
240587fe:	e004      	b.n	2405880a <HAL_DMA_IRQHandler+0xe7e>
          return;
24058800:	bf00      	nop
24058802:	e002      	b.n	2405880a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24058804:	bf00      	nop
24058806:	e000      	b.n	2405880a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24058808:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
2405880a:	3728      	adds	r7, #40	; 0x28
2405880c:	46bd      	mov	sp, r7
2405880e:	bd80      	pop	{r7, pc}
24058810:	40020010 	.word	0x40020010
24058814:	40020028 	.word	0x40020028
24058818:	40020040 	.word	0x40020040
2405881c:	40020058 	.word	0x40020058
24058820:	40020070 	.word	0x40020070
24058824:	40020088 	.word	0x40020088
24058828:	400200a0 	.word	0x400200a0
2405882c:	400200b8 	.word	0x400200b8
24058830:	40020410 	.word	0x40020410
24058834:	40020428 	.word	0x40020428
24058838:	40020440 	.word	0x40020440
2405883c:	40020458 	.word	0x40020458
24058840:	40020470 	.word	0x40020470
24058844:	40020488 	.word	0x40020488
24058848:	400204a0 	.word	0x400204a0
2405884c:	400204b8 	.word	0x400204b8

24058850 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
24058850:	b480      	push	{r7}
24058852:	b083      	sub	sp, #12
24058854:	af00      	add	r7, sp, #0
24058856:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
24058858:	687b      	ldr	r3, [r7, #4]
2405885a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
2405885c:	4618      	mov	r0, r3
2405885e:	370c      	adds	r7, #12
24058860:	46bd      	mov	sp, r7
24058862:	f85d 7b04 	ldr.w	r7, [sp], #4
24058866:	4770      	bx	lr

24058868 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24058868:	b480      	push	{r7}
2405886a:	b087      	sub	sp, #28
2405886c:	af00      	add	r7, sp, #0
2405886e:	60f8      	str	r0, [r7, #12]
24058870:	60b9      	str	r1, [r7, #8]
24058872:	607a      	str	r2, [r7, #4]
24058874:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24058876:	68fb      	ldr	r3, [r7, #12]
24058878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405887a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
2405887c:	68fb      	ldr	r3, [r7, #12]
2405887e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24058880:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24058882:	68fb      	ldr	r3, [r7, #12]
24058884:	681b      	ldr	r3, [r3, #0]
24058886:	4a7f      	ldr	r2, [pc, #508]	; (24058a84 <DMA_SetConfig+0x21c>)
24058888:	4293      	cmp	r3, r2
2405888a:	d072      	beq.n	24058972 <DMA_SetConfig+0x10a>
2405888c:	68fb      	ldr	r3, [r7, #12]
2405888e:	681b      	ldr	r3, [r3, #0]
24058890:	4a7d      	ldr	r2, [pc, #500]	; (24058a88 <DMA_SetConfig+0x220>)
24058892:	4293      	cmp	r3, r2
24058894:	d06d      	beq.n	24058972 <DMA_SetConfig+0x10a>
24058896:	68fb      	ldr	r3, [r7, #12]
24058898:	681b      	ldr	r3, [r3, #0]
2405889a:	4a7c      	ldr	r2, [pc, #496]	; (24058a8c <DMA_SetConfig+0x224>)
2405889c:	4293      	cmp	r3, r2
2405889e:	d068      	beq.n	24058972 <DMA_SetConfig+0x10a>
240588a0:	68fb      	ldr	r3, [r7, #12]
240588a2:	681b      	ldr	r3, [r3, #0]
240588a4:	4a7a      	ldr	r2, [pc, #488]	; (24058a90 <DMA_SetConfig+0x228>)
240588a6:	4293      	cmp	r3, r2
240588a8:	d063      	beq.n	24058972 <DMA_SetConfig+0x10a>
240588aa:	68fb      	ldr	r3, [r7, #12]
240588ac:	681b      	ldr	r3, [r3, #0]
240588ae:	4a79      	ldr	r2, [pc, #484]	; (24058a94 <DMA_SetConfig+0x22c>)
240588b0:	4293      	cmp	r3, r2
240588b2:	d05e      	beq.n	24058972 <DMA_SetConfig+0x10a>
240588b4:	68fb      	ldr	r3, [r7, #12]
240588b6:	681b      	ldr	r3, [r3, #0]
240588b8:	4a77      	ldr	r2, [pc, #476]	; (24058a98 <DMA_SetConfig+0x230>)
240588ba:	4293      	cmp	r3, r2
240588bc:	d059      	beq.n	24058972 <DMA_SetConfig+0x10a>
240588be:	68fb      	ldr	r3, [r7, #12]
240588c0:	681b      	ldr	r3, [r3, #0]
240588c2:	4a76      	ldr	r2, [pc, #472]	; (24058a9c <DMA_SetConfig+0x234>)
240588c4:	4293      	cmp	r3, r2
240588c6:	d054      	beq.n	24058972 <DMA_SetConfig+0x10a>
240588c8:	68fb      	ldr	r3, [r7, #12]
240588ca:	681b      	ldr	r3, [r3, #0]
240588cc:	4a74      	ldr	r2, [pc, #464]	; (24058aa0 <DMA_SetConfig+0x238>)
240588ce:	4293      	cmp	r3, r2
240588d0:	d04f      	beq.n	24058972 <DMA_SetConfig+0x10a>
240588d2:	68fb      	ldr	r3, [r7, #12]
240588d4:	681b      	ldr	r3, [r3, #0]
240588d6:	4a73      	ldr	r2, [pc, #460]	; (24058aa4 <DMA_SetConfig+0x23c>)
240588d8:	4293      	cmp	r3, r2
240588da:	d04a      	beq.n	24058972 <DMA_SetConfig+0x10a>
240588dc:	68fb      	ldr	r3, [r7, #12]
240588de:	681b      	ldr	r3, [r3, #0]
240588e0:	4a71      	ldr	r2, [pc, #452]	; (24058aa8 <DMA_SetConfig+0x240>)
240588e2:	4293      	cmp	r3, r2
240588e4:	d045      	beq.n	24058972 <DMA_SetConfig+0x10a>
240588e6:	68fb      	ldr	r3, [r7, #12]
240588e8:	681b      	ldr	r3, [r3, #0]
240588ea:	4a70      	ldr	r2, [pc, #448]	; (24058aac <DMA_SetConfig+0x244>)
240588ec:	4293      	cmp	r3, r2
240588ee:	d040      	beq.n	24058972 <DMA_SetConfig+0x10a>
240588f0:	68fb      	ldr	r3, [r7, #12]
240588f2:	681b      	ldr	r3, [r3, #0]
240588f4:	4a6e      	ldr	r2, [pc, #440]	; (24058ab0 <DMA_SetConfig+0x248>)
240588f6:	4293      	cmp	r3, r2
240588f8:	d03b      	beq.n	24058972 <DMA_SetConfig+0x10a>
240588fa:	68fb      	ldr	r3, [r7, #12]
240588fc:	681b      	ldr	r3, [r3, #0]
240588fe:	4a6d      	ldr	r2, [pc, #436]	; (24058ab4 <DMA_SetConfig+0x24c>)
24058900:	4293      	cmp	r3, r2
24058902:	d036      	beq.n	24058972 <DMA_SetConfig+0x10a>
24058904:	68fb      	ldr	r3, [r7, #12]
24058906:	681b      	ldr	r3, [r3, #0]
24058908:	4a6b      	ldr	r2, [pc, #428]	; (24058ab8 <DMA_SetConfig+0x250>)
2405890a:	4293      	cmp	r3, r2
2405890c:	d031      	beq.n	24058972 <DMA_SetConfig+0x10a>
2405890e:	68fb      	ldr	r3, [r7, #12]
24058910:	681b      	ldr	r3, [r3, #0]
24058912:	4a6a      	ldr	r2, [pc, #424]	; (24058abc <DMA_SetConfig+0x254>)
24058914:	4293      	cmp	r3, r2
24058916:	d02c      	beq.n	24058972 <DMA_SetConfig+0x10a>
24058918:	68fb      	ldr	r3, [r7, #12]
2405891a:	681b      	ldr	r3, [r3, #0]
2405891c:	4a68      	ldr	r2, [pc, #416]	; (24058ac0 <DMA_SetConfig+0x258>)
2405891e:	4293      	cmp	r3, r2
24058920:	d027      	beq.n	24058972 <DMA_SetConfig+0x10a>
24058922:	68fb      	ldr	r3, [r7, #12]
24058924:	681b      	ldr	r3, [r3, #0]
24058926:	4a67      	ldr	r2, [pc, #412]	; (24058ac4 <DMA_SetConfig+0x25c>)
24058928:	4293      	cmp	r3, r2
2405892a:	d022      	beq.n	24058972 <DMA_SetConfig+0x10a>
2405892c:	68fb      	ldr	r3, [r7, #12]
2405892e:	681b      	ldr	r3, [r3, #0]
24058930:	4a65      	ldr	r2, [pc, #404]	; (24058ac8 <DMA_SetConfig+0x260>)
24058932:	4293      	cmp	r3, r2
24058934:	d01d      	beq.n	24058972 <DMA_SetConfig+0x10a>
24058936:	68fb      	ldr	r3, [r7, #12]
24058938:	681b      	ldr	r3, [r3, #0]
2405893a:	4a64      	ldr	r2, [pc, #400]	; (24058acc <DMA_SetConfig+0x264>)
2405893c:	4293      	cmp	r3, r2
2405893e:	d018      	beq.n	24058972 <DMA_SetConfig+0x10a>
24058940:	68fb      	ldr	r3, [r7, #12]
24058942:	681b      	ldr	r3, [r3, #0]
24058944:	4a62      	ldr	r2, [pc, #392]	; (24058ad0 <DMA_SetConfig+0x268>)
24058946:	4293      	cmp	r3, r2
24058948:	d013      	beq.n	24058972 <DMA_SetConfig+0x10a>
2405894a:	68fb      	ldr	r3, [r7, #12]
2405894c:	681b      	ldr	r3, [r3, #0]
2405894e:	4a61      	ldr	r2, [pc, #388]	; (24058ad4 <DMA_SetConfig+0x26c>)
24058950:	4293      	cmp	r3, r2
24058952:	d00e      	beq.n	24058972 <DMA_SetConfig+0x10a>
24058954:	68fb      	ldr	r3, [r7, #12]
24058956:	681b      	ldr	r3, [r3, #0]
24058958:	4a5f      	ldr	r2, [pc, #380]	; (24058ad8 <DMA_SetConfig+0x270>)
2405895a:	4293      	cmp	r3, r2
2405895c:	d009      	beq.n	24058972 <DMA_SetConfig+0x10a>
2405895e:	68fb      	ldr	r3, [r7, #12]
24058960:	681b      	ldr	r3, [r3, #0]
24058962:	4a5e      	ldr	r2, [pc, #376]	; (24058adc <DMA_SetConfig+0x274>)
24058964:	4293      	cmp	r3, r2
24058966:	d004      	beq.n	24058972 <DMA_SetConfig+0x10a>
24058968:	68fb      	ldr	r3, [r7, #12]
2405896a:	681b      	ldr	r3, [r3, #0]
2405896c:	4a5c      	ldr	r2, [pc, #368]	; (24058ae0 <DMA_SetConfig+0x278>)
2405896e:	4293      	cmp	r3, r2
24058970:	d101      	bne.n	24058976 <DMA_SetConfig+0x10e>
24058972:	2301      	movs	r3, #1
24058974:	e000      	b.n	24058978 <DMA_SetConfig+0x110>
24058976:	2300      	movs	r3, #0
24058978:	2b00      	cmp	r3, #0
2405897a:	d00d      	beq.n	24058998 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2405897c:	68fb      	ldr	r3, [r7, #12]
2405897e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24058980:	68fa      	ldr	r2, [r7, #12]
24058982:	6e92      	ldr	r2, [r2, #104]	; 0x68
24058984:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
24058986:	68fb      	ldr	r3, [r7, #12]
24058988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405898a:	2b00      	cmp	r3, #0
2405898c:	d004      	beq.n	24058998 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2405898e:	68fb      	ldr	r3, [r7, #12]
24058990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24058992:	68fa      	ldr	r2, [r7, #12]
24058994:	6f52      	ldr	r2, [r2, #116]	; 0x74
24058996:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24058998:	68fb      	ldr	r3, [r7, #12]
2405899a:	681b      	ldr	r3, [r3, #0]
2405899c:	4a39      	ldr	r2, [pc, #228]	; (24058a84 <DMA_SetConfig+0x21c>)
2405899e:	4293      	cmp	r3, r2
240589a0:	d04a      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
240589a2:	68fb      	ldr	r3, [r7, #12]
240589a4:	681b      	ldr	r3, [r3, #0]
240589a6:	4a38      	ldr	r2, [pc, #224]	; (24058a88 <DMA_SetConfig+0x220>)
240589a8:	4293      	cmp	r3, r2
240589aa:	d045      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
240589ac:	68fb      	ldr	r3, [r7, #12]
240589ae:	681b      	ldr	r3, [r3, #0]
240589b0:	4a36      	ldr	r2, [pc, #216]	; (24058a8c <DMA_SetConfig+0x224>)
240589b2:	4293      	cmp	r3, r2
240589b4:	d040      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
240589b6:	68fb      	ldr	r3, [r7, #12]
240589b8:	681b      	ldr	r3, [r3, #0]
240589ba:	4a35      	ldr	r2, [pc, #212]	; (24058a90 <DMA_SetConfig+0x228>)
240589bc:	4293      	cmp	r3, r2
240589be:	d03b      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
240589c0:	68fb      	ldr	r3, [r7, #12]
240589c2:	681b      	ldr	r3, [r3, #0]
240589c4:	4a33      	ldr	r2, [pc, #204]	; (24058a94 <DMA_SetConfig+0x22c>)
240589c6:	4293      	cmp	r3, r2
240589c8:	d036      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
240589ca:	68fb      	ldr	r3, [r7, #12]
240589cc:	681b      	ldr	r3, [r3, #0]
240589ce:	4a32      	ldr	r2, [pc, #200]	; (24058a98 <DMA_SetConfig+0x230>)
240589d0:	4293      	cmp	r3, r2
240589d2:	d031      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
240589d4:	68fb      	ldr	r3, [r7, #12]
240589d6:	681b      	ldr	r3, [r3, #0]
240589d8:	4a30      	ldr	r2, [pc, #192]	; (24058a9c <DMA_SetConfig+0x234>)
240589da:	4293      	cmp	r3, r2
240589dc:	d02c      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
240589de:	68fb      	ldr	r3, [r7, #12]
240589e0:	681b      	ldr	r3, [r3, #0]
240589e2:	4a2f      	ldr	r2, [pc, #188]	; (24058aa0 <DMA_SetConfig+0x238>)
240589e4:	4293      	cmp	r3, r2
240589e6:	d027      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
240589e8:	68fb      	ldr	r3, [r7, #12]
240589ea:	681b      	ldr	r3, [r3, #0]
240589ec:	4a2d      	ldr	r2, [pc, #180]	; (24058aa4 <DMA_SetConfig+0x23c>)
240589ee:	4293      	cmp	r3, r2
240589f0:	d022      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
240589f2:	68fb      	ldr	r3, [r7, #12]
240589f4:	681b      	ldr	r3, [r3, #0]
240589f6:	4a2c      	ldr	r2, [pc, #176]	; (24058aa8 <DMA_SetConfig+0x240>)
240589f8:	4293      	cmp	r3, r2
240589fa:	d01d      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
240589fc:	68fb      	ldr	r3, [r7, #12]
240589fe:	681b      	ldr	r3, [r3, #0]
24058a00:	4a2a      	ldr	r2, [pc, #168]	; (24058aac <DMA_SetConfig+0x244>)
24058a02:	4293      	cmp	r3, r2
24058a04:	d018      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
24058a06:	68fb      	ldr	r3, [r7, #12]
24058a08:	681b      	ldr	r3, [r3, #0]
24058a0a:	4a29      	ldr	r2, [pc, #164]	; (24058ab0 <DMA_SetConfig+0x248>)
24058a0c:	4293      	cmp	r3, r2
24058a0e:	d013      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
24058a10:	68fb      	ldr	r3, [r7, #12]
24058a12:	681b      	ldr	r3, [r3, #0]
24058a14:	4a27      	ldr	r2, [pc, #156]	; (24058ab4 <DMA_SetConfig+0x24c>)
24058a16:	4293      	cmp	r3, r2
24058a18:	d00e      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
24058a1a:	68fb      	ldr	r3, [r7, #12]
24058a1c:	681b      	ldr	r3, [r3, #0]
24058a1e:	4a26      	ldr	r2, [pc, #152]	; (24058ab8 <DMA_SetConfig+0x250>)
24058a20:	4293      	cmp	r3, r2
24058a22:	d009      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
24058a24:	68fb      	ldr	r3, [r7, #12]
24058a26:	681b      	ldr	r3, [r3, #0]
24058a28:	4a24      	ldr	r2, [pc, #144]	; (24058abc <DMA_SetConfig+0x254>)
24058a2a:	4293      	cmp	r3, r2
24058a2c:	d004      	beq.n	24058a38 <DMA_SetConfig+0x1d0>
24058a2e:	68fb      	ldr	r3, [r7, #12]
24058a30:	681b      	ldr	r3, [r3, #0]
24058a32:	4a23      	ldr	r2, [pc, #140]	; (24058ac0 <DMA_SetConfig+0x258>)
24058a34:	4293      	cmp	r3, r2
24058a36:	d101      	bne.n	24058a3c <DMA_SetConfig+0x1d4>
24058a38:	2301      	movs	r3, #1
24058a3a:	e000      	b.n	24058a3e <DMA_SetConfig+0x1d6>
24058a3c:	2300      	movs	r3, #0
24058a3e:	2b00      	cmp	r3, #0
24058a40:	d059      	beq.n	24058af6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24058a42:	68fb      	ldr	r3, [r7, #12]
24058a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24058a46:	f003 031f 	and.w	r3, r3, #31
24058a4a:	223f      	movs	r2, #63	; 0x3f
24058a4c:	409a      	lsls	r2, r3
24058a4e:	697b      	ldr	r3, [r7, #20]
24058a50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
24058a52:	68fb      	ldr	r3, [r7, #12]
24058a54:	681b      	ldr	r3, [r3, #0]
24058a56:	681a      	ldr	r2, [r3, #0]
24058a58:	68fb      	ldr	r3, [r7, #12]
24058a5a:	681b      	ldr	r3, [r3, #0]
24058a5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24058a60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
24058a62:	68fb      	ldr	r3, [r7, #12]
24058a64:	681b      	ldr	r3, [r3, #0]
24058a66:	683a      	ldr	r2, [r7, #0]
24058a68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24058a6a:	68fb      	ldr	r3, [r7, #12]
24058a6c:	689b      	ldr	r3, [r3, #8]
24058a6e:	2b40      	cmp	r3, #64	; 0x40
24058a70:	d138      	bne.n	24058ae4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
24058a72:	68fb      	ldr	r3, [r7, #12]
24058a74:	681b      	ldr	r3, [r3, #0]
24058a76:	687a      	ldr	r2, [r7, #4]
24058a78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
24058a7a:	68fb      	ldr	r3, [r7, #12]
24058a7c:	681b      	ldr	r3, [r3, #0]
24058a7e:	68ba      	ldr	r2, [r7, #8]
24058a80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
24058a82:	e0ae      	b.n	24058be2 <DMA_SetConfig+0x37a>
24058a84:	40020010 	.word	0x40020010
24058a88:	40020028 	.word	0x40020028
24058a8c:	40020040 	.word	0x40020040
24058a90:	40020058 	.word	0x40020058
24058a94:	40020070 	.word	0x40020070
24058a98:	40020088 	.word	0x40020088
24058a9c:	400200a0 	.word	0x400200a0
24058aa0:	400200b8 	.word	0x400200b8
24058aa4:	40020410 	.word	0x40020410
24058aa8:	40020428 	.word	0x40020428
24058aac:	40020440 	.word	0x40020440
24058ab0:	40020458 	.word	0x40020458
24058ab4:	40020470 	.word	0x40020470
24058ab8:	40020488 	.word	0x40020488
24058abc:	400204a0 	.word	0x400204a0
24058ac0:	400204b8 	.word	0x400204b8
24058ac4:	58025408 	.word	0x58025408
24058ac8:	5802541c 	.word	0x5802541c
24058acc:	58025430 	.word	0x58025430
24058ad0:	58025444 	.word	0x58025444
24058ad4:	58025458 	.word	0x58025458
24058ad8:	5802546c 	.word	0x5802546c
24058adc:	58025480 	.word	0x58025480
24058ae0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
24058ae4:	68fb      	ldr	r3, [r7, #12]
24058ae6:	681b      	ldr	r3, [r3, #0]
24058ae8:	68ba      	ldr	r2, [r7, #8]
24058aea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
24058aec:	68fb      	ldr	r3, [r7, #12]
24058aee:	681b      	ldr	r3, [r3, #0]
24058af0:	687a      	ldr	r2, [r7, #4]
24058af2:	60da      	str	r2, [r3, #12]
}
24058af4:	e075      	b.n	24058be2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24058af6:	68fb      	ldr	r3, [r7, #12]
24058af8:	681b      	ldr	r3, [r3, #0]
24058afa:	4a3d      	ldr	r2, [pc, #244]	; (24058bf0 <DMA_SetConfig+0x388>)
24058afc:	4293      	cmp	r3, r2
24058afe:	d04a      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b00:	68fb      	ldr	r3, [r7, #12]
24058b02:	681b      	ldr	r3, [r3, #0]
24058b04:	4a3b      	ldr	r2, [pc, #236]	; (24058bf4 <DMA_SetConfig+0x38c>)
24058b06:	4293      	cmp	r3, r2
24058b08:	d045      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b0a:	68fb      	ldr	r3, [r7, #12]
24058b0c:	681b      	ldr	r3, [r3, #0]
24058b0e:	4a3a      	ldr	r2, [pc, #232]	; (24058bf8 <DMA_SetConfig+0x390>)
24058b10:	4293      	cmp	r3, r2
24058b12:	d040      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b14:	68fb      	ldr	r3, [r7, #12]
24058b16:	681b      	ldr	r3, [r3, #0]
24058b18:	4a38      	ldr	r2, [pc, #224]	; (24058bfc <DMA_SetConfig+0x394>)
24058b1a:	4293      	cmp	r3, r2
24058b1c:	d03b      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b1e:	68fb      	ldr	r3, [r7, #12]
24058b20:	681b      	ldr	r3, [r3, #0]
24058b22:	4a37      	ldr	r2, [pc, #220]	; (24058c00 <DMA_SetConfig+0x398>)
24058b24:	4293      	cmp	r3, r2
24058b26:	d036      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b28:	68fb      	ldr	r3, [r7, #12]
24058b2a:	681b      	ldr	r3, [r3, #0]
24058b2c:	4a35      	ldr	r2, [pc, #212]	; (24058c04 <DMA_SetConfig+0x39c>)
24058b2e:	4293      	cmp	r3, r2
24058b30:	d031      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b32:	68fb      	ldr	r3, [r7, #12]
24058b34:	681b      	ldr	r3, [r3, #0]
24058b36:	4a34      	ldr	r2, [pc, #208]	; (24058c08 <DMA_SetConfig+0x3a0>)
24058b38:	4293      	cmp	r3, r2
24058b3a:	d02c      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b3c:	68fb      	ldr	r3, [r7, #12]
24058b3e:	681b      	ldr	r3, [r3, #0]
24058b40:	4a32      	ldr	r2, [pc, #200]	; (24058c0c <DMA_SetConfig+0x3a4>)
24058b42:	4293      	cmp	r3, r2
24058b44:	d027      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b46:	68fb      	ldr	r3, [r7, #12]
24058b48:	681b      	ldr	r3, [r3, #0]
24058b4a:	4a31      	ldr	r2, [pc, #196]	; (24058c10 <DMA_SetConfig+0x3a8>)
24058b4c:	4293      	cmp	r3, r2
24058b4e:	d022      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b50:	68fb      	ldr	r3, [r7, #12]
24058b52:	681b      	ldr	r3, [r3, #0]
24058b54:	4a2f      	ldr	r2, [pc, #188]	; (24058c14 <DMA_SetConfig+0x3ac>)
24058b56:	4293      	cmp	r3, r2
24058b58:	d01d      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b5a:	68fb      	ldr	r3, [r7, #12]
24058b5c:	681b      	ldr	r3, [r3, #0]
24058b5e:	4a2e      	ldr	r2, [pc, #184]	; (24058c18 <DMA_SetConfig+0x3b0>)
24058b60:	4293      	cmp	r3, r2
24058b62:	d018      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b64:	68fb      	ldr	r3, [r7, #12]
24058b66:	681b      	ldr	r3, [r3, #0]
24058b68:	4a2c      	ldr	r2, [pc, #176]	; (24058c1c <DMA_SetConfig+0x3b4>)
24058b6a:	4293      	cmp	r3, r2
24058b6c:	d013      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b6e:	68fb      	ldr	r3, [r7, #12]
24058b70:	681b      	ldr	r3, [r3, #0]
24058b72:	4a2b      	ldr	r2, [pc, #172]	; (24058c20 <DMA_SetConfig+0x3b8>)
24058b74:	4293      	cmp	r3, r2
24058b76:	d00e      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b78:	68fb      	ldr	r3, [r7, #12]
24058b7a:	681b      	ldr	r3, [r3, #0]
24058b7c:	4a29      	ldr	r2, [pc, #164]	; (24058c24 <DMA_SetConfig+0x3bc>)
24058b7e:	4293      	cmp	r3, r2
24058b80:	d009      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b82:	68fb      	ldr	r3, [r7, #12]
24058b84:	681b      	ldr	r3, [r3, #0]
24058b86:	4a28      	ldr	r2, [pc, #160]	; (24058c28 <DMA_SetConfig+0x3c0>)
24058b88:	4293      	cmp	r3, r2
24058b8a:	d004      	beq.n	24058b96 <DMA_SetConfig+0x32e>
24058b8c:	68fb      	ldr	r3, [r7, #12]
24058b8e:	681b      	ldr	r3, [r3, #0]
24058b90:	4a26      	ldr	r2, [pc, #152]	; (24058c2c <DMA_SetConfig+0x3c4>)
24058b92:	4293      	cmp	r3, r2
24058b94:	d101      	bne.n	24058b9a <DMA_SetConfig+0x332>
24058b96:	2301      	movs	r3, #1
24058b98:	e000      	b.n	24058b9c <DMA_SetConfig+0x334>
24058b9a:	2300      	movs	r3, #0
24058b9c:	2b00      	cmp	r3, #0
24058b9e:	d020      	beq.n	24058be2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24058ba0:	68fb      	ldr	r3, [r7, #12]
24058ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24058ba4:	f003 031f 	and.w	r3, r3, #31
24058ba8:	2201      	movs	r2, #1
24058baa:	409a      	lsls	r2, r3
24058bac:	693b      	ldr	r3, [r7, #16]
24058bae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
24058bb0:	68fb      	ldr	r3, [r7, #12]
24058bb2:	681b      	ldr	r3, [r3, #0]
24058bb4:	683a      	ldr	r2, [r7, #0]
24058bb6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24058bb8:	68fb      	ldr	r3, [r7, #12]
24058bba:	689b      	ldr	r3, [r3, #8]
24058bbc:	2b40      	cmp	r3, #64	; 0x40
24058bbe:	d108      	bne.n	24058bd2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24058bc0:	68fb      	ldr	r3, [r7, #12]
24058bc2:	681b      	ldr	r3, [r3, #0]
24058bc4:	687a      	ldr	r2, [r7, #4]
24058bc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24058bc8:	68fb      	ldr	r3, [r7, #12]
24058bca:	681b      	ldr	r3, [r3, #0]
24058bcc:	68ba      	ldr	r2, [r7, #8]
24058bce:	60da      	str	r2, [r3, #12]
}
24058bd0:	e007      	b.n	24058be2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
24058bd2:	68fb      	ldr	r3, [r7, #12]
24058bd4:	681b      	ldr	r3, [r3, #0]
24058bd6:	68ba      	ldr	r2, [r7, #8]
24058bd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24058bda:	68fb      	ldr	r3, [r7, #12]
24058bdc:	681b      	ldr	r3, [r3, #0]
24058bde:	687a      	ldr	r2, [r7, #4]
24058be0:	60da      	str	r2, [r3, #12]
}
24058be2:	bf00      	nop
24058be4:	371c      	adds	r7, #28
24058be6:	46bd      	mov	sp, r7
24058be8:	f85d 7b04 	ldr.w	r7, [sp], #4
24058bec:	4770      	bx	lr
24058bee:	bf00      	nop
24058bf0:	48022c08 	.word	0x48022c08
24058bf4:	48022c1c 	.word	0x48022c1c
24058bf8:	48022c30 	.word	0x48022c30
24058bfc:	48022c44 	.word	0x48022c44
24058c00:	48022c58 	.word	0x48022c58
24058c04:	48022c6c 	.word	0x48022c6c
24058c08:	48022c80 	.word	0x48022c80
24058c0c:	48022c94 	.word	0x48022c94
24058c10:	58025408 	.word	0x58025408
24058c14:	5802541c 	.word	0x5802541c
24058c18:	58025430 	.word	0x58025430
24058c1c:	58025444 	.word	0x58025444
24058c20:	58025458 	.word	0x58025458
24058c24:	5802546c 	.word	0x5802546c
24058c28:	58025480 	.word	0x58025480
24058c2c:	58025494 	.word	0x58025494

24058c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
24058c30:	b480      	push	{r7}
24058c32:	b085      	sub	sp, #20
24058c34:	af00      	add	r7, sp, #0
24058c36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24058c38:	687b      	ldr	r3, [r7, #4]
24058c3a:	681b      	ldr	r3, [r3, #0]
24058c3c:	4a42      	ldr	r2, [pc, #264]	; (24058d48 <DMA_CalcBaseAndBitshift+0x118>)
24058c3e:	4293      	cmp	r3, r2
24058c40:	d04a      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058c42:	687b      	ldr	r3, [r7, #4]
24058c44:	681b      	ldr	r3, [r3, #0]
24058c46:	4a41      	ldr	r2, [pc, #260]	; (24058d4c <DMA_CalcBaseAndBitshift+0x11c>)
24058c48:	4293      	cmp	r3, r2
24058c4a:	d045      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058c4c:	687b      	ldr	r3, [r7, #4]
24058c4e:	681b      	ldr	r3, [r3, #0]
24058c50:	4a3f      	ldr	r2, [pc, #252]	; (24058d50 <DMA_CalcBaseAndBitshift+0x120>)
24058c52:	4293      	cmp	r3, r2
24058c54:	d040      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058c56:	687b      	ldr	r3, [r7, #4]
24058c58:	681b      	ldr	r3, [r3, #0]
24058c5a:	4a3e      	ldr	r2, [pc, #248]	; (24058d54 <DMA_CalcBaseAndBitshift+0x124>)
24058c5c:	4293      	cmp	r3, r2
24058c5e:	d03b      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058c60:	687b      	ldr	r3, [r7, #4]
24058c62:	681b      	ldr	r3, [r3, #0]
24058c64:	4a3c      	ldr	r2, [pc, #240]	; (24058d58 <DMA_CalcBaseAndBitshift+0x128>)
24058c66:	4293      	cmp	r3, r2
24058c68:	d036      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058c6a:	687b      	ldr	r3, [r7, #4]
24058c6c:	681b      	ldr	r3, [r3, #0]
24058c6e:	4a3b      	ldr	r2, [pc, #236]	; (24058d5c <DMA_CalcBaseAndBitshift+0x12c>)
24058c70:	4293      	cmp	r3, r2
24058c72:	d031      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058c74:	687b      	ldr	r3, [r7, #4]
24058c76:	681b      	ldr	r3, [r3, #0]
24058c78:	4a39      	ldr	r2, [pc, #228]	; (24058d60 <DMA_CalcBaseAndBitshift+0x130>)
24058c7a:	4293      	cmp	r3, r2
24058c7c:	d02c      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058c7e:	687b      	ldr	r3, [r7, #4]
24058c80:	681b      	ldr	r3, [r3, #0]
24058c82:	4a38      	ldr	r2, [pc, #224]	; (24058d64 <DMA_CalcBaseAndBitshift+0x134>)
24058c84:	4293      	cmp	r3, r2
24058c86:	d027      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058c88:	687b      	ldr	r3, [r7, #4]
24058c8a:	681b      	ldr	r3, [r3, #0]
24058c8c:	4a36      	ldr	r2, [pc, #216]	; (24058d68 <DMA_CalcBaseAndBitshift+0x138>)
24058c8e:	4293      	cmp	r3, r2
24058c90:	d022      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058c92:	687b      	ldr	r3, [r7, #4]
24058c94:	681b      	ldr	r3, [r3, #0]
24058c96:	4a35      	ldr	r2, [pc, #212]	; (24058d6c <DMA_CalcBaseAndBitshift+0x13c>)
24058c98:	4293      	cmp	r3, r2
24058c9a:	d01d      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058c9c:	687b      	ldr	r3, [r7, #4]
24058c9e:	681b      	ldr	r3, [r3, #0]
24058ca0:	4a33      	ldr	r2, [pc, #204]	; (24058d70 <DMA_CalcBaseAndBitshift+0x140>)
24058ca2:	4293      	cmp	r3, r2
24058ca4:	d018      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058ca6:	687b      	ldr	r3, [r7, #4]
24058ca8:	681b      	ldr	r3, [r3, #0]
24058caa:	4a32      	ldr	r2, [pc, #200]	; (24058d74 <DMA_CalcBaseAndBitshift+0x144>)
24058cac:	4293      	cmp	r3, r2
24058cae:	d013      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058cb0:	687b      	ldr	r3, [r7, #4]
24058cb2:	681b      	ldr	r3, [r3, #0]
24058cb4:	4a30      	ldr	r2, [pc, #192]	; (24058d78 <DMA_CalcBaseAndBitshift+0x148>)
24058cb6:	4293      	cmp	r3, r2
24058cb8:	d00e      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058cba:	687b      	ldr	r3, [r7, #4]
24058cbc:	681b      	ldr	r3, [r3, #0]
24058cbe:	4a2f      	ldr	r2, [pc, #188]	; (24058d7c <DMA_CalcBaseAndBitshift+0x14c>)
24058cc0:	4293      	cmp	r3, r2
24058cc2:	d009      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058cc4:	687b      	ldr	r3, [r7, #4]
24058cc6:	681b      	ldr	r3, [r3, #0]
24058cc8:	4a2d      	ldr	r2, [pc, #180]	; (24058d80 <DMA_CalcBaseAndBitshift+0x150>)
24058cca:	4293      	cmp	r3, r2
24058ccc:	d004      	beq.n	24058cd8 <DMA_CalcBaseAndBitshift+0xa8>
24058cce:	687b      	ldr	r3, [r7, #4]
24058cd0:	681b      	ldr	r3, [r3, #0]
24058cd2:	4a2c      	ldr	r2, [pc, #176]	; (24058d84 <DMA_CalcBaseAndBitshift+0x154>)
24058cd4:	4293      	cmp	r3, r2
24058cd6:	d101      	bne.n	24058cdc <DMA_CalcBaseAndBitshift+0xac>
24058cd8:	2301      	movs	r3, #1
24058cda:	e000      	b.n	24058cde <DMA_CalcBaseAndBitshift+0xae>
24058cdc:	2300      	movs	r3, #0
24058cde:	2b00      	cmp	r3, #0
24058ce0:	d024      	beq.n	24058d2c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24058ce2:	687b      	ldr	r3, [r7, #4]
24058ce4:	681b      	ldr	r3, [r3, #0]
24058ce6:	b2db      	uxtb	r3, r3
24058ce8:	3b10      	subs	r3, #16
24058cea:	4a27      	ldr	r2, [pc, #156]	; (24058d88 <DMA_CalcBaseAndBitshift+0x158>)
24058cec:	fba2 2303 	umull	r2, r3, r2, r3
24058cf0:	091b      	lsrs	r3, r3, #4
24058cf2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24058cf4:	68fb      	ldr	r3, [r7, #12]
24058cf6:	f003 0307 	and.w	r3, r3, #7
24058cfa:	4a24      	ldr	r2, [pc, #144]	; (24058d8c <DMA_CalcBaseAndBitshift+0x15c>)
24058cfc:	5cd3      	ldrb	r3, [r2, r3]
24058cfe:	461a      	mov	r2, r3
24058d00:	687b      	ldr	r3, [r7, #4]
24058d02:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
24058d04:	68fb      	ldr	r3, [r7, #12]
24058d06:	2b03      	cmp	r3, #3
24058d08:	d908      	bls.n	24058d1c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24058d0a:	687b      	ldr	r3, [r7, #4]
24058d0c:	681b      	ldr	r3, [r3, #0]
24058d0e:	461a      	mov	r2, r3
24058d10:	4b1f      	ldr	r3, [pc, #124]	; (24058d90 <DMA_CalcBaseAndBitshift+0x160>)
24058d12:	4013      	ands	r3, r2
24058d14:	1d1a      	adds	r2, r3, #4
24058d16:	687b      	ldr	r3, [r7, #4]
24058d18:	659a      	str	r2, [r3, #88]	; 0x58
24058d1a:	e00d      	b.n	24058d38 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24058d1c:	687b      	ldr	r3, [r7, #4]
24058d1e:	681b      	ldr	r3, [r3, #0]
24058d20:	461a      	mov	r2, r3
24058d22:	4b1b      	ldr	r3, [pc, #108]	; (24058d90 <DMA_CalcBaseAndBitshift+0x160>)
24058d24:	4013      	ands	r3, r2
24058d26:	687a      	ldr	r2, [r7, #4]
24058d28:	6593      	str	r3, [r2, #88]	; 0x58
24058d2a:	e005      	b.n	24058d38 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24058d2c:	687b      	ldr	r3, [r7, #4]
24058d2e:	681b      	ldr	r3, [r3, #0]
24058d30:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
24058d34:	687b      	ldr	r3, [r7, #4]
24058d36:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
24058d38:	687b      	ldr	r3, [r7, #4]
24058d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
24058d3c:	4618      	mov	r0, r3
24058d3e:	3714      	adds	r7, #20
24058d40:	46bd      	mov	sp, r7
24058d42:	f85d 7b04 	ldr.w	r7, [sp], #4
24058d46:	4770      	bx	lr
24058d48:	40020010 	.word	0x40020010
24058d4c:	40020028 	.word	0x40020028
24058d50:	40020040 	.word	0x40020040
24058d54:	40020058 	.word	0x40020058
24058d58:	40020070 	.word	0x40020070
24058d5c:	40020088 	.word	0x40020088
24058d60:	400200a0 	.word	0x400200a0
24058d64:	400200b8 	.word	0x400200b8
24058d68:	40020410 	.word	0x40020410
24058d6c:	40020428 	.word	0x40020428
24058d70:	40020440 	.word	0x40020440
24058d74:	40020458 	.word	0x40020458
24058d78:	40020470 	.word	0x40020470
24058d7c:	40020488 	.word	0x40020488
24058d80:	400204a0 	.word	0x400204a0
24058d84:	400204b8 	.word	0x400204b8
24058d88:	aaaaaaab 	.word	0xaaaaaaab
24058d8c:	24064280 	.word	0x24064280
24058d90:	fffffc00 	.word	0xfffffc00

24058d94 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
24058d94:	b480      	push	{r7}
24058d96:	b085      	sub	sp, #20
24058d98:	af00      	add	r7, sp, #0
24058d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24058d9c:	2300      	movs	r3, #0
24058d9e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24058da0:	687b      	ldr	r3, [r7, #4]
24058da2:	699b      	ldr	r3, [r3, #24]
24058da4:	2b00      	cmp	r3, #0
24058da6:	d120      	bne.n	24058dea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
24058da8:	687b      	ldr	r3, [r7, #4]
24058daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24058dac:	2b03      	cmp	r3, #3
24058dae:	d858      	bhi.n	24058e62 <DMA_CheckFifoParam+0xce>
24058db0:	a201      	add	r2, pc, #4	; (adr r2, 24058db8 <DMA_CheckFifoParam+0x24>)
24058db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24058db6:	bf00      	nop
24058db8:	24058dc9 	.word	0x24058dc9
24058dbc:	24058ddb 	.word	0x24058ddb
24058dc0:	24058dc9 	.word	0x24058dc9
24058dc4:	24058e63 	.word	0x24058e63
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24058dc8:	687b      	ldr	r3, [r7, #4]
24058dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24058dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24058dd0:	2b00      	cmp	r3, #0
24058dd2:	d048      	beq.n	24058e66 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
24058dd4:	2301      	movs	r3, #1
24058dd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
24058dd8:	e045      	b.n	24058e66 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24058dda:	687b      	ldr	r3, [r7, #4]
24058ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24058dde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
24058de2:	d142      	bne.n	24058e6a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
24058de4:	2301      	movs	r3, #1
24058de6:	73fb      	strb	r3, [r7, #15]
        }
        break;
24058de8:	e03f      	b.n	24058e6a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24058dea:	687b      	ldr	r3, [r7, #4]
24058dec:	699b      	ldr	r3, [r3, #24]
24058dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24058df2:	d123      	bne.n	24058e3c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
24058df4:	687b      	ldr	r3, [r7, #4]
24058df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24058df8:	2b03      	cmp	r3, #3
24058dfa:	d838      	bhi.n	24058e6e <DMA_CheckFifoParam+0xda>
24058dfc:	a201      	add	r2, pc, #4	; (adr r2, 24058e04 <DMA_CheckFifoParam+0x70>)
24058dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24058e02:	bf00      	nop
24058e04:	24058e15 	.word	0x24058e15
24058e08:	24058e1b 	.word	0x24058e1b
24058e0c:	24058e15 	.word	0x24058e15
24058e10:	24058e2d 	.word	0x24058e2d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
24058e14:	2301      	movs	r3, #1
24058e16:	73fb      	strb	r3, [r7, #15]
        break;
24058e18:	e030      	b.n	24058e7c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24058e1a:	687b      	ldr	r3, [r7, #4]
24058e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24058e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24058e22:	2b00      	cmp	r3, #0
24058e24:	d025      	beq.n	24058e72 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
24058e26:	2301      	movs	r3, #1
24058e28:	73fb      	strb	r3, [r7, #15]
        }
        break;
24058e2a:	e022      	b.n	24058e72 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24058e2c:	687b      	ldr	r3, [r7, #4]
24058e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24058e30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
24058e34:	d11f      	bne.n	24058e76 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
24058e36:	2301      	movs	r3, #1
24058e38:	73fb      	strb	r3, [r7, #15]
        }
        break;
24058e3a:	e01c      	b.n	24058e76 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
24058e3c:	687b      	ldr	r3, [r7, #4]
24058e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24058e40:	2b02      	cmp	r3, #2
24058e42:	d902      	bls.n	24058e4a <DMA_CheckFifoParam+0xb6>
24058e44:	2b03      	cmp	r3, #3
24058e46:	d003      	beq.n	24058e50 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
24058e48:	e018      	b.n	24058e7c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
24058e4a:	2301      	movs	r3, #1
24058e4c:	73fb      	strb	r3, [r7, #15]
        break;
24058e4e:	e015      	b.n	24058e7c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24058e50:	687b      	ldr	r3, [r7, #4]
24058e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24058e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24058e58:	2b00      	cmp	r3, #0
24058e5a:	d00e      	beq.n	24058e7a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
24058e5c:	2301      	movs	r3, #1
24058e5e:	73fb      	strb	r3, [r7, #15]
    break;
24058e60:	e00b      	b.n	24058e7a <DMA_CheckFifoParam+0xe6>
        break;
24058e62:	bf00      	nop
24058e64:	e00a      	b.n	24058e7c <DMA_CheckFifoParam+0xe8>
        break;
24058e66:	bf00      	nop
24058e68:	e008      	b.n	24058e7c <DMA_CheckFifoParam+0xe8>
        break;
24058e6a:	bf00      	nop
24058e6c:	e006      	b.n	24058e7c <DMA_CheckFifoParam+0xe8>
        break;
24058e6e:	bf00      	nop
24058e70:	e004      	b.n	24058e7c <DMA_CheckFifoParam+0xe8>
        break;
24058e72:	bf00      	nop
24058e74:	e002      	b.n	24058e7c <DMA_CheckFifoParam+0xe8>
        break;
24058e76:	bf00      	nop
24058e78:	e000      	b.n	24058e7c <DMA_CheckFifoParam+0xe8>
    break;
24058e7a:	bf00      	nop
    }
  }

  return status;
24058e7c:	7bfb      	ldrb	r3, [r7, #15]
}
24058e7e:	4618      	mov	r0, r3
24058e80:	3714      	adds	r7, #20
24058e82:	46bd      	mov	sp, r7
24058e84:	f85d 7b04 	ldr.w	r7, [sp], #4
24058e88:	4770      	bx	lr
24058e8a:	bf00      	nop

24058e8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
24058e8c:	b480      	push	{r7}
24058e8e:	b085      	sub	sp, #20
24058e90:	af00      	add	r7, sp, #0
24058e92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24058e94:	687b      	ldr	r3, [r7, #4]
24058e96:	681b      	ldr	r3, [r3, #0]
24058e98:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24058e9a:	687b      	ldr	r3, [r7, #4]
24058e9c:	681b      	ldr	r3, [r3, #0]
24058e9e:	4a38      	ldr	r2, [pc, #224]	; (24058f80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
24058ea0:	4293      	cmp	r3, r2
24058ea2:	d022      	beq.n	24058eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058ea4:	687b      	ldr	r3, [r7, #4]
24058ea6:	681b      	ldr	r3, [r3, #0]
24058ea8:	4a36      	ldr	r2, [pc, #216]	; (24058f84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
24058eaa:	4293      	cmp	r3, r2
24058eac:	d01d      	beq.n	24058eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058eae:	687b      	ldr	r3, [r7, #4]
24058eb0:	681b      	ldr	r3, [r3, #0]
24058eb2:	4a35      	ldr	r2, [pc, #212]	; (24058f88 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
24058eb4:	4293      	cmp	r3, r2
24058eb6:	d018      	beq.n	24058eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058eb8:	687b      	ldr	r3, [r7, #4]
24058eba:	681b      	ldr	r3, [r3, #0]
24058ebc:	4a33      	ldr	r2, [pc, #204]	; (24058f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
24058ebe:	4293      	cmp	r3, r2
24058ec0:	d013      	beq.n	24058eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058ec2:	687b      	ldr	r3, [r7, #4]
24058ec4:	681b      	ldr	r3, [r3, #0]
24058ec6:	4a32      	ldr	r2, [pc, #200]	; (24058f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
24058ec8:	4293      	cmp	r3, r2
24058eca:	d00e      	beq.n	24058eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058ecc:	687b      	ldr	r3, [r7, #4]
24058ece:	681b      	ldr	r3, [r3, #0]
24058ed0:	4a30      	ldr	r2, [pc, #192]	; (24058f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
24058ed2:	4293      	cmp	r3, r2
24058ed4:	d009      	beq.n	24058eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058ed6:	687b      	ldr	r3, [r7, #4]
24058ed8:	681b      	ldr	r3, [r3, #0]
24058eda:	4a2f      	ldr	r2, [pc, #188]	; (24058f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
24058edc:	4293      	cmp	r3, r2
24058ede:	d004      	beq.n	24058eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058ee0:	687b      	ldr	r3, [r7, #4]
24058ee2:	681b      	ldr	r3, [r3, #0]
24058ee4:	4a2d      	ldr	r2, [pc, #180]	; (24058f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
24058ee6:	4293      	cmp	r3, r2
24058ee8:	d101      	bne.n	24058eee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
24058eea:	2301      	movs	r3, #1
24058eec:	e000      	b.n	24058ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
24058eee:	2300      	movs	r3, #0
24058ef0:	2b00      	cmp	r3, #0
24058ef2:	d01a      	beq.n	24058f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24058ef4:	687b      	ldr	r3, [r7, #4]
24058ef6:	681b      	ldr	r3, [r3, #0]
24058ef8:	b2db      	uxtb	r3, r3
24058efa:	3b08      	subs	r3, #8
24058efc:	4a28      	ldr	r2, [pc, #160]	; (24058fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
24058efe:	fba2 2303 	umull	r2, r3, r2, r3
24058f02:	091b      	lsrs	r3, r3, #4
24058f04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24058f06:	68fa      	ldr	r2, [r7, #12]
24058f08:	4b26      	ldr	r3, [pc, #152]	; (24058fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
24058f0a:	4413      	add	r3, r2
24058f0c:	009b      	lsls	r3, r3, #2
24058f0e:	461a      	mov	r2, r3
24058f10:	687b      	ldr	r3, [r7, #4]
24058f12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24058f14:	687b      	ldr	r3, [r7, #4]
24058f16:	4a24      	ldr	r2, [pc, #144]	; (24058fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
24058f18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24058f1a:	68fb      	ldr	r3, [r7, #12]
24058f1c:	f003 031f 	and.w	r3, r3, #31
24058f20:	2201      	movs	r2, #1
24058f22:	409a      	lsls	r2, r3
24058f24:	687b      	ldr	r3, [r7, #4]
24058f26:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24058f28:	e024      	b.n	24058f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24058f2a:	687b      	ldr	r3, [r7, #4]
24058f2c:	681b      	ldr	r3, [r3, #0]
24058f2e:	b2db      	uxtb	r3, r3
24058f30:	3b10      	subs	r3, #16
24058f32:	4a1e      	ldr	r2, [pc, #120]	; (24058fac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
24058f34:	fba2 2303 	umull	r2, r3, r2, r3
24058f38:	091b      	lsrs	r3, r3, #4
24058f3a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24058f3c:	68bb      	ldr	r3, [r7, #8]
24058f3e:	4a1c      	ldr	r2, [pc, #112]	; (24058fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
24058f40:	4293      	cmp	r3, r2
24058f42:	d806      	bhi.n	24058f52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
24058f44:	68bb      	ldr	r3, [r7, #8]
24058f46:	4a1b      	ldr	r2, [pc, #108]	; (24058fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
24058f48:	4293      	cmp	r3, r2
24058f4a:	d902      	bls.n	24058f52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
24058f4c:	68fb      	ldr	r3, [r7, #12]
24058f4e:	3308      	adds	r3, #8
24058f50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24058f52:	68fa      	ldr	r2, [r7, #12]
24058f54:	4b18      	ldr	r3, [pc, #96]	; (24058fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
24058f56:	4413      	add	r3, r2
24058f58:	009b      	lsls	r3, r3, #2
24058f5a:	461a      	mov	r2, r3
24058f5c:	687b      	ldr	r3, [r7, #4]
24058f5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24058f60:	687b      	ldr	r3, [r7, #4]
24058f62:	4a16      	ldr	r2, [pc, #88]	; (24058fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
24058f64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24058f66:	68fb      	ldr	r3, [r7, #12]
24058f68:	f003 031f 	and.w	r3, r3, #31
24058f6c:	2201      	movs	r2, #1
24058f6e:	409a      	lsls	r2, r3
24058f70:	687b      	ldr	r3, [r7, #4]
24058f72:	669a      	str	r2, [r3, #104]	; 0x68
}
24058f74:	bf00      	nop
24058f76:	3714      	adds	r7, #20
24058f78:	46bd      	mov	sp, r7
24058f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
24058f7e:	4770      	bx	lr
24058f80:	58025408 	.word	0x58025408
24058f84:	5802541c 	.word	0x5802541c
24058f88:	58025430 	.word	0x58025430
24058f8c:	58025444 	.word	0x58025444
24058f90:	58025458 	.word	0x58025458
24058f94:	5802546c 	.word	0x5802546c
24058f98:	58025480 	.word	0x58025480
24058f9c:	58025494 	.word	0x58025494
24058fa0:	cccccccd 	.word	0xcccccccd
24058fa4:	16009600 	.word	0x16009600
24058fa8:	58025880 	.word	0x58025880
24058fac:	aaaaaaab 	.word	0xaaaaaaab
24058fb0:	400204b8 	.word	0x400204b8
24058fb4:	4002040f 	.word	0x4002040f
24058fb8:	10008200 	.word	0x10008200
24058fbc:	40020880 	.word	0x40020880

24058fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
24058fc0:	b480      	push	{r7}
24058fc2:	b085      	sub	sp, #20
24058fc4:	af00      	add	r7, sp, #0
24058fc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
24058fc8:	687b      	ldr	r3, [r7, #4]
24058fca:	685b      	ldr	r3, [r3, #4]
24058fcc:	b2db      	uxtb	r3, r3
24058fce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
24058fd0:	68fb      	ldr	r3, [r7, #12]
24058fd2:	2b00      	cmp	r3, #0
24058fd4:	d04a      	beq.n	2405906c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
24058fd6:	68fb      	ldr	r3, [r7, #12]
24058fd8:	2b08      	cmp	r3, #8
24058fda:	d847      	bhi.n	2405906c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24058fdc:	687b      	ldr	r3, [r7, #4]
24058fde:	681b      	ldr	r3, [r3, #0]
24058fe0:	4a25      	ldr	r2, [pc, #148]	; (24059078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
24058fe2:	4293      	cmp	r3, r2
24058fe4:	d022      	beq.n	2405902c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24058fe6:	687b      	ldr	r3, [r7, #4]
24058fe8:	681b      	ldr	r3, [r3, #0]
24058fea:	4a24      	ldr	r2, [pc, #144]	; (2405907c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
24058fec:	4293      	cmp	r3, r2
24058fee:	d01d      	beq.n	2405902c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24058ff0:	687b      	ldr	r3, [r7, #4]
24058ff2:	681b      	ldr	r3, [r3, #0]
24058ff4:	4a22      	ldr	r2, [pc, #136]	; (24059080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
24058ff6:	4293      	cmp	r3, r2
24058ff8:	d018      	beq.n	2405902c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24058ffa:	687b      	ldr	r3, [r7, #4]
24058ffc:	681b      	ldr	r3, [r3, #0]
24058ffe:	4a21      	ldr	r2, [pc, #132]	; (24059084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
24059000:	4293      	cmp	r3, r2
24059002:	d013      	beq.n	2405902c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24059004:	687b      	ldr	r3, [r7, #4]
24059006:	681b      	ldr	r3, [r3, #0]
24059008:	4a1f      	ldr	r2, [pc, #124]	; (24059088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
2405900a:	4293      	cmp	r3, r2
2405900c:	d00e      	beq.n	2405902c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405900e:	687b      	ldr	r3, [r7, #4]
24059010:	681b      	ldr	r3, [r3, #0]
24059012:	4a1e      	ldr	r2, [pc, #120]	; (2405908c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
24059014:	4293      	cmp	r3, r2
24059016:	d009      	beq.n	2405902c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24059018:	687b      	ldr	r3, [r7, #4]
2405901a:	681b      	ldr	r3, [r3, #0]
2405901c:	4a1c      	ldr	r2, [pc, #112]	; (24059090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
2405901e:	4293      	cmp	r3, r2
24059020:	d004      	beq.n	2405902c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24059022:	687b      	ldr	r3, [r7, #4]
24059024:	681b      	ldr	r3, [r3, #0]
24059026:	4a1b      	ldr	r2, [pc, #108]	; (24059094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
24059028:	4293      	cmp	r3, r2
2405902a:	d101      	bne.n	24059030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
2405902c:	2301      	movs	r3, #1
2405902e:	e000      	b.n	24059032 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
24059030:	2300      	movs	r3, #0
24059032:	2b00      	cmp	r3, #0
24059034:	d00a      	beq.n	2405904c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24059036:	68fa      	ldr	r2, [r7, #12]
24059038:	4b17      	ldr	r3, [pc, #92]	; (24059098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
2405903a:	4413      	add	r3, r2
2405903c:	009b      	lsls	r3, r3, #2
2405903e:	461a      	mov	r2, r3
24059040:	687b      	ldr	r3, [r7, #4]
24059042:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24059044:	687b      	ldr	r3, [r7, #4]
24059046:	4a15      	ldr	r2, [pc, #84]	; (2405909c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
24059048:	671a      	str	r2, [r3, #112]	; 0x70
2405904a:	e009      	b.n	24059060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
2405904c:	68fa      	ldr	r2, [r7, #12]
2405904e:	4b14      	ldr	r3, [pc, #80]	; (240590a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
24059050:	4413      	add	r3, r2
24059052:	009b      	lsls	r3, r3, #2
24059054:	461a      	mov	r2, r3
24059056:	687b      	ldr	r3, [r7, #4]
24059058:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
2405905a:	687b      	ldr	r3, [r7, #4]
2405905c:	4a11      	ldr	r2, [pc, #68]	; (240590a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
2405905e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24059060:	68fb      	ldr	r3, [r7, #12]
24059062:	3b01      	subs	r3, #1
24059064:	2201      	movs	r2, #1
24059066:	409a      	lsls	r2, r3
24059068:	687b      	ldr	r3, [r7, #4]
2405906a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
2405906c:	bf00      	nop
2405906e:	3714      	adds	r7, #20
24059070:	46bd      	mov	sp, r7
24059072:	f85d 7b04 	ldr.w	r7, [sp], #4
24059076:	4770      	bx	lr
24059078:	58025408 	.word	0x58025408
2405907c:	5802541c 	.word	0x5802541c
24059080:	58025430 	.word	0x58025430
24059084:	58025444 	.word	0x58025444
24059088:	58025458 	.word	0x58025458
2405908c:	5802546c 	.word	0x5802546c
24059090:	58025480 	.word	0x58025480
24059094:	58025494 	.word	0x58025494
24059098:	1600963f 	.word	0x1600963f
2405909c:	58025940 	.word	0x58025940
240590a0:	1000823f 	.word	0x1000823f
240590a4:	40020940 	.word	0x40020940

240590a8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
240590a8:	b580      	push	{r7, lr}
240590aa:	b082      	sub	sp, #8
240590ac:	af00      	add	r7, sp, #0
240590ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
240590b0:	687b      	ldr	r3, [r7, #4]
240590b2:	2b00      	cmp	r3, #0
240590b4:	d101      	bne.n	240590ba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
240590b6:	2301      	movs	r3, #1
240590b8:	e04f      	b.n	2405915a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
240590ba:	687b      	ldr	r3, [r7, #4]
240590bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
240590c0:	b2db      	uxtb	r3, r3
240590c2:	2b00      	cmp	r3, #0
240590c4:	d106      	bne.n	240590d4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
240590c6:	687b      	ldr	r3, [r7, #4]
240590c8:	2200      	movs	r2, #0
240590ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
240590ce:	6878      	ldr	r0, [r7, #4]
240590d0:	f7fa f840 	bl	24053154 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
240590d4:	687b      	ldr	r3, [r7, #4]
240590d6:	2202      	movs	r2, #2
240590d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
240590dc:	687b      	ldr	r3, [r7, #4]
240590de:	681b      	ldr	r3, [r3, #0]
240590e0:	681a      	ldr	r2, [r3, #0]
240590e2:	4b20      	ldr	r3, [pc, #128]	; (24059164 <HAL_DMA2D_Init+0xbc>)
240590e4:	4013      	ands	r3, r2
240590e6:	687a      	ldr	r2, [r7, #4]
240590e8:	6851      	ldr	r1, [r2, #4]
240590ea:	687a      	ldr	r2, [r7, #4]
240590ec:	69d2      	ldr	r2, [r2, #28]
240590ee:	4311      	orrs	r1, r2
240590f0:	687a      	ldr	r2, [r7, #4]
240590f2:	6812      	ldr	r2, [r2, #0]
240590f4:	430b      	orrs	r3, r1
240590f6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
240590f8:	687b      	ldr	r3, [r7, #4]
240590fa:	681b      	ldr	r3, [r3, #0]
240590fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240590fe:	4b1a      	ldr	r3, [pc, #104]	; (24059168 <HAL_DMA2D_Init+0xc0>)
24059100:	4013      	ands	r3, r2
24059102:	687a      	ldr	r2, [r7, #4]
24059104:	6891      	ldr	r1, [r2, #8]
24059106:	687a      	ldr	r2, [r7, #4]
24059108:	6992      	ldr	r2, [r2, #24]
2405910a:	4311      	orrs	r1, r2
2405910c:	687a      	ldr	r2, [r7, #4]
2405910e:	6812      	ldr	r2, [r2, #0]
24059110:	430b      	orrs	r3, r1
24059112:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
24059114:	687b      	ldr	r3, [r7, #4]
24059116:	681b      	ldr	r3, [r3, #0]
24059118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2405911a:	4b14      	ldr	r3, [pc, #80]	; (2405916c <HAL_DMA2D_Init+0xc4>)
2405911c:	4013      	ands	r3, r2
2405911e:	687a      	ldr	r2, [r7, #4]
24059120:	68d1      	ldr	r1, [r2, #12]
24059122:	687a      	ldr	r2, [r7, #4]
24059124:	6812      	ldr	r2, [r2, #0]
24059126:	430b      	orrs	r3, r1
24059128:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
2405912a:	687b      	ldr	r3, [r7, #4]
2405912c:	681b      	ldr	r3, [r3, #0]
2405912e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24059130:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
24059134:	687b      	ldr	r3, [r7, #4]
24059136:	691b      	ldr	r3, [r3, #16]
24059138:	051a      	lsls	r2, r3, #20
2405913a:	687b      	ldr	r3, [r7, #4]
2405913c:	695b      	ldr	r3, [r3, #20]
2405913e:	055b      	lsls	r3, r3, #21
24059140:	431a      	orrs	r2, r3
24059142:	687b      	ldr	r3, [r7, #4]
24059144:	681b      	ldr	r3, [r3, #0]
24059146:	430a      	orrs	r2, r1
24059148:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
2405914a:	687b      	ldr	r3, [r7, #4]
2405914c:	2200      	movs	r2, #0
2405914e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
24059150:	687b      	ldr	r3, [r7, #4]
24059152:	2201      	movs	r2, #1
24059154:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
24059158:	2300      	movs	r3, #0
}
2405915a:	4618      	mov	r0, r3
2405915c:	3708      	adds	r7, #8
2405915e:	46bd      	mov	sp, r7
24059160:	bd80      	pop	{r7, pc}
24059162:	bf00      	nop
24059164:	fff8ffbf 	.word	0xfff8ffbf
24059168:	fffffef8 	.word	0xfffffef8
2405916c:	ffff0000 	.word	0xffff0000

24059170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
24059170:	b480      	push	{r7}
24059172:	b089      	sub	sp, #36	; 0x24
24059174:	af00      	add	r7, sp, #0
24059176:	6078      	str	r0, [r7, #4]
24059178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
2405917a:	2300      	movs	r3, #0
2405917c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
2405917e:	4b89      	ldr	r3, [pc, #548]	; (240593a4 <HAL_GPIO_Init+0x234>)
24059180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24059182:	e194      	b.n	240594ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24059184:	683b      	ldr	r3, [r7, #0]
24059186:	681a      	ldr	r2, [r3, #0]
24059188:	2101      	movs	r1, #1
2405918a:	69fb      	ldr	r3, [r7, #28]
2405918c:	fa01 f303 	lsl.w	r3, r1, r3
24059190:	4013      	ands	r3, r2
24059192:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
24059194:	693b      	ldr	r3, [r7, #16]
24059196:	2b00      	cmp	r3, #0
24059198:	f000 8186 	beq.w	240594a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
2405919c:	683b      	ldr	r3, [r7, #0]
2405919e:	685b      	ldr	r3, [r3, #4]
240591a0:	f003 0303 	and.w	r3, r3, #3
240591a4:	2b01      	cmp	r3, #1
240591a6:	d005      	beq.n	240591b4 <HAL_GPIO_Init+0x44>
240591a8:	683b      	ldr	r3, [r7, #0]
240591aa:	685b      	ldr	r3, [r3, #4]
240591ac:	f003 0303 	and.w	r3, r3, #3
240591b0:	2b02      	cmp	r3, #2
240591b2:	d130      	bne.n	24059216 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
240591b4:	687b      	ldr	r3, [r7, #4]
240591b6:	689b      	ldr	r3, [r3, #8]
240591b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240591ba:	69fb      	ldr	r3, [r7, #28]
240591bc:	005b      	lsls	r3, r3, #1
240591be:	2203      	movs	r2, #3
240591c0:	fa02 f303 	lsl.w	r3, r2, r3
240591c4:	43db      	mvns	r3, r3
240591c6:	69ba      	ldr	r2, [r7, #24]
240591c8:	4013      	ands	r3, r2
240591ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
240591cc:	683b      	ldr	r3, [r7, #0]
240591ce:	68da      	ldr	r2, [r3, #12]
240591d0:	69fb      	ldr	r3, [r7, #28]
240591d2:	005b      	lsls	r3, r3, #1
240591d4:	fa02 f303 	lsl.w	r3, r2, r3
240591d8:	69ba      	ldr	r2, [r7, #24]
240591da:	4313      	orrs	r3, r2
240591dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
240591de:	687b      	ldr	r3, [r7, #4]
240591e0:	69ba      	ldr	r2, [r7, #24]
240591e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
240591e4:	687b      	ldr	r3, [r7, #4]
240591e6:	685b      	ldr	r3, [r3, #4]
240591e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
240591ea:	2201      	movs	r2, #1
240591ec:	69fb      	ldr	r3, [r7, #28]
240591ee:	fa02 f303 	lsl.w	r3, r2, r3
240591f2:	43db      	mvns	r3, r3
240591f4:	69ba      	ldr	r2, [r7, #24]
240591f6:	4013      	ands	r3, r2
240591f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240591fa:	683b      	ldr	r3, [r7, #0]
240591fc:	685b      	ldr	r3, [r3, #4]
240591fe:	091b      	lsrs	r3, r3, #4
24059200:	f003 0201 	and.w	r2, r3, #1
24059204:	69fb      	ldr	r3, [r7, #28]
24059206:	fa02 f303 	lsl.w	r3, r2, r3
2405920a:	69ba      	ldr	r2, [r7, #24]
2405920c:	4313      	orrs	r3, r2
2405920e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
24059210:	687b      	ldr	r3, [r7, #4]
24059212:	69ba      	ldr	r2, [r7, #24]
24059214:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24059216:	683b      	ldr	r3, [r7, #0]
24059218:	685b      	ldr	r3, [r3, #4]
2405921a:	f003 0303 	and.w	r3, r3, #3
2405921e:	2b03      	cmp	r3, #3
24059220:	d017      	beq.n	24059252 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
24059222:	687b      	ldr	r3, [r7, #4]
24059224:	68db      	ldr	r3, [r3, #12]
24059226:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24059228:	69fb      	ldr	r3, [r7, #28]
2405922a:	005b      	lsls	r3, r3, #1
2405922c:	2203      	movs	r2, #3
2405922e:	fa02 f303 	lsl.w	r3, r2, r3
24059232:	43db      	mvns	r3, r3
24059234:	69ba      	ldr	r2, [r7, #24]
24059236:	4013      	ands	r3, r2
24059238:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2405923a:	683b      	ldr	r3, [r7, #0]
2405923c:	689a      	ldr	r2, [r3, #8]
2405923e:	69fb      	ldr	r3, [r7, #28]
24059240:	005b      	lsls	r3, r3, #1
24059242:	fa02 f303 	lsl.w	r3, r2, r3
24059246:	69ba      	ldr	r2, [r7, #24]
24059248:	4313      	orrs	r3, r2
2405924a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
2405924c:	687b      	ldr	r3, [r7, #4]
2405924e:	69ba      	ldr	r2, [r7, #24]
24059250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24059252:	683b      	ldr	r3, [r7, #0]
24059254:	685b      	ldr	r3, [r3, #4]
24059256:	f003 0303 	and.w	r3, r3, #3
2405925a:	2b02      	cmp	r3, #2
2405925c:	d123      	bne.n	240592a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2405925e:	69fb      	ldr	r3, [r7, #28]
24059260:	08da      	lsrs	r2, r3, #3
24059262:	687b      	ldr	r3, [r7, #4]
24059264:	3208      	adds	r2, #8
24059266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2405926a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
2405926c:	69fb      	ldr	r3, [r7, #28]
2405926e:	f003 0307 	and.w	r3, r3, #7
24059272:	009b      	lsls	r3, r3, #2
24059274:	220f      	movs	r2, #15
24059276:	fa02 f303 	lsl.w	r3, r2, r3
2405927a:	43db      	mvns	r3, r3
2405927c:	69ba      	ldr	r2, [r7, #24]
2405927e:	4013      	ands	r3, r2
24059280:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
24059282:	683b      	ldr	r3, [r7, #0]
24059284:	691a      	ldr	r2, [r3, #16]
24059286:	69fb      	ldr	r3, [r7, #28]
24059288:	f003 0307 	and.w	r3, r3, #7
2405928c:	009b      	lsls	r3, r3, #2
2405928e:	fa02 f303 	lsl.w	r3, r2, r3
24059292:	69ba      	ldr	r2, [r7, #24]
24059294:	4313      	orrs	r3, r2
24059296:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
24059298:	69fb      	ldr	r3, [r7, #28]
2405929a:	08da      	lsrs	r2, r3, #3
2405929c:	687b      	ldr	r3, [r7, #4]
2405929e:	3208      	adds	r2, #8
240592a0:	69b9      	ldr	r1, [r7, #24]
240592a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
240592a6:	687b      	ldr	r3, [r7, #4]
240592a8:	681b      	ldr	r3, [r3, #0]
240592aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
240592ac:	69fb      	ldr	r3, [r7, #28]
240592ae:	005b      	lsls	r3, r3, #1
240592b0:	2203      	movs	r2, #3
240592b2:	fa02 f303 	lsl.w	r3, r2, r3
240592b6:	43db      	mvns	r3, r3
240592b8:	69ba      	ldr	r2, [r7, #24]
240592ba:	4013      	ands	r3, r2
240592bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240592be:	683b      	ldr	r3, [r7, #0]
240592c0:	685b      	ldr	r3, [r3, #4]
240592c2:	f003 0203 	and.w	r2, r3, #3
240592c6:	69fb      	ldr	r3, [r7, #28]
240592c8:	005b      	lsls	r3, r3, #1
240592ca:	fa02 f303 	lsl.w	r3, r2, r3
240592ce:	69ba      	ldr	r2, [r7, #24]
240592d0:	4313      	orrs	r3, r2
240592d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
240592d4:	687b      	ldr	r3, [r7, #4]
240592d6:	69ba      	ldr	r2, [r7, #24]
240592d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
240592da:	683b      	ldr	r3, [r7, #0]
240592dc:	685b      	ldr	r3, [r3, #4]
240592de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
240592e2:	2b00      	cmp	r3, #0
240592e4:	f000 80e0 	beq.w	240594a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240592e8:	4b2f      	ldr	r3, [pc, #188]	; (240593a8 <HAL_GPIO_Init+0x238>)
240592ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
240592ee:	4a2e      	ldr	r2, [pc, #184]	; (240593a8 <HAL_GPIO_Init+0x238>)
240592f0:	f043 0302 	orr.w	r3, r3, #2
240592f4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
240592f8:	4b2b      	ldr	r3, [pc, #172]	; (240593a8 <HAL_GPIO_Init+0x238>)
240592fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
240592fe:	f003 0302 	and.w	r3, r3, #2
24059302:	60fb      	str	r3, [r7, #12]
24059304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
24059306:	4a29      	ldr	r2, [pc, #164]	; (240593ac <HAL_GPIO_Init+0x23c>)
24059308:	69fb      	ldr	r3, [r7, #28]
2405930a:	089b      	lsrs	r3, r3, #2
2405930c:	3302      	adds	r3, #2
2405930e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24059312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24059314:	69fb      	ldr	r3, [r7, #28]
24059316:	f003 0303 	and.w	r3, r3, #3
2405931a:	009b      	lsls	r3, r3, #2
2405931c:	220f      	movs	r2, #15
2405931e:	fa02 f303 	lsl.w	r3, r2, r3
24059322:	43db      	mvns	r3, r3
24059324:	69ba      	ldr	r2, [r7, #24]
24059326:	4013      	ands	r3, r2
24059328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
2405932a:	687b      	ldr	r3, [r7, #4]
2405932c:	4a20      	ldr	r2, [pc, #128]	; (240593b0 <HAL_GPIO_Init+0x240>)
2405932e:	4293      	cmp	r3, r2
24059330:	d052      	beq.n	240593d8 <HAL_GPIO_Init+0x268>
24059332:	687b      	ldr	r3, [r7, #4]
24059334:	4a1f      	ldr	r2, [pc, #124]	; (240593b4 <HAL_GPIO_Init+0x244>)
24059336:	4293      	cmp	r3, r2
24059338:	d031      	beq.n	2405939e <HAL_GPIO_Init+0x22e>
2405933a:	687b      	ldr	r3, [r7, #4]
2405933c:	4a1e      	ldr	r2, [pc, #120]	; (240593b8 <HAL_GPIO_Init+0x248>)
2405933e:	4293      	cmp	r3, r2
24059340:	d02b      	beq.n	2405939a <HAL_GPIO_Init+0x22a>
24059342:	687b      	ldr	r3, [r7, #4]
24059344:	4a1d      	ldr	r2, [pc, #116]	; (240593bc <HAL_GPIO_Init+0x24c>)
24059346:	4293      	cmp	r3, r2
24059348:	d025      	beq.n	24059396 <HAL_GPIO_Init+0x226>
2405934a:	687b      	ldr	r3, [r7, #4]
2405934c:	4a1c      	ldr	r2, [pc, #112]	; (240593c0 <HAL_GPIO_Init+0x250>)
2405934e:	4293      	cmp	r3, r2
24059350:	d01f      	beq.n	24059392 <HAL_GPIO_Init+0x222>
24059352:	687b      	ldr	r3, [r7, #4]
24059354:	4a1b      	ldr	r2, [pc, #108]	; (240593c4 <HAL_GPIO_Init+0x254>)
24059356:	4293      	cmp	r3, r2
24059358:	d019      	beq.n	2405938e <HAL_GPIO_Init+0x21e>
2405935a:	687b      	ldr	r3, [r7, #4]
2405935c:	4a1a      	ldr	r2, [pc, #104]	; (240593c8 <HAL_GPIO_Init+0x258>)
2405935e:	4293      	cmp	r3, r2
24059360:	d013      	beq.n	2405938a <HAL_GPIO_Init+0x21a>
24059362:	687b      	ldr	r3, [r7, #4]
24059364:	4a19      	ldr	r2, [pc, #100]	; (240593cc <HAL_GPIO_Init+0x25c>)
24059366:	4293      	cmp	r3, r2
24059368:	d00d      	beq.n	24059386 <HAL_GPIO_Init+0x216>
2405936a:	687b      	ldr	r3, [r7, #4]
2405936c:	4a18      	ldr	r2, [pc, #96]	; (240593d0 <HAL_GPIO_Init+0x260>)
2405936e:	4293      	cmp	r3, r2
24059370:	d007      	beq.n	24059382 <HAL_GPIO_Init+0x212>
24059372:	687b      	ldr	r3, [r7, #4]
24059374:	4a17      	ldr	r2, [pc, #92]	; (240593d4 <HAL_GPIO_Init+0x264>)
24059376:	4293      	cmp	r3, r2
24059378:	d101      	bne.n	2405937e <HAL_GPIO_Init+0x20e>
2405937a:	2309      	movs	r3, #9
2405937c:	e02d      	b.n	240593da <HAL_GPIO_Init+0x26a>
2405937e:	230a      	movs	r3, #10
24059380:	e02b      	b.n	240593da <HAL_GPIO_Init+0x26a>
24059382:	2308      	movs	r3, #8
24059384:	e029      	b.n	240593da <HAL_GPIO_Init+0x26a>
24059386:	2307      	movs	r3, #7
24059388:	e027      	b.n	240593da <HAL_GPIO_Init+0x26a>
2405938a:	2306      	movs	r3, #6
2405938c:	e025      	b.n	240593da <HAL_GPIO_Init+0x26a>
2405938e:	2305      	movs	r3, #5
24059390:	e023      	b.n	240593da <HAL_GPIO_Init+0x26a>
24059392:	2304      	movs	r3, #4
24059394:	e021      	b.n	240593da <HAL_GPIO_Init+0x26a>
24059396:	2303      	movs	r3, #3
24059398:	e01f      	b.n	240593da <HAL_GPIO_Init+0x26a>
2405939a:	2302      	movs	r3, #2
2405939c:	e01d      	b.n	240593da <HAL_GPIO_Init+0x26a>
2405939e:	2301      	movs	r3, #1
240593a0:	e01b      	b.n	240593da <HAL_GPIO_Init+0x26a>
240593a2:	bf00      	nop
240593a4:	58000080 	.word	0x58000080
240593a8:	58024400 	.word	0x58024400
240593ac:	58000400 	.word	0x58000400
240593b0:	58020000 	.word	0x58020000
240593b4:	58020400 	.word	0x58020400
240593b8:	58020800 	.word	0x58020800
240593bc:	58020c00 	.word	0x58020c00
240593c0:	58021000 	.word	0x58021000
240593c4:	58021400 	.word	0x58021400
240593c8:	58021800 	.word	0x58021800
240593cc:	58021c00 	.word	0x58021c00
240593d0:	58022000 	.word	0x58022000
240593d4:	58022400 	.word	0x58022400
240593d8:	2300      	movs	r3, #0
240593da:	69fa      	ldr	r2, [r7, #28]
240593dc:	f002 0203 	and.w	r2, r2, #3
240593e0:	0092      	lsls	r2, r2, #2
240593e2:	4093      	lsls	r3, r2
240593e4:	69ba      	ldr	r2, [r7, #24]
240593e6:	4313      	orrs	r3, r2
240593e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
240593ea:	4938      	ldr	r1, [pc, #224]	; (240594cc <HAL_GPIO_Init+0x35c>)
240593ec:	69fb      	ldr	r3, [r7, #28]
240593ee:	089b      	lsrs	r3, r3, #2
240593f0:	3302      	adds	r3, #2
240593f2:	69ba      	ldr	r2, [r7, #24]
240593f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
240593f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240593fc:	681b      	ldr	r3, [r3, #0]
240593fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24059400:	693b      	ldr	r3, [r7, #16]
24059402:	43db      	mvns	r3, r3
24059404:	69ba      	ldr	r2, [r7, #24]
24059406:	4013      	ands	r3, r2
24059408:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
2405940a:	683b      	ldr	r3, [r7, #0]
2405940c:	685b      	ldr	r3, [r3, #4]
2405940e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
24059412:	2b00      	cmp	r3, #0
24059414:	d003      	beq.n	2405941e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
24059416:	69ba      	ldr	r2, [r7, #24]
24059418:	693b      	ldr	r3, [r7, #16]
2405941a:	4313      	orrs	r3, r2
2405941c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
2405941e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24059422:	69bb      	ldr	r3, [r7, #24]
24059424:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
24059426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2405942a:	685b      	ldr	r3, [r3, #4]
2405942c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2405942e:	693b      	ldr	r3, [r7, #16]
24059430:	43db      	mvns	r3, r3
24059432:	69ba      	ldr	r2, [r7, #24]
24059434:	4013      	ands	r3, r2
24059436:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24059438:	683b      	ldr	r3, [r7, #0]
2405943a:	685b      	ldr	r3, [r3, #4]
2405943c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24059440:	2b00      	cmp	r3, #0
24059442:	d003      	beq.n	2405944c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
24059444:	69ba      	ldr	r2, [r7, #24]
24059446:	693b      	ldr	r3, [r7, #16]
24059448:	4313      	orrs	r3, r2
2405944a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
2405944c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24059450:	69bb      	ldr	r3, [r7, #24]
24059452:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
24059454:	697b      	ldr	r3, [r7, #20]
24059456:	685b      	ldr	r3, [r3, #4]
24059458:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2405945a:	693b      	ldr	r3, [r7, #16]
2405945c:	43db      	mvns	r3, r3
2405945e:	69ba      	ldr	r2, [r7, #24]
24059460:	4013      	ands	r3, r2
24059462:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24059464:	683b      	ldr	r3, [r7, #0]
24059466:	685b      	ldr	r3, [r3, #4]
24059468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405946c:	2b00      	cmp	r3, #0
2405946e:	d003      	beq.n	24059478 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
24059470:	69ba      	ldr	r2, [r7, #24]
24059472:	693b      	ldr	r3, [r7, #16]
24059474:	4313      	orrs	r3, r2
24059476:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
24059478:	697b      	ldr	r3, [r7, #20]
2405947a:	69ba      	ldr	r2, [r7, #24]
2405947c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
2405947e:	697b      	ldr	r3, [r7, #20]
24059480:	681b      	ldr	r3, [r3, #0]
24059482:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24059484:	693b      	ldr	r3, [r7, #16]
24059486:	43db      	mvns	r3, r3
24059488:	69ba      	ldr	r2, [r7, #24]
2405948a:	4013      	ands	r3, r2
2405948c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
2405948e:	683b      	ldr	r3, [r7, #0]
24059490:	685b      	ldr	r3, [r3, #4]
24059492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24059496:	2b00      	cmp	r3, #0
24059498:	d003      	beq.n	240594a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
2405949a:	69ba      	ldr	r2, [r7, #24]
2405949c:	693b      	ldr	r3, [r7, #16]
2405949e:	4313      	orrs	r3, r2
240594a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
240594a2:	697b      	ldr	r3, [r7, #20]
240594a4:	69ba      	ldr	r2, [r7, #24]
240594a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
240594a8:	69fb      	ldr	r3, [r7, #28]
240594aa:	3301      	adds	r3, #1
240594ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240594ae:	683b      	ldr	r3, [r7, #0]
240594b0:	681a      	ldr	r2, [r3, #0]
240594b2:	69fb      	ldr	r3, [r7, #28]
240594b4:	fa22 f303 	lsr.w	r3, r2, r3
240594b8:	2b00      	cmp	r3, #0
240594ba:	f47f ae63 	bne.w	24059184 <HAL_GPIO_Init+0x14>
  }
}
240594be:	bf00      	nop
240594c0:	bf00      	nop
240594c2:	3724      	adds	r7, #36	; 0x24
240594c4:	46bd      	mov	sp, r7
240594c6:	f85d 7b04 	ldr.w	r7, [sp], #4
240594ca:	4770      	bx	lr
240594cc:	58000400 	.word	0x58000400

240594d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
240594d0:	b480      	push	{r7}
240594d2:	b085      	sub	sp, #20
240594d4:	af00      	add	r7, sp, #0
240594d6:	6078      	str	r0, [r7, #4]
240594d8:	460b      	mov	r3, r1
240594da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
240594dc:	687b      	ldr	r3, [r7, #4]
240594de:	691a      	ldr	r2, [r3, #16]
240594e0:	887b      	ldrh	r3, [r7, #2]
240594e2:	4013      	ands	r3, r2
240594e4:	2b00      	cmp	r3, #0
240594e6:	d002      	beq.n	240594ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
240594e8:	2301      	movs	r3, #1
240594ea:	73fb      	strb	r3, [r7, #15]
240594ec:	e001      	b.n	240594f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
240594ee:	2300      	movs	r3, #0
240594f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
240594f2:	7bfb      	ldrb	r3, [r7, #15]
}
240594f4:	4618      	mov	r0, r3
240594f6:	3714      	adds	r7, #20
240594f8:	46bd      	mov	sp, r7
240594fa:	f85d 7b04 	ldr.w	r7, [sp], #4
240594fe:	4770      	bx	lr

24059500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
24059500:	b480      	push	{r7}
24059502:	b083      	sub	sp, #12
24059504:	af00      	add	r7, sp, #0
24059506:	6078      	str	r0, [r7, #4]
24059508:	460b      	mov	r3, r1
2405950a:	807b      	strh	r3, [r7, #2]
2405950c:	4613      	mov	r3, r2
2405950e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24059510:	787b      	ldrb	r3, [r7, #1]
24059512:	2b00      	cmp	r3, #0
24059514:	d003      	beq.n	2405951e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
24059516:	887a      	ldrh	r2, [r7, #2]
24059518:	687b      	ldr	r3, [r7, #4]
2405951a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
2405951c:	e003      	b.n	24059526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2405951e:	887b      	ldrh	r3, [r7, #2]
24059520:	041a      	lsls	r2, r3, #16
24059522:	687b      	ldr	r3, [r7, #4]
24059524:	619a      	str	r2, [r3, #24]
}
24059526:	bf00      	nop
24059528:	370c      	adds	r7, #12
2405952a:	46bd      	mov	sp, r7
2405952c:	f85d 7b04 	ldr.w	r7, [sp], #4
24059530:	4770      	bx	lr

24059532 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
24059532:	b580      	push	{r7, lr}
24059534:	b082      	sub	sp, #8
24059536:	af00      	add	r7, sp, #0
24059538:	4603      	mov	r3, r0
2405953a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
2405953c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24059540:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
24059544:	88fb      	ldrh	r3, [r7, #6]
24059546:	4013      	ands	r3, r2
24059548:	2b00      	cmp	r3, #0
2405954a:	d008      	beq.n	2405955e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
2405954c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24059550:	88fb      	ldrh	r3, [r7, #6]
24059552:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
24059556:	88fb      	ldrh	r3, [r7, #6]
24059558:	4618      	mov	r0, r3
2405955a:	f000 f804 	bl	24059566 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
2405955e:	bf00      	nop
24059560:	3708      	adds	r7, #8
24059562:	46bd      	mov	sp, r7
24059564:	bd80      	pop	{r7, pc}

24059566 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
24059566:	b480      	push	{r7}
24059568:	b083      	sub	sp, #12
2405956a:	af00      	add	r7, sp, #0
2405956c:	4603      	mov	r3, r0
2405956e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
24059570:	bf00      	nop
24059572:	370c      	adds	r7, #12
24059574:	46bd      	mov	sp, r7
24059576:	f85d 7b04 	ldr.w	r7, [sp], #4
2405957a:	4770      	bx	lr

2405957c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
2405957c:	b580      	push	{r7, lr}
2405957e:	b084      	sub	sp, #16
24059580:	af00      	add	r7, sp, #0
24059582:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
24059584:	687b      	ldr	r3, [r7, #4]
24059586:	2b00      	cmp	r3, #0
24059588:	d101      	bne.n	2405958e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
2405958a:	2301      	movs	r3, #1
2405958c:	e0bf      	b.n	2405970e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
2405958e:	687b      	ldr	r3, [r7, #4]
24059590:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
24059594:	b2db      	uxtb	r3, r3
24059596:	2b00      	cmp	r3, #0
24059598:	d106      	bne.n	240595a8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
2405959a:	687b      	ldr	r3, [r7, #4]
2405959c:	2200      	movs	r2, #0
2405959e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
240595a2:	6878      	ldr	r0, [r7, #4]
240595a4:	f7f9 fdf8 	bl	24053198 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
240595a8:	687b      	ldr	r3, [r7, #4]
240595aa:	2202      	movs	r2, #2
240595ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
240595b0:	687b      	ldr	r3, [r7, #4]
240595b2:	681b      	ldr	r3, [r3, #0]
240595b4:	699a      	ldr	r2, [r3, #24]
240595b6:	687b      	ldr	r3, [r7, #4]
240595b8:	681b      	ldr	r3, [r3, #0]
240595ba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
240595be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
240595c0:	687b      	ldr	r3, [r7, #4]
240595c2:	681b      	ldr	r3, [r3, #0]
240595c4:	6999      	ldr	r1, [r3, #24]
240595c6:	687b      	ldr	r3, [r7, #4]
240595c8:	685a      	ldr	r2, [r3, #4]
240595ca:	687b      	ldr	r3, [r7, #4]
240595cc:	689b      	ldr	r3, [r3, #8]
240595ce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
240595d0:	687b      	ldr	r3, [r7, #4]
240595d2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
240595d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
240595d6:	687b      	ldr	r3, [r7, #4]
240595d8:	691b      	ldr	r3, [r3, #16]
240595da:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
240595dc:	687b      	ldr	r3, [r7, #4]
240595de:	681b      	ldr	r3, [r3, #0]
240595e0:	430a      	orrs	r2, r1
240595e2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
240595e4:	687b      	ldr	r3, [r7, #4]
240595e6:	681b      	ldr	r3, [r3, #0]
240595e8:	6899      	ldr	r1, [r3, #8]
240595ea:	687b      	ldr	r3, [r7, #4]
240595ec:	681a      	ldr	r2, [r3, #0]
240595ee:	4b4a      	ldr	r3, [pc, #296]	; (24059718 <HAL_LTDC_Init+0x19c>)
240595f0:	400b      	ands	r3, r1
240595f2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
240595f4:	687b      	ldr	r3, [r7, #4]
240595f6:	695b      	ldr	r3, [r3, #20]
240595f8:	041b      	lsls	r3, r3, #16
240595fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
240595fc:	687b      	ldr	r3, [r7, #4]
240595fe:	681b      	ldr	r3, [r3, #0]
24059600:	6899      	ldr	r1, [r3, #8]
24059602:	687b      	ldr	r3, [r7, #4]
24059604:	699a      	ldr	r2, [r3, #24]
24059606:	68fb      	ldr	r3, [r7, #12]
24059608:	431a      	orrs	r2, r3
2405960a:	687b      	ldr	r3, [r7, #4]
2405960c:	681b      	ldr	r3, [r3, #0]
2405960e:	430a      	orrs	r2, r1
24059610:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
24059612:	687b      	ldr	r3, [r7, #4]
24059614:	681b      	ldr	r3, [r3, #0]
24059616:	68d9      	ldr	r1, [r3, #12]
24059618:	687b      	ldr	r3, [r7, #4]
2405961a:	681a      	ldr	r2, [r3, #0]
2405961c:	4b3e      	ldr	r3, [pc, #248]	; (24059718 <HAL_LTDC_Init+0x19c>)
2405961e:	400b      	ands	r3, r1
24059620:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
24059622:	687b      	ldr	r3, [r7, #4]
24059624:	69db      	ldr	r3, [r3, #28]
24059626:	041b      	lsls	r3, r3, #16
24059628:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
2405962a:	687b      	ldr	r3, [r7, #4]
2405962c:	681b      	ldr	r3, [r3, #0]
2405962e:	68d9      	ldr	r1, [r3, #12]
24059630:	687b      	ldr	r3, [r7, #4]
24059632:	6a1a      	ldr	r2, [r3, #32]
24059634:	68fb      	ldr	r3, [r7, #12]
24059636:	431a      	orrs	r2, r3
24059638:	687b      	ldr	r3, [r7, #4]
2405963a:	681b      	ldr	r3, [r3, #0]
2405963c:	430a      	orrs	r2, r1
2405963e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
24059640:	687b      	ldr	r3, [r7, #4]
24059642:	681b      	ldr	r3, [r3, #0]
24059644:	6919      	ldr	r1, [r3, #16]
24059646:	687b      	ldr	r3, [r7, #4]
24059648:	681a      	ldr	r2, [r3, #0]
2405964a:	4b33      	ldr	r3, [pc, #204]	; (24059718 <HAL_LTDC_Init+0x19c>)
2405964c:	400b      	ands	r3, r1
2405964e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
24059650:	687b      	ldr	r3, [r7, #4]
24059652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24059654:	041b      	lsls	r3, r3, #16
24059656:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
24059658:	687b      	ldr	r3, [r7, #4]
2405965a:	681b      	ldr	r3, [r3, #0]
2405965c:	6919      	ldr	r1, [r3, #16]
2405965e:	687b      	ldr	r3, [r7, #4]
24059660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24059662:	68fb      	ldr	r3, [r7, #12]
24059664:	431a      	orrs	r2, r3
24059666:	687b      	ldr	r3, [r7, #4]
24059668:	681b      	ldr	r3, [r3, #0]
2405966a:	430a      	orrs	r2, r1
2405966c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
2405966e:	687b      	ldr	r3, [r7, #4]
24059670:	681b      	ldr	r3, [r3, #0]
24059672:	6959      	ldr	r1, [r3, #20]
24059674:	687b      	ldr	r3, [r7, #4]
24059676:	681a      	ldr	r2, [r3, #0]
24059678:	4b27      	ldr	r3, [pc, #156]	; (24059718 <HAL_LTDC_Init+0x19c>)
2405967a:	400b      	ands	r3, r1
2405967c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
2405967e:	687b      	ldr	r3, [r7, #4]
24059680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24059682:	041b      	lsls	r3, r3, #16
24059684:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
24059686:	687b      	ldr	r3, [r7, #4]
24059688:	681b      	ldr	r3, [r3, #0]
2405968a:	6959      	ldr	r1, [r3, #20]
2405968c:	687b      	ldr	r3, [r7, #4]
2405968e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
24059690:	68fb      	ldr	r3, [r7, #12]
24059692:	431a      	orrs	r2, r3
24059694:	687b      	ldr	r3, [r7, #4]
24059696:	681b      	ldr	r3, [r3, #0]
24059698:	430a      	orrs	r2, r1
2405969a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
2405969c:	687b      	ldr	r3, [r7, #4]
2405969e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240596a2:	021b      	lsls	r3, r3, #8
240596a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
240596a6:	687b      	ldr	r3, [r7, #4]
240596a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
240596ac:	041b      	lsls	r3, r3, #16
240596ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
240596b0:	687b      	ldr	r3, [r7, #4]
240596b2:	681b      	ldr	r3, [r3, #0]
240596b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240596b6:	687b      	ldr	r3, [r7, #4]
240596b8:	681b      	ldr	r3, [r3, #0]
240596ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
240596be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
240596c0:	687b      	ldr	r3, [r7, #4]
240596c2:	681b      	ldr	r3, [r3, #0]
240596c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
240596c6:	68ba      	ldr	r2, [r7, #8]
240596c8:	68fb      	ldr	r3, [r7, #12]
240596ca:	4313      	orrs	r3, r2
240596cc:	687a      	ldr	r2, [r7, #4]
240596ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
240596d2:	431a      	orrs	r2, r3
240596d4:	687b      	ldr	r3, [r7, #4]
240596d6:	681b      	ldr	r3, [r3, #0]
240596d8:	430a      	orrs	r2, r1
240596da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
240596dc:	687b      	ldr	r3, [r7, #4]
240596de:	681b      	ldr	r3, [r3, #0]
240596e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240596e2:	687b      	ldr	r3, [r7, #4]
240596e4:	681b      	ldr	r3, [r3, #0]
240596e6:	f042 0206 	orr.w	r2, r2, #6
240596ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
240596ec:	687b      	ldr	r3, [r7, #4]
240596ee:	681b      	ldr	r3, [r3, #0]
240596f0:	699a      	ldr	r2, [r3, #24]
240596f2:	687b      	ldr	r3, [r7, #4]
240596f4:	681b      	ldr	r3, [r3, #0]
240596f6:	f042 0201 	orr.w	r2, r2, #1
240596fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
240596fc:	687b      	ldr	r3, [r7, #4]
240596fe:	2200      	movs	r2, #0
24059700:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
24059704:	687b      	ldr	r3, [r7, #4]
24059706:	2201      	movs	r2, #1
24059708:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
2405970c:	2300      	movs	r3, #0
}
2405970e:	4618      	mov	r0, r3
24059710:	3710      	adds	r7, #16
24059712:	46bd      	mov	sp, r7
24059714:	bd80      	pop	{r7, pc}
24059716:	bf00      	nop
24059718:	f000f800 	.word	0xf000f800

2405971c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
2405971c:	b580      	push	{r7, lr}
2405971e:	b084      	sub	sp, #16
24059720:	af00      	add	r7, sp, #0
24059722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
24059724:	687b      	ldr	r3, [r7, #4]
24059726:	681b      	ldr	r3, [r3, #0]
24059728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405972a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
2405972c:	687b      	ldr	r3, [r7, #4]
2405972e:	681b      	ldr	r3, [r3, #0]
24059730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24059732:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
24059734:	68fb      	ldr	r3, [r7, #12]
24059736:	f003 0304 	and.w	r3, r3, #4
2405973a:	2b00      	cmp	r3, #0
2405973c:	d023      	beq.n	24059786 <HAL_LTDC_IRQHandler+0x6a>
2405973e:	68bb      	ldr	r3, [r7, #8]
24059740:	f003 0304 	and.w	r3, r3, #4
24059744:	2b00      	cmp	r3, #0
24059746:	d01e      	beq.n	24059786 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
24059748:	687b      	ldr	r3, [r7, #4]
2405974a:	681b      	ldr	r3, [r3, #0]
2405974c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405974e:	687b      	ldr	r3, [r7, #4]
24059750:	681b      	ldr	r3, [r3, #0]
24059752:	f022 0204 	bic.w	r2, r2, #4
24059756:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
24059758:	687b      	ldr	r3, [r7, #4]
2405975a:	681b      	ldr	r3, [r3, #0]
2405975c:	2204      	movs	r2, #4
2405975e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
24059760:	687b      	ldr	r3, [r7, #4]
24059762:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24059766:	f043 0201 	orr.w	r2, r3, #1
2405976a:	687b      	ldr	r3, [r7, #4]
2405976c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
24059770:	687b      	ldr	r3, [r7, #4]
24059772:	2204      	movs	r2, #4
24059774:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
24059778:	687b      	ldr	r3, [r7, #4]
2405977a:	2200      	movs	r2, #0
2405977c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
24059780:	6878      	ldr	r0, [r7, #4]
24059782:	f000 f86f 	bl	24059864 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
24059786:	68fb      	ldr	r3, [r7, #12]
24059788:	f003 0302 	and.w	r3, r3, #2
2405978c:	2b00      	cmp	r3, #0
2405978e:	d023      	beq.n	240597d8 <HAL_LTDC_IRQHandler+0xbc>
24059790:	68bb      	ldr	r3, [r7, #8]
24059792:	f003 0302 	and.w	r3, r3, #2
24059796:	2b00      	cmp	r3, #0
24059798:	d01e      	beq.n	240597d8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
2405979a:	687b      	ldr	r3, [r7, #4]
2405979c:	681b      	ldr	r3, [r3, #0]
2405979e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240597a0:	687b      	ldr	r3, [r7, #4]
240597a2:	681b      	ldr	r3, [r3, #0]
240597a4:	f022 0202 	bic.w	r2, r2, #2
240597a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
240597aa:	687b      	ldr	r3, [r7, #4]
240597ac:	681b      	ldr	r3, [r3, #0]
240597ae:	2202      	movs	r2, #2
240597b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
240597b2:	687b      	ldr	r3, [r7, #4]
240597b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
240597b8:	f043 0202 	orr.w	r2, r3, #2
240597bc:	687b      	ldr	r3, [r7, #4]
240597be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
240597c2:	687b      	ldr	r3, [r7, #4]
240597c4:	2204      	movs	r2, #4
240597c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
240597ca:	687b      	ldr	r3, [r7, #4]
240597cc:	2200      	movs	r2, #0
240597ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
240597d2:	6878      	ldr	r0, [r7, #4]
240597d4:	f000 f846 	bl	24059864 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
240597d8:	68fb      	ldr	r3, [r7, #12]
240597da:	f003 0301 	and.w	r3, r3, #1
240597de:	2b00      	cmp	r3, #0
240597e0:	d01b      	beq.n	2405981a <HAL_LTDC_IRQHandler+0xfe>
240597e2:	68bb      	ldr	r3, [r7, #8]
240597e4:	f003 0301 	and.w	r3, r3, #1
240597e8:	2b00      	cmp	r3, #0
240597ea:	d016      	beq.n	2405981a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
240597ec:	687b      	ldr	r3, [r7, #4]
240597ee:	681b      	ldr	r3, [r3, #0]
240597f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240597f2:	687b      	ldr	r3, [r7, #4]
240597f4:	681b      	ldr	r3, [r3, #0]
240597f6:	f022 0201 	bic.w	r2, r2, #1
240597fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
240597fc:	687b      	ldr	r3, [r7, #4]
240597fe:	681b      	ldr	r3, [r3, #0]
24059800:	2201      	movs	r2, #1
24059802:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
24059804:	687b      	ldr	r3, [r7, #4]
24059806:	2201      	movs	r2, #1
24059808:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
2405980c:	687b      	ldr	r3, [r7, #4]
2405980e:	2200      	movs	r2, #0
24059810:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
24059814:	6878      	ldr	r0, [r7, #4]
24059816:	f000 f82f 	bl	24059878 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
2405981a:	68fb      	ldr	r3, [r7, #12]
2405981c:	f003 0308 	and.w	r3, r3, #8
24059820:	2b00      	cmp	r3, #0
24059822:	d01b      	beq.n	2405985c <HAL_LTDC_IRQHandler+0x140>
24059824:	68bb      	ldr	r3, [r7, #8]
24059826:	f003 0308 	and.w	r3, r3, #8
2405982a:	2b00      	cmp	r3, #0
2405982c:	d016      	beq.n	2405985c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
2405982e:	687b      	ldr	r3, [r7, #4]
24059830:	681b      	ldr	r3, [r3, #0]
24059832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24059834:	687b      	ldr	r3, [r7, #4]
24059836:	681b      	ldr	r3, [r3, #0]
24059838:	f022 0208 	bic.w	r2, r2, #8
2405983c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
2405983e:	687b      	ldr	r3, [r7, #4]
24059840:	681b      	ldr	r3, [r3, #0]
24059842:	2208      	movs	r2, #8
24059844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
24059846:	687b      	ldr	r3, [r7, #4]
24059848:	2201      	movs	r2, #1
2405984a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
2405984e:	687b      	ldr	r3, [r7, #4]
24059850:	2200      	movs	r2, #0
24059852:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
24059856:	6878      	ldr	r0, [r7, #4]
24059858:	f7f8 fd60 	bl	2405231c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
2405985c:	bf00      	nop
2405985e:	3710      	adds	r7, #16
24059860:	46bd      	mov	sp, r7
24059862:	bd80      	pop	{r7, pc}

24059864 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
24059864:	b480      	push	{r7}
24059866:	b083      	sub	sp, #12
24059868:	af00      	add	r7, sp, #0
2405986a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
2405986c:	bf00      	nop
2405986e:	370c      	adds	r7, #12
24059870:	46bd      	mov	sp, r7
24059872:	f85d 7b04 	ldr.w	r7, [sp], #4
24059876:	4770      	bx	lr

24059878 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
24059878:	b480      	push	{r7}
2405987a:	b083      	sub	sp, #12
2405987c:	af00      	add	r7, sp, #0
2405987e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
24059880:	bf00      	nop
24059882:	370c      	adds	r7, #12
24059884:	46bd      	mov	sp, r7
24059886:	f85d 7b04 	ldr.w	r7, [sp], #4
2405988a:	4770      	bx	lr

2405988c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
2405988c:	b5b0      	push	{r4, r5, r7, lr}
2405988e:	b084      	sub	sp, #16
24059890:	af00      	add	r7, sp, #0
24059892:	60f8      	str	r0, [r7, #12]
24059894:	60b9      	str	r1, [r7, #8]
24059896:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
24059898:	68fb      	ldr	r3, [r7, #12]
2405989a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
2405989e:	2b01      	cmp	r3, #1
240598a0:	d101      	bne.n	240598a6 <HAL_LTDC_ConfigLayer+0x1a>
240598a2:	2302      	movs	r3, #2
240598a4:	e02c      	b.n	24059900 <HAL_LTDC_ConfigLayer+0x74>
240598a6:	68fb      	ldr	r3, [r7, #12]
240598a8:	2201      	movs	r2, #1
240598aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
240598ae:	68fb      	ldr	r3, [r7, #12]
240598b0:	2202      	movs	r2, #2
240598b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
240598b6:	68fa      	ldr	r2, [r7, #12]
240598b8:	687b      	ldr	r3, [r7, #4]
240598ba:	2134      	movs	r1, #52	; 0x34
240598bc:	fb01 f303 	mul.w	r3, r1, r3
240598c0:	4413      	add	r3, r2
240598c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
240598c6:	68bb      	ldr	r3, [r7, #8]
240598c8:	4614      	mov	r4, r2
240598ca:	461d      	mov	r5, r3
240598cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
240598ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
240598d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
240598d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
240598d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
240598d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
240598d8:	682b      	ldr	r3, [r5, #0]
240598da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
240598dc:	687a      	ldr	r2, [r7, #4]
240598de:	68b9      	ldr	r1, [r7, #8]
240598e0:	68f8      	ldr	r0, [r7, #12]
240598e2:	f000 f877 	bl	240599d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
240598e6:	68fb      	ldr	r3, [r7, #12]
240598e8:	681b      	ldr	r3, [r3, #0]
240598ea:	2201      	movs	r2, #1
240598ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
240598ee:	68fb      	ldr	r3, [r7, #12]
240598f0:	2201      	movs	r2, #1
240598f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
240598f6:	68fb      	ldr	r3, [r7, #12]
240598f8:	2200      	movs	r2, #0
240598fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
240598fe:	2300      	movs	r3, #0
}
24059900:	4618      	mov	r0, r3
24059902:	3710      	adds	r7, #16
24059904:	46bd      	mov	sp, r7
24059906:	bdb0      	pop	{r4, r5, r7, pc}

24059908 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
24059908:	b580      	push	{r7, lr}
2405990a:	b086      	sub	sp, #24
2405990c:	af00      	add	r7, sp, #0
2405990e:	60f8      	str	r0, [r7, #12]
24059910:	60b9      	str	r1, [r7, #8]
24059912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
24059914:	68fb      	ldr	r3, [r7, #12]
24059916:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
2405991a:	2b01      	cmp	r3, #1
2405991c:	d101      	bne.n	24059922 <HAL_LTDC_SetAddress+0x1a>
2405991e:	2302      	movs	r3, #2
24059920:	e024      	b.n	2405996c <HAL_LTDC_SetAddress+0x64>
24059922:	68fb      	ldr	r3, [r7, #12]
24059924:	2201      	movs	r2, #1
24059926:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
2405992a:	68fb      	ldr	r3, [r7, #12]
2405992c:	2202      	movs	r2, #2
2405992e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
24059932:	687b      	ldr	r3, [r7, #4]
24059934:	2234      	movs	r2, #52	; 0x34
24059936:	fb02 f303 	mul.w	r3, r2, r3
2405993a:	3338      	adds	r3, #56	; 0x38
2405993c:	68fa      	ldr	r2, [r7, #12]
2405993e:	4413      	add	r3, r2
24059940:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
24059942:	697b      	ldr	r3, [r7, #20]
24059944:	68ba      	ldr	r2, [r7, #8]
24059946:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
24059948:	687a      	ldr	r2, [r7, #4]
2405994a:	6979      	ldr	r1, [r7, #20]
2405994c:	68f8      	ldr	r0, [r7, #12]
2405994e:	f000 f841 	bl	240599d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
24059952:	68fb      	ldr	r3, [r7, #12]
24059954:	681b      	ldr	r3, [r3, #0]
24059956:	2201      	movs	r2, #1
24059958:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
2405995a:	68fb      	ldr	r3, [r7, #12]
2405995c:	2201      	movs	r2, #1
2405995e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
24059962:	68fb      	ldr	r3, [r7, #12]
24059964:	2200      	movs	r2, #0
24059966:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
2405996a:	2300      	movs	r3, #0
}
2405996c:	4618      	mov	r0, r3
2405996e:	3718      	adds	r7, #24
24059970:	46bd      	mov	sp, r7
24059972:	bd80      	pop	{r7, pc}

24059974 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
24059974:	b480      	push	{r7}
24059976:	b083      	sub	sp, #12
24059978:	af00      	add	r7, sp, #0
2405997a:	6078      	str	r0, [r7, #4]
2405997c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
2405997e:	687b      	ldr	r3, [r7, #4]
24059980:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
24059984:	2b01      	cmp	r3, #1
24059986:	d101      	bne.n	2405998c <HAL_LTDC_Reload+0x18>
24059988:	2302      	movs	r3, #2
2405998a:	e01c      	b.n	240599c6 <HAL_LTDC_Reload+0x52>
2405998c:	687b      	ldr	r3, [r7, #4]
2405998e:	2201      	movs	r2, #1
24059990:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
24059994:	687b      	ldr	r3, [r7, #4]
24059996:	2202      	movs	r2, #2
24059998:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
2405999c:	687b      	ldr	r3, [r7, #4]
2405999e:	681b      	ldr	r3, [r3, #0]
240599a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240599a2:	687b      	ldr	r3, [r7, #4]
240599a4:	681b      	ldr	r3, [r3, #0]
240599a6:	f042 0208 	orr.w	r2, r2, #8
240599aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
240599ac:	687b      	ldr	r3, [r7, #4]
240599ae:	681b      	ldr	r3, [r3, #0]
240599b0:	683a      	ldr	r2, [r7, #0]
240599b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
240599b4:	687b      	ldr	r3, [r7, #4]
240599b6:	2201      	movs	r2, #1
240599b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
240599bc:	687b      	ldr	r3, [r7, #4]
240599be:	2200      	movs	r2, #0
240599c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
240599c4:	2300      	movs	r3, #0
}
240599c6:	4618      	mov	r0, r3
240599c8:	370c      	adds	r7, #12
240599ca:	46bd      	mov	sp, r7
240599cc:	f85d 7b04 	ldr.w	r7, [sp], #4
240599d0:	4770      	bx	lr
	...

240599d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
240599d4:	b480      	push	{r7}
240599d6:	b089      	sub	sp, #36	; 0x24
240599d8:	af00      	add	r7, sp, #0
240599da:	60f8      	str	r0, [r7, #12]
240599dc:	60b9      	str	r1, [r7, #8]
240599de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
240599e0:	68bb      	ldr	r3, [r7, #8]
240599e2:	685a      	ldr	r2, [r3, #4]
240599e4:	68fb      	ldr	r3, [r7, #12]
240599e6:	681b      	ldr	r3, [r3, #0]
240599e8:	68db      	ldr	r3, [r3, #12]
240599ea:	0c1b      	lsrs	r3, r3, #16
240599ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
240599f0:	4413      	add	r3, r2
240599f2:	041b      	lsls	r3, r3, #16
240599f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
240599f6:	68fb      	ldr	r3, [r7, #12]
240599f8:	681b      	ldr	r3, [r3, #0]
240599fa:	461a      	mov	r2, r3
240599fc:	687b      	ldr	r3, [r7, #4]
240599fe:	01db      	lsls	r3, r3, #7
24059a00:	4413      	add	r3, r2
24059a02:	3384      	adds	r3, #132	; 0x84
24059a04:	685b      	ldr	r3, [r3, #4]
24059a06:	68fa      	ldr	r2, [r7, #12]
24059a08:	6812      	ldr	r2, [r2, #0]
24059a0a:	4611      	mov	r1, r2
24059a0c:	687a      	ldr	r2, [r7, #4]
24059a0e:	01d2      	lsls	r2, r2, #7
24059a10:	440a      	add	r2, r1
24059a12:	3284      	adds	r2, #132	; 0x84
24059a14:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
24059a18:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
24059a1a:	68bb      	ldr	r3, [r7, #8]
24059a1c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
24059a1e:	68fb      	ldr	r3, [r7, #12]
24059a20:	681b      	ldr	r3, [r3, #0]
24059a22:	68db      	ldr	r3, [r3, #12]
24059a24:	0c1b      	lsrs	r3, r3, #16
24059a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
24059a2a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
24059a2c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
24059a2e:	68fb      	ldr	r3, [r7, #12]
24059a30:	681b      	ldr	r3, [r3, #0]
24059a32:	4619      	mov	r1, r3
24059a34:	687b      	ldr	r3, [r7, #4]
24059a36:	01db      	lsls	r3, r3, #7
24059a38:	440b      	add	r3, r1
24059a3a:	3384      	adds	r3, #132	; 0x84
24059a3c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
24059a3e:	69fb      	ldr	r3, [r7, #28]
24059a40:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
24059a42:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
24059a44:	68bb      	ldr	r3, [r7, #8]
24059a46:	68da      	ldr	r2, [r3, #12]
24059a48:	68fb      	ldr	r3, [r7, #12]
24059a4a:	681b      	ldr	r3, [r3, #0]
24059a4c:	68db      	ldr	r3, [r3, #12]
24059a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
24059a52:	4413      	add	r3, r2
24059a54:	041b      	lsls	r3, r3, #16
24059a56:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
24059a58:	68fb      	ldr	r3, [r7, #12]
24059a5a:	681b      	ldr	r3, [r3, #0]
24059a5c:	461a      	mov	r2, r3
24059a5e:	687b      	ldr	r3, [r7, #4]
24059a60:	01db      	lsls	r3, r3, #7
24059a62:	4413      	add	r3, r2
24059a64:	3384      	adds	r3, #132	; 0x84
24059a66:	689b      	ldr	r3, [r3, #8]
24059a68:	68fa      	ldr	r2, [r7, #12]
24059a6a:	6812      	ldr	r2, [r2, #0]
24059a6c:	4611      	mov	r1, r2
24059a6e:	687a      	ldr	r2, [r7, #4]
24059a70:	01d2      	lsls	r2, r2, #7
24059a72:	440a      	add	r2, r1
24059a74:	3284      	adds	r2, #132	; 0x84
24059a76:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
24059a7a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
24059a7c:	68bb      	ldr	r3, [r7, #8]
24059a7e:	689a      	ldr	r2, [r3, #8]
24059a80:	68fb      	ldr	r3, [r7, #12]
24059a82:	681b      	ldr	r3, [r3, #0]
24059a84:	68db      	ldr	r3, [r3, #12]
24059a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
24059a8a:	4413      	add	r3, r2
24059a8c:	1c5a      	adds	r2, r3, #1
24059a8e:	68fb      	ldr	r3, [r7, #12]
24059a90:	681b      	ldr	r3, [r3, #0]
24059a92:	4619      	mov	r1, r3
24059a94:	687b      	ldr	r3, [r7, #4]
24059a96:	01db      	lsls	r3, r3, #7
24059a98:	440b      	add	r3, r1
24059a9a:	3384      	adds	r3, #132	; 0x84
24059a9c:	4619      	mov	r1, r3
24059a9e:	69fb      	ldr	r3, [r7, #28]
24059aa0:	4313      	orrs	r3, r2
24059aa2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
24059aa4:	68fb      	ldr	r3, [r7, #12]
24059aa6:	681b      	ldr	r3, [r3, #0]
24059aa8:	461a      	mov	r2, r3
24059aaa:	687b      	ldr	r3, [r7, #4]
24059aac:	01db      	lsls	r3, r3, #7
24059aae:	4413      	add	r3, r2
24059ab0:	3384      	adds	r3, #132	; 0x84
24059ab2:	691b      	ldr	r3, [r3, #16]
24059ab4:	68fa      	ldr	r2, [r7, #12]
24059ab6:	6812      	ldr	r2, [r2, #0]
24059ab8:	4611      	mov	r1, r2
24059aba:	687a      	ldr	r2, [r7, #4]
24059abc:	01d2      	lsls	r2, r2, #7
24059abe:	440a      	add	r2, r1
24059ac0:	3284      	adds	r2, #132	; 0x84
24059ac2:	f023 0307 	bic.w	r3, r3, #7
24059ac6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
24059ac8:	68fb      	ldr	r3, [r7, #12]
24059aca:	681b      	ldr	r3, [r3, #0]
24059acc:	461a      	mov	r2, r3
24059ace:	687b      	ldr	r3, [r7, #4]
24059ad0:	01db      	lsls	r3, r3, #7
24059ad2:	4413      	add	r3, r2
24059ad4:	3384      	adds	r3, #132	; 0x84
24059ad6:	461a      	mov	r2, r3
24059ad8:	68bb      	ldr	r3, [r7, #8]
24059ada:	691b      	ldr	r3, [r3, #16]
24059adc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
24059ade:	68bb      	ldr	r3, [r7, #8]
24059ae0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
24059ae4:	021b      	lsls	r3, r3, #8
24059ae6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
24059ae8:	68bb      	ldr	r3, [r7, #8]
24059aea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
24059aee:	041b      	lsls	r3, r3, #16
24059af0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
24059af2:	68bb      	ldr	r3, [r7, #8]
24059af4:	699b      	ldr	r3, [r3, #24]
24059af6:	061b      	lsls	r3, r3, #24
24059af8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
24059afa:	68fb      	ldr	r3, [r7, #12]
24059afc:	681b      	ldr	r3, [r3, #0]
24059afe:	461a      	mov	r2, r3
24059b00:	687b      	ldr	r3, [r7, #4]
24059b02:	01db      	lsls	r3, r3, #7
24059b04:	4413      	add	r3, r2
24059b06:	3384      	adds	r3, #132	; 0x84
24059b08:	699b      	ldr	r3, [r3, #24]
24059b0a:	68fb      	ldr	r3, [r7, #12]
24059b0c:	681b      	ldr	r3, [r3, #0]
24059b0e:	461a      	mov	r2, r3
24059b10:	687b      	ldr	r3, [r7, #4]
24059b12:	01db      	lsls	r3, r3, #7
24059b14:	4413      	add	r3, r2
24059b16:	3384      	adds	r3, #132	; 0x84
24059b18:	461a      	mov	r2, r3
24059b1a:	2300      	movs	r3, #0
24059b1c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
24059b1e:	68bb      	ldr	r3, [r7, #8]
24059b20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
24059b24:	461a      	mov	r2, r3
24059b26:	69fb      	ldr	r3, [r7, #28]
24059b28:	431a      	orrs	r2, r3
24059b2a:	69bb      	ldr	r3, [r7, #24]
24059b2c:	431a      	orrs	r2, r3
24059b2e:	68fb      	ldr	r3, [r7, #12]
24059b30:	681b      	ldr	r3, [r3, #0]
24059b32:	4619      	mov	r1, r3
24059b34:	687b      	ldr	r3, [r7, #4]
24059b36:	01db      	lsls	r3, r3, #7
24059b38:	440b      	add	r3, r1
24059b3a:	3384      	adds	r3, #132	; 0x84
24059b3c:	4619      	mov	r1, r3
24059b3e:	697b      	ldr	r3, [r7, #20]
24059b40:	4313      	orrs	r3, r2
24059b42:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
24059b44:	68fb      	ldr	r3, [r7, #12]
24059b46:	681b      	ldr	r3, [r3, #0]
24059b48:	461a      	mov	r2, r3
24059b4a:	687b      	ldr	r3, [r7, #4]
24059b4c:	01db      	lsls	r3, r3, #7
24059b4e:	4413      	add	r3, r2
24059b50:	3384      	adds	r3, #132	; 0x84
24059b52:	695b      	ldr	r3, [r3, #20]
24059b54:	68fa      	ldr	r2, [r7, #12]
24059b56:	6812      	ldr	r2, [r2, #0]
24059b58:	4611      	mov	r1, r2
24059b5a:	687a      	ldr	r2, [r7, #4]
24059b5c:	01d2      	lsls	r2, r2, #7
24059b5e:	440a      	add	r2, r1
24059b60:	3284      	adds	r2, #132	; 0x84
24059b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
24059b66:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
24059b68:	68fb      	ldr	r3, [r7, #12]
24059b6a:	681b      	ldr	r3, [r3, #0]
24059b6c:	461a      	mov	r2, r3
24059b6e:	687b      	ldr	r3, [r7, #4]
24059b70:	01db      	lsls	r3, r3, #7
24059b72:	4413      	add	r3, r2
24059b74:	3384      	adds	r3, #132	; 0x84
24059b76:	461a      	mov	r2, r3
24059b78:	68bb      	ldr	r3, [r7, #8]
24059b7a:	695b      	ldr	r3, [r3, #20]
24059b7c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
24059b7e:	68fb      	ldr	r3, [r7, #12]
24059b80:	681b      	ldr	r3, [r3, #0]
24059b82:	461a      	mov	r2, r3
24059b84:	687b      	ldr	r3, [r7, #4]
24059b86:	01db      	lsls	r3, r3, #7
24059b88:	4413      	add	r3, r2
24059b8a:	3384      	adds	r3, #132	; 0x84
24059b8c:	69da      	ldr	r2, [r3, #28]
24059b8e:	68fb      	ldr	r3, [r7, #12]
24059b90:	681b      	ldr	r3, [r3, #0]
24059b92:	4619      	mov	r1, r3
24059b94:	687b      	ldr	r3, [r7, #4]
24059b96:	01db      	lsls	r3, r3, #7
24059b98:	440b      	add	r3, r1
24059b9a:	3384      	adds	r3, #132	; 0x84
24059b9c:	4619      	mov	r1, r3
24059b9e:	4b58      	ldr	r3, [pc, #352]	; (24059d00 <LTDC_SetConfig+0x32c>)
24059ba0:	4013      	ands	r3, r2
24059ba2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
24059ba4:	68bb      	ldr	r3, [r7, #8]
24059ba6:	69da      	ldr	r2, [r3, #28]
24059ba8:	68bb      	ldr	r3, [r7, #8]
24059baa:	6a1b      	ldr	r3, [r3, #32]
24059bac:	68f9      	ldr	r1, [r7, #12]
24059bae:	6809      	ldr	r1, [r1, #0]
24059bb0:	4608      	mov	r0, r1
24059bb2:	6879      	ldr	r1, [r7, #4]
24059bb4:	01c9      	lsls	r1, r1, #7
24059bb6:	4401      	add	r1, r0
24059bb8:	3184      	adds	r1, #132	; 0x84
24059bba:	4313      	orrs	r3, r2
24059bbc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
24059bbe:	68fb      	ldr	r3, [r7, #12]
24059bc0:	681b      	ldr	r3, [r3, #0]
24059bc2:	461a      	mov	r2, r3
24059bc4:	687b      	ldr	r3, [r7, #4]
24059bc6:	01db      	lsls	r3, r3, #7
24059bc8:	4413      	add	r3, r2
24059bca:	3384      	adds	r3, #132	; 0x84
24059bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24059bce:	68fb      	ldr	r3, [r7, #12]
24059bd0:	681b      	ldr	r3, [r3, #0]
24059bd2:	461a      	mov	r2, r3
24059bd4:	687b      	ldr	r3, [r7, #4]
24059bd6:	01db      	lsls	r3, r3, #7
24059bd8:	4413      	add	r3, r2
24059bda:	3384      	adds	r3, #132	; 0x84
24059bdc:	461a      	mov	r2, r3
24059bde:	2300      	movs	r3, #0
24059be0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
24059be2:	68fb      	ldr	r3, [r7, #12]
24059be4:	681b      	ldr	r3, [r3, #0]
24059be6:	461a      	mov	r2, r3
24059be8:	687b      	ldr	r3, [r7, #4]
24059bea:	01db      	lsls	r3, r3, #7
24059bec:	4413      	add	r3, r2
24059bee:	3384      	adds	r3, #132	; 0x84
24059bf0:	461a      	mov	r2, r3
24059bf2:	68bb      	ldr	r3, [r7, #8]
24059bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24059bf6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
24059bf8:	68bb      	ldr	r3, [r7, #8]
24059bfa:	691b      	ldr	r3, [r3, #16]
24059bfc:	2b00      	cmp	r3, #0
24059bfe:	d102      	bne.n	24059c06 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
24059c00:	2304      	movs	r3, #4
24059c02:	61fb      	str	r3, [r7, #28]
24059c04:	e01b      	b.n	24059c3e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
24059c06:	68bb      	ldr	r3, [r7, #8]
24059c08:	691b      	ldr	r3, [r3, #16]
24059c0a:	2b01      	cmp	r3, #1
24059c0c:	d102      	bne.n	24059c14 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
24059c0e:	2303      	movs	r3, #3
24059c10:	61fb      	str	r3, [r7, #28]
24059c12:	e014      	b.n	24059c3e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
24059c14:	68bb      	ldr	r3, [r7, #8]
24059c16:	691b      	ldr	r3, [r3, #16]
24059c18:	2b04      	cmp	r3, #4
24059c1a:	d00b      	beq.n	24059c34 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
24059c1c:	68bb      	ldr	r3, [r7, #8]
24059c1e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
24059c20:	2b02      	cmp	r3, #2
24059c22:	d007      	beq.n	24059c34 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
24059c24:	68bb      	ldr	r3, [r7, #8]
24059c26:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
24059c28:	2b03      	cmp	r3, #3
24059c2a:	d003      	beq.n	24059c34 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
24059c2c:	68bb      	ldr	r3, [r7, #8]
24059c2e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
24059c30:	2b07      	cmp	r3, #7
24059c32:	d102      	bne.n	24059c3a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
24059c34:	2302      	movs	r3, #2
24059c36:	61fb      	str	r3, [r7, #28]
24059c38:	e001      	b.n	24059c3e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
24059c3a:	2301      	movs	r3, #1
24059c3c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
24059c3e:	68fb      	ldr	r3, [r7, #12]
24059c40:	681b      	ldr	r3, [r3, #0]
24059c42:	461a      	mov	r2, r3
24059c44:	687b      	ldr	r3, [r7, #4]
24059c46:	01db      	lsls	r3, r3, #7
24059c48:	4413      	add	r3, r2
24059c4a:	3384      	adds	r3, #132	; 0x84
24059c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24059c4e:	68fa      	ldr	r2, [r7, #12]
24059c50:	6812      	ldr	r2, [r2, #0]
24059c52:	4611      	mov	r1, r2
24059c54:	687a      	ldr	r2, [r7, #4]
24059c56:	01d2      	lsls	r2, r2, #7
24059c58:	440a      	add	r2, r1
24059c5a:	3284      	adds	r2, #132	; 0x84
24059c5c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
24059c60:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
24059c62:	68bb      	ldr	r3, [r7, #8]
24059c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24059c66:	69fa      	ldr	r2, [r7, #28]
24059c68:	fb02 f303 	mul.w	r3, r2, r3
24059c6c:	041a      	lsls	r2, r3, #16
24059c6e:	68bb      	ldr	r3, [r7, #8]
24059c70:	6859      	ldr	r1, [r3, #4]
24059c72:	68bb      	ldr	r3, [r7, #8]
24059c74:	681b      	ldr	r3, [r3, #0]
24059c76:	1acb      	subs	r3, r1, r3
24059c78:	69f9      	ldr	r1, [r7, #28]
24059c7a:	fb01 f303 	mul.w	r3, r1, r3
24059c7e:	3307      	adds	r3, #7
24059c80:	68f9      	ldr	r1, [r7, #12]
24059c82:	6809      	ldr	r1, [r1, #0]
24059c84:	4608      	mov	r0, r1
24059c86:	6879      	ldr	r1, [r7, #4]
24059c88:	01c9      	lsls	r1, r1, #7
24059c8a:	4401      	add	r1, r0
24059c8c:	3184      	adds	r1, #132	; 0x84
24059c8e:	4313      	orrs	r3, r2
24059c90:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
24059c92:	68fb      	ldr	r3, [r7, #12]
24059c94:	681b      	ldr	r3, [r3, #0]
24059c96:	461a      	mov	r2, r3
24059c98:	687b      	ldr	r3, [r7, #4]
24059c9a:	01db      	lsls	r3, r3, #7
24059c9c:	4413      	add	r3, r2
24059c9e:	3384      	adds	r3, #132	; 0x84
24059ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
24059ca2:	68fb      	ldr	r3, [r7, #12]
24059ca4:	681b      	ldr	r3, [r3, #0]
24059ca6:	4619      	mov	r1, r3
24059ca8:	687b      	ldr	r3, [r7, #4]
24059caa:	01db      	lsls	r3, r3, #7
24059cac:	440b      	add	r3, r1
24059cae:	3384      	adds	r3, #132	; 0x84
24059cb0:	4619      	mov	r1, r3
24059cb2:	4b14      	ldr	r3, [pc, #80]	; (24059d04 <LTDC_SetConfig+0x330>)
24059cb4:	4013      	ands	r3, r2
24059cb6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
24059cb8:	68fb      	ldr	r3, [r7, #12]
24059cba:	681b      	ldr	r3, [r3, #0]
24059cbc:	461a      	mov	r2, r3
24059cbe:	687b      	ldr	r3, [r7, #4]
24059cc0:	01db      	lsls	r3, r3, #7
24059cc2:	4413      	add	r3, r2
24059cc4:	3384      	adds	r3, #132	; 0x84
24059cc6:	461a      	mov	r2, r3
24059cc8:	68bb      	ldr	r3, [r7, #8]
24059cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24059ccc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
24059cce:	68fb      	ldr	r3, [r7, #12]
24059cd0:	681b      	ldr	r3, [r3, #0]
24059cd2:	461a      	mov	r2, r3
24059cd4:	687b      	ldr	r3, [r7, #4]
24059cd6:	01db      	lsls	r3, r3, #7
24059cd8:	4413      	add	r3, r2
24059cda:	3384      	adds	r3, #132	; 0x84
24059cdc:	681b      	ldr	r3, [r3, #0]
24059cde:	68fa      	ldr	r2, [r7, #12]
24059ce0:	6812      	ldr	r2, [r2, #0]
24059ce2:	4611      	mov	r1, r2
24059ce4:	687a      	ldr	r2, [r7, #4]
24059ce6:	01d2      	lsls	r2, r2, #7
24059ce8:	440a      	add	r2, r1
24059cea:	3284      	adds	r2, #132	; 0x84
24059cec:	f043 0301 	orr.w	r3, r3, #1
24059cf0:	6013      	str	r3, [r2, #0]
}
24059cf2:	bf00      	nop
24059cf4:	3724      	adds	r7, #36	; 0x24
24059cf6:	46bd      	mov	sp, r7
24059cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
24059cfc:	4770      	bx	lr
24059cfe:	bf00      	nop
24059d00:	fffff8f8 	.word	0xfffff8f8
24059d04:	fffff800 	.word	0xfffff800

24059d08 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
24059d08:	b480      	push	{r7}
24059d0a:	b083      	sub	sp, #12
24059d0c:	af00      	add	r7, sp, #0
24059d0e:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24059d10:	687b      	ldr	r3, [r7, #4]
24059d12:	2b00      	cmp	r3, #0
24059d14:	d101      	bne.n	24059d1a <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
24059d16:	2301      	movs	r3, #1
24059d18:	e017      	b.n	24059d4a <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
24059d1a:	687b      	ldr	r3, [r7, #4]
24059d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24059d20:	b2db      	uxtb	r3, r3
24059d22:	2b02      	cmp	r3, #2
24059d24:	d004      	beq.n	24059d30 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24059d26:	687b      	ldr	r3, [r7, #4]
24059d28:	2280      	movs	r2, #128	; 0x80
24059d2a:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
24059d2c:	2301      	movs	r3, #1
24059d2e:	e00c      	b.n	24059d4a <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
24059d30:	687b      	ldr	r3, [r7, #4]
24059d32:	2204      	movs	r2, #4
24059d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
24059d38:	687b      	ldr	r3, [r7, #4]
24059d3a:	681b      	ldr	r3, [r3, #0]
24059d3c:	68da      	ldr	r2, [r3, #12]
24059d3e:	687b      	ldr	r3, [r7, #4]
24059d40:	681b      	ldr	r3, [r3, #0]
24059d42:	f022 0201 	bic.w	r2, r2, #1
24059d46:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
24059d48:	2300      	movs	r3, #0
}
24059d4a:	4618      	mov	r0, r3
24059d4c:	370c      	adds	r7, #12
24059d4e:	46bd      	mov	sp, r7
24059d50:	f85d 7b04 	ldr.w	r7, [sp], #4
24059d54:	4770      	bx	lr
	...

24059d58 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
24059d58:	b580      	push	{r7, lr}
24059d5a:	b086      	sub	sp, #24
24059d5c:	af02      	add	r7, sp, #8
24059d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24059d60:	2300      	movs	r3, #0
24059d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
24059d64:	f7fa f86e 	bl	24053e44 <HAL_GetTick>
24059d68:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
24059d6a:	687b      	ldr	r3, [r7, #4]
24059d6c:	2b00      	cmp	r3, #0
24059d6e:	d102      	bne.n	24059d76 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
24059d70:	2301      	movs	r3, #1
24059d72:	73fb      	strb	r3, [r7, #15]
24059d74:	e0a5      	b.n	24059ec2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
24059d76:	687b      	ldr	r3, [r7, #4]
24059d78:	2200      	movs	r2, #0
24059d7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
24059d7c:	687b      	ldr	r3, [r7, #4]
24059d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24059d80:	2b00      	cmp	r3, #0
24059d82:	f040 809e 	bne.w	24059ec2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
24059d86:	6878      	ldr	r0, [r7, #4]
24059d88:	f7f9 fb44 	bl	24053414 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
24059d8c:	f241 3188 	movw	r1, #5000	; 0x1388
24059d90:	6878      	ldr	r0, [r7, #4]
24059d92:	f000 fc21 	bl	2405a5d8 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
24059d96:	687b      	ldr	r3, [r7, #4]
24059d98:	681b      	ldr	r3, [r3, #0]
24059d9a:	689a      	ldr	r2, [r3, #8]
24059d9c:	4b4b      	ldr	r3, [pc, #300]	; (24059ecc <HAL_OSPI_Init+0x174>)
24059d9e:	4013      	ands	r3, r2
24059da0:	687a      	ldr	r2, [r7, #4]
24059da2:	68d1      	ldr	r1, [r2, #12]
24059da4:	687a      	ldr	r2, [r7, #4]
24059da6:	6912      	ldr	r2, [r2, #16]
24059da8:	3a01      	subs	r2, #1
24059daa:	0412      	lsls	r2, r2, #16
24059dac:	4311      	orrs	r1, r2
24059dae:	687a      	ldr	r2, [r7, #4]
24059db0:	6952      	ldr	r2, [r2, #20]
24059db2:	3a01      	subs	r2, #1
24059db4:	0212      	lsls	r2, r2, #8
24059db6:	4311      	orrs	r1, r2
24059db8:	687a      	ldr	r2, [r7, #4]
24059dba:	6b52      	ldr	r2, [r2, #52]	; 0x34
24059dbc:	4311      	orrs	r1, r2
24059dbe:	687a      	ldr	r2, [r7, #4]
24059dc0:	69d2      	ldr	r2, [r2, #28]
24059dc2:	4311      	orrs	r1, r2
24059dc4:	687a      	ldr	r2, [r7, #4]
24059dc6:	6812      	ldr	r2, [r2, #0]
24059dc8:	430b      	orrs	r3, r1
24059dca:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
24059dcc:	687b      	ldr	r3, [r7, #4]
24059dce:	681b      	ldr	r3, [r3, #0]
24059dd0:	68db      	ldr	r3, [r3, #12]
24059dd2:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
24059dd6:	687b      	ldr	r3, [r7, #4]
24059dd8:	6a1a      	ldr	r2, [r3, #32]
24059dda:	687b      	ldr	r3, [r7, #4]
24059ddc:	681b      	ldr	r3, [r3, #0]
24059dde:	430a      	orrs	r2, r1
24059de0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
24059de2:	687b      	ldr	r3, [r7, #4]
24059de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24059de6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
24059de8:	687b      	ldr	r3, [r7, #4]
24059dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
24059dec:	687b      	ldr	r3, [r7, #4]
24059dee:	681b      	ldr	r3, [r3, #0]
24059df0:	430a      	orrs	r2, r1
24059df2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
24059df4:	687b      	ldr	r3, [r7, #4]
24059df6:	681b      	ldr	r3, [r3, #0]
24059df8:	687a      	ldr	r2, [r7, #4]
24059dfa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24059dfc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
24059dfe:	687b      	ldr	r3, [r7, #4]
24059e00:	681b      	ldr	r3, [r3, #0]
24059e02:	681b      	ldr	r3, [r3, #0]
24059e04:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
24059e08:	687b      	ldr	r3, [r7, #4]
24059e0a:	685b      	ldr	r3, [r3, #4]
24059e0c:	3b01      	subs	r3, #1
24059e0e:	021a      	lsls	r2, r3, #8
24059e10:	687b      	ldr	r3, [r7, #4]
24059e12:	681b      	ldr	r3, [r3, #0]
24059e14:	430a      	orrs	r2, r1
24059e16:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
24059e18:	687b      	ldr	r3, [r7, #4]
24059e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24059e1c:	9300      	str	r3, [sp, #0]
24059e1e:	68bb      	ldr	r3, [r7, #8]
24059e20:	2200      	movs	r2, #0
24059e22:	2120      	movs	r1, #32
24059e24:	6878      	ldr	r0, [r7, #4]
24059e26:	f001 f90b 	bl	2405b040 <OSPI_WaitFlagStateUntilTimeout>
24059e2a:	4603      	mov	r3, r0
24059e2c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
24059e2e:	7bfb      	ldrb	r3, [r7, #15]
24059e30:	2b00      	cmp	r3, #0
24059e32:	d146      	bne.n	24059ec2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
24059e34:	687b      	ldr	r3, [r7, #4]
24059e36:	681b      	ldr	r3, [r3, #0]
24059e38:	68db      	ldr	r3, [r3, #12]
24059e3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
24059e3e:	687b      	ldr	r3, [r7, #4]
24059e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24059e42:	1e5a      	subs	r2, r3, #1
24059e44:	687b      	ldr	r3, [r7, #4]
24059e46:	681b      	ldr	r3, [r3, #0]
24059e48:	430a      	orrs	r2, r1
24059e4a:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
24059e4c:	687b      	ldr	r3, [r7, #4]
24059e4e:	681b      	ldr	r3, [r3, #0]
24059e50:	681b      	ldr	r3, [r3, #0]
24059e52:	f023 0140 	bic.w	r1, r3, #64	; 0x40
24059e56:	687b      	ldr	r3, [r7, #4]
24059e58:	689a      	ldr	r2, [r3, #8]
24059e5a:	687b      	ldr	r3, [r7, #4]
24059e5c:	681b      	ldr	r3, [r3, #0]
24059e5e:	430a      	orrs	r2, r1
24059e60:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
24059e62:	687b      	ldr	r3, [r7, #4]
24059e64:	681b      	ldr	r3, [r3, #0]
24059e66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
24059e6a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
24059e6e:	687b      	ldr	r3, [r7, #4]
24059e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24059e72:	687b      	ldr	r3, [r7, #4]
24059e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24059e76:	431a      	orrs	r2, r3
24059e78:	687b      	ldr	r3, [r7, #4]
24059e7a:	681b      	ldr	r3, [r3, #0]
24059e7c:	430a      	orrs	r2, r1
24059e7e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
24059e82:	687b      	ldr	r3, [r7, #4]
24059e84:	681b      	ldr	r3, [r3, #0]
24059e86:	681a      	ldr	r2, [r3, #0]
24059e88:	687b      	ldr	r3, [r7, #4]
24059e8a:	681b      	ldr	r3, [r3, #0]
24059e8c:	f042 0201 	orr.w	r2, r2, #1
24059e90:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
24059e92:	687b      	ldr	r3, [r7, #4]
24059e94:	699b      	ldr	r3, [r3, #24]
24059e96:	2b02      	cmp	r3, #2
24059e98:	d107      	bne.n	24059eaa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
24059e9a:	687b      	ldr	r3, [r7, #4]
24059e9c:	681b      	ldr	r3, [r3, #0]
24059e9e:	689a      	ldr	r2, [r3, #8]
24059ea0:	687b      	ldr	r3, [r7, #4]
24059ea2:	681b      	ldr	r3, [r3, #0]
24059ea4:	f042 0202 	orr.w	r2, r2, #2
24059ea8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
24059eaa:	687b      	ldr	r3, [r7, #4]
24059eac:	68db      	ldr	r3, [r3, #12]
24059eae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24059eb2:	d103      	bne.n	24059ebc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
24059eb4:	687b      	ldr	r3, [r7, #4]
24059eb6:	2201      	movs	r2, #1
24059eb8:	651a      	str	r2, [r3, #80]	; 0x50
24059eba:	e002      	b.n	24059ec2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
24059ebc:	687b      	ldr	r3, [r7, #4]
24059ebe:	2202      	movs	r2, #2
24059ec0:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
24059ec2:	7bfb      	ldrb	r3, [r7, #15]
}
24059ec4:	4618      	mov	r0, r3
24059ec6:	3710      	adds	r7, #16
24059ec8:	46bd      	mov	sp, r7
24059eca:	bd80      	pop	{r7, pc}
24059ecc:	f8e0f8f4 	.word	0xf8e0f8f4

24059ed0 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
24059ed0:	b580      	push	{r7, lr}
24059ed2:	b086      	sub	sp, #24
24059ed4:	af00      	add	r7, sp, #0
24059ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
24059ed8:	687b      	ldr	r3, [r7, #4]
24059eda:	681b      	ldr	r3, [r3, #0]
24059edc:	3350      	adds	r3, #80	; 0x50
24059ede:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
24059ee0:	687b      	ldr	r3, [r7, #4]
24059ee2:	681b      	ldr	r3, [r3, #0]
24059ee4:	6a1b      	ldr	r3, [r3, #32]
24059ee6:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
24059ee8:	687b      	ldr	r3, [r7, #4]
24059eea:	681b      	ldr	r3, [r3, #0]
24059eec:	681b      	ldr	r3, [r3, #0]
24059eee:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
24059ef0:	687b      	ldr	r3, [r7, #4]
24059ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24059ef4:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
24059ef6:	693b      	ldr	r3, [r7, #16]
24059ef8:	f003 0304 	and.w	r3, r3, #4
24059efc:	2b00      	cmp	r3, #0
24059efe:	d03a      	beq.n	24059f76 <HAL_OSPI_IRQHandler+0xa6>
24059f00:	68fb      	ldr	r3, [r7, #12]
24059f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24059f06:	2b00      	cmp	r3, #0
24059f08:	d035      	beq.n	24059f76 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
24059f0a:	68bb      	ldr	r3, [r7, #8]
24059f0c:	2b18      	cmp	r3, #24
24059f0e:	d10f      	bne.n	24059f30 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
24059f10:	687b      	ldr	r3, [r7, #4]
24059f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059f14:	781a      	ldrb	r2, [r3, #0]
24059f16:	697b      	ldr	r3, [r7, #20]
24059f18:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
24059f1a:	687b      	ldr	r3, [r7, #4]
24059f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059f1e:	1c5a      	adds	r2, r3, #1
24059f20:	687b      	ldr	r3, [r7, #4]
24059f22:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
24059f24:	687b      	ldr	r3, [r7, #4]
24059f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24059f28:	1e5a      	subs	r2, r3, #1
24059f2a:	687b      	ldr	r3, [r7, #4]
24059f2c:	649a      	str	r2, [r3, #72]	; 0x48
24059f2e:	e012      	b.n	24059f56 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24059f30:	68bb      	ldr	r3, [r7, #8]
24059f32:	2b28      	cmp	r3, #40	; 0x28
24059f34:	d10f      	bne.n	24059f56 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
24059f36:	687b      	ldr	r3, [r7, #4]
24059f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059f3a:	697a      	ldr	r2, [r7, #20]
24059f3c:	7812      	ldrb	r2, [r2, #0]
24059f3e:	b2d2      	uxtb	r2, r2
24059f40:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
24059f42:	687b      	ldr	r3, [r7, #4]
24059f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059f46:	1c5a      	adds	r2, r3, #1
24059f48:	687b      	ldr	r3, [r7, #4]
24059f4a:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
24059f4c:	687b      	ldr	r3, [r7, #4]
24059f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24059f50:	1e5a      	subs	r2, r3, #1
24059f52:	687b      	ldr	r3, [r7, #4]
24059f54:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
24059f56:	687b      	ldr	r3, [r7, #4]
24059f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24059f5a:	2b00      	cmp	r3, #0
24059f5c:	d107      	bne.n	24059f6e <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
24059f5e:	687b      	ldr	r3, [r7, #4]
24059f60:	681b      	ldr	r3, [r3, #0]
24059f62:	681a      	ldr	r2, [r3, #0]
24059f64:	687b      	ldr	r3, [r7, #4]
24059f66:	681b      	ldr	r3, [r3, #0]
24059f68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24059f6c:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
24059f6e:	6878      	ldr	r0, [r7, #4]
24059f70:	f000 faf6 	bl	2405a560 <HAL_OSPI_FifoThresholdCallback>
24059f74:	e0e7      	b.n	2405a146 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
24059f76:	693b      	ldr	r3, [r7, #16]
24059f78:	f003 0302 	and.w	r3, r3, #2
24059f7c:	2b00      	cmp	r3, #0
24059f7e:	d067      	beq.n	2405a050 <HAL_OSPI_IRQHandler+0x180>
24059f80:	68fb      	ldr	r3, [r7, #12]
24059f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24059f86:	2b00      	cmp	r3, #0
24059f88:	d062      	beq.n	2405a050 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24059f8a:	68bb      	ldr	r3, [r7, #8]
24059f8c:	2b28      	cmp	r3, #40	; 0x28
24059f8e:	d131      	bne.n	24059ff4 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
24059f90:	687b      	ldr	r3, [r7, #4]
24059f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24059f94:	2b00      	cmp	r3, #0
24059f96:	d015      	beq.n	24059fc4 <HAL_OSPI_IRQHandler+0xf4>
24059f98:	693b      	ldr	r3, [r7, #16]
24059f9a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
24059f9e:	2b00      	cmp	r3, #0
24059fa0:	d010      	beq.n	24059fc4 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
24059fa2:	687b      	ldr	r3, [r7, #4]
24059fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059fa6:	697a      	ldr	r2, [r7, #20]
24059fa8:	7812      	ldrb	r2, [r2, #0]
24059faa:	b2d2      	uxtb	r2, r2
24059fac:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
24059fae:	687b      	ldr	r3, [r7, #4]
24059fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059fb2:	1c5a      	adds	r2, r3, #1
24059fb4:	687b      	ldr	r3, [r7, #4]
24059fb6:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
24059fb8:	687b      	ldr	r3, [r7, #4]
24059fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24059fbc:	1e5a      	subs	r2, r3, #1
24059fbe:	687b      	ldr	r3, [r7, #4]
24059fc0:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24059fc2:	e0bd      	b.n	2405a140 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
24059fc4:	687b      	ldr	r3, [r7, #4]
24059fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24059fc8:	2b00      	cmp	r3, #0
24059fca:	f040 80b9 	bne.w	2405a140 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
24059fce:	687b      	ldr	r3, [r7, #4]
24059fd0:	681b      	ldr	r3, [r3, #0]
24059fd2:	2202      	movs	r2, #2
24059fd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
24059fd6:	687b      	ldr	r3, [r7, #4]
24059fd8:	681b      	ldr	r3, [r3, #0]
24059fda:	681a      	ldr	r2, [r3, #0]
24059fdc:	687b      	ldr	r3, [r7, #4]
24059fde:	681b      	ldr	r3, [r3, #0]
24059fe0:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
24059fe4:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
24059fe6:	687b      	ldr	r3, [r7, #4]
24059fe8:	2202      	movs	r2, #2
24059fea:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
24059fec:	6878      	ldr	r0, [r7, #4]
24059fee:	f000 facb 	bl	2405a588 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24059ff2:	e0a5      	b.n	2405a140 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
24059ff4:	687b      	ldr	r3, [r7, #4]
24059ff6:	681b      	ldr	r3, [r3, #0]
24059ff8:	2202      	movs	r2, #2
24059ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
24059ffc:	687b      	ldr	r3, [r7, #4]
24059ffe:	681b      	ldr	r3, [r3, #0]
2405a000:	681a      	ldr	r2, [r3, #0]
2405a002:	687b      	ldr	r3, [r7, #4]
2405a004:	681b      	ldr	r3, [r3, #0]
2405a006:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
2405a00a:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
2405a00c:	687b      	ldr	r3, [r7, #4]
2405a00e:	2202      	movs	r2, #2
2405a010:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
2405a012:	68bb      	ldr	r3, [r7, #8]
2405a014:	2b18      	cmp	r3, #24
2405a016:	d103      	bne.n	2405a020 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
2405a018:	6878      	ldr	r0, [r7, #4]
2405a01a:	f000 fabf 	bl	2405a59c <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405a01e:	e08f      	b.n	2405a140 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
2405a020:	68bb      	ldr	r3, [r7, #8]
2405a022:	2b08      	cmp	r3, #8
2405a024:	d103      	bne.n	2405a02e <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
2405a026:	6878      	ldr	r0, [r7, #4]
2405a028:	f000 faa4 	bl	2405a574 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405a02c:	e088      	b.n	2405a140 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
2405a02e:	68bb      	ldr	r3, [r7, #8]
2405a030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405a034:	f040 8084 	bne.w	2405a140 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
2405a038:	687b      	ldr	r3, [r7, #4]
2405a03a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405a03c:	2b00      	cmp	r3, #0
2405a03e:	d103      	bne.n	2405a048 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
2405a040:	6878      	ldr	r0, [r7, #4]
2405a042:	f000 fa83 	bl	2405a54c <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405a046:	e07b      	b.n	2405a140 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
2405a048:	6878      	ldr	r0, [r7, #4]
2405a04a:	f000 fa75 	bl	2405a538 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405a04e:	e077      	b.n	2405a140 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
2405a050:	693b      	ldr	r3, [r7, #16]
2405a052:	f003 0308 	and.w	r3, r3, #8
2405a056:	2b00      	cmp	r3, #0
2405a058:	d01e      	beq.n	2405a098 <HAL_OSPI_IRQHandler+0x1c8>
2405a05a:	68fb      	ldr	r3, [r7, #12]
2405a05c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2405a060:	2b00      	cmp	r3, #0
2405a062:	d019      	beq.n	2405a098 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
2405a064:	687b      	ldr	r3, [r7, #4]
2405a066:	681b      	ldr	r3, [r3, #0]
2405a068:	2208      	movs	r2, #8
2405a06a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
2405a06c:	687b      	ldr	r3, [r7, #4]
2405a06e:	681b      	ldr	r3, [r3, #0]
2405a070:	681b      	ldr	r3, [r3, #0]
2405a072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2405a076:	2b00      	cmp	r3, #0
2405a078:	d00a      	beq.n	2405a090 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
2405a07a:	687b      	ldr	r3, [r7, #4]
2405a07c:	681b      	ldr	r3, [r3, #0]
2405a07e:	681a      	ldr	r2, [r3, #0]
2405a080:	687b      	ldr	r3, [r7, #4]
2405a082:	681b      	ldr	r3, [r3, #0]
2405a084:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
2405a088:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
2405a08a:	687b      	ldr	r3, [r7, #4]
2405a08c:	2202      	movs	r2, #2
2405a08e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
2405a090:	6878      	ldr	r0, [r7, #4]
2405a092:	f000 fa8d 	bl	2405a5b0 <HAL_OSPI_StatusMatchCallback>
2405a096:	e056      	b.n	2405a146 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
2405a098:	693b      	ldr	r3, [r7, #16]
2405a09a:	f003 0301 	and.w	r3, r3, #1
2405a09e:	2b00      	cmp	r3, #0
2405a0a0:	d03c      	beq.n	2405a11c <HAL_OSPI_IRQHandler+0x24c>
2405a0a2:	68fb      	ldr	r3, [r7, #12]
2405a0a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405a0a8:	2b00      	cmp	r3, #0
2405a0aa:	d037      	beq.n	2405a11c <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
2405a0ac:	687b      	ldr	r3, [r7, #4]
2405a0ae:	681b      	ldr	r3, [r3, #0]
2405a0b0:	2201      	movs	r2, #1
2405a0b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
2405a0b4:	687b      	ldr	r3, [r7, #4]
2405a0b6:	681b      	ldr	r3, [r3, #0]
2405a0b8:	681a      	ldr	r2, [r3, #0]
2405a0ba:	687b      	ldr	r3, [r7, #4]
2405a0bc:	681b      	ldr	r3, [r3, #0]
2405a0be:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
2405a0c2:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
2405a0c4:	687b      	ldr	r3, [r7, #4]
2405a0c6:	2202      	movs	r2, #2
2405a0c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
2405a0ca:	687b      	ldr	r3, [r7, #4]
2405a0cc:	681b      	ldr	r3, [r3, #0]
2405a0ce:	681b      	ldr	r3, [r3, #0]
2405a0d0:	f003 0304 	and.w	r3, r3, #4
2405a0d4:	2b00      	cmp	r3, #0
2405a0d6:	d01a      	beq.n	2405a10e <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
2405a0d8:	687b      	ldr	r3, [r7, #4]
2405a0da:	681b      	ldr	r3, [r3, #0]
2405a0dc:	681a      	ldr	r2, [r3, #0]
2405a0de:	687b      	ldr	r3, [r7, #4]
2405a0e0:	681b      	ldr	r3, [r3, #0]
2405a0e2:	f022 0204 	bic.w	r2, r2, #4
2405a0e6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
2405a0e8:	687b      	ldr	r3, [r7, #4]
2405a0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405a0ec:	4a18      	ldr	r2, [pc, #96]	; (2405a150 <HAL_OSPI_IRQHandler+0x280>)
2405a0ee:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
2405a0f0:	687b      	ldr	r3, [r7, #4]
2405a0f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405a0f4:	4618      	mov	r0, r3
2405a0f6:	f7ff fe07 	bl	24059d08 <HAL_MDMA_Abort_IT>
2405a0fa:	4603      	mov	r3, r0
2405a0fc:	2b00      	cmp	r3, #0
2405a0fe:	d021      	beq.n	2405a144 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
2405a100:	687b      	ldr	r3, [r7, #4]
2405a102:	2202      	movs	r2, #2
2405a104:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
2405a106:	6878      	ldr	r0, [r7, #4]
2405a108:	f000 fa16 	bl	2405a538 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
2405a10c:	e01a      	b.n	2405a144 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
2405a10e:	687b      	ldr	r3, [r7, #4]
2405a110:	2202      	movs	r2, #2
2405a112:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
2405a114:	6878      	ldr	r0, [r7, #4]
2405a116:	f000 fa0f 	bl	2405a538 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
2405a11a:	e013      	b.n	2405a144 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
2405a11c:	693b      	ldr	r3, [r7, #16]
2405a11e:	f003 0310 	and.w	r3, r3, #16
2405a122:	2b00      	cmp	r3, #0
2405a124:	d00f      	beq.n	2405a146 <HAL_OSPI_IRQHandler+0x276>
2405a126:	68fb      	ldr	r3, [r7, #12]
2405a128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2405a12c:	2b00      	cmp	r3, #0
2405a12e:	d00a      	beq.n	2405a146 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
2405a130:	687b      	ldr	r3, [r7, #4]
2405a132:	681b      	ldr	r3, [r3, #0]
2405a134:	2210      	movs	r2, #16
2405a136:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
2405a138:	6878      	ldr	r0, [r7, #4]
2405a13a:	f000 fa43 	bl	2405a5c4 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
2405a13e:	e002      	b.n	2405a146 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405a140:	bf00      	nop
2405a142:	e000      	b.n	2405a146 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
2405a144:	bf00      	nop
}
2405a146:	bf00      	nop
2405a148:	3718      	adds	r7, #24
2405a14a:	46bd      	mov	sp, r7
2405a14c:	bd80      	pop	{r7, pc}
2405a14e:	bf00      	nop
2405a150:	2405afc9 	.word	0x2405afc9

2405a154 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
2405a154:	b580      	push	{r7, lr}
2405a156:	b08a      	sub	sp, #40	; 0x28
2405a158:	af02      	add	r7, sp, #8
2405a15a:	60f8      	str	r0, [r7, #12]
2405a15c:	60b9      	str	r1, [r7, #8]
2405a15e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
2405a160:	f7f9 fe70 	bl	24053e44 <HAL_GetTick>
2405a164:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405a166:	68bb      	ldr	r3, [r7, #8]
2405a168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405a16a:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
2405a16c:	68fb      	ldr	r3, [r7, #12]
2405a16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405a170:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
2405a172:	697b      	ldr	r3, [r7, #20]
2405a174:	2b02      	cmp	r3, #2
2405a176:	d104      	bne.n	2405a182 <HAL_OSPI_Command+0x2e>
2405a178:	68fb      	ldr	r3, [r7, #12]
2405a17a:	68db      	ldr	r3, [r3, #12]
2405a17c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2405a180:	d115      	bne.n	2405a1ae <HAL_OSPI_Command+0x5a>
2405a182:	697b      	ldr	r3, [r7, #20]
2405a184:	2b14      	cmp	r3, #20
2405a186:	d107      	bne.n	2405a198 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
2405a188:	68bb      	ldr	r3, [r7, #8]
2405a18a:	681b      	ldr	r3, [r3, #0]
2405a18c:	2b02      	cmp	r3, #2
2405a18e:	d00e      	beq.n	2405a1ae <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
2405a190:	68bb      	ldr	r3, [r7, #8]
2405a192:	681b      	ldr	r3, [r3, #0]
2405a194:	2b03      	cmp	r3, #3
2405a196:	d00a      	beq.n	2405a1ae <HAL_OSPI_Command+0x5a>
2405a198:	697b      	ldr	r3, [r7, #20]
2405a19a:	2b24      	cmp	r3, #36	; 0x24
2405a19c:	d15b      	bne.n	2405a256 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
2405a19e:	68bb      	ldr	r3, [r7, #8]
2405a1a0:	681b      	ldr	r3, [r3, #0]
2405a1a2:	2b01      	cmp	r3, #1
2405a1a4:	d003      	beq.n	2405a1ae <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
2405a1a6:	68bb      	ldr	r3, [r7, #8]
2405a1a8:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
2405a1aa:	2b03      	cmp	r3, #3
2405a1ac:	d153      	bne.n	2405a256 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
2405a1ae:	687b      	ldr	r3, [r7, #4]
2405a1b0:	9300      	str	r3, [sp, #0]
2405a1b2:	69bb      	ldr	r3, [r7, #24]
2405a1b4:	2200      	movs	r2, #0
2405a1b6:	2120      	movs	r1, #32
2405a1b8:	68f8      	ldr	r0, [r7, #12]
2405a1ba:	f000 ff41 	bl	2405b040 <OSPI_WaitFlagStateUntilTimeout>
2405a1be:	4603      	mov	r3, r0
2405a1c0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
2405a1c2:	7ffb      	ldrb	r3, [r7, #31]
2405a1c4:	2b00      	cmp	r3, #0
2405a1c6:	d14c      	bne.n	2405a262 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
2405a1c8:	68fb      	ldr	r3, [r7, #12]
2405a1ca:	2200      	movs	r2, #0
2405a1cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
2405a1ce:	68b9      	ldr	r1, [r7, #8]
2405a1d0:	68f8      	ldr	r0, [r7, #12]
2405a1d2:	f000 ff6d 	bl	2405b0b0 <OSPI_ConfigCmd>
2405a1d6:	4603      	mov	r3, r0
2405a1d8:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
2405a1da:	7ffb      	ldrb	r3, [r7, #31]
2405a1dc:	2b00      	cmp	r3, #0
2405a1de:	d140      	bne.n	2405a262 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
2405a1e0:	68bb      	ldr	r3, [r7, #8]
2405a1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405a1e4:	2b00      	cmp	r3, #0
2405a1e6:	d10e      	bne.n	2405a206 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
2405a1e8:	687b      	ldr	r3, [r7, #4]
2405a1ea:	9300      	str	r3, [sp, #0]
2405a1ec:	69bb      	ldr	r3, [r7, #24]
2405a1ee:	2201      	movs	r2, #1
2405a1f0:	2102      	movs	r1, #2
2405a1f2:	68f8      	ldr	r0, [r7, #12]
2405a1f4:	f000 ff24 	bl	2405b040 <OSPI_WaitFlagStateUntilTimeout>
2405a1f8:	4603      	mov	r3, r0
2405a1fa:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
2405a1fc:	68fb      	ldr	r3, [r7, #12]
2405a1fe:	681b      	ldr	r3, [r3, #0]
2405a200:	2202      	movs	r2, #2
2405a202:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
2405a204:	e02d      	b.n	2405a262 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
2405a206:	68bb      	ldr	r3, [r7, #8]
2405a208:	681b      	ldr	r3, [r3, #0]
2405a20a:	2b00      	cmp	r3, #0
2405a20c:	d103      	bne.n	2405a216 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
2405a20e:	68fb      	ldr	r3, [r7, #12]
2405a210:	2204      	movs	r2, #4
2405a212:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
2405a214:	e025      	b.n	2405a262 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
2405a216:	68bb      	ldr	r3, [r7, #8]
2405a218:	681b      	ldr	r3, [r3, #0]
2405a21a:	2b01      	cmp	r3, #1
2405a21c:	d10b      	bne.n	2405a236 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
2405a21e:	68fb      	ldr	r3, [r7, #12]
2405a220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405a222:	2b24      	cmp	r3, #36	; 0x24
2405a224:	d103      	bne.n	2405a22e <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
2405a226:	68fb      	ldr	r3, [r7, #12]
2405a228:	2204      	movs	r2, #4
2405a22a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
2405a22c:	e019      	b.n	2405a262 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
2405a22e:	68fb      	ldr	r3, [r7, #12]
2405a230:	2214      	movs	r2, #20
2405a232:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
2405a234:	e015      	b.n	2405a262 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
2405a236:	68bb      	ldr	r3, [r7, #8]
2405a238:	681b      	ldr	r3, [r3, #0]
2405a23a:	2b02      	cmp	r3, #2
2405a23c:	d111      	bne.n	2405a262 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
2405a23e:	68fb      	ldr	r3, [r7, #12]
2405a240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405a242:	2b14      	cmp	r3, #20
2405a244:	d103      	bne.n	2405a24e <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
2405a246:	68fb      	ldr	r3, [r7, #12]
2405a248:	2204      	movs	r2, #4
2405a24a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
2405a24c:	e009      	b.n	2405a262 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
2405a24e:	68fb      	ldr	r3, [r7, #12]
2405a250:	2224      	movs	r2, #36	; 0x24
2405a252:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
2405a254:	e005      	b.n	2405a262 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
2405a256:	2301      	movs	r3, #1
2405a258:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2405a25a:	68fb      	ldr	r3, [r7, #12]
2405a25c:	2210      	movs	r2, #16
2405a25e:	655a      	str	r2, [r3, #84]	; 0x54
2405a260:	e000      	b.n	2405a264 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
2405a262:	bf00      	nop
  }

  /* Return function status */
  return status;
2405a264:	7ffb      	ldrb	r3, [r7, #31]
}
2405a266:	4618      	mov	r0, r3
2405a268:	3720      	adds	r7, #32
2405a26a:	46bd      	mov	sp, r7
2405a26c:	bd80      	pop	{r7, pc}

2405a26e <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
2405a26e:	b580      	push	{r7, lr}
2405a270:	b08a      	sub	sp, #40	; 0x28
2405a272:	af02      	add	r7, sp, #8
2405a274:	60f8      	str	r0, [r7, #12]
2405a276:	60b9      	str	r1, [r7, #8]
2405a278:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2405a27a:	f7f9 fde3 	bl	24053e44 <HAL_GetTick>
2405a27e:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
2405a280:	68fb      	ldr	r3, [r7, #12]
2405a282:	681b      	ldr	r3, [r3, #0]
2405a284:	3350      	adds	r3, #80	; 0x50
2405a286:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
2405a288:	68bb      	ldr	r3, [r7, #8]
2405a28a:	2b00      	cmp	r3, #0
2405a28c:	d105      	bne.n	2405a29a <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
2405a28e:	2301      	movs	r3, #1
2405a290:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2405a292:	68fb      	ldr	r3, [r7, #12]
2405a294:	2208      	movs	r2, #8
2405a296:	655a      	str	r2, [r3, #84]	; 0x54
2405a298:	e057      	b.n	2405a34a <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
2405a29a:	68fb      	ldr	r3, [r7, #12]
2405a29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405a29e:	2b04      	cmp	r3, #4
2405a2a0:	d14e      	bne.n	2405a340 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
2405a2a2:	68fb      	ldr	r3, [r7, #12]
2405a2a4:	681b      	ldr	r3, [r3, #0]
2405a2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a2a8:	1c5a      	adds	r2, r3, #1
2405a2aa:	68fb      	ldr	r3, [r7, #12]
2405a2ac:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
2405a2ae:	68fb      	ldr	r3, [r7, #12]
2405a2b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2405a2b2:	68fb      	ldr	r3, [r7, #12]
2405a2b4:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
2405a2b6:	68fb      	ldr	r3, [r7, #12]
2405a2b8:	68ba      	ldr	r2, [r7, #8]
2405a2ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2405a2bc:	68fb      	ldr	r3, [r7, #12]
2405a2be:	681b      	ldr	r3, [r3, #0]
2405a2c0:	681a      	ldr	r2, [r3, #0]
2405a2c2:	68fb      	ldr	r3, [r7, #12]
2405a2c4:	681b      	ldr	r3, [r3, #0]
2405a2c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
2405a2ca:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
2405a2cc:	687b      	ldr	r3, [r7, #4]
2405a2ce:	9300      	str	r3, [sp, #0]
2405a2d0:	69bb      	ldr	r3, [r7, #24]
2405a2d2:	2201      	movs	r2, #1
2405a2d4:	2104      	movs	r1, #4
2405a2d6:	68f8      	ldr	r0, [r7, #12]
2405a2d8:	f000 feb2 	bl	2405b040 <OSPI_WaitFlagStateUntilTimeout>
2405a2dc:	4603      	mov	r3, r0
2405a2de:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
2405a2e0:	7ffb      	ldrb	r3, [r7, #31]
2405a2e2:	2b00      	cmp	r3, #0
2405a2e4:	d113      	bne.n	2405a30e <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
2405a2e6:	68fb      	ldr	r3, [r7, #12]
2405a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a2ea:	781a      	ldrb	r2, [r3, #0]
2405a2ec:	697b      	ldr	r3, [r7, #20]
2405a2ee:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
2405a2f0:	68fb      	ldr	r3, [r7, #12]
2405a2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a2f4:	1c5a      	adds	r2, r3, #1
2405a2f6:	68fb      	ldr	r3, [r7, #12]
2405a2f8:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
2405a2fa:	68fb      	ldr	r3, [r7, #12]
2405a2fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405a2fe:	1e5a      	subs	r2, r3, #1
2405a300:	68fb      	ldr	r3, [r7, #12]
2405a302:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
2405a304:	68fb      	ldr	r3, [r7, #12]
2405a306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405a308:	2b00      	cmp	r3, #0
2405a30a:	d1df      	bne.n	2405a2cc <HAL_OSPI_Transmit+0x5e>
2405a30c:	e000      	b.n	2405a310 <HAL_OSPI_Transmit+0xa2>
          break;
2405a30e:	bf00      	nop

      if (status == HAL_OK)
2405a310:	7ffb      	ldrb	r3, [r7, #31]
2405a312:	2b00      	cmp	r3, #0
2405a314:	d119      	bne.n	2405a34a <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
2405a316:	687b      	ldr	r3, [r7, #4]
2405a318:	9300      	str	r3, [sp, #0]
2405a31a:	69bb      	ldr	r3, [r7, #24]
2405a31c:	2201      	movs	r2, #1
2405a31e:	2102      	movs	r1, #2
2405a320:	68f8      	ldr	r0, [r7, #12]
2405a322:	f000 fe8d 	bl	2405b040 <OSPI_WaitFlagStateUntilTimeout>
2405a326:	4603      	mov	r3, r0
2405a328:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
2405a32a:	7ffb      	ldrb	r3, [r7, #31]
2405a32c:	2b00      	cmp	r3, #0
2405a32e:	d10c      	bne.n	2405a34a <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
2405a330:	68fb      	ldr	r3, [r7, #12]
2405a332:	681b      	ldr	r3, [r3, #0]
2405a334:	2202      	movs	r2, #2
2405a336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
2405a338:	68fb      	ldr	r3, [r7, #12]
2405a33a:	2202      	movs	r2, #2
2405a33c:	651a      	str	r2, [r3, #80]	; 0x50
2405a33e:	e004      	b.n	2405a34a <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
2405a340:	2301      	movs	r3, #1
2405a342:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2405a344:	68fb      	ldr	r3, [r7, #12]
2405a346:	2210      	movs	r2, #16
2405a348:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
2405a34a:	7ffb      	ldrb	r3, [r7, #31]
}
2405a34c:	4618      	mov	r0, r3
2405a34e:	3720      	adds	r7, #32
2405a350:	46bd      	mov	sp, r7
2405a352:	bd80      	pop	{r7, pc}

2405a354 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
2405a354:	b580      	push	{r7, lr}
2405a356:	b08c      	sub	sp, #48	; 0x30
2405a358:	af02      	add	r7, sp, #8
2405a35a:	60f8      	str	r0, [r7, #12]
2405a35c:	60b9      	str	r1, [r7, #8]
2405a35e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2405a360:	f7f9 fd70 	bl	24053e44 <HAL_GetTick>
2405a364:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
2405a366:	68fb      	ldr	r3, [r7, #12]
2405a368:	681b      	ldr	r3, [r3, #0]
2405a36a:	3350      	adds	r3, #80	; 0x50
2405a36c:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
2405a36e:	68fb      	ldr	r3, [r7, #12]
2405a370:	681b      	ldr	r3, [r3, #0]
2405a372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405a374:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
2405a376:	68fb      	ldr	r3, [r7, #12]
2405a378:	681b      	ldr	r3, [r3, #0]
2405a37a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
2405a37e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
2405a380:	68bb      	ldr	r3, [r7, #8]
2405a382:	2b00      	cmp	r3, #0
2405a384:	d106      	bne.n	2405a394 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
2405a386:	2301      	movs	r3, #1
2405a388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2405a38c:	68fb      	ldr	r3, [r7, #12]
2405a38e:	2208      	movs	r2, #8
2405a390:	655a      	str	r2, [r3, #84]	; 0x54
2405a392:	e07c      	b.n	2405a48e <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
2405a394:	68fb      	ldr	r3, [r7, #12]
2405a396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405a398:	2b04      	cmp	r3, #4
2405a39a:	d172      	bne.n	2405a482 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
2405a39c:	68fb      	ldr	r3, [r7, #12]
2405a39e:	681b      	ldr	r3, [r3, #0]
2405a3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a3a2:	1c5a      	adds	r2, r3, #1
2405a3a4:	68fb      	ldr	r3, [r7, #12]
2405a3a6:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
2405a3a8:	68fb      	ldr	r3, [r7, #12]
2405a3aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2405a3ac:	68fb      	ldr	r3, [r7, #12]
2405a3ae:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
2405a3b0:	68fb      	ldr	r3, [r7, #12]
2405a3b2:	68ba      	ldr	r2, [r7, #8]
2405a3b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
2405a3b6:	68fb      	ldr	r3, [r7, #12]
2405a3b8:	681b      	ldr	r3, [r3, #0]
2405a3ba:	681b      	ldr	r3, [r3, #0]
2405a3bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
2405a3c0:	68fb      	ldr	r3, [r7, #12]
2405a3c2:	681b      	ldr	r3, [r3, #0]
2405a3c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2405a3c8:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
2405a3ca:	68fb      	ldr	r3, [r7, #12]
2405a3cc:	68db      	ldr	r3, [r3, #12]
2405a3ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2405a3d2:	d104      	bne.n	2405a3de <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
2405a3d4:	68fb      	ldr	r3, [r7, #12]
2405a3d6:	681b      	ldr	r3, [r3, #0]
2405a3d8:	69ba      	ldr	r2, [r7, #24]
2405a3da:	649a      	str	r2, [r3, #72]	; 0x48
2405a3dc:	e011      	b.n	2405a402 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
2405a3de:	68fb      	ldr	r3, [r7, #12]
2405a3e0:	681b      	ldr	r3, [r3, #0]
2405a3e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
2405a3e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
2405a3ea:	2b00      	cmp	r3, #0
2405a3ec:	d004      	beq.n	2405a3f8 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
2405a3ee:	68fb      	ldr	r3, [r7, #12]
2405a3f0:	681b      	ldr	r3, [r3, #0]
2405a3f2:	69ba      	ldr	r2, [r7, #24]
2405a3f4:	649a      	str	r2, [r3, #72]	; 0x48
2405a3f6:	e004      	b.n	2405a402 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
2405a3f8:	68fb      	ldr	r3, [r7, #12]
2405a3fa:	681b      	ldr	r3, [r3, #0]
2405a3fc:	697a      	ldr	r2, [r7, #20]
2405a3fe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
2405a402:	687b      	ldr	r3, [r7, #4]
2405a404:	9300      	str	r3, [sp, #0]
2405a406:	6a3b      	ldr	r3, [r7, #32]
2405a408:	2201      	movs	r2, #1
2405a40a:	2106      	movs	r1, #6
2405a40c:	68f8      	ldr	r0, [r7, #12]
2405a40e:	f000 fe17 	bl	2405b040 <OSPI_WaitFlagStateUntilTimeout>
2405a412:	4603      	mov	r3, r0
2405a414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
2405a418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2405a41c:	2b00      	cmp	r3, #0
2405a41e:	d114      	bne.n	2405a44a <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
2405a420:	68fb      	ldr	r3, [r7, #12]
2405a422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a424:	69fa      	ldr	r2, [r7, #28]
2405a426:	7812      	ldrb	r2, [r2, #0]
2405a428:	b2d2      	uxtb	r2, r2
2405a42a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
2405a42c:	68fb      	ldr	r3, [r7, #12]
2405a42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a430:	1c5a      	adds	r2, r3, #1
2405a432:	68fb      	ldr	r3, [r7, #12]
2405a434:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
2405a436:	68fb      	ldr	r3, [r7, #12]
2405a438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405a43a:	1e5a      	subs	r2, r3, #1
2405a43c:	68fb      	ldr	r3, [r7, #12]
2405a43e:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
2405a440:	68fb      	ldr	r3, [r7, #12]
2405a442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405a444:	2b00      	cmp	r3, #0
2405a446:	d1dc      	bne.n	2405a402 <HAL_OSPI_Receive+0xae>
2405a448:	e000      	b.n	2405a44c <HAL_OSPI_Receive+0xf8>
          break;
2405a44a:	bf00      	nop

      if (status == HAL_OK)
2405a44c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2405a450:	2b00      	cmp	r3, #0
2405a452:	d11c      	bne.n	2405a48e <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
2405a454:	687b      	ldr	r3, [r7, #4]
2405a456:	9300      	str	r3, [sp, #0]
2405a458:	6a3b      	ldr	r3, [r7, #32]
2405a45a:	2201      	movs	r2, #1
2405a45c:	2102      	movs	r1, #2
2405a45e:	68f8      	ldr	r0, [r7, #12]
2405a460:	f000 fdee 	bl	2405b040 <OSPI_WaitFlagStateUntilTimeout>
2405a464:	4603      	mov	r3, r0
2405a466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
2405a46a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2405a46e:	2b00      	cmp	r3, #0
2405a470:	d10d      	bne.n	2405a48e <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
2405a472:	68fb      	ldr	r3, [r7, #12]
2405a474:	681b      	ldr	r3, [r3, #0]
2405a476:	2202      	movs	r2, #2
2405a478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
2405a47a:	68fb      	ldr	r3, [r7, #12]
2405a47c:	2202      	movs	r2, #2
2405a47e:	651a      	str	r2, [r3, #80]	; 0x50
2405a480:	e005      	b.n	2405a48e <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
2405a482:	2301      	movs	r3, #1
2405a484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2405a488:	68fb      	ldr	r3, [r7, #12]
2405a48a:	2210      	movs	r2, #16
2405a48c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
2405a48e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
2405a492:	4618      	mov	r0, r3
2405a494:	3728      	adds	r7, #40	; 0x28
2405a496:	46bd      	mov	sp, r7
2405a498:	bd80      	pop	{r7, pc}
	...

2405a49c <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
2405a49c:	b580      	push	{r7, lr}
2405a49e:	b086      	sub	sp, #24
2405a4a0:	af02      	add	r7, sp, #8
2405a4a2:	6078      	str	r0, [r7, #4]
2405a4a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2405a4a6:	f7f9 fccd 	bl	24053e44 <HAL_GetTick>
2405a4aa:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
2405a4ac:	687b      	ldr	r3, [r7, #4]
2405a4ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405a4b0:	2b04      	cmp	r3, #4
2405a4b2:	d134      	bne.n	2405a51e <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
2405a4b4:	687b      	ldr	r3, [r7, #4]
2405a4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405a4b8:	9300      	str	r3, [sp, #0]
2405a4ba:	68bb      	ldr	r3, [r7, #8]
2405a4bc:	2200      	movs	r2, #0
2405a4be:	2120      	movs	r1, #32
2405a4c0:	6878      	ldr	r0, [r7, #4]
2405a4c2:	f000 fdbd 	bl	2405b040 <OSPI_WaitFlagStateUntilTimeout>
2405a4c6:	4603      	mov	r3, r0
2405a4c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
2405a4ca:	7bfb      	ldrb	r3, [r7, #15]
2405a4cc:	2b00      	cmp	r3, #0
2405a4ce:	d12b      	bne.n	2405a528 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
2405a4d0:	687b      	ldr	r3, [r7, #4]
2405a4d2:	2288      	movs	r2, #136	; 0x88
2405a4d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
2405a4d6:	683b      	ldr	r3, [r7, #0]
2405a4d8:	681b      	ldr	r3, [r3, #0]
2405a4da:	2b08      	cmp	r3, #8
2405a4dc:	d111      	bne.n	2405a502 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
2405a4de:	687b      	ldr	r3, [r7, #4]
2405a4e0:	681b      	ldr	r3, [r3, #0]
2405a4e2:	683a      	ldr	r2, [r7, #0]
2405a4e4:	6852      	ldr	r2, [r2, #4]
2405a4e6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
2405a4ea:	687b      	ldr	r3, [r7, #4]
2405a4ec:	681b      	ldr	r3, [r3, #0]
2405a4ee:	2210      	movs	r2, #16
2405a4f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
2405a4f2:	687b      	ldr	r3, [r7, #4]
2405a4f4:	681b      	ldr	r3, [r3, #0]
2405a4f6:	681a      	ldr	r2, [r3, #0]
2405a4f8:	687b      	ldr	r3, [r7, #4]
2405a4fa:	681b      	ldr	r3, [r3, #0]
2405a4fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
2405a500:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
2405a502:	687b      	ldr	r3, [r7, #4]
2405a504:	681b      	ldr	r3, [r3, #0]
2405a506:	681a      	ldr	r2, [r3, #0]
2405a508:	4b0a      	ldr	r3, [pc, #40]	; (2405a534 <HAL_OSPI_MemoryMapped+0x98>)
2405a50a:	4013      	ands	r3, r2
2405a50c:	683a      	ldr	r2, [r7, #0]
2405a50e:	6812      	ldr	r2, [r2, #0]
2405a510:	431a      	orrs	r2, r3
2405a512:	687b      	ldr	r3, [r7, #4]
2405a514:	681b      	ldr	r3, [r3, #0]
2405a516:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
2405a51a:	601a      	str	r2, [r3, #0]
2405a51c:	e004      	b.n	2405a528 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
2405a51e:	2301      	movs	r3, #1
2405a520:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2405a522:	687b      	ldr	r3, [r7, #4]
2405a524:	2210      	movs	r2, #16
2405a526:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
2405a528:	7bfb      	ldrb	r3, [r7, #15]
}
2405a52a:	4618      	mov	r0, r3
2405a52c:	3710      	adds	r7, #16
2405a52e:	46bd      	mov	sp, r7
2405a530:	bd80      	pop	{r7, pc}
2405a532:	bf00      	nop
2405a534:	cffffff7 	.word	0xcffffff7

2405a538 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
2405a538:	b480      	push	{r7}
2405a53a:	b083      	sub	sp, #12
2405a53c:	af00      	add	r7, sp, #0
2405a53e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
2405a540:	bf00      	nop
2405a542:	370c      	adds	r7, #12
2405a544:	46bd      	mov	sp, r7
2405a546:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a54a:	4770      	bx	lr

2405a54c <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
2405a54c:	b480      	push	{r7}
2405a54e:	b083      	sub	sp, #12
2405a550:	af00      	add	r7, sp, #0
2405a552:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
2405a554:	bf00      	nop
2405a556:	370c      	adds	r7, #12
2405a558:	46bd      	mov	sp, r7
2405a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a55e:	4770      	bx	lr

2405a560 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
2405a560:	b480      	push	{r7}
2405a562:	b083      	sub	sp, #12
2405a564:	af00      	add	r7, sp, #0
2405a566:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
2405a568:	bf00      	nop
2405a56a:	370c      	adds	r7, #12
2405a56c:	46bd      	mov	sp, r7
2405a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a572:	4770      	bx	lr

2405a574 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
2405a574:	b480      	push	{r7}
2405a576:	b083      	sub	sp, #12
2405a578:	af00      	add	r7, sp, #0
2405a57a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
2405a57c:	bf00      	nop
2405a57e:	370c      	adds	r7, #12
2405a580:	46bd      	mov	sp, r7
2405a582:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a586:	4770      	bx	lr

2405a588 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
2405a588:	b480      	push	{r7}
2405a58a:	b083      	sub	sp, #12
2405a58c:	af00      	add	r7, sp, #0
2405a58e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
2405a590:	bf00      	nop
2405a592:	370c      	adds	r7, #12
2405a594:	46bd      	mov	sp, r7
2405a596:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a59a:	4770      	bx	lr

2405a59c <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
2405a59c:	b480      	push	{r7}
2405a59e:	b083      	sub	sp, #12
2405a5a0:	af00      	add	r7, sp, #0
2405a5a2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
2405a5a4:	bf00      	nop
2405a5a6:	370c      	adds	r7, #12
2405a5a8:	46bd      	mov	sp, r7
2405a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a5ae:	4770      	bx	lr

2405a5b0 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
2405a5b0:	b480      	push	{r7}
2405a5b2:	b083      	sub	sp, #12
2405a5b4:	af00      	add	r7, sp, #0
2405a5b6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
2405a5b8:	bf00      	nop
2405a5ba:	370c      	adds	r7, #12
2405a5bc:	46bd      	mov	sp, r7
2405a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a5c2:	4770      	bx	lr

2405a5c4 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
2405a5c4:	b480      	push	{r7}
2405a5c6:	b083      	sub	sp, #12
2405a5c8:	af00      	add	r7, sp, #0
2405a5ca:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
2405a5cc:	bf00      	nop
2405a5ce:	370c      	adds	r7, #12
2405a5d0:	46bd      	mov	sp, r7
2405a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a5d6:	4770      	bx	lr

2405a5d8 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
2405a5d8:	b480      	push	{r7}
2405a5da:	b083      	sub	sp, #12
2405a5dc:	af00      	add	r7, sp, #0
2405a5de:	6078      	str	r0, [r7, #4]
2405a5e0:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
2405a5e2:	687b      	ldr	r3, [r7, #4]
2405a5e4:	683a      	ldr	r2, [r7, #0]
2405a5e6:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
2405a5e8:	2300      	movs	r3, #0
}
2405a5ea:	4618      	mov	r0, r3
2405a5ec:	370c      	adds	r7, #12
2405a5ee:	46bd      	mov	sp, r7
2405a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a5f4:	4770      	bx	lr
	...

2405a5f8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
2405a5f8:	b580      	push	{r7, lr}
2405a5fa:	b094      	sub	sp, #80	; 0x50
2405a5fc:	af00      	add	r7, sp, #0
2405a5fe:	60f8      	str	r0, [r7, #12]
2405a600:	60b9      	str	r1, [r7, #8]
2405a602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405a604:	2300      	movs	r3, #0
2405a606:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
2405a60a:	2300      	movs	r3, #0
2405a60c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
2405a610:	68fb      	ldr	r3, [r7, #12]
2405a612:	681b      	ldr	r3, [r3, #0]
2405a614:	4a9d      	ldr	r2, [pc, #628]	; (2405a88c <HAL_OSPIM_Config+0x294>)
2405a616:	4293      	cmp	r3, r2
2405a618:	d105      	bne.n	2405a626 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
2405a61a:	2300      	movs	r3, #0
2405a61c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
2405a61e:	2301      	movs	r3, #1
2405a620:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
2405a624:	e004      	b.n	2405a630 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
2405a626:	2301      	movs	r3, #1
2405a628:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
2405a62a:	2300      	movs	r3, #0
2405a62c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
2405a630:	2300      	movs	r3, #0
2405a632:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
2405a636:	e01d      	b.n	2405a674 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
2405a638:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
2405a63c:	3301      	adds	r3, #1
2405a63e:	b2d8      	uxtb	r0, r3
2405a640:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
2405a644:	f107 0114 	add.w	r1, r7, #20
2405a648:	4613      	mov	r3, r2
2405a64a:	005b      	lsls	r3, r3, #1
2405a64c:	4413      	add	r3, r2
2405a64e:	00db      	lsls	r3, r3, #3
2405a650:	440b      	add	r3, r1
2405a652:	4619      	mov	r1, r3
2405a654:	f000 fea6 	bl	2405b3a4 <OSPIM_GetConfig>
2405a658:	4603      	mov	r3, r0
2405a65a:	2b00      	cmp	r3, #0
2405a65c:	d005      	beq.n	2405a66a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
2405a65e:	2301      	movs	r3, #1
2405a660:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2405a664:	68fb      	ldr	r3, [r7, #12]
2405a666:	2208      	movs	r2, #8
2405a668:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
2405a66a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
2405a66e:	3301      	adds	r3, #1
2405a670:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
2405a674:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
2405a678:	2b01      	cmp	r3, #1
2405a67a:	d9dd      	bls.n	2405a638 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
2405a67c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
2405a680:	2b00      	cmp	r3, #0
2405a682:	f040 8495 	bne.w	2405afb0 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
2405a686:	4b81      	ldr	r3, [pc, #516]	; (2405a88c <HAL_OSPIM_Config+0x294>)
2405a688:	681b      	ldr	r3, [r3, #0]
2405a68a:	f003 0301 	and.w	r3, r3, #1
2405a68e:	2b00      	cmp	r3, #0
2405a690:	d00b      	beq.n	2405a6aa <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
2405a692:	4b7e      	ldr	r3, [pc, #504]	; (2405a88c <HAL_OSPIM_Config+0x294>)
2405a694:	681b      	ldr	r3, [r3, #0]
2405a696:	4a7d      	ldr	r2, [pc, #500]	; (2405a88c <HAL_OSPIM_Config+0x294>)
2405a698:	f023 0301 	bic.w	r3, r3, #1
2405a69c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
2405a69e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
2405a6a2:	f043 0301 	orr.w	r3, r3, #1
2405a6a6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
2405a6aa:	4b79      	ldr	r3, [pc, #484]	; (2405a890 <HAL_OSPIM_Config+0x298>)
2405a6ac:	681b      	ldr	r3, [r3, #0]
2405a6ae:	f003 0301 	and.w	r3, r3, #1
2405a6b2:	2b00      	cmp	r3, #0
2405a6b4:	d00b      	beq.n	2405a6ce <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
2405a6b6:	4b76      	ldr	r3, [pc, #472]	; (2405a890 <HAL_OSPIM_Config+0x298>)
2405a6b8:	681b      	ldr	r3, [r3, #0]
2405a6ba:	4a75      	ldr	r2, [pc, #468]	; (2405a890 <HAL_OSPIM_Config+0x298>)
2405a6bc:	f023 0301 	bic.w	r3, r3, #1
2405a6c0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
2405a6c2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
2405a6c6:	f043 0302 	orr.w	r3, r3, #2
2405a6ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
2405a6ce:	4971      	ldr	r1, [pc, #452]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a6d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a6d2:	4613      	mov	r3, r2
2405a6d4:	005b      	lsls	r3, r3, #1
2405a6d6:	4413      	add	r3, r2
2405a6d8:	00db      	lsls	r3, r3, #3
2405a6da:	3350      	adds	r3, #80	; 0x50
2405a6dc:	443b      	add	r3, r7
2405a6de:	3b34      	subs	r3, #52	; 0x34
2405a6e0:	681b      	ldr	r3, [r3, #0]
2405a6e2:	3b01      	subs	r3, #1
2405a6e4:	009b      	lsls	r3, r3, #2
2405a6e6:	440b      	add	r3, r1
2405a6e8:	6859      	ldr	r1, [r3, #4]
2405a6ea:	486a      	ldr	r0, [pc, #424]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a6ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a6ee:	4613      	mov	r3, r2
2405a6f0:	005b      	lsls	r3, r3, #1
2405a6f2:	4413      	add	r3, r2
2405a6f4:	00db      	lsls	r3, r3, #3
2405a6f6:	3350      	adds	r3, #80	; 0x50
2405a6f8:	443b      	add	r3, r7
2405a6fa:	3b34      	subs	r3, #52	; 0x34
2405a6fc:	681b      	ldr	r3, [r3, #0]
2405a6fe:	3b01      	subs	r3, #1
2405a700:	f421 7280 	bic.w	r2, r1, #256	; 0x100
2405a704:	009b      	lsls	r3, r3, #2
2405a706:	4403      	add	r3, r0
2405a708:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
2405a70a:	4b62      	ldr	r3, [pc, #392]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a70c:	681b      	ldr	r3, [r3, #0]
2405a70e:	f003 0301 	and.w	r3, r3, #1
2405a712:	2b00      	cmp	r3, #0
2405a714:	f000 80c0 	beq.w	2405a898 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
2405a718:	4b5e      	ldr	r3, [pc, #376]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a71a:	681b      	ldr	r3, [r3, #0]
2405a71c:	4a5d      	ldr	r2, [pc, #372]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a71e:	f023 0301 	bic.w	r3, r3, #1
2405a722:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
2405a724:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
2405a728:	2b01      	cmp	r3, #1
2405a72a:	f040 8162 	bne.w	2405a9f2 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
2405a72e:	4959      	ldr	r1, [pc, #356]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a730:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a734:	4613      	mov	r3, r2
2405a736:	005b      	lsls	r3, r3, #1
2405a738:	4413      	add	r3, r2
2405a73a:	00db      	lsls	r3, r3, #3
2405a73c:	3350      	adds	r3, #80	; 0x50
2405a73e:	443b      	add	r3, r7
2405a740:	3b3c      	subs	r3, #60	; 0x3c
2405a742:	681b      	ldr	r3, [r3, #0]
2405a744:	3b01      	subs	r3, #1
2405a746:	009b      	lsls	r3, r3, #2
2405a748:	440b      	add	r3, r1
2405a74a:	6859      	ldr	r1, [r3, #4]
2405a74c:	4851      	ldr	r0, [pc, #324]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a74e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a752:	4613      	mov	r3, r2
2405a754:	005b      	lsls	r3, r3, #1
2405a756:	4413      	add	r3, r2
2405a758:	00db      	lsls	r3, r3, #3
2405a75a:	3350      	adds	r3, #80	; 0x50
2405a75c:	443b      	add	r3, r7
2405a75e:	3b3c      	subs	r3, #60	; 0x3c
2405a760:	681b      	ldr	r3, [r3, #0]
2405a762:	3b01      	subs	r3, #1
2405a764:	f041 0202 	orr.w	r2, r1, #2
2405a768:	009b      	lsls	r3, r3, #2
2405a76a:	4403      	add	r3, r0
2405a76c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
2405a76e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a772:	4613      	mov	r3, r2
2405a774:	005b      	lsls	r3, r3, #1
2405a776:	4413      	add	r3, r2
2405a778:	00db      	lsls	r3, r3, #3
2405a77a:	3350      	adds	r3, #80	; 0x50
2405a77c:	443b      	add	r3, r7
2405a77e:	3b38      	subs	r3, #56	; 0x38
2405a780:	681b      	ldr	r3, [r3, #0]
2405a782:	2b00      	cmp	r3, #0
2405a784:	d01f      	beq.n	2405a7c6 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
2405a786:	4943      	ldr	r1, [pc, #268]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a788:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a78c:	4613      	mov	r3, r2
2405a78e:	005b      	lsls	r3, r3, #1
2405a790:	4413      	add	r3, r2
2405a792:	00db      	lsls	r3, r3, #3
2405a794:	3350      	adds	r3, #80	; 0x50
2405a796:	443b      	add	r3, r7
2405a798:	3b38      	subs	r3, #56	; 0x38
2405a79a:	681b      	ldr	r3, [r3, #0]
2405a79c:	3b01      	subs	r3, #1
2405a79e:	009b      	lsls	r3, r3, #2
2405a7a0:	440b      	add	r3, r1
2405a7a2:	6859      	ldr	r1, [r3, #4]
2405a7a4:	483b      	ldr	r0, [pc, #236]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a7a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a7aa:	4613      	mov	r3, r2
2405a7ac:	005b      	lsls	r3, r3, #1
2405a7ae:	4413      	add	r3, r2
2405a7b0:	00db      	lsls	r3, r3, #3
2405a7b2:	3350      	adds	r3, #80	; 0x50
2405a7b4:	443b      	add	r3, r7
2405a7b6:	3b38      	subs	r3, #56	; 0x38
2405a7b8:	681b      	ldr	r3, [r3, #0]
2405a7ba:	3b01      	subs	r3, #1
2405a7bc:	f041 0220 	orr.w	r2, r1, #32
2405a7c0:	009b      	lsls	r3, r3, #2
2405a7c2:	4403      	add	r3, r0
2405a7c4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405a7c6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a7ca:	4613      	mov	r3, r2
2405a7cc:	005b      	lsls	r3, r3, #1
2405a7ce:	4413      	add	r3, r2
2405a7d0:	00db      	lsls	r3, r3, #3
2405a7d2:	3350      	adds	r3, #80	; 0x50
2405a7d4:	443b      	add	r3, r7
2405a7d6:	3b30      	subs	r3, #48	; 0x30
2405a7d8:	681b      	ldr	r3, [r3, #0]
2405a7da:	2b00      	cmp	r3, #0
2405a7dc:	d023      	beq.n	2405a826 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
2405a7de:	492d      	ldr	r1, [pc, #180]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a7e0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a7e4:	4613      	mov	r3, r2
2405a7e6:	005b      	lsls	r3, r3, #1
2405a7e8:	4413      	add	r3, r2
2405a7ea:	00db      	lsls	r3, r3, #3
2405a7ec:	3350      	adds	r3, #80	; 0x50
2405a7ee:	443b      	add	r3, r7
2405a7f0:	3b30      	subs	r3, #48	; 0x30
2405a7f2:	681b      	ldr	r3, [r3, #0]
2405a7f4:	3b01      	subs	r3, #1
2405a7f6:	f003 0301 	and.w	r3, r3, #1
2405a7fa:	009b      	lsls	r3, r3, #2
2405a7fc:	440b      	add	r3, r1
2405a7fe:	6859      	ldr	r1, [r3, #4]
2405a800:	4824      	ldr	r0, [pc, #144]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a802:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a806:	4613      	mov	r3, r2
2405a808:	005b      	lsls	r3, r3, #1
2405a80a:	4413      	add	r3, r2
2405a80c:	00db      	lsls	r3, r3, #3
2405a80e:	3350      	adds	r3, #80	; 0x50
2405a810:	443b      	add	r3, r7
2405a812:	3b30      	subs	r3, #48	; 0x30
2405a814:	681b      	ldr	r3, [r3, #0]
2405a816:	3b01      	subs	r3, #1
2405a818:	f003 0301 	and.w	r3, r3, #1
2405a81c:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
2405a820:	009b      	lsls	r3, r3, #2
2405a822:	4403      	add	r3, r0
2405a824:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405a826:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a82a:	4613      	mov	r3, r2
2405a82c:	005b      	lsls	r3, r3, #1
2405a82e:	4413      	add	r3, r2
2405a830:	00db      	lsls	r3, r3, #3
2405a832:	3350      	adds	r3, #80	; 0x50
2405a834:	443b      	add	r3, r7
2405a836:	3b2c      	subs	r3, #44	; 0x2c
2405a838:	681b      	ldr	r3, [r3, #0]
2405a83a:	2b00      	cmp	r3, #0
2405a83c:	f000 80d9 	beq.w	2405a9f2 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
2405a840:	4914      	ldr	r1, [pc, #80]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a842:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a846:	4613      	mov	r3, r2
2405a848:	005b      	lsls	r3, r3, #1
2405a84a:	4413      	add	r3, r2
2405a84c:	00db      	lsls	r3, r3, #3
2405a84e:	3350      	adds	r3, #80	; 0x50
2405a850:	443b      	add	r3, r7
2405a852:	3b2c      	subs	r3, #44	; 0x2c
2405a854:	681b      	ldr	r3, [r3, #0]
2405a856:	3b01      	subs	r3, #1
2405a858:	f003 0301 	and.w	r3, r3, #1
2405a85c:	009b      	lsls	r3, r3, #2
2405a85e:	440b      	add	r3, r1
2405a860:	6859      	ldr	r1, [r3, #4]
2405a862:	480c      	ldr	r0, [pc, #48]	; (2405a894 <HAL_OSPIM_Config+0x29c>)
2405a864:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a868:	4613      	mov	r3, r2
2405a86a:	005b      	lsls	r3, r3, #1
2405a86c:	4413      	add	r3, r2
2405a86e:	00db      	lsls	r3, r3, #3
2405a870:	3350      	adds	r3, #80	; 0x50
2405a872:	443b      	add	r3, r7
2405a874:	3b2c      	subs	r3, #44	; 0x2c
2405a876:	681b      	ldr	r3, [r3, #0]
2405a878:	3b01      	subs	r3, #1
2405a87a:	f003 0301 	and.w	r3, r3, #1
2405a87e:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
2405a882:	009b      	lsls	r3, r3, #2
2405a884:	4403      	add	r3, r0
2405a886:	605a      	str	r2, [r3, #4]
2405a888:	e0b3      	b.n	2405a9f2 <HAL_OSPIM_Config+0x3fa>
2405a88a:	bf00      	nop
2405a88c:	52005000 	.word	0x52005000
2405a890:	5200a000 	.word	0x5200a000
2405a894:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
2405a898:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a89a:	4613      	mov	r3, r2
2405a89c:	005b      	lsls	r3, r3, #1
2405a89e:	4413      	add	r3, r2
2405a8a0:	00db      	lsls	r3, r3, #3
2405a8a2:	3350      	adds	r3, #80	; 0x50
2405a8a4:	443b      	add	r3, r7
2405a8a6:	3b3c      	subs	r3, #60	; 0x3c
2405a8a8:	681b      	ldr	r3, [r3, #0]
2405a8aa:	2b00      	cmp	r3, #0
2405a8ac:	f000 80a1 	beq.w	2405a9f2 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
2405a8b0:	4993      	ldr	r1, [pc, #588]	; (2405ab00 <HAL_OSPIM_Config+0x508>)
2405a8b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a8b4:	4613      	mov	r3, r2
2405a8b6:	005b      	lsls	r3, r3, #1
2405a8b8:	4413      	add	r3, r2
2405a8ba:	00db      	lsls	r3, r3, #3
2405a8bc:	3350      	adds	r3, #80	; 0x50
2405a8be:	443b      	add	r3, r7
2405a8c0:	3b3c      	subs	r3, #60	; 0x3c
2405a8c2:	681b      	ldr	r3, [r3, #0]
2405a8c4:	3b01      	subs	r3, #1
2405a8c6:	009b      	lsls	r3, r3, #2
2405a8c8:	440b      	add	r3, r1
2405a8ca:	6859      	ldr	r1, [r3, #4]
2405a8cc:	488c      	ldr	r0, [pc, #560]	; (2405ab00 <HAL_OSPIM_Config+0x508>)
2405a8ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a8d0:	4613      	mov	r3, r2
2405a8d2:	005b      	lsls	r3, r3, #1
2405a8d4:	4413      	add	r3, r2
2405a8d6:	00db      	lsls	r3, r3, #3
2405a8d8:	3350      	adds	r3, #80	; 0x50
2405a8da:	443b      	add	r3, r7
2405a8dc:	3b3c      	subs	r3, #60	; 0x3c
2405a8de:	681b      	ldr	r3, [r3, #0]
2405a8e0:	3b01      	subs	r3, #1
2405a8e2:	f021 0201 	bic.w	r2, r1, #1
2405a8e6:	009b      	lsls	r3, r3, #2
2405a8e8:	4403      	add	r3, r0
2405a8ea:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
2405a8ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a8ee:	4613      	mov	r3, r2
2405a8f0:	005b      	lsls	r3, r3, #1
2405a8f2:	4413      	add	r3, r2
2405a8f4:	00db      	lsls	r3, r3, #3
2405a8f6:	3350      	adds	r3, #80	; 0x50
2405a8f8:	443b      	add	r3, r7
2405a8fa:	3b38      	subs	r3, #56	; 0x38
2405a8fc:	681b      	ldr	r3, [r3, #0]
2405a8fe:	2b00      	cmp	r3, #0
2405a900:	d01d      	beq.n	2405a93e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
2405a902:	497f      	ldr	r1, [pc, #508]	; (2405ab00 <HAL_OSPIM_Config+0x508>)
2405a904:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a906:	4613      	mov	r3, r2
2405a908:	005b      	lsls	r3, r3, #1
2405a90a:	4413      	add	r3, r2
2405a90c:	00db      	lsls	r3, r3, #3
2405a90e:	3350      	adds	r3, #80	; 0x50
2405a910:	443b      	add	r3, r7
2405a912:	3b38      	subs	r3, #56	; 0x38
2405a914:	681b      	ldr	r3, [r3, #0]
2405a916:	3b01      	subs	r3, #1
2405a918:	009b      	lsls	r3, r3, #2
2405a91a:	440b      	add	r3, r1
2405a91c:	6859      	ldr	r1, [r3, #4]
2405a91e:	4878      	ldr	r0, [pc, #480]	; (2405ab00 <HAL_OSPIM_Config+0x508>)
2405a920:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a922:	4613      	mov	r3, r2
2405a924:	005b      	lsls	r3, r3, #1
2405a926:	4413      	add	r3, r2
2405a928:	00db      	lsls	r3, r3, #3
2405a92a:	3350      	adds	r3, #80	; 0x50
2405a92c:	443b      	add	r3, r7
2405a92e:	3b38      	subs	r3, #56	; 0x38
2405a930:	681b      	ldr	r3, [r3, #0]
2405a932:	3b01      	subs	r3, #1
2405a934:	f021 0210 	bic.w	r2, r1, #16
2405a938:	009b      	lsls	r3, r3, #2
2405a93a:	4403      	add	r3, r0
2405a93c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405a93e:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a940:	4613      	mov	r3, r2
2405a942:	005b      	lsls	r3, r3, #1
2405a944:	4413      	add	r3, r2
2405a946:	00db      	lsls	r3, r3, #3
2405a948:	3350      	adds	r3, #80	; 0x50
2405a94a:	443b      	add	r3, r7
2405a94c:	3b30      	subs	r3, #48	; 0x30
2405a94e:	681b      	ldr	r3, [r3, #0]
2405a950:	2b00      	cmp	r3, #0
2405a952:	d021      	beq.n	2405a998 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
2405a954:	496a      	ldr	r1, [pc, #424]	; (2405ab00 <HAL_OSPIM_Config+0x508>)
2405a956:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a958:	4613      	mov	r3, r2
2405a95a:	005b      	lsls	r3, r3, #1
2405a95c:	4413      	add	r3, r2
2405a95e:	00db      	lsls	r3, r3, #3
2405a960:	3350      	adds	r3, #80	; 0x50
2405a962:	443b      	add	r3, r7
2405a964:	3b30      	subs	r3, #48	; 0x30
2405a966:	681b      	ldr	r3, [r3, #0]
2405a968:	3b01      	subs	r3, #1
2405a96a:	f003 0301 	and.w	r3, r3, #1
2405a96e:	009b      	lsls	r3, r3, #2
2405a970:	440b      	add	r3, r1
2405a972:	6859      	ldr	r1, [r3, #4]
2405a974:	4862      	ldr	r0, [pc, #392]	; (2405ab00 <HAL_OSPIM_Config+0x508>)
2405a976:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a978:	4613      	mov	r3, r2
2405a97a:	005b      	lsls	r3, r3, #1
2405a97c:	4413      	add	r3, r2
2405a97e:	00db      	lsls	r3, r3, #3
2405a980:	3350      	adds	r3, #80	; 0x50
2405a982:	443b      	add	r3, r7
2405a984:	3b30      	subs	r3, #48	; 0x30
2405a986:	681b      	ldr	r3, [r3, #0]
2405a988:	3b01      	subs	r3, #1
2405a98a:	f003 0301 	and.w	r3, r3, #1
2405a98e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
2405a992:	009b      	lsls	r3, r3, #2
2405a994:	4403      	add	r3, r0
2405a996:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405a998:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a99a:	4613      	mov	r3, r2
2405a99c:	005b      	lsls	r3, r3, #1
2405a99e:	4413      	add	r3, r2
2405a9a0:	00db      	lsls	r3, r3, #3
2405a9a2:	3350      	adds	r3, #80	; 0x50
2405a9a4:	443b      	add	r3, r7
2405a9a6:	3b2c      	subs	r3, #44	; 0x2c
2405a9a8:	681b      	ldr	r3, [r3, #0]
2405a9aa:	2b00      	cmp	r3, #0
2405a9ac:	d021      	beq.n	2405a9f2 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
2405a9ae:	4954      	ldr	r1, [pc, #336]	; (2405ab00 <HAL_OSPIM_Config+0x508>)
2405a9b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a9b2:	4613      	mov	r3, r2
2405a9b4:	005b      	lsls	r3, r3, #1
2405a9b6:	4413      	add	r3, r2
2405a9b8:	00db      	lsls	r3, r3, #3
2405a9ba:	3350      	adds	r3, #80	; 0x50
2405a9bc:	443b      	add	r3, r7
2405a9be:	3b2c      	subs	r3, #44	; 0x2c
2405a9c0:	681b      	ldr	r3, [r3, #0]
2405a9c2:	3b01      	subs	r3, #1
2405a9c4:	f003 0301 	and.w	r3, r3, #1
2405a9c8:	009b      	lsls	r3, r3, #2
2405a9ca:	440b      	add	r3, r1
2405a9cc:	6859      	ldr	r1, [r3, #4]
2405a9ce:	484c      	ldr	r0, [pc, #304]	; (2405ab00 <HAL_OSPIM_Config+0x508>)
2405a9d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a9d2:	4613      	mov	r3, r2
2405a9d4:	005b      	lsls	r3, r3, #1
2405a9d6:	4413      	add	r3, r2
2405a9d8:	00db      	lsls	r3, r3, #3
2405a9da:	3350      	adds	r3, #80	; 0x50
2405a9dc:	443b      	add	r3, r7
2405a9de:	3b2c      	subs	r3, #44	; 0x2c
2405a9e0:	681b      	ldr	r3, [r3, #0]
2405a9e2:	3b01      	subs	r3, #1
2405a9e4:	f003 0301 	and.w	r3, r3, #1
2405a9e8:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
2405a9ec:	009b      	lsls	r3, r3, #2
2405a9ee:	4403      	add	r3, r0
2405a9f0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
2405a9f2:	68bb      	ldr	r3, [r7, #8]
2405a9f4:	6819      	ldr	r1, [r3, #0]
2405a9f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a9fa:	4613      	mov	r3, r2
2405a9fc:	005b      	lsls	r3, r3, #1
2405a9fe:	4413      	add	r3, r2
2405aa00:	00db      	lsls	r3, r3, #3
2405aa02:	3350      	adds	r3, #80	; 0x50
2405aa04:	443b      	add	r3, r7
2405aa06:	3b3c      	subs	r3, #60	; 0x3c
2405aa08:	681b      	ldr	r3, [r3, #0]
2405aa0a:	4299      	cmp	r1, r3
2405aa0c:	d038      	beq.n	2405aa80 <HAL_OSPIM_Config+0x488>
2405aa0e:	68bb      	ldr	r3, [r7, #8]
2405aa10:	6859      	ldr	r1, [r3, #4]
2405aa12:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aa16:	4613      	mov	r3, r2
2405aa18:	005b      	lsls	r3, r3, #1
2405aa1a:	4413      	add	r3, r2
2405aa1c:	00db      	lsls	r3, r3, #3
2405aa1e:	3350      	adds	r3, #80	; 0x50
2405aa20:	443b      	add	r3, r7
2405aa22:	3b38      	subs	r3, #56	; 0x38
2405aa24:	681b      	ldr	r3, [r3, #0]
2405aa26:	4299      	cmp	r1, r3
2405aa28:	d02a      	beq.n	2405aa80 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2405aa2a:	68bb      	ldr	r3, [r7, #8]
2405aa2c:	6899      	ldr	r1, [r3, #8]
2405aa2e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aa32:	4613      	mov	r3, r2
2405aa34:	005b      	lsls	r3, r3, #1
2405aa36:	4413      	add	r3, r2
2405aa38:	00db      	lsls	r3, r3, #3
2405aa3a:	3350      	adds	r3, #80	; 0x50
2405aa3c:	443b      	add	r3, r7
2405aa3e:	3b34      	subs	r3, #52	; 0x34
2405aa40:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
2405aa42:	4299      	cmp	r1, r3
2405aa44:	d01c      	beq.n	2405aa80 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2405aa46:	68bb      	ldr	r3, [r7, #8]
2405aa48:	68d9      	ldr	r1, [r3, #12]
2405aa4a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aa4e:	4613      	mov	r3, r2
2405aa50:	005b      	lsls	r3, r3, #1
2405aa52:	4413      	add	r3, r2
2405aa54:	00db      	lsls	r3, r3, #3
2405aa56:	3350      	adds	r3, #80	; 0x50
2405aa58:	443b      	add	r3, r7
2405aa5a:	3b30      	subs	r3, #48	; 0x30
2405aa5c:	681b      	ldr	r3, [r3, #0]
2405aa5e:	4299      	cmp	r1, r3
2405aa60:	d00e      	beq.n	2405aa80 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
2405aa62:	68bb      	ldr	r3, [r7, #8]
2405aa64:	6919      	ldr	r1, [r3, #16]
2405aa66:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aa6a:	4613      	mov	r3, r2
2405aa6c:	005b      	lsls	r3, r3, #1
2405aa6e:	4413      	add	r3, r2
2405aa70:	00db      	lsls	r3, r3, #3
2405aa72:	3350      	adds	r3, #80	; 0x50
2405aa74:	443b      	add	r3, r7
2405aa76:	3b2c      	subs	r3, #44	; 0x2c
2405aa78:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2405aa7a:	4299      	cmp	r1, r3
2405aa7c:	f040 810e 	bne.w	2405ac9c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
2405aa80:	68bb      	ldr	r3, [r7, #8]
2405aa82:	6819      	ldr	r1, [r3, #0]
2405aa84:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aa88:	4613      	mov	r3, r2
2405aa8a:	005b      	lsls	r3, r3, #1
2405aa8c:	4413      	add	r3, r2
2405aa8e:	00db      	lsls	r3, r3, #3
2405aa90:	3350      	adds	r3, #80	; 0x50
2405aa92:	443b      	add	r3, r7
2405aa94:	3b3c      	subs	r3, #60	; 0x3c
2405aa96:	681b      	ldr	r3, [r3, #0]
2405aa98:	4299      	cmp	r1, r3
2405aa9a:	d133      	bne.n	2405ab04 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
2405aa9c:	68bb      	ldr	r3, [r7, #8]
2405aa9e:	6859      	ldr	r1, [r3, #4]
2405aaa0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aaa4:	4613      	mov	r3, r2
2405aaa6:	005b      	lsls	r3, r3, #1
2405aaa8:	4413      	add	r3, r2
2405aaaa:	00db      	lsls	r3, r3, #3
2405aaac:	3350      	adds	r3, #80	; 0x50
2405aaae:	443b      	add	r3, r7
2405aab0:	3b38      	subs	r3, #56	; 0x38
2405aab2:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
2405aab4:	4299      	cmp	r1, r3
2405aab6:	d125      	bne.n	2405ab04 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
2405aab8:	68bb      	ldr	r3, [r7, #8]
2405aaba:	68d9      	ldr	r1, [r3, #12]
2405aabc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aac0:	4613      	mov	r3, r2
2405aac2:	005b      	lsls	r3, r3, #1
2405aac4:	4413      	add	r3, r2
2405aac6:	00db      	lsls	r3, r3, #3
2405aac8:	3350      	adds	r3, #80	; 0x50
2405aaca:	443b      	add	r3, r7
2405aacc:	3b30      	subs	r3, #48	; 0x30
2405aace:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
2405aad0:	4299      	cmp	r1, r3
2405aad2:	d117      	bne.n	2405ab04 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
2405aad4:	68bb      	ldr	r3, [r7, #8]
2405aad6:	6919      	ldr	r1, [r3, #16]
2405aad8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aadc:	4613      	mov	r3, r2
2405aade:	005b      	lsls	r3, r3, #1
2405aae0:	4413      	add	r3, r2
2405aae2:	00db      	lsls	r3, r3, #3
2405aae4:	3350      	adds	r3, #80	; 0x50
2405aae6:	443b      	add	r3, r7
2405aae8:	3b2c      	subs	r3, #44	; 0x2c
2405aaea:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
2405aaec:	4299      	cmp	r1, r3
2405aaee:	d109      	bne.n	2405ab04 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
2405aaf0:	4b03      	ldr	r3, [pc, #12]	; (2405ab00 <HAL_OSPIM_Config+0x508>)
2405aaf2:	681b      	ldr	r3, [r3, #0]
2405aaf4:	4a02      	ldr	r2, [pc, #8]	; (2405ab00 <HAL_OSPIM_Config+0x508>)
2405aaf6:	f043 0301 	orr.w	r3, r3, #1
2405aafa:	6013      	str	r3, [r2, #0]
2405aafc:	e0ce      	b.n	2405ac9c <HAL_OSPIM_Config+0x6a4>
2405aafe:	bf00      	nop
2405ab00:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
2405ab04:	49bb      	ldr	r1, [pc, #748]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ab06:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ab0a:	4613      	mov	r3, r2
2405ab0c:	005b      	lsls	r3, r3, #1
2405ab0e:	4413      	add	r3, r2
2405ab10:	00db      	lsls	r3, r3, #3
2405ab12:	3350      	adds	r3, #80	; 0x50
2405ab14:	443b      	add	r3, r7
2405ab16:	3b3c      	subs	r3, #60	; 0x3c
2405ab18:	681b      	ldr	r3, [r3, #0]
2405ab1a:	3b01      	subs	r3, #1
2405ab1c:	009b      	lsls	r3, r3, #2
2405ab1e:	440b      	add	r3, r1
2405ab20:	6859      	ldr	r1, [r3, #4]
2405ab22:	48b4      	ldr	r0, [pc, #720]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ab24:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ab28:	4613      	mov	r3, r2
2405ab2a:	005b      	lsls	r3, r3, #1
2405ab2c:	4413      	add	r3, r2
2405ab2e:	00db      	lsls	r3, r3, #3
2405ab30:	3350      	adds	r3, #80	; 0x50
2405ab32:	443b      	add	r3, r7
2405ab34:	3b3c      	subs	r3, #60	; 0x3c
2405ab36:	681b      	ldr	r3, [r3, #0]
2405ab38:	3b01      	subs	r3, #1
2405ab3a:	f021 0201 	bic.w	r2, r1, #1
2405ab3e:	009b      	lsls	r3, r3, #2
2405ab40:	4403      	add	r3, r0
2405ab42:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
2405ab44:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ab48:	4613      	mov	r3, r2
2405ab4a:	005b      	lsls	r3, r3, #1
2405ab4c:	4413      	add	r3, r2
2405ab4e:	00db      	lsls	r3, r3, #3
2405ab50:	3350      	adds	r3, #80	; 0x50
2405ab52:	443b      	add	r3, r7
2405ab54:	3b38      	subs	r3, #56	; 0x38
2405ab56:	681b      	ldr	r3, [r3, #0]
2405ab58:	2b00      	cmp	r3, #0
2405ab5a:	d01f      	beq.n	2405ab9c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
2405ab5c:	49a5      	ldr	r1, [pc, #660]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ab5e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ab62:	4613      	mov	r3, r2
2405ab64:	005b      	lsls	r3, r3, #1
2405ab66:	4413      	add	r3, r2
2405ab68:	00db      	lsls	r3, r3, #3
2405ab6a:	3350      	adds	r3, #80	; 0x50
2405ab6c:	443b      	add	r3, r7
2405ab6e:	3b38      	subs	r3, #56	; 0x38
2405ab70:	681b      	ldr	r3, [r3, #0]
2405ab72:	3b01      	subs	r3, #1
2405ab74:	009b      	lsls	r3, r3, #2
2405ab76:	440b      	add	r3, r1
2405ab78:	6859      	ldr	r1, [r3, #4]
2405ab7a:	489e      	ldr	r0, [pc, #632]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ab7c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ab80:	4613      	mov	r3, r2
2405ab82:	005b      	lsls	r3, r3, #1
2405ab84:	4413      	add	r3, r2
2405ab86:	00db      	lsls	r3, r3, #3
2405ab88:	3350      	adds	r3, #80	; 0x50
2405ab8a:	443b      	add	r3, r7
2405ab8c:	3b38      	subs	r3, #56	; 0x38
2405ab8e:	681b      	ldr	r3, [r3, #0]
2405ab90:	3b01      	subs	r3, #1
2405ab92:	f021 0210 	bic.w	r2, r1, #16
2405ab96:	009b      	lsls	r3, r3, #2
2405ab98:	4403      	add	r3, r0
2405ab9a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
2405ab9c:	4995      	ldr	r1, [pc, #596]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ab9e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aba2:	4613      	mov	r3, r2
2405aba4:	005b      	lsls	r3, r3, #1
2405aba6:	4413      	add	r3, r2
2405aba8:	00db      	lsls	r3, r3, #3
2405abaa:	3350      	adds	r3, #80	; 0x50
2405abac:	443b      	add	r3, r7
2405abae:	3b34      	subs	r3, #52	; 0x34
2405abb0:	681b      	ldr	r3, [r3, #0]
2405abb2:	3b01      	subs	r3, #1
2405abb4:	009b      	lsls	r3, r3, #2
2405abb6:	440b      	add	r3, r1
2405abb8:	6859      	ldr	r1, [r3, #4]
2405abba:	488e      	ldr	r0, [pc, #568]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405abbc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405abc0:	4613      	mov	r3, r2
2405abc2:	005b      	lsls	r3, r3, #1
2405abc4:	4413      	add	r3, r2
2405abc6:	00db      	lsls	r3, r3, #3
2405abc8:	3350      	adds	r3, #80	; 0x50
2405abca:	443b      	add	r3, r7
2405abcc:	3b34      	subs	r3, #52	; 0x34
2405abce:	681b      	ldr	r3, [r3, #0]
2405abd0:	3b01      	subs	r3, #1
2405abd2:	f421 7280 	bic.w	r2, r1, #256	; 0x100
2405abd6:	009b      	lsls	r3, r3, #2
2405abd8:	4403      	add	r3, r0
2405abda:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405abdc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405abe0:	4613      	mov	r3, r2
2405abe2:	005b      	lsls	r3, r3, #1
2405abe4:	4413      	add	r3, r2
2405abe6:	00db      	lsls	r3, r3, #3
2405abe8:	3350      	adds	r3, #80	; 0x50
2405abea:	443b      	add	r3, r7
2405abec:	3b30      	subs	r3, #48	; 0x30
2405abee:	681b      	ldr	r3, [r3, #0]
2405abf0:	2b00      	cmp	r3, #0
2405abf2:	d023      	beq.n	2405ac3c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405abf4:	497f      	ldr	r1, [pc, #508]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405abf6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405abfa:	4613      	mov	r3, r2
2405abfc:	005b      	lsls	r3, r3, #1
2405abfe:	4413      	add	r3, r2
2405ac00:	00db      	lsls	r3, r3, #3
2405ac02:	3350      	adds	r3, #80	; 0x50
2405ac04:	443b      	add	r3, r7
2405ac06:	3b30      	subs	r3, #48	; 0x30
2405ac08:	681b      	ldr	r3, [r3, #0]
2405ac0a:	3b01      	subs	r3, #1
2405ac0c:	f003 0301 	and.w	r3, r3, #1
2405ac10:	009b      	lsls	r3, r3, #2
2405ac12:	440b      	add	r3, r1
2405ac14:	6859      	ldr	r1, [r3, #4]
2405ac16:	4877      	ldr	r0, [pc, #476]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ac18:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ac1c:	4613      	mov	r3, r2
2405ac1e:	005b      	lsls	r3, r3, #1
2405ac20:	4413      	add	r3, r2
2405ac22:	00db      	lsls	r3, r3, #3
2405ac24:	3350      	adds	r3, #80	; 0x50
2405ac26:	443b      	add	r3, r7
2405ac28:	3b30      	subs	r3, #48	; 0x30
2405ac2a:	681b      	ldr	r3, [r3, #0]
2405ac2c:	3b01      	subs	r3, #1
2405ac2e:	f003 0301 	and.w	r3, r3, #1
2405ac32:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
2405ac36:	009b      	lsls	r3, r3, #2
2405ac38:	4403      	add	r3, r0
2405ac3a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405ac3c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ac40:	4613      	mov	r3, r2
2405ac42:	005b      	lsls	r3, r3, #1
2405ac44:	4413      	add	r3, r2
2405ac46:	00db      	lsls	r3, r3, #3
2405ac48:	3350      	adds	r3, #80	; 0x50
2405ac4a:	443b      	add	r3, r7
2405ac4c:	3b2c      	subs	r3, #44	; 0x2c
2405ac4e:	681b      	ldr	r3, [r3, #0]
2405ac50:	2b00      	cmp	r3, #0
2405ac52:	d023      	beq.n	2405ac9c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
2405ac54:	4967      	ldr	r1, [pc, #412]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ac56:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ac5a:	4613      	mov	r3, r2
2405ac5c:	005b      	lsls	r3, r3, #1
2405ac5e:	4413      	add	r3, r2
2405ac60:	00db      	lsls	r3, r3, #3
2405ac62:	3350      	adds	r3, #80	; 0x50
2405ac64:	443b      	add	r3, r7
2405ac66:	3b2c      	subs	r3, #44	; 0x2c
2405ac68:	681b      	ldr	r3, [r3, #0]
2405ac6a:	3b01      	subs	r3, #1
2405ac6c:	f003 0301 	and.w	r3, r3, #1
2405ac70:	009b      	lsls	r3, r3, #2
2405ac72:	440b      	add	r3, r1
2405ac74:	6859      	ldr	r1, [r3, #4]
2405ac76:	485f      	ldr	r0, [pc, #380]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ac78:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ac7c:	4613      	mov	r3, r2
2405ac7e:	005b      	lsls	r3, r3, #1
2405ac80:	4413      	add	r3, r2
2405ac82:	00db      	lsls	r3, r3, #3
2405ac84:	3350      	adds	r3, #80	; 0x50
2405ac86:	443b      	add	r3, r7
2405ac88:	3b2c      	subs	r3, #44	; 0x2c
2405ac8a:	681b      	ldr	r3, [r3, #0]
2405ac8c:	3b01      	subs	r3, #1
2405ac8e:	f003 0301 	and.w	r3, r3, #1
2405ac92:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
2405ac96:	009b      	lsls	r3, r3, #2
2405ac98:	4403      	add	r3, r0
2405ac9a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
2405ac9c:	4a55      	ldr	r2, [pc, #340]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ac9e:	68bb      	ldr	r3, [r7, #8]
2405aca0:	689b      	ldr	r3, [r3, #8]
2405aca2:	3b01      	subs	r3, #1
2405aca4:	009b      	lsls	r3, r3, #2
2405aca6:	4413      	add	r3, r2
2405aca8:	685b      	ldr	r3, [r3, #4]
2405acaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
2405acae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405acb0:	025b      	lsls	r3, r3, #9
2405acb2:	431a      	orrs	r2, r3
2405acb4:	494f      	ldr	r1, [pc, #316]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405acb6:	68bb      	ldr	r3, [r7, #8]
2405acb8:	689b      	ldr	r3, [r3, #8]
2405acba:	3b01      	subs	r3, #1
2405acbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2405acc0:	009b      	lsls	r3, r3, #2
2405acc2:	440b      	add	r3, r1
2405acc4:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
2405acc6:	68bb      	ldr	r3, [r7, #8]
2405acc8:	695b      	ldr	r3, [r3, #20]
2405acca:	1e5a      	subs	r2, r3, #1
2405accc:	4b49      	ldr	r3, [pc, #292]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405acce:	681b      	ldr	r3, [r3, #0]
2405acd0:	0c1b      	lsrs	r3, r3, #16
2405acd2:	b2db      	uxtb	r3, r3
2405acd4:	429a      	cmp	r2, r3
2405acd6:	d90a      	bls.n	2405acee <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
2405acd8:	4b46      	ldr	r3, [pc, #280]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405acda:	681b      	ldr	r3, [r3, #0]
2405acdc:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
2405ace0:	68bb      	ldr	r3, [r7, #8]
2405ace2:	695b      	ldr	r3, [r3, #20]
2405ace4:	3b01      	subs	r3, #1
2405ace6:	041b      	lsls	r3, r3, #16
2405ace8:	4942      	ldr	r1, [pc, #264]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405acea:	4313      	orrs	r3, r2
2405acec:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
2405acee:	4b41      	ldr	r3, [pc, #260]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405acf0:	681b      	ldr	r3, [r3, #0]
2405acf2:	f003 0301 	and.w	r3, r3, #1
2405acf6:	2b00      	cmp	r3, #0
2405acf8:	f000 809a 	beq.w	2405ae30 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
2405acfc:	4a3d      	ldr	r2, [pc, #244]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405acfe:	68bb      	ldr	r3, [r7, #8]
2405ad00:	681b      	ldr	r3, [r3, #0]
2405ad02:	3b01      	subs	r3, #1
2405ad04:	009b      	lsls	r3, r3, #2
2405ad06:	4413      	add	r3, r2
2405ad08:	685b      	ldr	r3, [r3, #4]
2405ad0a:	f023 0203 	bic.w	r2, r3, #3
2405ad0e:	4939      	ldr	r1, [pc, #228]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ad10:	68bb      	ldr	r3, [r7, #8]
2405ad12:	681b      	ldr	r3, [r3, #0]
2405ad14:	3b01      	subs	r3, #1
2405ad16:	f042 0201 	orr.w	r2, r2, #1
2405ad1a:	009b      	lsls	r3, r3, #2
2405ad1c:	440b      	add	r3, r1
2405ad1e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
2405ad20:	68bb      	ldr	r3, [r7, #8]
2405ad22:	685b      	ldr	r3, [r3, #4]
2405ad24:	2b00      	cmp	r3, #0
2405ad26:	d011      	beq.n	2405ad4c <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
2405ad28:	4a32      	ldr	r2, [pc, #200]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ad2a:	68bb      	ldr	r3, [r7, #8]
2405ad2c:	685b      	ldr	r3, [r3, #4]
2405ad2e:	3b01      	subs	r3, #1
2405ad30:	009b      	lsls	r3, r3, #2
2405ad32:	4413      	add	r3, r2
2405ad34:	685b      	ldr	r3, [r3, #4]
2405ad36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
2405ad3a:	492e      	ldr	r1, [pc, #184]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ad3c:	68bb      	ldr	r3, [r7, #8]
2405ad3e:	685b      	ldr	r3, [r3, #4]
2405ad40:	3b01      	subs	r3, #1
2405ad42:	f042 0210 	orr.w	r2, r2, #16
2405ad46:	009b      	lsls	r3, r3, #2
2405ad48:	440b      	add	r3, r1
2405ad4a:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405ad4c:	68bb      	ldr	r3, [r7, #8]
2405ad4e:	68db      	ldr	r3, [r3, #12]
2405ad50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405ad54:	2b00      	cmp	r3, #0
2405ad56:	d016      	beq.n	2405ad86 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405ad58:	4a26      	ldr	r2, [pc, #152]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ad5a:	68bb      	ldr	r3, [r7, #8]
2405ad5c:	68db      	ldr	r3, [r3, #12]
2405ad5e:	3b01      	subs	r3, #1
2405ad60:	f003 0301 	and.w	r3, r3, #1
2405ad64:	009b      	lsls	r3, r3, #2
2405ad66:	4413      	add	r3, r2
2405ad68:	685b      	ldr	r3, [r3, #4]
2405ad6a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
2405ad6e:	4921      	ldr	r1, [pc, #132]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ad70:	68bb      	ldr	r3, [r7, #8]
2405ad72:	68db      	ldr	r3, [r3, #12]
2405ad74:	3b01      	subs	r3, #1
2405ad76:	f003 0301 	and.w	r3, r3, #1
2405ad7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2405ad7e:	009b      	lsls	r3, r3, #2
2405ad80:	440b      	add	r3, r1
2405ad82:	605a      	str	r2, [r3, #4]
2405ad84:	e019      	b.n	2405adba <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405ad86:	68bb      	ldr	r3, [r7, #8]
2405ad88:	68db      	ldr	r3, [r3, #12]
2405ad8a:	2b00      	cmp	r3, #0
2405ad8c:	d015      	beq.n	2405adba <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405ad8e:	4a19      	ldr	r2, [pc, #100]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ad90:	68bb      	ldr	r3, [r7, #8]
2405ad92:	68db      	ldr	r3, [r3, #12]
2405ad94:	3b01      	subs	r3, #1
2405ad96:	f003 0301 	and.w	r3, r3, #1
2405ad9a:	009b      	lsls	r3, r3, #2
2405ad9c:	4413      	add	r3, r2
2405ad9e:	685b      	ldr	r3, [r3, #4]
2405ada0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
2405ada4:	4913      	ldr	r1, [pc, #76]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405ada6:	68bb      	ldr	r3, [r7, #8]
2405ada8:	68db      	ldr	r3, [r3, #12]
2405adaa:	3b01      	subs	r3, #1
2405adac:	f003 0301 	and.w	r3, r3, #1
2405adb0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
2405adb4:	009b      	lsls	r3, r3, #2
2405adb6:	440b      	add	r3, r1
2405adb8:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405adba:	68bb      	ldr	r3, [r7, #8]
2405adbc:	691b      	ldr	r3, [r3, #16]
2405adbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405adc2:	2b00      	cmp	r3, #0
2405adc4:	d018      	beq.n	2405adf8 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
2405adc6:	4a0b      	ldr	r2, [pc, #44]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405adc8:	68bb      	ldr	r3, [r7, #8]
2405adca:	691b      	ldr	r3, [r3, #16]
2405adcc:	3b01      	subs	r3, #1
2405adce:	f003 0301 	and.w	r3, r3, #1
2405add2:	009b      	lsls	r3, r3, #2
2405add4:	4413      	add	r3, r2
2405add6:	685b      	ldr	r3, [r3, #4]
2405add8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
2405addc:	4905      	ldr	r1, [pc, #20]	; (2405adf4 <HAL_OSPIM_Config+0x7fc>)
2405adde:	68bb      	ldr	r3, [r7, #8]
2405ade0:	691b      	ldr	r3, [r3, #16]
2405ade2:	3b01      	subs	r3, #1
2405ade4:	f003 0301 	and.w	r3, r3, #1
2405ade8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
2405adec:	009b      	lsls	r3, r3, #2
2405adee:	440b      	add	r3, r1
2405adf0:	605a      	str	r2, [r3, #4]
2405adf2:	e0c5      	b.n	2405af80 <HAL_OSPIM_Config+0x988>
2405adf4:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405adf8:	68bb      	ldr	r3, [r7, #8]
2405adfa:	691b      	ldr	r3, [r3, #16]
2405adfc:	2b00      	cmp	r3, #0
2405adfe:	f000 80bf 	beq.w	2405af80 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
2405ae02:	4a6e      	ldr	r2, [pc, #440]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405ae04:	68bb      	ldr	r3, [r7, #8]
2405ae06:	691b      	ldr	r3, [r3, #16]
2405ae08:	3b01      	subs	r3, #1
2405ae0a:	f003 0301 	and.w	r3, r3, #1
2405ae0e:	009b      	lsls	r3, r3, #2
2405ae10:	4413      	add	r3, r2
2405ae12:	685b      	ldr	r3, [r3, #4]
2405ae14:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
2405ae18:	4968      	ldr	r1, [pc, #416]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405ae1a:	68bb      	ldr	r3, [r7, #8]
2405ae1c:	691b      	ldr	r3, [r3, #16]
2405ae1e:	3b01      	subs	r3, #1
2405ae20:	f003 0301 	and.w	r3, r3, #1
2405ae24:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
2405ae28:	009b      	lsls	r3, r3, #2
2405ae2a:	440b      	add	r3, r1
2405ae2c:	605a      	str	r2, [r3, #4]
2405ae2e:	e0a7      	b.n	2405af80 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
2405ae30:	4a62      	ldr	r2, [pc, #392]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405ae32:	68bb      	ldr	r3, [r7, #8]
2405ae34:	681b      	ldr	r3, [r3, #0]
2405ae36:	3b01      	subs	r3, #1
2405ae38:	009b      	lsls	r3, r3, #2
2405ae3a:	4413      	add	r3, r2
2405ae3c:	685b      	ldr	r3, [r3, #4]
2405ae3e:	f023 0203 	bic.w	r2, r3, #3
2405ae42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405ae44:	005b      	lsls	r3, r3, #1
2405ae46:	431a      	orrs	r2, r3
2405ae48:	495c      	ldr	r1, [pc, #368]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405ae4a:	68bb      	ldr	r3, [r7, #8]
2405ae4c:	681b      	ldr	r3, [r3, #0]
2405ae4e:	3b01      	subs	r3, #1
2405ae50:	f042 0201 	orr.w	r2, r2, #1
2405ae54:	009b      	lsls	r3, r3, #2
2405ae56:	440b      	add	r3, r1
2405ae58:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
2405ae5a:	68bb      	ldr	r3, [r7, #8]
2405ae5c:	685b      	ldr	r3, [r3, #4]
2405ae5e:	2b00      	cmp	r3, #0
2405ae60:	d014      	beq.n	2405ae8c <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
2405ae62:	4a56      	ldr	r2, [pc, #344]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405ae64:	68bb      	ldr	r3, [r7, #8]
2405ae66:	685b      	ldr	r3, [r3, #4]
2405ae68:	3b01      	subs	r3, #1
2405ae6a:	009b      	lsls	r3, r3, #2
2405ae6c:	4413      	add	r3, r2
2405ae6e:	685b      	ldr	r3, [r3, #4]
2405ae70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
2405ae74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405ae76:	015b      	lsls	r3, r3, #5
2405ae78:	431a      	orrs	r2, r3
2405ae7a:	4950      	ldr	r1, [pc, #320]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405ae7c:	68bb      	ldr	r3, [r7, #8]
2405ae7e:	685b      	ldr	r3, [r3, #4]
2405ae80:	3b01      	subs	r3, #1
2405ae82:	f042 0210 	orr.w	r2, r2, #16
2405ae86:	009b      	lsls	r3, r3, #2
2405ae88:	440b      	add	r3, r1
2405ae8a:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405ae8c:	68bb      	ldr	r3, [r7, #8]
2405ae8e:	68db      	ldr	r3, [r3, #12]
2405ae90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405ae94:	2b00      	cmp	r3, #0
2405ae96:	d019      	beq.n	2405aecc <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405ae98:	4a48      	ldr	r2, [pc, #288]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405ae9a:	68bb      	ldr	r3, [r7, #8]
2405ae9c:	68db      	ldr	r3, [r3, #12]
2405ae9e:	3b01      	subs	r3, #1
2405aea0:	f003 0301 	and.w	r3, r3, #1
2405aea4:	009b      	lsls	r3, r3, #2
2405aea6:	4413      	add	r3, r2
2405aea8:	685b      	ldr	r3, [r3, #4]
2405aeaa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
2405aeae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405aeb0:	049b      	lsls	r3, r3, #18
2405aeb2:	431a      	orrs	r2, r3
2405aeb4:	4941      	ldr	r1, [pc, #260]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405aeb6:	68bb      	ldr	r3, [r7, #8]
2405aeb8:	68db      	ldr	r3, [r3, #12]
2405aeba:	3b01      	subs	r3, #1
2405aebc:	f003 0301 	and.w	r3, r3, #1
2405aec0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2405aec4:	009b      	lsls	r3, r3, #2
2405aec6:	440b      	add	r3, r1
2405aec8:	605a      	str	r2, [r3, #4]
2405aeca:	e01c      	b.n	2405af06 <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405aecc:	68bb      	ldr	r3, [r7, #8]
2405aece:	68db      	ldr	r3, [r3, #12]
2405aed0:	2b00      	cmp	r3, #0
2405aed2:	d018      	beq.n	2405af06 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405aed4:	4a39      	ldr	r2, [pc, #228]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405aed6:	68bb      	ldr	r3, [r7, #8]
2405aed8:	68db      	ldr	r3, [r3, #12]
2405aeda:	3b01      	subs	r3, #1
2405aedc:	f003 0301 	and.w	r3, r3, #1
2405aee0:	009b      	lsls	r3, r3, #2
2405aee2:	4413      	add	r3, r2
2405aee4:	685b      	ldr	r3, [r3, #4]
2405aee6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
2405aeea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405aeec:	069b      	lsls	r3, r3, #26
2405aeee:	431a      	orrs	r2, r3
2405aef0:	4932      	ldr	r1, [pc, #200]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405aef2:	68bb      	ldr	r3, [r7, #8]
2405aef4:	68db      	ldr	r3, [r3, #12]
2405aef6:	3b01      	subs	r3, #1
2405aef8:	f003 0301 	and.w	r3, r3, #1
2405aefc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
2405af00:	009b      	lsls	r3, r3, #2
2405af02:	440b      	add	r3, r1
2405af04:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405af06:	68bb      	ldr	r3, [r7, #8]
2405af08:	691b      	ldr	r3, [r3, #16]
2405af0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405af0e:	2b00      	cmp	r3, #0
2405af10:	d019      	beq.n	2405af46 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
2405af12:	4a2a      	ldr	r2, [pc, #168]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405af14:	68bb      	ldr	r3, [r7, #8]
2405af16:	691b      	ldr	r3, [r3, #16]
2405af18:	3b01      	subs	r3, #1
2405af1a:	f003 0301 	and.w	r3, r3, #1
2405af1e:	009b      	lsls	r3, r3, #2
2405af20:	4413      	add	r3, r2
2405af22:	685b      	ldr	r3, [r3, #4]
2405af24:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
2405af28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405af2a:	049b      	lsls	r3, r3, #18
2405af2c:	431a      	orrs	r2, r3
2405af2e:	4923      	ldr	r1, [pc, #140]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405af30:	68bb      	ldr	r3, [r7, #8]
2405af32:	691b      	ldr	r3, [r3, #16]
2405af34:	3b01      	subs	r3, #1
2405af36:	f003 0301 	and.w	r3, r3, #1
2405af3a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
2405af3e:	009b      	lsls	r3, r3, #2
2405af40:	440b      	add	r3, r1
2405af42:	605a      	str	r2, [r3, #4]
2405af44:	e01c      	b.n	2405af80 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405af46:	68bb      	ldr	r3, [r7, #8]
2405af48:	691b      	ldr	r3, [r3, #16]
2405af4a:	2b00      	cmp	r3, #0
2405af4c:	d018      	beq.n	2405af80 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
2405af4e:	4a1b      	ldr	r2, [pc, #108]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405af50:	68bb      	ldr	r3, [r7, #8]
2405af52:	691b      	ldr	r3, [r3, #16]
2405af54:	3b01      	subs	r3, #1
2405af56:	f003 0301 	and.w	r3, r3, #1
2405af5a:	009b      	lsls	r3, r3, #2
2405af5c:	4413      	add	r3, r2
2405af5e:	685b      	ldr	r3, [r3, #4]
2405af60:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
2405af64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405af66:	069b      	lsls	r3, r3, #26
2405af68:	431a      	orrs	r2, r3
2405af6a:	4914      	ldr	r1, [pc, #80]	; (2405afbc <HAL_OSPIM_Config+0x9c4>)
2405af6c:	68bb      	ldr	r3, [r7, #8]
2405af6e:	691b      	ldr	r3, [r3, #16]
2405af70:	3b01      	subs	r3, #1
2405af72:	f003 0301 	and.w	r3, r3, #1
2405af76:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
2405af7a:	009b      	lsls	r3, r3, #2
2405af7c:	440b      	add	r3, r1
2405af7e:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
2405af80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
2405af84:	f003 0301 	and.w	r3, r3, #1
2405af88:	2b00      	cmp	r3, #0
2405af8a:	d005      	beq.n	2405af98 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
2405af8c:	4b0c      	ldr	r3, [pc, #48]	; (2405afc0 <HAL_OSPIM_Config+0x9c8>)
2405af8e:	681b      	ldr	r3, [r3, #0]
2405af90:	4a0b      	ldr	r2, [pc, #44]	; (2405afc0 <HAL_OSPIM_Config+0x9c8>)
2405af92:	f043 0301 	orr.w	r3, r3, #1
2405af96:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
2405af98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
2405af9c:	f003 0302 	and.w	r3, r3, #2
2405afa0:	2b00      	cmp	r3, #0
2405afa2:	d005      	beq.n	2405afb0 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
2405afa4:	4b07      	ldr	r3, [pc, #28]	; (2405afc4 <HAL_OSPIM_Config+0x9cc>)
2405afa6:	681b      	ldr	r3, [r3, #0]
2405afa8:	4a06      	ldr	r2, [pc, #24]	; (2405afc4 <HAL_OSPIM_Config+0x9cc>)
2405afaa:	f043 0301 	orr.w	r3, r3, #1
2405afae:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
2405afb0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
2405afb4:	4618      	mov	r0, r3
2405afb6:	3750      	adds	r7, #80	; 0x50
2405afb8:	46bd      	mov	sp, r7
2405afba:	bd80      	pop	{r7, pc}
2405afbc:	5200b400 	.word	0x5200b400
2405afc0:	52005000 	.word	0x52005000
2405afc4:	5200a000 	.word	0x5200a000

2405afc8 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
2405afc8:	b580      	push	{r7, lr}
2405afca:	b084      	sub	sp, #16
2405afcc:	af00      	add	r7, sp, #0
2405afce:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
2405afd0:	687b      	ldr	r3, [r7, #4]
2405afd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405afd4:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
2405afd6:	68fb      	ldr	r3, [r7, #12]
2405afd8:	2200      	movs	r2, #0
2405afda:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
2405afdc:	68fb      	ldr	r3, [r7, #12]
2405afde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405afe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405afe4:	d122      	bne.n	2405b02c <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
2405afe6:	68fb      	ldr	r3, [r7, #12]
2405afe8:	681b      	ldr	r3, [r3, #0]
2405afea:	6a1b      	ldr	r3, [r3, #32]
2405afec:	f003 0320 	and.w	r3, r3, #32
2405aff0:	2b00      	cmp	r3, #0
2405aff2:	d014      	beq.n	2405b01e <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
2405aff4:	68fb      	ldr	r3, [r7, #12]
2405aff6:	681b      	ldr	r3, [r3, #0]
2405aff8:	2202      	movs	r2, #2
2405affa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
2405affc:	68fb      	ldr	r3, [r7, #12]
2405affe:	681b      	ldr	r3, [r3, #0]
2405b000:	681a      	ldr	r2, [r3, #0]
2405b002:	68fb      	ldr	r3, [r7, #12]
2405b004:	681b      	ldr	r3, [r3, #0]
2405b006:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2405b00a:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
2405b00c:	68fb      	ldr	r3, [r7, #12]
2405b00e:	681b      	ldr	r3, [r3, #0]
2405b010:	681a      	ldr	r2, [r3, #0]
2405b012:	68fb      	ldr	r3, [r7, #12]
2405b014:	681b      	ldr	r3, [r3, #0]
2405b016:	f042 0202 	orr.w	r2, r2, #2
2405b01a:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
2405b01c:	e00c      	b.n	2405b038 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
2405b01e:	68fb      	ldr	r3, [r7, #12]
2405b020:	2202      	movs	r2, #2
2405b022:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
2405b024:	68f8      	ldr	r0, [r7, #12]
2405b026:	f7ff fa91 	bl	2405a54c <HAL_OSPI_AbortCpltCallback>
}
2405b02a:	e005      	b.n	2405b038 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
2405b02c:	68fb      	ldr	r3, [r7, #12]
2405b02e:	2202      	movs	r2, #2
2405b030:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
2405b032:	68f8      	ldr	r0, [r7, #12]
2405b034:	f7ff fa80 	bl	2405a538 <HAL_OSPI_ErrorCallback>
}
2405b038:	bf00      	nop
2405b03a:	3710      	adds	r7, #16
2405b03c:	46bd      	mov	sp, r7
2405b03e:	bd80      	pop	{r7, pc}

2405b040 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
2405b040:	b580      	push	{r7, lr}
2405b042:	b084      	sub	sp, #16
2405b044:	af00      	add	r7, sp, #0
2405b046:	60f8      	str	r0, [r7, #12]
2405b048:	60b9      	str	r1, [r7, #8]
2405b04a:	603b      	str	r3, [r7, #0]
2405b04c:	4613      	mov	r3, r2
2405b04e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
2405b050:	e01a      	b.n	2405b088 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2405b052:	69bb      	ldr	r3, [r7, #24]
2405b054:	f1b3 3fff 	cmp.w	r3, #4294967295
2405b058:	d016      	beq.n	2405b088 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2405b05a:	f7f8 fef3 	bl	24053e44 <HAL_GetTick>
2405b05e:	4602      	mov	r2, r0
2405b060:	683b      	ldr	r3, [r7, #0]
2405b062:	1ad3      	subs	r3, r2, r3
2405b064:	69ba      	ldr	r2, [r7, #24]
2405b066:	429a      	cmp	r2, r3
2405b068:	d302      	bcc.n	2405b070 <OSPI_WaitFlagStateUntilTimeout+0x30>
2405b06a:	69bb      	ldr	r3, [r7, #24]
2405b06c:	2b00      	cmp	r3, #0
2405b06e:	d10b      	bne.n	2405b088 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
2405b070:	68fb      	ldr	r3, [r7, #12]
2405b072:	f44f 7200 	mov.w	r2, #512	; 0x200
2405b076:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
2405b078:	68fb      	ldr	r3, [r7, #12]
2405b07a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b07c:	f043 0201 	orr.w	r2, r3, #1
2405b080:	68fb      	ldr	r3, [r7, #12]
2405b082:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
2405b084:	2301      	movs	r3, #1
2405b086:	e00e      	b.n	2405b0a6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
2405b088:	68fb      	ldr	r3, [r7, #12]
2405b08a:	681b      	ldr	r3, [r3, #0]
2405b08c:	6a1a      	ldr	r2, [r3, #32]
2405b08e:	68bb      	ldr	r3, [r7, #8]
2405b090:	4013      	ands	r3, r2
2405b092:	2b00      	cmp	r3, #0
2405b094:	bf14      	ite	ne
2405b096:	2301      	movne	r3, #1
2405b098:	2300      	moveq	r3, #0
2405b09a:	b2db      	uxtb	r3, r3
2405b09c:	461a      	mov	r2, r3
2405b09e:	79fb      	ldrb	r3, [r7, #7]
2405b0a0:	429a      	cmp	r2, r3
2405b0a2:	d1d6      	bne.n	2405b052 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
2405b0a4:	2300      	movs	r3, #0
}
2405b0a6:	4618      	mov	r0, r3
2405b0a8:	3710      	adds	r7, #16
2405b0aa:	46bd      	mov	sp, r7
2405b0ac:	bd80      	pop	{r7, pc}
	...

2405b0b0 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
2405b0b0:	b480      	push	{r7}
2405b0b2:	b089      	sub	sp, #36	; 0x24
2405b0b4:	af00      	add	r7, sp, #0
2405b0b6:	6078      	str	r0, [r7, #4]
2405b0b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405b0ba:	2300      	movs	r3, #0
2405b0bc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
2405b0be:	687b      	ldr	r3, [r7, #4]
2405b0c0:	681b      	ldr	r3, [r3, #0]
2405b0c2:	681a      	ldr	r2, [r3, #0]
2405b0c4:	687b      	ldr	r3, [r7, #4]
2405b0c6:	681b      	ldr	r3, [r3, #0]
2405b0c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
2405b0cc:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
2405b0ce:	687b      	ldr	r3, [r7, #4]
2405b0d0:	689b      	ldr	r3, [r3, #8]
2405b0d2:	2b00      	cmp	r3, #0
2405b0d4:	d10a      	bne.n	2405b0ec <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
2405b0d6:	687b      	ldr	r3, [r7, #4]
2405b0d8:	681b      	ldr	r3, [r3, #0]
2405b0da:	681b      	ldr	r3, [r3, #0]
2405b0dc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
2405b0e0:	683b      	ldr	r3, [r7, #0]
2405b0e2:	685a      	ldr	r2, [r3, #4]
2405b0e4:	687b      	ldr	r3, [r7, #4]
2405b0e6:	681b      	ldr	r3, [r3, #0]
2405b0e8:	430a      	orrs	r2, r1
2405b0ea:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
2405b0ec:	683b      	ldr	r3, [r7, #0]
2405b0ee:	681b      	ldr	r3, [r3, #0]
2405b0f0:	2b02      	cmp	r3, #2
2405b0f2:	d114      	bne.n	2405b11e <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
2405b0f4:	687b      	ldr	r3, [r7, #4]
2405b0f6:	681b      	ldr	r3, [r3, #0]
2405b0f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
2405b0fc:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
2405b0fe:	687b      	ldr	r3, [r7, #4]
2405b100:	681b      	ldr	r3, [r3, #0]
2405b102:	f503 73c4 	add.w	r3, r3, #392	; 0x188
2405b106:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
2405b108:	687b      	ldr	r3, [r7, #4]
2405b10a:	681b      	ldr	r3, [r3, #0]
2405b10c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
2405b110:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
2405b112:	687b      	ldr	r3, [r7, #4]
2405b114:	681b      	ldr	r3, [r3, #0]
2405b116:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
2405b11a:	60fb      	str	r3, [r7, #12]
2405b11c:	e02c      	b.n	2405b178 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
2405b11e:	683b      	ldr	r3, [r7, #0]
2405b120:	681b      	ldr	r3, [r3, #0]
2405b122:	2b03      	cmp	r3, #3
2405b124:	d114      	bne.n	2405b150 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
2405b126:	687b      	ldr	r3, [r7, #4]
2405b128:	681b      	ldr	r3, [r3, #0]
2405b12a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
2405b12e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
2405b130:	687b      	ldr	r3, [r7, #4]
2405b132:	681b      	ldr	r3, [r3, #0]
2405b134:	f503 73a4 	add.w	r3, r3, #328	; 0x148
2405b138:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
2405b13a:	687b      	ldr	r3, [r7, #4]
2405b13c:	681b      	ldr	r3, [r3, #0]
2405b13e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
2405b142:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
2405b144:	687b      	ldr	r3, [r7, #4]
2405b146:	681b      	ldr	r3, [r3, #0]
2405b148:	f503 73b0 	add.w	r3, r3, #352	; 0x160
2405b14c:	60fb      	str	r3, [r7, #12]
2405b14e:	e013      	b.n	2405b178 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
2405b150:	687b      	ldr	r3, [r7, #4]
2405b152:	681b      	ldr	r3, [r3, #0]
2405b154:	f503 7380 	add.w	r3, r3, #256	; 0x100
2405b158:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
2405b15a:	687b      	ldr	r3, [r7, #4]
2405b15c:	681b      	ldr	r3, [r3, #0]
2405b15e:	f503 7384 	add.w	r3, r3, #264	; 0x108
2405b162:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
2405b164:	687b      	ldr	r3, [r7, #4]
2405b166:	681b      	ldr	r3, [r3, #0]
2405b168:	f503 7388 	add.w	r3, r3, #272	; 0x110
2405b16c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
2405b16e:	687b      	ldr	r3, [r7, #4]
2405b170:	681b      	ldr	r3, [r3, #0]
2405b172:	f503 7390 	add.w	r3, r3, #288	; 0x120
2405b176:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
2405b178:	683b      	ldr	r3, [r7, #0]
2405b17a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2405b17c:	683b      	ldr	r3, [r7, #0]
2405b17e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405b180:	431a      	orrs	r2, r3
2405b182:	69bb      	ldr	r3, [r7, #24]
2405b184:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
2405b186:	683b      	ldr	r3, [r7, #0]
2405b188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b18a:	2b00      	cmp	r3, #0
2405b18c:	d012      	beq.n	2405b1b4 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
2405b18e:	683b      	ldr	r3, [r7, #0]
2405b190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2405b192:	68fb      	ldr	r3, [r7, #12]
2405b194:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
2405b196:	69bb      	ldr	r3, [r7, #24]
2405b198:	681b      	ldr	r3, [r3, #0]
2405b19a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
2405b19e:	683b      	ldr	r3, [r7, #0]
2405b1a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
2405b1a2:	683b      	ldr	r3, [r7, #0]
2405b1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405b1a6:	4319      	orrs	r1, r3
2405b1a8:	683b      	ldr	r3, [r7, #0]
2405b1aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405b1ac:	430b      	orrs	r3, r1
2405b1ae:	431a      	orrs	r2, r3
2405b1b0:	69bb      	ldr	r3, [r7, #24]
2405b1b2:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
2405b1b4:	697b      	ldr	r3, [r7, #20]
2405b1b6:	681b      	ldr	r3, [r3, #0]
2405b1b8:	f023 021f 	bic.w	r2, r3, #31
2405b1bc:	683b      	ldr	r3, [r7, #0]
2405b1be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405b1c0:	431a      	orrs	r2, r3
2405b1c2:	697b      	ldr	r3, [r7, #20]
2405b1c4:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405b1c6:	683b      	ldr	r3, [r7, #0]
2405b1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405b1ca:	2b00      	cmp	r3, #0
2405b1cc:	d009      	beq.n	2405b1e2 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
2405b1ce:	683b      	ldr	r3, [r7, #0]
2405b1d0:	681b      	ldr	r3, [r3, #0]
2405b1d2:	2b00      	cmp	r3, #0
2405b1d4:	d105      	bne.n	2405b1e2 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
2405b1d6:	683b      	ldr	r3, [r7, #0]
2405b1d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2405b1da:	687b      	ldr	r3, [r7, #4]
2405b1dc:	681b      	ldr	r3, [r3, #0]
2405b1de:	3a01      	subs	r2, #1
2405b1e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
2405b1e2:	683b      	ldr	r3, [r7, #0]
2405b1e4:	68db      	ldr	r3, [r3, #12]
2405b1e6:	2b00      	cmp	r3, #0
2405b1e8:	f000 8095 	beq.w	2405b316 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
2405b1ec:	683b      	ldr	r3, [r7, #0]
2405b1ee:	69db      	ldr	r3, [r3, #28]
2405b1f0:	2b00      	cmp	r3, #0
2405b1f2:	d053      	beq.n	2405b29c <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405b1f4:	683b      	ldr	r3, [r7, #0]
2405b1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405b1f8:	2b00      	cmp	r3, #0
2405b1fa:	d01e      	beq.n	2405b23a <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
2405b1fc:	69bb      	ldr	r3, [r7, #24]
2405b1fe:	681a      	ldr	r2, [r3, #0]
2405b200:	4b64      	ldr	r3, [pc, #400]	; (2405b394 <OSPI_ConfigCmd+0x2e4>)
2405b202:	4013      	ands	r3, r2
2405b204:	683a      	ldr	r2, [r7, #0]
2405b206:	68d1      	ldr	r1, [r2, #12]
2405b208:	683a      	ldr	r2, [r7, #0]
2405b20a:	6952      	ldr	r2, [r2, #20]
2405b20c:	4311      	orrs	r1, r2
2405b20e:	683a      	ldr	r2, [r7, #0]
2405b210:	6912      	ldr	r2, [r2, #16]
2405b212:	4311      	orrs	r1, r2
2405b214:	683a      	ldr	r2, [r7, #0]
2405b216:	69d2      	ldr	r2, [r2, #28]
2405b218:	4311      	orrs	r1, r2
2405b21a:	683a      	ldr	r2, [r7, #0]
2405b21c:	6a52      	ldr	r2, [r2, #36]	; 0x24
2405b21e:	4311      	orrs	r1, r2
2405b220:	683a      	ldr	r2, [r7, #0]
2405b222:	6a12      	ldr	r2, [r2, #32]
2405b224:	4311      	orrs	r1, r2
2405b226:	683a      	ldr	r2, [r7, #0]
2405b228:	6b92      	ldr	r2, [r2, #56]	; 0x38
2405b22a:	4311      	orrs	r1, r2
2405b22c:	683a      	ldr	r2, [r7, #0]
2405b22e:	6c12      	ldr	r2, [r2, #64]	; 0x40
2405b230:	430a      	orrs	r2, r1
2405b232:	431a      	orrs	r2, r3
2405b234:	69bb      	ldr	r3, [r7, #24]
2405b236:	601a      	str	r2, [r3, #0]
2405b238:	e026      	b.n	2405b288 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
2405b23a:	69bb      	ldr	r3, [r7, #24]
2405b23c:	681a      	ldr	r2, [r3, #0]
2405b23e:	4b56      	ldr	r3, [pc, #344]	; (2405b398 <OSPI_ConfigCmd+0x2e8>)
2405b240:	4013      	ands	r3, r2
2405b242:	683a      	ldr	r2, [r7, #0]
2405b244:	68d1      	ldr	r1, [r2, #12]
2405b246:	683a      	ldr	r2, [r7, #0]
2405b248:	6952      	ldr	r2, [r2, #20]
2405b24a:	4311      	orrs	r1, r2
2405b24c:	683a      	ldr	r2, [r7, #0]
2405b24e:	6912      	ldr	r2, [r2, #16]
2405b250:	4311      	orrs	r1, r2
2405b252:	683a      	ldr	r2, [r7, #0]
2405b254:	69d2      	ldr	r2, [r2, #28]
2405b256:	4311      	orrs	r1, r2
2405b258:	683a      	ldr	r2, [r7, #0]
2405b25a:	6a52      	ldr	r2, [r2, #36]	; 0x24
2405b25c:	4311      	orrs	r1, r2
2405b25e:	683a      	ldr	r2, [r7, #0]
2405b260:	6a12      	ldr	r2, [r2, #32]
2405b262:	430a      	orrs	r2, r1
2405b264:	431a      	orrs	r2, r3
2405b266:	69bb      	ldr	r3, [r7, #24]
2405b268:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405b26a:	687b      	ldr	r3, [r7, #4]
2405b26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b26e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405b272:	d109      	bne.n	2405b288 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
2405b274:	683b      	ldr	r3, [r7, #0]
2405b276:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405b278:	2b08      	cmp	r3, #8
2405b27a:	d105      	bne.n	2405b288 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
2405b27c:	69bb      	ldr	r3, [r7, #24]
2405b27e:	681b      	ldr	r3, [r3, #0]
2405b280:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
2405b284:	69bb      	ldr	r3, [r7, #24]
2405b286:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
2405b288:	683b      	ldr	r3, [r7, #0]
2405b28a:	689a      	ldr	r2, [r3, #8]
2405b28c:	693b      	ldr	r3, [r7, #16]
2405b28e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
2405b290:	687b      	ldr	r3, [r7, #4]
2405b292:	681b      	ldr	r3, [r3, #0]
2405b294:	683a      	ldr	r2, [r7, #0]
2405b296:	6992      	ldr	r2, [r2, #24]
2405b298:	649a      	str	r2, [r3, #72]	; 0x48
2405b29a:	e074      	b.n	2405b386 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405b29c:	683b      	ldr	r3, [r7, #0]
2405b29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405b2a0:	2b00      	cmp	r3, #0
2405b2a2:	d015      	beq.n	2405b2d0 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
2405b2a4:	69bb      	ldr	r3, [r7, #24]
2405b2a6:	681a      	ldr	r2, [r3, #0]
2405b2a8:	4b3c      	ldr	r3, [pc, #240]	; (2405b39c <OSPI_ConfigCmd+0x2ec>)
2405b2aa:	4013      	ands	r3, r2
2405b2ac:	683a      	ldr	r2, [r7, #0]
2405b2ae:	68d1      	ldr	r1, [r2, #12]
2405b2b0:	683a      	ldr	r2, [r7, #0]
2405b2b2:	6952      	ldr	r2, [r2, #20]
2405b2b4:	4311      	orrs	r1, r2
2405b2b6:	683a      	ldr	r2, [r7, #0]
2405b2b8:	6912      	ldr	r2, [r2, #16]
2405b2ba:	4311      	orrs	r1, r2
2405b2bc:	683a      	ldr	r2, [r7, #0]
2405b2be:	6b92      	ldr	r2, [r2, #56]	; 0x38
2405b2c0:	4311      	orrs	r1, r2
2405b2c2:	683a      	ldr	r2, [r7, #0]
2405b2c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
2405b2c6:	430a      	orrs	r2, r1
2405b2c8:	431a      	orrs	r2, r3
2405b2ca:	69bb      	ldr	r3, [r7, #24]
2405b2cc:	601a      	str	r2, [r3, #0]
2405b2ce:	e01d      	b.n	2405b30c <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
2405b2d0:	69bb      	ldr	r3, [r7, #24]
2405b2d2:	681b      	ldr	r3, [r3, #0]
2405b2d4:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
2405b2d8:	683b      	ldr	r3, [r7, #0]
2405b2da:	68d9      	ldr	r1, [r3, #12]
2405b2dc:	683b      	ldr	r3, [r7, #0]
2405b2de:	695b      	ldr	r3, [r3, #20]
2405b2e0:	4319      	orrs	r1, r3
2405b2e2:	683b      	ldr	r3, [r7, #0]
2405b2e4:	691b      	ldr	r3, [r3, #16]
2405b2e6:	430b      	orrs	r3, r1
2405b2e8:	431a      	orrs	r2, r3
2405b2ea:	69bb      	ldr	r3, [r7, #24]
2405b2ec:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405b2ee:	687b      	ldr	r3, [r7, #4]
2405b2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b2f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405b2f6:	d109      	bne.n	2405b30c <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
2405b2f8:	683b      	ldr	r3, [r7, #0]
2405b2fa:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405b2fc:	2b08      	cmp	r3, #8
2405b2fe:	d105      	bne.n	2405b30c <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
2405b300:	69bb      	ldr	r3, [r7, #24]
2405b302:	681b      	ldr	r3, [r3, #0]
2405b304:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
2405b308:	69bb      	ldr	r3, [r7, #24]
2405b30a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
2405b30c:	683b      	ldr	r3, [r7, #0]
2405b30e:	689a      	ldr	r2, [r3, #8]
2405b310:	693b      	ldr	r3, [r7, #16]
2405b312:	601a      	str	r2, [r3, #0]
2405b314:	e037      	b.n	2405b386 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
2405b316:	683b      	ldr	r3, [r7, #0]
2405b318:	69db      	ldr	r3, [r3, #28]
2405b31a:	2b00      	cmp	r3, #0
2405b31c:	d02e      	beq.n	2405b37c <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405b31e:	683b      	ldr	r3, [r7, #0]
2405b320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405b322:	2b00      	cmp	r3, #0
2405b324:	d015      	beq.n	2405b352 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
2405b326:	69bb      	ldr	r3, [r7, #24]
2405b328:	681a      	ldr	r2, [r3, #0]
2405b32a:	4b1d      	ldr	r3, [pc, #116]	; (2405b3a0 <OSPI_ConfigCmd+0x2f0>)
2405b32c:	4013      	ands	r3, r2
2405b32e:	683a      	ldr	r2, [r7, #0]
2405b330:	69d1      	ldr	r1, [r2, #28]
2405b332:	683a      	ldr	r2, [r7, #0]
2405b334:	6a52      	ldr	r2, [r2, #36]	; 0x24
2405b336:	4311      	orrs	r1, r2
2405b338:	683a      	ldr	r2, [r7, #0]
2405b33a:	6a12      	ldr	r2, [r2, #32]
2405b33c:	4311      	orrs	r1, r2
2405b33e:	683a      	ldr	r2, [r7, #0]
2405b340:	6b92      	ldr	r2, [r2, #56]	; 0x38
2405b342:	4311      	orrs	r1, r2
2405b344:	683a      	ldr	r2, [r7, #0]
2405b346:	6c12      	ldr	r2, [r2, #64]	; 0x40
2405b348:	430a      	orrs	r2, r1
2405b34a:	431a      	orrs	r2, r3
2405b34c:	69bb      	ldr	r3, [r7, #24]
2405b34e:	601a      	str	r2, [r3, #0]
2405b350:	e00e      	b.n	2405b370 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
2405b352:	69bb      	ldr	r3, [r7, #24]
2405b354:	681b      	ldr	r3, [r3, #0]
2405b356:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
2405b35a:	683b      	ldr	r3, [r7, #0]
2405b35c:	69d9      	ldr	r1, [r3, #28]
2405b35e:	683b      	ldr	r3, [r7, #0]
2405b360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405b362:	4319      	orrs	r1, r3
2405b364:	683b      	ldr	r3, [r7, #0]
2405b366:	6a1b      	ldr	r3, [r3, #32]
2405b368:	430b      	orrs	r3, r1
2405b36a:	431a      	orrs	r2, r3
2405b36c:	69bb      	ldr	r3, [r7, #24]
2405b36e:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
2405b370:	687b      	ldr	r3, [r7, #4]
2405b372:	681b      	ldr	r3, [r3, #0]
2405b374:	683a      	ldr	r2, [r7, #0]
2405b376:	6992      	ldr	r2, [r2, #24]
2405b378:	649a      	str	r2, [r3, #72]	; 0x48
2405b37a:	e004      	b.n	2405b386 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
2405b37c:	2301      	movs	r3, #1
2405b37e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2405b380:	687b      	ldr	r3, [r7, #4]
2405b382:	2208      	movs	r2, #8
2405b384:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
2405b386:	7ffb      	ldrb	r3, [r7, #31]
}
2405b388:	4618      	mov	r0, r3
2405b38a:	3724      	adds	r7, #36	; 0x24
2405b38c:	46bd      	mov	sp, r7
2405b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
2405b392:	4770      	bx	lr
2405b394:	f0ffc0c0 	.word	0xf0ffc0c0
2405b398:	ffffc0c0 	.word	0xffffc0c0
2405b39c:	f0ffffc0 	.word	0xf0ffffc0
2405b3a0:	f0ffc0ff 	.word	0xf0ffc0ff

2405b3a4 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
2405b3a4:	b480      	push	{r7}
2405b3a6:	b087      	sub	sp, #28
2405b3a8:	af00      	add	r7, sp, #0
2405b3aa:	4603      	mov	r3, r0
2405b3ac:	6039      	str	r1, [r7, #0]
2405b3ae:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
2405b3b0:	2300      	movs	r3, #0
2405b3b2:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
2405b3b4:	2300      	movs	r3, #0
2405b3b6:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
2405b3b8:	79fb      	ldrb	r3, [r7, #7]
2405b3ba:	2b00      	cmp	r3, #0
2405b3bc:	d005      	beq.n	2405b3ca <OSPIM_GetConfig+0x26>
2405b3be:	79fb      	ldrb	r3, [r7, #7]
2405b3c0:	2b02      	cmp	r3, #2
2405b3c2:	d802      	bhi.n	2405b3ca <OSPIM_GetConfig+0x26>
2405b3c4:	683b      	ldr	r3, [r7, #0]
2405b3c6:	2b00      	cmp	r3, #0
2405b3c8:	d102      	bne.n	2405b3d0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
2405b3ca:	2301      	movs	r3, #1
2405b3cc:	75fb      	strb	r3, [r7, #23]
2405b3ce:	e098      	b.n	2405b502 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
2405b3d0:	683b      	ldr	r3, [r7, #0]
2405b3d2:	2200      	movs	r2, #0
2405b3d4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
2405b3d6:	683b      	ldr	r3, [r7, #0]
2405b3d8:	2200      	movs	r2, #0
2405b3da:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
2405b3dc:	683b      	ldr	r3, [r7, #0]
2405b3de:	2200      	movs	r2, #0
2405b3e0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
2405b3e2:	683b      	ldr	r3, [r7, #0]
2405b3e4:	2200      	movs	r2, #0
2405b3e6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
2405b3e8:	683b      	ldr	r3, [r7, #0]
2405b3ea:	2200      	movs	r2, #0
2405b3ec:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
2405b3ee:	79fb      	ldrb	r3, [r7, #7]
2405b3f0:	2b02      	cmp	r3, #2
2405b3f2:	d10b      	bne.n	2405b40c <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
2405b3f4:	4b46      	ldr	r3, [pc, #280]	; (2405b510 <OSPIM_GetConfig+0x16c>)
2405b3f6:	681b      	ldr	r3, [r3, #0]
2405b3f8:	f003 0301 	and.w	r3, r3, #1
2405b3fc:	2b00      	cmp	r3, #0
2405b3fe:	d102      	bne.n	2405b406 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
2405b400:	4b44      	ldr	r3, [pc, #272]	; (2405b514 <OSPIM_GetConfig+0x170>)
2405b402:	613b      	str	r3, [r7, #16]
2405b404:	e002      	b.n	2405b40c <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
2405b406:	f44f 7300 	mov.w	r3, #512	; 0x200
2405b40a:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
2405b40c:	2300      	movs	r3, #0
2405b40e:	60fb      	str	r3, [r7, #12]
2405b410:	e074      	b.n	2405b4fc <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
2405b412:	4a3f      	ldr	r2, [pc, #252]	; (2405b510 <OSPIM_GetConfig+0x16c>)
2405b414:	68fb      	ldr	r3, [r7, #12]
2405b416:	009b      	lsls	r3, r3, #2
2405b418:	4413      	add	r3, r2
2405b41a:	685b      	ldr	r3, [r3, #4]
2405b41c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
2405b41e:	68bb      	ldr	r3, [r7, #8]
2405b420:	f003 0301 	and.w	r3, r3, #1
2405b424:	2b00      	cmp	r3, #0
2405b426:	d00a      	beq.n	2405b43e <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
2405b428:	68ba      	ldr	r2, [r7, #8]
2405b42a:	693b      	ldr	r3, [r7, #16]
2405b42c:	4053      	eors	r3, r2
2405b42e:	f003 0302 	and.w	r3, r3, #2
2405b432:	2b00      	cmp	r3, #0
2405b434:	d103      	bne.n	2405b43e <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
2405b436:	68fb      	ldr	r3, [r7, #12]
2405b438:	1c5a      	adds	r2, r3, #1
2405b43a:	683b      	ldr	r3, [r7, #0]
2405b43c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
2405b43e:	68bb      	ldr	r3, [r7, #8]
2405b440:	f003 0310 	and.w	r3, r3, #16
2405b444:	2b00      	cmp	r3, #0
2405b446:	d00a      	beq.n	2405b45e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
2405b448:	68ba      	ldr	r2, [r7, #8]
2405b44a:	693b      	ldr	r3, [r7, #16]
2405b44c:	4053      	eors	r3, r2
2405b44e:	f003 0320 	and.w	r3, r3, #32
2405b452:	2b00      	cmp	r3, #0
2405b454:	d103      	bne.n	2405b45e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
2405b456:	68fb      	ldr	r3, [r7, #12]
2405b458:	1c5a      	adds	r2, r3, #1
2405b45a:	683b      	ldr	r3, [r7, #0]
2405b45c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
2405b45e:	68bb      	ldr	r3, [r7, #8]
2405b460:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405b464:	2b00      	cmp	r3, #0
2405b466:	d00a      	beq.n	2405b47e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
2405b468:	68ba      	ldr	r2, [r7, #8]
2405b46a:	693b      	ldr	r3, [r7, #16]
2405b46c:	4053      	eors	r3, r2
2405b46e:	f403 7300 	and.w	r3, r3, #512	; 0x200
2405b472:	2b00      	cmp	r3, #0
2405b474:	d103      	bne.n	2405b47e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
2405b476:	68fb      	ldr	r3, [r7, #12]
2405b478:	1c5a      	adds	r2, r3, #1
2405b47a:	683b      	ldr	r3, [r7, #0]
2405b47c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
2405b47e:	68bb      	ldr	r3, [r7, #8]
2405b480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405b484:	2b00      	cmp	r3, #0
2405b486:	d018      	beq.n	2405b4ba <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
2405b488:	68ba      	ldr	r2, [r7, #8]
2405b48a:	693b      	ldr	r3, [r7, #16]
2405b48c:	4053      	eors	r3, r2
2405b48e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2405b492:	2b00      	cmp	r3, #0
2405b494:	d111      	bne.n	2405b4ba <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
2405b496:	68bb      	ldr	r3, [r7, #8]
2405b498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405b49c:	2b00      	cmp	r3, #0
2405b49e:	d106      	bne.n	2405b4ae <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
2405b4a0:	68fb      	ldr	r3, [r7, #12]
2405b4a2:	3301      	adds	r3, #1
2405b4a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
2405b4a8:	683b      	ldr	r3, [r7, #0]
2405b4aa:	60da      	str	r2, [r3, #12]
2405b4ac:	e005      	b.n	2405b4ba <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
2405b4ae:	68fb      	ldr	r3, [r7, #12]
2405b4b0:	3301      	adds	r3, #1
2405b4b2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
2405b4b6:	683b      	ldr	r3, [r7, #0]
2405b4b8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
2405b4ba:	68bb      	ldr	r3, [r7, #8]
2405b4bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2405b4c0:	2b00      	cmp	r3, #0
2405b4c2:	d018      	beq.n	2405b4f6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
2405b4c4:	68ba      	ldr	r2, [r7, #8]
2405b4c6:	693b      	ldr	r3, [r7, #16]
2405b4c8:	4053      	eors	r3, r2
2405b4ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
2405b4ce:	2b00      	cmp	r3, #0
2405b4d0:	d111      	bne.n	2405b4f6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
2405b4d2:	68bb      	ldr	r3, [r7, #8]
2405b4d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405b4d8:	2b00      	cmp	r3, #0
2405b4da:	d106      	bne.n	2405b4ea <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
2405b4dc:	68fb      	ldr	r3, [r7, #12]
2405b4de:	3301      	adds	r3, #1
2405b4e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
2405b4e4:	683b      	ldr	r3, [r7, #0]
2405b4e6:	611a      	str	r2, [r3, #16]
2405b4e8:	e005      	b.n	2405b4f6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
2405b4ea:	68fb      	ldr	r3, [r7, #12]
2405b4ec:	3301      	adds	r3, #1
2405b4ee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
2405b4f2:	683b      	ldr	r3, [r7, #0]
2405b4f4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
2405b4f6:	68fb      	ldr	r3, [r7, #12]
2405b4f8:	3301      	adds	r3, #1
2405b4fa:	60fb      	str	r3, [r7, #12]
2405b4fc:	68fb      	ldr	r3, [r7, #12]
2405b4fe:	2b01      	cmp	r3, #1
2405b500:	d987      	bls.n	2405b412 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
2405b502:	7dfb      	ldrb	r3, [r7, #23]
}
2405b504:	4618      	mov	r0, r3
2405b506:	371c      	adds	r7, #28
2405b508:	46bd      	mov	sp, r7
2405b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405b50e:	4770      	bx	lr
2405b510:	5200b400 	.word	0x5200b400
2405b514:	04040222 	.word	0x04040222

2405b518 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
2405b518:	b480      	push	{r7}
2405b51a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
2405b51c:	4b05      	ldr	r3, [pc, #20]	; (2405b534 <HAL_PWR_EnableBkUpAccess+0x1c>)
2405b51e:	681b      	ldr	r3, [r3, #0]
2405b520:	4a04      	ldr	r2, [pc, #16]	; (2405b534 <HAL_PWR_EnableBkUpAccess+0x1c>)
2405b522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405b526:	6013      	str	r3, [r2, #0]
}
2405b528:	bf00      	nop
2405b52a:	46bd      	mov	sp, r7
2405b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
2405b530:	4770      	bx	lr
2405b532:	bf00      	nop
2405b534:	58024800 	.word	0x58024800

2405b538 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
2405b538:	b580      	push	{r7, lr}
2405b53a:	b084      	sub	sp, #16
2405b53c:	af00      	add	r7, sp, #0
2405b53e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
2405b540:	4b19      	ldr	r3, [pc, #100]	; (2405b5a8 <HAL_PWREx_ConfigSupply+0x70>)
2405b542:	68db      	ldr	r3, [r3, #12]
2405b544:	f003 0304 	and.w	r3, r3, #4
2405b548:	2b04      	cmp	r3, #4
2405b54a:	d00a      	beq.n	2405b562 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
2405b54c:	4b16      	ldr	r3, [pc, #88]	; (2405b5a8 <HAL_PWREx_ConfigSupply+0x70>)
2405b54e:	68db      	ldr	r3, [r3, #12]
2405b550:	f003 0307 	and.w	r3, r3, #7
2405b554:	687a      	ldr	r2, [r7, #4]
2405b556:	429a      	cmp	r2, r3
2405b558:	d001      	beq.n	2405b55e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
2405b55a:	2301      	movs	r3, #1
2405b55c:	e01f      	b.n	2405b59e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
2405b55e:	2300      	movs	r3, #0
2405b560:	e01d      	b.n	2405b59e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
2405b562:	4b11      	ldr	r3, [pc, #68]	; (2405b5a8 <HAL_PWREx_ConfigSupply+0x70>)
2405b564:	68db      	ldr	r3, [r3, #12]
2405b566:	f023 0207 	bic.w	r2, r3, #7
2405b56a:	490f      	ldr	r1, [pc, #60]	; (2405b5a8 <HAL_PWREx_ConfigSupply+0x70>)
2405b56c:	687b      	ldr	r3, [r7, #4]
2405b56e:	4313      	orrs	r3, r2
2405b570:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
2405b572:	f7f8 fc67 	bl	24053e44 <HAL_GetTick>
2405b576:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2405b578:	e009      	b.n	2405b58e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
2405b57a:	f7f8 fc63 	bl	24053e44 <HAL_GetTick>
2405b57e:	4602      	mov	r2, r0
2405b580:	68fb      	ldr	r3, [r7, #12]
2405b582:	1ad3      	subs	r3, r2, r3
2405b584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405b588:	d901      	bls.n	2405b58e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
2405b58a:	2301      	movs	r3, #1
2405b58c:	e007      	b.n	2405b59e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2405b58e:	4b06      	ldr	r3, [pc, #24]	; (2405b5a8 <HAL_PWREx_ConfigSupply+0x70>)
2405b590:	685b      	ldr	r3, [r3, #4]
2405b592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405b596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405b59a:	d1ee      	bne.n	2405b57a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
2405b59c:	2300      	movs	r3, #0
}
2405b59e:	4618      	mov	r0, r3
2405b5a0:	3710      	adds	r7, #16
2405b5a2:	46bd      	mov	sp, r7
2405b5a4:	bd80      	pop	{r7, pc}
2405b5a6:	bf00      	nop
2405b5a8:	58024800 	.word	0x58024800

2405b5ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2405b5ac:	b580      	push	{r7, lr}
2405b5ae:	b08c      	sub	sp, #48	; 0x30
2405b5b0:	af00      	add	r7, sp, #0
2405b5b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
2405b5b4:	687b      	ldr	r3, [r7, #4]
2405b5b6:	2b00      	cmp	r3, #0
2405b5b8:	d102      	bne.n	2405b5c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
2405b5ba:	2301      	movs	r3, #1
2405b5bc:	f000 bc1f 	b.w	2405bdfe <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2405b5c0:	687b      	ldr	r3, [r7, #4]
2405b5c2:	681b      	ldr	r3, [r3, #0]
2405b5c4:	f003 0301 	and.w	r3, r3, #1
2405b5c8:	2b00      	cmp	r3, #0
2405b5ca:	f000 80b3 	beq.w	2405b734 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2405b5ce:	4b95      	ldr	r3, [pc, #596]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b5d0:	691b      	ldr	r3, [r3, #16]
2405b5d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405b5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2405b5d8:	4b92      	ldr	r3, [pc, #584]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405b5dc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
2405b5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2405b5e0:	2b10      	cmp	r3, #16
2405b5e2:	d007      	beq.n	2405b5f4 <HAL_RCC_OscConfig+0x48>
2405b5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2405b5e6:	2b18      	cmp	r3, #24
2405b5e8:	d112      	bne.n	2405b610 <HAL_RCC_OscConfig+0x64>
2405b5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405b5ec:	f003 0303 	and.w	r3, r3, #3
2405b5f0:	2b02      	cmp	r3, #2
2405b5f2:	d10d      	bne.n	2405b610 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2405b5f4:	4b8b      	ldr	r3, [pc, #556]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b5f6:	681b      	ldr	r3, [r3, #0]
2405b5f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405b5fc:	2b00      	cmp	r3, #0
2405b5fe:	f000 8098 	beq.w	2405b732 <HAL_RCC_OscConfig+0x186>
2405b602:	687b      	ldr	r3, [r7, #4]
2405b604:	685b      	ldr	r3, [r3, #4]
2405b606:	2b00      	cmp	r3, #0
2405b608:	f040 8093 	bne.w	2405b732 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
2405b60c:	2301      	movs	r3, #1
2405b60e:	e3f6      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2405b610:	687b      	ldr	r3, [r7, #4]
2405b612:	685b      	ldr	r3, [r3, #4]
2405b614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405b618:	d106      	bne.n	2405b628 <HAL_RCC_OscConfig+0x7c>
2405b61a:	4b82      	ldr	r3, [pc, #520]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b61c:	681b      	ldr	r3, [r3, #0]
2405b61e:	4a81      	ldr	r2, [pc, #516]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405b624:	6013      	str	r3, [r2, #0]
2405b626:	e058      	b.n	2405b6da <HAL_RCC_OscConfig+0x12e>
2405b628:	687b      	ldr	r3, [r7, #4]
2405b62a:	685b      	ldr	r3, [r3, #4]
2405b62c:	2b00      	cmp	r3, #0
2405b62e:	d112      	bne.n	2405b656 <HAL_RCC_OscConfig+0xaa>
2405b630:	4b7c      	ldr	r3, [pc, #496]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b632:	681b      	ldr	r3, [r3, #0]
2405b634:	4a7b      	ldr	r2, [pc, #492]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2405b63a:	6013      	str	r3, [r2, #0]
2405b63c:	4b79      	ldr	r3, [pc, #484]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b63e:	681b      	ldr	r3, [r3, #0]
2405b640:	4a78      	ldr	r2, [pc, #480]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b642:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
2405b646:	6013      	str	r3, [r2, #0]
2405b648:	4b76      	ldr	r3, [pc, #472]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b64a:	681b      	ldr	r3, [r3, #0]
2405b64c:	4a75      	ldr	r2, [pc, #468]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b64e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2405b652:	6013      	str	r3, [r2, #0]
2405b654:	e041      	b.n	2405b6da <HAL_RCC_OscConfig+0x12e>
2405b656:	687b      	ldr	r3, [r7, #4]
2405b658:	685b      	ldr	r3, [r3, #4]
2405b65a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405b65e:	d112      	bne.n	2405b686 <HAL_RCC_OscConfig+0xda>
2405b660:	4b70      	ldr	r3, [pc, #448]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b662:	681b      	ldr	r3, [r3, #0]
2405b664:	4a6f      	ldr	r2, [pc, #444]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2405b66a:	6013      	str	r3, [r2, #0]
2405b66c:	4b6d      	ldr	r3, [pc, #436]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b66e:	681b      	ldr	r3, [r3, #0]
2405b670:	4a6c      	ldr	r2, [pc, #432]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b672:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
2405b676:	6013      	str	r3, [r2, #0]
2405b678:	4b6a      	ldr	r3, [pc, #424]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b67a:	681b      	ldr	r3, [r3, #0]
2405b67c:	4a69      	ldr	r2, [pc, #420]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b67e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405b682:	6013      	str	r3, [r2, #0]
2405b684:	e029      	b.n	2405b6da <HAL_RCC_OscConfig+0x12e>
2405b686:	687b      	ldr	r3, [r7, #4]
2405b688:	685b      	ldr	r3, [r3, #4]
2405b68a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
2405b68e:	d112      	bne.n	2405b6b6 <HAL_RCC_OscConfig+0x10a>
2405b690:	4b64      	ldr	r3, [pc, #400]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b692:	681b      	ldr	r3, [r3, #0]
2405b694:	4a63      	ldr	r2, [pc, #396]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2405b69a:	6013      	str	r3, [r2, #0]
2405b69c:	4b61      	ldr	r3, [pc, #388]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b69e:	681b      	ldr	r3, [r3, #0]
2405b6a0:	4a60      	ldr	r2, [pc, #384]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b6a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2405b6a6:	6013      	str	r3, [r2, #0]
2405b6a8:	4b5e      	ldr	r3, [pc, #376]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b6aa:	681b      	ldr	r3, [r3, #0]
2405b6ac:	4a5d      	ldr	r2, [pc, #372]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b6ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405b6b2:	6013      	str	r3, [r2, #0]
2405b6b4:	e011      	b.n	2405b6da <HAL_RCC_OscConfig+0x12e>
2405b6b6:	4b5b      	ldr	r3, [pc, #364]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b6b8:	681b      	ldr	r3, [r3, #0]
2405b6ba:	4a5a      	ldr	r2, [pc, #360]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b6bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2405b6c0:	6013      	str	r3, [r2, #0]
2405b6c2:	4b58      	ldr	r3, [pc, #352]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b6c4:	681b      	ldr	r3, [r3, #0]
2405b6c6:	4a57      	ldr	r2, [pc, #348]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b6c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2405b6cc:	6013      	str	r3, [r2, #0]
2405b6ce:	4b55      	ldr	r3, [pc, #340]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b6d0:	681b      	ldr	r3, [r3, #0]
2405b6d2:	4a54      	ldr	r2, [pc, #336]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b6d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
2405b6d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
2405b6da:	687b      	ldr	r3, [r7, #4]
2405b6dc:	685b      	ldr	r3, [r3, #4]
2405b6de:	2b00      	cmp	r3, #0
2405b6e0:	d013      	beq.n	2405b70a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b6e2:	f7f8 fbaf 	bl	24053e44 <HAL_GetTick>
2405b6e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2405b6e8:	e008      	b.n	2405b6fc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2405b6ea:	f7f8 fbab 	bl	24053e44 <HAL_GetTick>
2405b6ee:	4602      	mov	r2, r0
2405b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b6f2:	1ad3      	subs	r3, r2, r3
2405b6f4:	2b64      	cmp	r3, #100	; 0x64
2405b6f6:	d901      	bls.n	2405b6fc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
2405b6f8:	2303      	movs	r3, #3
2405b6fa:	e380      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2405b6fc:	4b49      	ldr	r3, [pc, #292]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b6fe:	681b      	ldr	r3, [r3, #0]
2405b700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405b704:	2b00      	cmp	r3, #0
2405b706:	d0f0      	beq.n	2405b6ea <HAL_RCC_OscConfig+0x13e>
2405b708:	e014      	b.n	2405b734 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b70a:	f7f8 fb9b 	bl	24053e44 <HAL_GetTick>
2405b70e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2405b710:	e008      	b.n	2405b724 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2405b712:	f7f8 fb97 	bl	24053e44 <HAL_GetTick>
2405b716:	4602      	mov	r2, r0
2405b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b71a:	1ad3      	subs	r3, r2, r3
2405b71c:	2b64      	cmp	r3, #100	; 0x64
2405b71e:	d901      	bls.n	2405b724 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
2405b720:	2303      	movs	r3, #3
2405b722:	e36c      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2405b724:	4b3f      	ldr	r3, [pc, #252]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b726:	681b      	ldr	r3, [r3, #0]
2405b728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405b72c:	2b00      	cmp	r3, #0
2405b72e:	d1f0      	bne.n	2405b712 <HAL_RCC_OscConfig+0x166>
2405b730:	e000      	b.n	2405b734 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2405b732:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2405b734:	687b      	ldr	r3, [r7, #4]
2405b736:	681b      	ldr	r3, [r3, #0]
2405b738:	f003 0302 	and.w	r3, r3, #2
2405b73c:	2b00      	cmp	r3, #0
2405b73e:	f000 808c 	beq.w	2405b85a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2405b742:	4b38      	ldr	r3, [pc, #224]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b744:	691b      	ldr	r3, [r3, #16]
2405b746:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405b74a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2405b74c:	4b35      	ldr	r3, [pc, #212]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405b750:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
2405b752:	6a3b      	ldr	r3, [r7, #32]
2405b754:	2b00      	cmp	r3, #0
2405b756:	d007      	beq.n	2405b768 <HAL_RCC_OscConfig+0x1bc>
2405b758:	6a3b      	ldr	r3, [r7, #32]
2405b75a:	2b18      	cmp	r3, #24
2405b75c:	d137      	bne.n	2405b7ce <HAL_RCC_OscConfig+0x222>
2405b75e:	69fb      	ldr	r3, [r7, #28]
2405b760:	f003 0303 	and.w	r3, r3, #3
2405b764:	2b00      	cmp	r3, #0
2405b766:	d132      	bne.n	2405b7ce <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2405b768:	4b2e      	ldr	r3, [pc, #184]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b76a:	681b      	ldr	r3, [r3, #0]
2405b76c:	f003 0304 	and.w	r3, r3, #4
2405b770:	2b00      	cmp	r3, #0
2405b772:	d005      	beq.n	2405b780 <HAL_RCC_OscConfig+0x1d4>
2405b774:	687b      	ldr	r3, [r7, #4]
2405b776:	68db      	ldr	r3, [r3, #12]
2405b778:	2b00      	cmp	r3, #0
2405b77a:	d101      	bne.n	2405b780 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
2405b77c:	2301      	movs	r3, #1
2405b77e:	e33e      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2405b780:	4b28      	ldr	r3, [pc, #160]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b782:	681b      	ldr	r3, [r3, #0]
2405b784:	f023 0219 	bic.w	r2, r3, #25
2405b788:	687b      	ldr	r3, [r7, #4]
2405b78a:	68db      	ldr	r3, [r3, #12]
2405b78c:	4925      	ldr	r1, [pc, #148]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b78e:	4313      	orrs	r3, r2
2405b790:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b792:	f7f8 fb57 	bl	24053e44 <HAL_GetTick>
2405b796:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405b798:	e008      	b.n	2405b7ac <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2405b79a:	f7f8 fb53 	bl	24053e44 <HAL_GetTick>
2405b79e:	4602      	mov	r2, r0
2405b7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b7a2:	1ad3      	subs	r3, r2, r3
2405b7a4:	2b02      	cmp	r3, #2
2405b7a6:	d901      	bls.n	2405b7ac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
2405b7a8:	2303      	movs	r3, #3
2405b7aa:	e328      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405b7ac:	4b1d      	ldr	r3, [pc, #116]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b7ae:	681b      	ldr	r3, [r3, #0]
2405b7b0:	f003 0304 	and.w	r3, r3, #4
2405b7b4:	2b00      	cmp	r3, #0
2405b7b6:	d0f0      	beq.n	2405b79a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2405b7b8:	4b1a      	ldr	r3, [pc, #104]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b7ba:	685b      	ldr	r3, [r3, #4]
2405b7bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
2405b7c0:	687b      	ldr	r3, [r7, #4]
2405b7c2:	691b      	ldr	r3, [r3, #16]
2405b7c4:	061b      	lsls	r3, r3, #24
2405b7c6:	4917      	ldr	r1, [pc, #92]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b7c8:	4313      	orrs	r3, r2
2405b7ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2405b7cc:	e045      	b.n	2405b85a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
2405b7ce:	687b      	ldr	r3, [r7, #4]
2405b7d0:	68db      	ldr	r3, [r3, #12]
2405b7d2:	2b00      	cmp	r3, #0
2405b7d4:	d028      	beq.n	2405b828 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2405b7d6:	4b13      	ldr	r3, [pc, #76]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b7d8:	681b      	ldr	r3, [r3, #0]
2405b7da:	f023 0219 	bic.w	r2, r3, #25
2405b7de:	687b      	ldr	r3, [r7, #4]
2405b7e0:	68db      	ldr	r3, [r3, #12]
2405b7e2:	4910      	ldr	r1, [pc, #64]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b7e4:	4313      	orrs	r3, r2
2405b7e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b7e8:	f7f8 fb2c 	bl	24053e44 <HAL_GetTick>
2405b7ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405b7ee:	e008      	b.n	2405b802 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2405b7f0:	f7f8 fb28 	bl	24053e44 <HAL_GetTick>
2405b7f4:	4602      	mov	r2, r0
2405b7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b7f8:	1ad3      	subs	r3, r2, r3
2405b7fa:	2b02      	cmp	r3, #2
2405b7fc:	d901      	bls.n	2405b802 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
2405b7fe:	2303      	movs	r3, #3
2405b800:	e2fd      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405b802:	4b08      	ldr	r3, [pc, #32]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b804:	681b      	ldr	r3, [r3, #0]
2405b806:	f003 0304 	and.w	r3, r3, #4
2405b80a:	2b00      	cmp	r3, #0
2405b80c:	d0f0      	beq.n	2405b7f0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2405b80e:	4b05      	ldr	r3, [pc, #20]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b810:	685b      	ldr	r3, [r3, #4]
2405b812:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
2405b816:	687b      	ldr	r3, [r7, #4]
2405b818:	691b      	ldr	r3, [r3, #16]
2405b81a:	061b      	lsls	r3, r3, #24
2405b81c:	4901      	ldr	r1, [pc, #4]	; (2405b824 <HAL_RCC_OscConfig+0x278>)
2405b81e:	4313      	orrs	r3, r2
2405b820:	604b      	str	r3, [r1, #4]
2405b822:	e01a      	b.n	2405b85a <HAL_RCC_OscConfig+0x2ae>
2405b824:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2405b828:	4b97      	ldr	r3, [pc, #604]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b82a:	681b      	ldr	r3, [r3, #0]
2405b82c:	4a96      	ldr	r2, [pc, #600]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b82e:	f023 0301 	bic.w	r3, r3, #1
2405b832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b834:	f7f8 fb06 	bl	24053e44 <HAL_GetTick>
2405b838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
2405b83a:	e008      	b.n	2405b84e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2405b83c:	f7f8 fb02 	bl	24053e44 <HAL_GetTick>
2405b840:	4602      	mov	r2, r0
2405b842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b844:	1ad3      	subs	r3, r2, r3
2405b846:	2b02      	cmp	r3, #2
2405b848:	d901      	bls.n	2405b84e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
2405b84a:	2303      	movs	r3, #3
2405b84c:	e2d7      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
2405b84e:	4b8e      	ldr	r3, [pc, #568]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b850:	681b      	ldr	r3, [r3, #0]
2405b852:	f003 0304 	and.w	r3, r3, #4
2405b856:	2b00      	cmp	r3, #0
2405b858:	d1f0      	bne.n	2405b83c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
2405b85a:	687b      	ldr	r3, [r7, #4]
2405b85c:	681b      	ldr	r3, [r3, #0]
2405b85e:	f003 0310 	and.w	r3, r3, #16
2405b862:	2b00      	cmp	r3, #0
2405b864:	d06a      	beq.n	2405b93c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2405b866:	4b88      	ldr	r3, [pc, #544]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b868:	691b      	ldr	r3, [r3, #16]
2405b86a:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405b86e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2405b870:	4b85      	ldr	r3, [pc, #532]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405b874:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
2405b876:	69bb      	ldr	r3, [r7, #24]
2405b878:	2b08      	cmp	r3, #8
2405b87a:	d007      	beq.n	2405b88c <HAL_RCC_OscConfig+0x2e0>
2405b87c:	69bb      	ldr	r3, [r7, #24]
2405b87e:	2b18      	cmp	r3, #24
2405b880:	d11b      	bne.n	2405b8ba <HAL_RCC_OscConfig+0x30e>
2405b882:	697b      	ldr	r3, [r7, #20]
2405b884:	f003 0303 	and.w	r3, r3, #3
2405b888:	2b01      	cmp	r3, #1
2405b88a:	d116      	bne.n	2405b8ba <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
2405b88c:	4b7e      	ldr	r3, [pc, #504]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b88e:	681b      	ldr	r3, [r3, #0]
2405b890:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405b894:	2b00      	cmp	r3, #0
2405b896:	d005      	beq.n	2405b8a4 <HAL_RCC_OscConfig+0x2f8>
2405b898:	687b      	ldr	r3, [r7, #4]
2405b89a:	69db      	ldr	r3, [r3, #28]
2405b89c:	2b80      	cmp	r3, #128	; 0x80
2405b89e:	d001      	beq.n	2405b8a4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
2405b8a0:	2301      	movs	r3, #1
2405b8a2:	e2ac      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2405b8a4:	4b78      	ldr	r3, [pc, #480]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b8a6:	68db      	ldr	r3, [r3, #12]
2405b8a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
2405b8ac:	687b      	ldr	r3, [r7, #4]
2405b8ae:	6a1b      	ldr	r3, [r3, #32]
2405b8b0:	061b      	lsls	r3, r3, #24
2405b8b2:	4975      	ldr	r1, [pc, #468]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b8b4:	4313      	orrs	r3, r2
2405b8b6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
2405b8b8:	e040      	b.n	2405b93c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
2405b8ba:	687b      	ldr	r3, [r7, #4]
2405b8bc:	69db      	ldr	r3, [r3, #28]
2405b8be:	2b00      	cmp	r3, #0
2405b8c0:	d023      	beq.n	2405b90a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
2405b8c2:	4b71      	ldr	r3, [pc, #452]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b8c4:	681b      	ldr	r3, [r3, #0]
2405b8c6:	4a70      	ldr	r2, [pc, #448]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2405b8cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b8ce:	f7f8 fab9 	bl	24053e44 <HAL_GetTick>
2405b8d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2405b8d4:	e008      	b.n	2405b8e8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2405b8d6:	f7f8 fab5 	bl	24053e44 <HAL_GetTick>
2405b8da:	4602      	mov	r2, r0
2405b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b8de:	1ad3      	subs	r3, r2, r3
2405b8e0:	2b02      	cmp	r3, #2
2405b8e2:	d901      	bls.n	2405b8e8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
2405b8e4:	2303      	movs	r3, #3
2405b8e6:	e28a      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2405b8e8:	4b67      	ldr	r3, [pc, #412]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b8ea:	681b      	ldr	r3, [r3, #0]
2405b8ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405b8f0:	2b00      	cmp	r3, #0
2405b8f2:	d0f0      	beq.n	2405b8d6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2405b8f4:	4b64      	ldr	r3, [pc, #400]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b8f6:	68db      	ldr	r3, [r3, #12]
2405b8f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
2405b8fc:	687b      	ldr	r3, [r7, #4]
2405b8fe:	6a1b      	ldr	r3, [r3, #32]
2405b900:	061b      	lsls	r3, r3, #24
2405b902:	4961      	ldr	r1, [pc, #388]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b904:	4313      	orrs	r3, r2
2405b906:	60cb      	str	r3, [r1, #12]
2405b908:	e018      	b.n	2405b93c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
2405b90a:	4b5f      	ldr	r3, [pc, #380]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b90c:	681b      	ldr	r3, [r3, #0]
2405b90e:	4a5e      	ldr	r2, [pc, #376]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405b914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b916:	f7f8 fa95 	bl	24053e44 <HAL_GetTick>
2405b91a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
2405b91c:	e008      	b.n	2405b930 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2405b91e:	f7f8 fa91 	bl	24053e44 <HAL_GetTick>
2405b922:	4602      	mov	r2, r0
2405b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b926:	1ad3      	subs	r3, r2, r3
2405b928:	2b02      	cmp	r3, #2
2405b92a:	d901      	bls.n	2405b930 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
2405b92c:	2303      	movs	r3, #3
2405b92e:	e266      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
2405b930:	4b55      	ldr	r3, [pc, #340]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b932:	681b      	ldr	r3, [r3, #0]
2405b934:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405b938:	2b00      	cmp	r3, #0
2405b93a:	d1f0      	bne.n	2405b91e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2405b93c:	687b      	ldr	r3, [r7, #4]
2405b93e:	681b      	ldr	r3, [r3, #0]
2405b940:	f003 0308 	and.w	r3, r3, #8
2405b944:	2b00      	cmp	r3, #0
2405b946:	d036      	beq.n	2405b9b6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
2405b948:	687b      	ldr	r3, [r7, #4]
2405b94a:	695b      	ldr	r3, [r3, #20]
2405b94c:	2b00      	cmp	r3, #0
2405b94e:	d019      	beq.n	2405b984 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2405b950:	4b4d      	ldr	r3, [pc, #308]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405b954:	4a4c      	ldr	r2, [pc, #304]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b956:	f043 0301 	orr.w	r3, r3, #1
2405b95a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405b95c:	f7f8 fa72 	bl	24053e44 <HAL_GetTick>
2405b960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2405b962:	e008      	b.n	2405b976 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2405b964:	f7f8 fa6e 	bl	24053e44 <HAL_GetTick>
2405b968:	4602      	mov	r2, r0
2405b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b96c:	1ad3      	subs	r3, r2, r3
2405b96e:	2b02      	cmp	r3, #2
2405b970:	d901      	bls.n	2405b976 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
2405b972:	2303      	movs	r3, #3
2405b974:	e243      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2405b976:	4b44      	ldr	r3, [pc, #272]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405b97a:	f003 0302 	and.w	r3, r3, #2
2405b97e:	2b00      	cmp	r3, #0
2405b980:	d0f0      	beq.n	2405b964 <HAL_RCC_OscConfig+0x3b8>
2405b982:	e018      	b.n	2405b9b6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2405b984:	4b40      	ldr	r3, [pc, #256]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405b988:	4a3f      	ldr	r2, [pc, #252]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b98a:	f023 0301 	bic.w	r3, r3, #1
2405b98e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405b990:	f7f8 fa58 	bl	24053e44 <HAL_GetTick>
2405b994:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2405b996:	e008      	b.n	2405b9aa <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2405b998:	f7f8 fa54 	bl	24053e44 <HAL_GetTick>
2405b99c:	4602      	mov	r2, r0
2405b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b9a0:	1ad3      	subs	r3, r2, r3
2405b9a2:	2b02      	cmp	r3, #2
2405b9a4:	d901      	bls.n	2405b9aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
2405b9a6:	2303      	movs	r3, #3
2405b9a8:	e229      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2405b9aa:	4b37      	ldr	r3, [pc, #220]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b9ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405b9ae:	f003 0302 	and.w	r3, r3, #2
2405b9b2:	2b00      	cmp	r3, #0
2405b9b4:	d1f0      	bne.n	2405b998 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
2405b9b6:	687b      	ldr	r3, [r7, #4]
2405b9b8:	681b      	ldr	r3, [r3, #0]
2405b9ba:	f003 0320 	and.w	r3, r3, #32
2405b9be:	2b00      	cmp	r3, #0
2405b9c0:	d036      	beq.n	2405ba30 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
2405b9c2:	687b      	ldr	r3, [r7, #4]
2405b9c4:	699b      	ldr	r3, [r3, #24]
2405b9c6:	2b00      	cmp	r3, #0
2405b9c8:	d019      	beq.n	2405b9fe <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
2405b9ca:	4b2f      	ldr	r3, [pc, #188]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b9cc:	681b      	ldr	r3, [r3, #0]
2405b9ce:	4a2e      	ldr	r2, [pc, #184]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b9d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2405b9d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2405b9d6:	f7f8 fa35 	bl	24053e44 <HAL_GetTick>
2405b9da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2405b9dc:	e008      	b.n	2405b9f0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
2405b9de:	f7f8 fa31 	bl	24053e44 <HAL_GetTick>
2405b9e2:	4602      	mov	r2, r0
2405b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b9e6:	1ad3      	subs	r3, r2, r3
2405b9e8:	2b02      	cmp	r3, #2
2405b9ea:	d901      	bls.n	2405b9f0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
2405b9ec:	2303      	movs	r3, #3
2405b9ee:	e206      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2405b9f0:	4b25      	ldr	r3, [pc, #148]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405b9f2:	681b      	ldr	r3, [r3, #0]
2405b9f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405b9f8:	2b00      	cmp	r3, #0
2405b9fa:	d0f0      	beq.n	2405b9de <HAL_RCC_OscConfig+0x432>
2405b9fc:	e018      	b.n	2405ba30 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
2405b9fe:	4b22      	ldr	r3, [pc, #136]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405ba00:	681b      	ldr	r3, [r3, #0]
2405ba02:	4a21      	ldr	r2, [pc, #132]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405ba04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2405ba08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2405ba0a:	f7f8 fa1b 	bl	24053e44 <HAL_GetTick>
2405ba0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2405ba10:	e008      	b.n	2405ba24 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
2405ba12:	f7f8 fa17 	bl	24053e44 <HAL_GetTick>
2405ba16:	4602      	mov	r2, r0
2405ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405ba1a:	1ad3      	subs	r3, r2, r3
2405ba1c:	2b02      	cmp	r3, #2
2405ba1e:	d901      	bls.n	2405ba24 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
2405ba20:	2303      	movs	r3, #3
2405ba22:	e1ec      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2405ba24:	4b18      	ldr	r3, [pc, #96]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405ba26:	681b      	ldr	r3, [r3, #0]
2405ba28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405ba2c:	2b00      	cmp	r3, #0
2405ba2e:	d1f0      	bne.n	2405ba12 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2405ba30:	687b      	ldr	r3, [r7, #4]
2405ba32:	681b      	ldr	r3, [r3, #0]
2405ba34:	f003 0304 	and.w	r3, r3, #4
2405ba38:	2b00      	cmp	r3, #0
2405ba3a:	f000 80af 	beq.w	2405bb9c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
2405ba3e:	4b13      	ldr	r3, [pc, #76]	; (2405ba8c <HAL_RCC_OscConfig+0x4e0>)
2405ba40:	681b      	ldr	r3, [r3, #0]
2405ba42:	4a12      	ldr	r2, [pc, #72]	; (2405ba8c <HAL_RCC_OscConfig+0x4e0>)
2405ba44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405ba48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
2405ba4a:	f7f8 f9fb 	bl	24053e44 <HAL_GetTick>
2405ba4e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405ba50:	e008      	b.n	2405ba64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2405ba52:	f7f8 f9f7 	bl	24053e44 <HAL_GetTick>
2405ba56:	4602      	mov	r2, r0
2405ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405ba5a:	1ad3      	subs	r3, r2, r3
2405ba5c:	2b64      	cmp	r3, #100	; 0x64
2405ba5e:	d901      	bls.n	2405ba64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
2405ba60:	2303      	movs	r3, #3
2405ba62:	e1cc      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405ba64:	4b09      	ldr	r3, [pc, #36]	; (2405ba8c <HAL_RCC_OscConfig+0x4e0>)
2405ba66:	681b      	ldr	r3, [r3, #0]
2405ba68:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405ba6c:	2b00      	cmp	r3, #0
2405ba6e:	d0f0      	beq.n	2405ba52 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2405ba70:	687b      	ldr	r3, [r7, #4]
2405ba72:	689b      	ldr	r3, [r3, #8]
2405ba74:	2b01      	cmp	r3, #1
2405ba76:	d10b      	bne.n	2405ba90 <HAL_RCC_OscConfig+0x4e4>
2405ba78:	4b03      	ldr	r3, [pc, #12]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405ba7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ba7c:	4a02      	ldr	r2, [pc, #8]	; (2405ba88 <HAL_RCC_OscConfig+0x4dc>)
2405ba7e:	f043 0301 	orr.w	r3, r3, #1
2405ba82:	6713      	str	r3, [r2, #112]	; 0x70
2405ba84:	e05b      	b.n	2405bb3e <HAL_RCC_OscConfig+0x592>
2405ba86:	bf00      	nop
2405ba88:	58024400 	.word	0x58024400
2405ba8c:	58024800 	.word	0x58024800
2405ba90:	687b      	ldr	r3, [r7, #4]
2405ba92:	689b      	ldr	r3, [r3, #8]
2405ba94:	2b00      	cmp	r3, #0
2405ba96:	d112      	bne.n	2405babe <HAL_RCC_OscConfig+0x512>
2405ba98:	4b9d      	ldr	r3, [pc, #628]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405ba9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ba9c:	4a9c      	ldr	r2, [pc, #624]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405ba9e:	f023 0301 	bic.w	r3, r3, #1
2405baa2:	6713      	str	r3, [r2, #112]	; 0x70
2405baa4:	4b9a      	ldr	r3, [pc, #616]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405baa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405baa8:	4a99      	ldr	r2, [pc, #612]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405baaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405baae:	6713      	str	r3, [r2, #112]	; 0x70
2405bab0:	4b97      	ldr	r3, [pc, #604]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bab4:	4a96      	ldr	r2, [pc, #600]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bab6:	f023 0304 	bic.w	r3, r3, #4
2405baba:	6713      	str	r3, [r2, #112]	; 0x70
2405babc:	e03f      	b.n	2405bb3e <HAL_RCC_OscConfig+0x592>
2405babe:	687b      	ldr	r3, [r7, #4]
2405bac0:	689b      	ldr	r3, [r3, #8]
2405bac2:	2b05      	cmp	r3, #5
2405bac4:	d112      	bne.n	2405baec <HAL_RCC_OscConfig+0x540>
2405bac6:	4b92      	ldr	r3, [pc, #584]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405baca:	4a91      	ldr	r2, [pc, #580]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bacc:	f043 0304 	orr.w	r3, r3, #4
2405bad0:	6713      	str	r3, [r2, #112]	; 0x70
2405bad2:	4b8f      	ldr	r3, [pc, #572]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bad6:	4a8e      	ldr	r2, [pc, #568]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405badc:	6713      	str	r3, [r2, #112]	; 0x70
2405bade:	4b8c      	ldr	r3, [pc, #560]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bae2:	4a8b      	ldr	r2, [pc, #556]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bae4:	f043 0301 	orr.w	r3, r3, #1
2405bae8:	6713      	str	r3, [r2, #112]	; 0x70
2405baea:	e028      	b.n	2405bb3e <HAL_RCC_OscConfig+0x592>
2405baec:	687b      	ldr	r3, [r7, #4]
2405baee:	689b      	ldr	r3, [r3, #8]
2405baf0:	2b85      	cmp	r3, #133	; 0x85
2405baf2:	d112      	bne.n	2405bb1a <HAL_RCC_OscConfig+0x56e>
2405baf4:	4b86      	ldr	r3, [pc, #536]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405baf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405baf8:	4a85      	ldr	r2, [pc, #532]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bafa:	f043 0304 	orr.w	r3, r3, #4
2405bafe:	6713      	str	r3, [r2, #112]	; 0x70
2405bb00:	4b83      	ldr	r3, [pc, #524]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bb02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bb04:	4a82      	ldr	r2, [pc, #520]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bb06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2405bb0a:	6713      	str	r3, [r2, #112]	; 0x70
2405bb0c:	4b80      	ldr	r3, [pc, #512]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bb0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bb10:	4a7f      	ldr	r2, [pc, #508]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bb12:	f043 0301 	orr.w	r3, r3, #1
2405bb16:	6713      	str	r3, [r2, #112]	; 0x70
2405bb18:	e011      	b.n	2405bb3e <HAL_RCC_OscConfig+0x592>
2405bb1a:	4b7d      	ldr	r3, [pc, #500]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bb1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bb1e:	4a7c      	ldr	r2, [pc, #496]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bb20:	f023 0301 	bic.w	r3, r3, #1
2405bb24:	6713      	str	r3, [r2, #112]	; 0x70
2405bb26:	4b7a      	ldr	r3, [pc, #488]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bb28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bb2a:	4a79      	ldr	r2, [pc, #484]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bb2c:	f023 0304 	bic.w	r3, r3, #4
2405bb30:	6713      	str	r3, [r2, #112]	; 0x70
2405bb32:	4b77      	ldr	r3, [pc, #476]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bb34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bb36:	4a76      	ldr	r2, [pc, #472]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bb38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405bb3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2405bb3e:	687b      	ldr	r3, [r7, #4]
2405bb40:	689b      	ldr	r3, [r3, #8]
2405bb42:	2b00      	cmp	r3, #0
2405bb44:	d015      	beq.n	2405bb72 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405bb46:	f7f8 f97d 	bl	24053e44 <HAL_GetTick>
2405bb4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405bb4c:	e00a      	b.n	2405bb64 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405bb4e:	f7f8 f979 	bl	24053e44 <HAL_GetTick>
2405bb52:	4602      	mov	r2, r0
2405bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405bb56:	1ad3      	subs	r3, r2, r3
2405bb58:	f241 3288 	movw	r2, #5000	; 0x1388
2405bb5c:	4293      	cmp	r3, r2
2405bb5e:	d901      	bls.n	2405bb64 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
2405bb60:	2303      	movs	r3, #3
2405bb62:	e14c      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405bb64:	4b6a      	ldr	r3, [pc, #424]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bb66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bb68:	f003 0302 	and.w	r3, r3, #2
2405bb6c:	2b00      	cmp	r3, #0
2405bb6e:	d0ee      	beq.n	2405bb4e <HAL_RCC_OscConfig+0x5a2>
2405bb70:	e014      	b.n	2405bb9c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405bb72:	f7f8 f967 	bl	24053e44 <HAL_GetTick>
2405bb76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2405bb78:	e00a      	b.n	2405bb90 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405bb7a:	f7f8 f963 	bl	24053e44 <HAL_GetTick>
2405bb7e:	4602      	mov	r2, r0
2405bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405bb82:	1ad3      	subs	r3, r2, r3
2405bb84:	f241 3288 	movw	r2, #5000	; 0x1388
2405bb88:	4293      	cmp	r3, r2
2405bb8a:	d901      	bls.n	2405bb90 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
2405bb8c:	2303      	movs	r3, #3
2405bb8e:	e136      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2405bb90:	4b5f      	ldr	r3, [pc, #380]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bb92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bb94:	f003 0302 	and.w	r3, r3, #2
2405bb98:	2b00      	cmp	r3, #0
2405bb9a:	d1ee      	bne.n	2405bb7a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2405bb9c:	687b      	ldr	r3, [r7, #4]
2405bb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405bba0:	2b00      	cmp	r3, #0
2405bba2:	f000 812b 	beq.w	2405bdfc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
2405bba6:	4b5a      	ldr	r3, [pc, #360]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bba8:	691b      	ldr	r3, [r3, #16]
2405bbaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405bbae:	2b18      	cmp	r3, #24
2405bbb0:	f000 80bb 	beq.w	2405bd2a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2405bbb4:	687b      	ldr	r3, [r7, #4]
2405bbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405bbb8:	2b02      	cmp	r3, #2
2405bbba:	f040 8095 	bne.w	2405bce8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2405bbbe:	4b54      	ldr	r3, [pc, #336]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bbc0:	681b      	ldr	r3, [r3, #0]
2405bbc2:	4a53      	ldr	r2, [pc, #332]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bbc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2405bbc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405bbca:	f7f8 f93b 	bl	24053e44 <HAL_GetTick>
2405bbce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405bbd0:	e008      	b.n	2405bbe4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2405bbd2:	f7f8 f937 	bl	24053e44 <HAL_GetTick>
2405bbd6:	4602      	mov	r2, r0
2405bbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405bbda:	1ad3      	subs	r3, r2, r3
2405bbdc:	2b02      	cmp	r3, #2
2405bbde:	d901      	bls.n	2405bbe4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
2405bbe0:	2303      	movs	r3, #3
2405bbe2:	e10c      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405bbe4:	4b4a      	ldr	r3, [pc, #296]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bbe6:	681b      	ldr	r3, [r3, #0]
2405bbe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bbec:	2b00      	cmp	r3, #0
2405bbee:	d1f0      	bne.n	2405bbd2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
2405bbf0:	4b47      	ldr	r3, [pc, #284]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bbf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2405bbf4:	4b47      	ldr	r3, [pc, #284]	; (2405bd14 <HAL_RCC_OscConfig+0x768>)
2405bbf6:	4013      	ands	r3, r2
2405bbf8:	687a      	ldr	r2, [r7, #4]
2405bbfa:	6a91      	ldr	r1, [r2, #40]	; 0x28
2405bbfc:	687a      	ldr	r2, [r7, #4]
2405bbfe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
2405bc00:	0112      	lsls	r2, r2, #4
2405bc02:	430a      	orrs	r2, r1
2405bc04:	4942      	ldr	r1, [pc, #264]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc06:	4313      	orrs	r3, r2
2405bc08:	628b      	str	r3, [r1, #40]	; 0x28
2405bc0a:	687b      	ldr	r3, [r7, #4]
2405bc0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405bc0e:	3b01      	subs	r3, #1
2405bc10:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405bc14:	687b      	ldr	r3, [r7, #4]
2405bc16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405bc18:	3b01      	subs	r3, #1
2405bc1a:	025b      	lsls	r3, r3, #9
2405bc1c:	b29b      	uxth	r3, r3
2405bc1e:	431a      	orrs	r2, r3
2405bc20:	687b      	ldr	r3, [r7, #4]
2405bc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405bc24:	3b01      	subs	r3, #1
2405bc26:	041b      	lsls	r3, r3, #16
2405bc28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2405bc2c:	431a      	orrs	r2, r3
2405bc2e:	687b      	ldr	r3, [r7, #4]
2405bc30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405bc32:	3b01      	subs	r3, #1
2405bc34:	061b      	lsls	r3, r3, #24
2405bc36:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2405bc3a:	4935      	ldr	r1, [pc, #212]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc3c:	4313      	orrs	r3, r2
2405bc3e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
2405bc40:	4b33      	ldr	r3, [pc, #204]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bc44:	4a32      	ldr	r2, [pc, #200]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc46:	f023 0301 	bic.w	r3, r3, #1
2405bc4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2405bc4c:	4b30      	ldr	r3, [pc, #192]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405bc50:	4b31      	ldr	r3, [pc, #196]	; (2405bd18 <HAL_RCC_OscConfig+0x76c>)
2405bc52:	4013      	ands	r3, r2
2405bc54:	687a      	ldr	r2, [r7, #4]
2405bc56:	6c92      	ldr	r2, [r2, #72]	; 0x48
2405bc58:	00d2      	lsls	r2, r2, #3
2405bc5a:	492d      	ldr	r1, [pc, #180]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc5c:	4313      	orrs	r3, r2
2405bc5e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
2405bc60:	4b2b      	ldr	r3, [pc, #172]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bc64:	f023 020c 	bic.w	r2, r3, #12
2405bc68:	687b      	ldr	r3, [r7, #4]
2405bc6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405bc6c:	4928      	ldr	r1, [pc, #160]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc6e:	4313      	orrs	r3, r2
2405bc70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
2405bc72:	4b27      	ldr	r3, [pc, #156]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bc76:	f023 0202 	bic.w	r2, r3, #2
2405bc7a:	687b      	ldr	r3, [r7, #4]
2405bc7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405bc7e:	4924      	ldr	r1, [pc, #144]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc80:	4313      	orrs	r3, r2
2405bc82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
2405bc84:	4b22      	ldr	r3, [pc, #136]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bc88:	4a21      	ldr	r2, [pc, #132]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405bc8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405bc90:	4b1f      	ldr	r3, [pc, #124]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bc94:	4a1e      	ldr	r2, [pc, #120]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405bc9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
2405bc9c:	4b1c      	ldr	r3, [pc, #112]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bca0:	4a1b      	ldr	r2, [pc, #108]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bca2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2405bca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
2405bca8:	4b19      	ldr	r3, [pc, #100]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bcac:	4a18      	ldr	r2, [pc, #96]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bcae:	f043 0301 	orr.w	r3, r3, #1
2405bcb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2405bcb4:	4b16      	ldr	r3, [pc, #88]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bcb6:	681b      	ldr	r3, [r3, #0]
2405bcb8:	4a15      	ldr	r2, [pc, #84]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bcba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2405bcbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405bcc0:	f7f8 f8c0 	bl	24053e44 <HAL_GetTick>
2405bcc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405bcc6:	e008      	b.n	2405bcda <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2405bcc8:	f7f8 f8bc 	bl	24053e44 <HAL_GetTick>
2405bccc:	4602      	mov	r2, r0
2405bcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405bcd0:	1ad3      	subs	r3, r2, r3
2405bcd2:	2b02      	cmp	r3, #2
2405bcd4:	d901      	bls.n	2405bcda <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
2405bcd6:	2303      	movs	r3, #3
2405bcd8:	e091      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405bcda:	4b0d      	ldr	r3, [pc, #52]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bcdc:	681b      	ldr	r3, [r3, #0]
2405bcde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bce2:	2b00      	cmp	r3, #0
2405bce4:	d0f0      	beq.n	2405bcc8 <HAL_RCC_OscConfig+0x71c>
2405bce6:	e089      	b.n	2405bdfc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2405bce8:	4b09      	ldr	r3, [pc, #36]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bcea:	681b      	ldr	r3, [r3, #0]
2405bcec:	4a08      	ldr	r2, [pc, #32]	; (2405bd10 <HAL_RCC_OscConfig+0x764>)
2405bcee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2405bcf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405bcf4:	f7f8 f8a6 	bl	24053e44 <HAL_GetTick>
2405bcf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405bcfa:	e00f      	b.n	2405bd1c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2405bcfc:	f7f8 f8a2 	bl	24053e44 <HAL_GetTick>
2405bd00:	4602      	mov	r2, r0
2405bd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405bd04:	1ad3      	subs	r3, r2, r3
2405bd06:	2b02      	cmp	r3, #2
2405bd08:	d908      	bls.n	2405bd1c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
2405bd0a:	2303      	movs	r3, #3
2405bd0c:	e077      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
2405bd0e:	bf00      	nop
2405bd10:	58024400 	.word	0x58024400
2405bd14:	fffffc0c 	.word	0xfffffc0c
2405bd18:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405bd1c:	4b3a      	ldr	r3, [pc, #232]	; (2405be08 <HAL_RCC_OscConfig+0x85c>)
2405bd1e:	681b      	ldr	r3, [r3, #0]
2405bd20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bd24:	2b00      	cmp	r3, #0
2405bd26:	d1e9      	bne.n	2405bcfc <HAL_RCC_OscConfig+0x750>
2405bd28:	e068      	b.n	2405bdfc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
2405bd2a:	4b37      	ldr	r3, [pc, #220]	; (2405be08 <HAL_RCC_OscConfig+0x85c>)
2405bd2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405bd2e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
2405bd30:	4b35      	ldr	r3, [pc, #212]	; (2405be08 <HAL_RCC_OscConfig+0x85c>)
2405bd32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405bd34:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2405bd36:	687b      	ldr	r3, [r7, #4]
2405bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405bd3a:	2b01      	cmp	r3, #1
2405bd3c:	d031      	beq.n	2405bda2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2405bd3e:	693b      	ldr	r3, [r7, #16]
2405bd40:	f003 0203 	and.w	r2, r3, #3
2405bd44:	687b      	ldr	r3, [r7, #4]
2405bd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2405bd48:	429a      	cmp	r2, r3
2405bd4a:	d12a      	bne.n	2405bda2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2405bd4c:	693b      	ldr	r3, [r7, #16]
2405bd4e:	091b      	lsrs	r3, r3, #4
2405bd50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2405bd54:	687b      	ldr	r3, [r7, #4]
2405bd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2405bd58:	429a      	cmp	r2, r3
2405bd5a:	d122      	bne.n	2405bda2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2405bd5c:	68fb      	ldr	r3, [r7, #12]
2405bd5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405bd62:	687b      	ldr	r3, [r7, #4]
2405bd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405bd66:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2405bd68:	429a      	cmp	r2, r3
2405bd6a:	d11a      	bne.n	2405bda2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2405bd6c:	68fb      	ldr	r3, [r7, #12]
2405bd6e:	0a5b      	lsrs	r3, r3, #9
2405bd70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2405bd74:	687b      	ldr	r3, [r7, #4]
2405bd76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405bd78:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2405bd7a:	429a      	cmp	r2, r3
2405bd7c:	d111      	bne.n	2405bda2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2405bd7e:	68fb      	ldr	r3, [r7, #12]
2405bd80:	0c1b      	lsrs	r3, r3, #16
2405bd82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2405bd86:	687b      	ldr	r3, [r7, #4]
2405bd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405bd8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2405bd8c:	429a      	cmp	r2, r3
2405bd8e:	d108      	bne.n	2405bda2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
2405bd90:	68fb      	ldr	r3, [r7, #12]
2405bd92:	0e1b      	lsrs	r3, r3, #24
2405bd94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2405bd98:	687b      	ldr	r3, [r7, #4]
2405bd9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405bd9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2405bd9e:	429a      	cmp	r2, r3
2405bda0:	d001      	beq.n	2405bda6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
2405bda2:	2301      	movs	r3, #1
2405bda4:	e02b      	b.n	2405bdfe <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
2405bda6:	4b18      	ldr	r3, [pc, #96]	; (2405be08 <HAL_RCC_OscConfig+0x85c>)
2405bda8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405bdaa:	08db      	lsrs	r3, r3, #3
2405bdac:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405bdb0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
2405bdb2:	687b      	ldr	r3, [r7, #4]
2405bdb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405bdb6:	693a      	ldr	r2, [r7, #16]
2405bdb8:	429a      	cmp	r2, r3
2405bdba:	d01f      	beq.n	2405bdfc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
2405bdbc:	4b12      	ldr	r3, [pc, #72]	; (2405be08 <HAL_RCC_OscConfig+0x85c>)
2405bdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bdc0:	4a11      	ldr	r2, [pc, #68]	; (2405be08 <HAL_RCC_OscConfig+0x85c>)
2405bdc2:	f023 0301 	bic.w	r3, r3, #1
2405bdc6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
2405bdc8:	f7f8 f83c 	bl	24053e44 <HAL_GetTick>
2405bdcc:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
2405bdce:	bf00      	nop
2405bdd0:	f7f8 f838 	bl	24053e44 <HAL_GetTick>
2405bdd4:	4602      	mov	r2, r0
2405bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405bdd8:	4293      	cmp	r3, r2
2405bdda:	d0f9      	beq.n	2405bdd0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2405bddc:	4b0a      	ldr	r3, [pc, #40]	; (2405be08 <HAL_RCC_OscConfig+0x85c>)
2405bdde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405bde0:	4b0a      	ldr	r3, [pc, #40]	; (2405be0c <HAL_RCC_OscConfig+0x860>)
2405bde2:	4013      	ands	r3, r2
2405bde4:	687a      	ldr	r2, [r7, #4]
2405bde6:	6c92      	ldr	r2, [r2, #72]	; 0x48
2405bde8:	00d2      	lsls	r2, r2, #3
2405bdea:	4907      	ldr	r1, [pc, #28]	; (2405be08 <HAL_RCC_OscConfig+0x85c>)
2405bdec:	4313      	orrs	r3, r2
2405bdee:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
2405bdf0:	4b05      	ldr	r3, [pc, #20]	; (2405be08 <HAL_RCC_OscConfig+0x85c>)
2405bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bdf4:	4a04      	ldr	r2, [pc, #16]	; (2405be08 <HAL_RCC_OscConfig+0x85c>)
2405bdf6:	f043 0301 	orr.w	r3, r3, #1
2405bdfa:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
2405bdfc:	2300      	movs	r3, #0
}
2405bdfe:	4618      	mov	r0, r3
2405be00:	3730      	adds	r7, #48	; 0x30
2405be02:	46bd      	mov	sp, r7
2405be04:	bd80      	pop	{r7, pc}
2405be06:	bf00      	nop
2405be08:	58024400 	.word	0x58024400
2405be0c:	ffff0007 	.word	0xffff0007

2405be10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2405be10:	b580      	push	{r7, lr}
2405be12:	b086      	sub	sp, #24
2405be14:	af00      	add	r7, sp, #0
2405be16:	6078      	str	r0, [r7, #4]
2405be18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
2405be1a:	687b      	ldr	r3, [r7, #4]
2405be1c:	2b00      	cmp	r3, #0
2405be1e:	d101      	bne.n	2405be24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2405be20:	2301      	movs	r3, #1
2405be22:	e19c      	b.n	2405c15e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2405be24:	4b8a      	ldr	r3, [pc, #552]	; (2405c050 <HAL_RCC_ClockConfig+0x240>)
2405be26:	681b      	ldr	r3, [r3, #0]
2405be28:	f003 030f 	and.w	r3, r3, #15
2405be2c:	683a      	ldr	r2, [r7, #0]
2405be2e:	429a      	cmp	r2, r3
2405be30:	d910      	bls.n	2405be54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2405be32:	4b87      	ldr	r3, [pc, #540]	; (2405c050 <HAL_RCC_ClockConfig+0x240>)
2405be34:	681b      	ldr	r3, [r3, #0]
2405be36:	f023 020f 	bic.w	r2, r3, #15
2405be3a:	4985      	ldr	r1, [pc, #532]	; (2405c050 <HAL_RCC_ClockConfig+0x240>)
2405be3c:	683b      	ldr	r3, [r7, #0]
2405be3e:	4313      	orrs	r3, r2
2405be40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2405be42:	4b83      	ldr	r3, [pc, #524]	; (2405c050 <HAL_RCC_ClockConfig+0x240>)
2405be44:	681b      	ldr	r3, [r3, #0]
2405be46:	f003 030f 	and.w	r3, r3, #15
2405be4a:	683a      	ldr	r2, [r7, #0]
2405be4c:	429a      	cmp	r2, r3
2405be4e:	d001      	beq.n	2405be54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
2405be50:	2301      	movs	r3, #1
2405be52:	e184      	b.n	2405c15e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2405be54:	687b      	ldr	r3, [r7, #4]
2405be56:	681b      	ldr	r3, [r3, #0]
2405be58:	f003 0304 	and.w	r3, r3, #4
2405be5c:	2b00      	cmp	r3, #0
2405be5e:	d010      	beq.n	2405be82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
2405be60:	687b      	ldr	r3, [r7, #4]
2405be62:	691a      	ldr	r2, [r3, #16]
2405be64:	4b7b      	ldr	r3, [pc, #492]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405be66:	699b      	ldr	r3, [r3, #24]
2405be68:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405be6c:	429a      	cmp	r2, r3
2405be6e:	d908      	bls.n	2405be82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
2405be70:	4b78      	ldr	r3, [pc, #480]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405be72:	699b      	ldr	r3, [r3, #24]
2405be74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405be78:	687b      	ldr	r3, [r7, #4]
2405be7a:	691b      	ldr	r3, [r3, #16]
2405be7c:	4975      	ldr	r1, [pc, #468]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405be7e:	4313      	orrs	r3, r2
2405be80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2405be82:	687b      	ldr	r3, [r7, #4]
2405be84:	681b      	ldr	r3, [r3, #0]
2405be86:	f003 0308 	and.w	r3, r3, #8
2405be8a:	2b00      	cmp	r3, #0
2405be8c:	d010      	beq.n	2405beb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
2405be8e:	687b      	ldr	r3, [r7, #4]
2405be90:	695a      	ldr	r2, [r3, #20]
2405be92:	4b70      	ldr	r3, [pc, #448]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405be94:	69db      	ldr	r3, [r3, #28]
2405be96:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405be9a:	429a      	cmp	r2, r3
2405be9c:	d908      	bls.n	2405beb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2405be9e:	4b6d      	ldr	r3, [pc, #436]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bea0:	69db      	ldr	r3, [r3, #28]
2405bea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405bea6:	687b      	ldr	r3, [r7, #4]
2405bea8:	695b      	ldr	r3, [r3, #20]
2405beaa:	496a      	ldr	r1, [pc, #424]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405beac:	4313      	orrs	r3, r2
2405beae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2405beb0:	687b      	ldr	r3, [r7, #4]
2405beb2:	681b      	ldr	r3, [r3, #0]
2405beb4:	f003 0310 	and.w	r3, r3, #16
2405beb8:	2b00      	cmp	r3, #0
2405beba:	d010      	beq.n	2405bede <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
2405bebc:	687b      	ldr	r3, [r7, #4]
2405bebe:	699a      	ldr	r2, [r3, #24]
2405bec0:	4b64      	ldr	r3, [pc, #400]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bec2:	69db      	ldr	r3, [r3, #28]
2405bec4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
2405bec8:	429a      	cmp	r2, r3
2405beca:	d908      	bls.n	2405bede <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2405becc:	4b61      	ldr	r3, [pc, #388]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bece:	69db      	ldr	r3, [r3, #28]
2405bed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
2405bed4:	687b      	ldr	r3, [r7, #4]
2405bed6:	699b      	ldr	r3, [r3, #24]
2405bed8:	495e      	ldr	r1, [pc, #376]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405beda:	4313      	orrs	r3, r2
2405bedc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2405bede:	687b      	ldr	r3, [r7, #4]
2405bee0:	681b      	ldr	r3, [r3, #0]
2405bee2:	f003 0320 	and.w	r3, r3, #32
2405bee6:	2b00      	cmp	r3, #0
2405bee8:	d010      	beq.n	2405bf0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
2405beea:	687b      	ldr	r3, [r7, #4]
2405beec:	69da      	ldr	r2, [r3, #28]
2405beee:	4b59      	ldr	r3, [pc, #356]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bef0:	6a1b      	ldr	r3, [r3, #32]
2405bef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405bef6:	429a      	cmp	r2, r3
2405bef8:	d908      	bls.n	2405bf0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2405befa:	4b56      	ldr	r3, [pc, #344]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405befc:	6a1b      	ldr	r3, [r3, #32]
2405befe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405bf02:	687b      	ldr	r3, [r7, #4]
2405bf04:	69db      	ldr	r3, [r3, #28]
2405bf06:	4953      	ldr	r1, [pc, #332]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bf08:	4313      	orrs	r3, r2
2405bf0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2405bf0c:	687b      	ldr	r3, [r7, #4]
2405bf0e:	681b      	ldr	r3, [r3, #0]
2405bf10:	f003 0302 	and.w	r3, r3, #2
2405bf14:	2b00      	cmp	r3, #0
2405bf16:	d010      	beq.n	2405bf3a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
2405bf18:	687b      	ldr	r3, [r7, #4]
2405bf1a:	68da      	ldr	r2, [r3, #12]
2405bf1c:	4b4d      	ldr	r3, [pc, #308]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bf1e:	699b      	ldr	r3, [r3, #24]
2405bf20:	f003 030f 	and.w	r3, r3, #15
2405bf24:	429a      	cmp	r2, r3
2405bf26:	d908      	bls.n	2405bf3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2405bf28:	4b4a      	ldr	r3, [pc, #296]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bf2a:	699b      	ldr	r3, [r3, #24]
2405bf2c:	f023 020f 	bic.w	r2, r3, #15
2405bf30:	687b      	ldr	r3, [r7, #4]
2405bf32:	68db      	ldr	r3, [r3, #12]
2405bf34:	4947      	ldr	r1, [pc, #284]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bf36:	4313      	orrs	r3, r2
2405bf38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2405bf3a:	687b      	ldr	r3, [r7, #4]
2405bf3c:	681b      	ldr	r3, [r3, #0]
2405bf3e:	f003 0301 	and.w	r3, r3, #1
2405bf42:	2b00      	cmp	r3, #0
2405bf44:	d055      	beq.n	2405bff2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
2405bf46:	4b43      	ldr	r3, [pc, #268]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bf48:	699b      	ldr	r3, [r3, #24]
2405bf4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
2405bf4e:	687b      	ldr	r3, [r7, #4]
2405bf50:	689b      	ldr	r3, [r3, #8]
2405bf52:	4940      	ldr	r1, [pc, #256]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bf54:	4313      	orrs	r3, r2
2405bf56:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2405bf58:	687b      	ldr	r3, [r7, #4]
2405bf5a:	685b      	ldr	r3, [r3, #4]
2405bf5c:	2b02      	cmp	r3, #2
2405bf5e:	d107      	bne.n	2405bf70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2405bf60:	4b3c      	ldr	r3, [pc, #240]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bf62:	681b      	ldr	r3, [r3, #0]
2405bf64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405bf68:	2b00      	cmp	r3, #0
2405bf6a:	d121      	bne.n	2405bfb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405bf6c:	2301      	movs	r3, #1
2405bf6e:	e0f6      	b.n	2405c15e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
2405bf70:	687b      	ldr	r3, [r7, #4]
2405bf72:	685b      	ldr	r3, [r3, #4]
2405bf74:	2b03      	cmp	r3, #3
2405bf76:	d107      	bne.n	2405bf88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405bf78:	4b36      	ldr	r3, [pc, #216]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bf7a:	681b      	ldr	r3, [r3, #0]
2405bf7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bf80:	2b00      	cmp	r3, #0
2405bf82:	d115      	bne.n	2405bfb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405bf84:	2301      	movs	r3, #1
2405bf86:	e0ea      	b.n	2405c15e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
2405bf88:	687b      	ldr	r3, [r7, #4]
2405bf8a:	685b      	ldr	r3, [r3, #4]
2405bf8c:	2b01      	cmp	r3, #1
2405bf8e:	d107      	bne.n	2405bfa0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2405bf90:	4b30      	ldr	r3, [pc, #192]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bf92:	681b      	ldr	r3, [r3, #0]
2405bf94:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405bf98:	2b00      	cmp	r3, #0
2405bf9a:	d109      	bne.n	2405bfb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405bf9c:	2301      	movs	r3, #1
2405bf9e:	e0de      	b.n	2405c15e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405bfa0:	4b2c      	ldr	r3, [pc, #176]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bfa2:	681b      	ldr	r3, [r3, #0]
2405bfa4:	f003 0304 	and.w	r3, r3, #4
2405bfa8:	2b00      	cmp	r3, #0
2405bfaa:	d101      	bne.n	2405bfb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405bfac:	2301      	movs	r3, #1
2405bfae:	e0d6      	b.n	2405c15e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
2405bfb0:	4b28      	ldr	r3, [pc, #160]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bfb2:	691b      	ldr	r3, [r3, #16]
2405bfb4:	f023 0207 	bic.w	r2, r3, #7
2405bfb8:	687b      	ldr	r3, [r7, #4]
2405bfba:	685b      	ldr	r3, [r3, #4]
2405bfbc:	4925      	ldr	r1, [pc, #148]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bfbe:	4313      	orrs	r3, r2
2405bfc0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405bfc2:	f7f7 ff3f 	bl	24053e44 <HAL_GetTick>
2405bfc6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2405bfc8:	e00a      	b.n	2405bfe0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2405bfca:	f7f7 ff3b 	bl	24053e44 <HAL_GetTick>
2405bfce:	4602      	mov	r2, r0
2405bfd0:	697b      	ldr	r3, [r7, #20]
2405bfd2:	1ad3      	subs	r3, r2, r3
2405bfd4:	f241 3288 	movw	r2, #5000	; 0x1388
2405bfd8:	4293      	cmp	r3, r2
2405bfda:	d901      	bls.n	2405bfe0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
2405bfdc:	2303      	movs	r3, #3
2405bfde:	e0be      	b.n	2405c15e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2405bfe0:	4b1c      	ldr	r3, [pc, #112]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405bfe2:	691b      	ldr	r3, [r3, #16]
2405bfe4:	f003 0238 	and.w	r2, r3, #56	; 0x38
2405bfe8:	687b      	ldr	r3, [r7, #4]
2405bfea:	685b      	ldr	r3, [r3, #4]
2405bfec:	00db      	lsls	r3, r3, #3
2405bfee:	429a      	cmp	r2, r3
2405bff0:	d1eb      	bne.n	2405bfca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2405bff2:	687b      	ldr	r3, [r7, #4]
2405bff4:	681b      	ldr	r3, [r3, #0]
2405bff6:	f003 0302 	and.w	r3, r3, #2
2405bffa:	2b00      	cmp	r3, #0
2405bffc:	d010      	beq.n	2405c020 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
2405bffe:	687b      	ldr	r3, [r7, #4]
2405c000:	68da      	ldr	r2, [r3, #12]
2405c002:	4b14      	ldr	r3, [pc, #80]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405c004:	699b      	ldr	r3, [r3, #24]
2405c006:	f003 030f 	and.w	r3, r3, #15
2405c00a:	429a      	cmp	r2, r3
2405c00c:	d208      	bcs.n	2405c020 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2405c00e:	4b11      	ldr	r3, [pc, #68]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405c010:	699b      	ldr	r3, [r3, #24]
2405c012:	f023 020f 	bic.w	r2, r3, #15
2405c016:	687b      	ldr	r3, [r7, #4]
2405c018:	68db      	ldr	r3, [r3, #12]
2405c01a:	490e      	ldr	r1, [pc, #56]	; (2405c054 <HAL_RCC_ClockConfig+0x244>)
2405c01c:	4313      	orrs	r3, r2
2405c01e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
2405c020:	4b0b      	ldr	r3, [pc, #44]	; (2405c050 <HAL_RCC_ClockConfig+0x240>)
2405c022:	681b      	ldr	r3, [r3, #0]
2405c024:	f003 030f 	and.w	r3, r3, #15
2405c028:	683a      	ldr	r2, [r7, #0]
2405c02a:	429a      	cmp	r2, r3
2405c02c:	d214      	bcs.n	2405c058 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2405c02e:	4b08      	ldr	r3, [pc, #32]	; (2405c050 <HAL_RCC_ClockConfig+0x240>)
2405c030:	681b      	ldr	r3, [r3, #0]
2405c032:	f023 020f 	bic.w	r2, r3, #15
2405c036:	4906      	ldr	r1, [pc, #24]	; (2405c050 <HAL_RCC_ClockConfig+0x240>)
2405c038:	683b      	ldr	r3, [r7, #0]
2405c03a:	4313      	orrs	r3, r2
2405c03c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2405c03e:	4b04      	ldr	r3, [pc, #16]	; (2405c050 <HAL_RCC_ClockConfig+0x240>)
2405c040:	681b      	ldr	r3, [r3, #0]
2405c042:	f003 030f 	and.w	r3, r3, #15
2405c046:	683a      	ldr	r2, [r7, #0]
2405c048:	429a      	cmp	r2, r3
2405c04a:	d005      	beq.n	2405c058 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
2405c04c:	2301      	movs	r3, #1
2405c04e:	e086      	b.n	2405c15e <HAL_RCC_ClockConfig+0x34e>
2405c050:	52002000 	.word	0x52002000
2405c054:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2405c058:	687b      	ldr	r3, [r7, #4]
2405c05a:	681b      	ldr	r3, [r3, #0]
2405c05c:	f003 0304 	and.w	r3, r3, #4
2405c060:	2b00      	cmp	r3, #0
2405c062:	d010      	beq.n	2405c086 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
2405c064:	687b      	ldr	r3, [r7, #4]
2405c066:	691a      	ldr	r2, [r3, #16]
2405c068:	4b3f      	ldr	r3, [pc, #252]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c06a:	699b      	ldr	r3, [r3, #24]
2405c06c:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405c070:	429a      	cmp	r2, r3
2405c072:	d208      	bcs.n	2405c086 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
2405c074:	4b3c      	ldr	r3, [pc, #240]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c076:	699b      	ldr	r3, [r3, #24]
2405c078:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405c07c:	687b      	ldr	r3, [r7, #4]
2405c07e:	691b      	ldr	r3, [r3, #16]
2405c080:	4939      	ldr	r1, [pc, #228]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c082:	4313      	orrs	r3, r2
2405c084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2405c086:	687b      	ldr	r3, [r7, #4]
2405c088:	681b      	ldr	r3, [r3, #0]
2405c08a:	f003 0308 	and.w	r3, r3, #8
2405c08e:	2b00      	cmp	r3, #0
2405c090:	d010      	beq.n	2405c0b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
2405c092:	687b      	ldr	r3, [r7, #4]
2405c094:	695a      	ldr	r2, [r3, #20]
2405c096:	4b34      	ldr	r3, [pc, #208]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c098:	69db      	ldr	r3, [r3, #28]
2405c09a:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405c09e:	429a      	cmp	r2, r3
2405c0a0:	d208      	bcs.n	2405c0b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2405c0a2:	4b31      	ldr	r3, [pc, #196]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c0a4:	69db      	ldr	r3, [r3, #28]
2405c0a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405c0aa:	687b      	ldr	r3, [r7, #4]
2405c0ac:	695b      	ldr	r3, [r3, #20]
2405c0ae:	492e      	ldr	r1, [pc, #184]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c0b0:	4313      	orrs	r3, r2
2405c0b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2405c0b4:	687b      	ldr	r3, [r7, #4]
2405c0b6:	681b      	ldr	r3, [r3, #0]
2405c0b8:	f003 0310 	and.w	r3, r3, #16
2405c0bc:	2b00      	cmp	r3, #0
2405c0be:	d010      	beq.n	2405c0e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
2405c0c0:	687b      	ldr	r3, [r7, #4]
2405c0c2:	699a      	ldr	r2, [r3, #24]
2405c0c4:	4b28      	ldr	r3, [pc, #160]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c0c6:	69db      	ldr	r3, [r3, #28]
2405c0c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
2405c0cc:	429a      	cmp	r2, r3
2405c0ce:	d208      	bcs.n	2405c0e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2405c0d0:	4b25      	ldr	r3, [pc, #148]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c0d2:	69db      	ldr	r3, [r3, #28]
2405c0d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
2405c0d8:	687b      	ldr	r3, [r7, #4]
2405c0da:	699b      	ldr	r3, [r3, #24]
2405c0dc:	4922      	ldr	r1, [pc, #136]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c0de:	4313      	orrs	r3, r2
2405c0e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2405c0e2:	687b      	ldr	r3, [r7, #4]
2405c0e4:	681b      	ldr	r3, [r3, #0]
2405c0e6:	f003 0320 	and.w	r3, r3, #32
2405c0ea:	2b00      	cmp	r3, #0
2405c0ec:	d010      	beq.n	2405c110 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
2405c0ee:	687b      	ldr	r3, [r7, #4]
2405c0f0:	69da      	ldr	r2, [r3, #28]
2405c0f2:	4b1d      	ldr	r3, [pc, #116]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c0f4:	6a1b      	ldr	r3, [r3, #32]
2405c0f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405c0fa:	429a      	cmp	r2, r3
2405c0fc:	d208      	bcs.n	2405c110 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2405c0fe:	4b1a      	ldr	r3, [pc, #104]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c100:	6a1b      	ldr	r3, [r3, #32]
2405c102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405c106:	687b      	ldr	r3, [r7, #4]
2405c108:	69db      	ldr	r3, [r3, #28]
2405c10a:	4917      	ldr	r1, [pc, #92]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c10c:	4313      	orrs	r3, r2
2405c10e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
2405c110:	f000 f834 	bl	2405c17c <HAL_RCC_GetSysClockFreq>
2405c114:	4602      	mov	r2, r0
2405c116:	4b14      	ldr	r3, [pc, #80]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c118:	699b      	ldr	r3, [r3, #24]
2405c11a:	0a1b      	lsrs	r3, r3, #8
2405c11c:	f003 030f 	and.w	r3, r3, #15
2405c120:	4912      	ldr	r1, [pc, #72]	; (2405c16c <HAL_RCC_ClockConfig+0x35c>)
2405c122:	5ccb      	ldrb	r3, [r1, r3]
2405c124:	f003 031f 	and.w	r3, r3, #31
2405c128:	fa22 f303 	lsr.w	r3, r2, r3
2405c12c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
2405c12e:	4b0e      	ldr	r3, [pc, #56]	; (2405c168 <HAL_RCC_ClockConfig+0x358>)
2405c130:	699b      	ldr	r3, [r3, #24]
2405c132:	f003 030f 	and.w	r3, r3, #15
2405c136:	4a0d      	ldr	r2, [pc, #52]	; (2405c16c <HAL_RCC_ClockConfig+0x35c>)
2405c138:	5cd3      	ldrb	r3, [r2, r3]
2405c13a:	f003 031f 	and.w	r3, r3, #31
2405c13e:	693a      	ldr	r2, [r7, #16]
2405c140:	fa22 f303 	lsr.w	r3, r2, r3
2405c144:	4a0a      	ldr	r2, [pc, #40]	; (2405c170 <HAL_RCC_ClockConfig+0x360>)
2405c146:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2405c148:	4a0a      	ldr	r2, [pc, #40]	; (2405c174 <HAL_RCC_ClockConfig+0x364>)
2405c14a:	693b      	ldr	r3, [r7, #16]
2405c14c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
2405c14e:	4b0a      	ldr	r3, [pc, #40]	; (2405c178 <HAL_RCC_ClockConfig+0x368>)
2405c150:	681b      	ldr	r3, [r3, #0]
2405c152:	4618      	mov	r0, r3
2405c154:	f7f7 fe2c 	bl	24053db0 <HAL_InitTick>
2405c158:	4603      	mov	r3, r0
2405c15a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
2405c15c:	7bfb      	ldrb	r3, [r7, #15]
}
2405c15e:	4618      	mov	r0, r3
2405c160:	3718      	adds	r7, #24
2405c162:	46bd      	mov	sp, r7
2405c164:	bd80      	pop	{r7, pc}
2405c166:	bf00      	nop
2405c168:	58024400 	.word	0x58024400
2405c16c:	24064270 	.word	0x24064270
2405c170:	20000048 	.word	0x20000048
2405c174:	20000044 	.word	0x20000044
2405c178:	2000004c 	.word	0x2000004c

2405c17c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
2405c17c:	b480      	push	{r7}
2405c17e:	b089      	sub	sp, #36	; 0x24
2405c180:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
2405c182:	4bb3      	ldr	r3, [pc, #716]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c184:	691b      	ldr	r3, [r3, #16]
2405c186:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405c18a:	2b18      	cmp	r3, #24
2405c18c:	f200 8155 	bhi.w	2405c43a <HAL_RCC_GetSysClockFreq+0x2be>
2405c190:	a201      	add	r2, pc, #4	; (adr r2, 2405c198 <HAL_RCC_GetSysClockFreq+0x1c>)
2405c192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405c196:	bf00      	nop
2405c198:	2405c1fd 	.word	0x2405c1fd
2405c19c:	2405c43b 	.word	0x2405c43b
2405c1a0:	2405c43b 	.word	0x2405c43b
2405c1a4:	2405c43b 	.word	0x2405c43b
2405c1a8:	2405c43b 	.word	0x2405c43b
2405c1ac:	2405c43b 	.word	0x2405c43b
2405c1b0:	2405c43b 	.word	0x2405c43b
2405c1b4:	2405c43b 	.word	0x2405c43b
2405c1b8:	2405c223 	.word	0x2405c223
2405c1bc:	2405c43b 	.word	0x2405c43b
2405c1c0:	2405c43b 	.word	0x2405c43b
2405c1c4:	2405c43b 	.word	0x2405c43b
2405c1c8:	2405c43b 	.word	0x2405c43b
2405c1cc:	2405c43b 	.word	0x2405c43b
2405c1d0:	2405c43b 	.word	0x2405c43b
2405c1d4:	2405c43b 	.word	0x2405c43b
2405c1d8:	2405c229 	.word	0x2405c229
2405c1dc:	2405c43b 	.word	0x2405c43b
2405c1e0:	2405c43b 	.word	0x2405c43b
2405c1e4:	2405c43b 	.word	0x2405c43b
2405c1e8:	2405c43b 	.word	0x2405c43b
2405c1ec:	2405c43b 	.word	0x2405c43b
2405c1f0:	2405c43b 	.word	0x2405c43b
2405c1f4:	2405c43b 	.word	0x2405c43b
2405c1f8:	2405c22f 	.word	0x2405c22f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405c1fc:	4b94      	ldr	r3, [pc, #592]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c1fe:	681b      	ldr	r3, [r3, #0]
2405c200:	f003 0320 	and.w	r3, r3, #32
2405c204:	2b00      	cmp	r3, #0
2405c206:	d009      	beq.n	2405c21c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405c208:	4b91      	ldr	r3, [pc, #580]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c20a:	681b      	ldr	r3, [r3, #0]
2405c20c:	08db      	lsrs	r3, r3, #3
2405c20e:	f003 0303 	and.w	r3, r3, #3
2405c212:	4a90      	ldr	r2, [pc, #576]	; (2405c454 <HAL_RCC_GetSysClockFreq+0x2d8>)
2405c214:	fa22 f303 	lsr.w	r3, r2, r3
2405c218:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
2405c21a:	e111      	b.n	2405c440 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
2405c21c:	4b8d      	ldr	r3, [pc, #564]	; (2405c454 <HAL_RCC_GetSysClockFreq+0x2d8>)
2405c21e:	61bb      	str	r3, [r7, #24]
      break;
2405c220:	e10e      	b.n	2405c440 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
2405c222:	4b8d      	ldr	r3, [pc, #564]	; (2405c458 <HAL_RCC_GetSysClockFreq+0x2dc>)
2405c224:	61bb      	str	r3, [r7, #24]
      break;
2405c226:	e10b      	b.n	2405c440 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
2405c228:	4b8c      	ldr	r3, [pc, #560]	; (2405c45c <HAL_RCC_GetSysClockFreq+0x2e0>)
2405c22a:	61bb      	str	r3, [r7, #24]
      break;
2405c22c:	e108      	b.n	2405c440 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405c22e:	4b88      	ldr	r3, [pc, #544]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405c232:	f003 0303 	and.w	r3, r3, #3
2405c236:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
2405c238:	4b85      	ldr	r3, [pc, #532]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405c23c:	091b      	lsrs	r3, r3, #4
2405c23e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405c242:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
2405c244:	4b82      	ldr	r3, [pc, #520]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c248:	f003 0301 	and.w	r3, r3, #1
2405c24c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2405c24e:	4b80      	ldr	r3, [pc, #512]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405c252:	08db      	lsrs	r3, r3, #3
2405c254:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405c258:	68fa      	ldr	r2, [r7, #12]
2405c25a:	fb02 f303 	mul.w	r3, r2, r3
2405c25e:	ee07 3a90 	vmov	s15, r3
2405c262:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c266:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
2405c26a:	693b      	ldr	r3, [r7, #16]
2405c26c:	2b00      	cmp	r3, #0
2405c26e:	f000 80e1 	beq.w	2405c434 <HAL_RCC_GetSysClockFreq+0x2b8>
2405c272:	697b      	ldr	r3, [r7, #20]
2405c274:	2b02      	cmp	r3, #2
2405c276:	f000 8083 	beq.w	2405c380 <HAL_RCC_GetSysClockFreq+0x204>
2405c27a:	697b      	ldr	r3, [r7, #20]
2405c27c:	2b02      	cmp	r3, #2
2405c27e:	f200 80a1 	bhi.w	2405c3c4 <HAL_RCC_GetSysClockFreq+0x248>
2405c282:	697b      	ldr	r3, [r7, #20]
2405c284:	2b00      	cmp	r3, #0
2405c286:	d003      	beq.n	2405c290 <HAL_RCC_GetSysClockFreq+0x114>
2405c288:	697b      	ldr	r3, [r7, #20]
2405c28a:	2b01      	cmp	r3, #1
2405c28c:	d056      	beq.n	2405c33c <HAL_RCC_GetSysClockFreq+0x1c0>
2405c28e:	e099      	b.n	2405c3c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405c290:	4b6f      	ldr	r3, [pc, #444]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c292:	681b      	ldr	r3, [r3, #0]
2405c294:	f003 0320 	and.w	r3, r3, #32
2405c298:	2b00      	cmp	r3, #0
2405c29a:	d02d      	beq.n	2405c2f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405c29c:	4b6c      	ldr	r3, [pc, #432]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c29e:	681b      	ldr	r3, [r3, #0]
2405c2a0:	08db      	lsrs	r3, r3, #3
2405c2a2:	f003 0303 	and.w	r3, r3, #3
2405c2a6:	4a6b      	ldr	r2, [pc, #428]	; (2405c454 <HAL_RCC_GetSysClockFreq+0x2d8>)
2405c2a8:	fa22 f303 	lsr.w	r3, r2, r3
2405c2ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405c2ae:	687b      	ldr	r3, [r7, #4]
2405c2b0:	ee07 3a90 	vmov	s15, r3
2405c2b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c2b8:	693b      	ldr	r3, [r7, #16]
2405c2ba:	ee07 3a90 	vmov	s15, r3
2405c2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c2c6:	4b62      	ldr	r3, [pc, #392]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c2ce:	ee07 3a90 	vmov	s15, r3
2405c2d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c2d6:	ed97 6a02 	vldr	s12, [r7, #8]
2405c2da:	eddf 5a61 	vldr	s11, [pc, #388]	; 2405c460 <HAL_RCC_GetSysClockFreq+0x2e4>
2405c2de:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c2e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c2e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c2f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
2405c2f6:	e087      	b.n	2405c408 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405c2f8:	693b      	ldr	r3, [r7, #16]
2405c2fa:	ee07 3a90 	vmov	s15, r3
2405c2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c302:	eddf 6a58 	vldr	s13, [pc, #352]	; 2405c464 <HAL_RCC_GetSysClockFreq+0x2e8>
2405c306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c30a:	4b51      	ldr	r3, [pc, #324]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c312:	ee07 3a90 	vmov	s15, r3
2405c316:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c31a:	ed97 6a02 	vldr	s12, [r7, #8]
2405c31e:	eddf 5a50 	vldr	s11, [pc, #320]	; 2405c460 <HAL_RCC_GetSysClockFreq+0x2e4>
2405c322:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c326:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c32a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c332:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405c33a:	e065      	b.n	2405c408 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405c33c:	693b      	ldr	r3, [r7, #16]
2405c33e:	ee07 3a90 	vmov	s15, r3
2405c342:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c346:	eddf 6a48 	vldr	s13, [pc, #288]	; 2405c468 <HAL_RCC_GetSysClockFreq+0x2ec>
2405c34a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c34e:	4b40      	ldr	r3, [pc, #256]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c352:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c356:	ee07 3a90 	vmov	s15, r3
2405c35a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c35e:	ed97 6a02 	vldr	s12, [r7, #8]
2405c362:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2405c460 <HAL_RCC_GetSysClockFreq+0x2e4>
2405c366:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c36a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c36e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c372:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c376:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c37a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405c37e:	e043      	b.n	2405c408 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405c380:	693b      	ldr	r3, [r7, #16]
2405c382:	ee07 3a90 	vmov	s15, r3
2405c386:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c38a:	eddf 6a38 	vldr	s13, [pc, #224]	; 2405c46c <HAL_RCC_GetSysClockFreq+0x2f0>
2405c38e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c392:	4b2f      	ldr	r3, [pc, #188]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c396:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c39a:	ee07 3a90 	vmov	s15, r3
2405c39e:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c3a2:	ed97 6a02 	vldr	s12, [r7, #8]
2405c3a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 2405c460 <HAL_RCC_GetSysClockFreq+0x2e4>
2405c3aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c3ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c3b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c3b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c3ba:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c3be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405c3c2:	e021      	b.n	2405c408 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405c3c4:	693b      	ldr	r3, [r7, #16]
2405c3c6:	ee07 3a90 	vmov	s15, r3
2405c3ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c3ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 2405c468 <HAL_RCC_GetSysClockFreq+0x2ec>
2405c3d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c3d6:	4b1e      	ldr	r3, [pc, #120]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c3da:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c3de:	ee07 3a90 	vmov	s15, r3
2405c3e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c3e6:	ed97 6a02 	vldr	s12, [r7, #8]
2405c3ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 2405c460 <HAL_RCC_GetSysClockFreq+0x2e4>
2405c3ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c3f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c3f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c3fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c402:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405c406:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
2405c408:	4b11      	ldr	r3, [pc, #68]	; (2405c450 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c40c:	0a5b      	lsrs	r3, r3, #9
2405c40e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405c412:	3301      	adds	r3, #1
2405c414:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
2405c416:	683b      	ldr	r3, [r7, #0]
2405c418:	ee07 3a90 	vmov	s15, r3
2405c41c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
2405c420:	edd7 6a07 	vldr	s13, [r7, #28]
2405c424:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405c428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405c42c:	ee17 3a90 	vmov	r3, s15
2405c430:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
2405c432:	e005      	b.n	2405c440 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
2405c434:	2300      	movs	r3, #0
2405c436:	61bb      	str	r3, [r7, #24]
      break;
2405c438:	e002      	b.n	2405c440 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
2405c43a:	4b07      	ldr	r3, [pc, #28]	; (2405c458 <HAL_RCC_GetSysClockFreq+0x2dc>)
2405c43c:	61bb      	str	r3, [r7, #24]
      break;
2405c43e:	bf00      	nop
  }

  return sysclockfreq;
2405c440:	69bb      	ldr	r3, [r7, #24]
}
2405c442:	4618      	mov	r0, r3
2405c444:	3724      	adds	r7, #36	; 0x24
2405c446:	46bd      	mov	sp, r7
2405c448:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c44c:	4770      	bx	lr
2405c44e:	bf00      	nop
2405c450:	58024400 	.word	0x58024400
2405c454:	03d09000 	.word	0x03d09000
2405c458:	003d0900 	.word	0x003d0900
2405c45c:	016e3600 	.word	0x016e3600
2405c460:	46000000 	.word	0x46000000
2405c464:	4c742400 	.word	0x4c742400
2405c468:	4a742400 	.word	0x4a742400
2405c46c:	4bb71b00 	.word	0x4bb71b00

2405c470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2405c470:	b580      	push	{r7, lr}
2405c472:	b082      	sub	sp, #8
2405c474:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
2405c476:	f7ff fe81 	bl	2405c17c <HAL_RCC_GetSysClockFreq>
2405c47a:	4602      	mov	r2, r0
2405c47c:	4b10      	ldr	r3, [pc, #64]	; (2405c4c0 <HAL_RCC_GetHCLKFreq+0x50>)
2405c47e:	699b      	ldr	r3, [r3, #24]
2405c480:	0a1b      	lsrs	r3, r3, #8
2405c482:	f003 030f 	and.w	r3, r3, #15
2405c486:	490f      	ldr	r1, [pc, #60]	; (2405c4c4 <HAL_RCC_GetHCLKFreq+0x54>)
2405c488:	5ccb      	ldrb	r3, [r1, r3]
2405c48a:	f003 031f 	and.w	r3, r3, #31
2405c48e:	fa22 f303 	lsr.w	r3, r2, r3
2405c492:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
2405c494:	4b0a      	ldr	r3, [pc, #40]	; (2405c4c0 <HAL_RCC_GetHCLKFreq+0x50>)
2405c496:	699b      	ldr	r3, [r3, #24]
2405c498:	f003 030f 	and.w	r3, r3, #15
2405c49c:	4a09      	ldr	r2, [pc, #36]	; (2405c4c4 <HAL_RCC_GetHCLKFreq+0x54>)
2405c49e:	5cd3      	ldrb	r3, [r2, r3]
2405c4a0:	f003 031f 	and.w	r3, r3, #31
2405c4a4:	687a      	ldr	r2, [r7, #4]
2405c4a6:	fa22 f303 	lsr.w	r3, r2, r3
2405c4aa:	4a07      	ldr	r2, [pc, #28]	; (2405c4c8 <HAL_RCC_GetHCLKFreq+0x58>)
2405c4ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2405c4ae:	4a07      	ldr	r2, [pc, #28]	; (2405c4cc <HAL_RCC_GetHCLKFreq+0x5c>)
2405c4b0:	687b      	ldr	r3, [r7, #4]
2405c4b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
2405c4b4:	4b04      	ldr	r3, [pc, #16]	; (2405c4c8 <HAL_RCC_GetHCLKFreq+0x58>)
2405c4b6:	681b      	ldr	r3, [r3, #0]
}
2405c4b8:	4618      	mov	r0, r3
2405c4ba:	3708      	adds	r7, #8
2405c4bc:	46bd      	mov	sp, r7
2405c4be:	bd80      	pop	{r7, pc}
2405c4c0:	58024400 	.word	0x58024400
2405c4c4:	24064270 	.word	0x24064270
2405c4c8:	20000048 	.word	0x20000048
2405c4cc:	20000044 	.word	0x20000044

2405c4d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
2405c4d0:	b580      	push	{r7, lr}
2405c4d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
2405c4d4:	f7ff ffcc 	bl	2405c470 <HAL_RCC_GetHCLKFreq>
2405c4d8:	4602      	mov	r2, r0
2405c4da:	4b06      	ldr	r3, [pc, #24]	; (2405c4f4 <HAL_RCC_GetPCLK1Freq+0x24>)
2405c4dc:	69db      	ldr	r3, [r3, #28]
2405c4de:	091b      	lsrs	r3, r3, #4
2405c4e0:	f003 0307 	and.w	r3, r3, #7
2405c4e4:	4904      	ldr	r1, [pc, #16]	; (2405c4f8 <HAL_RCC_GetPCLK1Freq+0x28>)
2405c4e6:	5ccb      	ldrb	r3, [r1, r3]
2405c4e8:	f003 031f 	and.w	r3, r3, #31
2405c4ec:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
2405c4f0:	4618      	mov	r0, r3
2405c4f2:	bd80      	pop	{r7, pc}
2405c4f4:	58024400 	.word	0x58024400
2405c4f8:	24064270 	.word	0x24064270

2405c4fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2405c4fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
2405c500:	b0c8      	sub	sp, #288	; 0x120
2405c502:	af00      	add	r7, sp, #0
2405c504:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
2405c508:	2300      	movs	r3, #0
2405c50a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
2405c50e:	2300      	movs	r3, #0
2405c510:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2405c514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c518:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c51c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
2405c520:	2500      	movs	r5, #0
2405c522:	ea54 0305 	orrs.w	r3, r4, r5
2405c526:	d049      	beq.n	2405c5bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
2405c528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c52c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405c52e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405c532:	d02f      	beq.n	2405c594 <HAL_RCCEx_PeriphCLKConfig+0x98>
2405c534:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405c538:	d828      	bhi.n	2405c58c <HAL_RCCEx_PeriphCLKConfig+0x90>
2405c53a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405c53e:	d01a      	beq.n	2405c576 <HAL_RCCEx_PeriphCLKConfig+0x7a>
2405c540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405c544:	d822      	bhi.n	2405c58c <HAL_RCCEx_PeriphCLKConfig+0x90>
2405c546:	2b00      	cmp	r3, #0
2405c548:	d003      	beq.n	2405c552 <HAL_RCCEx_PeriphCLKConfig+0x56>
2405c54a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2405c54e:	d007      	beq.n	2405c560 <HAL_RCCEx_PeriphCLKConfig+0x64>
2405c550:	e01c      	b.n	2405c58c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405c552:	4ba7      	ldr	r3, [pc, #668]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c556:	4aa6      	ldr	r2, [pc, #664]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405c55c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2405c55e:	e01a      	b.n	2405c596 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405c560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c564:	3308      	adds	r3, #8
2405c566:	2102      	movs	r1, #2
2405c568:	4618      	mov	r0, r3
2405c56a:	f002 fa6d 	bl	2405ea48 <RCCEx_PLL2_Config>
2405c56e:	4603      	mov	r3, r0
2405c570:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2405c574:	e00f      	b.n	2405c596 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405c576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c57a:	3328      	adds	r3, #40	; 0x28
2405c57c:	2102      	movs	r1, #2
2405c57e:	4618      	mov	r0, r3
2405c580:	f002 fb14 	bl	2405ebac <RCCEx_PLL3_Config>
2405c584:	4603      	mov	r3, r0
2405c586:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2405c58a:	e004      	b.n	2405c596 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405c58c:	2301      	movs	r3, #1
2405c58e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c592:	e000      	b.n	2405c596 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
2405c594:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c596:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c59a:	2b00      	cmp	r3, #0
2405c59c:	d10a      	bne.n	2405c5b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2405c59e:	4b94      	ldr	r3, [pc, #592]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c5a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c5a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
2405c5a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405c5ac:	4a90      	ldr	r2, [pc, #576]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c5ae:	430b      	orrs	r3, r1
2405c5b0:	6513      	str	r3, [r2, #80]	; 0x50
2405c5b2:	e003      	b.n	2405c5bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c5b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c5b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2405c5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c5c4:	f402 7880 	and.w	r8, r2, #256	; 0x100
2405c5c8:	f04f 0900 	mov.w	r9, #0
2405c5cc:	ea58 0309 	orrs.w	r3, r8, r9
2405c5d0:	d047      	beq.n	2405c662 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
2405c5d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c5d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405c5d8:	2b04      	cmp	r3, #4
2405c5da:	d82a      	bhi.n	2405c632 <HAL_RCCEx_PeriphCLKConfig+0x136>
2405c5dc:	a201      	add	r2, pc, #4	; (adr r2, 2405c5e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
2405c5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405c5e2:	bf00      	nop
2405c5e4:	2405c5f9 	.word	0x2405c5f9
2405c5e8:	2405c607 	.word	0x2405c607
2405c5ec:	2405c61d 	.word	0x2405c61d
2405c5f0:	2405c63b 	.word	0x2405c63b
2405c5f4:	2405c63b 	.word	0x2405c63b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405c5f8:	4b7d      	ldr	r3, [pc, #500]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c5fc:	4a7c      	ldr	r2, [pc, #496]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c5fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405c602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2405c604:	e01a      	b.n	2405c63c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405c606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c60a:	3308      	adds	r3, #8
2405c60c:	2100      	movs	r1, #0
2405c60e:	4618      	mov	r0, r3
2405c610:	f002 fa1a 	bl	2405ea48 <RCCEx_PLL2_Config>
2405c614:	4603      	mov	r3, r0
2405c616:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2405c61a:	e00f      	b.n	2405c63c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405c61c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c620:	3328      	adds	r3, #40	; 0x28
2405c622:	2100      	movs	r1, #0
2405c624:	4618      	mov	r0, r3
2405c626:	f002 fac1 	bl	2405ebac <RCCEx_PLL3_Config>
2405c62a:	4603      	mov	r3, r0
2405c62c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2405c630:	e004      	b.n	2405c63c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405c632:	2301      	movs	r3, #1
2405c634:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c638:	e000      	b.n	2405c63c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
2405c63a:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c63c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c640:	2b00      	cmp	r3, #0
2405c642:	d10a      	bne.n	2405c65a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2405c644:	4b6a      	ldr	r3, [pc, #424]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c648:	f023 0107 	bic.w	r1, r3, #7
2405c64c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405c652:	4a67      	ldr	r2, [pc, #412]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c654:	430b      	orrs	r3, r1
2405c656:	6513      	str	r3, [r2, #80]	; 0x50
2405c658:	e003      	b.n	2405c662 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c65a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c65e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
2405c662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c666:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c66a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
2405c66e:	f04f 0b00 	mov.w	fp, #0
2405c672:	ea5a 030b 	orrs.w	r3, sl, fp
2405c676:	d054      	beq.n	2405c722 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
2405c678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c67c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405c67e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
2405c682:	d036      	beq.n	2405c6f2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
2405c684:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
2405c688:	d82f      	bhi.n	2405c6ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405c68a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c68e:	d032      	beq.n	2405c6f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
2405c690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c694:	d829      	bhi.n	2405c6ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405c696:	2bc0      	cmp	r3, #192	; 0xc0
2405c698:	d02f      	beq.n	2405c6fa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
2405c69a:	2bc0      	cmp	r3, #192	; 0xc0
2405c69c:	d825      	bhi.n	2405c6ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405c69e:	2b80      	cmp	r3, #128	; 0x80
2405c6a0:	d018      	beq.n	2405c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
2405c6a2:	2b80      	cmp	r3, #128	; 0x80
2405c6a4:	d821      	bhi.n	2405c6ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405c6a6:	2b00      	cmp	r3, #0
2405c6a8:	d002      	beq.n	2405c6b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
2405c6aa:	2b40      	cmp	r3, #64	; 0x40
2405c6ac:	d007      	beq.n	2405c6be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
2405c6ae:	e01c      	b.n	2405c6ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405c6b0:	4b4f      	ldr	r3, [pc, #316]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c6b4:	4a4e      	ldr	r2, [pc, #312]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c6b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405c6ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
2405c6bc:	e01e      	b.n	2405c6fc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405c6be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c6c2:	3308      	adds	r3, #8
2405c6c4:	2100      	movs	r1, #0
2405c6c6:	4618      	mov	r0, r3
2405c6c8:	f002 f9be 	bl	2405ea48 <RCCEx_PLL2_Config>
2405c6cc:	4603      	mov	r3, r0
2405c6ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
2405c6d2:	e013      	b.n	2405c6fc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405c6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c6d8:	3328      	adds	r3, #40	; 0x28
2405c6da:	2100      	movs	r1, #0
2405c6dc:	4618      	mov	r0, r3
2405c6de:	f002 fa65 	bl	2405ebac <RCCEx_PLL3_Config>
2405c6e2:	4603      	mov	r3, r0
2405c6e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
2405c6e8:	e008      	b.n	2405c6fc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405c6ea:	2301      	movs	r3, #1
2405c6ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c6f0:	e004      	b.n	2405c6fc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
2405c6f2:	bf00      	nop
2405c6f4:	e002      	b.n	2405c6fc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
2405c6f6:	bf00      	nop
2405c6f8:	e000      	b.n	2405c6fc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
2405c6fa:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c6fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c700:	2b00      	cmp	r3, #0
2405c702:	d10a      	bne.n	2405c71a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
2405c704:	4b3a      	ldr	r3, [pc, #232]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c708:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
2405c70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405c712:	4a37      	ldr	r2, [pc, #220]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c714:	430b      	orrs	r3, r1
2405c716:	6513      	str	r3, [r2, #80]	; 0x50
2405c718:	e003      	b.n	2405c722 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c71a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c71e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
2405c722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c726:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c72a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
2405c72e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
2405c732:	2300      	movs	r3, #0
2405c734:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
2405c738:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
2405c73c:	460b      	mov	r3, r1
2405c73e:	4313      	orrs	r3, r2
2405c740:	d05c      	beq.n	2405c7fc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
2405c742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405c748:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
2405c74c:	d03b      	beq.n	2405c7c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
2405c74e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
2405c752:	d834      	bhi.n	2405c7be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405c754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405c758:	d037      	beq.n	2405c7ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
2405c75a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405c75e:	d82e      	bhi.n	2405c7be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405c760:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405c764:	d033      	beq.n	2405c7ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
2405c766:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405c76a:	d828      	bhi.n	2405c7be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405c76c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405c770:	d01a      	beq.n	2405c7a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
2405c772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405c776:	d822      	bhi.n	2405c7be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405c778:	2b00      	cmp	r3, #0
2405c77a:	d003      	beq.n	2405c784 <HAL_RCCEx_PeriphCLKConfig+0x288>
2405c77c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405c780:	d007      	beq.n	2405c792 <HAL_RCCEx_PeriphCLKConfig+0x296>
2405c782:	e01c      	b.n	2405c7be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405c784:	4b1a      	ldr	r3, [pc, #104]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c788:	4a19      	ldr	r2, [pc, #100]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c78a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405c78e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
2405c790:	e01e      	b.n	2405c7d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405c792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c796:	3308      	adds	r3, #8
2405c798:	2100      	movs	r1, #0
2405c79a:	4618      	mov	r0, r3
2405c79c:	f002 f954 	bl	2405ea48 <RCCEx_PLL2_Config>
2405c7a0:	4603      	mov	r3, r0
2405c7a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
2405c7a6:	e013      	b.n	2405c7d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405c7a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c7ac:	3328      	adds	r3, #40	; 0x28
2405c7ae:	2100      	movs	r1, #0
2405c7b0:	4618      	mov	r0, r3
2405c7b2:	f002 f9fb 	bl	2405ebac <RCCEx_PLL3_Config>
2405c7b6:	4603      	mov	r3, r0
2405c7b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
2405c7bc:	e008      	b.n	2405c7d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405c7be:	2301      	movs	r3, #1
2405c7c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c7c4:	e004      	b.n	2405c7d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
2405c7c6:	bf00      	nop
2405c7c8:	e002      	b.n	2405c7d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
2405c7ca:	bf00      	nop
2405c7cc:	e000      	b.n	2405c7d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
2405c7ce:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c7d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c7d4:	2b00      	cmp	r3, #0
2405c7d6:	d10d      	bne.n	2405c7f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
2405c7d8:	4b05      	ldr	r3, [pc, #20]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c7dc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
2405c7e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c7e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405c7e6:	4a02      	ldr	r2, [pc, #8]	; (2405c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c7e8:	430b      	orrs	r3, r1
2405c7ea:	6513      	str	r3, [r2, #80]	; 0x50
2405c7ec:	e006      	b.n	2405c7fc <HAL_RCCEx_PeriphCLKConfig+0x300>
2405c7ee:	bf00      	nop
2405c7f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c7f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c7f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
2405c7fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c800:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c804:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
2405c808:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
2405c80c:	2300      	movs	r3, #0
2405c80e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
2405c812:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
2405c816:	460b      	mov	r3, r1
2405c818:	4313      	orrs	r3, r2
2405c81a:	d03a      	beq.n	2405c892 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
2405c81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405c822:	2b30      	cmp	r3, #48	; 0x30
2405c824:	d01f      	beq.n	2405c866 <HAL_RCCEx_PeriphCLKConfig+0x36a>
2405c826:	2b30      	cmp	r3, #48	; 0x30
2405c828:	d819      	bhi.n	2405c85e <HAL_RCCEx_PeriphCLKConfig+0x362>
2405c82a:	2b20      	cmp	r3, #32
2405c82c:	d00c      	beq.n	2405c848 <HAL_RCCEx_PeriphCLKConfig+0x34c>
2405c82e:	2b20      	cmp	r3, #32
2405c830:	d815      	bhi.n	2405c85e <HAL_RCCEx_PeriphCLKConfig+0x362>
2405c832:	2b00      	cmp	r3, #0
2405c834:	d019      	beq.n	2405c86a <HAL_RCCEx_PeriphCLKConfig+0x36e>
2405c836:	2b10      	cmp	r3, #16
2405c838:	d111      	bne.n	2405c85e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405c83a:	4bae      	ldr	r3, [pc, #696]	; (2405caf4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c83e:	4aad      	ldr	r2, [pc, #692]	; (2405caf4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405c844:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
2405c846:	e011      	b.n	2405c86c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405c848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c84c:	3308      	adds	r3, #8
2405c84e:	2102      	movs	r1, #2
2405c850:	4618      	mov	r0, r3
2405c852:	f002 f8f9 	bl	2405ea48 <RCCEx_PLL2_Config>
2405c856:	4603      	mov	r3, r0
2405c858:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
2405c85c:	e006      	b.n	2405c86c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
2405c85e:	2301      	movs	r3, #1
2405c860:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c864:	e002      	b.n	2405c86c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
2405c866:	bf00      	nop
2405c868:	e000      	b.n	2405c86c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
2405c86a:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c86c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c870:	2b00      	cmp	r3, #0
2405c872:	d10a      	bne.n	2405c88a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
2405c874:	4b9f      	ldr	r3, [pc, #636]	; (2405caf4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405c878:	f023 0130 	bic.w	r1, r3, #48	; 0x30
2405c87c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405c882:	4a9c      	ldr	r2, [pc, #624]	; (2405caf4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c884:	430b      	orrs	r3, r1
2405c886:	64d3      	str	r3, [r2, #76]	; 0x4c
2405c888:	e003      	b.n	2405c892 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c88a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c88e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2405c892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c896:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c89a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
2405c89e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
2405c8a2:	2300      	movs	r3, #0
2405c8a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
2405c8a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
2405c8ac:	460b      	mov	r3, r1
2405c8ae:	4313      	orrs	r3, r2
2405c8b0:	d051      	beq.n	2405c956 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
2405c8b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c8b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2405c8b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405c8bc:	d035      	beq.n	2405c92a <HAL_RCCEx_PeriphCLKConfig+0x42e>
2405c8be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405c8c2:	d82e      	bhi.n	2405c922 <HAL_RCCEx_PeriphCLKConfig+0x426>
2405c8c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405c8c8:	d031      	beq.n	2405c92e <HAL_RCCEx_PeriphCLKConfig+0x432>
2405c8ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405c8ce:	d828      	bhi.n	2405c922 <HAL_RCCEx_PeriphCLKConfig+0x426>
2405c8d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405c8d4:	d01a      	beq.n	2405c90c <HAL_RCCEx_PeriphCLKConfig+0x410>
2405c8d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405c8da:	d822      	bhi.n	2405c922 <HAL_RCCEx_PeriphCLKConfig+0x426>
2405c8dc:	2b00      	cmp	r3, #0
2405c8de:	d003      	beq.n	2405c8e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
2405c8e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405c8e4:	d007      	beq.n	2405c8f6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
2405c8e6:	e01c      	b.n	2405c922 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405c8e8:	4b82      	ldr	r3, [pc, #520]	; (2405caf4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c8ec:	4a81      	ldr	r2, [pc, #516]	; (2405caf4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c8ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405c8f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2405c8f4:	e01c      	b.n	2405c930 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405c8f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c8fa:	3308      	adds	r3, #8
2405c8fc:	2100      	movs	r1, #0
2405c8fe:	4618      	mov	r0, r3
2405c900:	f002 f8a2 	bl	2405ea48 <RCCEx_PLL2_Config>
2405c904:	4603      	mov	r3, r0
2405c906:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2405c90a:	e011      	b.n	2405c930 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405c90c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c910:	3328      	adds	r3, #40	; 0x28
2405c912:	2100      	movs	r1, #0
2405c914:	4618      	mov	r0, r3
2405c916:	f002 f949 	bl	2405ebac <RCCEx_PLL3_Config>
2405c91a:	4603      	mov	r3, r0
2405c91c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2405c920:	e006      	b.n	2405c930 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405c922:	2301      	movs	r3, #1
2405c924:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c928:	e002      	b.n	2405c930 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
2405c92a:	bf00      	nop
2405c92c:	e000      	b.n	2405c930 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
2405c92e:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c930:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c934:	2b00      	cmp	r3, #0
2405c936:	d10a      	bne.n	2405c94e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
2405c938:	4b6e      	ldr	r3, [pc, #440]	; (2405caf4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c93c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
2405c940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2405c946:	4a6b      	ldr	r2, [pc, #428]	; (2405caf4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c948:	430b      	orrs	r3, r1
2405c94a:	6513      	str	r3, [r2, #80]	; 0x50
2405c94c:	e003      	b.n	2405c956 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c94e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c952:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2405c956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c95a:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c95e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
2405c962:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
2405c966:	2300      	movs	r3, #0
2405c968:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
2405c96c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
2405c970:	460b      	mov	r3, r1
2405c972:	4313      	orrs	r3, r2
2405c974:	d053      	beq.n	2405ca1e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
2405c976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c97a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2405c97c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405c980:	d033      	beq.n	2405c9ea <HAL_RCCEx_PeriphCLKConfig+0x4ee>
2405c982:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405c986:	d82c      	bhi.n	2405c9e2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405c988:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405c98c:	d02f      	beq.n	2405c9ee <HAL_RCCEx_PeriphCLKConfig+0x4f2>
2405c98e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405c992:	d826      	bhi.n	2405c9e2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405c994:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405c998:	d02b      	beq.n	2405c9f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
2405c99a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405c99e:	d820      	bhi.n	2405c9e2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405c9a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c9a4:	d012      	beq.n	2405c9cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
2405c9a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c9aa:	d81a      	bhi.n	2405c9e2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405c9ac:	2b00      	cmp	r3, #0
2405c9ae:	d022      	beq.n	2405c9f6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
2405c9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405c9b4:	d115      	bne.n	2405c9e2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405c9b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c9ba:	3308      	adds	r3, #8
2405c9bc:	2101      	movs	r1, #1
2405c9be:	4618      	mov	r0, r3
2405c9c0:	f002 f842 	bl	2405ea48 <RCCEx_PLL2_Config>
2405c9c4:	4603      	mov	r3, r0
2405c9c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
2405c9ca:	e015      	b.n	2405c9f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405c9cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c9d0:	3328      	adds	r3, #40	; 0x28
2405c9d2:	2101      	movs	r1, #1
2405c9d4:	4618      	mov	r0, r3
2405c9d6:	f002 f8e9 	bl	2405ebac <RCCEx_PLL3_Config>
2405c9da:	4603      	mov	r3, r0
2405c9dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
2405c9e0:	e00a      	b.n	2405c9f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405c9e2:	2301      	movs	r3, #1
2405c9e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c9e8:	e006      	b.n	2405c9f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405c9ea:	bf00      	nop
2405c9ec:	e004      	b.n	2405c9f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405c9ee:	bf00      	nop
2405c9f0:	e002      	b.n	2405c9f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405c9f2:	bf00      	nop
2405c9f4:	e000      	b.n	2405c9f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405c9f6:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c9f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c9fc:	2b00      	cmp	r3, #0
2405c9fe:	d10a      	bne.n	2405ca16 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
2405ca00:	4b3c      	ldr	r3, [pc, #240]	; (2405caf4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405ca02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405ca04:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
2405ca08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ca0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2405ca0e:	4a39      	ldr	r2, [pc, #228]	; (2405caf4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405ca10:	430b      	orrs	r3, r1
2405ca12:	6513      	str	r3, [r2, #80]	; 0x50
2405ca14:	e003      	b.n	2405ca1e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405ca16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ca1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
2405ca1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ca22:	e9d3 2300 	ldrd	r2, r3, [r3]
2405ca26:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
2405ca2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
2405ca2e:	2300      	movs	r3, #0
2405ca30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
2405ca34:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
2405ca38:	460b      	mov	r3, r1
2405ca3a:	4313      	orrs	r3, r2
2405ca3c:	d060      	beq.n	2405cb00 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
2405ca3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ca42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2405ca46:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405ca4a:	d039      	beq.n	2405cac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
2405ca4c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405ca50:	d832      	bhi.n	2405cab8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405ca52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405ca56:	d035      	beq.n	2405cac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
2405ca58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405ca5c:	d82c      	bhi.n	2405cab8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405ca5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405ca62:	d031      	beq.n	2405cac8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
2405ca64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405ca68:	d826      	bhi.n	2405cab8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405ca6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405ca6e:	d02d      	beq.n	2405cacc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
2405ca70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405ca74:	d820      	bhi.n	2405cab8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405ca76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405ca7a:	d012      	beq.n	2405caa2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
2405ca7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405ca80:	d81a      	bhi.n	2405cab8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405ca82:	2b00      	cmp	r3, #0
2405ca84:	d024      	beq.n	2405cad0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
2405ca86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405ca8a:	d115      	bne.n	2405cab8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405ca8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ca90:	3308      	adds	r3, #8
2405ca92:	2101      	movs	r1, #1
2405ca94:	4618      	mov	r0, r3
2405ca96:	f001 ffd7 	bl	2405ea48 <RCCEx_PLL2_Config>
2405ca9a:	4603      	mov	r3, r0
2405ca9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
2405caa0:	e017      	b.n	2405cad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405caa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405caa6:	3328      	adds	r3, #40	; 0x28
2405caa8:	2101      	movs	r1, #1
2405caaa:	4618      	mov	r0, r3
2405caac:	f002 f87e 	bl	2405ebac <RCCEx_PLL3_Config>
2405cab0:	4603      	mov	r3, r0
2405cab2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
2405cab6:	e00c      	b.n	2405cad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
2405cab8:	2301      	movs	r3, #1
2405caba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405cabe:	e008      	b.n	2405cad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405cac0:	bf00      	nop
2405cac2:	e006      	b.n	2405cad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405cac4:	bf00      	nop
2405cac6:	e004      	b.n	2405cad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405cac8:	bf00      	nop
2405caca:	e002      	b.n	2405cad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405cacc:	bf00      	nop
2405cace:	e000      	b.n	2405cad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405cad0:	bf00      	nop
    }

    if (ret == HAL_OK)
2405cad2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cad6:	2b00      	cmp	r3, #0
2405cad8:	d10e      	bne.n	2405caf8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
2405cada:	4b06      	ldr	r3, [pc, #24]	; (2405caf4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405cadc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405cade:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
2405cae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cae6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2405caea:	4a02      	ldr	r2, [pc, #8]	; (2405caf4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405caec:	430b      	orrs	r3, r1
2405caee:	6593      	str	r3, [r2, #88]	; 0x58
2405caf0:	e006      	b.n	2405cb00 <HAL_RCCEx_PeriphCLKConfig+0x604>
2405caf2:	bf00      	nop
2405caf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405caf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cafc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
2405cb00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cb04:	e9d3 2300 	ldrd	r2, r3, [r3]
2405cb08:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
2405cb0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
2405cb10:	2300      	movs	r3, #0
2405cb12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
2405cb16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
2405cb1a:	460b      	mov	r3, r1
2405cb1c:	4313      	orrs	r3, r2
2405cb1e:	d037      	beq.n	2405cb90 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
2405cb20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cb24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2405cb26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405cb2a:	d00e      	beq.n	2405cb4a <HAL_RCCEx_PeriphCLKConfig+0x64e>
2405cb2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405cb30:	d816      	bhi.n	2405cb60 <HAL_RCCEx_PeriphCLKConfig+0x664>
2405cb32:	2b00      	cmp	r3, #0
2405cb34:	d018      	beq.n	2405cb68 <HAL_RCCEx_PeriphCLKConfig+0x66c>
2405cb36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405cb3a:	d111      	bne.n	2405cb60 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405cb3c:	4bc4      	ldr	r3, [pc, #784]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cb40:	4ac3      	ldr	r2, [pc, #780]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cb42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405cb46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
2405cb48:	e00f      	b.n	2405cb6a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405cb4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cb4e:	3308      	adds	r3, #8
2405cb50:	2101      	movs	r1, #1
2405cb52:	4618      	mov	r0, r3
2405cb54:	f001 ff78 	bl	2405ea48 <RCCEx_PLL2_Config>
2405cb58:	4603      	mov	r3, r0
2405cb5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
2405cb5e:	e004      	b.n	2405cb6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405cb60:	2301      	movs	r3, #1
2405cb62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405cb66:	e000      	b.n	2405cb6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
2405cb68:	bf00      	nop
    }

    if (ret == HAL_OK)
2405cb6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cb6e:	2b00      	cmp	r3, #0
2405cb70:	d10a      	bne.n	2405cb88 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
2405cb72:	4bb7      	ldr	r3, [pc, #732]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cb74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405cb76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
2405cb7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cb7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2405cb80:	4ab3      	ldr	r2, [pc, #716]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cb82:	430b      	orrs	r3, r1
2405cb84:	6513      	str	r3, [r2, #80]	; 0x50
2405cb86:	e003      	b.n	2405cb90 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405cb88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cb8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2405cb90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
2405cb98:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
2405cb9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
2405cba0:	2300      	movs	r3, #0
2405cba2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
2405cba6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
2405cbaa:	460b      	mov	r3, r1
2405cbac:	4313      	orrs	r3, r2
2405cbae:	d039      	beq.n	2405cc24 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
2405cbb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cbb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405cbb6:	2b03      	cmp	r3, #3
2405cbb8:	d81c      	bhi.n	2405cbf4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
2405cbba:	a201      	add	r2, pc, #4	; (adr r2, 2405cbc0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
2405cbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405cbc0:	2405cbfd 	.word	0x2405cbfd
2405cbc4:	2405cbd1 	.word	0x2405cbd1
2405cbc8:	2405cbdf 	.word	0x2405cbdf
2405cbcc:	2405cbfd 	.word	0x2405cbfd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405cbd0:	4b9f      	ldr	r3, [pc, #636]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cbd4:	4a9e      	ldr	r2, [pc, #632]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cbd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405cbda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
2405cbdc:	e00f      	b.n	2405cbfe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405cbde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cbe2:	3308      	adds	r3, #8
2405cbe4:	2102      	movs	r1, #2
2405cbe6:	4618      	mov	r0, r3
2405cbe8:	f001 ff2e 	bl	2405ea48 <RCCEx_PLL2_Config>
2405cbec:	4603      	mov	r3, r0
2405cbee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
2405cbf2:	e004      	b.n	2405cbfe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
2405cbf4:	2301      	movs	r3, #1
2405cbf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405cbfa:	e000      	b.n	2405cbfe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
2405cbfc:	bf00      	nop
    }

    if (ret == HAL_OK)
2405cbfe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cc02:	2b00      	cmp	r3, #0
2405cc04:	d10a      	bne.n	2405cc1c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
2405cc06:	4b92      	ldr	r3, [pc, #584]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cc08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405cc0a:	f023 0103 	bic.w	r1, r3, #3
2405cc0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cc12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405cc14:	4a8e      	ldr	r2, [pc, #568]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cc16:	430b      	orrs	r3, r1
2405cc18:	64d3      	str	r3, [r2, #76]	; 0x4c
2405cc1a:	e003      	b.n	2405cc24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405cc1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cc20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2405cc24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
2405cc2c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
2405cc30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
2405cc34:	2300      	movs	r3, #0
2405cc36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
2405cc3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
2405cc3e:	460b      	mov	r3, r1
2405cc40:	4313      	orrs	r3, r2
2405cc42:	f000 8099 	beq.w	2405cd78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2405cc46:	4b83      	ldr	r3, [pc, #524]	; (2405ce54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
2405cc48:	681b      	ldr	r3, [r3, #0]
2405cc4a:	4a82      	ldr	r2, [pc, #520]	; (2405ce54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
2405cc4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405cc50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
2405cc52:	f7f7 f8f7 	bl	24053e44 <HAL_GetTick>
2405cc56:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405cc5a:	e00b      	b.n	2405cc74 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2405cc5c:	f7f7 f8f2 	bl	24053e44 <HAL_GetTick>
2405cc60:	4602      	mov	r2, r0
2405cc62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
2405cc66:	1ad3      	subs	r3, r2, r3
2405cc68:	2b64      	cmp	r3, #100	; 0x64
2405cc6a:	d903      	bls.n	2405cc74 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
2405cc6c:	2303      	movs	r3, #3
2405cc6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405cc72:	e005      	b.n	2405cc80 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405cc74:	4b77      	ldr	r3, [pc, #476]	; (2405ce54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
2405cc76:	681b      	ldr	r3, [r3, #0]
2405cc78:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405cc7c:	2b00      	cmp	r3, #0
2405cc7e:	d0ed      	beq.n	2405cc5c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
2405cc80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cc84:	2b00      	cmp	r3, #0
2405cc86:	d173      	bne.n	2405cd70 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
2405cc88:	4b71      	ldr	r3, [pc, #452]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cc8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2405cc8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cc90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405cc94:	4053      	eors	r3, r2
2405cc96:	f403 7340 	and.w	r3, r3, #768	; 0x300
2405cc9a:	2b00      	cmp	r3, #0
2405cc9c:	d015      	beq.n	2405ccca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2405cc9e:	4b6c      	ldr	r3, [pc, #432]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405cca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2405cca6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
2405ccaa:	4b69      	ldr	r3, [pc, #420]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405ccac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ccae:	4a68      	ldr	r2, [pc, #416]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405ccb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405ccb4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
2405ccb6:	4b66      	ldr	r3, [pc, #408]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405ccb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ccba:	4a65      	ldr	r2, [pc, #404]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405ccbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2405ccc0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
2405ccc2:	4a63      	ldr	r2, [pc, #396]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405ccc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2405ccc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
2405ccca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ccce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405ccd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405ccd6:	d118      	bne.n	2405cd0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405ccd8:	f7f7 f8b4 	bl	24053e44 <HAL_GetTick>
2405ccdc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405cce0:	e00d      	b.n	2405ccfe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405cce2:	f7f7 f8af 	bl	24053e44 <HAL_GetTick>
2405cce6:	4602      	mov	r2, r0
2405cce8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
2405ccec:	1ad2      	subs	r2, r2, r3
2405ccee:	f241 3388 	movw	r3, #5000	; 0x1388
2405ccf2:	429a      	cmp	r2, r3
2405ccf4:	d903      	bls.n	2405ccfe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
2405ccf6:	2303      	movs	r3, #3
2405ccf8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
2405ccfc:	e005      	b.n	2405cd0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405ccfe:	4b54      	ldr	r3, [pc, #336]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cd00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405cd02:	f003 0302 	and.w	r3, r3, #2
2405cd06:	2b00      	cmp	r3, #0
2405cd08:	d0eb      	beq.n	2405cce2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
2405cd0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cd0e:	2b00      	cmp	r3, #0
2405cd10:	d129      	bne.n	2405cd66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2405cd12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cd16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405cd1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
2405cd1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2405cd22:	d10e      	bne.n	2405cd42 <HAL_RCCEx_PeriphCLKConfig+0x846>
2405cd24:	4b4a      	ldr	r3, [pc, #296]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cd26:	691b      	ldr	r3, [r3, #16]
2405cd28:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
2405cd2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cd30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405cd34:	091a      	lsrs	r2, r3, #4
2405cd36:	4b48      	ldr	r3, [pc, #288]	; (2405ce58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
2405cd38:	4013      	ands	r3, r2
2405cd3a:	4a45      	ldr	r2, [pc, #276]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cd3c:	430b      	orrs	r3, r1
2405cd3e:	6113      	str	r3, [r2, #16]
2405cd40:	e005      	b.n	2405cd4e <HAL_RCCEx_PeriphCLKConfig+0x852>
2405cd42:	4b43      	ldr	r3, [pc, #268]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cd44:	691b      	ldr	r3, [r3, #16]
2405cd46:	4a42      	ldr	r2, [pc, #264]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cd48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
2405cd4c:	6113      	str	r3, [r2, #16]
2405cd4e:	4b40      	ldr	r3, [pc, #256]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cd50:	6f19      	ldr	r1, [r3, #112]	; 0x70
2405cd52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cd56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405cd5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
2405cd5e:	4a3c      	ldr	r2, [pc, #240]	; (2405ce50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cd60:	430b      	orrs	r3, r1
2405cd62:	6713      	str	r3, [r2, #112]	; 0x70
2405cd64:	e008      	b.n	2405cd78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
2405cd66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cd6a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
2405cd6e:	e003      	b.n	2405cd78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
2405cd70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cd74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2405cd78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
2405cd80:	f002 0301 	and.w	r3, r2, #1
2405cd84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
2405cd88:	2300      	movs	r3, #0
2405cd8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
2405cd8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
2405cd92:	460b      	mov	r3, r1
2405cd94:	4313      	orrs	r3, r2
2405cd96:	f000 8090 	beq.w	2405ceba <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
2405cd9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cd9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405cda2:	2b28      	cmp	r3, #40	; 0x28
2405cda4:	d870      	bhi.n	2405ce88 <HAL_RCCEx_PeriphCLKConfig+0x98c>
2405cda6:	a201      	add	r2, pc, #4	; (adr r2, 2405cdac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
2405cda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405cdac:	2405ce91 	.word	0x2405ce91
2405cdb0:	2405ce89 	.word	0x2405ce89
2405cdb4:	2405ce89 	.word	0x2405ce89
2405cdb8:	2405ce89 	.word	0x2405ce89
2405cdbc:	2405ce89 	.word	0x2405ce89
2405cdc0:	2405ce89 	.word	0x2405ce89
2405cdc4:	2405ce89 	.word	0x2405ce89
2405cdc8:	2405ce89 	.word	0x2405ce89
2405cdcc:	2405ce5d 	.word	0x2405ce5d
2405cdd0:	2405ce89 	.word	0x2405ce89
2405cdd4:	2405ce89 	.word	0x2405ce89
2405cdd8:	2405ce89 	.word	0x2405ce89
2405cddc:	2405ce89 	.word	0x2405ce89
2405cde0:	2405ce89 	.word	0x2405ce89
2405cde4:	2405ce89 	.word	0x2405ce89
2405cde8:	2405ce89 	.word	0x2405ce89
2405cdec:	2405ce73 	.word	0x2405ce73
2405cdf0:	2405ce89 	.word	0x2405ce89
2405cdf4:	2405ce89 	.word	0x2405ce89
2405cdf8:	2405ce89 	.word	0x2405ce89
2405cdfc:	2405ce89 	.word	0x2405ce89
2405ce00:	2405ce89 	.word	0x2405ce89
2405ce04:	2405ce89 	.word	0x2405ce89
2405ce08:	2405ce89 	.word	0x2405ce89
2405ce0c:	2405ce91 	.word	0x2405ce91
2405ce10:	2405ce89 	.word	0x2405ce89
2405ce14:	2405ce89 	.word	0x2405ce89
2405ce18:	2405ce89 	.word	0x2405ce89
2405ce1c:	2405ce89 	.word	0x2405ce89
2405ce20:	2405ce89 	.word	0x2405ce89
2405ce24:	2405ce89 	.word	0x2405ce89
2405ce28:	2405ce89 	.word	0x2405ce89
2405ce2c:	2405ce91 	.word	0x2405ce91
2405ce30:	2405ce89 	.word	0x2405ce89
2405ce34:	2405ce89 	.word	0x2405ce89
2405ce38:	2405ce89 	.word	0x2405ce89
2405ce3c:	2405ce89 	.word	0x2405ce89
2405ce40:	2405ce89 	.word	0x2405ce89
2405ce44:	2405ce89 	.word	0x2405ce89
2405ce48:	2405ce89 	.word	0x2405ce89
2405ce4c:	2405ce91 	.word	0x2405ce91
2405ce50:	58024400 	.word	0x58024400
2405ce54:	58024800 	.word	0x58024800
2405ce58:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405ce5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ce60:	3308      	adds	r3, #8
2405ce62:	2101      	movs	r1, #1
2405ce64:	4618      	mov	r0, r3
2405ce66:	f001 fdef 	bl	2405ea48 <RCCEx_PLL2_Config>
2405ce6a:	4603      	mov	r3, r0
2405ce6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
2405ce70:	e00f      	b.n	2405ce92 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405ce72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ce76:	3328      	adds	r3, #40	; 0x28
2405ce78:	2101      	movs	r1, #1
2405ce7a:	4618      	mov	r0, r3
2405ce7c:	f001 fe96 	bl	2405ebac <RCCEx_PLL3_Config>
2405ce80:	4603      	mov	r3, r0
2405ce82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
2405ce86:	e004      	b.n	2405ce92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405ce88:	2301      	movs	r3, #1
2405ce8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405ce8e:	e000      	b.n	2405ce92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
2405ce90:	bf00      	nop
    }

    if (ret == HAL_OK)
2405ce92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ce96:	2b00      	cmp	r3, #0
2405ce98:	d10b      	bne.n	2405ceb2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
2405ce9a:	4bc0      	ldr	r3, [pc, #768]	; (2405d19c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405ce9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405ce9e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
2405cea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405ceaa:	4abc      	ldr	r2, [pc, #752]	; (2405d19c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405ceac:	430b      	orrs	r3, r1
2405ceae:	6553      	str	r3, [r2, #84]	; 0x54
2405ceb0:	e003      	b.n	2405ceba <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405ceb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ceb6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
2405ceba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cebe:	e9d3 2300 	ldrd	r2, r3, [r3]
2405cec2:	f002 0302 	and.w	r3, r2, #2
2405cec6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
2405ceca:	2300      	movs	r3, #0
2405cecc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
2405ced0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
2405ced4:	460b      	mov	r3, r1
2405ced6:	4313      	orrs	r3, r2
2405ced8:	d043      	beq.n	2405cf62 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
2405ceda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405cee2:	2b05      	cmp	r3, #5
2405cee4:	d824      	bhi.n	2405cf30 <HAL_RCCEx_PeriphCLKConfig+0xa34>
2405cee6:	a201      	add	r2, pc, #4	; (adr r2, 2405ceec <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
2405cee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405ceec:	2405cf39 	.word	0x2405cf39
2405cef0:	2405cf05 	.word	0x2405cf05
2405cef4:	2405cf1b 	.word	0x2405cf1b
2405cef8:	2405cf39 	.word	0x2405cf39
2405cefc:	2405cf39 	.word	0x2405cf39
2405cf00:	2405cf39 	.word	0x2405cf39
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405cf04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cf08:	3308      	adds	r3, #8
2405cf0a:	2101      	movs	r1, #1
2405cf0c:	4618      	mov	r0, r3
2405cf0e:	f001 fd9b 	bl	2405ea48 <RCCEx_PLL2_Config>
2405cf12:	4603      	mov	r3, r0
2405cf14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
2405cf18:	e00f      	b.n	2405cf3a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405cf1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cf1e:	3328      	adds	r3, #40	; 0x28
2405cf20:	2101      	movs	r1, #1
2405cf22:	4618      	mov	r0, r3
2405cf24:	f001 fe42 	bl	2405ebac <RCCEx_PLL3_Config>
2405cf28:	4603      	mov	r3, r0
2405cf2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
2405cf2e:	e004      	b.n	2405cf3a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405cf30:	2301      	movs	r3, #1
2405cf32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405cf36:	e000      	b.n	2405cf3a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
2405cf38:	bf00      	nop
    }

    if (ret == HAL_OK)
2405cf3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cf3e:	2b00      	cmp	r3, #0
2405cf40:	d10b      	bne.n	2405cf5a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
2405cf42:	4b96      	ldr	r3, [pc, #600]	; (2405d19c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405cf44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405cf46:	f023 0107 	bic.w	r1, r3, #7
2405cf4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cf4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405cf52:	4a92      	ldr	r2, [pc, #584]	; (2405d19c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405cf54:	430b      	orrs	r3, r1
2405cf56:	6553      	str	r3, [r2, #84]	; 0x54
2405cf58:	e003      	b.n	2405cf62 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405cf5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cf5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
2405cf62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cf66:	e9d3 2300 	ldrd	r2, r3, [r3]
2405cf6a:	f002 0304 	and.w	r3, r2, #4
2405cf6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
2405cf72:	2300      	movs	r3, #0
2405cf74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
2405cf78:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
2405cf7c:	460b      	mov	r3, r1
2405cf7e:	4313      	orrs	r3, r2
2405cf80:	d043      	beq.n	2405d00a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
2405cf82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cf86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
2405cf8a:	2b05      	cmp	r3, #5
2405cf8c:	d824      	bhi.n	2405cfd8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
2405cf8e:	a201      	add	r2, pc, #4	; (adr r2, 2405cf94 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
2405cf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405cf94:	2405cfe1 	.word	0x2405cfe1
2405cf98:	2405cfad 	.word	0x2405cfad
2405cf9c:	2405cfc3 	.word	0x2405cfc3
2405cfa0:	2405cfe1 	.word	0x2405cfe1
2405cfa4:	2405cfe1 	.word	0x2405cfe1
2405cfa8:	2405cfe1 	.word	0x2405cfe1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405cfac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cfb0:	3308      	adds	r3, #8
2405cfb2:	2101      	movs	r1, #1
2405cfb4:	4618      	mov	r0, r3
2405cfb6:	f001 fd47 	bl	2405ea48 <RCCEx_PLL2_Config>
2405cfba:	4603      	mov	r3, r0
2405cfbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
2405cfc0:	e00f      	b.n	2405cfe2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405cfc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cfc6:	3328      	adds	r3, #40	; 0x28
2405cfc8:	2101      	movs	r1, #1
2405cfca:	4618      	mov	r0, r3
2405cfcc:	f001 fdee 	bl	2405ebac <RCCEx_PLL3_Config>
2405cfd0:	4603      	mov	r3, r0
2405cfd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
2405cfd6:	e004      	b.n	2405cfe2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405cfd8:	2301      	movs	r3, #1
2405cfda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405cfde:	e000      	b.n	2405cfe2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
2405cfe0:	bf00      	nop
    }

    if (ret == HAL_OK)
2405cfe2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cfe6:	2b00      	cmp	r3, #0
2405cfe8:	d10b      	bne.n	2405d002 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
2405cfea:	4b6c      	ldr	r3, [pc, #432]	; (2405d19c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405cfec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405cfee:	f023 0107 	bic.w	r1, r3, #7
2405cff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
2405cffa:	4a68      	ldr	r2, [pc, #416]	; (2405d19c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405cffc:	430b      	orrs	r3, r1
2405cffe:	6593      	str	r3, [r2, #88]	; 0x58
2405d000:	e003      	b.n	2405d00a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d002:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d006:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2405d00a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d00e:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d012:	f002 0320 	and.w	r3, r2, #32
2405d016:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
2405d01a:	2300      	movs	r3, #0
2405d01c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
2405d020:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
2405d024:	460b      	mov	r3, r1
2405d026:	4313      	orrs	r3, r2
2405d028:	d055      	beq.n	2405d0d6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
2405d02a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d02e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
2405d032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405d036:	d033      	beq.n	2405d0a0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
2405d038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405d03c:	d82c      	bhi.n	2405d098 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405d03e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405d042:	d02f      	beq.n	2405d0a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
2405d044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405d048:	d826      	bhi.n	2405d098 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405d04a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405d04e:	d02b      	beq.n	2405d0a8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
2405d050:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405d054:	d820      	bhi.n	2405d098 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405d056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405d05a:	d012      	beq.n	2405d082 <HAL_RCCEx_PeriphCLKConfig+0xb86>
2405d05c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405d060:	d81a      	bhi.n	2405d098 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405d062:	2b00      	cmp	r3, #0
2405d064:	d022      	beq.n	2405d0ac <HAL_RCCEx_PeriphCLKConfig+0xbb0>
2405d066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405d06a:	d115      	bne.n	2405d098 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405d06c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d070:	3308      	adds	r3, #8
2405d072:	2100      	movs	r1, #0
2405d074:	4618      	mov	r0, r3
2405d076:	f001 fce7 	bl	2405ea48 <RCCEx_PLL2_Config>
2405d07a:	4603      	mov	r3, r0
2405d07c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
2405d080:	e015      	b.n	2405d0ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405d082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d086:	3328      	adds	r3, #40	; 0x28
2405d088:	2102      	movs	r1, #2
2405d08a:	4618      	mov	r0, r3
2405d08c:	f001 fd8e 	bl	2405ebac <RCCEx_PLL3_Config>
2405d090:	4603      	mov	r3, r0
2405d092:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
2405d096:	e00a      	b.n	2405d0ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405d098:	2301      	movs	r3, #1
2405d09a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d09e:	e006      	b.n	2405d0ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405d0a0:	bf00      	nop
2405d0a2:	e004      	b.n	2405d0ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405d0a4:	bf00      	nop
2405d0a6:	e002      	b.n	2405d0ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405d0a8:	bf00      	nop
2405d0aa:	e000      	b.n	2405d0ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405d0ac:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d0ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d0b2:	2b00      	cmp	r3, #0
2405d0b4:	d10b      	bne.n	2405d0ce <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2405d0b6:	4b39      	ldr	r3, [pc, #228]	; (2405d19c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405d0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d0ba:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
2405d0be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d0c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
2405d0c6:	4a35      	ldr	r2, [pc, #212]	; (2405d19c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405d0c8:	430b      	orrs	r3, r1
2405d0ca:	6553      	str	r3, [r2, #84]	; 0x54
2405d0cc:	e003      	b.n	2405d0d6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d0ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d0d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
2405d0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d0de:	f002 0340 	and.w	r3, r2, #64	; 0x40
2405d0e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
2405d0e6:	2300      	movs	r3, #0
2405d0e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
2405d0ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
2405d0f0:	460b      	mov	r3, r1
2405d0f2:	4313      	orrs	r3, r2
2405d0f4:	d058      	beq.n	2405d1a8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
2405d0f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d0fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
2405d0fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
2405d102:	d033      	beq.n	2405d16c <HAL_RCCEx_PeriphCLKConfig+0xc70>
2405d104:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
2405d108:	d82c      	bhi.n	2405d164 <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405d10a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405d10e:	d02f      	beq.n	2405d170 <HAL_RCCEx_PeriphCLKConfig+0xc74>
2405d110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405d114:	d826      	bhi.n	2405d164 <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405d116:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
2405d11a:	d02b      	beq.n	2405d174 <HAL_RCCEx_PeriphCLKConfig+0xc78>
2405d11c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
2405d120:	d820      	bhi.n	2405d164 <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405d122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405d126:	d012      	beq.n	2405d14e <HAL_RCCEx_PeriphCLKConfig+0xc52>
2405d128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405d12c:	d81a      	bhi.n	2405d164 <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405d12e:	2b00      	cmp	r3, #0
2405d130:	d022      	beq.n	2405d178 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
2405d132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405d136:	d115      	bne.n	2405d164 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405d138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d13c:	3308      	adds	r3, #8
2405d13e:	2100      	movs	r1, #0
2405d140:	4618      	mov	r0, r3
2405d142:	f001 fc81 	bl	2405ea48 <RCCEx_PLL2_Config>
2405d146:	4603      	mov	r3, r0
2405d148:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
2405d14c:	e015      	b.n	2405d17a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405d14e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d152:	3328      	adds	r3, #40	; 0x28
2405d154:	2102      	movs	r1, #2
2405d156:	4618      	mov	r0, r3
2405d158:	f001 fd28 	bl	2405ebac <RCCEx_PLL3_Config>
2405d15c:	4603      	mov	r3, r0
2405d15e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
2405d162:	e00a      	b.n	2405d17a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405d164:	2301      	movs	r3, #1
2405d166:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d16a:	e006      	b.n	2405d17a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405d16c:	bf00      	nop
2405d16e:	e004      	b.n	2405d17a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405d170:	bf00      	nop
2405d172:	e002      	b.n	2405d17a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405d174:	bf00      	nop
2405d176:	e000      	b.n	2405d17a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405d178:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d17a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d17e:	2b00      	cmp	r3, #0
2405d180:	d10e      	bne.n	2405d1a0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
2405d182:	4b06      	ldr	r3, [pc, #24]	; (2405d19c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405d184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405d186:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
2405d18a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d18e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
2405d192:	4a02      	ldr	r2, [pc, #8]	; (2405d19c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405d194:	430b      	orrs	r3, r1
2405d196:	6593      	str	r3, [r2, #88]	; 0x58
2405d198:	e006      	b.n	2405d1a8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
2405d19a:	bf00      	nop
2405d19c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d1a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d1a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
2405d1a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d1b0:	f002 0380 	and.w	r3, r2, #128	; 0x80
2405d1b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
2405d1b8:	2300      	movs	r3, #0
2405d1ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
2405d1be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
2405d1c2:	460b      	mov	r3, r1
2405d1c4:	4313      	orrs	r3, r2
2405d1c6:	d055      	beq.n	2405d274 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
2405d1c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d1cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
2405d1d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
2405d1d4:	d033      	beq.n	2405d23e <HAL_RCCEx_PeriphCLKConfig+0xd42>
2405d1d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
2405d1da:	d82c      	bhi.n	2405d236 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405d1dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2405d1e0:	d02f      	beq.n	2405d242 <HAL_RCCEx_PeriphCLKConfig+0xd46>
2405d1e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2405d1e6:	d826      	bhi.n	2405d236 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405d1e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
2405d1ec:	d02b      	beq.n	2405d246 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
2405d1ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
2405d1f2:	d820      	bhi.n	2405d236 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405d1f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405d1f8:	d012      	beq.n	2405d220 <HAL_RCCEx_PeriphCLKConfig+0xd24>
2405d1fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405d1fe:	d81a      	bhi.n	2405d236 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405d200:	2b00      	cmp	r3, #0
2405d202:	d022      	beq.n	2405d24a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
2405d204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405d208:	d115      	bne.n	2405d236 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405d20a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d20e:	3308      	adds	r3, #8
2405d210:	2100      	movs	r1, #0
2405d212:	4618      	mov	r0, r3
2405d214:	f001 fc18 	bl	2405ea48 <RCCEx_PLL2_Config>
2405d218:	4603      	mov	r3, r0
2405d21a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
2405d21e:	e015      	b.n	2405d24c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405d220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d224:	3328      	adds	r3, #40	; 0x28
2405d226:	2102      	movs	r1, #2
2405d228:	4618      	mov	r0, r3
2405d22a:	f001 fcbf 	bl	2405ebac <RCCEx_PLL3_Config>
2405d22e:	4603      	mov	r3, r0
2405d230:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
2405d234:	e00a      	b.n	2405d24c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405d236:	2301      	movs	r3, #1
2405d238:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d23c:	e006      	b.n	2405d24c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405d23e:	bf00      	nop
2405d240:	e004      	b.n	2405d24c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405d242:	bf00      	nop
2405d244:	e002      	b.n	2405d24c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405d246:	bf00      	nop
2405d248:	e000      	b.n	2405d24c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405d24a:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d24c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d250:	2b00      	cmp	r3, #0
2405d252:	d10b      	bne.n	2405d26c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
2405d254:	4ba1      	ldr	r3, [pc, #644]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405d258:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
2405d25c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d260:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
2405d264:	4a9d      	ldr	r2, [pc, #628]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d266:	430b      	orrs	r3, r1
2405d268:	6593      	str	r3, [r2, #88]	; 0x58
2405d26a:	e003      	b.n	2405d274 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d26c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d270:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
2405d274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d278:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d27c:	f002 0308 	and.w	r3, r2, #8
2405d280:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
2405d284:	2300      	movs	r3, #0
2405d286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
2405d28a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
2405d28e:	460b      	mov	r3, r1
2405d290:	4313      	orrs	r3, r2
2405d292:	d01e      	beq.n	2405d2d2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
2405d294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2405d29c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405d2a0:	d10c      	bne.n	2405d2bc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2405d2a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d2a6:	3328      	adds	r3, #40	; 0x28
2405d2a8:	2102      	movs	r1, #2
2405d2aa:	4618      	mov	r0, r3
2405d2ac:	f001 fc7e 	bl	2405ebac <RCCEx_PLL3_Config>
2405d2b0:	4603      	mov	r3, r0
2405d2b2:	2b00      	cmp	r3, #0
2405d2b4:	d002      	beq.n	2405d2bc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
2405d2b6:	2301      	movs	r3, #1
2405d2b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
2405d2bc:	4b87      	ldr	r3, [pc, #540]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d2c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
2405d2c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d2c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2405d2cc:	4a83      	ldr	r2, [pc, #524]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d2ce:	430b      	orrs	r3, r1
2405d2d0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2405d2d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d2da:	f002 0310 	and.w	r3, r2, #16
2405d2de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
2405d2e2:	2300      	movs	r3, #0
2405d2e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
2405d2e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
2405d2ec:	460b      	mov	r3, r1
2405d2ee:	4313      	orrs	r3, r2
2405d2f0:	d01e      	beq.n	2405d330 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
2405d2f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d2f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
2405d2fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405d2fe:	d10c      	bne.n	2405d31a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2405d300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d304:	3328      	adds	r3, #40	; 0x28
2405d306:	2102      	movs	r1, #2
2405d308:	4618      	mov	r0, r3
2405d30a:	f001 fc4f 	bl	2405ebac <RCCEx_PLL3_Config>
2405d30e:	4603      	mov	r3, r0
2405d310:	2b00      	cmp	r3, #0
2405d312:	d002      	beq.n	2405d31a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
2405d314:	2301      	movs	r3, #1
2405d316:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
2405d31a:	4b70      	ldr	r3, [pc, #448]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405d31e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
2405d322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d326:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
2405d32a:	4a6c      	ldr	r2, [pc, #432]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d32c:	430b      	orrs	r3, r1
2405d32e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
2405d330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d334:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d338:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
2405d33c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
2405d340:	2300      	movs	r3, #0
2405d342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
2405d346:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
2405d34a:	460b      	mov	r3, r1
2405d34c:	4313      	orrs	r3, r2
2405d34e:	d03e      	beq.n	2405d3ce <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
2405d350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d354:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
2405d358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405d35c:	d022      	beq.n	2405d3a4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
2405d35e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405d362:	d81b      	bhi.n	2405d39c <HAL_RCCEx_PeriphCLKConfig+0xea0>
2405d364:	2b00      	cmp	r3, #0
2405d366:	d003      	beq.n	2405d370 <HAL_RCCEx_PeriphCLKConfig+0xe74>
2405d368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405d36c:	d00b      	beq.n	2405d386 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
2405d36e:	e015      	b.n	2405d39c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405d370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d374:	3308      	adds	r3, #8
2405d376:	2100      	movs	r1, #0
2405d378:	4618      	mov	r0, r3
2405d37a:	f001 fb65 	bl	2405ea48 <RCCEx_PLL2_Config>
2405d37e:	4603      	mov	r3, r0
2405d380:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
2405d384:	e00f      	b.n	2405d3a6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405d386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d38a:	3328      	adds	r3, #40	; 0x28
2405d38c:	2102      	movs	r1, #2
2405d38e:	4618      	mov	r0, r3
2405d390:	f001 fc0c 	bl	2405ebac <RCCEx_PLL3_Config>
2405d394:	4603      	mov	r3, r0
2405d396:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
2405d39a:	e004      	b.n	2405d3a6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405d39c:	2301      	movs	r3, #1
2405d39e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d3a2:	e000      	b.n	2405d3a6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
2405d3a4:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d3a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d3aa:	2b00      	cmp	r3, #0
2405d3ac:	d10b      	bne.n	2405d3c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
2405d3ae:	4b4b      	ldr	r3, [pc, #300]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405d3b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
2405d3b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d3ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
2405d3be:	4a47      	ldr	r2, [pc, #284]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d3c0:	430b      	orrs	r3, r1
2405d3c2:	6593      	str	r3, [r2, #88]	; 0x58
2405d3c4:	e003      	b.n	2405d3ce <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d3c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d3ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2405d3ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d3d6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
2405d3da:	67bb      	str	r3, [r7, #120]	; 0x78
2405d3dc:	2300      	movs	r3, #0
2405d3de:	67fb      	str	r3, [r7, #124]	; 0x7c
2405d3e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
2405d3e4:	460b      	mov	r3, r1
2405d3e6:	4313      	orrs	r3, r2
2405d3e8:	d03b      	beq.n	2405d462 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
2405d3ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d3ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2405d3f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405d3f6:	d01f      	beq.n	2405d438 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
2405d3f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405d3fc:	d818      	bhi.n	2405d430 <HAL_RCCEx_PeriphCLKConfig+0xf34>
2405d3fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2405d402:	d003      	beq.n	2405d40c <HAL_RCCEx_PeriphCLKConfig+0xf10>
2405d404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405d408:	d007      	beq.n	2405d41a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
2405d40a:	e011      	b.n	2405d430 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405d40c:	4b33      	ldr	r3, [pc, #204]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d410:	4a32      	ldr	r2, [pc, #200]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405d416:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
2405d418:	e00f      	b.n	2405d43a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405d41a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d41e:	3328      	adds	r3, #40	; 0x28
2405d420:	2101      	movs	r1, #1
2405d422:	4618      	mov	r0, r3
2405d424:	f001 fbc2 	bl	2405ebac <RCCEx_PLL3_Config>
2405d428:	4603      	mov	r3, r0
2405d42a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
2405d42e:	e004      	b.n	2405d43a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405d430:	2301      	movs	r3, #1
2405d432:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d436:	e000      	b.n	2405d43a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
2405d438:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d43a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d43e:	2b00      	cmp	r3, #0
2405d440:	d10b      	bne.n	2405d45a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
2405d442:	4b26      	ldr	r3, [pc, #152]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d446:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
2405d44a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2405d452:	4a22      	ldr	r2, [pc, #136]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d454:	430b      	orrs	r3, r1
2405d456:	6553      	str	r3, [r2, #84]	; 0x54
2405d458:	e003      	b.n	2405d462 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d45a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d45e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2405d462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d466:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d46a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
2405d46e:	673b      	str	r3, [r7, #112]	; 0x70
2405d470:	2300      	movs	r3, #0
2405d472:	677b      	str	r3, [r7, #116]	; 0x74
2405d474:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
2405d478:	460b      	mov	r3, r1
2405d47a:	4313      	orrs	r3, r2
2405d47c:	d034      	beq.n	2405d4e8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
2405d47e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d484:	2b00      	cmp	r3, #0
2405d486:	d003      	beq.n	2405d490 <HAL_RCCEx_PeriphCLKConfig+0xf94>
2405d488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405d48c:	d007      	beq.n	2405d49e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
2405d48e:	e011      	b.n	2405d4b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405d490:	4b12      	ldr	r3, [pc, #72]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d494:	4a11      	ldr	r2, [pc, #68]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405d49a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
2405d49c:	e00e      	b.n	2405d4bc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405d49e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d4a2:	3308      	adds	r3, #8
2405d4a4:	2102      	movs	r1, #2
2405d4a6:	4618      	mov	r0, r3
2405d4a8:	f001 face 	bl	2405ea48 <RCCEx_PLL2_Config>
2405d4ac:	4603      	mov	r3, r0
2405d4ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
2405d4b2:	e003      	b.n	2405d4bc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
2405d4b4:	2301      	movs	r3, #1
2405d4b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d4ba:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d4bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d4c0:	2b00      	cmp	r3, #0
2405d4c2:	d10d      	bne.n	2405d4e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
2405d4c4:	4b05      	ldr	r3, [pc, #20]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d4c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405d4c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
2405d4cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d4d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d4d2:	4a02      	ldr	r2, [pc, #8]	; (2405d4dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d4d4:	430b      	orrs	r3, r1
2405d4d6:	64d3      	str	r3, [r2, #76]	; 0x4c
2405d4d8:	e006      	b.n	2405d4e8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
2405d4da:	bf00      	nop
2405d4dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d4e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d4e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2405d4e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d4f0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
2405d4f4:	66bb      	str	r3, [r7, #104]	; 0x68
2405d4f6:	2300      	movs	r3, #0
2405d4f8:	66fb      	str	r3, [r7, #108]	; 0x6c
2405d4fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
2405d4fe:	460b      	mov	r3, r1
2405d500:	4313      	orrs	r3, r2
2405d502:	d00c      	beq.n	2405d51e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2405d504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d508:	3328      	adds	r3, #40	; 0x28
2405d50a:	2102      	movs	r1, #2
2405d50c:	4618      	mov	r0, r3
2405d50e:	f001 fb4d 	bl	2405ebac <RCCEx_PLL3_Config>
2405d512:	4603      	mov	r3, r0
2405d514:	2b00      	cmp	r3, #0
2405d516:	d002      	beq.n	2405d51e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
2405d518:	2301      	movs	r3, #1
2405d51a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
2405d51e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d522:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d526:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
2405d52a:	663b      	str	r3, [r7, #96]	; 0x60
2405d52c:	2300      	movs	r3, #0
2405d52e:	667b      	str	r3, [r7, #100]	; 0x64
2405d530:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
2405d534:	460b      	mov	r3, r1
2405d536:	4313      	orrs	r3, r2
2405d538:	d038      	beq.n	2405d5ac <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
2405d53a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405d542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2405d546:	d018      	beq.n	2405d57a <HAL_RCCEx_PeriphCLKConfig+0x107e>
2405d548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2405d54c:	d811      	bhi.n	2405d572 <HAL_RCCEx_PeriphCLKConfig+0x1076>
2405d54e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405d552:	d014      	beq.n	2405d57e <HAL_RCCEx_PeriphCLKConfig+0x1082>
2405d554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405d558:	d80b      	bhi.n	2405d572 <HAL_RCCEx_PeriphCLKConfig+0x1076>
2405d55a:	2b00      	cmp	r3, #0
2405d55c:	d011      	beq.n	2405d582 <HAL_RCCEx_PeriphCLKConfig+0x1086>
2405d55e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405d562:	d106      	bne.n	2405d572 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405d564:	4bc3      	ldr	r3, [pc, #780]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d568:	4ac2      	ldr	r2, [pc, #776]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d56a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405d56e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
2405d570:	e008      	b.n	2405d584 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405d572:	2301      	movs	r3, #1
2405d574:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d578:	e004      	b.n	2405d584 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
2405d57a:	bf00      	nop
2405d57c:	e002      	b.n	2405d584 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
2405d57e:	bf00      	nop
2405d580:	e000      	b.n	2405d584 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
2405d582:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d584:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d588:	2b00      	cmp	r3, #0
2405d58a:	d10b      	bne.n	2405d5a4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
2405d58c:	4bb9      	ldr	r3, [pc, #740]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d590:	f423 7140 	bic.w	r1, r3, #768	; 0x300
2405d594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405d59c:	4ab5      	ldr	r2, [pc, #724]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d59e:	430b      	orrs	r3, r1
2405d5a0:	6553      	str	r3, [r2, #84]	; 0x54
2405d5a2:	e003      	b.n	2405d5ac <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d5a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d5a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2405d5ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d5b4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
2405d5b8:	65bb      	str	r3, [r7, #88]	; 0x58
2405d5ba:	2300      	movs	r3, #0
2405d5bc:	65fb      	str	r3, [r7, #92]	; 0x5c
2405d5be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
2405d5c2:	460b      	mov	r3, r1
2405d5c4:	4313      	orrs	r3, r2
2405d5c6:	d009      	beq.n	2405d5dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
2405d5c8:	4baa      	ldr	r3, [pc, #680]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d5ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d5cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
2405d5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d5d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
2405d5d6:	4aa7      	ldr	r2, [pc, #668]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d5d8:	430b      	orrs	r3, r1
2405d5da:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
2405d5dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d5e4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
2405d5e8:	653b      	str	r3, [r7, #80]	; 0x50
2405d5ea:	2300      	movs	r3, #0
2405d5ec:	657b      	str	r3, [r7, #84]	; 0x54
2405d5ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
2405d5f2:	460b      	mov	r3, r1
2405d5f4:	4313      	orrs	r3, r2
2405d5f6:	d009      	beq.n	2405d60c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
2405d5f8:	4b9e      	ldr	r3, [pc, #632]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d5fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d5fc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
2405d600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405d606:	4a9b      	ldr	r2, [pc, #620]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d608:	430b      	orrs	r3, r1
2405d60a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
2405d60c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d610:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d614:	f402 6300 	and.w	r3, r2, #2048	; 0x800
2405d618:	64bb      	str	r3, [r7, #72]	; 0x48
2405d61a:	2300      	movs	r3, #0
2405d61c:	64fb      	str	r3, [r7, #76]	; 0x4c
2405d61e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
2405d622:	460b      	mov	r3, r1
2405d624:	4313      	orrs	r3, r2
2405d626:	d009      	beq.n	2405d63c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
2405d628:	4b92      	ldr	r3, [pc, #584]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d62a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405d62c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
2405d630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405d636:	4a8f      	ldr	r2, [pc, #572]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d638:	430b      	orrs	r3, r1
2405d63a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
2405d63c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d640:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d644:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
2405d648:	643b      	str	r3, [r7, #64]	; 0x40
2405d64a:	2300      	movs	r3, #0
2405d64c:	647b      	str	r3, [r7, #68]	; 0x44
2405d64e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
2405d652:	460b      	mov	r3, r1
2405d654:	4313      	orrs	r3, r2
2405d656:	d00e      	beq.n	2405d676 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2405d658:	4b86      	ldr	r3, [pc, #536]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d65a:	691b      	ldr	r3, [r3, #16]
2405d65c:	4a85      	ldr	r2, [pc, #532]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d65e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
2405d662:	6113      	str	r3, [r2, #16]
2405d664:	4b83      	ldr	r3, [pc, #524]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d666:	6919      	ldr	r1, [r3, #16]
2405d668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d66c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
2405d670:	4a80      	ldr	r2, [pc, #512]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d672:	430b      	orrs	r3, r1
2405d674:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
2405d676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d67e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
2405d682:	63bb      	str	r3, [r7, #56]	; 0x38
2405d684:	2300      	movs	r3, #0
2405d686:	63fb      	str	r3, [r7, #60]	; 0x3c
2405d688:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
2405d68c:	460b      	mov	r3, r1
2405d68e:	4313      	orrs	r3, r2
2405d690:	d009      	beq.n	2405d6a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
2405d692:	4b78      	ldr	r3, [pc, #480]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405d696:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
2405d69a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d69e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d6a0:	4a74      	ldr	r2, [pc, #464]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d6a2:	430b      	orrs	r3, r1
2405d6a4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
2405d6a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d6ae:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
2405d6b2:	633b      	str	r3, [r7, #48]	; 0x30
2405d6b4:	2300      	movs	r3, #0
2405d6b6:	637b      	str	r3, [r7, #52]	; 0x34
2405d6b8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
2405d6bc:	460b      	mov	r3, r1
2405d6be:	4313      	orrs	r3, r2
2405d6c0:	d00a      	beq.n	2405d6d8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
2405d6c2:	4b6c      	ldr	r3, [pc, #432]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d6c6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
2405d6ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d6ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405d6d2:	4a68      	ldr	r2, [pc, #416]	; (2405d874 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d6d4:	430b      	orrs	r3, r1
2405d6d6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
2405d6d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d6e0:	2100      	movs	r1, #0
2405d6e2:	62b9      	str	r1, [r7, #40]	; 0x28
2405d6e4:	f003 0301 	and.w	r3, r3, #1
2405d6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
2405d6ea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
2405d6ee:	460b      	mov	r3, r1
2405d6f0:	4313      	orrs	r3, r2
2405d6f2:	d011      	beq.n	2405d718 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405d6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d6f8:	3308      	adds	r3, #8
2405d6fa:	2100      	movs	r1, #0
2405d6fc:	4618      	mov	r0, r3
2405d6fe:	f001 f9a3 	bl	2405ea48 <RCCEx_PLL2_Config>
2405d702:	4603      	mov	r3, r0
2405d704:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405d708:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d70c:	2b00      	cmp	r3, #0
2405d70e:	d003      	beq.n	2405d718 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d710:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d714:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
2405d718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d71c:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d720:	2100      	movs	r1, #0
2405d722:	6239      	str	r1, [r7, #32]
2405d724:	f003 0302 	and.w	r3, r3, #2
2405d728:	627b      	str	r3, [r7, #36]	; 0x24
2405d72a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
2405d72e:	460b      	mov	r3, r1
2405d730:	4313      	orrs	r3, r2
2405d732:	d011      	beq.n	2405d758 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405d734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d738:	3308      	adds	r3, #8
2405d73a:	2101      	movs	r1, #1
2405d73c:	4618      	mov	r0, r3
2405d73e:	f001 f983 	bl	2405ea48 <RCCEx_PLL2_Config>
2405d742:	4603      	mov	r3, r0
2405d744:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405d748:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d74c:	2b00      	cmp	r3, #0
2405d74e:	d003      	beq.n	2405d758 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d750:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d754:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2405d758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d75c:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d760:	2100      	movs	r1, #0
2405d762:	61b9      	str	r1, [r7, #24]
2405d764:	f003 0304 	and.w	r3, r3, #4
2405d768:	61fb      	str	r3, [r7, #28]
2405d76a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
2405d76e:	460b      	mov	r3, r1
2405d770:	4313      	orrs	r3, r2
2405d772:	d011      	beq.n	2405d798 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405d774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d778:	3308      	adds	r3, #8
2405d77a:	2102      	movs	r1, #2
2405d77c:	4618      	mov	r0, r3
2405d77e:	f001 f963 	bl	2405ea48 <RCCEx_PLL2_Config>
2405d782:	4603      	mov	r3, r0
2405d784:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405d788:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d78c:	2b00      	cmp	r3, #0
2405d78e:	d003      	beq.n	2405d798 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d790:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d794:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2405d798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d7a0:	2100      	movs	r1, #0
2405d7a2:	6139      	str	r1, [r7, #16]
2405d7a4:	f003 0308 	and.w	r3, r3, #8
2405d7a8:	617b      	str	r3, [r7, #20]
2405d7aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
2405d7ae:	460b      	mov	r3, r1
2405d7b0:	4313      	orrs	r3, r2
2405d7b2:	d011      	beq.n	2405d7d8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405d7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d7b8:	3328      	adds	r3, #40	; 0x28
2405d7ba:	2100      	movs	r1, #0
2405d7bc:	4618      	mov	r0, r3
2405d7be:	f001 f9f5 	bl	2405ebac <RCCEx_PLL3_Config>
2405d7c2:	4603      	mov	r3, r0
2405d7c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
2405d7c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d7cc:	2b00      	cmp	r3, #0
2405d7ce:	d003      	beq.n	2405d7d8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d7d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d7d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2405d7d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d7e0:	2100      	movs	r1, #0
2405d7e2:	60b9      	str	r1, [r7, #8]
2405d7e4:	f003 0310 	and.w	r3, r3, #16
2405d7e8:	60fb      	str	r3, [r7, #12]
2405d7ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
2405d7ee:	460b      	mov	r3, r1
2405d7f0:	4313      	orrs	r3, r2
2405d7f2:	d011      	beq.n	2405d818 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405d7f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d7f8:	3328      	adds	r3, #40	; 0x28
2405d7fa:	2101      	movs	r1, #1
2405d7fc:	4618      	mov	r0, r3
2405d7fe:	f001 f9d5 	bl	2405ebac <RCCEx_PLL3_Config>
2405d802:	4603      	mov	r3, r0
2405d804:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405d808:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d80c:	2b00      	cmp	r3, #0
2405d80e:	d003      	beq.n	2405d818 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d810:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d814:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2405d818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d81c:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d820:	2100      	movs	r1, #0
2405d822:	6039      	str	r1, [r7, #0]
2405d824:	f003 0320 	and.w	r3, r3, #32
2405d828:	607b      	str	r3, [r7, #4]
2405d82a:	e9d7 1200 	ldrd	r1, r2, [r7]
2405d82e:	460b      	mov	r3, r1
2405d830:	4313      	orrs	r3, r2
2405d832:	d011      	beq.n	2405d858 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405d834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d838:	3328      	adds	r3, #40	; 0x28
2405d83a:	2102      	movs	r1, #2
2405d83c:	4618      	mov	r0, r3
2405d83e:	f001 f9b5 	bl	2405ebac <RCCEx_PLL3_Config>
2405d842:	4603      	mov	r3, r0
2405d844:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405d848:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d84c:	2b00      	cmp	r3, #0
2405d84e:	d003      	beq.n	2405d858 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d850:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d854:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
2405d858:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
2405d85c:	2b00      	cmp	r3, #0
2405d85e:	d101      	bne.n	2405d864 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
2405d860:	2300      	movs	r3, #0
2405d862:	e000      	b.n	2405d866 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
2405d864:	2301      	movs	r3, #1
}
2405d866:	4618      	mov	r0, r3
2405d868:	f507 7790 	add.w	r7, r7, #288	; 0x120
2405d86c:	46bd      	mov	sp, r7
2405d86e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
2405d872:	bf00      	nop
2405d874:	58024400 	.word	0x58024400

2405d878 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
2405d878:	b580      	push	{r7, lr}
2405d87a:	b090      	sub	sp, #64	; 0x40
2405d87c:	af00      	add	r7, sp, #0
2405d87e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2405d882:	e9d7 2300 	ldrd	r2, r3, [r7]
2405d886:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
2405d88a:	430b      	orrs	r3, r1
2405d88c:	f040 8094 	bne.w	2405d9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
2405d890:	4b97      	ldr	r3, [pc, #604]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d894:	f003 0307 	and.w	r3, r3, #7
2405d898:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
2405d89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d89c:	2b04      	cmp	r3, #4
2405d89e:	f200 8087 	bhi.w	2405d9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
2405d8a2:	a201      	add	r2, pc, #4	; (adr r2, 2405d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
2405d8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405d8a8:	2405d8bd 	.word	0x2405d8bd
2405d8ac:	2405d8e5 	.word	0x2405d8e5
2405d8b0:	2405d90d 	.word	0x2405d90d
2405d8b4:	2405d9a9 	.word	0x2405d9a9
2405d8b8:	2405d935 	.word	0x2405d935
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405d8bc:	4b8c      	ldr	r3, [pc, #560]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d8be:	681b      	ldr	r3, [r3, #0]
2405d8c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405d8c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405d8c8:	d108      	bne.n	2405d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405d8ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405d8ce:	4618      	mov	r0, r3
2405d8d0:	f000 ff68 	bl	2405e7a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405d8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405d8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405d8d8:	f000 bc97 	b.w	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405d8dc:	2300      	movs	r3, #0
2405d8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d8e0:	f000 bc93 	b.w	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405d8e4:	4b82      	ldr	r3, [pc, #520]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d8e6:	681b      	ldr	r3, [r3, #0]
2405d8e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405d8ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405d8f0:	d108      	bne.n	2405d904 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405d8f2:	f107 0318 	add.w	r3, r7, #24
2405d8f6:	4618      	mov	r0, r3
2405d8f8:	f000 fcac 	bl	2405e254 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405d8fc:	69bb      	ldr	r3, [r7, #24]
2405d8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405d900:	f000 bc83 	b.w	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405d904:	2300      	movs	r3, #0
2405d906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d908:	f000 bc7f 	b.w	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405d90c:	4b78      	ldr	r3, [pc, #480]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d90e:	681b      	ldr	r3, [r3, #0]
2405d910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405d914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405d918:	d108      	bne.n	2405d92c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405d91a:	f107 030c 	add.w	r3, r7, #12
2405d91e:	4618      	mov	r0, r3
2405d920:	f000 fdec 	bl	2405e4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405d924:	68fb      	ldr	r3, [r7, #12]
2405d926:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405d928:	f000 bc6f 	b.w	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405d92c:	2300      	movs	r3, #0
2405d92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d930:	f000 bc6b 	b.w	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405d934:	4b6e      	ldr	r3, [pc, #440]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405d938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405d93c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405d93e:	4b6c      	ldr	r3, [pc, #432]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d940:	681b      	ldr	r3, [r3, #0]
2405d942:	f003 0304 	and.w	r3, r3, #4
2405d946:	2b04      	cmp	r3, #4
2405d948:	d10c      	bne.n	2405d964 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
2405d94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405d94c:	2b00      	cmp	r3, #0
2405d94e:	d109      	bne.n	2405d964 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405d950:	4b67      	ldr	r3, [pc, #412]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d952:	681b      	ldr	r3, [r3, #0]
2405d954:	08db      	lsrs	r3, r3, #3
2405d956:	f003 0303 	and.w	r3, r3, #3
2405d95a:	4a66      	ldr	r2, [pc, #408]	; (2405daf4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
2405d95c:	fa22 f303 	lsr.w	r3, r2, r3
2405d960:	63fb      	str	r3, [r7, #60]	; 0x3c
2405d962:	e01f      	b.n	2405d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405d964:	4b62      	ldr	r3, [pc, #392]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d966:	681b      	ldr	r3, [r3, #0]
2405d968:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405d96c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405d970:	d106      	bne.n	2405d980 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
2405d972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405d974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405d978:	d102      	bne.n	2405d980 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405d97a:	4b5f      	ldr	r3, [pc, #380]	; (2405daf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
2405d97c:	63fb      	str	r3, [r7, #60]	; 0x3c
2405d97e:	e011      	b.n	2405d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405d980:	4b5b      	ldr	r3, [pc, #364]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d982:	681b      	ldr	r3, [r3, #0]
2405d984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405d988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405d98c:	d106      	bne.n	2405d99c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
2405d98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405d990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405d994:	d102      	bne.n	2405d99c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405d996:	4b59      	ldr	r3, [pc, #356]	; (2405dafc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
2405d998:	63fb      	str	r3, [r7, #60]	; 0x3c
2405d99a:	e003      	b.n	2405d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405d99c:	2300      	movs	r3, #0
2405d99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2405d9a0:	f000 bc33 	b.w	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405d9a4:	f000 bc31 	b.w	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405d9a8:	4b55      	ldr	r3, [pc, #340]	; (2405db00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
2405d9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d9ac:	f000 bc2d 	b.w	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
2405d9b0:	2300      	movs	r3, #0
2405d9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d9b4:	f000 bc29 	b.w	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
2405d9b8:	e9d7 2300 	ldrd	r2, r3, [r7]
2405d9bc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
2405d9c0:	430b      	orrs	r3, r1
2405d9c2:	f040 809f 	bne.w	2405db04 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
2405d9c6:	4b4a      	ldr	r3, [pc, #296]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d9c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d9ca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
2405d9ce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
2405d9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d9d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405d9d6:	d04d      	beq.n	2405da74 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
2405d9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d9da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405d9de:	f200 8084 	bhi.w	2405daea <HAL_RCCEx_GetPeriphCLKFreq+0x272>
2405d9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d9e4:	2bc0      	cmp	r3, #192	; 0xc0
2405d9e6:	d07d      	beq.n	2405dae4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
2405d9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d9ea:	2bc0      	cmp	r3, #192	; 0xc0
2405d9ec:	d87d      	bhi.n	2405daea <HAL_RCCEx_GetPeriphCLKFreq+0x272>
2405d9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d9f0:	2b80      	cmp	r3, #128	; 0x80
2405d9f2:	d02d      	beq.n	2405da50 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
2405d9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d9f6:	2b80      	cmp	r3, #128	; 0x80
2405d9f8:	d877      	bhi.n	2405daea <HAL_RCCEx_GetPeriphCLKFreq+0x272>
2405d9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d9fc:	2b00      	cmp	r3, #0
2405d9fe:	d003      	beq.n	2405da08 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
2405da00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405da02:	2b40      	cmp	r3, #64	; 0x40
2405da04:	d012      	beq.n	2405da2c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
2405da06:	e070      	b.n	2405daea <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405da08:	4b39      	ldr	r3, [pc, #228]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405da0a:	681b      	ldr	r3, [r3, #0]
2405da0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405da10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405da14:	d107      	bne.n	2405da26 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405da16:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405da1a:	4618      	mov	r0, r3
2405da1c:	f000 fec2 	bl	2405e7a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405da20:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405da22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405da24:	e3f1      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405da26:	2300      	movs	r3, #0
2405da28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405da2a:	e3ee      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405da2c:	4b30      	ldr	r3, [pc, #192]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405da2e:	681b      	ldr	r3, [r3, #0]
2405da30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405da34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405da38:	d107      	bne.n	2405da4a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405da3a:	f107 0318 	add.w	r3, r7, #24
2405da3e:	4618      	mov	r0, r3
2405da40:	f000 fc08 	bl	2405e254 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405da44:	69bb      	ldr	r3, [r7, #24]
2405da46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405da48:	e3df      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405da4a:	2300      	movs	r3, #0
2405da4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405da4e:	e3dc      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405da50:	4b27      	ldr	r3, [pc, #156]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405da52:	681b      	ldr	r3, [r3, #0]
2405da54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405da58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405da5c:	d107      	bne.n	2405da6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405da5e:	f107 030c 	add.w	r3, r7, #12
2405da62:	4618      	mov	r0, r3
2405da64:	f000 fd4a 	bl	2405e4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405da68:	68fb      	ldr	r3, [r7, #12]
2405da6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405da6c:	e3cd      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405da6e:	2300      	movs	r3, #0
2405da70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405da72:	e3ca      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405da74:	4b1e      	ldr	r3, [pc, #120]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405da76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405da78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405da7c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405da7e:	4b1c      	ldr	r3, [pc, #112]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405da80:	681b      	ldr	r3, [r3, #0]
2405da82:	f003 0304 	and.w	r3, r3, #4
2405da86:	2b04      	cmp	r3, #4
2405da88:	d10c      	bne.n	2405daa4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
2405da8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405da8c:	2b00      	cmp	r3, #0
2405da8e:	d109      	bne.n	2405daa4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405da90:	4b17      	ldr	r3, [pc, #92]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405da92:	681b      	ldr	r3, [r3, #0]
2405da94:	08db      	lsrs	r3, r3, #3
2405da96:	f003 0303 	and.w	r3, r3, #3
2405da9a:	4a16      	ldr	r2, [pc, #88]	; (2405daf4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
2405da9c:	fa22 f303 	lsr.w	r3, r2, r3
2405daa0:	63fb      	str	r3, [r7, #60]	; 0x3c
2405daa2:	e01e      	b.n	2405dae2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405daa4:	4b12      	ldr	r3, [pc, #72]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405daa6:	681b      	ldr	r3, [r3, #0]
2405daa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405daac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405dab0:	d106      	bne.n	2405dac0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
2405dab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405dab8:	d102      	bne.n	2405dac0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405daba:	4b0f      	ldr	r3, [pc, #60]	; (2405daf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
2405dabc:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dabe:	e010      	b.n	2405dae2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405dac0:	4b0b      	ldr	r3, [pc, #44]	; (2405daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405dac2:	681b      	ldr	r3, [r3, #0]
2405dac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405dac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405dacc:	d106      	bne.n	2405dadc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
2405dace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405dad4:	d102      	bne.n	2405dadc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405dad6:	4b09      	ldr	r3, [pc, #36]	; (2405dafc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
2405dad8:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dada:	e002      	b.n	2405dae2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405dadc:	2300      	movs	r3, #0
2405dade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2405dae0:	e393      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405dae2:	e392      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405dae4:	4b06      	ldr	r3, [pc, #24]	; (2405db00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
2405dae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dae8:	e38f      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2405daea:	2300      	movs	r3, #0
2405daec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405daee:	e38c      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405daf0:	58024400 	.word	0x58024400
2405daf4:	03d09000 	.word	0x03d09000
2405daf8:	003d0900 	.word	0x003d0900
2405dafc:	016e3600 	.word	0x016e3600
2405db00:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
2405db04:	e9d7 2300 	ldrd	r2, r3, [r7]
2405db08:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
2405db0c:	430b      	orrs	r3, r1
2405db0e:	f040 809c 	bne.w	2405dc4a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
2405db12:	4b9e      	ldr	r3, [pc, #632]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405db14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405db16:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
2405db1a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
2405db1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405db1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405db22:	d054      	beq.n	2405dbce <HAL_RCCEx_GetPeriphCLKFreq+0x356>
2405db24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405db26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405db2a:	f200 808b 	bhi.w	2405dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
2405db2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405db30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405db34:	f000 8083 	beq.w	2405dc3e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
2405db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405db3a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405db3e:	f200 8081 	bhi.w	2405dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
2405db42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405db44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405db48:	d02f      	beq.n	2405dbaa <HAL_RCCEx_GetPeriphCLKFreq+0x332>
2405db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405db4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405db50:	d878      	bhi.n	2405dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
2405db52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405db54:	2b00      	cmp	r3, #0
2405db56:	d004      	beq.n	2405db62 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
2405db58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405db5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405db5e:	d012      	beq.n	2405db86 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
2405db60:	e070      	b.n	2405dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405db62:	4b8a      	ldr	r3, [pc, #552]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405db64:	681b      	ldr	r3, [r3, #0]
2405db66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405db6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405db6e:	d107      	bne.n	2405db80 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405db70:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405db74:	4618      	mov	r0, r3
2405db76:	f000 fe15 	bl	2405e7a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405db7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405db7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405db7e:	e344      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405db80:	2300      	movs	r3, #0
2405db82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405db84:	e341      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405db86:	4b81      	ldr	r3, [pc, #516]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405db88:	681b      	ldr	r3, [r3, #0]
2405db8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405db8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405db92:	d107      	bne.n	2405dba4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405db94:	f107 0318 	add.w	r3, r7, #24
2405db98:	4618      	mov	r0, r3
2405db9a:	f000 fb5b 	bl	2405e254 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405db9e:	69bb      	ldr	r3, [r7, #24]
2405dba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405dba2:	e332      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405dba4:	2300      	movs	r3, #0
2405dba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dba8:	e32f      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405dbaa:	4b78      	ldr	r3, [pc, #480]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dbac:	681b      	ldr	r3, [r3, #0]
2405dbae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405dbb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405dbb6:	d107      	bne.n	2405dbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405dbb8:	f107 030c 	add.w	r3, r7, #12
2405dbbc:	4618      	mov	r0, r3
2405dbbe:	f000 fc9d 	bl	2405e4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405dbc2:	68fb      	ldr	r3, [r7, #12]
2405dbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405dbc6:	e320      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405dbc8:	2300      	movs	r3, #0
2405dbca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dbcc:	e31d      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405dbce:	4b6f      	ldr	r3, [pc, #444]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dbd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405dbd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405dbd6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405dbd8:	4b6c      	ldr	r3, [pc, #432]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dbda:	681b      	ldr	r3, [r3, #0]
2405dbdc:	f003 0304 	and.w	r3, r3, #4
2405dbe0:	2b04      	cmp	r3, #4
2405dbe2:	d10c      	bne.n	2405dbfe <HAL_RCCEx_GetPeriphCLKFreq+0x386>
2405dbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dbe6:	2b00      	cmp	r3, #0
2405dbe8:	d109      	bne.n	2405dbfe <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405dbea:	4b68      	ldr	r3, [pc, #416]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dbec:	681b      	ldr	r3, [r3, #0]
2405dbee:	08db      	lsrs	r3, r3, #3
2405dbf0:	f003 0303 	and.w	r3, r3, #3
2405dbf4:	4a66      	ldr	r2, [pc, #408]	; (2405dd90 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
2405dbf6:	fa22 f303 	lsr.w	r3, r2, r3
2405dbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dbfc:	e01e      	b.n	2405dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405dbfe:	4b63      	ldr	r3, [pc, #396]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dc00:	681b      	ldr	r3, [r3, #0]
2405dc02:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405dc06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405dc0a:	d106      	bne.n	2405dc1a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
2405dc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dc0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405dc12:	d102      	bne.n	2405dc1a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405dc14:	4b5f      	ldr	r3, [pc, #380]	; (2405dd94 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
2405dc16:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dc18:	e010      	b.n	2405dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405dc1a:	4b5c      	ldr	r3, [pc, #368]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dc1c:	681b      	ldr	r3, [r3, #0]
2405dc1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405dc22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405dc26:	d106      	bne.n	2405dc36 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
2405dc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dc2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405dc2e:	d102      	bne.n	2405dc36 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405dc30:	4b59      	ldr	r3, [pc, #356]	; (2405dd98 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
2405dc32:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dc34:	e002      	b.n	2405dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405dc36:	2300      	movs	r3, #0
2405dc38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
2405dc3a:	e2e6      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405dc3c:	e2e5      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405dc3e:	4b57      	ldr	r3, [pc, #348]	; (2405dd9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
2405dc40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dc42:	e2e2      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2405dc44:	2300      	movs	r3, #0
2405dc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dc48:	e2df      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
2405dc4a:	e9d7 2300 	ldrd	r2, r3, [r7]
2405dc4e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
2405dc52:	430b      	orrs	r3, r1
2405dc54:	f040 80a7 	bne.w	2405dda6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
2405dc58:	4b4c      	ldr	r3, [pc, #304]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dc5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405dc5c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
2405dc60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405dc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dc64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405dc68:	d055      	beq.n	2405dd16 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
2405dc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dc6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405dc70:	f200 8096 	bhi.w	2405dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
2405dc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dc76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405dc7a:	f000 8084 	beq.w	2405dd86 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
2405dc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dc80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405dc84:	f200 808c 	bhi.w	2405dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
2405dc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dc8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405dc8e:	d030      	beq.n	2405dcf2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
2405dc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dc92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405dc96:	f200 8083 	bhi.w	2405dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
2405dc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dc9c:	2b00      	cmp	r3, #0
2405dc9e:	d004      	beq.n	2405dcaa <HAL_RCCEx_GetPeriphCLKFreq+0x432>
2405dca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405dca6:	d012      	beq.n	2405dcce <HAL_RCCEx_GetPeriphCLKFreq+0x456>
2405dca8:	e07a      	b.n	2405dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405dcaa:	4b38      	ldr	r3, [pc, #224]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dcac:	681b      	ldr	r3, [r3, #0]
2405dcae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405dcb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405dcb6:	d107      	bne.n	2405dcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405dcb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405dcbc:	4618      	mov	r0, r3
2405dcbe:	f000 fd71 	bl	2405e7a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405dcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405dcc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405dcc6:	e2a0      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405dcc8:	2300      	movs	r3, #0
2405dcca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dccc:	e29d      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405dcce:	4b2f      	ldr	r3, [pc, #188]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dcd0:	681b      	ldr	r3, [r3, #0]
2405dcd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405dcd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405dcda:	d107      	bne.n	2405dcec <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405dcdc:	f107 0318 	add.w	r3, r7, #24
2405dce0:	4618      	mov	r0, r3
2405dce2:	f000 fab7 	bl	2405e254 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405dce6:	69bb      	ldr	r3, [r7, #24]
2405dce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405dcea:	e28e      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405dcec:	2300      	movs	r3, #0
2405dcee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dcf0:	e28b      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405dcf2:	4b26      	ldr	r3, [pc, #152]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dcf4:	681b      	ldr	r3, [r3, #0]
2405dcf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405dcfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405dcfe:	d107      	bne.n	2405dd10 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405dd00:	f107 030c 	add.w	r3, r7, #12
2405dd04:	4618      	mov	r0, r3
2405dd06:	f000 fbf9 	bl	2405e4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405dd0a:	68fb      	ldr	r3, [r7, #12]
2405dd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405dd0e:	e27c      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405dd10:	2300      	movs	r3, #0
2405dd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dd14:	e279      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405dd16:	4b1d      	ldr	r3, [pc, #116]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dd18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405dd1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405dd1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405dd20:	4b1a      	ldr	r3, [pc, #104]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dd22:	681b      	ldr	r3, [r3, #0]
2405dd24:	f003 0304 	and.w	r3, r3, #4
2405dd28:	2b04      	cmp	r3, #4
2405dd2a:	d10c      	bne.n	2405dd46 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
2405dd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dd2e:	2b00      	cmp	r3, #0
2405dd30:	d109      	bne.n	2405dd46 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405dd32:	4b16      	ldr	r3, [pc, #88]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dd34:	681b      	ldr	r3, [r3, #0]
2405dd36:	08db      	lsrs	r3, r3, #3
2405dd38:	f003 0303 	and.w	r3, r3, #3
2405dd3c:	4a14      	ldr	r2, [pc, #80]	; (2405dd90 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
2405dd3e:	fa22 f303 	lsr.w	r3, r2, r3
2405dd42:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dd44:	e01e      	b.n	2405dd84 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405dd46:	4b11      	ldr	r3, [pc, #68]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dd48:	681b      	ldr	r3, [r3, #0]
2405dd4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405dd4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405dd52:	d106      	bne.n	2405dd62 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
2405dd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dd56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405dd5a:	d102      	bne.n	2405dd62 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405dd5c:	4b0d      	ldr	r3, [pc, #52]	; (2405dd94 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
2405dd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dd60:	e010      	b.n	2405dd84 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405dd62:	4b0a      	ldr	r3, [pc, #40]	; (2405dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dd64:	681b      	ldr	r3, [r3, #0]
2405dd66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405dd6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405dd6e:	d106      	bne.n	2405dd7e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
2405dd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dd72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405dd76:	d102      	bne.n	2405dd7e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405dd78:	4b07      	ldr	r3, [pc, #28]	; (2405dd98 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
2405dd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dd7c:	e002      	b.n	2405dd84 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405dd7e:	2300      	movs	r3, #0
2405dd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2405dd82:	e242      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405dd84:	e241      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405dd86:	4b05      	ldr	r3, [pc, #20]	; (2405dd9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
2405dd88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dd8a:	e23e      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405dd8c:	58024400 	.word	0x58024400
2405dd90:	03d09000 	.word	0x03d09000
2405dd94:	003d0900 	.word	0x003d0900
2405dd98:	016e3600 	.word	0x016e3600
2405dd9c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
2405dda0:	2300      	movs	r3, #0
2405dda2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dda4:	e231      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
2405dda6:	e9d7 2300 	ldrd	r2, r3, [r7]
2405ddaa:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
2405ddae:	430b      	orrs	r3, r1
2405ddb0:	f040 8085 	bne.w	2405debe <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
2405ddb4:	4b9c      	ldr	r3, [pc, #624]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405ddb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405ddb8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
2405ddbc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
2405ddbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405ddc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405ddc4:	d06b      	beq.n	2405de9e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
2405ddc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405ddc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405ddcc:	d874      	bhi.n	2405deb8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
2405ddce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405ddd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405ddd4:	d056      	beq.n	2405de84 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
2405ddd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405ddd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405dddc:	d86c      	bhi.n	2405deb8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
2405ddde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dde0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405dde4:	d03b      	beq.n	2405de5e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
2405dde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dde8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405ddec:	d864      	bhi.n	2405deb8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
2405ddee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405ddf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405ddf4:	d021      	beq.n	2405de3a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
2405ddf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405ddf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405ddfc:	d85c      	bhi.n	2405deb8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
2405ddfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405de00:	2b00      	cmp	r3, #0
2405de02:	d004      	beq.n	2405de0e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
2405de04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405de06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405de0a:	d004      	beq.n	2405de16 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
2405de0c:	e054      	b.n	2405deb8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
2405de0e:	f7fe fb5f 	bl	2405c4d0 <HAL_RCC_GetPCLK1Freq>
2405de12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
2405de14:	e1f9      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405de16:	4b84      	ldr	r3, [pc, #528]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405de18:	681b      	ldr	r3, [r3, #0]
2405de1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405de1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405de22:	d107      	bne.n	2405de34 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405de24:	f107 0318 	add.w	r3, r7, #24
2405de28:	4618      	mov	r0, r3
2405de2a:	f000 fa13 	bl	2405e254 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2405de2e:	69fb      	ldr	r3, [r7, #28]
2405de30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405de32:	e1ea      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405de34:	2300      	movs	r3, #0
2405de36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405de38:	e1e7      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405de3a:	4b7b      	ldr	r3, [pc, #492]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405de3c:	681b      	ldr	r3, [r3, #0]
2405de3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405de42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405de46:	d107      	bne.n	2405de58 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405de48:	f107 030c 	add.w	r3, r7, #12
2405de4c:	4618      	mov	r0, r3
2405de4e:	f000 fb55 	bl	2405e4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
2405de52:	693b      	ldr	r3, [r7, #16]
2405de54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405de56:	e1d8      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405de58:	2300      	movs	r3, #0
2405de5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405de5c:	e1d5      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2405de5e:	4b72      	ldr	r3, [pc, #456]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405de60:	681b      	ldr	r3, [r3, #0]
2405de62:	f003 0304 	and.w	r3, r3, #4
2405de66:	2b04      	cmp	r3, #4
2405de68:	d109      	bne.n	2405de7e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405de6a:	4b6f      	ldr	r3, [pc, #444]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405de6c:	681b      	ldr	r3, [r3, #0]
2405de6e:	08db      	lsrs	r3, r3, #3
2405de70:	f003 0303 	and.w	r3, r3, #3
2405de74:	4a6d      	ldr	r2, [pc, #436]	; (2405e02c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
2405de76:	fa22 f303 	lsr.w	r3, r2, r3
2405de7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405de7c:	e1c5      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405de7e:	2300      	movs	r3, #0
2405de80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405de82:	e1c2      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2405de84:	4b68      	ldr	r3, [pc, #416]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405de86:	681b      	ldr	r3, [r3, #0]
2405de88:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405de8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405de90:	d102      	bne.n	2405de98 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
2405de92:	4b67      	ldr	r3, [pc, #412]	; (2405e030 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
2405de94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405de96:	e1b8      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405de98:	2300      	movs	r3, #0
2405de9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405de9c:	e1b5      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2405de9e:	4b62      	ldr	r3, [pc, #392]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405dea0:	681b      	ldr	r3, [r3, #0]
2405dea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405dea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405deaa:	d102      	bne.n	2405deb2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
2405deac:	4b61      	ldr	r3, [pc, #388]	; (2405e034 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
2405deae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405deb0:	e1ab      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405deb2:	2300      	movs	r3, #0
2405deb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405deb6:	e1a8      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
2405deb8:	2300      	movs	r3, #0
2405deba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405debc:	e1a5      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
2405debe:	e9d7 2300 	ldrd	r2, r3, [r7]
2405dec2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
2405dec6:	430b      	orrs	r3, r1
2405dec8:	d173      	bne.n	2405dfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
2405deca:	4b57      	ldr	r3, [pc, #348]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405decc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405dece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
2405ded2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405ded4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405ded6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405deda:	d02f      	beq.n	2405df3c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
2405dedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dede:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405dee2:	d863      	bhi.n	2405dfac <HAL_RCCEx_GetPeriphCLKFreq+0x734>
2405dee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dee6:	2b00      	cmp	r3, #0
2405dee8:	d004      	beq.n	2405def4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
2405deea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405deec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405def0:	d012      	beq.n	2405df18 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
2405def2:	e05b      	b.n	2405dfac <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405def4:	4b4c      	ldr	r3, [pc, #304]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405def6:	681b      	ldr	r3, [r3, #0]
2405def8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405defc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405df00:	d107      	bne.n	2405df12 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405df02:	f107 0318 	add.w	r3, r7, #24
2405df06:	4618      	mov	r0, r3
2405df08:	f000 f9a4 	bl	2405e254 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405df0c:	69bb      	ldr	r3, [r7, #24]
2405df0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405df10:	e17b      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405df12:	2300      	movs	r3, #0
2405df14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405df16:	e178      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405df18:	4b43      	ldr	r3, [pc, #268]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405df1a:	681b      	ldr	r3, [r3, #0]
2405df1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405df20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405df24:	d107      	bne.n	2405df36 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405df26:	f107 030c 	add.w	r3, r7, #12
2405df2a:	4618      	mov	r0, r3
2405df2c:	f000 fae6 	bl	2405e4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
2405df30:	697b      	ldr	r3, [r7, #20]
2405df32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405df34:	e169      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405df36:	2300      	movs	r3, #0
2405df38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405df3a:	e166      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405df3c:	4b3a      	ldr	r3, [pc, #232]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405df3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405df40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405df44:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405df46:	4b38      	ldr	r3, [pc, #224]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405df48:	681b      	ldr	r3, [r3, #0]
2405df4a:	f003 0304 	and.w	r3, r3, #4
2405df4e:	2b04      	cmp	r3, #4
2405df50:	d10c      	bne.n	2405df6c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
2405df52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405df54:	2b00      	cmp	r3, #0
2405df56:	d109      	bne.n	2405df6c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405df58:	4b33      	ldr	r3, [pc, #204]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405df5a:	681b      	ldr	r3, [r3, #0]
2405df5c:	08db      	lsrs	r3, r3, #3
2405df5e:	f003 0303 	and.w	r3, r3, #3
2405df62:	4a32      	ldr	r2, [pc, #200]	; (2405e02c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
2405df64:	fa22 f303 	lsr.w	r3, r2, r3
2405df68:	63fb      	str	r3, [r7, #60]	; 0x3c
2405df6a:	e01e      	b.n	2405dfaa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405df6c:	4b2e      	ldr	r3, [pc, #184]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405df6e:	681b      	ldr	r3, [r3, #0]
2405df70:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405df74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405df78:	d106      	bne.n	2405df88 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
2405df7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405df7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405df80:	d102      	bne.n	2405df88 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405df82:	4b2b      	ldr	r3, [pc, #172]	; (2405e030 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
2405df84:	63fb      	str	r3, [r7, #60]	; 0x3c
2405df86:	e010      	b.n	2405dfaa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405df88:	4b27      	ldr	r3, [pc, #156]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405df8a:	681b      	ldr	r3, [r3, #0]
2405df8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405df90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405df94:	d106      	bne.n	2405dfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
2405df96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405df98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405df9c:	d102      	bne.n	2405dfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405df9e:	4b25      	ldr	r3, [pc, #148]	; (2405e034 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
2405dfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dfa2:	e002      	b.n	2405dfaa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405dfa4:	2300      	movs	r3, #0
2405dfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2405dfa8:	e12f      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405dfaa:	e12e      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2405dfac:	2300      	movs	r3, #0
2405dfae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dfb0:	e12b      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
2405dfb2:	e9d7 2300 	ldrd	r2, r3, [r7]
2405dfb6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
2405dfba:	430b      	orrs	r3, r1
2405dfbc:	d13c      	bne.n	2405e038 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
2405dfbe:	4b1a      	ldr	r3, [pc, #104]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405dfc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405dfc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405dfc6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405dfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dfca:	2b00      	cmp	r3, #0
2405dfcc:	d004      	beq.n	2405dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
2405dfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dfd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405dfd4:	d012      	beq.n	2405dffc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
2405dfd6:	e023      	b.n	2405e020 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405dfd8:	4b13      	ldr	r3, [pc, #76]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405dfda:	681b      	ldr	r3, [r3, #0]
2405dfdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405dfe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405dfe4:	d107      	bne.n	2405dff6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405dfe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405dfea:	4618      	mov	r0, r3
2405dfec:	f000 fbda 	bl	2405e7a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405dff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405dff4:	e109      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405dff6:	2300      	movs	r3, #0
2405dff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dffa:	e106      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405dffc:	4b0a      	ldr	r3, [pc, #40]	; (2405e028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405dffe:	681b      	ldr	r3, [r3, #0]
2405e000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405e004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405e008:	d107      	bne.n	2405e01a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405e00a:	f107 0318 	add.w	r3, r7, #24
2405e00e:	4618      	mov	r0, r3
2405e010:	f000 f920 	bl	2405e254 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
2405e014:	6a3b      	ldr	r3, [r7, #32]
2405e016:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e018:	e0f7      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e01a:	2300      	movs	r3, #0
2405e01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e01e:	e0f4      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2405e020:	2300      	movs	r3, #0
2405e022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e024:	e0f1      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405e026:	bf00      	nop
2405e028:	58024400 	.word	0x58024400
2405e02c:	03d09000 	.word	0x03d09000
2405e030:	003d0900 	.word	0x003d0900
2405e034:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
2405e038:	e9d7 2300 	ldrd	r2, r3, [r7]
2405e03c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
2405e040:	430b      	orrs	r3, r1
2405e042:	f040 8091 	bne.w	2405e168 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
2405e046:	4b73      	ldr	r3, [pc, #460]	; (2405e214 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405e04a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
2405e04e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405e050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e052:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405e056:	f000 8081 	beq.w	2405e15c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
2405e05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e05c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405e060:	d87f      	bhi.n	2405e162 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405e062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405e068:	d06b      	beq.n	2405e142 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
2405e06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e06c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405e070:	d877      	bhi.n	2405e162 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405e072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405e078:	d056      	beq.n	2405e128 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
2405e07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e07c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405e080:	d86f      	bhi.n	2405e162 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405e082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e084:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405e088:	d03b      	beq.n	2405e102 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
2405e08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e08c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405e090:	d867      	bhi.n	2405e162 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405e092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405e098:	d021      	beq.n	2405e0de <HAL_RCCEx_GetPeriphCLKFreq+0x866>
2405e09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e09c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405e0a0:	d85f      	bhi.n	2405e162 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405e0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e0a4:	2b00      	cmp	r3, #0
2405e0a6:	d004      	beq.n	2405e0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
2405e0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e0aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405e0ae:	d004      	beq.n	2405e0ba <HAL_RCCEx_GetPeriphCLKFreq+0x842>
2405e0b0:	e057      	b.n	2405e162 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
2405e0b2:	f000 f8b9 	bl	2405e228 <HAL_RCCEx_GetD3PCLK1Freq>
2405e0b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
2405e0b8:	e0a7      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405e0ba:	4b56      	ldr	r3, [pc, #344]	; (2405e214 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e0bc:	681b      	ldr	r3, [r3, #0]
2405e0be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405e0c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405e0c6:	d107      	bne.n	2405e0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405e0c8:	f107 0318 	add.w	r3, r7, #24
2405e0cc:	4618      	mov	r0, r3
2405e0ce:	f000 f8c1 	bl	2405e254 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2405e0d2:	69fb      	ldr	r3, [r7, #28]
2405e0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e0d6:	e098      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e0d8:	2300      	movs	r3, #0
2405e0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e0dc:	e095      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405e0de:	4b4d      	ldr	r3, [pc, #308]	; (2405e214 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e0e0:	681b      	ldr	r3, [r3, #0]
2405e0e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405e0e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405e0ea:	d107      	bne.n	2405e0fc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405e0ec:	f107 030c 	add.w	r3, r7, #12
2405e0f0:	4618      	mov	r0, r3
2405e0f2:	f000 fa03 	bl	2405e4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
2405e0f6:	693b      	ldr	r3, [r7, #16]
2405e0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e0fa:	e086      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e0fc:	2300      	movs	r3, #0
2405e0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e100:	e083      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2405e102:	4b44      	ldr	r3, [pc, #272]	; (2405e214 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e104:	681b      	ldr	r3, [r3, #0]
2405e106:	f003 0304 	and.w	r3, r3, #4
2405e10a:	2b04      	cmp	r3, #4
2405e10c:	d109      	bne.n	2405e122 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405e10e:	4b41      	ldr	r3, [pc, #260]	; (2405e214 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e110:	681b      	ldr	r3, [r3, #0]
2405e112:	08db      	lsrs	r3, r3, #3
2405e114:	f003 0303 	and.w	r3, r3, #3
2405e118:	4a3f      	ldr	r2, [pc, #252]	; (2405e218 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
2405e11a:	fa22 f303 	lsr.w	r3, r2, r3
2405e11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e120:	e073      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e122:	2300      	movs	r3, #0
2405e124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e126:	e070      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2405e128:	4b3a      	ldr	r3, [pc, #232]	; (2405e214 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e12a:	681b      	ldr	r3, [r3, #0]
2405e12c:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405e130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405e134:	d102      	bne.n	2405e13c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
2405e136:	4b39      	ldr	r3, [pc, #228]	; (2405e21c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
2405e138:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e13a:	e066      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e13c:	2300      	movs	r3, #0
2405e13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e140:	e063      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2405e142:	4b34      	ldr	r3, [pc, #208]	; (2405e214 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e144:	681b      	ldr	r3, [r3, #0]
2405e146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405e14a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405e14e:	d102      	bne.n	2405e156 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
2405e150:	4b33      	ldr	r3, [pc, #204]	; (2405e220 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
2405e152:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e154:	e059      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e156:	2300      	movs	r3, #0
2405e158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e15a:	e056      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405e15c:	4b31      	ldr	r3, [pc, #196]	; (2405e224 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
2405e15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e160:	e053      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
2405e162:	2300      	movs	r3, #0
2405e164:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e166:	e050      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
2405e168:	e9d7 2300 	ldrd	r2, r3, [r7]
2405e16c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
2405e170:	430b      	orrs	r3, r1
2405e172:	d148      	bne.n	2405e206 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
2405e174:	4b27      	ldr	r3, [pc, #156]	; (2405e214 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405e178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405e17c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405e17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405e184:	d02a      	beq.n	2405e1dc <HAL_RCCEx_GetPeriphCLKFreq+0x964>
2405e186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405e18c:	d838      	bhi.n	2405e200 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
2405e18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e190:	2b00      	cmp	r3, #0
2405e192:	d004      	beq.n	2405e19e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
2405e194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405e19a:	d00d      	beq.n	2405e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
2405e19c:	e030      	b.n	2405e200 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2405e19e:	4b1d      	ldr	r3, [pc, #116]	; (2405e214 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e1a0:	681b      	ldr	r3, [r3, #0]
2405e1a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405e1a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405e1aa:	d102      	bne.n	2405e1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
2405e1ac:	4b1c      	ldr	r3, [pc, #112]	; (2405e220 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
2405e1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e1b0:	e02b      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e1b2:	2300      	movs	r3, #0
2405e1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e1b6:	e028      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405e1b8:	4b16      	ldr	r3, [pc, #88]	; (2405e214 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e1ba:	681b      	ldr	r3, [r3, #0]
2405e1bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405e1c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405e1c4:	d107      	bne.n	2405e1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405e1c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405e1ca:	4618      	mov	r0, r3
2405e1cc:	f000 faea 	bl	2405e7a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405e1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405e1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e1d4:	e019      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e1d6:	2300      	movs	r3, #0
2405e1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e1da:	e016      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405e1dc:	4b0d      	ldr	r3, [pc, #52]	; (2405e214 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e1de:	681b      	ldr	r3, [r3, #0]
2405e1e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405e1e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405e1e8:	d107      	bne.n	2405e1fa <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405e1ea:	f107 0318 	add.w	r3, r7, #24
2405e1ee:	4618      	mov	r0, r3
2405e1f0:	f000 f830 	bl	2405e254 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2405e1f4:	69fb      	ldr	r3, [r7, #28]
2405e1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e1f8:	e007      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e1fa:	2300      	movs	r3, #0
2405e1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e1fe:	e004      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
2405e200:	2300      	movs	r3, #0
2405e202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e204:	e001      	b.n	2405e20a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
2405e206:	2300      	movs	r3, #0
2405e208:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
2405e20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
2405e20c:	4618      	mov	r0, r3
2405e20e:	3740      	adds	r7, #64	; 0x40
2405e210:	46bd      	mov	sp, r7
2405e212:	bd80      	pop	{r7, pc}
2405e214:	58024400 	.word	0x58024400
2405e218:	03d09000 	.word	0x03d09000
2405e21c:	003d0900 	.word	0x003d0900
2405e220:	016e3600 	.word	0x016e3600
2405e224:	00bb8000 	.word	0x00bb8000

2405e228 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
2405e228:	b580      	push	{r7, lr}
2405e22a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
2405e22c:	f7fe f920 	bl	2405c470 <HAL_RCC_GetHCLKFreq>
2405e230:	4602      	mov	r2, r0
2405e232:	4b06      	ldr	r3, [pc, #24]	; (2405e24c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
2405e234:	6a1b      	ldr	r3, [r3, #32]
2405e236:	091b      	lsrs	r3, r3, #4
2405e238:	f003 0307 	and.w	r3, r3, #7
2405e23c:	4904      	ldr	r1, [pc, #16]	; (2405e250 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
2405e23e:	5ccb      	ldrb	r3, [r1, r3]
2405e240:	f003 031f 	and.w	r3, r3, #31
2405e244:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
2405e248:	4618      	mov	r0, r3
2405e24a:	bd80      	pop	{r7, pc}
2405e24c:	58024400 	.word	0x58024400
2405e250:	24064270 	.word	0x24064270

2405e254 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
2405e254:	b480      	push	{r7}
2405e256:	b089      	sub	sp, #36	; 0x24
2405e258:	af00      	add	r7, sp, #0
2405e25a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405e25c:	4ba1      	ldr	r3, [pc, #644]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e260:	f003 0303 	and.w	r3, r3, #3
2405e264:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
2405e266:	4b9f      	ldr	r3, [pc, #636]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e26a:	0b1b      	lsrs	r3, r3, #12
2405e26c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405e270:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
2405e272:	4b9c      	ldr	r3, [pc, #624]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405e276:	091b      	lsrs	r3, r3, #4
2405e278:	f003 0301 	and.w	r3, r3, #1
2405e27c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2405e27e:	4b99      	ldr	r3, [pc, #612]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405e282:	08db      	lsrs	r3, r3, #3
2405e284:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405e288:	693a      	ldr	r2, [r7, #16]
2405e28a:	fb02 f303 	mul.w	r3, r2, r3
2405e28e:	ee07 3a90 	vmov	s15, r3
2405e292:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e296:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
2405e29a:	697b      	ldr	r3, [r7, #20]
2405e29c:	2b00      	cmp	r3, #0
2405e29e:	f000 8111 	beq.w	2405e4c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
2405e2a2:	69bb      	ldr	r3, [r7, #24]
2405e2a4:	2b02      	cmp	r3, #2
2405e2a6:	f000 8083 	beq.w	2405e3b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
2405e2aa:	69bb      	ldr	r3, [r7, #24]
2405e2ac:	2b02      	cmp	r3, #2
2405e2ae:	f200 80a1 	bhi.w	2405e3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
2405e2b2:	69bb      	ldr	r3, [r7, #24]
2405e2b4:	2b00      	cmp	r3, #0
2405e2b6:	d003      	beq.n	2405e2c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
2405e2b8:	69bb      	ldr	r3, [r7, #24]
2405e2ba:	2b01      	cmp	r3, #1
2405e2bc:	d056      	beq.n	2405e36c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
2405e2be:	e099      	b.n	2405e3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405e2c0:	4b88      	ldr	r3, [pc, #544]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e2c2:	681b      	ldr	r3, [r3, #0]
2405e2c4:	f003 0320 	and.w	r3, r3, #32
2405e2c8:	2b00      	cmp	r3, #0
2405e2ca:	d02d      	beq.n	2405e328 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405e2cc:	4b85      	ldr	r3, [pc, #532]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e2ce:	681b      	ldr	r3, [r3, #0]
2405e2d0:	08db      	lsrs	r3, r3, #3
2405e2d2:	f003 0303 	and.w	r3, r3, #3
2405e2d6:	4a84      	ldr	r2, [pc, #528]	; (2405e4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
2405e2d8:	fa22 f303 	lsr.w	r3, r2, r3
2405e2dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405e2de:	68bb      	ldr	r3, [r7, #8]
2405e2e0:	ee07 3a90 	vmov	s15, r3
2405e2e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e2e8:	697b      	ldr	r3, [r7, #20]
2405e2ea:	ee07 3a90 	vmov	s15, r3
2405e2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e2f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e2f6:	4b7b      	ldr	r3, [pc, #492]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e2fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e2fe:	ee07 3a90 	vmov	s15, r3
2405e302:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e306:	ed97 6a03 	vldr	s12, [r7, #12]
2405e30a:	eddf 5a78 	vldr	s11, [pc, #480]	; 2405e4ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405e30e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e312:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e31a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e31e:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e322:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
2405e326:	e087      	b.n	2405e438 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405e328:	697b      	ldr	r3, [r7, #20]
2405e32a:	ee07 3a90 	vmov	s15, r3
2405e32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e332:	eddf 6a6f 	vldr	s13, [pc, #444]	; 2405e4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
2405e336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e33a:	4b6a      	ldr	r3, [pc, #424]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e33e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e342:	ee07 3a90 	vmov	s15, r3
2405e346:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e34a:	ed97 6a03 	vldr	s12, [r7, #12]
2405e34e:	eddf 5a67 	vldr	s11, [pc, #412]	; 2405e4ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405e352:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e356:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e35a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e35e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e362:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e36a:	e065      	b.n	2405e438 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405e36c:	697b      	ldr	r3, [r7, #20]
2405e36e:	ee07 3a90 	vmov	s15, r3
2405e372:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e376:	eddf 6a5f 	vldr	s13, [pc, #380]	; 2405e4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
2405e37a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e37e:	4b59      	ldr	r3, [pc, #356]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e382:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e386:	ee07 3a90 	vmov	s15, r3
2405e38a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e38e:	ed97 6a03 	vldr	s12, [r7, #12]
2405e392:	eddf 5a56 	vldr	s11, [pc, #344]	; 2405e4ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405e396:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e39a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e39e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e3a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e3a6:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e3aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e3ae:	e043      	b.n	2405e438 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405e3b0:	697b      	ldr	r3, [r7, #20]
2405e3b2:	ee07 3a90 	vmov	s15, r3
2405e3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e3ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2405e4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
2405e3be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e3c2:	4b48      	ldr	r3, [pc, #288]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e3ca:	ee07 3a90 	vmov	s15, r3
2405e3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e3d2:	ed97 6a03 	vldr	s12, [r7, #12]
2405e3d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 2405e4ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405e3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e3e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e3ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e3f2:	e021      	b.n	2405e438 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405e3f4:	697b      	ldr	r3, [r7, #20]
2405e3f6:	ee07 3a90 	vmov	s15, r3
2405e3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e3fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2405e4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
2405e402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e406:	4b37      	ldr	r3, [pc, #220]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e40e:	ee07 3a90 	vmov	s15, r3
2405e412:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e416:	ed97 6a03 	vldr	s12, [r7, #12]
2405e41a:	eddf 5a34 	vldr	s11, [pc, #208]	; 2405e4ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405e41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e422:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e42e:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e436:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
2405e438:	4b2a      	ldr	r3, [pc, #168]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e43c:	0a5b      	lsrs	r3, r3, #9
2405e43e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e442:	ee07 3a90 	vmov	s15, r3
2405e446:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e44a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e44e:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e452:	edd7 6a07 	vldr	s13, [r7, #28]
2405e456:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e45a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e45e:	ee17 2a90 	vmov	r2, s15
2405e462:	687b      	ldr	r3, [r7, #4]
2405e464:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
2405e466:	4b1f      	ldr	r3, [pc, #124]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e46a:	0c1b      	lsrs	r3, r3, #16
2405e46c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e470:	ee07 3a90 	vmov	s15, r3
2405e474:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e47c:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e480:	edd7 6a07 	vldr	s13, [r7, #28]
2405e484:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e48c:	ee17 2a90 	vmov	r2, s15
2405e490:	687b      	ldr	r3, [r7, #4]
2405e492:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
2405e494:	4b13      	ldr	r3, [pc, #76]	; (2405e4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e498:	0e1b      	lsrs	r3, r3, #24
2405e49a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e49e:	ee07 3a90 	vmov	s15, r3
2405e4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e4a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e4aa:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e4ae:	edd7 6a07 	vldr	s13, [r7, #28]
2405e4b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e4b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e4ba:	ee17 2a90 	vmov	r2, s15
2405e4be:	687b      	ldr	r3, [r7, #4]
2405e4c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
2405e4c2:	e008      	b.n	2405e4d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
2405e4c4:	687b      	ldr	r3, [r7, #4]
2405e4c6:	2200      	movs	r2, #0
2405e4c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
2405e4ca:	687b      	ldr	r3, [r7, #4]
2405e4cc:	2200      	movs	r2, #0
2405e4ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
2405e4d0:	687b      	ldr	r3, [r7, #4]
2405e4d2:	2200      	movs	r2, #0
2405e4d4:	609a      	str	r2, [r3, #8]
}
2405e4d6:	bf00      	nop
2405e4d8:	3724      	adds	r7, #36	; 0x24
2405e4da:	46bd      	mov	sp, r7
2405e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e4e0:	4770      	bx	lr
2405e4e2:	bf00      	nop
2405e4e4:	58024400 	.word	0x58024400
2405e4e8:	03d09000 	.word	0x03d09000
2405e4ec:	46000000 	.word	0x46000000
2405e4f0:	4c742400 	.word	0x4c742400
2405e4f4:	4a742400 	.word	0x4a742400
2405e4f8:	4bb71b00 	.word	0x4bb71b00

2405e4fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
2405e4fc:	b480      	push	{r7}
2405e4fe:	b089      	sub	sp, #36	; 0x24
2405e500:	af00      	add	r7, sp, #0
2405e502:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405e504:	4ba1      	ldr	r3, [pc, #644]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e508:	f003 0303 	and.w	r3, r3, #3
2405e50c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2405e50e:	4b9f      	ldr	r3, [pc, #636]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e512:	0d1b      	lsrs	r3, r3, #20
2405e514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405e518:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2405e51a:	4b9c      	ldr	r3, [pc, #624]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405e51e:	0a1b      	lsrs	r3, r3, #8
2405e520:	f003 0301 	and.w	r3, r3, #1
2405e524:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2405e526:	4b99      	ldr	r3, [pc, #612]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405e52a:	08db      	lsrs	r3, r3, #3
2405e52c:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405e530:	693a      	ldr	r2, [r7, #16]
2405e532:	fb02 f303 	mul.w	r3, r2, r3
2405e536:	ee07 3a90 	vmov	s15, r3
2405e53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e53e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
2405e542:	697b      	ldr	r3, [r7, #20]
2405e544:	2b00      	cmp	r3, #0
2405e546:	f000 8111 	beq.w	2405e76c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
2405e54a:	69bb      	ldr	r3, [r7, #24]
2405e54c:	2b02      	cmp	r3, #2
2405e54e:	f000 8083 	beq.w	2405e658 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
2405e552:	69bb      	ldr	r3, [r7, #24]
2405e554:	2b02      	cmp	r3, #2
2405e556:	f200 80a1 	bhi.w	2405e69c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
2405e55a:	69bb      	ldr	r3, [r7, #24]
2405e55c:	2b00      	cmp	r3, #0
2405e55e:	d003      	beq.n	2405e568 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
2405e560:	69bb      	ldr	r3, [r7, #24]
2405e562:	2b01      	cmp	r3, #1
2405e564:	d056      	beq.n	2405e614 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
2405e566:	e099      	b.n	2405e69c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405e568:	4b88      	ldr	r3, [pc, #544]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e56a:	681b      	ldr	r3, [r3, #0]
2405e56c:	f003 0320 	and.w	r3, r3, #32
2405e570:	2b00      	cmp	r3, #0
2405e572:	d02d      	beq.n	2405e5d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405e574:	4b85      	ldr	r3, [pc, #532]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e576:	681b      	ldr	r3, [r3, #0]
2405e578:	08db      	lsrs	r3, r3, #3
2405e57a:	f003 0303 	and.w	r3, r3, #3
2405e57e:	4a84      	ldr	r2, [pc, #528]	; (2405e790 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
2405e580:	fa22 f303 	lsr.w	r3, r2, r3
2405e584:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405e586:	68bb      	ldr	r3, [r7, #8]
2405e588:	ee07 3a90 	vmov	s15, r3
2405e58c:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e590:	697b      	ldr	r3, [r7, #20]
2405e592:	ee07 3a90 	vmov	s15, r3
2405e596:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e59a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e59e:	4b7b      	ldr	r3, [pc, #492]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e5a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e5a6:	ee07 3a90 	vmov	s15, r3
2405e5aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e5ae:	ed97 6a03 	vldr	s12, [r7, #12]
2405e5b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 2405e794 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405e5b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e5ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e5be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e5c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e5c6:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e5ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
2405e5ce:	e087      	b.n	2405e6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405e5d0:	697b      	ldr	r3, [r7, #20]
2405e5d2:	ee07 3a90 	vmov	s15, r3
2405e5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e5da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 2405e798 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
2405e5de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e5e2:	4b6a      	ldr	r3, [pc, #424]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e5e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e5ea:	ee07 3a90 	vmov	s15, r3
2405e5ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e5f2:	ed97 6a03 	vldr	s12, [r7, #12]
2405e5f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 2405e794 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405e5fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e5fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e606:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e60a:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e60e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e612:	e065      	b.n	2405e6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405e614:	697b      	ldr	r3, [r7, #20]
2405e616:	ee07 3a90 	vmov	s15, r3
2405e61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e61e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 2405e79c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
2405e622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e626:	4b59      	ldr	r3, [pc, #356]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e62a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e62e:	ee07 3a90 	vmov	s15, r3
2405e632:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e636:	ed97 6a03 	vldr	s12, [r7, #12]
2405e63a:	eddf 5a56 	vldr	s11, [pc, #344]	; 2405e794 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405e63e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e642:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e64a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e64e:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e656:	e043      	b.n	2405e6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405e658:	697b      	ldr	r3, [r7, #20]
2405e65a:	ee07 3a90 	vmov	s15, r3
2405e65e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e662:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2405e7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
2405e666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e66a:	4b48      	ldr	r3, [pc, #288]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e66e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e672:	ee07 3a90 	vmov	s15, r3
2405e676:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e67a:	ed97 6a03 	vldr	s12, [r7, #12]
2405e67e:	eddf 5a45 	vldr	s11, [pc, #276]	; 2405e794 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405e682:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e686:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e68a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e68e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e692:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e69a:	e021      	b.n	2405e6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405e69c:	697b      	ldr	r3, [r7, #20]
2405e69e:	ee07 3a90 	vmov	s15, r3
2405e6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e6a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2405e79c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
2405e6aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e6ae:	4b37      	ldr	r3, [pc, #220]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e6b6:	ee07 3a90 	vmov	s15, r3
2405e6ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e6be:	ed97 6a03 	vldr	s12, [r7, #12]
2405e6c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 2405e794 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405e6c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e6ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e6ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e6da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e6de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
2405e6e0:	4b2a      	ldr	r3, [pc, #168]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e6e4:	0a5b      	lsrs	r3, r3, #9
2405e6e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e6ea:	ee07 3a90 	vmov	s15, r3
2405e6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e6f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e6f6:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e6fa:	edd7 6a07 	vldr	s13, [r7, #28]
2405e6fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e706:	ee17 2a90 	vmov	r2, s15
2405e70a:	687b      	ldr	r3, [r7, #4]
2405e70c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
2405e70e:	4b1f      	ldr	r3, [pc, #124]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e712:	0c1b      	lsrs	r3, r3, #16
2405e714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e718:	ee07 3a90 	vmov	s15, r3
2405e71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e720:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e724:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e728:	edd7 6a07 	vldr	s13, [r7, #28]
2405e72c:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e734:	ee17 2a90 	vmov	r2, s15
2405e738:	687b      	ldr	r3, [r7, #4]
2405e73a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
2405e73c:	4b13      	ldr	r3, [pc, #76]	; (2405e78c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e740:	0e1b      	lsrs	r3, r3, #24
2405e742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e746:	ee07 3a90 	vmov	s15, r3
2405e74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e74e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e752:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e756:	edd7 6a07 	vldr	s13, [r7, #28]
2405e75a:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e75e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e762:	ee17 2a90 	vmov	r2, s15
2405e766:	687b      	ldr	r3, [r7, #4]
2405e768:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
2405e76a:	e008      	b.n	2405e77e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
2405e76c:	687b      	ldr	r3, [r7, #4]
2405e76e:	2200      	movs	r2, #0
2405e770:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
2405e772:	687b      	ldr	r3, [r7, #4]
2405e774:	2200      	movs	r2, #0
2405e776:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
2405e778:	687b      	ldr	r3, [r7, #4]
2405e77a:	2200      	movs	r2, #0
2405e77c:	609a      	str	r2, [r3, #8]
}
2405e77e:	bf00      	nop
2405e780:	3724      	adds	r7, #36	; 0x24
2405e782:	46bd      	mov	sp, r7
2405e784:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e788:	4770      	bx	lr
2405e78a:	bf00      	nop
2405e78c:	58024400 	.word	0x58024400
2405e790:	03d09000 	.word	0x03d09000
2405e794:	46000000 	.word	0x46000000
2405e798:	4c742400 	.word	0x4c742400
2405e79c:	4a742400 	.word	0x4a742400
2405e7a0:	4bb71b00 	.word	0x4bb71b00

2405e7a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
2405e7a4:	b480      	push	{r7}
2405e7a6:	b089      	sub	sp, #36	; 0x24
2405e7a8:	af00      	add	r7, sp, #0
2405e7aa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405e7ac:	4ba0      	ldr	r3, [pc, #640]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e7b0:	f003 0303 	and.w	r3, r3, #3
2405e7b4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
2405e7b6:	4b9e      	ldr	r3, [pc, #632]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e7ba:	091b      	lsrs	r3, r3, #4
2405e7bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405e7c0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2405e7c2:	4b9b      	ldr	r3, [pc, #620]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405e7c6:	f003 0301 	and.w	r3, r3, #1
2405e7ca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2405e7cc:	4b98      	ldr	r3, [pc, #608]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405e7d0:	08db      	lsrs	r3, r3, #3
2405e7d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405e7d6:	693a      	ldr	r2, [r7, #16]
2405e7d8:	fb02 f303 	mul.w	r3, r2, r3
2405e7dc:	ee07 3a90 	vmov	s15, r3
2405e7e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e7e4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
2405e7e8:	697b      	ldr	r3, [r7, #20]
2405e7ea:	2b00      	cmp	r3, #0
2405e7ec:	f000 8111 	beq.w	2405ea12 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
2405e7f0:	69bb      	ldr	r3, [r7, #24]
2405e7f2:	2b02      	cmp	r3, #2
2405e7f4:	f000 8083 	beq.w	2405e8fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
2405e7f8:	69bb      	ldr	r3, [r7, #24]
2405e7fa:	2b02      	cmp	r3, #2
2405e7fc:	f200 80a1 	bhi.w	2405e942 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
2405e800:	69bb      	ldr	r3, [r7, #24]
2405e802:	2b00      	cmp	r3, #0
2405e804:	d003      	beq.n	2405e80e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
2405e806:	69bb      	ldr	r3, [r7, #24]
2405e808:	2b01      	cmp	r3, #1
2405e80a:	d056      	beq.n	2405e8ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
2405e80c:	e099      	b.n	2405e942 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405e80e:	4b88      	ldr	r3, [pc, #544]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e810:	681b      	ldr	r3, [r3, #0]
2405e812:	f003 0320 	and.w	r3, r3, #32
2405e816:	2b00      	cmp	r3, #0
2405e818:	d02d      	beq.n	2405e876 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405e81a:	4b85      	ldr	r3, [pc, #532]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e81c:	681b      	ldr	r3, [r3, #0]
2405e81e:	08db      	lsrs	r3, r3, #3
2405e820:	f003 0303 	and.w	r3, r3, #3
2405e824:	4a83      	ldr	r2, [pc, #524]	; (2405ea34 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
2405e826:	fa22 f303 	lsr.w	r3, r2, r3
2405e82a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405e82c:	68bb      	ldr	r3, [r7, #8]
2405e82e:	ee07 3a90 	vmov	s15, r3
2405e832:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e836:	697b      	ldr	r3, [r7, #20]
2405e838:	ee07 3a90 	vmov	s15, r3
2405e83c:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e844:	4b7a      	ldr	r3, [pc, #488]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e848:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e84c:	ee07 3a90 	vmov	s15, r3
2405e850:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e854:	ed97 6a03 	vldr	s12, [r7, #12]
2405e858:	eddf 5a77 	vldr	s11, [pc, #476]	; 2405ea38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405e85c:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e860:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e868:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e86c:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e870:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
2405e874:	e087      	b.n	2405e986 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405e876:	697b      	ldr	r3, [r7, #20]
2405e878:	ee07 3a90 	vmov	s15, r3
2405e87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e880:	eddf 6a6e 	vldr	s13, [pc, #440]	; 2405ea3c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
2405e884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e888:	4b69      	ldr	r3, [pc, #420]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e88c:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e890:	ee07 3a90 	vmov	s15, r3
2405e894:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e898:	ed97 6a03 	vldr	s12, [r7, #12]
2405e89c:	eddf 5a66 	vldr	s11, [pc, #408]	; 2405ea38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405e8a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e8a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e8a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e8ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e8b0:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e8b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e8b8:	e065      	b.n	2405e986 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405e8ba:	697b      	ldr	r3, [r7, #20]
2405e8bc:	ee07 3a90 	vmov	s15, r3
2405e8c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e8c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 2405ea40 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
2405e8c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e8cc:	4b58      	ldr	r3, [pc, #352]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e8d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e8d4:	ee07 3a90 	vmov	s15, r3
2405e8d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e8dc:	ed97 6a03 	vldr	s12, [r7, #12]
2405e8e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 2405ea38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405e8e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e8e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e8ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e8f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e8f4:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e8f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e8fc:	e043      	b.n	2405e986 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405e8fe:	697b      	ldr	r3, [r7, #20]
2405e900:	ee07 3a90 	vmov	s15, r3
2405e904:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e908:	eddf 6a4e 	vldr	s13, [pc, #312]	; 2405ea44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
2405e90c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e910:	4b47      	ldr	r3, [pc, #284]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e914:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e918:	ee07 3a90 	vmov	s15, r3
2405e91c:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e920:	ed97 6a03 	vldr	s12, [r7, #12]
2405e924:	eddf 5a44 	vldr	s11, [pc, #272]	; 2405ea38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405e928:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e92c:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e934:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e938:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e93c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e940:	e021      	b.n	2405e986 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405e942:	697b      	ldr	r3, [r7, #20]
2405e944:	ee07 3a90 	vmov	s15, r3
2405e948:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e94c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 2405ea3c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
2405e950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e954:	4b36      	ldr	r3, [pc, #216]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e958:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e95c:	ee07 3a90 	vmov	s15, r3
2405e960:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e964:	ed97 6a03 	vldr	s12, [r7, #12]
2405e968:	eddf 5a33 	vldr	s11, [pc, #204]	; 2405ea38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405e96c:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e970:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e978:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e97c:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e980:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e984:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
2405e986:	4b2a      	ldr	r3, [pc, #168]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e98a:	0a5b      	lsrs	r3, r3, #9
2405e98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e990:	ee07 3a90 	vmov	s15, r3
2405e994:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e99c:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e9a0:	edd7 6a07 	vldr	s13, [r7, #28]
2405e9a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e9a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e9ac:	ee17 2a90 	vmov	r2, s15
2405e9b0:	687b      	ldr	r3, [r7, #4]
2405e9b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
2405e9b4:	4b1e      	ldr	r3, [pc, #120]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e9b8:	0c1b      	lsrs	r3, r3, #16
2405e9ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e9be:	ee07 3a90 	vmov	s15, r3
2405e9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e9c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e9ca:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e9ce:	edd7 6a07 	vldr	s13, [r7, #28]
2405e9d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e9d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e9da:	ee17 2a90 	vmov	r2, s15
2405e9de:	687b      	ldr	r3, [r7, #4]
2405e9e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
2405e9e2:	4b13      	ldr	r3, [pc, #76]	; (2405ea30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e9e6:	0e1b      	lsrs	r3, r3, #24
2405e9e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e9ec:	ee07 3a90 	vmov	s15, r3
2405e9f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e9f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e9f8:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e9fc:	edd7 6a07 	vldr	s13, [r7, #28]
2405ea00:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405ea04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405ea08:	ee17 2a90 	vmov	r2, s15
2405ea0c:	687b      	ldr	r3, [r7, #4]
2405ea0e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
2405ea10:	e008      	b.n	2405ea24 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
2405ea12:	687b      	ldr	r3, [r7, #4]
2405ea14:	2200      	movs	r2, #0
2405ea16:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
2405ea18:	687b      	ldr	r3, [r7, #4]
2405ea1a:	2200      	movs	r2, #0
2405ea1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
2405ea1e:	687b      	ldr	r3, [r7, #4]
2405ea20:	2200      	movs	r2, #0
2405ea22:	609a      	str	r2, [r3, #8]
}
2405ea24:	bf00      	nop
2405ea26:	3724      	adds	r7, #36	; 0x24
2405ea28:	46bd      	mov	sp, r7
2405ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405ea2e:	4770      	bx	lr
2405ea30:	58024400 	.word	0x58024400
2405ea34:	03d09000 	.word	0x03d09000
2405ea38:	46000000 	.word	0x46000000
2405ea3c:	4c742400 	.word	0x4c742400
2405ea40:	4a742400 	.word	0x4a742400
2405ea44:	4bb71b00 	.word	0x4bb71b00

2405ea48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
2405ea48:	b580      	push	{r7, lr}
2405ea4a:	b084      	sub	sp, #16
2405ea4c:	af00      	add	r7, sp, #0
2405ea4e:	6078      	str	r0, [r7, #4]
2405ea50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2405ea52:	2300      	movs	r3, #0
2405ea54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2405ea56:	4b53      	ldr	r3, [pc, #332]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405ea58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405ea5a:	f003 0303 	and.w	r3, r3, #3
2405ea5e:	2b03      	cmp	r3, #3
2405ea60:	d101      	bne.n	2405ea66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
2405ea62:	2301      	movs	r3, #1
2405ea64:	e099      	b.n	2405eb9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
2405ea66:	4b4f      	ldr	r3, [pc, #316]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405ea68:	681b      	ldr	r3, [r3, #0]
2405ea6a:	4a4e      	ldr	r2, [pc, #312]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405ea6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2405ea70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405ea72:	f7f5 f9e7 	bl	24053e44 <HAL_GetTick>
2405ea76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2405ea78:	e008      	b.n	2405ea8c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2405ea7a:	f7f5 f9e3 	bl	24053e44 <HAL_GetTick>
2405ea7e:	4602      	mov	r2, r0
2405ea80:	68bb      	ldr	r3, [r7, #8]
2405ea82:	1ad3      	subs	r3, r2, r3
2405ea84:	2b02      	cmp	r3, #2
2405ea86:	d901      	bls.n	2405ea8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
2405ea88:	2303      	movs	r3, #3
2405ea8a:	e086      	b.n	2405eb9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2405ea8c:	4b45      	ldr	r3, [pc, #276]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405ea8e:	681b      	ldr	r3, [r3, #0]
2405ea90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405ea94:	2b00      	cmp	r3, #0
2405ea96:	d1f0      	bne.n	2405ea7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
2405ea98:	4b42      	ldr	r3, [pc, #264]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405ea9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405ea9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
2405eaa0:	687b      	ldr	r3, [r7, #4]
2405eaa2:	681b      	ldr	r3, [r3, #0]
2405eaa4:	031b      	lsls	r3, r3, #12
2405eaa6:	493f      	ldr	r1, [pc, #252]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eaa8:	4313      	orrs	r3, r2
2405eaaa:	628b      	str	r3, [r1, #40]	; 0x28
2405eaac:	687b      	ldr	r3, [r7, #4]
2405eaae:	685b      	ldr	r3, [r3, #4]
2405eab0:	3b01      	subs	r3, #1
2405eab2:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405eab6:	687b      	ldr	r3, [r7, #4]
2405eab8:	689b      	ldr	r3, [r3, #8]
2405eaba:	3b01      	subs	r3, #1
2405eabc:	025b      	lsls	r3, r3, #9
2405eabe:	b29b      	uxth	r3, r3
2405eac0:	431a      	orrs	r2, r3
2405eac2:	687b      	ldr	r3, [r7, #4]
2405eac4:	68db      	ldr	r3, [r3, #12]
2405eac6:	3b01      	subs	r3, #1
2405eac8:	041b      	lsls	r3, r3, #16
2405eaca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2405eace:	431a      	orrs	r2, r3
2405ead0:	687b      	ldr	r3, [r7, #4]
2405ead2:	691b      	ldr	r3, [r3, #16]
2405ead4:	3b01      	subs	r3, #1
2405ead6:	061b      	lsls	r3, r3, #24
2405ead8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2405eadc:	4931      	ldr	r1, [pc, #196]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eade:	4313      	orrs	r3, r2
2405eae0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
2405eae2:	4b30      	ldr	r3, [pc, #192]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405eae6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
2405eaea:	687b      	ldr	r3, [r7, #4]
2405eaec:	695b      	ldr	r3, [r3, #20]
2405eaee:	492d      	ldr	r1, [pc, #180]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eaf0:	4313      	orrs	r3, r2
2405eaf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
2405eaf4:	4b2b      	ldr	r3, [pc, #172]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405eaf8:	f023 0220 	bic.w	r2, r3, #32
2405eafc:	687b      	ldr	r3, [r7, #4]
2405eafe:	699b      	ldr	r3, [r3, #24]
2405eb00:	4928      	ldr	r1, [pc, #160]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb02:	4313      	orrs	r3, r2
2405eb04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
2405eb06:	4b27      	ldr	r3, [pc, #156]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405eb0a:	4a26      	ldr	r2, [pc, #152]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb0c:	f023 0310 	bic.w	r3, r3, #16
2405eb10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
2405eb12:	4b24      	ldr	r3, [pc, #144]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2405eb16:	4b24      	ldr	r3, [pc, #144]	; (2405eba8 <RCCEx_PLL2_Config+0x160>)
2405eb18:	4013      	ands	r3, r2
2405eb1a:	687a      	ldr	r2, [r7, #4]
2405eb1c:	69d2      	ldr	r2, [r2, #28]
2405eb1e:	00d2      	lsls	r2, r2, #3
2405eb20:	4920      	ldr	r1, [pc, #128]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb22:	4313      	orrs	r3, r2
2405eb24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
2405eb26:	4b1f      	ldr	r3, [pc, #124]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405eb2a:	4a1e      	ldr	r2, [pc, #120]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb2c:	f043 0310 	orr.w	r3, r3, #16
2405eb30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
2405eb32:	683b      	ldr	r3, [r7, #0]
2405eb34:	2b00      	cmp	r3, #0
2405eb36:	d106      	bne.n	2405eb46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
2405eb38:	4b1a      	ldr	r3, [pc, #104]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405eb3c:	4a19      	ldr	r2, [pc, #100]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2405eb42:	62d3      	str	r3, [r2, #44]	; 0x2c
2405eb44:	e00f      	b.n	2405eb66 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
2405eb46:	683b      	ldr	r3, [r7, #0]
2405eb48:	2b01      	cmp	r3, #1
2405eb4a:	d106      	bne.n	2405eb5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
2405eb4c:	4b15      	ldr	r3, [pc, #84]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405eb50:	4a14      	ldr	r2, [pc, #80]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2405eb56:	62d3      	str	r3, [r2, #44]	; 0x2c
2405eb58:	e005      	b.n	2405eb66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
2405eb5a:	4b12      	ldr	r3, [pc, #72]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405eb5e:	4a11      	ldr	r2, [pc, #68]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
2405eb64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
2405eb66:	4b0f      	ldr	r3, [pc, #60]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb68:	681b      	ldr	r3, [r3, #0]
2405eb6a:	4a0e      	ldr	r2, [pc, #56]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
2405eb70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405eb72:	f7f5 f967 	bl	24053e44 <HAL_GetTick>
2405eb76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2405eb78:	e008      	b.n	2405eb8c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2405eb7a:	f7f5 f963 	bl	24053e44 <HAL_GetTick>
2405eb7e:	4602      	mov	r2, r0
2405eb80:	68bb      	ldr	r3, [r7, #8]
2405eb82:	1ad3      	subs	r3, r2, r3
2405eb84:	2b02      	cmp	r3, #2
2405eb86:	d901      	bls.n	2405eb8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
2405eb88:	2303      	movs	r3, #3
2405eb8a:	e006      	b.n	2405eb9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2405eb8c:	4b05      	ldr	r3, [pc, #20]	; (2405eba4 <RCCEx_PLL2_Config+0x15c>)
2405eb8e:	681b      	ldr	r3, [r3, #0]
2405eb90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405eb94:	2b00      	cmp	r3, #0
2405eb96:	d0f0      	beq.n	2405eb7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
2405eb98:	7bfb      	ldrb	r3, [r7, #15]
}
2405eb9a:	4618      	mov	r0, r3
2405eb9c:	3710      	adds	r7, #16
2405eb9e:	46bd      	mov	sp, r7
2405eba0:	bd80      	pop	{r7, pc}
2405eba2:	bf00      	nop
2405eba4:	58024400 	.word	0x58024400
2405eba8:	ffff0007 	.word	0xffff0007

2405ebac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
2405ebac:	b580      	push	{r7, lr}
2405ebae:	b084      	sub	sp, #16
2405ebb0:	af00      	add	r7, sp, #0
2405ebb2:	6078      	str	r0, [r7, #4]
2405ebb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2405ebb6:	2300      	movs	r3, #0
2405ebb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2405ebba:	4b53      	ldr	r3, [pc, #332]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ebbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405ebbe:	f003 0303 	and.w	r3, r3, #3
2405ebc2:	2b03      	cmp	r3, #3
2405ebc4:	d101      	bne.n	2405ebca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
2405ebc6:	2301      	movs	r3, #1
2405ebc8:	e099      	b.n	2405ecfe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
2405ebca:	4b4f      	ldr	r3, [pc, #316]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ebcc:	681b      	ldr	r3, [r3, #0]
2405ebce:	4a4e      	ldr	r2, [pc, #312]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ebd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2405ebd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405ebd6:	f7f5 f935 	bl	24053e44 <HAL_GetTick>
2405ebda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2405ebdc:	e008      	b.n	2405ebf0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2405ebde:	f7f5 f931 	bl	24053e44 <HAL_GetTick>
2405ebe2:	4602      	mov	r2, r0
2405ebe4:	68bb      	ldr	r3, [r7, #8]
2405ebe6:	1ad3      	subs	r3, r2, r3
2405ebe8:	2b02      	cmp	r3, #2
2405ebea:	d901      	bls.n	2405ebf0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
2405ebec:	2303      	movs	r3, #3
2405ebee:	e086      	b.n	2405ecfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2405ebf0:	4b45      	ldr	r3, [pc, #276]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ebf2:	681b      	ldr	r3, [r3, #0]
2405ebf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405ebf8:	2b00      	cmp	r3, #0
2405ebfa:	d1f0      	bne.n	2405ebde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
2405ebfc:	4b42      	ldr	r3, [pc, #264]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ebfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405ec00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
2405ec04:	687b      	ldr	r3, [r7, #4]
2405ec06:	681b      	ldr	r3, [r3, #0]
2405ec08:	051b      	lsls	r3, r3, #20
2405ec0a:	493f      	ldr	r1, [pc, #252]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec0c:	4313      	orrs	r3, r2
2405ec0e:	628b      	str	r3, [r1, #40]	; 0x28
2405ec10:	687b      	ldr	r3, [r7, #4]
2405ec12:	685b      	ldr	r3, [r3, #4]
2405ec14:	3b01      	subs	r3, #1
2405ec16:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405ec1a:	687b      	ldr	r3, [r7, #4]
2405ec1c:	689b      	ldr	r3, [r3, #8]
2405ec1e:	3b01      	subs	r3, #1
2405ec20:	025b      	lsls	r3, r3, #9
2405ec22:	b29b      	uxth	r3, r3
2405ec24:	431a      	orrs	r2, r3
2405ec26:	687b      	ldr	r3, [r7, #4]
2405ec28:	68db      	ldr	r3, [r3, #12]
2405ec2a:	3b01      	subs	r3, #1
2405ec2c:	041b      	lsls	r3, r3, #16
2405ec2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2405ec32:	431a      	orrs	r2, r3
2405ec34:	687b      	ldr	r3, [r7, #4]
2405ec36:	691b      	ldr	r3, [r3, #16]
2405ec38:	3b01      	subs	r3, #1
2405ec3a:	061b      	lsls	r3, r3, #24
2405ec3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2405ec40:	4931      	ldr	r1, [pc, #196]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec42:	4313      	orrs	r3, r2
2405ec44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
2405ec46:	4b30      	ldr	r3, [pc, #192]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ec4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
2405ec4e:	687b      	ldr	r3, [r7, #4]
2405ec50:	695b      	ldr	r3, [r3, #20]
2405ec52:	492d      	ldr	r1, [pc, #180]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec54:	4313      	orrs	r3, r2
2405ec56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
2405ec58:	4b2b      	ldr	r3, [pc, #172]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ec5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
2405ec60:	687b      	ldr	r3, [r7, #4]
2405ec62:	699b      	ldr	r3, [r3, #24]
2405ec64:	4928      	ldr	r1, [pc, #160]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec66:	4313      	orrs	r3, r2
2405ec68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
2405ec6a:	4b27      	ldr	r3, [pc, #156]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ec6e:	4a26      	ldr	r2, [pc, #152]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2405ec74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
2405ec76:	4b24      	ldr	r3, [pc, #144]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2405ec7a:	4b24      	ldr	r3, [pc, #144]	; (2405ed0c <RCCEx_PLL3_Config+0x160>)
2405ec7c:	4013      	ands	r3, r2
2405ec7e:	687a      	ldr	r2, [r7, #4]
2405ec80:	69d2      	ldr	r2, [r2, #28]
2405ec82:	00d2      	lsls	r2, r2, #3
2405ec84:	4920      	ldr	r1, [pc, #128]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec86:	4313      	orrs	r3, r2
2405ec88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
2405ec8a:	4b1f      	ldr	r3, [pc, #124]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ec8e:	4a1e      	ldr	r2, [pc, #120]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405ec94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
2405ec96:	683b      	ldr	r3, [r7, #0]
2405ec98:	2b00      	cmp	r3, #0
2405ec9a:	d106      	bne.n	2405ecaa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2405ec9c:	4b1a      	ldr	r3, [pc, #104]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ec9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405eca0:	4a19      	ldr	r2, [pc, #100]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405eca2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2405eca6:	62d3      	str	r3, [r2, #44]	; 0x2c
2405eca8:	e00f      	b.n	2405ecca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
2405ecaa:	683b      	ldr	r3, [r7, #0]
2405ecac:	2b01      	cmp	r3, #1
2405ecae:	d106      	bne.n	2405ecbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
2405ecb0:	4b15      	ldr	r3, [pc, #84]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ecb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ecb4:	4a14      	ldr	r2, [pc, #80]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ecb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
2405ecba:	62d3      	str	r3, [r2, #44]	; 0x2c
2405ecbc:	e005      	b.n	2405ecca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
2405ecbe:	4b12      	ldr	r3, [pc, #72]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ecc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ecc2:	4a11      	ldr	r2, [pc, #68]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ecc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2405ecc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
2405ecca:	4b0f      	ldr	r3, [pc, #60]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405eccc:	681b      	ldr	r3, [r3, #0]
2405ecce:	4a0e      	ldr	r2, [pc, #56]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ecd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2405ecd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405ecd6:	f7f5 f8b5 	bl	24053e44 <HAL_GetTick>
2405ecda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2405ecdc:	e008      	b.n	2405ecf0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2405ecde:	f7f5 f8b1 	bl	24053e44 <HAL_GetTick>
2405ece2:	4602      	mov	r2, r0
2405ece4:	68bb      	ldr	r3, [r7, #8]
2405ece6:	1ad3      	subs	r3, r2, r3
2405ece8:	2b02      	cmp	r3, #2
2405ecea:	d901      	bls.n	2405ecf0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
2405ecec:	2303      	movs	r3, #3
2405ecee:	e006      	b.n	2405ecfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2405ecf0:	4b05      	ldr	r3, [pc, #20]	; (2405ed08 <RCCEx_PLL3_Config+0x15c>)
2405ecf2:	681b      	ldr	r3, [r3, #0]
2405ecf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405ecf8:	2b00      	cmp	r3, #0
2405ecfa:	d0f0      	beq.n	2405ecde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
2405ecfc:	7bfb      	ldrb	r3, [r7, #15]
}
2405ecfe:	4618      	mov	r0, r3
2405ed00:	3710      	adds	r7, #16
2405ed02:	46bd      	mov	sp, r7
2405ed04:	bd80      	pop	{r7, pc}
2405ed06:	bf00      	nop
2405ed08:	58024400 	.word	0x58024400
2405ed0c:	ffff0007 	.word	0xffff0007

2405ed10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
2405ed10:	b580      	push	{r7, lr}
2405ed12:	b084      	sub	sp, #16
2405ed14:	af00      	add	r7, sp, #0
2405ed16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
2405ed18:	2301      	movs	r3, #1
2405ed1a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
2405ed1c:	687b      	ldr	r3, [r7, #4]
2405ed1e:	2b00      	cmp	r3, #0
2405ed20:	d074      	beq.n	2405ee0c <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
2405ed22:	687b      	ldr	r3, [r7, #4]
2405ed24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
2405ed28:	b2db      	uxtb	r3, r3
2405ed2a:	2b00      	cmp	r3, #0
2405ed2c:	d106      	bne.n	2405ed3c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
2405ed2e:	687b      	ldr	r3, [r7, #4]
2405ed30:	2200      	movs	r2, #0
2405ed32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
2405ed36:	6878      	ldr	r0, [r7, #4]
2405ed38:	f7f4 fc82 	bl	24053640 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
2405ed3c:	687b      	ldr	r3, [r7, #4]
2405ed3e:	2202      	movs	r2, #2
2405ed40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
2405ed44:	687b      	ldr	r3, [r7, #4]
2405ed46:	681b      	ldr	r3, [r3, #0]
2405ed48:	68db      	ldr	r3, [r3, #12]
2405ed4a:	f003 0310 	and.w	r3, r3, #16
2405ed4e:	2b10      	cmp	r3, #16
2405ed50:	d053      	beq.n	2405edfa <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2405ed52:	687b      	ldr	r3, [r7, #4]
2405ed54:	681b      	ldr	r3, [r3, #0]
2405ed56:	22ca      	movs	r2, #202	; 0xca
2405ed58:	625a      	str	r2, [r3, #36]	; 0x24
2405ed5a:	687b      	ldr	r3, [r7, #4]
2405ed5c:	681b      	ldr	r3, [r3, #0]
2405ed5e:	2253      	movs	r2, #83	; 0x53
2405ed60:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
2405ed62:	6878      	ldr	r0, [r7, #4]
2405ed64:	f000 fa4e 	bl	2405f204 <RTC_EnterInitMode>
2405ed68:	4603      	mov	r3, r0
2405ed6a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
2405ed6c:	7bfb      	ldrb	r3, [r7, #15]
2405ed6e:	2b00      	cmp	r3, #0
2405ed70:	d124      	bne.n	2405edbc <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
2405ed72:	687b      	ldr	r3, [r7, #4]
2405ed74:	681b      	ldr	r3, [r3, #0]
2405ed76:	6999      	ldr	r1, [r3, #24]
2405ed78:	687b      	ldr	r3, [r7, #4]
2405ed7a:	681a      	ldr	r2, [r3, #0]
2405ed7c:	4b26      	ldr	r3, [pc, #152]	; (2405ee18 <HAL_RTC_Init+0x108>)
2405ed7e:	400b      	ands	r3, r1
2405ed80:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
2405ed82:	687b      	ldr	r3, [r7, #4]
2405ed84:	681b      	ldr	r3, [r3, #0]
2405ed86:	6999      	ldr	r1, [r3, #24]
2405ed88:	687b      	ldr	r3, [r7, #4]
2405ed8a:	685a      	ldr	r2, [r3, #4]
2405ed8c:	687b      	ldr	r3, [r7, #4]
2405ed8e:	691b      	ldr	r3, [r3, #16]
2405ed90:	431a      	orrs	r2, r3
2405ed92:	687b      	ldr	r3, [r7, #4]
2405ed94:	699b      	ldr	r3, [r3, #24]
2405ed96:	431a      	orrs	r2, r3
2405ed98:	687b      	ldr	r3, [r7, #4]
2405ed9a:	681b      	ldr	r3, [r3, #0]
2405ed9c:	430a      	orrs	r2, r1
2405ed9e:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
2405eda0:	687b      	ldr	r3, [r7, #4]
2405eda2:	689b      	ldr	r3, [r3, #8]
2405eda4:	0419      	lsls	r1, r3, #16
2405eda6:	687b      	ldr	r3, [r7, #4]
2405eda8:	68da      	ldr	r2, [r3, #12]
2405edaa:	687b      	ldr	r3, [r7, #4]
2405edac:	681b      	ldr	r3, [r3, #0]
2405edae:	430a      	orrs	r2, r1
2405edb0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
2405edb2:	6878      	ldr	r0, [r7, #4]
2405edb4:	f000 fa5c 	bl	2405f270 <RTC_ExitInitMode>
2405edb8:	4603      	mov	r3, r0
2405edba:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
2405edbc:	7bfb      	ldrb	r3, [r7, #15]
2405edbe:	2b00      	cmp	r3, #0
2405edc0:	d116      	bne.n	2405edf0 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
2405edc2:	687b      	ldr	r3, [r7, #4]
2405edc4:	681b      	ldr	r3, [r3, #0]
2405edc6:	699a      	ldr	r2, [r3, #24]
2405edc8:	687b      	ldr	r3, [r7, #4]
2405edca:	681b      	ldr	r3, [r3, #0]
2405edcc:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
2405edd0:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
2405edd2:	687b      	ldr	r3, [r7, #4]
2405edd4:	681b      	ldr	r3, [r3, #0]
2405edd6:	6999      	ldr	r1, [r3, #24]
2405edd8:	687b      	ldr	r3, [r7, #4]
2405edda:	6a1a      	ldr	r2, [r3, #32]
2405eddc:	687b      	ldr	r3, [r7, #4]
2405edde:	69db      	ldr	r3, [r3, #28]
2405ede0:	431a      	orrs	r2, r3
2405ede2:	687b      	ldr	r3, [r7, #4]
2405ede4:	695b      	ldr	r3, [r3, #20]
2405ede6:	431a      	orrs	r2, r3
2405ede8:	687b      	ldr	r3, [r7, #4]
2405edea:	681b      	ldr	r3, [r3, #0]
2405edec:	430a      	orrs	r2, r1
2405edee:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2405edf0:	687b      	ldr	r3, [r7, #4]
2405edf2:	681b      	ldr	r3, [r3, #0]
2405edf4:	22ff      	movs	r2, #255	; 0xff
2405edf6:	625a      	str	r2, [r3, #36]	; 0x24
2405edf8:	e001      	b.n	2405edfe <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
2405edfa:	2300      	movs	r3, #0
2405edfc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
2405edfe:	7bfb      	ldrb	r3, [r7, #15]
2405ee00:	2b00      	cmp	r3, #0
2405ee02:	d103      	bne.n	2405ee0c <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
2405ee04:	687b      	ldr	r3, [r7, #4]
2405ee06:	2201      	movs	r2, #1
2405ee08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
2405ee0c:	7bfb      	ldrb	r3, [r7, #15]
}
2405ee0e:	4618      	mov	r0, r3
2405ee10:	3710      	adds	r7, #16
2405ee12:	46bd      	mov	sp, r7
2405ee14:	bd80      	pop	{r7, pc}
2405ee16:	bf00      	nop
2405ee18:	fb8fffbf 	.word	0xfb8fffbf

2405ee1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
2405ee1c:	b590      	push	{r4, r7, lr}
2405ee1e:	b087      	sub	sp, #28
2405ee20:	af00      	add	r7, sp, #0
2405ee22:	60f8      	str	r0, [r7, #12]
2405ee24:	60b9      	str	r1, [r7, #8]
2405ee26:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
2405ee28:	68fb      	ldr	r3, [r7, #12]
2405ee2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
2405ee2e:	2b01      	cmp	r3, #1
2405ee30:	d101      	bne.n	2405ee36 <HAL_RTC_SetTime+0x1a>
2405ee32:	2302      	movs	r3, #2
2405ee34:	e089      	b.n	2405ef4a <HAL_RTC_SetTime+0x12e>
2405ee36:	68fb      	ldr	r3, [r7, #12]
2405ee38:	2201      	movs	r2, #1
2405ee3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
2405ee3e:	68fb      	ldr	r3, [r7, #12]
2405ee40:	2202      	movs	r2, #2
2405ee42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2405ee46:	68fb      	ldr	r3, [r7, #12]
2405ee48:	681b      	ldr	r3, [r3, #0]
2405ee4a:	22ca      	movs	r2, #202	; 0xca
2405ee4c:	625a      	str	r2, [r3, #36]	; 0x24
2405ee4e:	68fb      	ldr	r3, [r7, #12]
2405ee50:	681b      	ldr	r3, [r3, #0]
2405ee52:	2253      	movs	r2, #83	; 0x53
2405ee54:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
2405ee56:	68f8      	ldr	r0, [r7, #12]
2405ee58:	f000 f9d4 	bl	2405f204 <RTC_EnterInitMode>
2405ee5c:	4603      	mov	r3, r0
2405ee5e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
2405ee60:	7cfb      	ldrb	r3, [r7, #19]
2405ee62:	2b00      	cmp	r3, #0
2405ee64:	d161      	bne.n	2405ef2a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
2405ee66:	687b      	ldr	r3, [r7, #4]
2405ee68:	2b00      	cmp	r3, #0
2405ee6a:	d126      	bne.n	2405eeba <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
2405ee6c:	68fb      	ldr	r3, [r7, #12]
2405ee6e:	681b      	ldr	r3, [r3, #0]
2405ee70:	699b      	ldr	r3, [r3, #24]
2405ee72:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405ee76:	2b00      	cmp	r3, #0
2405ee78:	d102      	bne.n	2405ee80 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
2405ee7a:	68bb      	ldr	r3, [r7, #8]
2405ee7c:	2200      	movs	r2, #0
2405ee7e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ee80:	68bb      	ldr	r3, [r7, #8]
2405ee82:	781b      	ldrb	r3, [r3, #0]
2405ee84:	4618      	mov	r0, r3
2405ee86:	f000 fa31 	bl	2405f2ec <RTC_ByteToBcd2>
2405ee8a:	4603      	mov	r3, r0
2405ee8c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405ee8e:	68bb      	ldr	r3, [r7, #8]
2405ee90:	785b      	ldrb	r3, [r3, #1]
2405ee92:	4618      	mov	r0, r3
2405ee94:	f000 fa2a 	bl	2405f2ec <RTC_ByteToBcd2>
2405ee98:	4603      	mov	r3, r0
2405ee9a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ee9c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
2405ee9e:	68bb      	ldr	r3, [r7, #8]
2405eea0:	789b      	ldrb	r3, [r3, #2]
2405eea2:	4618      	mov	r0, r3
2405eea4:	f000 fa22 	bl	2405f2ec <RTC_ByteToBcd2>
2405eea8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405eeaa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
2405eeae:	68bb      	ldr	r3, [r7, #8]
2405eeb0:	78db      	ldrb	r3, [r3, #3]
2405eeb2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405eeb4:	4313      	orrs	r3, r2
2405eeb6:	617b      	str	r3, [r7, #20]
2405eeb8:	e018      	b.n	2405eeec <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
2405eeba:	68fb      	ldr	r3, [r7, #12]
2405eebc:	681b      	ldr	r3, [r3, #0]
2405eebe:	699b      	ldr	r3, [r3, #24]
2405eec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405eec4:	2b00      	cmp	r3, #0
2405eec6:	d102      	bne.n	2405eece <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
2405eec8:	68bb      	ldr	r3, [r7, #8]
2405eeca:	2200      	movs	r2, #0
2405eecc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405eece:	68bb      	ldr	r3, [r7, #8]
2405eed0:	781b      	ldrb	r3, [r3, #0]
2405eed2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405eed4:	68bb      	ldr	r3, [r7, #8]
2405eed6:	785b      	ldrb	r3, [r3, #1]
2405eed8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405eeda:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
2405eedc:	68ba      	ldr	r2, [r7, #8]
2405eede:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405eee0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
2405eee2:	68bb      	ldr	r3, [r7, #8]
2405eee4:	78db      	ldrb	r3, [r3, #3]
2405eee6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405eee8:	4313      	orrs	r3, r2
2405eeea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
2405eeec:	68fb      	ldr	r3, [r7, #12]
2405eeee:	681a      	ldr	r2, [r3, #0]
2405eef0:	6979      	ldr	r1, [r7, #20]
2405eef2:	4b18      	ldr	r3, [pc, #96]	; (2405ef54 <HAL_RTC_SetTime+0x138>)
2405eef4:	400b      	ands	r3, r1
2405eef6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
2405eef8:	68fb      	ldr	r3, [r7, #12]
2405eefa:	681b      	ldr	r3, [r3, #0]
2405eefc:	699a      	ldr	r2, [r3, #24]
2405eefe:	68fb      	ldr	r3, [r7, #12]
2405ef00:	681b      	ldr	r3, [r3, #0]
2405ef02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2405ef06:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
2405ef08:	68fb      	ldr	r3, [r7, #12]
2405ef0a:	681b      	ldr	r3, [r3, #0]
2405ef0c:	6999      	ldr	r1, [r3, #24]
2405ef0e:	68bb      	ldr	r3, [r7, #8]
2405ef10:	68da      	ldr	r2, [r3, #12]
2405ef12:	68bb      	ldr	r3, [r7, #8]
2405ef14:	691b      	ldr	r3, [r3, #16]
2405ef16:	431a      	orrs	r2, r3
2405ef18:	68fb      	ldr	r3, [r7, #12]
2405ef1a:	681b      	ldr	r3, [r3, #0]
2405ef1c:	430a      	orrs	r2, r1
2405ef1e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
2405ef20:	68f8      	ldr	r0, [r7, #12]
2405ef22:	f000 f9a5 	bl	2405f270 <RTC_ExitInitMode>
2405ef26:	4603      	mov	r3, r0
2405ef28:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2405ef2a:	68fb      	ldr	r3, [r7, #12]
2405ef2c:	681b      	ldr	r3, [r3, #0]
2405ef2e:	22ff      	movs	r2, #255	; 0xff
2405ef30:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
2405ef32:	7cfb      	ldrb	r3, [r7, #19]
2405ef34:	2b00      	cmp	r3, #0
2405ef36:	d103      	bne.n	2405ef40 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
2405ef38:	68fb      	ldr	r3, [r7, #12]
2405ef3a:	2201      	movs	r2, #1
2405ef3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
2405ef40:	68fb      	ldr	r3, [r7, #12]
2405ef42:	2200      	movs	r2, #0
2405ef44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
2405ef48:	7cfb      	ldrb	r3, [r7, #19]
}
2405ef4a:	4618      	mov	r0, r3
2405ef4c:	371c      	adds	r7, #28
2405ef4e:	46bd      	mov	sp, r7
2405ef50:	bd90      	pop	{r4, r7, pc}
2405ef52:	bf00      	nop
2405ef54:	007f7f7f 	.word	0x007f7f7f

2405ef58 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
2405ef58:	b580      	push	{r7, lr}
2405ef5a:	b086      	sub	sp, #24
2405ef5c:	af00      	add	r7, sp, #0
2405ef5e:	60f8      	str	r0, [r7, #12]
2405ef60:	60b9      	str	r1, [r7, #8]
2405ef62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
2405ef64:	68fb      	ldr	r3, [r7, #12]
2405ef66:	681b      	ldr	r3, [r3, #0]
2405ef68:	689a      	ldr	r2, [r3, #8]
2405ef6a:	68bb      	ldr	r3, [r7, #8]
2405ef6c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
2405ef6e:	68fb      	ldr	r3, [r7, #12]
2405ef70:	681b      	ldr	r3, [r3, #0]
2405ef72:	691b      	ldr	r3, [r3, #16]
2405ef74:	f3c3 020e 	ubfx	r2, r3, #0, #15
2405ef78:	68bb      	ldr	r3, [r7, #8]
2405ef7a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
2405ef7c:	68fb      	ldr	r3, [r7, #12]
2405ef7e:	681b      	ldr	r3, [r3, #0]
2405ef80:	681a      	ldr	r2, [r3, #0]
2405ef82:	4b22      	ldr	r3, [pc, #136]	; (2405f00c <HAL_RTC_GetTime+0xb4>)
2405ef84:	4013      	ands	r3, r2
2405ef86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
2405ef88:	697b      	ldr	r3, [r7, #20]
2405ef8a:	0c1b      	lsrs	r3, r3, #16
2405ef8c:	b2db      	uxtb	r3, r3
2405ef8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405ef92:	b2da      	uxtb	r2, r3
2405ef94:	68bb      	ldr	r3, [r7, #8]
2405ef96:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
2405ef98:	697b      	ldr	r3, [r7, #20]
2405ef9a:	0a1b      	lsrs	r3, r3, #8
2405ef9c:	b2db      	uxtb	r3, r3
2405ef9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405efa2:	b2da      	uxtb	r2, r3
2405efa4:	68bb      	ldr	r3, [r7, #8]
2405efa6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
2405efa8:	697b      	ldr	r3, [r7, #20]
2405efaa:	b2db      	uxtb	r3, r3
2405efac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405efb0:	b2da      	uxtb	r2, r3
2405efb2:	68bb      	ldr	r3, [r7, #8]
2405efb4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
2405efb6:	697b      	ldr	r3, [r7, #20]
2405efb8:	0d9b      	lsrs	r3, r3, #22
2405efba:	b2db      	uxtb	r3, r3
2405efbc:	f003 0301 	and.w	r3, r3, #1
2405efc0:	b2da      	uxtb	r2, r3
2405efc2:	68bb      	ldr	r3, [r7, #8]
2405efc4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
2405efc6:	687b      	ldr	r3, [r7, #4]
2405efc8:	2b00      	cmp	r3, #0
2405efca:	d11a      	bne.n	2405f002 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
2405efcc:	68bb      	ldr	r3, [r7, #8]
2405efce:	781b      	ldrb	r3, [r3, #0]
2405efd0:	4618      	mov	r0, r3
2405efd2:	f000 f9ab 	bl	2405f32c <RTC_Bcd2ToByte>
2405efd6:	4603      	mov	r3, r0
2405efd8:	461a      	mov	r2, r3
2405efda:	68bb      	ldr	r3, [r7, #8]
2405efdc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
2405efde:	68bb      	ldr	r3, [r7, #8]
2405efe0:	785b      	ldrb	r3, [r3, #1]
2405efe2:	4618      	mov	r0, r3
2405efe4:	f000 f9a2 	bl	2405f32c <RTC_Bcd2ToByte>
2405efe8:	4603      	mov	r3, r0
2405efea:	461a      	mov	r2, r3
2405efec:	68bb      	ldr	r3, [r7, #8]
2405efee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
2405eff0:	68bb      	ldr	r3, [r7, #8]
2405eff2:	789b      	ldrb	r3, [r3, #2]
2405eff4:	4618      	mov	r0, r3
2405eff6:	f000 f999 	bl	2405f32c <RTC_Bcd2ToByte>
2405effa:	4603      	mov	r3, r0
2405effc:	461a      	mov	r2, r3
2405effe:	68bb      	ldr	r3, [r7, #8]
2405f000:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
2405f002:	2300      	movs	r3, #0
}
2405f004:	4618      	mov	r0, r3
2405f006:	3718      	adds	r7, #24
2405f008:	46bd      	mov	sp, r7
2405f00a:	bd80      	pop	{r7, pc}
2405f00c:	007f7f7f 	.word	0x007f7f7f

2405f010 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
2405f010:	b590      	push	{r4, r7, lr}
2405f012:	b087      	sub	sp, #28
2405f014:	af00      	add	r7, sp, #0
2405f016:	60f8      	str	r0, [r7, #12]
2405f018:	60b9      	str	r1, [r7, #8]
2405f01a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
2405f01c:	68fb      	ldr	r3, [r7, #12]
2405f01e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
2405f022:	2b01      	cmp	r3, #1
2405f024:	d101      	bne.n	2405f02a <HAL_RTC_SetDate+0x1a>
2405f026:	2302      	movs	r3, #2
2405f028:	e073      	b.n	2405f112 <HAL_RTC_SetDate+0x102>
2405f02a:	68fb      	ldr	r3, [r7, #12]
2405f02c:	2201      	movs	r2, #1
2405f02e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
2405f032:	68fb      	ldr	r3, [r7, #12]
2405f034:	2202      	movs	r2, #2
2405f036:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
2405f03a:	687b      	ldr	r3, [r7, #4]
2405f03c:	2b00      	cmp	r3, #0
2405f03e:	d10e      	bne.n	2405f05e <HAL_RTC_SetDate+0x4e>
2405f040:	68bb      	ldr	r3, [r7, #8]
2405f042:	785b      	ldrb	r3, [r3, #1]
2405f044:	f003 0310 	and.w	r3, r3, #16
2405f048:	2b00      	cmp	r3, #0
2405f04a:	d008      	beq.n	2405f05e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
2405f04c:	68bb      	ldr	r3, [r7, #8]
2405f04e:	785b      	ldrb	r3, [r3, #1]
2405f050:	f023 0310 	bic.w	r3, r3, #16
2405f054:	b2db      	uxtb	r3, r3
2405f056:	330a      	adds	r3, #10
2405f058:	b2da      	uxtb	r2, r3
2405f05a:	68bb      	ldr	r3, [r7, #8]
2405f05c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
2405f05e:	687b      	ldr	r3, [r7, #4]
2405f060:	2b00      	cmp	r3, #0
2405f062:	d11c      	bne.n	2405f09e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
2405f064:	68bb      	ldr	r3, [r7, #8]
2405f066:	78db      	ldrb	r3, [r3, #3]
2405f068:	4618      	mov	r0, r3
2405f06a:	f000 f93f 	bl	2405f2ec <RTC_ByteToBcd2>
2405f06e:	4603      	mov	r3, r0
2405f070:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
2405f072:	68bb      	ldr	r3, [r7, #8]
2405f074:	785b      	ldrb	r3, [r3, #1]
2405f076:	4618      	mov	r0, r3
2405f078:	f000 f938 	bl	2405f2ec <RTC_ByteToBcd2>
2405f07c:	4603      	mov	r3, r0
2405f07e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
2405f080:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
2405f082:	68bb      	ldr	r3, [r7, #8]
2405f084:	789b      	ldrb	r3, [r3, #2]
2405f086:	4618      	mov	r0, r3
2405f088:	f000 f930 	bl	2405f2ec <RTC_ByteToBcd2>
2405f08c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
2405f08e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
2405f092:	68bb      	ldr	r3, [r7, #8]
2405f094:	781b      	ldrb	r3, [r3, #0]
2405f096:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
2405f098:	4313      	orrs	r3, r2
2405f09a:	617b      	str	r3, [r7, #20]
2405f09c:	e00e      	b.n	2405f0bc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
2405f09e:	68bb      	ldr	r3, [r7, #8]
2405f0a0:	78db      	ldrb	r3, [r3, #3]
2405f0a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
2405f0a4:	68bb      	ldr	r3, [r7, #8]
2405f0a6:	785b      	ldrb	r3, [r3, #1]
2405f0a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
2405f0aa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
2405f0ac:	68ba      	ldr	r2, [r7, #8]
2405f0ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
2405f0b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
2405f0b2:	68bb      	ldr	r3, [r7, #8]
2405f0b4:	781b      	ldrb	r3, [r3, #0]
2405f0b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
2405f0b8:	4313      	orrs	r3, r2
2405f0ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2405f0bc:	68fb      	ldr	r3, [r7, #12]
2405f0be:	681b      	ldr	r3, [r3, #0]
2405f0c0:	22ca      	movs	r2, #202	; 0xca
2405f0c2:	625a      	str	r2, [r3, #36]	; 0x24
2405f0c4:	68fb      	ldr	r3, [r7, #12]
2405f0c6:	681b      	ldr	r3, [r3, #0]
2405f0c8:	2253      	movs	r2, #83	; 0x53
2405f0ca:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
2405f0cc:	68f8      	ldr	r0, [r7, #12]
2405f0ce:	f000 f899 	bl	2405f204 <RTC_EnterInitMode>
2405f0d2:	4603      	mov	r3, r0
2405f0d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
2405f0d6:	7cfb      	ldrb	r3, [r7, #19]
2405f0d8:	2b00      	cmp	r3, #0
2405f0da:	d10a      	bne.n	2405f0f2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
2405f0dc:	68fb      	ldr	r3, [r7, #12]
2405f0de:	681a      	ldr	r2, [r3, #0]
2405f0e0:	6979      	ldr	r1, [r7, #20]
2405f0e2:	4b0e      	ldr	r3, [pc, #56]	; (2405f11c <HAL_RTC_SetDate+0x10c>)
2405f0e4:	400b      	ands	r3, r1
2405f0e6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
2405f0e8:	68f8      	ldr	r0, [r7, #12]
2405f0ea:	f000 f8c1 	bl	2405f270 <RTC_ExitInitMode>
2405f0ee:	4603      	mov	r3, r0
2405f0f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2405f0f2:	68fb      	ldr	r3, [r7, #12]
2405f0f4:	681b      	ldr	r3, [r3, #0]
2405f0f6:	22ff      	movs	r2, #255	; 0xff
2405f0f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
2405f0fa:	7cfb      	ldrb	r3, [r7, #19]
2405f0fc:	2b00      	cmp	r3, #0
2405f0fe:	d103      	bne.n	2405f108 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
2405f100:	68fb      	ldr	r3, [r7, #12]
2405f102:	2201      	movs	r2, #1
2405f104:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
2405f108:	68fb      	ldr	r3, [r7, #12]
2405f10a:	2200      	movs	r2, #0
2405f10c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
2405f110:	7cfb      	ldrb	r3, [r7, #19]


}
2405f112:	4618      	mov	r0, r3
2405f114:	371c      	adds	r7, #28
2405f116:	46bd      	mov	sp, r7
2405f118:	bd90      	pop	{r4, r7, pc}
2405f11a:	bf00      	nop
2405f11c:	00ffff3f 	.word	0x00ffff3f

2405f120 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
2405f120:	b580      	push	{r7, lr}
2405f122:	b086      	sub	sp, #24
2405f124:	af00      	add	r7, sp, #0
2405f126:	60f8      	str	r0, [r7, #12]
2405f128:	60b9      	str	r1, [r7, #8]
2405f12a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
2405f12c:	68fb      	ldr	r3, [r7, #12]
2405f12e:	681b      	ldr	r3, [r3, #0]
2405f130:	685a      	ldr	r2, [r3, #4]
2405f132:	4b21      	ldr	r3, [pc, #132]	; (2405f1b8 <HAL_RTC_GetDate+0x98>)
2405f134:	4013      	ands	r3, r2
2405f136:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
2405f138:	697b      	ldr	r3, [r7, #20]
2405f13a:	0c1b      	lsrs	r3, r3, #16
2405f13c:	b2da      	uxtb	r2, r3
2405f13e:	68bb      	ldr	r3, [r7, #8]
2405f140:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
2405f142:	697b      	ldr	r3, [r7, #20]
2405f144:	0a1b      	lsrs	r3, r3, #8
2405f146:	b2db      	uxtb	r3, r3
2405f148:	f003 031f 	and.w	r3, r3, #31
2405f14c:	b2da      	uxtb	r2, r3
2405f14e:	68bb      	ldr	r3, [r7, #8]
2405f150:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
2405f152:	697b      	ldr	r3, [r7, #20]
2405f154:	b2db      	uxtb	r3, r3
2405f156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405f15a:	b2da      	uxtb	r2, r3
2405f15c:	68bb      	ldr	r3, [r7, #8]
2405f15e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
2405f160:	697b      	ldr	r3, [r7, #20]
2405f162:	0b5b      	lsrs	r3, r3, #13
2405f164:	b2db      	uxtb	r3, r3
2405f166:	f003 0307 	and.w	r3, r3, #7
2405f16a:	b2da      	uxtb	r2, r3
2405f16c:	68bb      	ldr	r3, [r7, #8]
2405f16e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
2405f170:	687b      	ldr	r3, [r7, #4]
2405f172:	2b00      	cmp	r3, #0
2405f174:	d11a      	bne.n	2405f1ac <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
2405f176:	68bb      	ldr	r3, [r7, #8]
2405f178:	78db      	ldrb	r3, [r3, #3]
2405f17a:	4618      	mov	r0, r3
2405f17c:	f000 f8d6 	bl	2405f32c <RTC_Bcd2ToByte>
2405f180:	4603      	mov	r3, r0
2405f182:	461a      	mov	r2, r3
2405f184:	68bb      	ldr	r3, [r7, #8]
2405f186:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
2405f188:	68bb      	ldr	r3, [r7, #8]
2405f18a:	785b      	ldrb	r3, [r3, #1]
2405f18c:	4618      	mov	r0, r3
2405f18e:	f000 f8cd 	bl	2405f32c <RTC_Bcd2ToByte>
2405f192:	4603      	mov	r3, r0
2405f194:	461a      	mov	r2, r3
2405f196:	68bb      	ldr	r3, [r7, #8]
2405f198:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
2405f19a:	68bb      	ldr	r3, [r7, #8]
2405f19c:	789b      	ldrb	r3, [r3, #2]
2405f19e:	4618      	mov	r0, r3
2405f1a0:	f000 f8c4 	bl	2405f32c <RTC_Bcd2ToByte>
2405f1a4:	4603      	mov	r3, r0
2405f1a6:	461a      	mov	r2, r3
2405f1a8:	68bb      	ldr	r3, [r7, #8]
2405f1aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
2405f1ac:	2300      	movs	r3, #0
}
2405f1ae:	4618      	mov	r0, r3
2405f1b0:	3718      	adds	r7, #24
2405f1b2:	46bd      	mov	sp, r7
2405f1b4:	bd80      	pop	{r7, pc}
2405f1b6:	bf00      	nop
2405f1b8:	00ffff3f 	.word	0x00ffff3f

2405f1bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
2405f1bc:	b580      	push	{r7, lr}
2405f1be:	b084      	sub	sp, #16
2405f1c0:	af00      	add	r7, sp, #0
2405f1c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
2405f1c4:	687b      	ldr	r3, [r7, #4]
2405f1c6:	681b      	ldr	r3, [r3, #0]
2405f1c8:	4a0d      	ldr	r2, [pc, #52]	; (2405f200 <HAL_RTC_WaitForSynchro+0x44>)
2405f1ca:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
2405f1cc:	f7f4 fe3a 	bl	24053e44 <HAL_GetTick>
2405f1d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
2405f1d2:	e009      	b.n	2405f1e8 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
2405f1d4:	f7f4 fe36 	bl	24053e44 <HAL_GetTick>
2405f1d8:	4602      	mov	r2, r0
2405f1da:	68fb      	ldr	r3, [r7, #12]
2405f1dc:	1ad3      	subs	r3, r2, r3
2405f1de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405f1e2:	d901      	bls.n	2405f1e8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
2405f1e4:	2303      	movs	r3, #3
2405f1e6:	e007      	b.n	2405f1f8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
2405f1e8:	687b      	ldr	r3, [r7, #4]
2405f1ea:	681b      	ldr	r3, [r3, #0]
2405f1ec:	68db      	ldr	r3, [r3, #12]
2405f1ee:	f003 0320 	and.w	r3, r3, #32
2405f1f2:	2b00      	cmp	r3, #0
2405f1f4:	d0ee      	beq.n	2405f1d4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
2405f1f6:	2300      	movs	r3, #0
}
2405f1f8:	4618      	mov	r0, r3
2405f1fa:	3710      	adds	r7, #16
2405f1fc:	46bd      	mov	sp, r7
2405f1fe:	bd80      	pop	{r7, pc}
2405f200:	0001005f 	.word	0x0001005f

2405f204 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
2405f204:	b580      	push	{r7, lr}
2405f206:	b084      	sub	sp, #16
2405f208:	af00      	add	r7, sp, #0
2405f20a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2405f20c:	2300      	movs	r3, #0
2405f20e:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
2405f210:	687b      	ldr	r3, [r7, #4]
2405f212:	681b      	ldr	r3, [r3, #0]
2405f214:	68db      	ldr	r3, [r3, #12]
2405f216:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405f21a:	2b00      	cmp	r3, #0
2405f21c:	d123      	bne.n	2405f266 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
2405f21e:	687b      	ldr	r3, [r7, #4]
2405f220:	681b      	ldr	r3, [r3, #0]
2405f222:	68da      	ldr	r2, [r3, #12]
2405f224:	687b      	ldr	r3, [r7, #4]
2405f226:	681b      	ldr	r3, [r3, #0]
2405f228:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2405f22c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
2405f22e:	f7f4 fe09 	bl	24053e44 <HAL_GetTick>
2405f232:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
2405f234:	e00d      	b.n	2405f252 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
2405f236:	f7f4 fe05 	bl	24053e44 <HAL_GetTick>
2405f23a:	4602      	mov	r2, r0
2405f23c:	68bb      	ldr	r3, [r7, #8]
2405f23e:	1ad3      	subs	r3, r2, r3
2405f240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405f244:	d905      	bls.n	2405f252 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
2405f246:	2303      	movs	r3, #3
2405f248:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
2405f24a:	687b      	ldr	r3, [r7, #4]
2405f24c:	2203      	movs	r2, #3
2405f24e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
2405f252:	687b      	ldr	r3, [r7, #4]
2405f254:	681b      	ldr	r3, [r3, #0]
2405f256:	68db      	ldr	r3, [r3, #12]
2405f258:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405f25c:	2b00      	cmp	r3, #0
2405f25e:	d102      	bne.n	2405f266 <RTC_EnterInitMode+0x62>
2405f260:	7bfb      	ldrb	r3, [r7, #15]
2405f262:	2b03      	cmp	r3, #3
2405f264:	d1e7      	bne.n	2405f236 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
2405f266:	7bfb      	ldrb	r3, [r7, #15]
}
2405f268:	4618      	mov	r0, r3
2405f26a:	3710      	adds	r7, #16
2405f26c:	46bd      	mov	sp, r7
2405f26e:	bd80      	pop	{r7, pc}

2405f270 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
2405f270:	b580      	push	{r7, lr}
2405f272:	b084      	sub	sp, #16
2405f274:	af00      	add	r7, sp, #0
2405f276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405f278:	2300      	movs	r3, #0
2405f27a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
2405f27c:	4b1a      	ldr	r3, [pc, #104]	; (2405f2e8 <RTC_ExitInitMode+0x78>)
2405f27e:	68db      	ldr	r3, [r3, #12]
2405f280:	4a19      	ldr	r2, [pc, #100]	; (2405f2e8 <RTC_ExitInitMode+0x78>)
2405f282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405f286:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
2405f288:	4b17      	ldr	r3, [pc, #92]	; (2405f2e8 <RTC_ExitInitMode+0x78>)
2405f28a:	699b      	ldr	r3, [r3, #24]
2405f28c:	f003 0320 	and.w	r3, r3, #32
2405f290:	2b00      	cmp	r3, #0
2405f292:	d10c      	bne.n	2405f2ae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
2405f294:	6878      	ldr	r0, [r7, #4]
2405f296:	f7ff ff91 	bl	2405f1bc <HAL_RTC_WaitForSynchro>
2405f29a:	4603      	mov	r3, r0
2405f29c:	2b00      	cmp	r3, #0
2405f29e:	d01e      	beq.n	2405f2de <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
2405f2a0:	687b      	ldr	r3, [r7, #4]
2405f2a2:	2203      	movs	r2, #3
2405f2a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
2405f2a8:	2303      	movs	r3, #3
2405f2aa:	73fb      	strb	r3, [r7, #15]
2405f2ac:	e017      	b.n	2405f2de <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
2405f2ae:	4b0e      	ldr	r3, [pc, #56]	; (2405f2e8 <RTC_ExitInitMode+0x78>)
2405f2b0:	699b      	ldr	r3, [r3, #24]
2405f2b2:	4a0d      	ldr	r2, [pc, #52]	; (2405f2e8 <RTC_ExitInitMode+0x78>)
2405f2b4:	f023 0320 	bic.w	r3, r3, #32
2405f2b8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
2405f2ba:	6878      	ldr	r0, [r7, #4]
2405f2bc:	f7ff ff7e 	bl	2405f1bc <HAL_RTC_WaitForSynchro>
2405f2c0:	4603      	mov	r3, r0
2405f2c2:	2b00      	cmp	r3, #0
2405f2c4:	d005      	beq.n	2405f2d2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
2405f2c6:	687b      	ldr	r3, [r7, #4]
2405f2c8:	2203      	movs	r2, #3
2405f2ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
2405f2ce:	2303      	movs	r3, #3
2405f2d0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
2405f2d2:	4b05      	ldr	r3, [pc, #20]	; (2405f2e8 <RTC_ExitInitMode+0x78>)
2405f2d4:	699b      	ldr	r3, [r3, #24]
2405f2d6:	4a04      	ldr	r2, [pc, #16]	; (2405f2e8 <RTC_ExitInitMode+0x78>)
2405f2d8:	f043 0320 	orr.w	r3, r3, #32
2405f2dc:	6193      	str	r3, [r2, #24]
  }

  return status;
2405f2de:	7bfb      	ldrb	r3, [r7, #15]
}
2405f2e0:	4618      	mov	r0, r3
2405f2e2:	3710      	adds	r7, #16
2405f2e4:	46bd      	mov	sp, r7
2405f2e6:	bd80      	pop	{r7, pc}
2405f2e8:	58004000 	.word	0x58004000

2405f2ec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
2405f2ec:	b480      	push	{r7}
2405f2ee:	b085      	sub	sp, #20
2405f2f0:	af00      	add	r7, sp, #0
2405f2f2:	4603      	mov	r3, r0
2405f2f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
2405f2f6:	2300      	movs	r3, #0
2405f2f8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
2405f2fa:	79fb      	ldrb	r3, [r7, #7]
2405f2fc:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
2405f2fe:	e005      	b.n	2405f30c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
2405f300:	68fb      	ldr	r3, [r7, #12]
2405f302:	3301      	adds	r3, #1
2405f304:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
2405f306:	7afb      	ldrb	r3, [r7, #11]
2405f308:	3b0a      	subs	r3, #10
2405f30a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
2405f30c:	7afb      	ldrb	r3, [r7, #11]
2405f30e:	2b09      	cmp	r3, #9
2405f310:	d8f6      	bhi.n	2405f300 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
2405f312:	68fb      	ldr	r3, [r7, #12]
2405f314:	b2db      	uxtb	r3, r3
2405f316:	011b      	lsls	r3, r3, #4
2405f318:	b2da      	uxtb	r2, r3
2405f31a:	7afb      	ldrb	r3, [r7, #11]
2405f31c:	4313      	orrs	r3, r2
2405f31e:	b2db      	uxtb	r3, r3
}
2405f320:	4618      	mov	r0, r3
2405f322:	3714      	adds	r7, #20
2405f324:	46bd      	mov	sp, r7
2405f326:	f85d 7b04 	ldr.w	r7, [sp], #4
2405f32a:	4770      	bx	lr

2405f32c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
2405f32c:	b480      	push	{r7}
2405f32e:	b085      	sub	sp, #20
2405f330:	af00      	add	r7, sp, #0
2405f332:	4603      	mov	r3, r0
2405f334:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
2405f336:	79fb      	ldrb	r3, [r7, #7]
2405f338:	091b      	lsrs	r3, r3, #4
2405f33a:	b2db      	uxtb	r3, r3
2405f33c:	461a      	mov	r2, r3
2405f33e:	0092      	lsls	r2, r2, #2
2405f340:	4413      	add	r3, r2
2405f342:	005b      	lsls	r3, r3, #1
2405f344:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
2405f346:	79fb      	ldrb	r3, [r7, #7]
2405f348:	f003 030f 	and.w	r3, r3, #15
2405f34c:	b2da      	uxtb	r2, r3
2405f34e:	7bfb      	ldrb	r3, [r7, #15]
2405f350:	4413      	add	r3, r2
2405f352:	b2db      	uxtb	r3, r3
}
2405f354:	4618      	mov	r0, r3
2405f356:	3714      	adds	r7, #20
2405f358:	46bd      	mov	sp, r7
2405f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405f35e:	4770      	bx	lr

2405f360 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
2405f360:	b580      	push	{r7, lr}
2405f362:	b086      	sub	sp, #24
2405f364:	af00      	add	r7, sp, #0
2405f366:	60f8      	str	r0, [r7, #12]
2405f368:	60b9      	str	r1, [r7, #8]
2405f36a:	607a      	str	r2, [r7, #4]
2405f36c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
2405f36e:	68bb      	ldr	r3, [r7, #8]
2405f370:	2b02      	cmp	r3, #2
2405f372:	d904      	bls.n	2405f37e <HAL_SAI_InitProtocol+0x1e>
2405f374:	68bb      	ldr	r3, [r7, #8]
2405f376:	3b03      	subs	r3, #3
2405f378:	2b01      	cmp	r3, #1
2405f37a:	d812      	bhi.n	2405f3a2 <HAL_SAI_InitProtocol+0x42>
2405f37c:	e008      	b.n	2405f390 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
2405f37e:	683b      	ldr	r3, [r7, #0]
2405f380:	687a      	ldr	r2, [r7, #4]
2405f382:	68b9      	ldr	r1, [r7, #8]
2405f384:	68f8      	ldr	r0, [r7, #12]
2405f386:	f000 fd2d 	bl	2405fde4 <SAI_InitI2S>
2405f38a:	4603      	mov	r3, r0
2405f38c:	75fb      	strb	r3, [r7, #23]
      break;
2405f38e:	e00b      	b.n	2405f3a8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
2405f390:	683b      	ldr	r3, [r7, #0]
2405f392:	687a      	ldr	r2, [r7, #4]
2405f394:	68b9      	ldr	r1, [r7, #8]
2405f396:	68f8      	ldr	r0, [r7, #12]
2405f398:	f000 fdd6 	bl	2405ff48 <SAI_InitPCM>
2405f39c:	4603      	mov	r3, r0
2405f39e:	75fb      	strb	r3, [r7, #23]
      break;
2405f3a0:	e002      	b.n	2405f3a8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
2405f3a2:	2301      	movs	r3, #1
2405f3a4:	75fb      	strb	r3, [r7, #23]
      break;
2405f3a6:	bf00      	nop
  }

  if (status == HAL_OK)
2405f3a8:	7dfb      	ldrb	r3, [r7, #23]
2405f3aa:	2b00      	cmp	r3, #0
2405f3ac:	d104      	bne.n	2405f3b8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
2405f3ae:	68f8      	ldr	r0, [r7, #12]
2405f3b0:	f000 f808 	bl	2405f3c4 <HAL_SAI_Init>
2405f3b4:	4603      	mov	r3, r0
2405f3b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
2405f3b8:	7dfb      	ldrb	r3, [r7, #23]
}
2405f3ba:	4618      	mov	r0, r3
2405f3bc:	3718      	adds	r7, #24
2405f3be:	46bd      	mov	sp, r7
2405f3c0:	bd80      	pop	{r7, pc}
	...

2405f3c4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
2405f3c4:	b580      	push	{r7, lr}
2405f3c6:	b08a      	sub	sp, #40	; 0x28
2405f3c8:	af00      	add	r7, sp, #0
2405f3ca:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
2405f3cc:	687b      	ldr	r3, [r7, #4]
2405f3ce:	2b00      	cmp	r3, #0
2405f3d0:	d101      	bne.n	2405f3d6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
2405f3d2:	2301      	movs	r3, #1
2405f3d4:	e1f2      	b.n	2405f7bc <HAL_SAI_Init+0x3f8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
2405f3d6:	687b      	ldr	r3, [r7, #4]
2405f3d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2405f3dc:	2b01      	cmp	r3, #1
2405f3de:	d10e      	bne.n	2405f3fe <HAL_SAI_Init+0x3a>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
    {
      return HAL_ERROR;
    }
#else
    if ((hsai->Instance != SAI1_Block_A) ||
2405f3e0:	687b      	ldr	r3, [r7, #4]
2405f3e2:	681b      	ldr	r3, [r3, #0]
2405f3e4:	4a94      	ldr	r2, [pc, #592]	; (2405f638 <HAL_SAI_Init+0x274>)
2405f3e6:	4293      	cmp	r3, r2
2405f3e8:	d107      	bne.n	2405f3fa <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2405f3ea:	687b      	ldr	r3, [r7, #4]
2405f3ec:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
2405f3ee:	2b01      	cmp	r3, #1
2405f3f0:	d103      	bne.n	2405f3fa <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
2405f3f2:	687b      	ldr	r3, [r7, #4]
2405f3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2405f3f6:	2b00      	cmp	r3, #0
2405f3f8:	d001      	beq.n	2405f3fe <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
2405f3fa:	2301      	movs	r3, #1
2405f3fc:	e1de      	b.n	2405f7bc <HAL_SAI_Init+0x3f8>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2405f3fe:	687b      	ldr	r3, [r7, #4]
2405f400:	681b      	ldr	r3, [r3, #0]
2405f402:	4a8d      	ldr	r2, [pc, #564]	; (2405f638 <HAL_SAI_Init+0x274>)
2405f404:	4293      	cmp	r3, r2
2405f406:	d004      	beq.n	2405f412 <HAL_SAI_Init+0x4e>
2405f408:	687b      	ldr	r3, [r7, #4]
2405f40a:	681b      	ldr	r3, [r3, #0]
2405f40c:	4a8b      	ldr	r2, [pc, #556]	; (2405f63c <HAL_SAI_Init+0x278>)
2405f40e:	4293      	cmp	r3, r2
2405f410:	d102      	bne.n	2405f418 <HAL_SAI_Init+0x54>
  {
    SaiBaseAddress = SAI1;
2405f412:	4b8b      	ldr	r3, [pc, #556]	; (2405f640 <HAL_SAI_Init+0x27c>)
2405f414:	61bb      	str	r3, [r7, #24]
2405f416:	e00e      	b.n	2405f436 <HAL_SAI_Init+0x72>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2405f418:	687b      	ldr	r3, [r7, #4]
2405f41a:	681b      	ldr	r3, [r3, #0]
2405f41c:	4a89      	ldr	r2, [pc, #548]	; (2405f644 <HAL_SAI_Init+0x280>)
2405f41e:	4293      	cmp	r3, r2
2405f420:	d004      	beq.n	2405f42c <HAL_SAI_Init+0x68>
2405f422:	687b      	ldr	r3, [r7, #4]
2405f424:	681b      	ldr	r3, [r3, #0]
2405f426:	4a88      	ldr	r2, [pc, #544]	; (2405f648 <HAL_SAI_Init+0x284>)
2405f428:	4293      	cmp	r3, r2
2405f42a:	d102      	bne.n	2405f432 <HAL_SAI_Init+0x6e>
  {
    SaiBaseAddress = SAI2;
2405f42c:	4b87      	ldr	r3, [pc, #540]	; (2405f64c <HAL_SAI_Init+0x288>)
2405f42e:	61bb      	str	r3, [r7, #24]
2405f430:	e001      	b.n	2405f436 <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
2405f432:	2301      	movs	r3, #1
2405f434:	e1c2      	b.n	2405f7bc <HAL_SAI_Init+0x3f8>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
2405f436:	687b      	ldr	r3, [r7, #4]
2405f438:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405f43c:	b2db      	uxtb	r3, r3
2405f43e:	2b00      	cmp	r3, #0
2405f440:	d106      	bne.n	2405f450 <HAL_SAI_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
2405f442:	687b      	ldr	r3, [r7, #4]
2405f444:	2200      	movs	r2, #0
2405f446:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
2405f44a:	6878      	ldr	r0, [r7, #4]
2405f44c:	f7f4 f9bc 	bl	240537c8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
2405f450:	6878      	ldr	r0, [r7, #4]
2405f452:	f000 fe33 	bl	240600bc <SAI_Disable>
2405f456:	4603      	mov	r3, r0
2405f458:	2b00      	cmp	r3, #0
2405f45a:	d001      	beq.n	2405f460 <HAL_SAI_Init+0x9c>
  {
    return HAL_ERROR;
2405f45c:	2301      	movs	r3, #1
2405f45e:	e1ad      	b.n	2405f7bc <HAL_SAI_Init+0x3f8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
2405f460:	687b      	ldr	r3, [r7, #4]
2405f462:	2202      	movs	r2, #2
2405f464:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
2405f468:	687b      	ldr	r3, [r7, #4]
2405f46a:	68db      	ldr	r3, [r3, #12]
2405f46c:	2b02      	cmp	r3, #2
2405f46e:	d00c      	beq.n	2405f48a <HAL_SAI_Init+0xc6>
2405f470:	2b02      	cmp	r3, #2
2405f472:	d80d      	bhi.n	2405f490 <HAL_SAI_Init+0xcc>
2405f474:	2b00      	cmp	r3, #0
2405f476:	d002      	beq.n	2405f47e <HAL_SAI_Init+0xba>
2405f478:	2b01      	cmp	r3, #1
2405f47a:	d003      	beq.n	2405f484 <HAL_SAI_Init+0xc0>
2405f47c:	e008      	b.n	2405f490 <HAL_SAI_Init+0xcc>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
2405f47e:	2300      	movs	r3, #0
2405f480:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405f482:	e008      	b.n	2405f496 <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
2405f484:	2310      	movs	r3, #16
2405f486:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405f488:	e005      	b.n	2405f496 <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
2405f48a:	2320      	movs	r3, #32
2405f48c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405f48e:	e002      	b.n	2405f496 <HAL_SAI_Init+0xd2>
    default:
      tmpregisterGCR = 0;
2405f490:	2300      	movs	r3, #0
2405f492:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405f494:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
2405f496:	687b      	ldr	r3, [r7, #4]
2405f498:	689b      	ldr	r3, [r3, #8]
2405f49a:	2b03      	cmp	r3, #3
2405f49c:	d81d      	bhi.n	2405f4da <HAL_SAI_Init+0x116>
2405f49e:	a201      	add	r2, pc, #4	; (adr r2, 2405f4a4 <HAL_SAI_Init+0xe0>)
2405f4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405f4a4:	2405f4b5 	.word	0x2405f4b5
2405f4a8:	2405f4bb 	.word	0x2405f4bb
2405f4ac:	2405f4c3 	.word	0x2405f4c3
2405f4b0:	2405f4cb 	.word	0x2405f4cb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
2405f4b4:	2300      	movs	r3, #0
2405f4b6:	61fb      	str	r3, [r7, #28]
      break;
2405f4b8:	e012      	b.n	2405f4e0 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
2405f4ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
2405f4be:	61fb      	str	r3, [r7, #28]
      break;
2405f4c0:	e00e      	b.n	2405f4e0 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
2405f4c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
2405f4c6:	61fb      	str	r3, [r7, #28]
      break;
2405f4c8:	e00a      	b.n	2405f4e0 <HAL_SAI_Init+0x11c>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
2405f4ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
2405f4ce:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
2405f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405f4d2:	f043 0301 	orr.w	r3, r3, #1
2405f4d6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405f4d8:	e002      	b.n	2405f4e0 <HAL_SAI_Init+0x11c>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
      break;
#endif /* SAI4 */
    default:
      syncen_bits = 0;
2405f4da:	2300      	movs	r3, #0
2405f4dc:	61fb      	str	r3, [r7, #28]
      break;
2405f4de:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
2405f4e0:	69bb      	ldr	r3, [r7, #24]
2405f4e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2405f4e4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
2405f4e6:	687b      	ldr	r3, [r7, #4]
2405f4e8:	6a1b      	ldr	r3, [r3, #32]
2405f4ea:	2b00      	cmp	r3, #0
2405f4ec:	f000 808a 	beq.w	2405f604 <HAL_SAI_Init+0x240>
  {
    uint32_t freq = 0;
2405f4f0:	2300      	movs	r3, #0
2405f4f2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2405f4f4:	687b      	ldr	r3, [r7, #4]
2405f4f6:	681b      	ldr	r3, [r3, #0]
2405f4f8:	4a4f      	ldr	r2, [pc, #316]	; (2405f638 <HAL_SAI_Init+0x274>)
2405f4fa:	4293      	cmp	r3, r2
2405f4fc:	d004      	beq.n	2405f508 <HAL_SAI_Init+0x144>
2405f4fe:	687b      	ldr	r3, [r7, #4]
2405f500:	681b      	ldr	r3, [r3, #0]
2405f502:	4a4e      	ldr	r2, [pc, #312]	; (2405f63c <HAL_SAI_Init+0x278>)
2405f504:	4293      	cmp	r3, r2
2405f506:	d106      	bne.n	2405f516 <HAL_SAI_Init+0x152>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
2405f508:	f44f 7080 	mov.w	r0, #256	; 0x100
2405f50c:	f04f 0100 	mov.w	r1, #0
2405f510:	f7fe f9b2 	bl	2405d878 <HAL_RCCEx_GetPeriphCLKFreq>
2405f514:	6178      	str	r0, [r7, #20]
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }
#else
    if (hsai->Instance == SAI2_Block_A)
2405f516:	687b      	ldr	r3, [r7, #4]
2405f518:	681b      	ldr	r3, [r3, #0]
2405f51a:	4a4a      	ldr	r2, [pc, #296]	; (2405f644 <HAL_SAI_Init+0x280>)
2405f51c:	4293      	cmp	r3, r2
2405f51e:	d106      	bne.n	2405f52e <HAL_SAI_Init+0x16a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2A);
2405f520:	f44f 7000 	mov.w	r0, #512	; 0x200
2405f524:	f04f 0100 	mov.w	r1, #0
2405f528:	f7fe f9a6 	bl	2405d878 <HAL_RCCEx_GetPeriphCLKFreq>
2405f52c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI2_Block_B)
2405f52e:	687b      	ldr	r3, [r7, #4]
2405f530:	681b      	ldr	r3, [r3, #0]
2405f532:	4a45      	ldr	r2, [pc, #276]	; (2405f648 <HAL_SAI_Init+0x284>)
2405f534:	4293      	cmp	r3, r2
2405f536:	d106      	bne.n	2405f546 <HAL_SAI_Init+0x182>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2B);
2405f538:	f44f 6080 	mov.w	r0, #1024	; 0x400
2405f53c:	f04f 0100 	mov.w	r1, #0
2405f540:	f7fe f99a 	bl	2405d878 <HAL_RCCEx_GetPeriphCLKFreq>
2405f544:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
2405f546:	687b      	ldr	r3, [r7, #4]
2405f548:	699b      	ldr	r3, [r3, #24]
2405f54a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
2405f54e:	d120      	bne.n	2405f592 <HAL_SAI_Init+0x1ce>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2405f550:	687b      	ldr	r3, [r7, #4]
2405f552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405f554:	2b04      	cmp	r3, #4
2405f556:	d102      	bne.n	2405f55e <HAL_SAI_Init+0x19a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
2405f558:	2340      	movs	r3, #64	; 0x40
2405f55a:	60fb      	str	r3, [r7, #12]
2405f55c:	e00a      	b.n	2405f574 <HAL_SAI_Init+0x1b0>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
2405f55e:	687b      	ldr	r3, [r7, #4]
2405f560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405f562:	2b08      	cmp	r3, #8
2405f564:	d103      	bne.n	2405f56e <HAL_SAI_Init+0x1aa>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
2405f566:	f44f 7380 	mov.w	r3, #256	; 0x100
2405f56a:	60fb      	str	r3, [r7, #12]
2405f56c:	e002      	b.n	2405f574 <HAL_SAI_Init+0x1b0>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
2405f56e:	687b      	ldr	r3, [r7, #4]
2405f570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405f572:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
2405f574:	697a      	ldr	r2, [r7, #20]
2405f576:	4613      	mov	r3, r2
2405f578:	009b      	lsls	r3, r3, #2
2405f57a:	4413      	add	r3, r2
2405f57c:	005b      	lsls	r3, r3, #1
2405f57e:	4619      	mov	r1, r3
2405f580:	687b      	ldr	r3, [r7, #4]
2405f582:	6a1b      	ldr	r3, [r3, #32]
2405f584:	68fa      	ldr	r2, [r7, #12]
2405f586:	fb02 f303 	mul.w	r3, r2, r3
2405f58a:	fbb1 f3f3 	udiv	r3, r1, r3
2405f58e:	613b      	str	r3, [r7, #16]
2405f590:	e017      	b.n	2405f5c2 <HAL_SAI_Init+0x1fe>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2405f592:	687b      	ldr	r3, [r7, #4]
2405f594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405f596:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2405f59a:	d101      	bne.n	2405f5a0 <HAL_SAI_Init+0x1dc>
2405f59c:	2302      	movs	r3, #2
2405f59e:	e000      	b.n	2405f5a2 <HAL_SAI_Init+0x1de>
2405f5a0:	2301      	movs	r3, #1
2405f5a2:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2405f5a4:	697a      	ldr	r2, [r7, #20]
2405f5a6:	4613      	mov	r3, r2
2405f5a8:	009b      	lsls	r3, r3, #2
2405f5aa:	4413      	add	r3, r2
2405f5ac:	005b      	lsls	r3, r3, #1
2405f5ae:	4619      	mov	r1, r3
2405f5b0:	687b      	ldr	r3, [r7, #4]
2405f5b2:	6a1b      	ldr	r3, [r3, #32]
2405f5b4:	68ba      	ldr	r2, [r7, #8]
2405f5b6:	fb02 f303 	mul.w	r3, r2, r3
2405f5ba:	021b      	lsls	r3, r3, #8
2405f5bc:	fbb1 f3f3 	udiv	r3, r1, r3
2405f5c0:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
2405f5c2:	693b      	ldr	r3, [r7, #16]
2405f5c4:	4a22      	ldr	r2, [pc, #136]	; (2405f650 <HAL_SAI_Init+0x28c>)
2405f5c6:	fba2 2303 	umull	r2, r3, r2, r3
2405f5ca:	08da      	lsrs	r2, r3, #3
2405f5cc:	687b      	ldr	r3, [r7, #4]
2405f5ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
2405f5d0:	6939      	ldr	r1, [r7, #16]
2405f5d2:	4b1f      	ldr	r3, [pc, #124]	; (2405f650 <HAL_SAI_Init+0x28c>)
2405f5d4:	fba3 2301 	umull	r2, r3, r3, r1
2405f5d8:	08da      	lsrs	r2, r3, #3
2405f5da:	4613      	mov	r3, r2
2405f5dc:	009b      	lsls	r3, r3, #2
2405f5de:	4413      	add	r3, r2
2405f5e0:	005b      	lsls	r3, r3, #1
2405f5e2:	1aca      	subs	r2, r1, r3
2405f5e4:	2a08      	cmp	r2, #8
2405f5e6:	d904      	bls.n	2405f5f2 <HAL_SAI_Init+0x22e>
    {
      hsai->Init.Mckdiv += 1U;
2405f5e8:	687b      	ldr	r3, [r7, #4]
2405f5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405f5ec:	1c5a      	adds	r2, r3, #1
2405f5ee:	687b      	ldr	r3, [r7, #4]
2405f5f0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2405f5f2:	687b      	ldr	r3, [r7, #4]
2405f5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405f5f6:	2b04      	cmp	r3, #4
2405f5f8:	d104      	bne.n	2405f604 <HAL_SAI_Init+0x240>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
2405f5fa:	687b      	ldr	r3, [r7, #4]
2405f5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405f5fe:	085a      	lsrs	r2, r3, #1
2405f600:	687b      	ldr	r3, [r7, #4]
2405f602:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405f604:	687b      	ldr	r3, [r7, #4]
2405f606:	685b      	ldr	r3, [r3, #4]
2405f608:	2b00      	cmp	r3, #0
2405f60a:	d003      	beq.n	2405f614 <HAL_SAI_Init+0x250>
2405f60c:	687b      	ldr	r3, [r7, #4]
2405f60e:	685b      	ldr	r3, [r3, #4]
2405f610:	2b02      	cmp	r3, #2
2405f612:	d109      	bne.n	2405f628 <HAL_SAI_Init+0x264>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2405f614:	687b      	ldr	r3, [r7, #4]
2405f616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405f618:	2b01      	cmp	r3, #1
2405f61a:	d101      	bne.n	2405f620 <HAL_SAI_Init+0x25c>
2405f61c:	2300      	movs	r3, #0
2405f61e:	e001      	b.n	2405f624 <HAL_SAI_Init+0x260>
2405f620:	f44f 7300 	mov.w	r3, #512	; 0x200
2405f624:	623b      	str	r3, [r7, #32]
2405f626:	e017      	b.n	2405f658 <HAL_SAI_Init+0x294>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
2405f628:	687b      	ldr	r3, [r7, #4]
2405f62a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405f62c:	2b01      	cmp	r3, #1
2405f62e:	d111      	bne.n	2405f654 <HAL_SAI_Init+0x290>
2405f630:	f44f 7300 	mov.w	r3, #512	; 0x200
2405f634:	e00f      	b.n	2405f656 <HAL_SAI_Init+0x292>
2405f636:	bf00      	nop
2405f638:	40015804 	.word	0x40015804
2405f63c:	40015824 	.word	0x40015824
2405f640:	40015800 	.word	0x40015800
2405f644:	40015c04 	.word	0x40015c04
2405f648:	40015c24 	.word	0x40015c24
2405f64c:	40015c00 	.word	0x40015c00
2405f650:	cccccccd 	.word	0xcccccccd
2405f654:	2300      	movs	r3, #0
2405f656:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2405f658:	687b      	ldr	r3, [r7, #4]
2405f65a:	681b      	ldr	r3, [r3, #0]
2405f65c:	6819      	ldr	r1, [r3, #0]
2405f65e:	687b      	ldr	r3, [r7, #4]
2405f660:	681a      	ldr	r2, [r3, #0]
2405f662:	4b58      	ldr	r3, [pc, #352]	; (2405f7c4 <HAL_SAI_Init+0x400>)
2405f664:	400b      	ands	r3, r1
2405f666:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2405f668:	687b      	ldr	r3, [r7, #4]
2405f66a:	681b      	ldr	r3, [r3, #0]
2405f66c:	6819      	ldr	r1, [r3, #0]
2405f66e:	687b      	ldr	r3, [r7, #4]
2405f670:	685a      	ldr	r2, [r3, #4]
2405f672:	687b      	ldr	r3, [r7, #4]
2405f674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405f676:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
2405f678:	687b      	ldr	r3, [r7, #4]
2405f67a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2405f67c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
2405f67e:	687b      	ldr	r3, [r7, #4]
2405f680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405f682:	431a      	orrs	r2, r3
2405f684:	6a3b      	ldr	r3, [r7, #32]
2405f686:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
2405f688:	69fb      	ldr	r3, [r7, #28]
2405f68a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2405f68c:	687b      	ldr	r3, [r7, #4]
2405f68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
2405f690:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2405f692:	687b      	ldr	r3, [r7, #4]
2405f694:	695b      	ldr	r3, [r3, #20]
2405f696:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2405f698:	687b      	ldr	r3, [r7, #4]
2405f69a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2405f69c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2405f69e:	687b      	ldr	r3, [r7, #4]
2405f6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405f6a2:	051b      	lsls	r3, r3, #20
2405f6a4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
2405f6a6:	687b      	ldr	r3, [r7, #4]
2405f6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2405f6aa:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
2405f6ac:	687b      	ldr	r3, [r7, #4]
2405f6ae:	691b      	ldr	r3, [r3, #16]
2405f6b0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2405f6b2:	687b      	ldr	r3, [r7, #4]
2405f6b4:	681b      	ldr	r3, [r3, #0]
2405f6b6:	430a      	orrs	r2, r1
2405f6b8:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
2405f6ba:	687b      	ldr	r3, [r7, #4]
2405f6bc:	681b      	ldr	r3, [r3, #0]
2405f6be:	6859      	ldr	r1, [r3, #4]
2405f6c0:	687b      	ldr	r3, [r7, #4]
2405f6c2:	681a      	ldr	r2, [r3, #0]
2405f6c4:	4b40      	ldr	r3, [pc, #256]	; (2405f7c8 <HAL_SAI_Init+0x404>)
2405f6c6:	400b      	ands	r3, r1
2405f6c8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
2405f6ca:	687b      	ldr	r3, [r7, #4]
2405f6cc:	681b      	ldr	r3, [r3, #0]
2405f6ce:	6859      	ldr	r1, [r3, #4]
2405f6d0:	687b      	ldr	r3, [r7, #4]
2405f6d2:	69da      	ldr	r2, [r3, #28]
2405f6d4:	687b      	ldr	r3, [r7, #4]
2405f6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405f6d8:	431a      	orrs	r2, r3
2405f6da:	687b      	ldr	r3, [r7, #4]
2405f6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405f6de:	431a      	orrs	r2, r3
2405f6e0:	687b      	ldr	r3, [r7, #4]
2405f6e2:	681b      	ldr	r3, [r3, #0]
2405f6e4:	430a      	orrs	r2, r1
2405f6e6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
2405f6e8:	687b      	ldr	r3, [r7, #4]
2405f6ea:	681b      	ldr	r3, [r3, #0]
2405f6ec:	6899      	ldr	r1, [r3, #8]
2405f6ee:	687b      	ldr	r3, [r7, #4]
2405f6f0:	681a      	ldr	r2, [r3, #0]
2405f6f2:	4b36      	ldr	r3, [pc, #216]	; (2405f7cc <HAL_SAI_Init+0x408>)
2405f6f4:	400b      	ands	r3, r1
2405f6f6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2405f6f8:	687b      	ldr	r3, [r7, #4]
2405f6fa:	681b      	ldr	r3, [r3, #0]
2405f6fc:	6899      	ldr	r1, [r3, #8]
2405f6fe:	687b      	ldr	r3, [r7, #4]
2405f700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405f702:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
2405f704:	687b      	ldr	r3, [r7, #4]
2405f706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2405f708:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
2405f70a:	687b      	ldr	r3, [r7, #4]
2405f70c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
2405f70e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
2405f710:	687b      	ldr	r3, [r7, #4]
2405f712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
2405f714:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
2405f716:	687b      	ldr	r3, [r7, #4]
2405f718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405f71a:	3b01      	subs	r3, #1
2405f71c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
2405f71e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2405f720:	687b      	ldr	r3, [r7, #4]
2405f722:	681b      	ldr	r3, [r3, #0]
2405f724:	430a      	orrs	r2, r1
2405f726:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2405f728:	687b      	ldr	r3, [r7, #4]
2405f72a:	681b      	ldr	r3, [r3, #0]
2405f72c:	68d9      	ldr	r1, [r3, #12]
2405f72e:	687b      	ldr	r3, [r7, #4]
2405f730:	681a      	ldr	r2, [r3, #0]
2405f732:	f24f 0320 	movw	r3, #61472	; 0xf020
2405f736:	400b      	ands	r3, r1
2405f738:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2405f73a:	687b      	ldr	r3, [r7, #4]
2405f73c:	681b      	ldr	r3, [r3, #0]
2405f73e:	68d9      	ldr	r1, [r3, #12]
2405f740:	687b      	ldr	r3, [r7, #4]
2405f742:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2405f744:	687b      	ldr	r3, [r7, #4]
2405f746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405f748:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2405f74a:	687b      	ldr	r3, [r7, #4]
2405f74c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405f74e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2405f750:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2405f752:	687b      	ldr	r3, [r7, #4]
2405f754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405f756:	3b01      	subs	r3, #1
2405f758:	021b      	lsls	r3, r3, #8
2405f75a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2405f75c:	687b      	ldr	r3, [r7, #4]
2405f75e:	681b      	ldr	r3, [r3, #0]
2405f760:	430a      	orrs	r2, r1
2405f762:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
#else
  if (hsai->Instance == SAI1_Block_A)
2405f764:	687b      	ldr	r3, [r7, #4]
2405f766:	681b      	ldr	r3, [r3, #0]
2405f768:	4a19      	ldr	r2, [pc, #100]	; (2405f7d0 <HAL_SAI_Init+0x40c>)
2405f76a:	4293      	cmp	r3, r2
2405f76c:	d119      	bne.n	2405f7a2 <HAL_SAI_Init+0x3de>
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
2405f76e:	69bb      	ldr	r3, [r7, #24]
2405f770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405f772:	f023 0201 	bic.w	r2, r3, #1
2405f776:	69bb      	ldr	r3, [r7, #24]
2405f778:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
2405f77a:	687b      	ldr	r3, [r7, #4]
2405f77c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2405f780:	2b01      	cmp	r3, #1
2405f782:	d10e      	bne.n	2405f7a2 <HAL_SAI_Init+0x3de>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2405f784:	687b      	ldr	r3, [r7, #4]
2405f786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
2405f788:	687b      	ldr	r3, [r7, #4]
2405f78a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405f78c:	3b01      	subs	r3, #1
2405f78e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2405f790:	431a      	orrs	r2, r3
2405f792:	69bb      	ldr	r3, [r7, #24]
2405f794:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
2405f796:	69bb      	ldr	r3, [r7, #24]
2405f798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405f79a:	f043 0201 	orr.w	r2, r3, #1
2405f79e:	69bb      	ldr	r3, [r7, #24]
2405f7a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2405f7a2:	687b      	ldr	r3, [r7, #4]
2405f7a4:	2200      	movs	r2, #0
2405f7a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
2405f7aa:	687b      	ldr	r3, [r7, #4]
2405f7ac:	2201      	movs	r2, #1
2405f7ae:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
2405f7b2:	687b      	ldr	r3, [r7, #4]
2405f7b4:	2200      	movs	r2, #0
2405f7b6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
2405f7ba:	2300      	movs	r3, #0
}
2405f7bc:	4618      	mov	r0, r3
2405f7be:	3728      	adds	r7, #40	; 0x28
2405f7c0:	46bd      	mov	sp, r7
2405f7c2:	bd80      	pop	{r7, pc}
2405f7c4:	f005c010 	.word	0xf005c010
2405f7c8:	ffff1ff0 	.word	0xffff1ff0
2405f7cc:	fff88000 	.word	0xfff88000
2405f7d0:	40015804 	.word	0x40015804

2405f7d4 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
2405f7d4:	b580      	push	{r7, lr}
2405f7d6:	b084      	sub	sp, #16
2405f7d8:	af00      	add	r7, sp, #0
2405f7da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405f7dc:	2300      	movs	r3, #0
2405f7de:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
2405f7e0:	687b      	ldr	r3, [r7, #4]
2405f7e2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
2405f7e6:	2b01      	cmp	r3, #1
2405f7e8:	d101      	bne.n	2405f7ee <HAL_SAI_Abort+0x1a>
2405f7ea:	2302      	movs	r3, #2
2405f7ec:	e07d      	b.n	2405f8ea <HAL_SAI_Abort+0x116>
2405f7ee:	687b      	ldr	r3, [r7, #4]
2405f7f0:	2201      	movs	r2, #1
2405f7f2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405f7f6:	687b      	ldr	r3, [r7, #4]
2405f7f8:	681b      	ldr	r3, [r3, #0]
2405f7fa:	681b      	ldr	r3, [r3, #0]
2405f7fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405f800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405f804:	d14f      	bne.n	2405f8a6 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2405f806:	687b      	ldr	r3, [r7, #4]
2405f808:	681b      	ldr	r3, [r3, #0]
2405f80a:	681a      	ldr	r2, [r3, #0]
2405f80c:	687b      	ldr	r3, [r7, #4]
2405f80e:	681b      	ldr	r3, [r3, #0]
2405f810:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2405f814:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
2405f816:	687b      	ldr	r3, [r7, #4]
2405f818:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405f81c:	b2db      	uxtb	r3, r3
2405f81e:	2b12      	cmp	r3, #18
2405f820:	d11d      	bne.n	2405f85e <HAL_SAI_Abort+0x8a>
2405f822:	687b      	ldr	r3, [r7, #4]
2405f824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f828:	2b00      	cmp	r3, #0
2405f82a:	d018      	beq.n	2405f85e <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
2405f82c:	687b      	ldr	r3, [r7, #4]
2405f82e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f832:	4618      	mov	r0, r3
2405f834:	f7f7 fb46 	bl	24056ec4 <HAL_DMA_Abort>
2405f838:	4603      	mov	r3, r0
2405f83a:	2b00      	cmp	r3, #0
2405f83c:	d00f      	beq.n	2405f85e <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2405f83e:	687b      	ldr	r3, [r7, #4]
2405f840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405f846:	2b80      	cmp	r3, #128	; 0x80
2405f848:	d009      	beq.n	2405f85e <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
2405f84a:	2301      	movs	r3, #1
2405f84c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405f84e:	687b      	ldr	r3, [r7, #4]
2405f850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405f854:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405f858:	687b      	ldr	r3, [r7, #4]
2405f85a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
2405f85e:	687b      	ldr	r3, [r7, #4]
2405f860:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405f864:	b2db      	uxtb	r3, r3
2405f866:	2b22      	cmp	r3, #34	; 0x22
2405f868:	d11d      	bne.n	2405f8a6 <HAL_SAI_Abort+0xd2>
2405f86a:	687b      	ldr	r3, [r7, #4]
2405f86c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405f870:	2b00      	cmp	r3, #0
2405f872:	d018      	beq.n	2405f8a6 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
2405f874:	687b      	ldr	r3, [r7, #4]
2405f876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405f87a:	4618      	mov	r0, r3
2405f87c:	f7f7 fb22 	bl	24056ec4 <HAL_DMA_Abort>
2405f880:	4603      	mov	r3, r0
2405f882:	2b00      	cmp	r3, #0
2405f884:	d00f      	beq.n	2405f8a6 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2405f886:	687b      	ldr	r3, [r7, #4]
2405f888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405f88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405f88e:	2b80      	cmp	r3, #128	; 0x80
2405f890:	d009      	beq.n	2405f8a6 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
2405f892:	2301      	movs	r3, #1
2405f894:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405f896:	687b      	ldr	r3, [r7, #4]
2405f898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405f89c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405f8a0:	687b      	ldr	r3, [r7, #4]
2405f8a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
2405f8a6:	687b      	ldr	r3, [r7, #4]
2405f8a8:	681b      	ldr	r3, [r3, #0]
2405f8aa:	2200      	movs	r2, #0
2405f8ac:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2405f8ae:	687b      	ldr	r3, [r7, #4]
2405f8b0:	681b      	ldr	r3, [r3, #0]
2405f8b2:	f04f 32ff 	mov.w	r2, #4294967295
2405f8b6:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
2405f8b8:	6878      	ldr	r0, [r7, #4]
2405f8ba:	f000 fbff 	bl	240600bc <SAI_Disable>
2405f8be:	4603      	mov	r3, r0
2405f8c0:	2b00      	cmp	r3, #0
2405f8c2:	d001      	beq.n	2405f8c8 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
2405f8c4:	2301      	movs	r3, #1
2405f8c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2405f8c8:	687b      	ldr	r3, [r7, #4]
2405f8ca:	681b      	ldr	r3, [r3, #0]
2405f8cc:	685a      	ldr	r2, [r3, #4]
2405f8ce:	687b      	ldr	r3, [r7, #4]
2405f8d0:	681b      	ldr	r3, [r3, #0]
2405f8d2:	f042 0208 	orr.w	r2, r2, #8
2405f8d6:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
2405f8d8:	687b      	ldr	r3, [r7, #4]
2405f8da:	2201      	movs	r2, #1
2405f8dc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
2405f8e0:	687b      	ldr	r3, [r7, #4]
2405f8e2:	2200      	movs	r2, #0
2405f8e4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
2405f8e8:	7bfb      	ldrb	r3, [r7, #15]
}
2405f8ea:	4618      	mov	r0, r3
2405f8ec:	3710      	adds	r7, #16
2405f8ee:	46bd      	mov	sp, r7
2405f8f0:	bd80      	pop	{r7, pc}
	...

2405f8f4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
2405f8f4:	b580      	push	{r7, lr}
2405f8f6:	b086      	sub	sp, #24
2405f8f8:	af00      	add	r7, sp, #0
2405f8fa:	60f8      	str	r0, [r7, #12]
2405f8fc:	60b9      	str	r1, [r7, #8]
2405f8fe:	4613      	mov	r3, r2
2405f900:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
2405f902:	f7f4 fa9f 	bl	24053e44 <HAL_GetTick>
2405f906:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
2405f908:	68bb      	ldr	r3, [r7, #8]
2405f90a:	2b00      	cmp	r3, #0
2405f90c:	d002      	beq.n	2405f914 <HAL_SAI_Transmit_DMA+0x20>
2405f90e:	88fb      	ldrh	r3, [r7, #6]
2405f910:	2b00      	cmp	r3, #0
2405f912:	d101      	bne.n	2405f918 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
2405f914:	2301      	movs	r3, #1
2405f916:	e098      	b.n	2405fa4a <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
2405f918:	68fb      	ldr	r3, [r7, #12]
2405f91a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405f91e:	b2db      	uxtb	r3, r3
2405f920:	2b01      	cmp	r3, #1
2405f922:	f040 8091 	bne.w	2405fa48 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
2405f926:	68fb      	ldr	r3, [r7, #12]
2405f928:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
2405f92c:	2b01      	cmp	r3, #1
2405f92e:	d101      	bne.n	2405f934 <HAL_SAI_Transmit_DMA+0x40>
2405f930:	2302      	movs	r3, #2
2405f932:	e08a      	b.n	2405fa4a <HAL_SAI_Transmit_DMA+0x156>
2405f934:	68fb      	ldr	r3, [r7, #12]
2405f936:	2201      	movs	r2, #1
2405f938:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
2405f93c:	68fb      	ldr	r3, [r7, #12]
2405f93e:	68ba      	ldr	r2, [r7, #8]
2405f940:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
2405f942:	68fb      	ldr	r3, [r7, #12]
2405f944:	88fa      	ldrh	r2, [r7, #6]
2405f946:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
2405f94a:	68fb      	ldr	r3, [r7, #12]
2405f94c:	88fa      	ldrh	r2, [r7, #6]
2405f94e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2405f952:	68fb      	ldr	r3, [r7, #12]
2405f954:	2200      	movs	r2, #0
2405f956:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
2405f95a:	68fb      	ldr	r3, [r7, #12]
2405f95c:	2212      	movs	r2, #18
2405f95e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2405f962:	68fb      	ldr	r3, [r7, #12]
2405f964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f968:	4a3a      	ldr	r2, [pc, #232]	; (2405fa54 <HAL_SAI_Transmit_DMA+0x160>)
2405f96a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
2405f96c:	68fb      	ldr	r3, [r7, #12]
2405f96e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f972:	4a39      	ldr	r2, [pc, #228]	; (2405fa58 <HAL_SAI_Transmit_DMA+0x164>)
2405f974:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
2405f976:	68fb      	ldr	r3, [r7, #12]
2405f978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f97c:	4a37      	ldr	r2, [pc, #220]	; (2405fa5c <HAL_SAI_Transmit_DMA+0x168>)
2405f97e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
2405f980:	68fb      	ldr	r3, [r7, #12]
2405f982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f986:	2200      	movs	r2, #0
2405f988:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2405f98a:	68fb      	ldr	r3, [r7, #12]
2405f98c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
2405f990:	68fb      	ldr	r3, [r7, #12]
2405f992:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2405f994:	4619      	mov	r1, r3
2405f996:	68fb      	ldr	r3, [r7, #12]
2405f998:	681b      	ldr	r3, [r3, #0]
2405f99a:	331c      	adds	r3, #28
2405f99c:	461a      	mov	r2, r3
2405f99e:	68fb      	ldr	r3, [r7, #12]
2405f9a0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
2405f9a4:	f7f7 f824 	bl	240569f0 <HAL_DMA_Start_IT>
2405f9a8:	4603      	mov	r3, r0
2405f9aa:	2b00      	cmp	r3, #0
2405f9ac:	d005      	beq.n	2405f9ba <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
2405f9ae:	68fb      	ldr	r3, [r7, #12]
2405f9b0:	2200      	movs	r2, #0
2405f9b2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
2405f9b6:	2301      	movs	r3, #1
2405f9b8:	e047      	b.n	2405fa4a <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2405f9ba:	2100      	movs	r1, #0
2405f9bc:	68f8      	ldr	r0, [r7, #12]
2405f9be:	f000 fb45 	bl	2406004c <SAI_InterruptFlag>
2405f9c2:	4601      	mov	r1, r0
2405f9c4:	68fb      	ldr	r3, [r7, #12]
2405f9c6:	681b      	ldr	r3, [r3, #0]
2405f9c8:	691a      	ldr	r2, [r3, #16]
2405f9ca:	68fb      	ldr	r3, [r7, #12]
2405f9cc:	681b      	ldr	r3, [r3, #0]
2405f9ce:	430a      	orrs	r2, r1
2405f9d0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2405f9d2:	68fb      	ldr	r3, [r7, #12]
2405f9d4:	681b      	ldr	r3, [r3, #0]
2405f9d6:	681a      	ldr	r2, [r3, #0]
2405f9d8:	68fb      	ldr	r3, [r7, #12]
2405f9da:	681b      	ldr	r3, [r3, #0]
2405f9dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2405f9e0:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2405f9e2:	e015      	b.n	2405fa10 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
2405f9e4:	f7f4 fa2e 	bl	24053e44 <HAL_GetTick>
2405f9e8:	4602      	mov	r2, r0
2405f9ea:	697b      	ldr	r3, [r7, #20]
2405f9ec:	1ad3      	subs	r3, r2, r3
2405f9ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405f9f2:	d90d      	bls.n	2405fa10 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2405f9f4:	68fb      	ldr	r3, [r7, #12]
2405f9f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405f9fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2405f9fe:	68fb      	ldr	r3, [r7, #12]
2405fa00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
2405fa04:	68fb      	ldr	r3, [r7, #12]
2405fa06:	2200      	movs	r2, #0
2405fa08:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
2405fa0c:	2303      	movs	r3, #3
2405fa0e:	e01c      	b.n	2405fa4a <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2405fa10:	68fb      	ldr	r3, [r7, #12]
2405fa12:	681b      	ldr	r3, [r3, #0]
2405fa14:	695b      	ldr	r3, [r3, #20]
2405fa16:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
2405fa1a:	2b00      	cmp	r3, #0
2405fa1c:	d0e2      	beq.n	2405f9e4 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2405fa1e:	68fb      	ldr	r3, [r7, #12]
2405fa20:	681b      	ldr	r3, [r3, #0]
2405fa22:	681b      	ldr	r3, [r3, #0]
2405fa24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405fa28:	2b00      	cmp	r3, #0
2405fa2a:	d107      	bne.n	2405fa3c <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
2405fa2c:	68fb      	ldr	r3, [r7, #12]
2405fa2e:	681b      	ldr	r3, [r3, #0]
2405fa30:	681a      	ldr	r2, [r3, #0]
2405fa32:	68fb      	ldr	r3, [r7, #12]
2405fa34:	681b      	ldr	r3, [r3, #0]
2405fa36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2405fa3a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
2405fa3c:	68fb      	ldr	r3, [r7, #12]
2405fa3e:	2200      	movs	r2, #0
2405fa40:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
2405fa44:	2300      	movs	r3, #0
2405fa46:	e000      	b.n	2405fa4a <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
2405fa48:	2302      	movs	r3, #2
  }
}
2405fa4a:	4618      	mov	r0, r3
2405fa4c:	3718      	adds	r7, #24
2405fa4e:	46bd      	mov	sp, r7
2405fa50:	bd80      	pop	{r7, pc}
2405fa52:	bf00      	nop
2405fa54:	24060191 	.word	0x24060191
2405fa58:	24060131 	.word	0x24060131
2405fa5c:	240601ad 	.word	0x240601ad

2405fa60 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
2405fa60:	b580      	push	{r7, lr}
2405fa62:	b086      	sub	sp, #24
2405fa64:	af00      	add	r7, sp, #0
2405fa66:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
2405fa68:	687b      	ldr	r3, [r7, #4]
2405fa6a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405fa6e:	b2db      	uxtb	r3, r3
2405fa70:	2b00      	cmp	r3, #0
2405fa72:	f000 81a7 	beq.w	2405fdc4 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
2405fa76:	687b      	ldr	r3, [r7, #4]
2405fa78:	681b      	ldr	r3, [r3, #0]
2405fa7a:	695b      	ldr	r3, [r3, #20]
2405fa7c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
2405fa7e:	687b      	ldr	r3, [r7, #4]
2405fa80:	681b      	ldr	r3, [r3, #0]
2405fa82:	691b      	ldr	r3, [r3, #16]
2405fa84:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
2405fa86:	687b      	ldr	r3, [r7, #4]
2405fa88:	681b      	ldr	r3, [r3, #0]
2405fa8a:	681b      	ldr	r3, [r3, #0]
2405fa8c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
2405fa8e:	697b      	ldr	r3, [r7, #20]
2405fa90:	f003 0308 	and.w	r3, r3, #8
2405fa94:	2b00      	cmp	r3, #0
2405fa96:	d00a      	beq.n	2405faae <HAL_SAI_IRQHandler+0x4e>
2405fa98:	693b      	ldr	r3, [r7, #16]
2405fa9a:	f003 0308 	and.w	r3, r3, #8
2405fa9e:	2b00      	cmp	r3, #0
2405faa0:	d005      	beq.n	2405faae <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
2405faa2:	687b      	ldr	r3, [r7, #4]
2405faa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2405faa8:	6878      	ldr	r0, [r7, #4]
2405faaa:	4798      	blx	r3
2405faac:	e18a      	b.n	2405fdc4 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
2405faae:	697b      	ldr	r3, [r7, #20]
2405fab0:	f003 0301 	and.w	r3, r3, #1
2405fab4:	2b00      	cmp	r3, #0
2405fab6:	d01e      	beq.n	2405faf6 <HAL_SAI_IRQHandler+0x96>
2405fab8:	693b      	ldr	r3, [r7, #16]
2405faba:	f003 0301 	and.w	r3, r3, #1
2405fabe:	2b00      	cmp	r3, #0
2405fac0:	d019      	beq.n	2405faf6 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
2405fac2:	687b      	ldr	r3, [r7, #4]
2405fac4:	681b      	ldr	r3, [r3, #0]
2405fac6:	2201      	movs	r2, #1
2405fac8:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
2405faca:	687b      	ldr	r3, [r7, #4]
2405facc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405fad0:	b2db      	uxtb	r3, r3
2405fad2:	2b22      	cmp	r3, #34	; 0x22
2405fad4:	d101      	bne.n	2405fada <HAL_SAI_IRQHandler+0x7a>
2405fad6:	2301      	movs	r3, #1
2405fad8:	e000      	b.n	2405fadc <HAL_SAI_IRQHandler+0x7c>
2405fada:	2302      	movs	r3, #2
2405fadc:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
2405fade:	687b      	ldr	r3, [r7, #4]
2405fae0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
2405fae4:	68bb      	ldr	r3, [r7, #8]
2405fae6:	431a      	orrs	r2, r3
2405fae8:	687b      	ldr	r3, [r7, #4]
2405faea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
2405faee:	6878      	ldr	r0, [r7, #4]
2405faf0:	f000 f96e 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
2405faf4:	e166      	b.n	2405fdc4 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
2405faf6:	697b      	ldr	r3, [r7, #20]
2405faf8:	f003 0302 	and.w	r3, r3, #2
2405fafc:	2b00      	cmp	r3, #0
2405fafe:	d013      	beq.n	2405fb28 <HAL_SAI_IRQHandler+0xc8>
2405fb00:	693b      	ldr	r3, [r7, #16]
2405fb02:	f003 0302 	and.w	r3, r3, #2
2405fb06:	2b00      	cmp	r3, #0
2405fb08:	d00e      	beq.n	2405fb28 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
2405fb0a:	687b      	ldr	r3, [r7, #4]
2405fb0c:	681b      	ldr	r3, [r3, #0]
2405fb0e:	2202      	movs	r2, #2
2405fb10:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
2405fb12:	687b      	ldr	r3, [r7, #4]
2405fb14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405fb18:	2b00      	cmp	r3, #0
2405fb1a:	f000 8153 	beq.w	2405fdc4 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
2405fb1e:	687b      	ldr	r3, [r7, #4]
2405fb20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405fb24:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
2405fb26:	e14d      	b.n	2405fdc4 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
2405fb28:	697b      	ldr	r3, [r7, #20]
2405fb2a:	f003 0320 	and.w	r3, r3, #32
2405fb2e:	2b00      	cmp	r3, #0
2405fb30:	d05b      	beq.n	2405fbea <HAL_SAI_IRQHandler+0x18a>
2405fb32:	693b      	ldr	r3, [r7, #16]
2405fb34:	f003 0320 	and.w	r3, r3, #32
2405fb38:	2b00      	cmp	r3, #0
2405fb3a:	d056      	beq.n	2405fbea <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
2405fb3c:	687b      	ldr	r3, [r7, #4]
2405fb3e:	681b      	ldr	r3, [r3, #0]
2405fb40:	2220      	movs	r2, #32
2405fb42:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
2405fb44:	687b      	ldr	r3, [r7, #4]
2405fb46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fb4a:	f043 0204 	orr.w	r2, r3, #4
2405fb4e:	687b      	ldr	r3, [r7, #4]
2405fb50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fb54:	68fb      	ldr	r3, [r7, #12]
2405fb56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405fb5a:	2b00      	cmp	r3, #0
2405fb5c:	d03e      	beq.n	2405fbdc <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
2405fb5e:	687b      	ldr	r3, [r7, #4]
2405fb60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fb64:	2b00      	cmp	r3, #0
2405fb66:	d018      	beq.n	2405fb9a <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2405fb68:	687b      	ldr	r3, [r7, #4]
2405fb6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fb6e:	4a97      	ldr	r2, [pc, #604]	; (2405fdcc <HAL_SAI_IRQHandler+0x36c>)
2405fb70:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2405fb72:	687b      	ldr	r3, [r7, #4]
2405fb74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fb78:	4618      	mov	r0, r3
2405fb7a:	f7f7 fcc1 	bl	24057500 <HAL_DMA_Abort_IT>
2405fb7e:	4603      	mov	r3, r0
2405fb80:	2b00      	cmp	r3, #0
2405fb82:	d00a      	beq.n	2405fb9a <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405fb84:	687b      	ldr	r3, [r7, #4]
2405fb86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fb8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405fb8e:	687b      	ldr	r3, [r7, #4]
2405fb90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405fb94:	6878      	ldr	r0, [r7, #4]
2405fb96:	f000 f91b 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2405fb9a:	687b      	ldr	r3, [r7, #4]
2405fb9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fba0:	2b00      	cmp	r3, #0
2405fba2:	f000 810a 	beq.w	2405fdba <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2405fba6:	687b      	ldr	r3, [r7, #4]
2405fba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fbac:	4a87      	ldr	r2, [pc, #540]	; (2405fdcc <HAL_SAI_IRQHandler+0x36c>)
2405fbae:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2405fbb0:	687b      	ldr	r3, [r7, #4]
2405fbb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fbb6:	4618      	mov	r0, r3
2405fbb8:	f7f7 fca2 	bl	24057500 <HAL_DMA_Abort_IT>
2405fbbc:	4603      	mov	r3, r0
2405fbbe:	2b00      	cmp	r3, #0
2405fbc0:	f000 80fb 	beq.w	2405fdba <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405fbc4:	687b      	ldr	r3, [r7, #4]
2405fbc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fbca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405fbce:	687b      	ldr	r3, [r7, #4]
2405fbd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405fbd4:	6878      	ldr	r0, [r7, #4]
2405fbd6:	f000 f8fb 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fbda:	e0ee      	b.n	2405fdba <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
2405fbdc:	6878      	ldr	r0, [r7, #4]
2405fbde:	f7ff fdf9 	bl	2405f7d4 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
2405fbe2:	6878      	ldr	r0, [r7, #4]
2405fbe4:	f000 f8f4 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fbe8:	e0e7      	b.n	2405fdba <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
2405fbea:	697b      	ldr	r3, [r7, #20]
2405fbec:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405fbf0:	2b00      	cmp	r3, #0
2405fbf2:	d05b      	beq.n	2405fcac <HAL_SAI_IRQHandler+0x24c>
2405fbf4:	693b      	ldr	r3, [r7, #16]
2405fbf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405fbfa:	2b00      	cmp	r3, #0
2405fbfc:	d056      	beq.n	2405fcac <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
2405fbfe:	687b      	ldr	r3, [r7, #4]
2405fc00:	681b      	ldr	r3, [r3, #0]
2405fc02:	2240      	movs	r2, #64	; 0x40
2405fc04:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
2405fc06:	687b      	ldr	r3, [r7, #4]
2405fc08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fc0c:	f043 0208 	orr.w	r2, r3, #8
2405fc10:	687b      	ldr	r3, [r7, #4]
2405fc12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fc16:	68fb      	ldr	r3, [r7, #12]
2405fc18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405fc1c:	2b00      	cmp	r3, #0
2405fc1e:	d03e      	beq.n	2405fc9e <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
2405fc20:	687b      	ldr	r3, [r7, #4]
2405fc22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fc26:	2b00      	cmp	r3, #0
2405fc28:	d018      	beq.n	2405fc5c <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2405fc2a:	687b      	ldr	r3, [r7, #4]
2405fc2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fc30:	4a66      	ldr	r2, [pc, #408]	; (2405fdcc <HAL_SAI_IRQHandler+0x36c>)
2405fc32:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2405fc34:	687b      	ldr	r3, [r7, #4]
2405fc36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fc3a:	4618      	mov	r0, r3
2405fc3c:	f7f7 fc60 	bl	24057500 <HAL_DMA_Abort_IT>
2405fc40:	4603      	mov	r3, r0
2405fc42:	2b00      	cmp	r3, #0
2405fc44:	d00a      	beq.n	2405fc5c <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405fc46:	687b      	ldr	r3, [r7, #4]
2405fc48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fc4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405fc50:	687b      	ldr	r3, [r7, #4]
2405fc52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405fc56:	6878      	ldr	r0, [r7, #4]
2405fc58:	f000 f8ba 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2405fc5c:	687b      	ldr	r3, [r7, #4]
2405fc5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fc62:	2b00      	cmp	r3, #0
2405fc64:	f000 80ab 	beq.w	2405fdbe <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2405fc68:	687b      	ldr	r3, [r7, #4]
2405fc6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fc6e:	4a57      	ldr	r2, [pc, #348]	; (2405fdcc <HAL_SAI_IRQHandler+0x36c>)
2405fc70:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2405fc72:	687b      	ldr	r3, [r7, #4]
2405fc74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fc78:	4618      	mov	r0, r3
2405fc7a:	f7f7 fc41 	bl	24057500 <HAL_DMA_Abort_IT>
2405fc7e:	4603      	mov	r3, r0
2405fc80:	2b00      	cmp	r3, #0
2405fc82:	f000 809c 	beq.w	2405fdbe <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405fc86:	687b      	ldr	r3, [r7, #4]
2405fc88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fc8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405fc90:	687b      	ldr	r3, [r7, #4]
2405fc92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405fc96:	6878      	ldr	r0, [r7, #4]
2405fc98:	f000 f89a 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fc9c:	e08f      	b.n	2405fdbe <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
2405fc9e:	6878      	ldr	r0, [r7, #4]
2405fca0:	f7ff fd98 	bl	2405f7d4 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
2405fca4:	6878      	ldr	r0, [r7, #4]
2405fca6:	f000 f893 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fcaa:	e088      	b.n	2405fdbe <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
2405fcac:	697b      	ldr	r3, [r7, #20]
2405fcae:	f003 0304 	and.w	r3, r3, #4
2405fcb2:	2b00      	cmp	r3, #0
2405fcb4:	d067      	beq.n	2405fd86 <HAL_SAI_IRQHandler+0x326>
2405fcb6:	693b      	ldr	r3, [r7, #16]
2405fcb8:	f003 0304 	and.w	r3, r3, #4
2405fcbc:	2b00      	cmp	r3, #0
2405fcbe:	d062      	beq.n	2405fd86 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
2405fcc0:	687b      	ldr	r3, [r7, #4]
2405fcc2:	681b      	ldr	r3, [r3, #0]
2405fcc4:	2204      	movs	r2, #4
2405fcc6:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
2405fcc8:	687b      	ldr	r3, [r7, #4]
2405fcca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fcce:	f043 0220 	orr.w	r2, r3, #32
2405fcd2:	687b      	ldr	r3, [r7, #4]
2405fcd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fcd8:	68fb      	ldr	r3, [r7, #12]
2405fcda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405fcde:	2b00      	cmp	r3, #0
2405fce0:	d03c      	beq.n	2405fd5c <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
2405fce2:	687b      	ldr	r3, [r7, #4]
2405fce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fce8:	2b00      	cmp	r3, #0
2405fcea:	d018      	beq.n	2405fd1e <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2405fcec:	687b      	ldr	r3, [r7, #4]
2405fcee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fcf2:	4a36      	ldr	r2, [pc, #216]	; (2405fdcc <HAL_SAI_IRQHandler+0x36c>)
2405fcf4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2405fcf6:	687b      	ldr	r3, [r7, #4]
2405fcf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fcfc:	4618      	mov	r0, r3
2405fcfe:	f7f7 fbff 	bl	24057500 <HAL_DMA_Abort_IT>
2405fd02:	4603      	mov	r3, r0
2405fd04:	2b00      	cmp	r3, #0
2405fd06:	d00a      	beq.n	2405fd1e <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405fd08:	687b      	ldr	r3, [r7, #4]
2405fd0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fd0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405fd12:	687b      	ldr	r3, [r7, #4]
2405fd14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405fd18:	6878      	ldr	r0, [r7, #4]
2405fd1a:	f000 f859 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2405fd1e:	687b      	ldr	r3, [r7, #4]
2405fd20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fd24:	2b00      	cmp	r3, #0
2405fd26:	d04c      	beq.n	2405fdc2 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2405fd28:	687b      	ldr	r3, [r7, #4]
2405fd2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fd2e:	4a27      	ldr	r2, [pc, #156]	; (2405fdcc <HAL_SAI_IRQHandler+0x36c>)
2405fd30:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2405fd32:	687b      	ldr	r3, [r7, #4]
2405fd34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fd38:	4618      	mov	r0, r3
2405fd3a:	f7f7 fbe1 	bl	24057500 <HAL_DMA_Abort_IT>
2405fd3e:	4603      	mov	r3, r0
2405fd40:	2b00      	cmp	r3, #0
2405fd42:	d03e      	beq.n	2405fdc2 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405fd44:	687b      	ldr	r3, [r7, #4]
2405fd46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fd4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405fd4e:	687b      	ldr	r3, [r7, #4]
2405fd50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405fd54:	6878      	ldr	r0, [r7, #4]
2405fd56:	f000 f83b 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fd5a:	e032      	b.n	2405fdc2 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
2405fd5c:	687b      	ldr	r3, [r7, #4]
2405fd5e:	681b      	ldr	r3, [r3, #0]
2405fd60:	2200      	movs	r2, #0
2405fd62:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
2405fd64:	687b      	ldr	r3, [r7, #4]
2405fd66:	681b      	ldr	r3, [r3, #0]
2405fd68:	f04f 32ff 	mov.w	r2, #4294967295
2405fd6c:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
2405fd6e:	687b      	ldr	r3, [r7, #4]
2405fd70:	2201      	movs	r2, #1
2405fd72:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
2405fd76:	687b      	ldr	r3, [r7, #4]
2405fd78:	2200      	movs	r2, #0
2405fd7a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
2405fd7e:	6878      	ldr	r0, [r7, #4]
2405fd80:	f000 f826 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fd84:	e01d      	b.n	2405fdc2 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
2405fd86:	697b      	ldr	r3, [r7, #20]
2405fd88:	f003 0310 	and.w	r3, r3, #16
2405fd8c:	2b00      	cmp	r3, #0
2405fd8e:	d019      	beq.n	2405fdc4 <HAL_SAI_IRQHandler+0x364>
2405fd90:	693b      	ldr	r3, [r7, #16]
2405fd92:	f003 0310 	and.w	r3, r3, #16
2405fd96:	2b00      	cmp	r3, #0
2405fd98:	d014      	beq.n	2405fdc4 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
2405fd9a:	687b      	ldr	r3, [r7, #4]
2405fd9c:	681b      	ldr	r3, [r3, #0]
2405fd9e:	2210      	movs	r2, #16
2405fda0:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
2405fda2:	687b      	ldr	r3, [r7, #4]
2405fda4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fda8:	f043 0210 	orr.w	r2, r3, #16
2405fdac:	687b      	ldr	r3, [r7, #4]
2405fdae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
2405fdb2:	6878      	ldr	r0, [r7, #4]
2405fdb4:	f000 f80c 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
2405fdb8:	e004      	b.n	2405fdc4 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fdba:	bf00      	nop
2405fdbc:	e002      	b.n	2405fdc4 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fdbe:	bf00      	nop
2405fdc0:	e000      	b.n	2405fdc4 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fdc2:	bf00      	nop
}
2405fdc4:	bf00      	nop
2405fdc6:	3718      	adds	r7, #24
2405fdc8:	46bd      	mov	sp, r7
2405fdca:	bd80      	pop	{r7, pc}
2405fdcc:	2406020b 	.word	0x2406020b

2405fdd0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
2405fdd0:	b480      	push	{r7}
2405fdd2:	b083      	sub	sp, #12
2405fdd4:	af00      	add	r7, sp, #0
2405fdd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
2405fdd8:	bf00      	nop
2405fdda:	370c      	adds	r7, #12
2405fddc:	46bd      	mov	sp, r7
2405fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
2405fde2:	4770      	bx	lr

2405fde4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
2405fde4:	b480      	push	{r7}
2405fde6:	b087      	sub	sp, #28
2405fde8:	af00      	add	r7, sp, #0
2405fdea:	60f8      	str	r0, [r7, #12]
2405fdec:	60b9      	str	r1, [r7, #8]
2405fdee:	607a      	str	r2, [r7, #4]
2405fdf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405fdf2:	2300      	movs	r3, #0
2405fdf4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2405fdf6:	68fb      	ldr	r3, [r7, #12]
2405fdf8:	2200      	movs	r2, #0
2405fdfa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2405fdfc:	68fb      	ldr	r3, [r7, #12]
2405fdfe:	2200      	movs	r2, #0
2405fe00:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405fe02:	68fb      	ldr	r3, [r7, #12]
2405fe04:	685b      	ldr	r3, [r3, #4]
2405fe06:	2b00      	cmp	r3, #0
2405fe08:	d003      	beq.n	2405fe12 <SAI_InitI2S+0x2e>
2405fe0a:	68fb      	ldr	r3, [r7, #12]
2405fe0c:	685b      	ldr	r3, [r3, #4]
2405fe0e:	2b02      	cmp	r3, #2
2405fe10:	d103      	bne.n	2405fe1a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
2405fe12:	68fb      	ldr	r3, [r7, #12]
2405fe14:	2200      	movs	r2, #0
2405fe16:	651a      	str	r2, [r3, #80]	; 0x50
2405fe18:	e002      	b.n	2405fe20 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
2405fe1a:	68fb      	ldr	r3, [r7, #12]
2405fe1c:	2201      	movs	r2, #1
2405fe1e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
2405fe20:	68fb      	ldr	r3, [r7, #12]
2405fe22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2405fe26:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2405fe28:	68fb      	ldr	r3, [r7, #12]
2405fe2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
2405fe2e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
2405fe30:	68fb      	ldr	r3, [r7, #12]
2405fe32:	2200      	movs	r2, #0
2405fe34:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
2405fe36:	68fb      	ldr	r3, [r7, #12]
2405fe38:	683a      	ldr	r2, [r7, #0]
2405fe3a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
2405fe3c:	683b      	ldr	r3, [r7, #0]
2405fe3e:	f003 0301 	and.w	r3, r3, #1
2405fe42:	2b00      	cmp	r3, #0
2405fe44:	d001      	beq.n	2405fe4a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
2405fe46:	2301      	movs	r3, #1
2405fe48:	e077      	b.n	2405ff3a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
2405fe4a:	68bb      	ldr	r3, [r7, #8]
2405fe4c:	2b00      	cmp	r3, #0
2405fe4e:	d107      	bne.n	2405fe60 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
2405fe50:	68fb      	ldr	r3, [r7, #12]
2405fe52:	2200      	movs	r2, #0
2405fe54:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
2405fe56:	68fb      	ldr	r3, [r7, #12]
2405fe58:	f44f 2280 	mov.w	r2, #262144	; 0x40000
2405fe5c:	665a      	str	r2, [r3, #100]	; 0x64
2405fe5e:	e006      	b.n	2405fe6e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
2405fe60:	68fb      	ldr	r3, [r7, #12]
2405fe62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
2405fe66:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
2405fe68:	68fb      	ldr	r3, [r7, #12]
2405fe6a:	2200      	movs	r2, #0
2405fe6c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
2405fe6e:	687b      	ldr	r3, [r7, #4]
2405fe70:	2b03      	cmp	r3, #3
2405fe72:	d84f      	bhi.n	2405ff14 <SAI_InitI2S+0x130>
2405fe74:	a201      	add	r2, pc, #4	; (adr r2, 2405fe7c <SAI_InitI2S+0x98>)
2405fe76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405fe7a:	bf00      	nop
2405fe7c:	2405fe8d 	.word	0x2405fe8d
2405fe80:	2405feaf 	.word	0x2405feaf
2405fe84:	2405fed1 	.word	0x2405fed1
2405fe88:	2405fef3 	.word	0x2405fef3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405fe8c:	68fb      	ldr	r3, [r7, #12]
2405fe8e:	2280      	movs	r2, #128	; 0x80
2405fe90:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2405fe92:	683b      	ldr	r3, [r7, #0]
2405fe94:	085b      	lsrs	r3, r3, #1
2405fe96:	015a      	lsls	r2, r3, #5
2405fe98:	68fb      	ldr	r3, [r7, #12]
2405fe9a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2405fe9c:	683b      	ldr	r3, [r7, #0]
2405fe9e:	085b      	lsrs	r3, r3, #1
2405fea0:	011a      	lsls	r2, r3, #4
2405fea2:	68fb      	ldr	r3, [r7, #12]
2405fea4:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2405fea6:	68fb      	ldr	r3, [r7, #12]
2405fea8:	2240      	movs	r2, #64	; 0x40
2405feaa:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405feac:	e035      	b.n	2405ff1a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405feae:	68fb      	ldr	r3, [r7, #12]
2405feb0:	2280      	movs	r2, #128	; 0x80
2405feb2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2405feb4:	683b      	ldr	r3, [r7, #0]
2405feb6:	085b      	lsrs	r3, r3, #1
2405feb8:	019a      	lsls	r2, r3, #6
2405feba:	68fb      	ldr	r3, [r7, #12]
2405febc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2405febe:	683b      	ldr	r3, [r7, #0]
2405fec0:	085b      	lsrs	r3, r3, #1
2405fec2:	015a      	lsls	r2, r3, #5
2405fec4:	68fb      	ldr	r3, [r7, #12]
2405fec6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405fec8:	68fb      	ldr	r3, [r7, #12]
2405feca:	2280      	movs	r2, #128	; 0x80
2405fecc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405fece:	e024      	b.n	2405ff1a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
2405fed0:	68fb      	ldr	r3, [r7, #12]
2405fed2:	22c0      	movs	r2, #192	; 0xc0
2405fed4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2405fed6:	683b      	ldr	r3, [r7, #0]
2405fed8:	085b      	lsrs	r3, r3, #1
2405feda:	019a      	lsls	r2, r3, #6
2405fedc:	68fb      	ldr	r3, [r7, #12]
2405fede:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2405fee0:	683b      	ldr	r3, [r7, #0]
2405fee2:	085b      	lsrs	r3, r3, #1
2405fee4:	015a      	lsls	r2, r3, #5
2405fee6:	68fb      	ldr	r3, [r7, #12]
2405fee8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405feea:	68fb      	ldr	r3, [r7, #12]
2405feec:	2280      	movs	r2, #128	; 0x80
2405feee:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405fef0:	e013      	b.n	2405ff1a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
2405fef2:	68fb      	ldr	r3, [r7, #12]
2405fef4:	22e0      	movs	r2, #224	; 0xe0
2405fef6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2405fef8:	683b      	ldr	r3, [r7, #0]
2405fefa:	085b      	lsrs	r3, r3, #1
2405fefc:	019a      	lsls	r2, r3, #6
2405fefe:	68fb      	ldr	r3, [r7, #12]
2405ff00:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2405ff02:	683b      	ldr	r3, [r7, #0]
2405ff04:	085b      	lsrs	r3, r3, #1
2405ff06:	015a      	lsls	r2, r3, #5
2405ff08:	68fb      	ldr	r3, [r7, #12]
2405ff0a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405ff0c:	68fb      	ldr	r3, [r7, #12]
2405ff0e:	2280      	movs	r2, #128	; 0x80
2405ff10:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405ff12:	e002      	b.n	2405ff1a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
2405ff14:	2301      	movs	r3, #1
2405ff16:	75fb      	strb	r3, [r7, #23]
      break;
2405ff18:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2405ff1a:	68bb      	ldr	r3, [r7, #8]
2405ff1c:	2b02      	cmp	r3, #2
2405ff1e:	d10b      	bne.n	2405ff38 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
2405ff20:	687b      	ldr	r3, [r7, #4]
2405ff22:	2b01      	cmp	r3, #1
2405ff24:	d102      	bne.n	2405ff2c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
2405ff26:	68fb      	ldr	r3, [r7, #12]
2405ff28:	2210      	movs	r2, #16
2405ff2a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
2405ff2c:	687b      	ldr	r3, [r7, #4]
2405ff2e:	2b02      	cmp	r3, #2
2405ff30:	d102      	bne.n	2405ff38 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
2405ff32:	68fb      	ldr	r3, [r7, #12]
2405ff34:	2208      	movs	r2, #8
2405ff36:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
2405ff38:	7dfb      	ldrb	r3, [r7, #23]
}
2405ff3a:	4618      	mov	r0, r3
2405ff3c:	371c      	adds	r7, #28
2405ff3e:	46bd      	mov	sp, r7
2405ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
2405ff44:	4770      	bx	lr
2405ff46:	bf00      	nop

2405ff48 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
2405ff48:	b480      	push	{r7}
2405ff4a:	b087      	sub	sp, #28
2405ff4c:	af00      	add	r7, sp, #0
2405ff4e:	60f8      	str	r0, [r7, #12]
2405ff50:	60b9      	str	r1, [r7, #8]
2405ff52:	607a      	str	r2, [r7, #4]
2405ff54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405ff56:	2300      	movs	r3, #0
2405ff58:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2405ff5a:	68fb      	ldr	r3, [r7, #12]
2405ff5c:	2200      	movs	r2, #0
2405ff5e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2405ff60:	68fb      	ldr	r3, [r7, #12]
2405ff62:	2200      	movs	r2, #0
2405ff64:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405ff66:	68fb      	ldr	r3, [r7, #12]
2405ff68:	685b      	ldr	r3, [r3, #4]
2405ff6a:	2b00      	cmp	r3, #0
2405ff6c:	d003      	beq.n	2405ff76 <SAI_InitPCM+0x2e>
2405ff6e:	68fb      	ldr	r3, [r7, #12]
2405ff70:	685b      	ldr	r3, [r3, #4]
2405ff72:	2b02      	cmp	r3, #2
2405ff74:	d103      	bne.n	2405ff7e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
2405ff76:	68fb      	ldr	r3, [r7, #12]
2405ff78:	2201      	movs	r2, #1
2405ff7a:	651a      	str	r2, [r3, #80]	; 0x50
2405ff7c:	e002      	b.n	2405ff84 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
2405ff7e:	68fb      	ldr	r3, [r7, #12]
2405ff80:	2200      	movs	r2, #0
2405ff82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
2405ff84:	68fb      	ldr	r3, [r7, #12]
2405ff86:	2200      	movs	r2, #0
2405ff88:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2405ff8a:	68fb      	ldr	r3, [r7, #12]
2405ff8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
2405ff90:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
2405ff92:	68fb      	ldr	r3, [r7, #12]
2405ff94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
2405ff98:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
2405ff9a:	68fb      	ldr	r3, [r7, #12]
2405ff9c:	2200      	movs	r2, #0
2405ff9e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
2405ffa0:	68fb      	ldr	r3, [r7, #12]
2405ffa2:	683a      	ldr	r2, [r7, #0]
2405ffa4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2405ffa6:	68fb      	ldr	r3, [r7, #12]
2405ffa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
2405ffac:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
2405ffae:	68bb      	ldr	r3, [r7, #8]
2405ffb0:	2b04      	cmp	r3, #4
2405ffb2:	d103      	bne.n	2405ffbc <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
2405ffb4:	68fb      	ldr	r3, [r7, #12]
2405ffb6:	2201      	movs	r2, #1
2405ffb8:	659a      	str	r2, [r3, #88]	; 0x58
2405ffba:	e002      	b.n	2405ffc2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
2405ffbc:	68fb      	ldr	r3, [r7, #12]
2405ffbe:	220d      	movs	r2, #13
2405ffc0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
2405ffc2:	687b      	ldr	r3, [r7, #4]
2405ffc4:	2b03      	cmp	r3, #3
2405ffc6:	d837      	bhi.n	24060038 <SAI_InitPCM+0xf0>
2405ffc8:	a201      	add	r2, pc, #4	; (adr r2, 2405ffd0 <SAI_InitPCM+0x88>)
2405ffca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405ffce:	bf00      	nop
2405ffd0:	2405ffe1 	.word	0x2405ffe1
2405ffd4:	2405fff7 	.word	0x2405fff7
2405ffd8:	2406000d 	.word	0x2406000d
2405ffdc:	24060023 	.word	0x24060023
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405ffe0:	68fb      	ldr	r3, [r7, #12]
2405ffe2:	2280      	movs	r2, #128	; 0x80
2405ffe4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
2405ffe6:	683b      	ldr	r3, [r7, #0]
2405ffe8:	011a      	lsls	r2, r3, #4
2405ffea:	68fb      	ldr	r3, [r7, #12]
2405ffec:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2405ffee:	68fb      	ldr	r3, [r7, #12]
2405fff0:	2240      	movs	r2, #64	; 0x40
2405fff2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405fff4:	e023      	b.n	2406003e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405fff6:	68fb      	ldr	r3, [r7, #12]
2405fff8:	2280      	movs	r2, #128	; 0x80
2405fffa:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2405fffc:	683b      	ldr	r3, [r7, #0]
2405fffe:	015a      	lsls	r2, r3, #5
24060000:	68fb      	ldr	r3, [r7, #12]
24060002:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24060004:	68fb      	ldr	r3, [r7, #12]
24060006:	2280      	movs	r2, #128	; 0x80
24060008:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2406000a:	e018      	b.n	2406003e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
2406000c:	68fb      	ldr	r3, [r7, #12]
2406000e:	22c0      	movs	r2, #192	; 0xc0
24060010:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24060012:	683b      	ldr	r3, [r7, #0]
24060014:	015a      	lsls	r2, r3, #5
24060016:	68fb      	ldr	r3, [r7, #12]
24060018:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2406001a:	68fb      	ldr	r3, [r7, #12]
2406001c:	2280      	movs	r2, #128	; 0x80
2406001e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
24060020:	e00d      	b.n	2406003e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
24060022:	68fb      	ldr	r3, [r7, #12]
24060024:	22e0      	movs	r2, #224	; 0xe0
24060026:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24060028:	683b      	ldr	r3, [r7, #0]
2406002a:	015a      	lsls	r2, r3, #5
2406002c:	68fb      	ldr	r3, [r7, #12]
2406002e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24060030:	68fb      	ldr	r3, [r7, #12]
24060032:	2280      	movs	r2, #128	; 0x80
24060034:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
24060036:	e002      	b.n	2406003e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
24060038:	2301      	movs	r3, #1
2406003a:	75fb      	strb	r3, [r7, #23]
      break;
2406003c:	bf00      	nop
  }

  return status;
2406003e:	7dfb      	ldrb	r3, [r7, #23]
}
24060040:	4618      	mov	r0, r3
24060042:	371c      	adds	r7, #28
24060044:	46bd      	mov	sp, r7
24060046:	f85d 7b04 	ldr.w	r7, [sp], #4
2406004a:	4770      	bx	lr

2406004c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
2406004c:	b480      	push	{r7}
2406004e:	b085      	sub	sp, #20
24060050:	af00      	add	r7, sp, #0
24060052:	6078      	str	r0, [r7, #4]
24060054:	460b      	mov	r3, r1
24060056:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
24060058:	2301      	movs	r3, #1
2406005a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
2406005c:	78fb      	ldrb	r3, [r7, #3]
2406005e:	2b01      	cmp	r3, #1
24060060:	d103      	bne.n	2406006a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
24060062:	68fb      	ldr	r3, [r7, #12]
24060064:	f043 0308 	orr.w	r3, r3, #8
24060068:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2406006a:	687b      	ldr	r3, [r7, #4]
2406006c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2406006e:	2b08      	cmp	r3, #8
24060070:	d10b      	bne.n	2406008a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24060072:	687b      	ldr	r3, [r7, #4]
24060074:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24060076:	2b03      	cmp	r3, #3
24060078:	d003      	beq.n	24060082 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2406007a:	687b      	ldr	r3, [r7, #4]
2406007c:	685b      	ldr	r3, [r3, #4]
2406007e:	2b01      	cmp	r3, #1
24060080:	d103      	bne.n	2406008a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
24060082:	68fb      	ldr	r3, [r7, #12]
24060084:	f043 0310 	orr.w	r3, r3, #16
24060088:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2406008a:	687b      	ldr	r3, [r7, #4]
2406008c:	685b      	ldr	r3, [r3, #4]
2406008e:	2b03      	cmp	r3, #3
24060090:	d003      	beq.n	2406009a <SAI_InterruptFlag+0x4e>
24060092:	687b      	ldr	r3, [r7, #4]
24060094:	685b      	ldr	r3, [r3, #4]
24060096:	2b02      	cmp	r3, #2
24060098:	d104      	bne.n	240600a4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2406009a:	68fb      	ldr	r3, [r7, #12]
2406009c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
240600a0:	60fb      	str	r3, [r7, #12]
240600a2:	e003      	b.n	240600ac <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
240600a4:	68fb      	ldr	r3, [r7, #12]
240600a6:	f043 0304 	orr.w	r3, r3, #4
240600aa:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
240600ac:	68fb      	ldr	r3, [r7, #12]
}
240600ae:	4618      	mov	r0, r3
240600b0:	3714      	adds	r7, #20
240600b2:	46bd      	mov	sp, r7
240600b4:	f85d 7b04 	ldr.w	r7, [sp], #4
240600b8:	4770      	bx	lr
	...

240600bc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
240600bc:	b480      	push	{r7}
240600be:	b085      	sub	sp, #20
240600c0:	af00      	add	r7, sp, #0
240600c2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240600c4:	4b18      	ldr	r3, [pc, #96]	; (24060128 <SAI_Disable+0x6c>)
240600c6:	681b      	ldr	r3, [r3, #0]
240600c8:	4a18      	ldr	r2, [pc, #96]	; (2406012c <SAI_Disable+0x70>)
240600ca:	fba2 2303 	umull	r2, r3, r2, r3
240600ce:	0b1b      	lsrs	r3, r3, #12
240600d0:	009b      	lsls	r3, r3, #2
240600d2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
240600d4:	2300      	movs	r3, #0
240600d6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
240600d8:	687b      	ldr	r3, [r7, #4]
240600da:	681b      	ldr	r3, [r3, #0]
240600dc:	681a      	ldr	r2, [r3, #0]
240600de:	687b      	ldr	r3, [r7, #4]
240600e0:	681b      	ldr	r3, [r3, #0]
240600e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
240600e6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
240600e8:	68fb      	ldr	r3, [r7, #12]
240600ea:	2b00      	cmp	r3, #0
240600ec:	d10a      	bne.n	24060104 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
240600ee:	687b      	ldr	r3, [r7, #4]
240600f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
240600f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
240600f8:	687b      	ldr	r3, [r7, #4]
240600fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
240600fe:	2303      	movs	r3, #3
24060100:	72fb      	strb	r3, [r7, #11]
      break;
24060102:	e009      	b.n	24060118 <SAI_Disable+0x5c>
    }
    count--;
24060104:	68fb      	ldr	r3, [r7, #12]
24060106:	3b01      	subs	r3, #1
24060108:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2406010a:	687b      	ldr	r3, [r7, #4]
2406010c:	681b      	ldr	r3, [r3, #0]
2406010e:	681b      	ldr	r3, [r3, #0]
24060110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24060114:	2b00      	cmp	r3, #0
24060116:	d1e7      	bne.n	240600e8 <SAI_Disable+0x2c>

  return status;
24060118:	7afb      	ldrb	r3, [r7, #11]
}
2406011a:	4618      	mov	r0, r3
2406011c:	3714      	adds	r7, #20
2406011e:	46bd      	mov	sp, r7
24060120:	f85d 7b04 	ldr.w	r7, [sp], #4
24060124:	4770      	bx	lr
24060126:	bf00      	nop
24060128:	20000044 	.word	0x20000044
2406012c:	95cbec1b 	.word	0x95cbec1b

24060130 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
24060130:	b580      	push	{r7, lr}
24060132:	b084      	sub	sp, #16
24060134:	af00      	add	r7, sp, #0
24060136:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24060138:	687b      	ldr	r3, [r7, #4]
2406013a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2406013c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
2406013e:	687b      	ldr	r3, [r7, #4]
24060140:	69db      	ldr	r3, [r3, #28]
24060142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24060146:	d01c      	beq.n	24060182 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
24060148:	68fb      	ldr	r3, [r7, #12]
2406014a:	2200      	movs	r2, #0
2406014c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24060150:	68fb      	ldr	r3, [r7, #12]
24060152:	681b      	ldr	r3, [r3, #0]
24060154:	681a      	ldr	r2, [r3, #0]
24060156:	68fb      	ldr	r3, [r7, #12]
24060158:	681b      	ldr	r3, [r3, #0]
2406015a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2406015e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24060160:	2100      	movs	r1, #0
24060162:	68f8      	ldr	r0, [r7, #12]
24060164:	f7ff ff72 	bl	2406004c <SAI_InterruptFlag>
24060168:	4603      	mov	r3, r0
2406016a:	43d9      	mvns	r1, r3
2406016c:	68fb      	ldr	r3, [r7, #12]
2406016e:	681b      	ldr	r3, [r3, #0]
24060170:	691a      	ldr	r2, [r3, #16]
24060172:	68fb      	ldr	r3, [r7, #12]
24060174:	681b      	ldr	r3, [r3, #0]
24060176:	400a      	ands	r2, r1
24060178:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
2406017a:	68fb      	ldr	r3, [r7, #12]
2406017c:	2201      	movs	r2, #1
2406017e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
24060182:	68f8      	ldr	r0, [r7, #12]
24060184:	f7f0 ff9c 	bl	240510c0 <HAL_SAI_TxCpltCallback>
#endif
}
24060188:	bf00      	nop
2406018a:	3710      	adds	r7, #16
2406018c:	46bd      	mov	sp, r7
2406018e:	bd80      	pop	{r7, pc}

24060190 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
24060190:	b580      	push	{r7, lr}
24060192:	b084      	sub	sp, #16
24060194:	af00      	add	r7, sp, #0
24060196:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24060198:	687b      	ldr	r3, [r7, #4]
2406019a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2406019c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
2406019e:	68f8      	ldr	r0, [r7, #12]
240601a0:	f7f0 ff2c 	bl	24050ffc <HAL_SAI_TxHalfCpltCallback>
#endif
}
240601a4:	bf00      	nop
240601a6:	3710      	adds	r7, #16
240601a8:	46bd      	mov	sp, r7
240601aa:	bd80      	pop	{r7, pc}

240601ac <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
240601ac:	b580      	push	{r7, lr}
240601ae:	b084      	sub	sp, #16
240601b0:	af00      	add	r7, sp, #0
240601b2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
240601b4:	687b      	ldr	r3, [r7, #4]
240601b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240601b8:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
240601ba:	6878      	ldr	r0, [r7, #4]
240601bc:	f7f8 fb48 	bl	24058850 <HAL_DMA_GetError>
240601c0:	4603      	mov	r3, r0
240601c2:	2b02      	cmp	r3, #2
240601c4:	d01d      	beq.n	24060202 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
240601c6:	68fb      	ldr	r3, [r7, #12]
240601c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
240601cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
240601d0:	68fb      	ldr	r3, [r7, #12]
240601d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
240601d6:	68fb      	ldr	r3, [r7, #12]
240601d8:	681b      	ldr	r3, [r3, #0]
240601da:	681a      	ldr	r2, [r3, #0]
240601dc:	68fb      	ldr	r3, [r7, #12]
240601de:	681b      	ldr	r3, [r3, #0]
240601e0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
240601e4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
240601e6:	68f8      	ldr	r0, [r7, #12]
240601e8:	f7ff ff68 	bl	240600bc <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
240601ec:	68fb      	ldr	r3, [r7, #12]
240601ee:	2201      	movs	r2, #1
240601f0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
240601f4:	68fb      	ldr	r3, [r7, #12]
240601f6:	2200      	movs	r2, #0
240601f8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
240601fc:	68f8      	ldr	r0, [r7, #12]
240601fe:	f7ff fde7 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
#endif
  }
}
24060202:	bf00      	nop
24060204:	3710      	adds	r7, #16
24060206:	46bd      	mov	sp, r7
24060208:	bd80      	pop	{r7, pc}

2406020a <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
2406020a:	b580      	push	{r7, lr}
2406020c:	b084      	sub	sp, #16
2406020e:	af00      	add	r7, sp, #0
24060210:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24060212:	687b      	ldr	r3, [r7, #4]
24060214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24060216:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24060218:	68fb      	ldr	r3, [r7, #12]
2406021a:	681b      	ldr	r3, [r3, #0]
2406021c:	681a      	ldr	r2, [r3, #0]
2406021e:	68fb      	ldr	r3, [r7, #12]
24060220:	681b      	ldr	r3, [r3, #0]
24060222:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
24060226:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
24060228:	68fb      	ldr	r3, [r7, #12]
2406022a:	681b      	ldr	r3, [r3, #0]
2406022c:	2200      	movs	r2, #0
2406022e:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
24060230:	68fb      	ldr	r3, [r7, #12]
24060232:	681b      	ldr	r3, [r3, #0]
24060234:	f04f 32ff 	mov.w	r2, #4294967295
24060238:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
2406023a:	68fb      	ldr	r3, [r7, #12]
2406023c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24060240:	2b20      	cmp	r3, #32
24060242:	d00a      	beq.n	2406025a <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
24060244:	68f8      	ldr	r0, [r7, #12]
24060246:	f7ff ff39 	bl	240600bc <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2406024a:	68fb      	ldr	r3, [r7, #12]
2406024c:	681b      	ldr	r3, [r3, #0]
2406024e:	685a      	ldr	r2, [r3, #4]
24060250:	68fb      	ldr	r3, [r7, #12]
24060252:	681b      	ldr	r3, [r3, #0]
24060254:	f042 0208 	orr.w	r2, r2, #8
24060258:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
2406025a:	68fb      	ldr	r3, [r7, #12]
2406025c:	2201      	movs	r2, #1
2406025e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
24060262:	68fb      	ldr	r3, [r7, #12]
24060264:	2200      	movs	r2, #0
24060266:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
2406026a:	68f8      	ldr	r0, [r7, #12]
2406026c:	f7ff fdb0 	bl	2405fdd0 <HAL_SAI_ErrorCallback>
#endif
}
24060270:	bf00      	nop
24060272:	3710      	adds	r7, #16
24060274:	46bd      	mov	sp, r7
24060276:	bd80      	pop	{r7, pc}

24060278 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
24060278:	b580      	push	{r7, lr}
2406027a:	b084      	sub	sp, #16
2406027c:	af00      	add	r7, sp, #0
2406027e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
24060280:	687b      	ldr	r3, [r7, #4]
24060282:	2b00      	cmp	r3, #0
24060284:	d101      	bne.n	2406028a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
24060286:	2301      	movs	r3, #1
24060288:	e10f      	b.n	240604aa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2406028a:	687b      	ldr	r3, [r7, #4]
2406028c:	2200      	movs	r2, #0
2406028e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
24060290:	687b      	ldr	r3, [r7, #4]
24060292:	681b      	ldr	r3, [r3, #0]
24060294:	4a87      	ldr	r2, [pc, #540]	; (240604b4 <HAL_SPI_Init+0x23c>)
24060296:	4293      	cmp	r3, r2
24060298:	d00f      	beq.n	240602ba <HAL_SPI_Init+0x42>
2406029a:	687b      	ldr	r3, [r7, #4]
2406029c:	681b      	ldr	r3, [r3, #0]
2406029e:	4a86      	ldr	r2, [pc, #536]	; (240604b8 <HAL_SPI_Init+0x240>)
240602a0:	4293      	cmp	r3, r2
240602a2:	d00a      	beq.n	240602ba <HAL_SPI_Init+0x42>
240602a4:	687b      	ldr	r3, [r7, #4]
240602a6:	681b      	ldr	r3, [r3, #0]
240602a8:	4a84      	ldr	r2, [pc, #528]	; (240604bc <HAL_SPI_Init+0x244>)
240602aa:	4293      	cmp	r3, r2
240602ac:	d005      	beq.n	240602ba <HAL_SPI_Init+0x42>
240602ae:	687b      	ldr	r3, [r7, #4]
240602b0:	68db      	ldr	r3, [r3, #12]
240602b2:	2b0f      	cmp	r3, #15
240602b4:	d901      	bls.n	240602ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
240602b6:	2301      	movs	r3, #1
240602b8:	e0f7      	b.n	240604aa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
240602ba:	6878      	ldr	r0, [r7, #4]
240602bc:	f000 fbca 	bl	24060a54 <SPI_GetPacketSize>
240602c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
240602c2:	687b      	ldr	r3, [r7, #4]
240602c4:	681b      	ldr	r3, [r3, #0]
240602c6:	4a7b      	ldr	r2, [pc, #492]	; (240604b4 <HAL_SPI_Init+0x23c>)
240602c8:	4293      	cmp	r3, r2
240602ca:	d00c      	beq.n	240602e6 <HAL_SPI_Init+0x6e>
240602cc:	687b      	ldr	r3, [r7, #4]
240602ce:	681b      	ldr	r3, [r3, #0]
240602d0:	4a79      	ldr	r2, [pc, #484]	; (240604b8 <HAL_SPI_Init+0x240>)
240602d2:	4293      	cmp	r3, r2
240602d4:	d007      	beq.n	240602e6 <HAL_SPI_Init+0x6e>
240602d6:	687b      	ldr	r3, [r7, #4]
240602d8:	681b      	ldr	r3, [r3, #0]
240602da:	4a78      	ldr	r2, [pc, #480]	; (240604bc <HAL_SPI_Init+0x244>)
240602dc:	4293      	cmp	r3, r2
240602de:	d002      	beq.n	240602e6 <HAL_SPI_Init+0x6e>
240602e0:	68fb      	ldr	r3, [r7, #12]
240602e2:	2b08      	cmp	r3, #8
240602e4:	d811      	bhi.n	2406030a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
240602e6:	687b      	ldr	r3, [r7, #4]
240602e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
240602ea:	4a72      	ldr	r2, [pc, #456]	; (240604b4 <HAL_SPI_Init+0x23c>)
240602ec:	4293      	cmp	r3, r2
240602ee:	d009      	beq.n	24060304 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
240602f0:	687b      	ldr	r3, [r7, #4]
240602f2:	681b      	ldr	r3, [r3, #0]
240602f4:	4a70      	ldr	r2, [pc, #448]	; (240604b8 <HAL_SPI_Init+0x240>)
240602f6:	4293      	cmp	r3, r2
240602f8:	d004      	beq.n	24060304 <HAL_SPI_Init+0x8c>
240602fa:	687b      	ldr	r3, [r7, #4]
240602fc:	681b      	ldr	r3, [r3, #0]
240602fe:	4a6f      	ldr	r2, [pc, #444]	; (240604bc <HAL_SPI_Init+0x244>)
24060300:	4293      	cmp	r3, r2
24060302:	d104      	bne.n	2406030e <HAL_SPI_Init+0x96>
24060304:	68fb      	ldr	r3, [r7, #12]
24060306:	2b10      	cmp	r3, #16
24060308:	d901      	bls.n	2406030e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
2406030a:	2301      	movs	r3, #1
2406030c:	e0cd      	b.n	240604aa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
2406030e:	687b      	ldr	r3, [r7, #4]
24060310:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
24060314:	b2db      	uxtb	r3, r3
24060316:	2b00      	cmp	r3, #0
24060318:	d106      	bne.n	24060328 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
2406031a:	687b      	ldr	r3, [r7, #4]
2406031c:	2200      	movs	r2, #0
2406031e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
24060322:	6878      	ldr	r0, [r7, #4]
24060324:	f7f3 f9be 	bl	240536a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
24060328:	687b      	ldr	r3, [r7, #4]
2406032a:	2202      	movs	r2, #2
2406032c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
24060330:	687b      	ldr	r3, [r7, #4]
24060332:	681b      	ldr	r3, [r3, #0]
24060334:	681a      	ldr	r2, [r3, #0]
24060336:	687b      	ldr	r3, [r7, #4]
24060338:	681b      	ldr	r3, [r3, #0]
2406033a:	f022 0201 	bic.w	r2, r2, #1
2406033e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
24060340:	687b      	ldr	r3, [r7, #4]
24060342:	681b      	ldr	r3, [r3, #0]
24060344:	689b      	ldr	r3, [r3, #8]
24060346:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
2406034a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2406034c:	687b      	ldr	r3, [r7, #4]
2406034e:	699b      	ldr	r3, [r3, #24]
24060350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24060354:	d119      	bne.n	2406038a <HAL_SPI_Init+0x112>
24060356:	687b      	ldr	r3, [r7, #4]
24060358:	685b      	ldr	r3, [r3, #4]
2406035a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2406035e:	d103      	bne.n	24060368 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
24060360:	687b      	ldr	r3, [r7, #4]
24060362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
24060364:	2b00      	cmp	r3, #0
24060366:	d008      	beq.n	2406037a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
24060368:	687b      	ldr	r3, [r7, #4]
2406036a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2406036c:	2b00      	cmp	r3, #0
2406036e:	d10c      	bne.n	2406038a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
24060370:	687b      	ldr	r3, [r7, #4]
24060372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
24060374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24060378:	d107      	bne.n	2406038a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2406037a:	687b      	ldr	r3, [r7, #4]
2406037c:	681b      	ldr	r3, [r3, #0]
2406037e:	681a      	ldr	r2, [r3, #0]
24060380:	687b      	ldr	r3, [r7, #4]
24060382:	681b      	ldr	r3, [r3, #0]
24060384:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
24060388:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2406038a:	687b      	ldr	r3, [r7, #4]
2406038c:	685b      	ldr	r3, [r3, #4]
2406038e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24060392:	2b00      	cmp	r3, #0
24060394:	d00f      	beq.n	240603b6 <HAL_SPI_Init+0x13e>
24060396:	687b      	ldr	r3, [r7, #4]
24060398:	68db      	ldr	r3, [r3, #12]
2406039a:	2b06      	cmp	r3, #6
2406039c:	d90b      	bls.n	240603b6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2406039e:	687b      	ldr	r3, [r7, #4]
240603a0:	681b      	ldr	r3, [r3, #0]
240603a2:	681b      	ldr	r3, [r3, #0]
240603a4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
240603a8:	687b      	ldr	r3, [r7, #4]
240603aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
240603ac:	687b      	ldr	r3, [r7, #4]
240603ae:	681b      	ldr	r3, [r3, #0]
240603b0:	430a      	orrs	r2, r1
240603b2:	601a      	str	r2, [r3, #0]
240603b4:	e007      	b.n	240603c6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
240603b6:	687b      	ldr	r3, [r7, #4]
240603b8:	681b      	ldr	r3, [r3, #0]
240603ba:	681a      	ldr	r2, [r3, #0]
240603bc:	687b      	ldr	r3, [r7, #4]
240603be:	681b      	ldr	r3, [r3, #0]
240603c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240603c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
240603c6:	687b      	ldr	r3, [r7, #4]
240603c8:	69da      	ldr	r2, [r3, #28]
240603ca:	687b      	ldr	r3, [r7, #4]
240603cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240603ce:	431a      	orrs	r2, r3
240603d0:	68bb      	ldr	r3, [r7, #8]
240603d2:	431a      	orrs	r2, r3
240603d4:	687b      	ldr	r3, [r7, #4]
240603d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240603d8:	ea42 0103 	orr.w	r1, r2, r3
240603dc:	687b      	ldr	r3, [r7, #4]
240603de:	68da      	ldr	r2, [r3, #12]
240603e0:	687b      	ldr	r3, [r7, #4]
240603e2:	681b      	ldr	r3, [r3, #0]
240603e4:	430a      	orrs	r2, r1
240603e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
240603e8:	687b      	ldr	r3, [r7, #4]
240603ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240603ec:	687b      	ldr	r3, [r7, #4]
240603ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240603f0:	431a      	orrs	r2, r3
240603f2:	687b      	ldr	r3, [r7, #4]
240603f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240603f6:	431a      	orrs	r2, r3
240603f8:	687b      	ldr	r3, [r7, #4]
240603fa:	699b      	ldr	r3, [r3, #24]
240603fc:	431a      	orrs	r2, r3
240603fe:	687b      	ldr	r3, [r7, #4]
24060400:	691b      	ldr	r3, [r3, #16]
24060402:	431a      	orrs	r2, r3
24060404:	687b      	ldr	r3, [r7, #4]
24060406:	695b      	ldr	r3, [r3, #20]
24060408:	431a      	orrs	r2, r3
2406040a:	687b      	ldr	r3, [r7, #4]
2406040c:	6a1b      	ldr	r3, [r3, #32]
2406040e:	431a      	orrs	r2, r3
24060410:	687b      	ldr	r3, [r7, #4]
24060412:	685b      	ldr	r3, [r3, #4]
24060414:	431a      	orrs	r2, r3
24060416:	687b      	ldr	r3, [r7, #4]
24060418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2406041a:	431a      	orrs	r2, r3
2406041c:	687b      	ldr	r3, [r7, #4]
2406041e:	689b      	ldr	r3, [r3, #8]
24060420:	431a      	orrs	r2, r3
24060422:	687b      	ldr	r3, [r7, #4]
24060424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24060426:	ea42 0103 	orr.w	r1, r2, r3
2406042a:	687b      	ldr	r3, [r7, #4]
2406042c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
2406042e:	687b      	ldr	r3, [r7, #4]
24060430:	681b      	ldr	r3, [r3, #0]
24060432:	430a      	orrs	r2, r1
24060434:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
24060436:	687b      	ldr	r3, [r7, #4]
24060438:	685b      	ldr	r3, [r3, #4]
2406043a:	2b00      	cmp	r3, #0
2406043c:	d113      	bne.n	24060466 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2406043e:	687b      	ldr	r3, [r7, #4]
24060440:	681b      	ldr	r3, [r3, #0]
24060442:	689b      	ldr	r3, [r3, #8]
24060444:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
24060448:	687b      	ldr	r3, [r7, #4]
2406044a:	681b      	ldr	r3, [r3, #0]
2406044c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
24060450:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
24060452:	687b      	ldr	r3, [r7, #4]
24060454:	681b      	ldr	r3, [r3, #0]
24060456:	689b      	ldr	r3, [r3, #8]
24060458:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
2406045c:	687b      	ldr	r3, [r7, #4]
2406045e:	681b      	ldr	r3, [r3, #0]
24060460:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
24060464:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
24060466:	687b      	ldr	r3, [r7, #4]
24060468:	681b      	ldr	r3, [r3, #0]
2406046a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2406046c:	687b      	ldr	r3, [r7, #4]
2406046e:	681b      	ldr	r3, [r3, #0]
24060470:	f022 0201 	bic.w	r2, r2, #1
24060474:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
24060476:	687b      	ldr	r3, [r7, #4]
24060478:	685b      	ldr	r3, [r3, #4]
2406047a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2406047e:	2b00      	cmp	r3, #0
24060480:	d00a      	beq.n	24060498 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
24060482:	687b      	ldr	r3, [r7, #4]
24060484:	681b      	ldr	r3, [r3, #0]
24060486:	68db      	ldr	r3, [r3, #12]
24060488:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
2406048c:	687b      	ldr	r3, [r7, #4]
2406048e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
24060490:	687b      	ldr	r3, [r7, #4]
24060492:	681b      	ldr	r3, [r3, #0]
24060494:	430a      	orrs	r2, r1
24060496:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
24060498:	687b      	ldr	r3, [r7, #4]
2406049a:	2200      	movs	r2, #0
2406049c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
240604a0:	687b      	ldr	r3, [r7, #4]
240604a2:	2201      	movs	r2, #1
240604a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
240604a8:	2300      	movs	r3, #0
}
240604aa:	4618      	mov	r0, r3
240604ac:	3710      	adds	r7, #16
240604ae:	46bd      	mov	sp, r7
240604b0:	bd80      	pop	{r7, pc}
240604b2:	bf00      	nop
240604b4:	40013000 	.word	0x40013000
240604b8:	40003800 	.word	0x40003800
240604bc:	40003c00 	.word	0x40003c00

240604c0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
240604c0:	b580      	push	{r7, lr}
240604c2:	b08a      	sub	sp, #40	; 0x28
240604c4:	af02      	add	r7, sp, #8
240604c6:	60f8      	str	r0, [r7, #12]
240604c8:	60b9      	str	r1, [r7, #8]
240604ca:	603b      	str	r3, [r7, #0]
240604cc:	4613      	mov	r3, r2
240604ce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
240604d0:	68fb      	ldr	r3, [r7, #12]
240604d2:	681b      	ldr	r3, [r3, #0]
240604d4:	3320      	adds	r3, #32
240604d6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
240604d8:	2300      	movs	r3, #0
240604da:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
240604dc:	68fb      	ldr	r3, [r7, #12]
240604de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
240604e2:	2b01      	cmp	r3, #1
240604e4:	d101      	bne.n	240604ea <HAL_SPI_Transmit+0x2a>
240604e6:	2302      	movs	r3, #2
240604e8:	e1e1      	b.n	240608ae <HAL_SPI_Transmit+0x3ee>
240604ea:	68fb      	ldr	r3, [r7, #12]
240604ec:	2201      	movs	r2, #1
240604ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
240604f2:	f7f3 fca7 	bl	24053e44 <HAL_GetTick>
240604f6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
240604f8:	68fb      	ldr	r3, [r7, #12]
240604fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
240604fe:	b2db      	uxtb	r3, r3
24060500:	2b01      	cmp	r3, #1
24060502:	d007      	beq.n	24060514 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
24060504:	2302      	movs	r3, #2
24060506:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
24060508:	68fb      	ldr	r3, [r7, #12]
2406050a:	2200      	movs	r2, #0
2406050c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
24060510:	7efb      	ldrb	r3, [r7, #27]
24060512:	e1cc      	b.n	240608ae <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
24060514:	68bb      	ldr	r3, [r7, #8]
24060516:	2b00      	cmp	r3, #0
24060518:	d002      	beq.n	24060520 <HAL_SPI_Transmit+0x60>
2406051a:	88fb      	ldrh	r3, [r7, #6]
2406051c:	2b00      	cmp	r3, #0
2406051e:	d107      	bne.n	24060530 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
24060520:	2301      	movs	r3, #1
24060522:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
24060524:	68fb      	ldr	r3, [r7, #12]
24060526:	2200      	movs	r2, #0
24060528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
2406052c:	7efb      	ldrb	r3, [r7, #27]
2406052e:	e1be      	b.n	240608ae <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
24060530:	68fb      	ldr	r3, [r7, #12]
24060532:	2203      	movs	r2, #3
24060534:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
24060538:	68fb      	ldr	r3, [r7, #12]
2406053a:	2200      	movs	r2, #0
2406053c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
24060540:	68fb      	ldr	r3, [r7, #12]
24060542:	68ba      	ldr	r2, [r7, #8]
24060544:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
24060546:	68fb      	ldr	r3, [r7, #12]
24060548:	88fa      	ldrh	r2, [r7, #6]
2406054a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
2406054e:	68fb      	ldr	r3, [r7, #12]
24060550:	88fa      	ldrh	r2, [r7, #6]
24060552:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
24060556:	68fb      	ldr	r3, [r7, #12]
24060558:	2200      	movs	r2, #0
2406055a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
2406055c:	68fb      	ldr	r3, [r7, #12]
2406055e:	2200      	movs	r2, #0
24060560:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
24060564:	68fb      	ldr	r3, [r7, #12]
24060566:	2200      	movs	r2, #0
24060568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
2406056c:	68fb      	ldr	r3, [r7, #12]
2406056e:	2200      	movs	r2, #0
24060570:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
24060572:	68fb      	ldr	r3, [r7, #12]
24060574:	2200      	movs	r2, #0
24060576:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
24060578:	68fb      	ldr	r3, [r7, #12]
2406057a:	689b      	ldr	r3, [r3, #8]
2406057c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
24060580:	d108      	bne.n	24060594 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
24060582:	68fb      	ldr	r3, [r7, #12]
24060584:	681b      	ldr	r3, [r3, #0]
24060586:	681a      	ldr	r2, [r3, #0]
24060588:	68fb      	ldr	r3, [r7, #12]
2406058a:	681b      	ldr	r3, [r3, #0]
2406058c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
24060590:	601a      	str	r2, [r3, #0]
24060592:	e009      	b.n	240605a8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
24060594:	68fb      	ldr	r3, [r7, #12]
24060596:	681b      	ldr	r3, [r3, #0]
24060598:	68db      	ldr	r3, [r3, #12]
2406059a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
2406059e:	68fb      	ldr	r3, [r7, #12]
240605a0:	681b      	ldr	r3, [r3, #0]
240605a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
240605a6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
240605a8:	68fb      	ldr	r3, [r7, #12]
240605aa:	681b      	ldr	r3, [r3, #0]
240605ac:	685a      	ldr	r2, [r3, #4]
240605ae:	4b96      	ldr	r3, [pc, #600]	; (24060808 <HAL_SPI_Transmit+0x348>)
240605b0:	4013      	ands	r3, r2
240605b2:	88f9      	ldrh	r1, [r7, #6]
240605b4:	68fa      	ldr	r2, [r7, #12]
240605b6:	6812      	ldr	r2, [r2, #0]
240605b8:	430b      	orrs	r3, r1
240605ba:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
240605bc:	68fb      	ldr	r3, [r7, #12]
240605be:	681b      	ldr	r3, [r3, #0]
240605c0:	681a      	ldr	r2, [r3, #0]
240605c2:	68fb      	ldr	r3, [r7, #12]
240605c4:	681b      	ldr	r3, [r3, #0]
240605c6:	f042 0201 	orr.w	r2, r2, #1
240605ca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
240605cc:	68fb      	ldr	r3, [r7, #12]
240605ce:	685b      	ldr	r3, [r3, #4]
240605d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240605d4:	d107      	bne.n	240605e6 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
240605d6:	68fb      	ldr	r3, [r7, #12]
240605d8:	681b      	ldr	r3, [r3, #0]
240605da:	681a      	ldr	r2, [r3, #0]
240605dc:	68fb      	ldr	r3, [r7, #12]
240605de:	681b      	ldr	r3, [r3, #0]
240605e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
240605e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
240605e6:	68fb      	ldr	r3, [r7, #12]
240605e8:	68db      	ldr	r3, [r3, #12]
240605ea:	2b0f      	cmp	r3, #15
240605ec:	d947      	bls.n	2406067e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
240605ee:	e03f      	b.n	24060670 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
240605f0:	68fb      	ldr	r3, [r7, #12]
240605f2:	681b      	ldr	r3, [r3, #0]
240605f4:	695b      	ldr	r3, [r3, #20]
240605f6:	f003 0302 	and.w	r3, r3, #2
240605fa:	2b02      	cmp	r3, #2
240605fc:	d114      	bne.n	24060628 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
240605fe:	68fb      	ldr	r3, [r7, #12]
24060600:	6dda      	ldr	r2, [r3, #92]	; 0x5c
24060602:	68fb      	ldr	r3, [r7, #12]
24060604:	681b      	ldr	r3, [r3, #0]
24060606:	6812      	ldr	r2, [r2, #0]
24060608:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
2406060a:	68fb      	ldr	r3, [r7, #12]
2406060c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2406060e:	1d1a      	adds	r2, r3, #4
24060610:	68fb      	ldr	r3, [r7, #12]
24060612:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
24060614:	68fb      	ldr	r3, [r7, #12]
24060616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2406061a:	b29b      	uxth	r3, r3
2406061c:	3b01      	subs	r3, #1
2406061e:	b29a      	uxth	r2, r3
24060620:	68fb      	ldr	r3, [r7, #12]
24060622:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
24060626:	e023      	b.n	24060670 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
24060628:	f7f3 fc0c 	bl	24053e44 <HAL_GetTick>
2406062c:	4602      	mov	r2, r0
2406062e:	697b      	ldr	r3, [r7, #20]
24060630:	1ad3      	subs	r3, r2, r3
24060632:	683a      	ldr	r2, [r7, #0]
24060634:	429a      	cmp	r2, r3
24060636:	d803      	bhi.n	24060640 <HAL_SPI_Transmit+0x180>
24060638:	683b      	ldr	r3, [r7, #0]
2406063a:	f1b3 3fff 	cmp.w	r3, #4294967295
2406063e:	d102      	bne.n	24060646 <HAL_SPI_Transmit+0x186>
24060640:	683b      	ldr	r3, [r7, #0]
24060642:	2b00      	cmp	r3, #0
24060644:	d114      	bne.n	24060670 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
24060646:	68f8      	ldr	r0, [r7, #12]
24060648:	f000 f936 	bl	240608b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
2406064c:	68fb      	ldr	r3, [r7, #12]
2406064e:	2200      	movs	r2, #0
24060650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
24060654:	68fb      	ldr	r3, [r7, #12]
24060656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2406065a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
2406065e:	68fb      	ldr	r3, [r7, #12]
24060660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
24060664:	68fb      	ldr	r3, [r7, #12]
24060666:	2201      	movs	r2, #1
24060668:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
2406066c:	2303      	movs	r3, #3
2406066e:	e11e      	b.n	240608ae <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
24060670:	68fb      	ldr	r3, [r7, #12]
24060672:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
24060676:	b29b      	uxth	r3, r3
24060678:	2b00      	cmp	r3, #0
2406067a:	d1b9      	bne.n	240605f0 <HAL_SPI_Transmit+0x130>
2406067c:	e0f1      	b.n	24060862 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2406067e:	68fb      	ldr	r3, [r7, #12]
24060680:	68db      	ldr	r3, [r3, #12]
24060682:	2b07      	cmp	r3, #7
24060684:	f240 80e6 	bls.w	24060854 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
24060688:	e05d      	b.n	24060746 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
2406068a:	68fb      	ldr	r3, [r7, #12]
2406068c:	681b      	ldr	r3, [r3, #0]
2406068e:	695b      	ldr	r3, [r3, #20]
24060690:	f003 0302 	and.w	r3, r3, #2
24060694:	2b02      	cmp	r3, #2
24060696:	d132      	bne.n	240606fe <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
24060698:	68fb      	ldr	r3, [r7, #12]
2406069a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2406069e:	b29b      	uxth	r3, r3
240606a0:	2b01      	cmp	r3, #1
240606a2:	d918      	bls.n	240606d6 <HAL_SPI_Transmit+0x216>
240606a4:	68fb      	ldr	r3, [r7, #12]
240606a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240606a8:	2b00      	cmp	r3, #0
240606aa:	d014      	beq.n	240606d6 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
240606ac:	68fb      	ldr	r3, [r7, #12]
240606ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
240606b0:	68fb      	ldr	r3, [r7, #12]
240606b2:	681b      	ldr	r3, [r3, #0]
240606b4:	6812      	ldr	r2, [r2, #0]
240606b6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
240606b8:	68fb      	ldr	r3, [r7, #12]
240606ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240606bc:	1d1a      	adds	r2, r3, #4
240606be:	68fb      	ldr	r3, [r7, #12]
240606c0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
240606c2:	68fb      	ldr	r3, [r7, #12]
240606c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
240606c8:	b29b      	uxth	r3, r3
240606ca:	3b02      	subs	r3, #2
240606cc:	b29a      	uxth	r2, r3
240606ce:	68fb      	ldr	r3, [r7, #12]
240606d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
240606d4:	e037      	b.n	24060746 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
240606d6:	68fb      	ldr	r3, [r7, #12]
240606d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240606da:	881a      	ldrh	r2, [r3, #0]
240606dc:	69fb      	ldr	r3, [r7, #28]
240606de:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
240606e0:	68fb      	ldr	r3, [r7, #12]
240606e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240606e4:	1c9a      	adds	r2, r3, #2
240606e6:	68fb      	ldr	r3, [r7, #12]
240606e8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
240606ea:	68fb      	ldr	r3, [r7, #12]
240606ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
240606f0:	b29b      	uxth	r3, r3
240606f2:	3b01      	subs	r3, #1
240606f4:	b29a      	uxth	r2, r3
240606f6:	68fb      	ldr	r3, [r7, #12]
240606f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
240606fc:	e023      	b.n	24060746 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
240606fe:	f7f3 fba1 	bl	24053e44 <HAL_GetTick>
24060702:	4602      	mov	r2, r0
24060704:	697b      	ldr	r3, [r7, #20]
24060706:	1ad3      	subs	r3, r2, r3
24060708:	683a      	ldr	r2, [r7, #0]
2406070a:	429a      	cmp	r2, r3
2406070c:	d803      	bhi.n	24060716 <HAL_SPI_Transmit+0x256>
2406070e:	683b      	ldr	r3, [r7, #0]
24060710:	f1b3 3fff 	cmp.w	r3, #4294967295
24060714:	d102      	bne.n	2406071c <HAL_SPI_Transmit+0x25c>
24060716:	683b      	ldr	r3, [r7, #0]
24060718:	2b00      	cmp	r3, #0
2406071a:	d114      	bne.n	24060746 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
2406071c:	68f8      	ldr	r0, [r7, #12]
2406071e:	f000 f8cb 	bl	240608b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
24060722:	68fb      	ldr	r3, [r7, #12]
24060724:	2200      	movs	r2, #0
24060726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
2406072a:	68fb      	ldr	r3, [r7, #12]
2406072c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24060730:	f443 7280 	orr.w	r2, r3, #256	; 0x100
24060734:	68fb      	ldr	r3, [r7, #12]
24060736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
2406073a:	68fb      	ldr	r3, [r7, #12]
2406073c:	2201      	movs	r2, #1
2406073e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
24060742:	2303      	movs	r3, #3
24060744:	e0b3      	b.n	240608ae <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
24060746:	68fb      	ldr	r3, [r7, #12]
24060748:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2406074c:	b29b      	uxth	r3, r3
2406074e:	2b00      	cmp	r3, #0
24060750:	d19b      	bne.n	2406068a <HAL_SPI_Transmit+0x1ca>
24060752:	e086      	b.n	24060862 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
24060754:	68fb      	ldr	r3, [r7, #12]
24060756:	681b      	ldr	r3, [r3, #0]
24060758:	695b      	ldr	r3, [r3, #20]
2406075a:	f003 0302 	and.w	r3, r3, #2
2406075e:	2b02      	cmp	r3, #2
24060760:	d154      	bne.n	2406080c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
24060762:	68fb      	ldr	r3, [r7, #12]
24060764:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
24060768:	b29b      	uxth	r3, r3
2406076a:	2b03      	cmp	r3, #3
2406076c:	d918      	bls.n	240607a0 <HAL_SPI_Transmit+0x2e0>
2406076e:	68fb      	ldr	r3, [r7, #12]
24060770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24060772:	2b40      	cmp	r3, #64	; 0x40
24060774:	d914      	bls.n	240607a0 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
24060776:	68fb      	ldr	r3, [r7, #12]
24060778:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2406077a:	68fb      	ldr	r3, [r7, #12]
2406077c:	681b      	ldr	r3, [r3, #0]
2406077e:	6812      	ldr	r2, [r2, #0]
24060780:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
24060782:	68fb      	ldr	r3, [r7, #12]
24060784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24060786:	1d1a      	adds	r2, r3, #4
24060788:	68fb      	ldr	r3, [r7, #12]
2406078a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
2406078c:	68fb      	ldr	r3, [r7, #12]
2406078e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
24060792:	b29b      	uxth	r3, r3
24060794:	3b04      	subs	r3, #4
24060796:	b29a      	uxth	r2, r3
24060798:	68fb      	ldr	r3, [r7, #12]
2406079a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2406079e:	e059      	b.n	24060854 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
240607a0:	68fb      	ldr	r3, [r7, #12]
240607a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
240607a6:	b29b      	uxth	r3, r3
240607a8:	2b01      	cmp	r3, #1
240607aa:	d917      	bls.n	240607dc <HAL_SPI_Transmit+0x31c>
240607ac:	68fb      	ldr	r3, [r7, #12]
240607ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240607b0:	2b00      	cmp	r3, #0
240607b2:	d013      	beq.n	240607dc <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
240607b4:	68fb      	ldr	r3, [r7, #12]
240607b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240607b8:	881a      	ldrh	r2, [r3, #0]
240607ba:	69fb      	ldr	r3, [r7, #28]
240607bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
240607be:	68fb      	ldr	r3, [r7, #12]
240607c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240607c2:	1c9a      	adds	r2, r3, #2
240607c4:	68fb      	ldr	r3, [r7, #12]
240607c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
240607c8:	68fb      	ldr	r3, [r7, #12]
240607ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
240607ce:	b29b      	uxth	r3, r3
240607d0:	3b02      	subs	r3, #2
240607d2:	b29a      	uxth	r2, r3
240607d4:	68fb      	ldr	r3, [r7, #12]
240607d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
240607da:	e03b      	b.n	24060854 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
240607dc:	68fb      	ldr	r3, [r7, #12]
240607de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
240607e0:	68fb      	ldr	r3, [r7, #12]
240607e2:	681b      	ldr	r3, [r3, #0]
240607e4:	3320      	adds	r3, #32
240607e6:	7812      	ldrb	r2, [r2, #0]
240607e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
240607ea:	68fb      	ldr	r3, [r7, #12]
240607ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240607ee:	1c5a      	adds	r2, r3, #1
240607f0:	68fb      	ldr	r3, [r7, #12]
240607f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
240607f4:	68fb      	ldr	r3, [r7, #12]
240607f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
240607fa:	b29b      	uxth	r3, r3
240607fc:	3b01      	subs	r3, #1
240607fe:	b29a      	uxth	r2, r3
24060800:	68fb      	ldr	r3, [r7, #12]
24060802:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
24060806:	e025      	b.n	24060854 <HAL_SPI_Transmit+0x394>
24060808:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2406080c:	f7f3 fb1a 	bl	24053e44 <HAL_GetTick>
24060810:	4602      	mov	r2, r0
24060812:	697b      	ldr	r3, [r7, #20]
24060814:	1ad3      	subs	r3, r2, r3
24060816:	683a      	ldr	r2, [r7, #0]
24060818:	429a      	cmp	r2, r3
2406081a:	d803      	bhi.n	24060824 <HAL_SPI_Transmit+0x364>
2406081c:	683b      	ldr	r3, [r7, #0]
2406081e:	f1b3 3fff 	cmp.w	r3, #4294967295
24060822:	d102      	bne.n	2406082a <HAL_SPI_Transmit+0x36a>
24060824:	683b      	ldr	r3, [r7, #0]
24060826:	2b00      	cmp	r3, #0
24060828:	d114      	bne.n	24060854 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
2406082a:	68f8      	ldr	r0, [r7, #12]
2406082c:	f000 f844 	bl	240608b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
24060830:	68fb      	ldr	r3, [r7, #12]
24060832:	2200      	movs	r2, #0
24060834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
24060838:	68fb      	ldr	r3, [r7, #12]
2406083a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2406083e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
24060842:	68fb      	ldr	r3, [r7, #12]
24060844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
24060848:	68fb      	ldr	r3, [r7, #12]
2406084a:	2201      	movs	r2, #1
2406084c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
24060850:	2303      	movs	r3, #3
24060852:	e02c      	b.n	240608ae <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
24060854:	68fb      	ldr	r3, [r7, #12]
24060856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2406085a:	b29b      	uxth	r3, r3
2406085c:	2b00      	cmp	r3, #0
2406085e:	f47f af79 	bne.w	24060754 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
24060862:	697b      	ldr	r3, [r7, #20]
24060864:	9300      	str	r3, [sp, #0]
24060866:	683b      	ldr	r3, [r7, #0]
24060868:	2200      	movs	r2, #0
2406086a:	2108      	movs	r1, #8
2406086c:	68f8      	ldr	r0, [r7, #12]
2406086e:	f000 f8c3 	bl	240609f8 <SPI_WaitOnFlagUntilTimeout>
24060872:	4603      	mov	r3, r0
24060874:	2b00      	cmp	r3, #0
24060876:	d007      	beq.n	24060888 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
24060878:	68fb      	ldr	r3, [r7, #12]
2406087a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2406087e:	f043 0220 	orr.w	r2, r3, #32
24060882:	68fb      	ldr	r3, [r7, #12]
24060884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
24060888:	68f8      	ldr	r0, [r7, #12]
2406088a:	f000 f815 	bl	240608b8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
2406088e:	68fb      	ldr	r3, [r7, #12]
24060890:	2200      	movs	r2, #0
24060892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
24060896:	68fb      	ldr	r3, [r7, #12]
24060898:	2201      	movs	r2, #1
2406089a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2406089e:	68fb      	ldr	r3, [r7, #12]
240608a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240608a4:	2b00      	cmp	r3, #0
240608a6:	d001      	beq.n	240608ac <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
240608a8:	2301      	movs	r3, #1
240608aa:	e000      	b.n	240608ae <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
240608ac:	7efb      	ldrb	r3, [r7, #27]
}
240608ae:	4618      	mov	r0, r3
240608b0:	3720      	adds	r7, #32
240608b2:	46bd      	mov	sp, r7
240608b4:	bd80      	pop	{r7, pc}
240608b6:	bf00      	nop

240608b8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
240608b8:	b480      	push	{r7}
240608ba:	b085      	sub	sp, #20
240608bc:	af00      	add	r7, sp, #0
240608be:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
240608c0:	687b      	ldr	r3, [r7, #4]
240608c2:	681b      	ldr	r3, [r3, #0]
240608c4:	695b      	ldr	r3, [r3, #20]
240608c6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
240608c8:	687b      	ldr	r3, [r7, #4]
240608ca:	681b      	ldr	r3, [r3, #0]
240608cc:	699a      	ldr	r2, [r3, #24]
240608ce:	687b      	ldr	r3, [r7, #4]
240608d0:	681b      	ldr	r3, [r3, #0]
240608d2:	f042 0208 	orr.w	r2, r2, #8
240608d6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
240608d8:	687b      	ldr	r3, [r7, #4]
240608da:	681b      	ldr	r3, [r3, #0]
240608dc:	699a      	ldr	r2, [r3, #24]
240608de:	687b      	ldr	r3, [r7, #4]
240608e0:	681b      	ldr	r3, [r3, #0]
240608e2:	f042 0210 	orr.w	r2, r2, #16
240608e6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
240608e8:	687b      	ldr	r3, [r7, #4]
240608ea:	681b      	ldr	r3, [r3, #0]
240608ec:	681a      	ldr	r2, [r3, #0]
240608ee:	687b      	ldr	r3, [r7, #4]
240608f0:	681b      	ldr	r3, [r3, #0]
240608f2:	f022 0201 	bic.w	r2, r2, #1
240608f6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
240608f8:	687b      	ldr	r3, [r7, #4]
240608fa:	681b      	ldr	r3, [r3, #0]
240608fc:	6919      	ldr	r1, [r3, #16]
240608fe:	687b      	ldr	r3, [r7, #4]
24060900:	681a      	ldr	r2, [r3, #0]
24060902:	4b3c      	ldr	r3, [pc, #240]	; (240609f4 <SPI_CloseTransfer+0x13c>)
24060904:	400b      	ands	r3, r1
24060906:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
24060908:	687b      	ldr	r3, [r7, #4]
2406090a:	681b      	ldr	r3, [r3, #0]
2406090c:	689a      	ldr	r2, [r3, #8]
2406090e:	687b      	ldr	r3, [r7, #4]
24060910:	681b      	ldr	r3, [r3, #0]
24060912:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
24060916:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
24060918:	687b      	ldr	r3, [r7, #4]
2406091a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
2406091e:	b2db      	uxtb	r3, r3
24060920:	2b04      	cmp	r3, #4
24060922:	d014      	beq.n	2406094e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
24060924:	68fb      	ldr	r3, [r7, #12]
24060926:	f003 0320 	and.w	r3, r3, #32
2406092a:	2b00      	cmp	r3, #0
2406092c:	d00f      	beq.n	2406094e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2406092e:	687b      	ldr	r3, [r7, #4]
24060930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24060934:	f043 0280 	orr.w	r2, r3, #128	; 0x80
24060938:	687b      	ldr	r3, [r7, #4]
2406093a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2406093e:	687b      	ldr	r3, [r7, #4]
24060940:	681b      	ldr	r3, [r3, #0]
24060942:	699a      	ldr	r2, [r3, #24]
24060944:	687b      	ldr	r3, [r7, #4]
24060946:	681b      	ldr	r3, [r3, #0]
24060948:	f042 0220 	orr.w	r2, r2, #32
2406094c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2406094e:	687b      	ldr	r3, [r7, #4]
24060950:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
24060954:	b2db      	uxtb	r3, r3
24060956:	2b03      	cmp	r3, #3
24060958:	d014      	beq.n	24060984 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2406095a:	68fb      	ldr	r3, [r7, #12]
2406095c:	f003 0340 	and.w	r3, r3, #64	; 0x40
24060960:	2b00      	cmp	r3, #0
24060962:	d00f      	beq.n	24060984 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
24060964:	687b      	ldr	r3, [r7, #4]
24060966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2406096a:	f043 0204 	orr.w	r2, r3, #4
2406096e:	687b      	ldr	r3, [r7, #4]
24060970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
24060974:	687b      	ldr	r3, [r7, #4]
24060976:	681b      	ldr	r3, [r3, #0]
24060978:	699a      	ldr	r2, [r3, #24]
2406097a:	687b      	ldr	r3, [r7, #4]
2406097c:	681b      	ldr	r3, [r3, #0]
2406097e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24060982:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
24060984:	68fb      	ldr	r3, [r7, #12]
24060986:	f403 7300 	and.w	r3, r3, #512	; 0x200
2406098a:	2b00      	cmp	r3, #0
2406098c:	d00f      	beq.n	240609ae <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2406098e:	687b      	ldr	r3, [r7, #4]
24060990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24060994:	f043 0201 	orr.w	r2, r3, #1
24060998:	687b      	ldr	r3, [r7, #4]
2406099a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2406099e:	687b      	ldr	r3, [r7, #4]
240609a0:	681b      	ldr	r3, [r3, #0]
240609a2:	699a      	ldr	r2, [r3, #24]
240609a4:	687b      	ldr	r3, [r7, #4]
240609a6:	681b      	ldr	r3, [r3, #0]
240609a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
240609ac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
240609ae:	68fb      	ldr	r3, [r7, #12]
240609b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
240609b4:	2b00      	cmp	r3, #0
240609b6:	d00f      	beq.n	240609d8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
240609b8:	687b      	ldr	r3, [r7, #4]
240609ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240609be:	f043 0208 	orr.w	r2, r3, #8
240609c2:	687b      	ldr	r3, [r7, #4]
240609c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
240609c8:	687b      	ldr	r3, [r7, #4]
240609ca:	681b      	ldr	r3, [r3, #0]
240609cc:	699a      	ldr	r2, [r3, #24]
240609ce:	687b      	ldr	r3, [r7, #4]
240609d0:	681b      	ldr	r3, [r3, #0]
240609d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240609d6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
240609d8:	687b      	ldr	r3, [r7, #4]
240609da:	2200      	movs	r2, #0
240609dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
240609e0:	687b      	ldr	r3, [r7, #4]
240609e2:	2200      	movs	r2, #0
240609e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
240609e8:	bf00      	nop
240609ea:	3714      	adds	r7, #20
240609ec:	46bd      	mov	sp, r7
240609ee:	f85d 7b04 	ldr.w	r7, [sp], #4
240609f2:	4770      	bx	lr
240609f4:	fffffc90 	.word	0xfffffc90

240609f8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
240609f8:	b580      	push	{r7, lr}
240609fa:	b084      	sub	sp, #16
240609fc:	af00      	add	r7, sp, #0
240609fe:	60f8      	str	r0, [r7, #12]
24060a00:	60b9      	str	r1, [r7, #8]
24060a02:	603b      	str	r3, [r7, #0]
24060a04:	4613      	mov	r3, r2
24060a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
24060a08:	e010      	b.n	24060a2c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
24060a0a:	f7f3 fa1b 	bl	24053e44 <HAL_GetTick>
24060a0e:	4602      	mov	r2, r0
24060a10:	69bb      	ldr	r3, [r7, #24]
24060a12:	1ad3      	subs	r3, r2, r3
24060a14:	683a      	ldr	r2, [r7, #0]
24060a16:	429a      	cmp	r2, r3
24060a18:	d803      	bhi.n	24060a22 <SPI_WaitOnFlagUntilTimeout+0x2a>
24060a1a:	683b      	ldr	r3, [r7, #0]
24060a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
24060a20:	d102      	bne.n	24060a28 <SPI_WaitOnFlagUntilTimeout+0x30>
24060a22:	683b      	ldr	r3, [r7, #0]
24060a24:	2b00      	cmp	r3, #0
24060a26:	d101      	bne.n	24060a2c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
24060a28:	2303      	movs	r3, #3
24060a2a:	e00f      	b.n	24060a4c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
24060a2c:	68fb      	ldr	r3, [r7, #12]
24060a2e:	681b      	ldr	r3, [r3, #0]
24060a30:	695a      	ldr	r2, [r3, #20]
24060a32:	68bb      	ldr	r3, [r7, #8]
24060a34:	4013      	ands	r3, r2
24060a36:	68ba      	ldr	r2, [r7, #8]
24060a38:	429a      	cmp	r2, r3
24060a3a:	bf0c      	ite	eq
24060a3c:	2301      	moveq	r3, #1
24060a3e:	2300      	movne	r3, #0
24060a40:	b2db      	uxtb	r3, r3
24060a42:	461a      	mov	r2, r3
24060a44:	79fb      	ldrb	r3, [r7, #7]
24060a46:	429a      	cmp	r2, r3
24060a48:	d0df      	beq.n	24060a0a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
24060a4a:	2300      	movs	r3, #0
}
24060a4c:	4618      	mov	r0, r3
24060a4e:	3710      	adds	r7, #16
24060a50:	46bd      	mov	sp, r7
24060a52:	bd80      	pop	{r7, pc}

24060a54 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
24060a54:	b480      	push	{r7}
24060a56:	b085      	sub	sp, #20
24060a58:	af00      	add	r7, sp, #0
24060a5a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
24060a5c:	687b      	ldr	r3, [r7, #4]
24060a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24060a60:	095b      	lsrs	r3, r3, #5
24060a62:	3301      	adds	r3, #1
24060a64:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
24060a66:	687b      	ldr	r3, [r7, #4]
24060a68:	68db      	ldr	r3, [r3, #12]
24060a6a:	3301      	adds	r3, #1
24060a6c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
24060a6e:	68bb      	ldr	r3, [r7, #8]
24060a70:	3307      	adds	r3, #7
24060a72:	08db      	lsrs	r3, r3, #3
24060a74:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
24060a76:	68bb      	ldr	r3, [r7, #8]
24060a78:	68fa      	ldr	r2, [r7, #12]
24060a7a:	fb02 f303 	mul.w	r3, r2, r3
}
24060a7e:	4618      	mov	r0, r3
24060a80:	3714      	adds	r7, #20
24060a82:	46bd      	mov	sp, r7
24060a84:	f85d 7b04 	ldr.w	r7, [sp], #4
24060a88:	4770      	bx	lr

24060a8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
24060a8a:	b580      	push	{r7, lr}
24060a8c:	b082      	sub	sp, #8
24060a8e:	af00      	add	r7, sp, #0
24060a90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
24060a92:	687b      	ldr	r3, [r7, #4]
24060a94:	2b00      	cmp	r3, #0
24060a96:	d101      	bne.n	24060a9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
24060a98:	2301      	movs	r3, #1
24060a9a:	e049      	b.n	24060b30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
24060a9c:	687b      	ldr	r3, [r7, #4]
24060a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24060aa2:	b2db      	uxtb	r3, r3
24060aa4:	2b00      	cmp	r3, #0
24060aa6:	d106      	bne.n	24060ab6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
24060aa8:	687b      	ldr	r3, [r7, #4]
24060aaa:	2200      	movs	r2, #0
24060aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
24060ab0:	6878      	ldr	r0, [r7, #4]
24060ab2:	f7f2 fe61 	bl	24053778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
24060ab6:	687b      	ldr	r3, [r7, #4]
24060ab8:	2202      	movs	r2, #2
24060aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
24060abe:	687b      	ldr	r3, [r7, #4]
24060ac0:	681a      	ldr	r2, [r3, #0]
24060ac2:	687b      	ldr	r3, [r7, #4]
24060ac4:	3304      	adds	r3, #4
24060ac6:	4619      	mov	r1, r3
24060ac8:	4610      	mov	r0, r2
24060aca:	f000 faf7 	bl	240610bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
24060ace:	687b      	ldr	r3, [r7, #4]
24060ad0:	2201      	movs	r2, #1
24060ad2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
24060ad6:	687b      	ldr	r3, [r7, #4]
24060ad8:	2201      	movs	r2, #1
24060ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
24060ade:	687b      	ldr	r3, [r7, #4]
24060ae0:	2201      	movs	r2, #1
24060ae2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
24060ae6:	687b      	ldr	r3, [r7, #4]
24060ae8:	2201      	movs	r2, #1
24060aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24060aee:	687b      	ldr	r3, [r7, #4]
24060af0:	2201      	movs	r2, #1
24060af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24060af6:	687b      	ldr	r3, [r7, #4]
24060af8:	2201      	movs	r2, #1
24060afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
24060afe:	687b      	ldr	r3, [r7, #4]
24060b00:	2201      	movs	r2, #1
24060b02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
24060b06:	687b      	ldr	r3, [r7, #4]
24060b08:	2201      	movs	r2, #1
24060b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
24060b0e:	687b      	ldr	r3, [r7, #4]
24060b10:	2201      	movs	r2, #1
24060b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
24060b16:	687b      	ldr	r3, [r7, #4]
24060b18:	2201      	movs	r2, #1
24060b1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
24060b1e:	687b      	ldr	r3, [r7, #4]
24060b20:	2201      	movs	r2, #1
24060b22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
24060b26:	687b      	ldr	r3, [r7, #4]
24060b28:	2201      	movs	r2, #1
24060b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
24060b2e:	2300      	movs	r3, #0
}
24060b30:	4618      	mov	r0, r3
24060b32:	3708      	adds	r7, #8
24060b34:	46bd      	mov	sp, r7
24060b36:	bd80      	pop	{r7, pc}

24060b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
24060b38:	b480      	push	{r7}
24060b3a:	b085      	sub	sp, #20
24060b3c:	af00      	add	r7, sp, #0
24060b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
24060b40:	687b      	ldr	r3, [r7, #4]
24060b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24060b46:	b2db      	uxtb	r3, r3
24060b48:	2b01      	cmp	r3, #1
24060b4a:	d001      	beq.n	24060b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
24060b4c:	2301      	movs	r3, #1
24060b4e:	e054      	b.n	24060bfa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
24060b50:	687b      	ldr	r3, [r7, #4]
24060b52:	2202      	movs	r2, #2
24060b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
24060b58:	687b      	ldr	r3, [r7, #4]
24060b5a:	681b      	ldr	r3, [r3, #0]
24060b5c:	68da      	ldr	r2, [r3, #12]
24060b5e:	687b      	ldr	r3, [r7, #4]
24060b60:	681b      	ldr	r3, [r3, #0]
24060b62:	f042 0201 	orr.w	r2, r2, #1
24060b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
24060b68:	687b      	ldr	r3, [r7, #4]
24060b6a:	681b      	ldr	r3, [r3, #0]
24060b6c:	4a26      	ldr	r2, [pc, #152]	; (24060c08 <HAL_TIM_Base_Start_IT+0xd0>)
24060b6e:	4293      	cmp	r3, r2
24060b70:	d022      	beq.n	24060bb8 <HAL_TIM_Base_Start_IT+0x80>
24060b72:	687b      	ldr	r3, [r7, #4]
24060b74:	681b      	ldr	r3, [r3, #0]
24060b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24060b7a:	d01d      	beq.n	24060bb8 <HAL_TIM_Base_Start_IT+0x80>
24060b7c:	687b      	ldr	r3, [r7, #4]
24060b7e:	681b      	ldr	r3, [r3, #0]
24060b80:	4a22      	ldr	r2, [pc, #136]	; (24060c0c <HAL_TIM_Base_Start_IT+0xd4>)
24060b82:	4293      	cmp	r3, r2
24060b84:	d018      	beq.n	24060bb8 <HAL_TIM_Base_Start_IT+0x80>
24060b86:	687b      	ldr	r3, [r7, #4]
24060b88:	681b      	ldr	r3, [r3, #0]
24060b8a:	4a21      	ldr	r2, [pc, #132]	; (24060c10 <HAL_TIM_Base_Start_IT+0xd8>)
24060b8c:	4293      	cmp	r3, r2
24060b8e:	d013      	beq.n	24060bb8 <HAL_TIM_Base_Start_IT+0x80>
24060b90:	687b      	ldr	r3, [r7, #4]
24060b92:	681b      	ldr	r3, [r3, #0]
24060b94:	4a1f      	ldr	r2, [pc, #124]	; (24060c14 <HAL_TIM_Base_Start_IT+0xdc>)
24060b96:	4293      	cmp	r3, r2
24060b98:	d00e      	beq.n	24060bb8 <HAL_TIM_Base_Start_IT+0x80>
24060b9a:	687b      	ldr	r3, [r7, #4]
24060b9c:	681b      	ldr	r3, [r3, #0]
24060b9e:	4a1e      	ldr	r2, [pc, #120]	; (24060c18 <HAL_TIM_Base_Start_IT+0xe0>)
24060ba0:	4293      	cmp	r3, r2
24060ba2:	d009      	beq.n	24060bb8 <HAL_TIM_Base_Start_IT+0x80>
24060ba4:	687b      	ldr	r3, [r7, #4]
24060ba6:	681b      	ldr	r3, [r3, #0]
24060ba8:	4a1c      	ldr	r2, [pc, #112]	; (24060c1c <HAL_TIM_Base_Start_IT+0xe4>)
24060baa:	4293      	cmp	r3, r2
24060bac:	d004      	beq.n	24060bb8 <HAL_TIM_Base_Start_IT+0x80>
24060bae:	687b      	ldr	r3, [r7, #4]
24060bb0:	681b      	ldr	r3, [r3, #0]
24060bb2:	4a1b      	ldr	r2, [pc, #108]	; (24060c20 <HAL_TIM_Base_Start_IT+0xe8>)
24060bb4:	4293      	cmp	r3, r2
24060bb6:	d115      	bne.n	24060be4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
24060bb8:	687b      	ldr	r3, [r7, #4]
24060bba:	681b      	ldr	r3, [r3, #0]
24060bbc:	689a      	ldr	r2, [r3, #8]
24060bbe:	4b19      	ldr	r3, [pc, #100]	; (24060c24 <HAL_TIM_Base_Start_IT+0xec>)
24060bc0:	4013      	ands	r3, r2
24060bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
24060bc4:	68fb      	ldr	r3, [r7, #12]
24060bc6:	2b06      	cmp	r3, #6
24060bc8:	d015      	beq.n	24060bf6 <HAL_TIM_Base_Start_IT+0xbe>
24060bca:	68fb      	ldr	r3, [r7, #12]
24060bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24060bd0:	d011      	beq.n	24060bf6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
24060bd2:	687b      	ldr	r3, [r7, #4]
24060bd4:	681b      	ldr	r3, [r3, #0]
24060bd6:	681a      	ldr	r2, [r3, #0]
24060bd8:	687b      	ldr	r3, [r7, #4]
24060bda:	681b      	ldr	r3, [r3, #0]
24060bdc:	f042 0201 	orr.w	r2, r2, #1
24060be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
24060be2:	e008      	b.n	24060bf6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
24060be4:	687b      	ldr	r3, [r7, #4]
24060be6:	681b      	ldr	r3, [r3, #0]
24060be8:	681a      	ldr	r2, [r3, #0]
24060bea:	687b      	ldr	r3, [r7, #4]
24060bec:	681b      	ldr	r3, [r3, #0]
24060bee:	f042 0201 	orr.w	r2, r2, #1
24060bf2:	601a      	str	r2, [r3, #0]
24060bf4:	e000      	b.n	24060bf8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
24060bf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
24060bf8:	2300      	movs	r3, #0
}
24060bfa:	4618      	mov	r0, r3
24060bfc:	3714      	adds	r7, #20
24060bfe:	46bd      	mov	sp, r7
24060c00:	f85d 7b04 	ldr.w	r7, [sp], #4
24060c04:	4770      	bx	lr
24060c06:	bf00      	nop
24060c08:	40010000 	.word	0x40010000
24060c0c:	40000400 	.word	0x40000400
24060c10:	40000800 	.word	0x40000800
24060c14:	40000c00 	.word	0x40000c00
24060c18:	40010400 	.word	0x40010400
24060c1c:	40001800 	.word	0x40001800
24060c20:	40014000 	.word	0x40014000
24060c24:	00010007 	.word	0x00010007

24060c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
24060c28:	b580      	push	{r7, lr}
24060c2a:	b082      	sub	sp, #8
24060c2c:	af00      	add	r7, sp, #0
24060c2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
24060c30:	687b      	ldr	r3, [r7, #4]
24060c32:	681b      	ldr	r3, [r3, #0]
24060c34:	691b      	ldr	r3, [r3, #16]
24060c36:	f003 0302 	and.w	r3, r3, #2
24060c3a:	2b02      	cmp	r3, #2
24060c3c:	d122      	bne.n	24060c84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
24060c3e:	687b      	ldr	r3, [r7, #4]
24060c40:	681b      	ldr	r3, [r3, #0]
24060c42:	68db      	ldr	r3, [r3, #12]
24060c44:	f003 0302 	and.w	r3, r3, #2
24060c48:	2b02      	cmp	r3, #2
24060c4a:	d11b      	bne.n	24060c84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
24060c4c:	687b      	ldr	r3, [r7, #4]
24060c4e:	681b      	ldr	r3, [r3, #0]
24060c50:	f06f 0202 	mvn.w	r2, #2
24060c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
24060c56:	687b      	ldr	r3, [r7, #4]
24060c58:	2201      	movs	r2, #1
24060c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
24060c5c:	687b      	ldr	r3, [r7, #4]
24060c5e:	681b      	ldr	r3, [r3, #0]
24060c60:	699b      	ldr	r3, [r3, #24]
24060c62:	f003 0303 	and.w	r3, r3, #3
24060c66:	2b00      	cmp	r3, #0
24060c68:	d003      	beq.n	24060c72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
24060c6a:	6878      	ldr	r0, [r7, #4]
24060c6c:	f000 fa08 	bl	24061080 <HAL_TIM_IC_CaptureCallback>
24060c70:	e005      	b.n	24060c7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
24060c72:	6878      	ldr	r0, [r7, #4]
24060c74:	f000 f9fa 	bl	2406106c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
24060c78:	6878      	ldr	r0, [r7, #4]
24060c7a:	f000 fa0b 	bl	24061094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
24060c7e:	687b      	ldr	r3, [r7, #4]
24060c80:	2200      	movs	r2, #0
24060c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
24060c84:	687b      	ldr	r3, [r7, #4]
24060c86:	681b      	ldr	r3, [r3, #0]
24060c88:	691b      	ldr	r3, [r3, #16]
24060c8a:	f003 0304 	and.w	r3, r3, #4
24060c8e:	2b04      	cmp	r3, #4
24060c90:	d122      	bne.n	24060cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
24060c92:	687b      	ldr	r3, [r7, #4]
24060c94:	681b      	ldr	r3, [r3, #0]
24060c96:	68db      	ldr	r3, [r3, #12]
24060c98:	f003 0304 	and.w	r3, r3, #4
24060c9c:	2b04      	cmp	r3, #4
24060c9e:	d11b      	bne.n	24060cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
24060ca0:	687b      	ldr	r3, [r7, #4]
24060ca2:	681b      	ldr	r3, [r3, #0]
24060ca4:	f06f 0204 	mvn.w	r2, #4
24060ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
24060caa:	687b      	ldr	r3, [r7, #4]
24060cac:	2202      	movs	r2, #2
24060cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
24060cb0:	687b      	ldr	r3, [r7, #4]
24060cb2:	681b      	ldr	r3, [r3, #0]
24060cb4:	699b      	ldr	r3, [r3, #24]
24060cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
24060cba:	2b00      	cmp	r3, #0
24060cbc:	d003      	beq.n	24060cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
24060cbe:	6878      	ldr	r0, [r7, #4]
24060cc0:	f000 f9de 	bl	24061080 <HAL_TIM_IC_CaptureCallback>
24060cc4:	e005      	b.n	24060cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
24060cc6:	6878      	ldr	r0, [r7, #4]
24060cc8:	f000 f9d0 	bl	2406106c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
24060ccc:	6878      	ldr	r0, [r7, #4]
24060cce:	f000 f9e1 	bl	24061094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
24060cd2:	687b      	ldr	r3, [r7, #4]
24060cd4:	2200      	movs	r2, #0
24060cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
24060cd8:	687b      	ldr	r3, [r7, #4]
24060cda:	681b      	ldr	r3, [r3, #0]
24060cdc:	691b      	ldr	r3, [r3, #16]
24060cde:	f003 0308 	and.w	r3, r3, #8
24060ce2:	2b08      	cmp	r3, #8
24060ce4:	d122      	bne.n	24060d2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
24060ce6:	687b      	ldr	r3, [r7, #4]
24060ce8:	681b      	ldr	r3, [r3, #0]
24060cea:	68db      	ldr	r3, [r3, #12]
24060cec:	f003 0308 	and.w	r3, r3, #8
24060cf0:	2b08      	cmp	r3, #8
24060cf2:	d11b      	bne.n	24060d2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
24060cf4:	687b      	ldr	r3, [r7, #4]
24060cf6:	681b      	ldr	r3, [r3, #0]
24060cf8:	f06f 0208 	mvn.w	r2, #8
24060cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
24060cfe:	687b      	ldr	r3, [r7, #4]
24060d00:	2204      	movs	r2, #4
24060d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
24060d04:	687b      	ldr	r3, [r7, #4]
24060d06:	681b      	ldr	r3, [r3, #0]
24060d08:	69db      	ldr	r3, [r3, #28]
24060d0a:	f003 0303 	and.w	r3, r3, #3
24060d0e:	2b00      	cmp	r3, #0
24060d10:	d003      	beq.n	24060d1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
24060d12:	6878      	ldr	r0, [r7, #4]
24060d14:	f000 f9b4 	bl	24061080 <HAL_TIM_IC_CaptureCallback>
24060d18:	e005      	b.n	24060d26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
24060d1a:	6878      	ldr	r0, [r7, #4]
24060d1c:	f000 f9a6 	bl	2406106c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
24060d20:	6878      	ldr	r0, [r7, #4]
24060d22:	f000 f9b7 	bl	24061094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
24060d26:	687b      	ldr	r3, [r7, #4]
24060d28:	2200      	movs	r2, #0
24060d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
24060d2c:	687b      	ldr	r3, [r7, #4]
24060d2e:	681b      	ldr	r3, [r3, #0]
24060d30:	691b      	ldr	r3, [r3, #16]
24060d32:	f003 0310 	and.w	r3, r3, #16
24060d36:	2b10      	cmp	r3, #16
24060d38:	d122      	bne.n	24060d80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
24060d3a:	687b      	ldr	r3, [r7, #4]
24060d3c:	681b      	ldr	r3, [r3, #0]
24060d3e:	68db      	ldr	r3, [r3, #12]
24060d40:	f003 0310 	and.w	r3, r3, #16
24060d44:	2b10      	cmp	r3, #16
24060d46:	d11b      	bne.n	24060d80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
24060d48:	687b      	ldr	r3, [r7, #4]
24060d4a:	681b      	ldr	r3, [r3, #0]
24060d4c:	f06f 0210 	mvn.w	r2, #16
24060d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
24060d52:	687b      	ldr	r3, [r7, #4]
24060d54:	2208      	movs	r2, #8
24060d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
24060d58:	687b      	ldr	r3, [r7, #4]
24060d5a:	681b      	ldr	r3, [r3, #0]
24060d5c:	69db      	ldr	r3, [r3, #28]
24060d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
24060d62:	2b00      	cmp	r3, #0
24060d64:	d003      	beq.n	24060d6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
24060d66:	6878      	ldr	r0, [r7, #4]
24060d68:	f000 f98a 	bl	24061080 <HAL_TIM_IC_CaptureCallback>
24060d6c:	e005      	b.n	24060d7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
24060d6e:	6878      	ldr	r0, [r7, #4]
24060d70:	f000 f97c 	bl	2406106c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
24060d74:	6878      	ldr	r0, [r7, #4]
24060d76:	f000 f98d 	bl	24061094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
24060d7a:	687b      	ldr	r3, [r7, #4]
24060d7c:	2200      	movs	r2, #0
24060d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
24060d80:	687b      	ldr	r3, [r7, #4]
24060d82:	681b      	ldr	r3, [r3, #0]
24060d84:	691b      	ldr	r3, [r3, #16]
24060d86:	f003 0301 	and.w	r3, r3, #1
24060d8a:	2b01      	cmp	r3, #1
24060d8c:	d10e      	bne.n	24060dac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
24060d8e:	687b      	ldr	r3, [r7, #4]
24060d90:	681b      	ldr	r3, [r3, #0]
24060d92:	68db      	ldr	r3, [r3, #12]
24060d94:	f003 0301 	and.w	r3, r3, #1
24060d98:	2b01      	cmp	r3, #1
24060d9a:	d107      	bne.n	24060dac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
24060d9c:	687b      	ldr	r3, [r7, #4]
24060d9e:	681b      	ldr	r3, [r3, #0]
24060da0:	f06f 0201 	mvn.w	r2, #1
24060da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
24060da6:	6878      	ldr	r0, [r7, #4]
24060da8:	f000 f956 	bl	24061058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
24060dac:	687b      	ldr	r3, [r7, #4]
24060dae:	681b      	ldr	r3, [r3, #0]
24060db0:	691b      	ldr	r3, [r3, #16]
24060db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
24060db6:	2b80      	cmp	r3, #128	; 0x80
24060db8:	d10e      	bne.n	24060dd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
24060dba:	687b      	ldr	r3, [r7, #4]
24060dbc:	681b      	ldr	r3, [r3, #0]
24060dbe:	68db      	ldr	r3, [r3, #12]
24060dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
24060dc4:	2b80      	cmp	r3, #128	; 0x80
24060dc6:	d107      	bne.n	24060dd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
24060dc8:	687b      	ldr	r3, [r7, #4]
24060dca:	681b      	ldr	r3, [r3, #0]
24060dcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
24060dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
24060dd2:	6878      	ldr	r0, [r7, #4]
24060dd4:	f000 fb42 	bl	2406145c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
24060dd8:	687b      	ldr	r3, [r7, #4]
24060dda:	681b      	ldr	r3, [r3, #0]
24060ddc:	691b      	ldr	r3, [r3, #16]
24060dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
24060de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24060de6:	d10e      	bne.n	24060e06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
24060de8:	687b      	ldr	r3, [r7, #4]
24060dea:	681b      	ldr	r3, [r3, #0]
24060dec:	68db      	ldr	r3, [r3, #12]
24060dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
24060df2:	2b80      	cmp	r3, #128	; 0x80
24060df4:	d107      	bne.n	24060e06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
24060df6:	687b      	ldr	r3, [r7, #4]
24060df8:	681b      	ldr	r3, [r3, #0]
24060dfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
24060dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
24060e00:	6878      	ldr	r0, [r7, #4]
24060e02:	f000 fb35 	bl	24061470 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
24060e06:	687b      	ldr	r3, [r7, #4]
24060e08:	681b      	ldr	r3, [r3, #0]
24060e0a:	691b      	ldr	r3, [r3, #16]
24060e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
24060e10:	2b40      	cmp	r3, #64	; 0x40
24060e12:	d10e      	bne.n	24060e32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
24060e14:	687b      	ldr	r3, [r7, #4]
24060e16:	681b      	ldr	r3, [r3, #0]
24060e18:	68db      	ldr	r3, [r3, #12]
24060e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
24060e1e:	2b40      	cmp	r3, #64	; 0x40
24060e20:	d107      	bne.n	24060e32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
24060e22:	687b      	ldr	r3, [r7, #4]
24060e24:	681b      	ldr	r3, [r3, #0]
24060e26:	f06f 0240 	mvn.w	r2, #64	; 0x40
24060e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
24060e2c:	6878      	ldr	r0, [r7, #4]
24060e2e:	f000 f93b 	bl	240610a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
24060e32:	687b      	ldr	r3, [r7, #4]
24060e34:	681b      	ldr	r3, [r3, #0]
24060e36:	691b      	ldr	r3, [r3, #16]
24060e38:	f003 0320 	and.w	r3, r3, #32
24060e3c:	2b20      	cmp	r3, #32
24060e3e:	d10e      	bne.n	24060e5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
24060e40:	687b      	ldr	r3, [r7, #4]
24060e42:	681b      	ldr	r3, [r3, #0]
24060e44:	68db      	ldr	r3, [r3, #12]
24060e46:	f003 0320 	and.w	r3, r3, #32
24060e4a:	2b20      	cmp	r3, #32
24060e4c:	d107      	bne.n	24060e5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
24060e4e:	687b      	ldr	r3, [r7, #4]
24060e50:	681b      	ldr	r3, [r3, #0]
24060e52:	f06f 0220 	mvn.w	r2, #32
24060e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
24060e58:	6878      	ldr	r0, [r7, #4]
24060e5a:	f000 faf5 	bl	24061448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
24060e5e:	bf00      	nop
24060e60:	3708      	adds	r7, #8
24060e62:	46bd      	mov	sp, r7
24060e64:	bd80      	pop	{r7, pc}
	...

24060e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
24060e68:	b580      	push	{r7, lr}
24060e6a:	b084      	sub	sp, #16
24060e6c:	af00      	add	r7, sp, #0
24060e6e:	6078      	str	r0, [r7, #4]
24060e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24060e72:	2300      	movs	r3, #0
24060e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
24060e76:	687b      	ldr	r3, [r7, #4]
24060e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24060e7c:	2b01      	cmp	r3, #1
24060e7e:	d101      	bne.n	24060e84 <HAL_TIM_ConfigClockSource+0x1c>
24060e80:	2302      	movs	r3, #2
24060e82:	e0dc      	b.n	2406103e <HAL_TIM_ConfigClockSource+0x1d6>
24060e84:	687b      	ldr	r3, [r7, #4]
24060e86:	2201      	movs	r2, #1
24060e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
24060e8c:	687b      	ldr	r3, [r7, #4]
24060e8e:	2202      	movs	r2, #2
24060e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
24060e94:	687b      	ldr	r3, [r7, #4]
24060e96:	681b      	ldr	r3, [r3, #0]
24060e98:	689b      	ldr	r3, [r3, #8]
24060e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
24060e9c:	68ba      	ldr	r2, [r7, #8]
24060e9e:	4b6a      	ldr	r3, [pc, #424]	; (24061048 <HAL_TIM_ConfigClockSource+0x1e0>)
24060ea0:	4013      	ands	r3, r2
24060ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
24060ea4:	68bb      	ldr	r3, [r7, #8]
24060ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
24060eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
24060eac:	687b      	ldr	r3, [r7, #4]
24060eae:	681b      	ldr	r3, [r3, #0]
24060eb0:	68ba      	ldr	r2, [r7, #8]
24060eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
24060eb4:	683b      	ldr	r3, [r7, #0]
24060eb6:	681b      	ldr	r3, [r3, #0]
24060eb8:	4a64      	ldr	r2, [pc, #400]	; (2406104c <HAL_TIM_ConfigClockSource+0x1e4>)
24060eba:	4293      	cmp	r3, r2
24060ebc:	f000 80a9 	beq.w	24061012 <HAL_TIM_ConfigClockSource+0x1aa>
24060ec0:	4a62      	ldr	r2, [pc, #392]	; (2406104c <HAL_TIM_ConfigClockSource+0x1e4>)
24060ec2:	4293      	cmp	r3, r2
24060ec4:	f200 80ae 	bhi.w	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060ec8:	4a61      	ldr	r2, [pc, #388]	; (24061050 <HAL_TIM_ConfigClockSource+0x1e8>)
24060eca:	4293      	cmp	r3, r2
24060ecc:	f000 80a1 	beq.w	24061012 <HAL_TIM_ConfigClockSource+0x1aa>
24060ed0:	4a5f      	ldr	r2, [pc, #380]	; (24061050 <HAL_TIM_ConfigClockSource+0x1e8>)
24060ed2:	4293      	cmp	r3, r2
24060ed4:	f200 80a6 	bhi.w	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060ed8:	4a5e      	ldr	r2, [pc, #376]	; (24061054 <HAL_TIM_ConfigClockSource+0x1ec>)
24060eda:	4293      	cmp	r3, r2
24060edc:	f000 8099 	beq.w	24061012 <HAL_TIM_ConfigClockSource+0x1aa>
24060ee0:	4a5c      	ldr	r2, [pc, #368]	; (24061054 <HAL_TIM_ConfigClockSource+0x1ec>)
24060ee2:	4293      	cmp	r3, r2
24060ee4:	f200 809e 	bhi.w	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060ee8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
24060eec:	f000 8091 	beq.w	24061012 <HAL_TIM_ConfigClockSource+0x1aa>
24060ef0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
24060ef4:	f200 8096 	bhi.w	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24060efc:	f000 8089 	beq.w	24061012 <HAL_TIM_ConfigClockSource+0x1aa>
24060f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24060f04:	f200 808e 	bhi.w	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24060f0c:	d03e      	beq.n	24060f8c <HAL_TIM_ConfigClockSource+0x124>
24060f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24060f12:	f200 8087 	bhi.w	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24060f1a:	f000 8086 	beq.w	2406102a <HAL_TIM_ConfigClockSource+0x1c2>
24060f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24060f22:	d87f      	bhi.n	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060f24:	2b70      	cmp	r3, #112	; 0x70
24060f26:	d01a      	beq.n	24060f5e <HAL_TIM_ConfigClockSource+0xf6>
24060f28:	2b70      	cmp	r3, #112	; 0x70
24060f2a:	d87b      	bhi.n	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060f2c:	2b60      	cmp	r3, #96	; 0x60
24060f2e:	d050      	beq.n	24060fd2 <HAL_TIM_ConfigClockSource+0x16a>
24060f30:	2b60      	cmp	r3, #96	; 0x60
24060f32:	d877      	bhi.n	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060f34:	2b50      	cmp	r3, #80	; 0x50
24060f36:	d03c      	beq.n	24060fb2 <HAL_TIM_ConfigClockSource+0x14a>
24060f38:	2b50      	cmp	r3, #80	; 0x50
24060f3a:	d873      	bhi.n	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060f3c:	2b40      	cmp	r3, #64	; 0x40
24060f3e:	d058      	beq.n	24060ff2 <HAL_TIM_ConfigClockSource+0x18a>
24060f40:	2b40      	cmp	r3, #64	; 0x40
24060f42:	d86f      	bhi.n	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060f44:	2b30      	cmp	r3, #48	; 0x30
24060f46:	d064      	beq.n	24061012 <HAL_TIM_ConfigClockSource+0x1aa>
24060f48:	2b30      	cmp	r3, #48	; 0x30
24060f4a:	d86b      	bhi.n	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060f4c:	2b20      	cmp	r3, #32
24060f4e:	d060      	beq.n	24061012 <HAL_TIM_ConfigClockSource+0x1aa>
24060f50:	2b20      	cmp	r3, #32
24060f52:	d867      	bhi.n	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
24060f54:	2b00      	cmp	r3, #0
24060f56:	d05c      	beq.n	24061012 <HAL_TIM_ConfigClockSource+0x1aa>
24060f58:	2b10      	cmp	r3, #16
24060f5a:	d05a      	beq.n	24061012 <HAL_TIM_ConfigClockSource+0x1aa>
24060f5c:	e062      	b.n	24061024 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
24060f5e:	687b      	ldr	r3, [r7, #4]
24060f60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
24060f62:	683b      	ldr	r3, [r7, #0]
24060f64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
24060f66:	683b      	ldr	r3, [r7, #0]
24060f68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
24060f6a:	683b      	ldr	r3, [r7, #0]
24060f6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
24060f6e:	f000 f9bd 	bl	240612ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
24060f72:	687b      	ldr	r3, [r7, #4]
24060f74:	681b      	ldr	r3, [r3, #0]
24060f76:	689b      	ldr	r3, [r3, #8]
24060f78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
24060f7a:	68bb      	ldr	r3, [r7, #8]
24060f7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
24060f80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
24060f82:	687b      	ldr	r3, [r7, #4]
24060f84:	681b      	ldr	r3, [r3, #0]
24060f86:	68ba      	ldr	r2, [r7, #8]
24060f88:	609a      	str	r2, [r3, #8]
      break;
24060f8a:	e04f      	b.n	2406102c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
24060f8c:	687b      	ldr	r3, [r7, #4]
24060f8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
24060f90:	683b      	ldr	r3, [r7, #0]
24060f92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
24060f94:	683b      	ldr	r3, [r7, #0]
24060f96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
24060f98:	683b      	ldr	r3, [r7, #0]
24060f9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
24060f9c:	f000 f9a6 	bl	240612ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
24060fa0:	687b      	ldr	r3, [r7, #4]
24060fa2:	681b      	ldr	r3, [r3, #0]
24060fa4:	689a      	ldr	r2, [r3, #8]
24060fa6:	687b      	ldr	r3, [r7, #4]
24060fa8:	681b      	ldr	r3, [r3, #0]
24060faa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24060fae:	609a      	str	r2, [r3, #8]
      break;
24060fb0:	e03c      	b.n	2406102c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
24060fb2:	687b      	ldr	r3, [r7, #4]
24060fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
24060fb6:	683b      	ldr	r3, [r7, #0]
24060fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
24060fba:	683b      	ldr	r3, [r7, #0]
24060fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
24060fbe:	461a      	mov	r2, r3
24060fc0:	f000 f916 	bl	240611f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
24060fc4:	687b      	ldr	r3, [r7, #4]
24060fc6:	681b      	ldr	r3, [r3, #0]
24060fc8:	2150      	movs	r1, #80	; 0x50
24060fca:	4618      	mov	r0, r3
24060fcc:	f000 f970 	bl	240612b0 <TIM_ITRx_SetConfig>
      break;
24060fd0:	e02c      	b.n	2406102c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
24060fd2:	687b      	ldr	r3, [r7, #4]
24060fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
24060fd6:	683b      	ldr	r3, [r7, #0]
24060fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
24060fda:	683b      	ldr	r3, [r7, #0]
24060fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
24060fde:	461a      	mov	r2, r3
24060fe0:	f000 f935 	bl	2406124e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
24060fe4:	687b      	ldr	r3, [r7, #4]
24060fe6:	681b      	ldr	r3, [r3, #0]
24060fe8:	2160      	movs	r1, #96	; 0x60
24060fea:	4618      	mov	r0, r3
24060fec:	f000 f960 	bl	240612b0 <TIM_ITRx_SetConfig>
      break;
24060ff0:	e01c      	b.n	2406102c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
24060ff2:	687b      	ldr	r3, [r7, #4]
24060ff4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
24060ff6:	683b      	ldr	r3, [r7, #0]
24060ff8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
24060ffa:	683b      	ldr	r3, [r7, #0]
24060ffc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
24060ffe:	461a      	mov	r2, r3
24061000:	f000 f8f6 	bl	240611f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
24061004:	687b      	ldr	r3, [r7, #4]
24061006:	681b      	ldr	r3, [r3, #0]
24061008:	2140      	movs	r1, #64	; 0x40
2406100a:	4618      	mov	r0, r3
2406100c:	f000 f950 	bl	240612b0 <TIM_ITRx_SetConfig>
      break;
24061010:	e00c      	b.n	2406102c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
24061012:	687b      	ldr	r3, [r7, #4]
24061014:	681a      	ldr	r2, [r3, #0]
24061016:	683b      	ldr	r3, [r7, #0]
24061018:	681b      	ldr	r3, [r3, #0]
2406101a:	4619      	mov	r1, r3
2406101c:	4610      	mov	r0, r2
2406101e:	f000 f947 	bl	240612b0 <TIM_ITRx_SetConfig>
      break;
24061022:	e003      	b.n	2406102c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
24061024:	2301      	movs	r3, #1
24061026:	73fb      	strb	r3, [r7, #15]
      break;
24061028:	e000      	b.n	2406102c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
2406102a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
2406102c:	687b      	ldr	r3, [r7, #4]
2406102e:	2201      	movs	r2, #1
24061030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
24061034:	687b      	ldr	r3, [r7, #4]
24061036:	2200      	movs	r2, #0
24061038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2406103c:	7bfb      	ldrb	r3, [r7, #15]
}
2406103e:	4618      	mov	r0, r3
24061040:	3710      	adds	r7, #16
24061042:	46bd      	mov	sp, r7
24061044:	bd80      	pop	{r7, pc}
24061046:	bf00      	nop
24061048:	ffceff88 	.word	0xffceff88
2406104c:	00100040 	.word	0x00100040
24061050:	00100030 	.word	0x00100030
24061054:	00100020 	.word	0x00100020

24061058 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
24061058:	b480      	push	{r7}
2406105a:	b083      	sub	sp, #12
2406105c:	af00      	add	r7, sp, #0
2406105e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
24061060:	bf00      	nop
24061062:	370c      	adds	r7, #12
24061064:	46bd      	mov	sp, r7
24061066:	f85d 7b04 	ldr.w	r7, [sp], #4
2406106a:	4770      	bx	lr

2406106c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
2406106c:	b480      	push	{r7}
2406106e:	b083      	sub	sp, #12
24061070:	af00      	add	r7, sp, #0
24061072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
24061074:	bf00      	nop
24061076:	370c      	adds	r7, #12
24061078:	46bd      	mov	sp, r7
2406107a:	f85d 7b04 	ldr.w	r7, [sp], #4
2406107e:	4770      	bx	lr

24061080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
24061080:	b480      	push	{r7}
24061082:	b083      	sub	sp, #12
24061084:	af00      	add	r7, sp, #0
24061086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
24061088:	bf00      	nop
2406108a:	370c      	adds	r7, #12
2406108c:	46bd      	mov	sp, r7
2406108e:	f85d 7b04 	ldr.w	r7, [sp], #4
24061092:	4770      	bx	lr

24061094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
24061094:	b480      	push	{r7}
24061096:	b083      	sub	sp, #12
24061098:	af00      	add	r7, sp, #0
2406109a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
2406109c:	bf00      	nop
2406109e:	370c      	adds	r7, #12
240610a0:	46bd      	mov	sp, r7
240610a2:	f85d 7b04 	ldr.w	r7, [sp], #4
240610a6:	4770      	bx	lr

240610a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
240610a8:	b480      	push	{r7}
240610aa:	b083      	sub	sp, #12
240610ac:	af00      	add	r7, sp, #0
240610ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
240610b0:	bf00      	nop
240610b2:	370c      	adds	r7, #12
240610b4:	46bd      	mov	sp, r7
240610b6:	f85d 7b04 	ldr.w	r7, [sp], #4
240610ba:	4770      	bx	lr

240610bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
240610bc:	b480      	push	{r7}
240610be:	b085      	sub	sp, #20
240610c0:	af00      	add	r7, sp, #0
240610c2:	6078      	str	r0, [r7, #4]
240610c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
240610c6:	687b      	ldr	r3, [r7, #4]
240610c8:	681b      	ldr	r3, [r3, #0]
240610ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
240610cc:	687b      	ldr	r3, [r7, #4]
240610ce:	4a40      	ldr	r2, [pc, #256]	; (240611d0 <TIM_Base_SetConfig+0x114>)
240610d0:	4293      	cmp	r3, r2
240610d2:	d013      	beq.n	240610fc <TIM_Base_SetConfig+0x40>
240610d4:	687b      	ldr	r3, [r7, #4]
240610d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240610da:	d00f      	beq.n	240610fc <TIM_Base_SetConfig+0x40>
240610dc:	687b      	ldr	r3, [r7, #4]
240610de:	4a3d      	ldr	r2, [pc, #244]	; (240611d4 <TIM_Base_SetConfig+0x118>)
240610e0:	4293      	cmp	r3, r2
240610e2:	d00b      	beq.n	240610fc <TIM_Base_SetConfig+0x40>
240610e4:	687b      	ldr	r3, [r7, #4]
240610e6:	4a3c      	ldr	r2, [pc, #240]	; (240611d8 <TIM_Base_SetConfig+0x11c>)
240610e8:	4293      	cmp	r3, r2
240610ea:	d007      	beq.n	240610fc <TIM_Base_SetConfig+0x40>
240610ec:	687b      	ldr	r3, [r7, #4]
240610ee:	4a3b      	ldr	r2, [pc, #236]	; (240611dc <TIM_Base_SetConfig+0x120>)
240610f0:	4293      	cmp	r3, r2
240610f2:	d003      	beq.n	240610fc <TIM_Base_SetConfig+0x40>
240610f4:	687b      	ldr	r3, [r7, #4]
240610f6:	4a3a      	ldr	r2, [pc, #232]	; (240611e0 <TIM_Base_SetConfig+0x124>)
240610f8:	4293      	cmp	r3, r2
240610fa:	d108      	bne.n	2406110e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
240610fc:	68fb      	ldr	r3, [r7, #12]
240610fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24061102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
24061104:	683b      	ldr	r3, [r7, #0]
24061106:	685b      	ldr	r3, [r3, #4]
24061108:	68fa      	ldr	r2, [r7, #12]
2406110a:	4313      	orrs	r3, r2
2406110c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
2406110e:	687b      	ldr	r3, [r7, #4]
24061110:	4a2f      	ldr	r2, [pc, #188]	; (240611d0 <TIM_Base_SetConfig+0x114>)
24061112:	4293      	cmp	r3, r2
24061114:	d01f      	beq.n	24061156 <TIM_Base_SetConfig+0x9a>
24061116:	687b      	ldr	r3, [r7, #4]
24061118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2406111c:	d01b      	beq.n	24061156 <TIM_Base_SetConfig+0x9a>
2406111e:	687b      	ldr	r3, [r7, #4]
24061120:	4a2c      	ldr	r2, [pc, #176]	; (240611d4 <TIM_Base_SetConfig+0x118>)
24061122:	4293      	cmp	r3, r2
24061124:	d017      	beq.n	24061156 <TIM_Base_SetConfig+0x9a>
24061126:	687b      	ldr	r3, [r7, #4]
24061128:	4a2b      	ldr	r2, [pc, #172]	; (240611d8 <TIM_Base_SetConfig+0x11c>)
2406112a:	4293      	cmp	r3, r2
2406112c:	d013      	beq.n	24061156 <TIM_Base_SetConfig+0x9a>
2406112e:	687b      	ldr	r3, [r7, #4]
24061130:	4a2a      	ldr	r2, [pc, #168]	; (240611dc <TIM_Base_SetConfig+0x120>)
24061132:	4293      	cmp	r3, r2
24061134:	d00f      	beq.n	24061156 <TIM_Base_SetConfig+0x9a>
24061136:	687b      	ldr	r3, [r7, #4]
24061138:	4a29      	ldr	r2, [pc, #164]	; (240611e0 <TIM_Base_SetConfig+0x124>)
2406113a:	4293      	cmp	r3, r2
2406113c:	d00b      	beq.n	24061156 <TIM_Base_SetConfig+0x9a>
2406113e:	687b      	ldr	r3, [r7, #4]
24061140:	4a28      	ldr	r2, [pc, #160]	; (240611e4 <TIM_Base_SetConfig+0x128>)
24061142:	4293      	cmp	r3, r2
24061144:	d007      	beq.n	24061156 <TIM_Base_SetConfig+0x9a>
24061146:	687b      	ldr	r3, [r7, #4]
24061148:	4a27      	ldr	r2, [pc, #156]	; (240611e8 <TIM_Base_SetConfig+0x12c>)
2406114a:	4293      	cmp	r3, r2
2406114c:	d003      	beq.n	24061156 <TIM_Base_SetConfig+0x9a>
2406114e:	687b      	ldr	r3, [r7, #4]
24061150:	4a26      	ldr	r2, [pc, #152]	; (240611ec <TIM_Base_SetConfig+0x130>)
24061152:	4293      	cmp	r3, r2
24061154:	d108      	bne.n	24061168 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
24061156:	68fb      	ldr	r3, [r7, #12]
24061158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2406115c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
2406115e:	683b      	ldr	r3, [r7, #0]
24061160:	68db      	ldr	r3, [r3, #12]
24061162:	68fa      	ldr	r2, [r7, #12]
24061164:	4313      	orrs	r3, r2
24061166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
24061168:	68fb      	ldr	r3, [r7, #12]
2406116a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
2406116e:	683b      	ldr	r3, [r7, #0]
24061170:	695b      	ldr	r3, [r3, #20]
24061172:	4313      	orrs	r3, r2
24061174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
24061176:	687b      	ldr	r3, [r7, #4]
24061178:	68fa      	ldr	r2, [r7, #12]
2406117a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
2406117c:	683b      	ldr	r3, [r7, #0]
2406117e:	689a      	ldr	r2, [r3, #8]
24061180:	687b      	ldr	r3, [r7, #4]
24061182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
24061184:	683b      	ldr	r3, [r7, #0]
24061186:	681a      	ldr	r2, [r3, #0]
24061188:	687b      	ldr	r3, [r7, #4]
2406118a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
2406118c:	687b      	ldr	r3, [r7, #4]
2406118e:	4a10      	ldr	r2, [pc, #64]	; (240611d0 <TIM_Base_SetConfig+0x114>)
24061190:	4293      	cmp	r3, r2
24061192:	d00f      	beq.n	240611b4 <TIM_Base_SetConfig+0xf8>
24061194:	687b      	ldr	r3, [r7, #4]
24061196:	4a12      	ldr	r2, [pc, #72]	; (240611e0 <TIM_Base_SetConfig+0x124>)
24061198:	4293      	cmp	r3, r2
2406119a:	d00b      	beq.n	240611b4 <TIM_Base_SetConfig+0xf8>
2406119c:	687b      	ldr	r3, [r7, #4]
2406119e:	4a11      	ldr	r2, [pc, #68]	; (240611e4 <TIM_Base_SetConfig+0x128>)
240611a0:	4293      	cmp	r3, r2
240611a2:	d007      	beq.n	240611b4 <TIM_Base_SetConfig+0xf8>
240611a4:	687b      	ldr	r3, [r7, #4]
240611a6:	4a10      	ldr	r2, [pc, #64]	; (240611e8 <TIM_Base_SetConfig+0x12c>)
240611a8:	4293      	cmp	r3, r2
240611aa:	d003      	beq.n	240611b4 <TIM_Base_SetConfig+0xf8>
240611ac:	687b      	ldr	r3, [r7, #4]
240611ae:	4a0f      	ldr	r2, [pc, #60]	; (240611ec <TIM_Base_SetConfig+0x130>)
240611b0:	4293      	cmp	r3, r2
240611b2:	d103      	bne.n	240611bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
240611b4:	683b      	ldr	r3, [r7, #0]
240611b6:	691a      	ldr	r2, [r3, #16]
240611b8:	687b      	ldr	r3, [r7, #4]
240611ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
240611bc:	687b      	ldr	r3, [r7, #4]
240611be:	2201      	movs	r2, #1
240611c0:	615a      	str	r2, [r3, #20]
}
240611c2:	bf00      	nop
240611c4:	3714      	adds	r7, #20
240611c6:	46bd      	mov	sp, r7
240611c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240611cc:	4770      	bx	lr
240611ce:	bf00      	nop
240611d0:	40010000 	.word	0x40010000
240611d4:	40000400 	.word	0x40000400
240611d8:	40000800 	.word	0x40000800
240611dc:	40000c00 	.word	0x40000c00
240611e0:	40010400 	.word	0x40010400
240611e4:	40014000 	.word	0x40014000
240611e8:	40014400 	.word	0x40014400
240611ec:	40014800 	.word	0x40014800

240611f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
240611f0:	b480      	push	{r7}
240611f2:	b087      	sub	sp, #28
240611f4:	af00      	add	r7, sp, #0
240611f6:	60f8      	str	r0, [r7, #12]
240611f8:	60b9      	str	r1, [r7, #8]
240611fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
240611fc:	68fb      	ldr	r3, [r7, #12]
240611fe:	6a1b      	ldr	r3, [r3, #32]
24061200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
24061202:	68fb      	ldr	r3, [r7, #12]
24061204:	6a1b      	ldr	r3, [r3, #32]
24061206:	f023 0201 	bic.w	r2, r3, #1
2406120a:	68fb      	ldr	r3, [r7, #12]
2406120c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
2406120e:	68fb      	ldr	r3, [r7, #12]
24061210:	699b      	ldr	r3, [r3, #24]
24061212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
24061214:	693b      	ldr	r3, [r7, #16]
24061216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
2406121a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
2406121c:	687b      	ldr	r3, [r7, #4]
2406121e:	011b      	lsls	r3, r3, #4
24061220:	693a      	ldr	r2, [r7, #16]
24061222:	4313      	orrs	r3, r2
24061224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
24061226:	697b      	ldr	r3, [r7, #20]
24061228:	f023 030a 	bic.w	r3, r3, #10
2406122c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
2406122e:	697a      	ldr	r2, [r7, #20]
24061230:	68bb      	ldr	r3, [r7, #8]
24061232:	4313      	orrs	r3, r2
24061234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
24061236:	68fb      	ldr	r3, [r7, #12]
24061238:	693a      	ldr	r2, [r7, #16]
2406123a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
2406123c:	68fb      	ldr	r3, [r7, #12]
2406123e:	697a      	ldr	r2, [r7, #20]
24061240:	621a      	str	r2, [r3, #32]
}
24061242:	bf00      	nop
24061244:	371c      	adds	r7, #28
24061246:	46bd      	mov	sp, r7
24061248:	f85d 7b04 	ldr.w	r7, [sp], #4
2406124c:	4770      	bx	lr

2406124e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
2406124e:	b480      	push	{r7}
24061250:	b087      	sub	sp, #28
24061252:	af00      	add	r7, sp, #0
24061254:	60f8      	str	r0, [r7, #12]
24061256:	60b9      	str	r1, [r7, #8]
24061258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
2406125a:	68fb      	ldr	r3, [r7, #12]
2406125c:	6a1b      	ldr	r3, [r3, #32]
2406125e:	f023 0210 	bic.w	r2, r3, #16
24061262:	68fb      	ldr	r3, [r7, #12]
24061264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
24061266:	68fb      	ldr	r3, [r7, #12]
24061268:	699b      	ldr	r3, [r3, #24]
2406126a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
2406126c:	68fb      	ldr	r3, [r7, #12]
2406126e:	6a1b      	ldr	r3, [r3, #32]
24061270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
24061272:	697b      	ldr	r3, [r7, #20]
24061274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
24061278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
2406127a:	687b      	ldr	r3, [r7, #4]
2406127c:	031b      	lsls	r3, r3, #12
2406127e:	697a      	ldr	r2, [r7, #20]
24061280:	4313      	orrs	r3, r2
24061282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
24061284:	693b      	ldr	r3, [r7, #16]
24061286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
2406128a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
2406128c:	68bb      	ldr	r3, [r7, #8]
2406128e:	011b      	lsls	r3, r3, #4
24061290:	693a      	ldr	r2, [r7, #16]
24061292:	4313      	orrs	r3, r2
24061294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
24061296:	68fb      	ldr	r3, [r7, #12]
24061298:	697a      	ldr	r2, [r7, #20]
2406129a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
2406129c:	68fb      	ldr	r3, [r7, #12]
2406129e:	693a      	ldr	r2, [r7, #16]
240612a0:	621a      	str	r2, [r3, #32]
}
240612a2:	bf00      	nop
240612a4:	371c      	adds	r7, #28
240612a6:	46bd      	mov	sp, r7
240612a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240612ac:	4770      	bx	lr
	...

240612b0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
240612b0:	b480      	push	{r7}
240612b2:	b085      	sub	sp, #20
240612b4:	af00      	add	r7, sp, #0
240612b6:	6078      	str	r0, [r7, #4]
240612b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
240612ba:	687b      	ldr	r3, [r7, #4]
240612bc:	689b      	ldr	r3, [r3, #8]
240612be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
240612c0:	68fa      	ldr	r2, [r7, #12]
240612c2:	4b09      	ldr	r3, [pc, #36]	; (240612e8 <TIM_ITRx_SetConfig+0x38>)
240612c4:	4013      	ands	r3, r2
240612c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
240612c8:	683a      	ldr	r2, [r7, #0]
240612ca:	68fb      	ldr	r3, [r7, #12]
240612cc:	4313      	orrs	r3, r2
240612ce:	f043 0307 	orr.w	r3, r3, #7
240612d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
240612d4:	687b      	ldr	r3, [r7, #4]
240612d6:	68fa      	ldr	r2, [r7, #12]
240612d8:	609a      	str	r2, [r3, #8]
}
240612da:	bf00      	nop
240612dc:	3714      	adds	r7, #20
240612de:	46bd      	mov	sp, r7
240612e0:	f85d 7b04 	ldr.w	r7, [sp], #4
240612e4:	4770      	bx	lr
240612e6:	bf00      	nop
240612e8:	ffcfff8f 	.word	0xffcfff8f

240612ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
240612ec:	b480      	push	{r7}
240612ee:	b087      	sub	sp, #28
240612f0:	af00      	add	r7, sp, #0
240612f2:	60f8      	str	r0, [r7, #12]
240612f4:	60b9      	str	r1, [r7, #8]
240612f6:	607a      	str	r2, [r7, #4]
240612f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
240612fa:	68fb      	ldr	r3, [r7, #12]
240612fc:	689b      	ldr	r3, [r3, #8]
240612fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
24061300:	697b      	ldr	r3, [r7, #20]
24061302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
24061306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
24061308:	683b      	ldr	r3, [r7, #0]
2406130a:	021a      	lsls	r2, r3, #8
2406130c:	687b      	ldr	r3, [r7, #4]
2406130e:	431a      	orrs	r2, r3
24061310:	68bb      	ldr	r3, [r7, #8]
24061312:	4313      	orrs	r3, r2
24061314:	697a      	ldr	r2, [r7, #20]
24061316:	4313      	orrs	r3, r2
24061318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
2406131a:	68fb      	ldr	r3, [r7, #12]
2406131c:	697a      	ldr	r2, [r7, #20]
2406131e:	609a      	str	r2, [r3, #8]
}
24061320:	bf00      	nop
24061322:	371c      	adds	r7, #28
24061324:	46bd      	mov	sp, r7
24061326:	f85d 7b04 	ldr.w	r7, [sp], #4
2406132a:	4770      	bx	lr

2406132c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
2406132c:	b480      	push	{r7}
2406132e:	b085      	sub	sp, #20
24061330:	af00      	add	r7, sp, #0
24061332:	6078      	str	r0, [r7, #4]
24061334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
24061336:	687b      	ldr	r3, [r7, #4]
24061338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2406133c:	2b01      	cmp	r3, #1
2406133e:	d101      	bne.n	24061344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
24061340:	2302      	movs	r3, #2
24061342:	e06d      	b.n	24061420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
24061344:	687b      	ldr	r3, [r7, #4]
24061346:	2201      	movs	r2, #1
24061348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
2406134c:	687b      	ldr	r3, [r7, #4]
2406134e:	2202      	movs	r2, #2
24061350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
24061354:	687b      	ldr	r3, [r7, #4]
24061356:	681b      	ldr	r3, [r3, #0]
24061358:	685b      	ldr	r3, [r3, #4]
2406135a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
2406135c:	687b      	ldr	r3, [r7, #4]
2406135e:	681b      	ldr	r3, [r3, #0]
24061360:	689b      	ldr	r3, [r3, #8]
24061362:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
24061364:	687b      	ldr	r3, [r7, #4]
24061366:	681b      	ldr	r3, [r3, #0]
24061368:	4a30      	ldr	r2, [pc, #192]	; (2406142c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
2406136a:	4293      	cmp	r3, r2
2406136c:	d004      	beq.n	24061378 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
2406136e:	687b      	ldr	r3, [r7, #4]
24061370:	681b      	ldr	r3, [r3, #0]
24061372:	4a2f      	ldr	r2, [pc, #188]	; (24061430 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
24061374:	4293      	cmp	r3, r2
24061376:	d108      	bne.n	2406138a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
24061378:	68fb      	ldr	r3, [r7, #12]
2406137a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
2406137e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
24061380:	683b      	ldr	r3, [r7, #0]
24061382:	685b      	ldr	r3, [r3, #4]
24061384:	68fa      	ldr	r2, [r7, #12]
24061386:	4313      	orrs	r3, r2
24061388:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
2406138a:	68fb      	ldr	r3, [r7, #12]
2406138c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24061390:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
24061392:	683b      	ldr	r3, [r7, #0]
24061394:	681b      	ldr	r3, [r3, #0]
24061396:	68fa      	ldr	r2, [r7, #12]
24061398:	4313      	orrs	r3, r2
2406139a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
2406139c:	687b      	ldr	r3, [r7, #4]
2406139e:	681b      	ldr	r3, [r3, #0]
240613a0:	68fa      	ldr	r2, [r7, #12]
240613a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
240613a4:	687b      	ldr	r3, [r7, #4]
240613a6:	681b      	ldr	r3, [r3, #0]
240613a8:	4a20      	ldr	r2, [pc, #128]	; (2406142c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
240613aa:	4293      	cmp	r3, r2
240613ac:	d022      	beq.n	240613f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
240613ae:	687b      	ldr	r3, [r7, #4]
240613b0:	681b      	ldr	r3, [r3, #0]
240613b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240613b6:	d01d      	beq.n	240613f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
240613b8:	687b      	ldr	r3, [r7, #4]
240613ba:	681b      	ldr	r3, [r3, #0]
240613bc:	4a1d      	ldr	r2, [pc, #116]	; (24061434 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
240613be:	4293      	cmp	r3, r2
240613c0:	d018      	beq.n	240613f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
240613c2:	687b      	ldr	r3, [r7, #4]
240613c4:	681b      	ldr	r3, [r3, #0]
240613c6:	4a1c      	ldr	r2, [pc, #112]	; (24061438 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
240613c8:	4293      	cmp	r3, r2
240613ca:	d013      	beq.n	240613f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
240613cc:	687b      	ldr	r3, [r7, #4]
240613ce:	681b      	ldr	r3, [r3, #0]
240613d0:	4a1a      	ldr	r2, [pc, #104]	; (2406143c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
240613d2:	4293      	cmp	r3, r2
240613d4:	d00e      	beq.n	240613f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
240613d6:	687b      	ldr	r3, [r7, #4]
240613d8:	681b      	ldr	r3, [r3, #0]
240613da:	4a15      	ldr	r2, [pc, #84]	; (24061430 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
240613dc:	4293      	cmp	r3, r2
240613de:	d009      	beq.n	240613f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
240613e0:	687b      	ldr	r3, [r7, #4]
240613e2:	681b      	ldr	r3, [r3, #0]
240613e4:	4a16      	ldr	r2, [pc, #88]	; (24061440 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
240613e6:	4293      	cmp	r3, r2
240613e8:	d004      	beq.n	240613f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
240613ea:	687b      	ldr	r3, [r7, #4]
240613ec:	681b      	ldr	r3, [r3, #0]
240613ee:	4a15      	ldr	r2, [pc, #84]	; (24061444 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
240613f0:	4293      	cmp	r3, r2
240613f2:	d10c      	bne.n	2406140e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
240613f4:	68bb      	ldr	r3, [r7, #8]
240613f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
240613fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
240613fc:	683b      	ldr	r3, [r7, #0]
240613fe:	689b      	ldr	r3, [r3, #8]
24061400:	68ba      	ldr	r2, [r7, #8]
24061402:	4313      	orrs	r3, r2
24061404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
24061406:	687b      	ldr	r3, [r7, #4]
24061408:	681b      	ldr	r3, [r3, #0]
2406140a:	68ba      	ldr	r2, [r7, #8]
2406140c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
2406140e:	687b      	ldr	r3, [r7, #4]
24061410:	2201      	movs	r2, #1
24061412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
24061416:	687b      	ldr	r3, [r7, #4]
24061418:	2200      	movs	r2, #0
2406141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
2406141e:	2300      	movs	r3, #0
}
24061420:	4618      	mov	r0, r3
24061422:	3714      	adds	r7, #20
24061424:	46bd      	mov	sp, r7
24061426:	f85d 7b04 	ldr.w	r7, [sp], #4
2406142a:	4770      	bx	lr
2406142c:	40010000 	.word	0x40010000
24061430:	40010400 	.word	0x40010400
24061434:	40000400 	.word	0x40000400
24061438:	40000800 	.word	0x40000800
2406143c:	40000c00 	.word	0x40000c00
24061440:	40001800 	.word	0x40001800
24061444:	40014000 	.word	0x40014000

24061448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
24061448:	b480      	push	{r7}
2406144a:	b083      	sub	sp, #12
2406144c:	af00      	add	r7, sp, #0
2406144e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
24061450:	bf00      	nop
24061452:	370c      	adds	r7, #12
24061454:	46bd      	mov	sp, r7
24061456:	f85d 7b04 	ldr.w	r7, [sp], #4
2406145a:	4770      	bx	lr

2406145c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
2406145c:	b480      	push	{r7}
2406145e:	b083      	sub	sp, #12
24061460:	af00      	add	r7, sp, #0
24061462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
24061464:	bf00      	nop
24061466:	370c      	adds	r7, #12
24061468:	46bd      	mov	sp, r7
2406146a:	f85d 7b04 	ldr.w	r7, [sp], #4
2406146e:	4770      	bx	lr

24061470 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
24061470:	b480      	push	{r7}
24061472:	b083      	sub	sp, #12
24061474:	af00      	add	r7, sp, #0
24061476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
24061478:	bf00      	nop
2406147a:	370c      	adds	r7, #12
2406147c:	46bd      	mov	sp, r7
2406147e:	f85d 7b04 	ldr.w	r7, [sp], #4
24061482:	4770      	bx	lr

24061484 <__assert_func>:
24061484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
24061486:	4614      	mov	r4, r2
24061488:	461a      	mov	r2, r3
2406148a:	4b09      	ldr	r3, [pc, #36]	; (240614b0 <__assert_func+0x2c>)
2406148c:	681b      	ldr	r3, [r3, #0]
2406148e:	4605      	mov	r5, r0
24061490:	68d8      	ldr	r0, [r3, #12]
24061492:	b14c      	cbz	r4, 240614a8 <__assert_func+0x24>
24061494:	4b07      	ldr	r3, [pc, #28]	; (240614b4 <__assert_func+0x30>)
24061496:	9100      	str	r1, [sp, #0]
24061498:	e9cd 3401 	strd	r3, r4, [sp, #4]
2406149c:	4906      	ldr	r1, [pc, #24]	; (240614b8 <__assert_func+0x34>)
2406149e:	462b      	mov	r3, r5
240614a0:	f000 fa02 	bl	240618a8 <fiprintf>
240614a4:	f000 fc2f 	bl	24061d06 <abort>
240614a8:	4b04      	ldr	r3, [pc, #16]	; (240614bc <__assert_func+0x38>)
240614aa:	461c      	mov	r4, r3
240614ac:	e7f3      	b.n	24061496 <__assert_func+0x12>
240614ae:	bf00      	nop
240614b0:	200000ac 	.word	0x200000ac
240614b4:	24064288 	.word	0x24064288
240614b8:	24064295 	.word	0x24064295
240614bc:	240642c3 	.word	0x240642c3

240614c0 <malloc>:
240614c0:	4b02      	ldr	r3, [pc, #8]	; (240614cc <malloc+0xc>)
240614c2:	4601      	mov	r1, r0
240614c4:	6818      	ldr	r0, [r3, #0]
240614c6:	f000 b823 	b.w	24061510 <_malloc_r>
240614ca:	bf00      	nop
240614cc:	200000ac 	.word	0x200000ac

240614d0 <sbrk_aligned>:
240614d0:	b570      	push	{r4, r5, r6, lr}
240614d2:	4e0e      	ldr	r6, [pc, #56]	; (2406150c <sbrk_aligned+0x3c>)
240614d4:	460c      	mov	r4, r1
240614d6:	6831      	ldr	r1, [r6, #0]
240614d8:	4605      	mov	r5, r0
240614da:	b911      	cbnz	r1, 240614e2 <sbrk_aligned+0x12>
240614dc:	f000 fbb6 	bl	24061c4c <_sbrk_r>
240614e0:	6030      	str	r0, [r6, #0]
240614e2:	4621      	mov	r1, r4
240614e4:	4628      	mov	r0, r5
240614e6:	f000 fbb1 	bl	24061c4c <_sbrk_r>
240614ea:	1c43      	adds	r3, r0, #1
240614ec:	d00a      	beq.n	24061504 <sbrk_aligned+0x34>
240614ee:	1cc4      	adds	r4, r0, #3
240614f0:	f024 0403 	bic.w	r4, r4, #3
240614f4:	42a0      	cmp	r0, r4
240614f6:	d007      	beq.n	24061508 <sbrk_aligned+0x38>
240614f8:	1a21      	subs	r1, r4, r0
240614fa:	4628      	mov	r0, r5
240614fc:	f000 fba6 	bl	24061c4c <_sbrk_r>
24061500:	3001      	adds	r0, #1
24061502:	d101      	bne.n	24061508 <sbrk_aligned+0x38>
24061504:	f04f 34ff 	mov.w	r4, #4294967295
24061508:	4620      	mov	r0, r4
2406150a:	bd70      	pop	{r4, r5, r6, pc}
2406150c:	20000628 	.word	0x20000628

24061510 <_malloc_r>:
24061510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24061514:	1ccd      	adds	r5, r1, #3
24061516:	f025 0503 	bic.w	r5, r5, #3
2406151a:	3508      	adds	r5, #8
2406151c:	2d0c      	cmp	r5, #12
2406151e:	bf38      	it	cc
24061520:	250c      	movcc	r5, #12
24061522:	2d00      	cmp	r5, #0
24061524:	4607      	mov	r7, r0
24061526:	db01      	blt.n	2406152c <_malloc_r+0x1c>
24061528:	42a9      	cmp	r1, r5
2406152a:	d905      	bls.n	24061538 <_malloc_r+0x28>
2406152c:	230c      	movs	r3, #12
2406152e:	603b      	str	r3, [r7, #0]
24061530:	2600      	movs	r6, #0
24061532:	4630      	mov	r0, r6
24061534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24061538:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 2406160c <_malloc_r+0xfc>
2406153c:	f000 f868 	bl	24061610 <__malloc_lock>
24061540:	f8d8 3000 	ldr.w	r3, [r8]
24061544:	461c      	mov	r4, r3
24061546:	bb5c      	cbnz	r4, 240615a0 <_malloc_r+0x90>
24061548:	4629      	mov	r1, r5
2406154a:	4638      	mov	r0, r7
2406154c:	f7ff ffc0 	bl	240614d0 <sbrk_aligned>
24061550:	1c43      	adds	r3, r0, #1
24061552:	4604      	mov	r4, r0
24061554:	d155      	bne.n	24061602 <_malloc_r+0xf2>
24061556:	f8d8 4000 	ldr.w	r4, [r8]
2406155a:	4626      	mov	r6, r4
2406155c:	2e00      	cmp	r6, #0
2406155e:	d145      	bne.n	240615ec <_malloc_r+0xdc>
24061560:	2c00      	cmp	r4, #0
24061562:	d048      	beq.n	240615f6 <_malloc_r+0xe6>
24061564:	6823      	ldr	r3, [r4, #0]
24061566:	4631      	mov	r1, r6
24061568:	4638      	mov	r0, r7
2406156a:	eb04 0903 	add.w	r9, r4, r3
2406156e:	f000 fb6d 	bl	24061c4c <_sbrk_r>
24061572:	4581      	cmp	r9, r0
24061574:	d13f      	bne.n	240615f6 <_malloc_r+0xe6>
24061576:	6821      	ldr	r1, [r4, #0]
24061578:	1a6d      	subs	r5, r5, r1
2406157a:	4629      	mov	r1, r5
2406157c:	4638      	mov	r0, r7
2406157e:	f7ff ffa7 	bl	240614d0 <sbrk_aligned>
24061582:	3001      	adds	r0, #1
24061584:	d037      	beq.n	240615f6 <_malloc_r+0xe6>
24061586:	6823      	ldr	r3, [r4, #0]
24061588:	442b      	add	r3, r5
2406158a:	6023      	str	r3, [r4, #0]
2406158c:	f8d8 3000 	ldr.w	r3, [r8]
24061590:	2b00      	cmp	r3, #0
24061592:	d038      	beq.n	24061606 <_malloc_r+0xf6>
24061594:	685a      	ldr	r2, [r3, #4]
24061596:	42a2      	cmp	r2, r4
24061598:	d12b      	bne.n	240615f2 <_malloc_r+0xe2>
2406159a:	2200      	movs	r2, #0
2406159c:	605a      	str	r2, [r3, #4]
2406159e:	e00f      	b.n	240615c0 <_malloc_r+0xb0>
240615a0:	6822      	ldr	r2, [r4, #0]
240615a2:	1b52      	subs	r2, r2, r5
240615a4:	d41f      	bmi.n	240615e6 <_malloc_r+0xd6>
240615a6:	2a0b      	cmp	r2, #11
240615a8:	d917      	bls.n	240615da <_malloc_r+0xca>
240615aa:	1961      	adds	r1, r4, r5
240615ac:	42a3      	cmp	r3, r4
240615ae:	6025      	str	r5, [r4, #0]
240615b0:	bf18      	it	ne
240615b2:	6059      	strne	r1, [r3, #4]
240615b4:	6863      	ldr	r3, [r4, #4]
240615b6:	bf08      	it	eq
240615b8:	f8c8 1000 	streq.w	r1, [r8]
240615bc:	5162      	str	r2, [r4, r5]
240615be:	604b      	str	r3, [r1, #4]
240615c0:	4638      	mov	r0, r7
240615c2:	f104 060b 	add.w	r6, r4, #11
240615c6:	f000 f829 	bl	2406161c <__malloc_unlock>
240615ca:	f026 0607 	bic.w	r6, r6, #7
240615ce:	1d23      	adds	r3, r4, #4
240615d0:	1af2      	subs	r2, r6, r3
240615d2:	d0ae      	beq.n	24061532 <_malloc_r+0x22>
240615d4:	1b9b      	subs	r3, r3, r6
240615d6:	50a3      	str	r3, [r4, r2]
240615d8:	e7ab      	b.n	24061532 <_malloc_r+0x22>
240615da:	42a3      	cmp	r3, r4
240615dc:	6862      	ldr	r2, [r4, #4]
240615de:	d1dd      	bne.n	2406159c <_malloc_r+0x8c>
240615e0:	f8c8 2000 	str.w	r2, [r8]
240615e4:	e7ec      	b.n	240615c0 <_malloc_r+0xb0>
240615e6:	4623      	mov	r3, r4
240615e8:	6864      	ldr	r4, [r4, #4]
240615ea:	e7ac      	b.n	24061546 <_malloc_r+0x36>
240615ec:	4634      	mov	r4, r6
240615ee:	6876      	ldr	r6, [r6, #4]
240615f0:	e7b4      	b.n	2406155c <_malloc_r+0x4c>
240615f2:	4613      	mov	r3, r2
240615f4:	e7cc      	b.n	24061590 <_malloc_r+0x80>
240615f6:	230c      	movs	r3, #12
240615f8:	603b      	str	r3, [r7, #0]
240615fa:	4638      	mov	r0, r7
240615fc:	f000 f80e 	bl	2406161c <__malloc_unlock>
24061600:	e797      	b.n	24061532 <_malloc_r+0x22>
24061602:	6025      	str	r5, [r4, #0]
24061604:	e7dc      	b.n	240615c0 <_malloc_r+0xb0>
24061606:	605b      	str	r3, [r3, #4]
24061608:	deff      	udf	#255	; 0xff
2406160a:	bf00      	nop
2406160c:	20000624 	.word	0x20000624

24061610 <__malloc_lock>:
24061610:	4801      	ldr	r0, [pc, #4]	; (24061618 <__malloc_lock+0x8>)
24061612:	f000 bb68 	b.w	24061ce6 <__retarget_lock_acquire_recursive>
24061616:	bf00      	nop
24061618:	2000076c 	.word	0x2000076c

2406161c <__malloc_unlock>:
2406161c:	4801      	ldr	r0, [pc, #4]	; (24061624 <__malloc_unlock+0x8>)
2406161e:	f000 bb63 	b.w	24061ce8 <__retarget_lock_release_recursive>
24061622:	bf00      	nop
24061624:	2000076c 	.word	0x2000076c

24061628 <srand>:
24061628:	b538      	push	{r3, r4, r5, lr}
2406162a:	4b10      	ldr	r3, [pc, #64]	; (2406166c <srand+0x44>)
2406162c:	681d      	ldr	r5, [r3, #0]
2406162e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
24061630:	4604      	mov	r4, r0
24061632:	b9b3      	cbnz	r3, 24061662 <srand+0x3a>
24061634:	2018      	movs	r0, #24
24061636:	f7ff ff43 	bl	240614c0 <malloc>
2406163a:	4602      	mov	r2, r0
2406163c:	6328      	str	r0, [r5, #48]	; 0x30
2406163e:	b920      	cbnz	r0, 2406164a <srand+0x22>
24061640:	4b0b      	ldr	r3, [pc, #44]	; (24061670 <srand+0x48>)
24061642:	480c      	ldr	r0, [pc, #48]	; (24061674 <srand+0x4c>)
24061644:	2146      	movs	r1, #70	; 0x46
24061646:	f7ff ff1d 	bl	24061484 <__assert_func>
2406164a:	490b      	ldr	r1, [pc, #44]	; (24061678 <srand+0x50>)
2406164c:	4b0b      	ldr	r3, [pc, #44]	; (2406167c <srand+0x54>)
2406164e:	e9c0 1300 	strd	r1, r3, [r0]
24061652:	4b0b      	ldr	r3, [pc, #44]	; (24061680 <srand+0x58>)
24061654:	6083      	str	r3, [r0, #8]
24061656:	230b      	movs	r3, #11
24061658:	8183      	strh	r3, [r0, #12]
2406165a:	2100      	movs	r1, #0
2406165c:	2001      	movs	r0, #1
2406165e:	e9c2 0104 	strd	r0, r1, [r2, #16]
24061662:	6b2b      	ldr	r3, [r5, #48]	; 0x30
24061664:	2200      	movs	r2, #0
24061666:	611c      	str	r4, [r3, #16]
24061668:	615a      	str	r2, [r3, #20]
2406166a:	bd38      	pop	{r3, r4, r5, pc}
2406166c:	200000ac 	.word	0x200000ac
24061670:	240642c4 	.word	0x240642c4
24061674:	240642db 	.word	0x240642db
24061678:	abcd330e 	.word	0xabcd330e
2406167c:	e66d1234 	.word	0xe66d1234
24061680:	0005deec 	.word	0x0005deec

24061684 <rand>:
24061684:	4b16      	ldr	r3, [pc, #88]	; (240616e0 <rand+0x5c>)
24061686:	b510      	push	{r4, lr}
24061688:	681c      	ldr	r4, [r3, #0]
2406168a:	6b23      	ldr	r3, [r4, #48]	; 0x30
2406168c:	b9b3      	cbnz	r3, 240616bc <rand+0x38>
2406168e:	2018      	movs	r0, #24
24061690:	f7ff ff16 	bl	240614c0 <malloc>
24061694:	4602      	mov	r2, r0
24061696:	6320      	str	r0, [r4, #48]	; 0x30
24061698:	b920      	cbnz	r0, 240616a4 <rand+0x20>
2406169a:	4b12      	ldr	r3, [pc, #72]	; (240616e4 <rand+0x60>)
2406169c:	4812      	ldr	r0, [pc, #72]	; (240616e8 <rand+0x64>)
2406169e:	2152      	movs	r1, #82	; 0x52
240616a0:	f7ff fef0 	bl	24061484 <__assert_func>
240616a4:	4911      	ldr	r1, [pc, #68]	; (240616ec <rand+0x68>)
240616a6:	4b12      	ldr	r3, [pc, #72]	; (240616f0 <rand+0x6c>)
240616a8:	e9c0 1300 	strd	r1, r3, [r0]
240616ac:	4b11      	ldr	r3, [pc, #68]	; (240616f4 <rand+0x70>)
240616ae:	6083      	str	r3, [r0, #8]
240616b0:	230b      	movs	r3, #11
240616b2:	8183      	strh	r3, [r0, #12]
240616b4:	2100      	movs	r1, #0
240616b6:	2001      	movs	r0, #1
240616b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
240616bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
240616be:	480e      	ldr	r0, [pc, #56]	; (240616f8 <rand+0x74>)
240616c0:	690b      	ldr	r3, [r1, #16]
240616c2:	694c      	ldr	r4, [r1, #20]
240616c4:	4a0d      	ldr	r2, [pc, #52]	; (240616fc <rand+0x78>)
240616c6:	4358      	muls	r0, r3
240616c8:	fb02 0004 	mla	r0, r2, r4, r0
240616cc:	fba3 3202 	umull	r3, r2, r3, r2
240616d0:	3301      	adds	r3, #1
240616d2:	eb40 0002 	adc.w	r0, r0, r2
240616d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
240616da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
240616de:	bd10      	pop	{r4, pc}
240616e0:	200000ac 	.word	0x200000ac
240616e4:	240642c4 	.word	0x240642c4
240616e8:	240642db 	.word	0x240642db
240616ec:	abcd330e 	.word	0xabcd330e
240616f0:	e66d1234 	.word	0xe66d1234
240616f4:	0005deec 	.word	0x0005deec
240616f8:	5851f42d 	.word	0x5851f42d
240616fc:	4c957f2d 	.word	0x4c957f2d

24061700 <_realloc_r>:
24061700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24061704:	4680      	mov	r8, r0
24061706:	4614      	mov	r4, r2
24061708:	460e      	mov	r6, r1
2406170a:	b921      	cbnz	r1, 24061716 <_realloc_r+0x16>
2406170c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
24061710:	4611      	mov	r1, r2
24061712:	f7ff befd 	b.w	24061510 <_malloc_r>
24061716:	b92a      	cbnz	r2, 24061724 <_realloc_r+0x24>
24061718:	f000 fafc 	bl	24061d14 <_free_r>
2406171c:	4625      	mov	r5, r4
2406171e:	4628      	mov	r0, r5
24061720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24061724:	f000 fb42 	bl	24061dac <_malloc_usable_size_r>
24061728:	4284      	cmp	r4, r0
2406172a:	4607      	mov	r7, r0
2406172c:	d802      	bhi.n	24061734 <_realloc_r+0x34>
2406172e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
24061732:	d812      	bhi.n	2406175a <_realloc_r+0x5a>
24061734:	4621      	mov	r1, r4
24061736:	4640      	mov	r0, r8
24061738:	f7ff feea 	bl	24061510 <_malloc_r>
2406173c:	4605      	mov	r5, r0
2406173e:	2800      	cmp	r0, #0
24061740:	d0ed      	beq.n	2406171e <_realloc_r+0x1e>
24061742:	42bc      	cmp	r4, r7
24061744:	4622      	mov	r2, r4
24061746:	4631      	mov	r1, r6
24061748:	bf28      	it	cs
2406174a:	463a      	movcs	r2, r7
2406174c:	f000 facd 	bl	24061cea <memcpy>
24061750:	4631      	mov	r1, r6
24061752:	4640      	mov	r0, r8
24061754:	f000 fade 	bl	24061d14 <_free_r>
24061758:	e7e1      	b.n	2406171e <_realloc_r+0x1e>
2406175a:	4635      	mov	r5, r6
2406175c:	e7df      	b.n	2406171e <_realloc_r+0x1e>
	...

24061760 <std>:
24061760:	2300      	movs	r3, #0
24061762:	b510      	push	{r4, lr}
24061764:	4604      	mov	r4, r0
24061766:	e9c0 3300 	strd	r3, r3, [r0]
2406176a:	e9c0 3304 	strd	r3, r3, [r0, #16]
2406176e:	6083      	str	r3, [r0, #8]
24061770:	8181      	strh	r1, [r0, #12]
24061772:	6643      	str	r3, [r0, #100]	; 0x64
24061774:	81c2      	strh	r2, [r0, #14]
24061776:	6183      	str	r3, [r0, #24]
24061778:	4619      	mov	r1, r3
2406177a:	2208      	movs	r2, #8
2406177c:	305c      	adds	r0, #92	; 0x5c
2406177e:	f000 fa29 	bl	24061bd4 <memset>
24061782:	4b0d      	ldr	r3, [pc, #52]	; (240617b8 <std+0x58>)
24061784:	6263      	str	r3, [r4, #36]	; 0x24
24061786:	4b0d      	ldr	r3, [pc, #52]	; (240617bc <std+0x5c>)
24061788:	62a3      	str	r3, [r4, #40]	; 0x28
2406178a:	4b0d      	ldr	r3, [pc, #52]	; (240617c0 <std+0x60>)
2406178c:	62e3      	str	r3, [r4, #44]	; 0x2c
2406178e:	4b0d      	ldr	r3, [pc, #52]	; (240617c4 <std+0x64>)
24061790:	6323      	str	r3, [r4, #48]	; 0x30
24061792:	4b0d      	ldr	r3, [pc, #52]	; (240617c8 <std+0x68>)
24061794:	6224      	str	r4, [r4, #32]
24061796:	429c      	cmp	r4, r3
24061798:	d006      	beq.n	240617a8 <std+0x48>
2406179a:	f103 0268 	add.w	r2, r3, #104	; 0x68
2406179e:	4294      	cmp	r4, r2
240617a0:	d002      	beq.n	240617a8 <std+0x48>
240617a2:	33d0      	adds	r3, #208	; 0xd0
240617a4:	429c      	cmp	r4, r3
240617a6:	d105      	bne.n	240617b4 <std+0x54>
240617a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
240617ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
240617b0:	f000 ba98 	b.w	24061ce4 <__retarget_lock_init_recursive>
240617b4:	bd10      	pop	{r4, pc}
240617b6:	bf00      	nop
240617b8:	24061a25 	.word	0x24061a25
240617bc:	24061a47 	.word	0x24061a47
240617c0:	24061a7f 	.word	0x24061a7f
240617c4:	24061aa3 	.word	0x24061aa3
240617c8:	2000062c 	.word	0x2000062c

240617cc <stdio_exit_handler>:
240617cc:	4a02      	ldr	r2, [pc, #8]	; (240617d8 <stdio_exit_handler+0xc>)
240617ce:	4903      	ldr	r1, [pc, #12]	; (240617dc <stdio_exit_handler+0x10>)
240617d0:	4803      	ldr	r0, [pc, #12]	; (240617e0 <stdio_exit_handler+0x14>)
240617d2:	f000 b87b 	b.w	240618cc <_fwalk_sglue>
240617d6:	bf00      	nop
240617d8:	20000054 	.word	0x20000054
240617dc:	24062721 	.word	0x24062721
240617e0:	20000060 	.word	0x20000060

240617e4 <cleanup_stdio>:
240617e4:	6841      	ldr	r1, [r0, #4]
240617e6:	4b0c      	ldr	r3, [pc, #48]	; (24061818 <cleanup_stdio+0x34>)
240617e8:	4299      	cmp	r1, r3
240617ea:	b510      	push	{r4, lr}
240617ec:	4604      	mov	r4, r0
240617ee:	d001      	beq.n	240617f4 <cleanup_stdio+0x10>
240617f0:	f000 ff96 	bl	24062720 <_fflush_r>
240617f4:	68a1      	ldr	r1, [r4, #8]
240617f6:	4b09      	ldr	r3, [pc, #36]	; (2406181c <cleanup_stdio+0x38>)
240617f8:	4299      	cmp	r1, r3
240617fa:	d002      	beq.n	24061802 <cleanup_stdio+0x1e>
240617fc:	4620      	mov	r0, r4
240617fe:	f000 ff8f 	bl	24062720 <_fflush_r>
24061802:	68e1      	ldr	r1, [r4, #12]
24061804:	4b06      	ldr	r3, [pc, #24]	; (24061820 <cleanup_stdio+0x3c>)
24061806:	4299      	cmp	r1, r3
24061808:	d004      	beq.n	24061814 <cleanup_stdio+0x30>
2406180a:	4620      	mov	r0, r4
2406180c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
24061810:	f000 bf86 	b.w	24062720 <_fflush_r>
24061814:	bd10      	pop	{r4, pc}
24061816:	bf00      	nop
24061818:	2000062c 	.word	0x2000062c
2406181c:	20000694 	.word	0x20000694
24061820:	200006fc 	.word	0x200006fc

24061824 <global_stdio_init.part.0>:
24061824:	b510      	push	{r4, lr}
24061826:	4b0b      	ldr	r3, [pc, #44]	; (24061854 <global_stdio_init.part.0+0x30>)
24061828:	4c0b      	ldr	r4, [pc, #44]	; (24061858 <global_stdio_init.part.0+0x34>)
2406182a:	4a0c      	ldr	r2, [pc, #48]	; (2406185c <global_stdio_init.part.0+0x38>)
2406182c:	601a      	str	r2, [r3, #0]
2406182e:	4620      	mov	r0, r4
24061830:	2200      	movs	r2, #0
24061832:	2104      	movs	r1, #4
24061834:	f7ff ff94 	bl	24061760 <std>
24061838:	f104 0068 	add.w	r0, r4, #104	; 0x68
2406183c:	2201      	movs	r2, #1
2406183e:	2109      	movs	r1, #9
24061840:	f7ff ff8e 	bl	24061760 <std>
24061844:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
24061848:	2202      	movs	r2, #2
2406184a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2406184e:	2112      	movs	r1, #18
24061850:	f7ff bf86 	b.w	24061760 <std>
24061854:	20000764 	.word	0x20000764
24061858:	2000062c 	.word	0x2000062c
2406185c:	240617cd 	.word	0x240617cd

24061860 <__sfp_lock_acquire>:
24061860:	4801      	ldr	r0, [pc, #4]	; (24061868 <__sfp_lock_acquire+0x8>)
24061862:	f000 ba40 	b.w	24061ce6 <__retarget_lock_acquire_recursive>
24061866:	bf00      	nop
24061868:	2000076d 	.word	0x2000076d

2406186c <__sfp_lock_release>:
2406186c:	4801      	ldr	r0, [pc, #4]	; (24061874 <__sfp_lock_release+0x8>)
2406186e:	f000 ba3b 	b.w	24061ce8 <__retarget_lock_release_recursive>
24061872:	bf00      	nop
24061874:	2000076d 	.word	0x2000076d

24061878 <__sinit>:
24061878:	b510      	push	{r4, lr}
2406187a:	4604      	mov	r4, r0
2406187c:	f7ff fff0 	bl	24061860 <__sfp_lock_acquire>
24061880:	6a23      	ldr	r3, [r4, #32]
24061882:	b11b      	cbz	r3, 2406188c <__sinit+0x14>
24061884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
24061888:	f7ff bff0 	b.w	2406186c <__sfp_lock_release>
2406188c:	4b04      	ldr	r3, [pc, #16]	; (240618a0 <__sinit+0x28>)
2406188e:	6223      	str	r3, [r4, #32]
24061890:	4b04      	ldr	r3, [pc, #16]	; (240618a4 <__sinit+0x2c>)
24061892:	681b      	ldr	r3, [r3, #0]
24061894:	2b00      	cmp	r3, #0
24061896:	d1f5      	bne.n	24061884 <__sinit+0xc>
24061898:	f7ff ffc4 	bl	24061824 <global_stdio_init.part.0>
2406189c:	e7f2      	b.n	24061884 <__sinit+0xc>
2406189e:	bf00      	nop
240618a0:	240617e5 	.word	0x240617e5
240618a4:	20000764 	.word	0x20000764

240618a8 <fiprintf>:
240618a8:	b40e      	push	{r1, r2, r3}
240618aa:	b503      	push	{r0, r1, lr}
240618ac:	4601      	mov	r1, r0
240618ae:	ab03      	add	r3, sp, #12
240618b0:	4805      	ldr	r0, [pc, #20]	; (240618c8 <fiprintf+0x20>)
240618b2:	f853 2b04 	ldr.w	r2, [r3], #4
240618b6:	6800      	ldr	r0, [r0, #0]
240618b8:	9301      	str	r3, [sp, #4]
240618ba:	f000 fc01 	bl	240620c0 <_vfiprintf_r>
240618be:	b002      	add	sp, #8
240618c0:	f85d eb04 	ldr.w	lr, [sp], #4
240618c4:	b003      	add	sp, #12
240618c6:	4770      	bx	lr
240618c8:	200000ac 	.word	0x200000ac

240618cc <_fwalk_sglue>:
240618cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
240618d0:	4607      	mov	r7, r0
240618d2:	4688      	mov	r8, r1
240618d4:	4614      	mov	r4, r2
240618d6:	2600      	movs	r6, #0
240618d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
240618dc:	f1b9 0901 	subs.w	r9, r9, #1
240618e0:	d505      	bpl.n	240618ee <_fwalk_sglue+0x22>
240618e2:	6824      	ldr	r4, [r4, #0]
240618e4:	2c00      	cmp	r4, #0
240618e6:	d1f7      	bne.n	240618d8 <_fwalk_sglue+0xc>
240618e8:	4630      	mov	r0, r6
240618ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
240618ee:	89ab      	ldrh	r3, [r5, #12]
240618f0:	2b01      	cmp	r3, #1
240618f2:	d907      	bls.n	24061904 <_fwalk_sglue+0x38>
240618f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
240618f8:	3301      	adds	r3, #1
240618fa:	d003      	beq.n	24061904 <_fwalk_sglue+0x38>
240618fc:	4629      	mov	r1, r5
240618fe:	4638      	mov	r0, r7
24061900:	47c0      	blx	r8
24061902:	4306      	orrs	r6, r0
24061904:	3568      	adds	r5, #104	; 0x68
24061906:	e7e9      	b.n	240618dc <_fwalk_sglue+0x10>

24061908 <iprintf>:
24061908:	b40f      	push	{r0, r1, r2, r3}
2406190a:	b507      	push	{r0, r1, r2, lr}
2406190c:	4906      	ldr	r1, [pc, #24]	; (24061928 <iprintf+0x20>)
2406190e:	ab04      	add	r3, sp, #16
24061910:	6808      	ldr	r0, [r1, #0]
24061912:	f853 2b04 	ldr.w	r2, [r3], #4
24061916:	6881      	ldr	r1, [r0, #8]
24061918:	9301      	str	r3, [sp, #4]
2406191a:	f000 fbd1 	bl	240620c0 <_vfiprintf_r>
2406191e:	b003      	add	sp, #12
24061920:	f85d eb04 	ldr.w	lr, [sp], #4
24061924:	b004      	add	sp, #16
24061926:	4770      	bx	lr
24061928:	200000ac 	.word	0x200000ac

2406192c <_puts_r>:
2406192c:	6a03      	ldr	r3, [r0, #32]
2406192e:	b570      	push	{r4, r5, r6, lr}
24061930:	6884      	ldr	r4, [r0, #8]
24061932:	4605      	mov	r5, r0
24061934:	460e      	mov	r6, r1
24061936:	b90b      	cbnz	r3, 2406193c <_puts_r+0x10>
24061938:	f7ff ff9e 	bl	24061878 <__sinit>
2406193c:	6e63      	ldr	r3, [r4, #100]	; 0x64
2406193e:	07db      	lsls	r3, r3, #31
24061940:	d405      	bmi.n	2406194e <_puts_r+0x22>
24061942:	89a3      	ldrh	r3, [r4, #12]
24061944:	0598      	lsls	r0, r3, #22
24061946:	d402      	bmi.n	2406194e <_puts_r+0x22>
24061948:	6da0      	ldr	r0, [r4, #88]	; 0x58
2406194a:	f000 f9cc 	bl	24061ce6 <__retarget_lock_acquire_recursive>
2406194e:	89a3      	ldrh	r3, [r4, #12]
24061950:	0719      	lsls	r1, r3, #28
24061952:	d513      	bpl.n	2406197c <_puts_r+0x50>
24061954:	6923      	ldr	r3, [r4, #16]
24061956:	b18b      	cbz	r3, 2406197c <_puts_r+0x50>
24061958:	3e01      	subs	r6, #1
2406195a:	68a3      	ldr	r3, [r4, #8]
2406195c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
24061960:	3b01      	subs	r3, #1
24061962:	60a3      	str	r3, [r4, #8]
24061964:	b9e9      	cbnz	r1, 240619a2 <_puts_r+0x76>
24061966:	2b00      	cmp	r3, #0
24061968:	da2e      	bge.n	240619c8 <_puts_r+0x9c>
2406196a:	4622      	mov	r2, r4
2406196c:	210a      	movs	r1, #10
2406196e:	4628      	mov	r0, r5
24061970:	f000 f89b 	bl	24061aaa <__swbuf_r>
24061974:	3001      	adds	r0, #1
24061976:	d007      	beq.n	24061988 <_puts_r+0x5c>
24061978:	250a      	movs	r5, #10
2406197a:	e007      	b.n	2406198c <_puts_r+0x60>
2406197c:	4621      	mov	r1, r4
2406197e:	4628      	mov	r0, r5
24061980:	f000 f8d0 	bl	24061b24 <__swsetup_r>
24061984:	2800      	cmp	r0, #0
24061986:	d0e7      	beq.n	24061958 <_puts_r+0x2c>
24061988:	f04f 35ff 	mov.w	r5, #4294967295
2406198c:	6e63      	ldr	r3, [r4, #100]	; 0x64
2406198e:	07da      	lsls	r2, r3, #31
24061990:	d405      	bmi.n	2406199e <_puts_r+0x72>
24061992:	89a3      	ldrh	r3, [r4, #12]
24061994:	059b      	lsls	r3, r3, #22
24061996:	d402      	bmi.n	2406199e <_puts_r+0x72>
24061998:	6da0      	ldr	r0, [r4, #88]	; 0x58
2406199a:	f000 f9a5 	bl	24061ce8 <__retarget_lock_release_recursive>
2406199e:	4628      	mov	r0, r5
240619a0:	bd70      	pop	{r4, r5, r6, pc}
240619a2:	2b00      	cmp	r3, #0
240619a4:	da04      	bge.n	240619b0 <_puts_r+0x84>
240619a6:	69a2      	ldr	r2, [r4, #24]
240619a8:	429a      	cmp	r2, r3
240619aa:	dc06      	bgt.n	240619ba <_puts_r+0x8e>
240619ac:	290a      	cmp	r1, #10
240619ae:	d004      	beq.n	240619ba <_puts_r+0x8e>
240619b0:	6823      	ldr	r3, [r4, #0]
240619b2:	1c5a      	adds	r2, r3, #1
240619b4:	6022      	str	r2, [r4, #0]
240619b6:	7019      	strb	r1, [r3, #0]
240619b8:	e7cf      	b.n	2406195a <_puts_r+0x2e>
240619ba:	4622      	mov	r2, r4
240619bc:	4628      	mov	r0, r5
240619be:	f000 f874 	bl	24061aaa <__swbuf_r>
240619c2:	3001      	adds	r0, #1
240619c4:	d1c9      	bne.n	2406195a <_puts_r+0x2e>
240619c6:	e7df      	b.n	24061988 <_puts_r+0x5c>
240619c8:	6823      	ldr	r3, [r4, #0]
240619ca:	250a      	movs	r5, #10
240619cc:	1c5a      	adds	r2, r3, #1
240619ce:	6022      	str	r2, [r4, #0]
240619d0:	701d      	strb	r5, [r3, #0]
240619d2:	e7db      	b.n	2406198c <_puts_r+0x60>

240619d4 <puts>:
240619d4:	4b02      	ldr	r3, [pc, #8]	; (240619e0 <puts+0xc>)
240619d6:	4601      	mov	r1, r0
240619d8:	6818      	ldr	r0, [r3, #0]
240619da:	f7ff bfa7 	b.w	2406192c <_puts_r>
240619de:	bf00      	nop
240619e0:	200000ac 	.word	0x200000ac

240619e4 <siprintf>:
240619e4:	b40e      	push	{r1, r2, r3}
240619e6:	b500      	push	{lr}
240619e8:	b09c      	sub	sp, #112	; 0x70
240619ea:	ab1d      	add	r3, sp, #116	; 0x74
240619ec:	9002      	str	r0, [sp, #8]
240619ee:	9006      	str	r0, [sp, #24]
240619f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
240619f4:	4809      	ldr	r0, [pc, #36]	; (24061a1c <siprintf+0x38>)
240619f6:	9107      	str	r1, [sp, #28]
240619f8:	9104      	str	r1, [sp, #16]
240619fa:	4909      	ldr	r1, [pc, #36]	; (24061a20 <siprintf+0x3c>)
240619fc:	f853 2b04 	ldr.w	r2, [r3], #4
24061a00:	9105      	str	r1, [sp, #20]
24061a02:	6800      	ldr	r0, [r0, #0]
24061a04:	9301      	str	r3, [sp, #4]
24061a06:	a902      	add	r1, sp, #8
24061a08:	f000 fa32 	bl	24061e70 <_svfiprintf_r>
24061a0c:	9b02      	ldr	r3, [sp, #8]
24061a0e:	2200      	movs	r2, #0
24061a10:	701a      	strb	r2, [r3, #0]
24061a12:	b01c      	add	sp, #112	; 0x70
24061a14:	f85d eb04 	ldr.w	lr, [sp], #4
24061a18:	b003      	add	sp, #12
24061a1a:	4770      	bx	lr
24061a1c:	200000ac 	.word	0x200000ac
24061a20:	ffff0208 	.word	0xffff0208

24061a24 <__sread>:
24061a24:	b510      	push	{r4, lr}
24061a26:	460c      	mov	r4, r1
24061a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
24061a2c:	f000 f8fc 	bl	24061c28 <_read_r>
24061a30:	2800      	cmp	r0, #0
24061a32:	bfab      	itete	ge
24061a34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
24061a36:	89a3      	ldrhlt	r3, [r4, #12]
24061a38:	181b      	addge	r3, r3, r0
24061a3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
24061a3e:	bfac      	ite	ge
24061a40:	6563      	strge	r3, [r4, #84]	; 0x54
24061a42:	81a3      	strhlt	r3, [r4, #12]
24061a44:	bd10      	pop	{r4, pc}

24061a46 <__swrite>:
24061a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24061a4a:	461f      	mov	r7, r3
24061a4c:	898b      	ldrh	r3, [r1, #12]
24061a4e:	05db      	lsls	r3, r3, #23
24061a50:	4605      	mov	r5, r0
24061a52:	460c      	mov	r4, r1
24061a54:	4616      	mov	r6, r2
24061a56:	d505      	bpl.n	24061a64 <__swrite+0x1e>
24061a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
24061a5c:	2302      	movs	r3, #2
24061a5e:	2200      	movs	r2, #0
24061a60:	f000 f8d0 	bl	24061c04 <_lseek_r>
24061a64:	89a3      	ldrh	r3, [r4, #12]
24061a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
24061a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
24061a6e:	81a3      	strh	r3, [r4, #12]
24061a70:	4632      	mov	r2, r6
24061a72:	463b      	mov	r3, r7
24061a74:	4628      	mov	r0, r5
24061a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
24061a7a:	f000 b8f7 	b.w	24061c6c <_write_r>

24061a7e <__sseek>:
24061a7e:	b510      	push	{r4, lr}
24061a80:	460c      	mov	r4, r1
24061a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
24061a86:	f000 f8bd 	bl	24061c04 <_lseek_r>
24061a8a:	1c43      	adds	r3, r0, #1
24061a8c:	89a3      	ldrh	r3, [r4, #12]
24061a8e:	bf15      	itete	ne
24061a90:	6560      	strne	r0, [r4, #84]	; 0x54
24061a92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
24061a96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
24061a9a:	81a3      	strheq	r3, [r4, #12]
24061a9c:	bf18      	it	ne
24061a9e:	81a3      	strhne	r3, [r4, #12]
24061aa0:	bd10      	pop	{r4, pc}

24061aa2 <__sclose>:
24061aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
24061aa6:	f000 b89d 	b.w	24061be4 <_close_r>

24061aaa <__swbuf_r>:
24061aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24061aac:	460e      	mov	r6, r1
24061aae:	4614      	mov	r4, r2
24061ab0:	4605      	mov	r5, r0
24061ab2:	b118      	cbz	r0, 24061abc <__swbuf_r+0x12>
24061ab4:	6a03      	ldr	r3, [r0, #32]
24061ab6:	b90b      	cbnz	r3, 24061abc <__swbuf_r+0x12>
24061ab8:	f7ff fede 	bl	24061878 <__sinit>
24061abc:	69a3      	ldr	r3, [r4, #24]
24061abe:	60a3      	str	r3, [r4, #8]
24061ac0:	89a3      	ldrh	r3, [r4, #12]
24061ac2:	071a      	lsls	r2, r3, #28
24061ac4:	d525      	bpl.n	24061b12 <__swbuf_r+0x68>
24061ac6:	6923      	ldr	r3, [r4, #16]
24061ac8:	b31b      	cbz	r3, 24061b12 <__swbuf_r+0x68>
24061aca:	6823      	ldr	r3, [r4, #0]
24061acc:	6922      	ldr	r2, [r4, #16]
24061ace:	1a98      	subs	r0, r3, r2
24061ad0:	6963      	ldr	r3, [r4, #20]
24061ad2:	b2f6      	uxtb	r6, r6
24061ad4:	4283      	cmp	r3, r0
24061ad6:	4637      	mov	r7, r6
24061ad8:	dc04      	bgt.n	24061ae4 <__swbuf_r+0x3a>
24061ada:	4621      	mov	r1, r4
24061adc:	4628      	mov	r0, r5
24061ade:	f000 fe1f 	bl	24062720 <_fflush_r>
24061ae2:	b9e0      	cbnz	r0, 24061b1e <__swbuf_r+0x74>
24061ae4:	68a3      	ldr	r3, [r4, #8]
24061ae6:	3b01      	subs	r3, #1
24061ae8:	60a3      	str	r3, [r4, #8]
24061aea:	6823      	ldr	r3, [r4, #0]
24061aec:	1c5a      	adds	r2, r3, #1
24061aee:	6022      	str	r2, [r4, #0]
24061af0:	701e      	strb	r6, [r3, #0]
24061af2:	6962      	ldr	r2, [r4, #20]
24061af4:	1c43      	adds	r3, r0, #1
24061af6:	429a      	cmp	r2, r3
24061af8:	d004      	beq.n	24061b04 <__swbuf_r+0x5a>
24061afa:	89a3      	ldrh	r3, [r4, #12]
24061afc:	07db      	lsls	r3, r3, #31
24061afe:	d506      	bpl.n	24061b0e <__swbuf_r+0x64>
24061b00:	2e0a      	cmp	r6, #10
24061b02:	d104      	bne.n	24061b0e <__swbuf_r+0x64>
24061b04:	4621      	mov	r1, r4
24061b06:	4628      	mov	r0, r5
24061b08:	f000 fe0a 	bl	24062720 <_fflush_r>
24061b0c:	b938      	cbnz	r0, 24061b1e <__swbuf_r+0x74>
24061b0e:	4638      	mov	r0, r7
24061b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24061b12:	4621      	mov	r1, r4
24061b14:	4628      	mov	r0, r5
24061b16:	f000 f805 	bl	24061b24 <__swsetup_r>
24061b1a:	2800      	cmp	r0, #0
24061b1c:	d0d5      	beq.n	24061aca <__swbuf_r+0x20>
24061b1e:	f04f 37ff 	mov.w	r7, #4294967295
24061b22:	e7f4      	b.n	24061b0e <__swbuf_r+0x64>

24061b24 <__swsetup_r>:
24061b24:	b538      	push	{r3, r4, r5, lr}
24061b26:	4b2a      	ldr	r3, [pc, #168]	; (24061bd0 <__swsetup_r+0xac>)
24061b28:	4605      	mov	r5, r0
24061b2a:	6818      	ldr	r0, [r3, #0]
24061b2c:	460c      	mov	r4, r1
24061b2e:	b118      	cbz	r0, 24061b38 <__swsetup_r+0x14>
24061b30:	6a03      	ldr	r3, [r0, #32]
24061b32:	b90b      	cbnz	r3, 24061b38 <__swsetup_r+0x14>
24061b34:	f7ff fea0 	bl	24061878 <__sinit>
24061b38:	89a3      	ldrh	r3, [r4, #12]
24061b3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
24061b3e:	0718      	lsls	r0, r3, #28
24061b40:	d422      	bmi.n	24061b88 <__swsetup_r+0x64>
24061b42:	06d9      	lsls	r1, r3, #27
24061b44:	d407      	bmi.n	24061b56 <__swsetup_r+0x32>
24061b46:	2309      	movs	r3, #9
24061b48:	602b      	str	r3, [r5, #0]
24061b4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
24061b4e:	81a3      	strh	r3, [r4, #12]
24061b50:	f04f 30ff 	mov.w	r0, #4294967295
24061b54:	e034      	b.n	24061bc0 <__swsetup_r+0x9c>
24061b56:	0758      	lsls	r0, r3, #29
24061b58:	d512      	bpl.n	24061b80 <__swsetup_r+0x5c>
24061b5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
24061b5c:	b141      	cbz	r1, 24061b70 <__swsetup_r+0x4c>
24061b5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
24061b62:	4299      	cmp	r1, r3
24061b64:	d002      	beq.n	24061b6c <__swsetup_r+0x48>
24061b66:	4628      	mov	r0, r5
24061b68:	f000 f8d4 	bl	24061d14 <_free_r>
24061b6c:	2300      	movs	r3, #0
24061b6e:	6363      	str	r3, [r4, #52]	; 0x34
24061b70:	89a3      	ldrh	r3, [r4, #12]
24061b72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
24061b76:	81a3      	strh	r3, [r4, #12]
24061b78:	2300      	movs	r3, #0
24061b7a:	6063      	str	r3, [r4, #4]
24061b7c:	6923      	ldr	r3, [r4, #16]
24061b7e:	6023      	str	r3, [r4, #0]
24061b80:	89a3      	ldrh	r3, [r4, #12]
24061b82:	f043 0308 	orr.w	r3, r3, #8
24061b86:	81a3      	strh	r3, [r4, #12]
24061b88:	6923      	ldr	r3, [r4, #16]
24061b8a:	b94b      	cbnz	r3, 24061ba0 <__swsetup_r+0x7c>
24061b8c:	89a3      	ldrh	r3, [r4, #12]
24061b8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
24061b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24061b96:	d003      	beq.n	24061ba0 <__swsetup_r+0x7c>
24061b98:	4621      	mov	r1, r4
24061b9a:	4628      	mov	r0, r5
24061b9c:	f000 fe0e 	bl	240627bc <__smakebuf_r>
24061ba0:	89a0      	ldrh	r0, [r4, #12]
24061ba2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
24061ba6:	f010 0301 	ands.w	r3, r0, #1
24061baa:	d00a      	beq.n	24061bc2 <__swsetup_r+0x9e>
24061bac:	2300      	movs	r3, #0
24061bae:	60a3      	str	r3, [r4, #8]
24061bb0:	6963      	ldr	r3, [r4, #20]
24061bb2:	425b      	negs	r3, r3
24061bb4:	61a3      	str	r3, [r4, #24]
24061bb6:	6923      	ldr	r3, [r4, #16]
24061bb8:	b943      	cbnz	r3, 24061bcc <__swsetup_r+0xa8>
24061bba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
24061bbe:	d1c4      	bne.n	24061b4a <__swsetup_r+0x26>
24061bc0:	bd38      	pop	{r3, r4, r5, pc}
24061bc2:	0781      	lsls	r1, r0, #30
24061bc4:	bf58      	it	pl
24061bc6:	6963      	ldrpl	r3, [r4, #20]
24061bc8:	60a3      	str	r3, [r4, #8]
24061bca:	e7f4      	b.n	24061bb6 <__swsetup_r+0x92>
24061bcc:	2000      	movs	r0, #0
24061bce:	e7f7      	b.n	24061bc0 <__swsetup_r+0x9c>
24061bd0:	200000ac 	.word	0x200000ac

24061bd4 <memset>:
24061bd4:	4402      	add	r2, r0
24061bd6:	4603      	mov	r3, r0
24061bd8:	4293      	cmp	r3, r2
24061bda:	d100      	bne.n	24061bde <memset+0xa>
24061bdc:	4770      	bx	lr
24061bde:	f803 1b01 	strb.w	r1, [r3], #1
24061be2:	e7f9      	b.n	24061bd8 <memset+0x4>

24061be4 <_close_r>:
24061be4:	b538      	push	{r3, r4, r5, lr}
24061be6:	4d06      	ldr	r5, [pc, #24]	; (24061c00 <_close_r+0x1c>)
24061be8:	2300      	movs	r3, #0
24061bea:	4604      	mov	r4, r0
24061bec:	4608      	mov	r0, r1
24061bee:	602b      	str	r3, [r5, #0]
24061bf0:	f7f1 ff91 	bl	24053b16 <_close>
24061bf4:	1c43      	adds	r3, r0, #1
24061bf6:	d102      	bne.n	24061bfe <_close_r+0x1a>
24061bf8:	682b      	ldr	r3, [r5, #0]
24061bfa:	b103      	cbz	r3, 24061bfe <_close_r+0x1a>
24061bfc:	6023      	str	r3, [r4, #0]
24061bfe:	bd38      	pop	{r3, r4, r5, pc}
24061c00:	20000768 	.word	0x20000768

24061c04 <_lseek_r>:
24061c04:	b538      	push	{r3, r4, r5, lr}
24061c06:	4d07      	ldr	r5, [pc, #28]	; (24061c24 <_lseek_r+0x20>)
24061c08:	4604      	mov	r4, r0
24061c0a:	4608      	mov	r0, r1
24061c0c:	4611      	mov	r1, r2
24061c0e:	2200      	movs	r2, #0
24061c10:	602a      	str	r2, [r5, #0]
24061c12:	461a      	mov	r2, r3
24061c14:	f7f1 ffa6 	bl	24053b64 <_lseek>
24061c18:	1c43      	adds	r3, r0, #1
24061c1a:	d102      	bne.n	24061c22 <_lseek_r+0x1e>
24061c1c:	682b      	ldr	r3, [r5, #0]
24061c1e:	b103      	cbz	r3, 24061c22 <_lseek_r+0x1e>
24061c20:	6023      	str	r3, [r4, #0]
24061c22:	bd38      	pop	{r3, r4, r5, pc}
24061c24:	20000768 	.word	0x20000768

24061c28 <_read_r>:
24061c28:	b538      	push	{r3, r4, r5, lr}
24061c2a:	4d07      	ldr	r5, [pc, #28]	; (24061c48 <_read_r+0x20>)
24061c2c:	4604      	mov	r4, r0
24061c2e:	4608      	mov	r0, r1
24061c30:	4611      	mov	r1, r2
24061c32:	2200      	movs	r2, #0
24061c34:	602a      	str	r2, [r5, #0]
24061c36:	461a      	mov	r2, r3
24061c38:	f7f1 ff34 	bl	24053aa4 <_read>
24061c3c:	1c43      	adds	r3, r0, #1
24061c3e:	d102      	bne.n	24061c46 <_read_r+0x1e>
24061c40:	682b      	ldr	r3, [r5, #0]
24061c42:	b103      	cbz	r3, 24061c46 <_read_r+0x1e>
24061c44:	6023      	str	r3, [r4, #0]
24061c46:	bd38      	pop	{r3, r4, r5, pc}
24061c48:	20000768 	.word	0x20000768

24061c4c <_sbrk_r>:
24061c4c:	b538      	push	{r3, r4, r5, lr}
24061c4e:	4d06      	ldr	r5, [pc, #24]	; (24061c68 <_sbrk_r+0x1c>)
24061c50:	2300      	movs	r3, #0
24061c52:	4604      	mov	r4, r0
24061c54:	4608      	mov	r0, r1
24061c56:	602b      	str	r3, [r5, #0]
24061c58:	f7f1 ff92 	bl	24053b80 <_sbrk>
24061c5c:	1c43      	adds	r3, r0, #1
24061c5e:	d102      	bne.n	24061c66 <_sbrk_r+0x1a>
24061c60:	682b      	ldr	r3, [r5, #0]
24061c62:	b103      	cbz	r3, 24061c66 <_sbrk_r+0x1a>
24061c64:	6023      	str	r3, [r4, #0]
24061c66:	bd38      	pop	{r3, r4, r5, pc}
24061c68:	20000768 	.word	0x20000768

24061c6c <_write_r>:
24061c6c:	b538      	push	{r3, r4, r5, lr}
24061c6e:	4d07      	ldr	r5, [pc, #28]	; (24061c8c <_write_r+0x20>)
24061c70:	4604      	mov	r4, r0
24061c72:	4608      	mov	r0, r1
24061c74:	4611      	mov	r1, r2
24061c76:	2200      	movs	r2, #0
24061c78:	602a      	str	r2, [r5, #0]
24061c7a:	461a      	mov	r2, r3
24061c7c:	f7f1 ff2f 	bl	24053ade <_write>
24061c80:	1c43      	adds	r3, r0, #1
24061c82:	d102      	bne.n	24061c8a <_write_r+0x1e>
24061c84:	682b      	ldr	r3, [r5, #0]
24061c86:	b103      	cbz	r3, 24061c8a <_write_r+0x1e>
24061c88:	6023      	str	r3, [r4, #0]
24061c8a:	bd38      	pop	{r3, r4, r5, pc}
24061c8c:	20000768 	.word	0x20000768

24061c90 <__errno>:
24061c90:	4b01      	ldr	r3, [pc, #4]	; (24061c98 <__errno+0x8>)
24061c92:	6818      	ldr	r0, [r3, #0]
24061c94:	4770      	bx	lr
24061c96:	bf00      	nop
24061c98:	200000ac 	.word	0x200000ac

24061c9c <__libc_init_array>:
24061c9c:	b570      	push	{r4, r5, r6, lr}
24061c9e:	4d0d      	ldr	r5, [pc, #52]	; (24061cd4 <__libc_init_array+0x38>)
24061ca0:	4c0d      	ldr	r4, [pc, #52]	; (24061cd8 <__libc_init_array+0x3c>)
24061ca2:	1b64      	subs	r4, r4, r5
24061ca4:	10a4      	asrs	r4, r4, #2
24061ca6:	2600      	movs	r6, #0
24061ca8:	42a6      	cmp	r6, r4
24061caa:	d109      	bne.n	24061cc0 <__libc_init_array+0x24>
24061cac:	4d0b      	ldr	r5, [pc, #44]	; (24061cdc <__libc_init_array+0x40>)
24061cae:	4c0c      	ldr	r4, [pc, #48]	; (24061ce0 <__libc_init_array+0x44>)
24061cb0:	f000 fe40 	bl	24062934 <_init>
24061cb4:	1b64      	subs	r4, r4, r5
24061cb6:	10a4      	asrs	r4, r4, #2
24061cb8:	2600      	movs	r6, #0
24061cba:	42a6      	cmp	r6, r4
24061cbc:	d105      	bne.n	24061cca <__libc_init_array+0x2e>
24061cbe:	bd70      	pop	{r4, r5, r6, pc}
24061cc0:	f855 3b04 	ldr.w	r3, [r5], #4
24061cc4:	4798      	blx	r3
24061cc6:	3601      	adds	r6, #1
24061cc8:	e7ee      	b.n	24061ca8 <__libc_init_array+0xc>
24061cca:	f855 3b04 	ldr.w	r3, [r5], #4
24061cce:	4798      	blx	r3
24061cd0:	3601      	adds	r6, #1
24061cd2:	e7f2      	b.n	24061cba <__libc_init_array+0x1e>
24061cd4:	24064368 	.word	0x24064368
24061cd8:	24064368 	.word	0x24064368
24061cdc:	24064368 	.word	0x24064368
24061ce0:	2406436c 	.word	0x2406436c

24061ce4 <__retarget_lock_init_recursive>:
24061ce4:	4770      	bx	lr

24061ce6 <__retarget_lock_acquire_recursive>:
24061ce6:	4770      	bx	lr

24061ce8 <__retarget_lock_release_recursive>:
24061ce8:	4770      	bx	lr

24061cea <memcpy>:
24061cea:	440a      	add	r2, r1
24061cec:	4291      	cmp	r1, r2
24061cee:	f100 33ff 	add.w	r3, r0, #4294967295
24061cf2:	d100      	bne.n	24061cf6 <memcpy+0xc>
24061cf4:	4770      	bx	lr
24061cf6:	b510      	push	{r4, lr}
24061cf8:	f811 4b01 	ldrb.w	r4, [r1], #1
24061cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
24061d00:	4291      	cmp	r1, r2
24061d02:	d1f9      	bne.n	24061cf8 <memcpy+0xe>
24061d04:	bd10      	pop	{r4, pc}

24061d06 <abort>:
24061d06:	b508      	push	{r3, lr}
24061d08:	2006      	movs	r0, #6
24061d0a:	f000 fdd5 	bl	240628b8 <raise>
24061d0e:	2001      	movs	r0, #1
24061d10:	f7f1 febe 	bl	24053a90 <_exit>

24061d14 <_free_r>:
24061d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
24061d16:	2900      	cmp	r1, #0
24061d18:	d044      	beq.n	24061da4 <_free_r+0x90>
24061d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
24061d1e:	9001      	str	r0, [sp, #4]
24061d20:	2b00      	cmp	r3, #0
24061d22:	f1a1 0404 	sub.w	r4, r1, #4
24061d26:	bfb8      	it	lt
24061d28:	18e4      	addlt	r4, r4, r3
24061d2a:	f7ff fc71 	bl	24061610 <__malloc_lock>
24061d2e:	4a1e      	ldr	r2, [pc, #120]	; (24061da8 <_free_r+0x94>)
24061d30:	9801      	ldr	r0, [sp, #4]
24061d32:	6813      	ldr	r3, [r2, #0]
24061d34:	b933      	cbnz	r3, 24061d44 <_free_r+0x30>
24061d36:	6063      	str	r3, [r4, #4]
24061d38:	6014      	str	r4, [r2, #0]
24061d3a:	b003      	add	sp, #12
24061d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24061d40:	f7ff bc6c 	b.w	2406161c <__malloc_unlock>
24061d44:	42a3      	cmp	r3, r4
24061d46:	d908      	bls.n	24061d5a <_free_r+0x46>
24061d48:	6825      	ldr	r5, [r4, #0]
24061d4a:	1961      	adds	r1, r4, r5
24061d4c:	428b      	cmp	r3, r1
24061d4e:	bf01      	itttt	eq
24061d50:	6819      	ldreq	r1, [r3, #0]
24061d52:	685b      	ldreq	r3, [r3, #4]
24061d54:	1949      	addeq	r1, r1, r5
24061d56:	6021      	streq	r1, [r4, #0]
24061d58:	e7ed      	b.n	24061d36 <_free_r+0x22>
24061d5a:	461a      	mov	r2, r3
24061d5c:	685b      	ldr	r3, [r3, #4]
24061d5e:	b10b      	cbz	r3, 24061d64 <_free_r+0x50>
24061d60:	42a3      	cmp	r3, r4
24061d62:	d9fa      	bls.n	24061d5a <_free_r+0x46>
24061d64:	6811      	ldr	r1, [r2, #0]
24061d66:	1855      	adds	r5, r2, r1
24061d68:	42a5      	cmp	r5, r4
24061d6a:	d10b      	bne.n	24061d84 <_free_r+0x70>
24061d6c:	6824      	ldr	r4, [r4, #0]
24061d6e:	4421      	add	r1, r4
24061d70:	1854      	adds	r4, r2, r1
24061d72:	42a3      	cmp	r3, r4
24061d74:	6011      	str	r1, [r2, #0]
24061d76:	d1e0      	bne.n	24061d3a <_free_r+0x26>
24061d78:	681c      	ldr	r4, [r3, #0]
24061d7a:	685b      	ldr	r3, [r3, #4]
24061d7c:	6053      	str	r3, [r2, #4]
24061d7e:	440c      	add	r4, r1
24061d80:	6014      	str	r4, [r2, #0]
24061d82:	e7da      	b.n	24061d3a <_free_r+0x26>
24061d84:	d902      	bls.n	24061d8c <_free_r+0x78>
24061d86:	230c      	movs	r3, #12
24061d88:	6003      	str	r3, [r0, #0]
24061d8a:	e7d6      	b.n	24061d3a <_free_r+0x26>
24061d8c:	6825      	ldr	r5, [r4, #0]
24061d8e:	1961      	adds	r1, r4, r5
24061d90:	428b      	cmp	r3, r1
24061d92:	bf04      	itt	eq
24061d94:	6819      	ldreq	r1, [r3, #0]
24061d96:	685b      	ldreq	r3, [r3, #4]
24061d98:	6063      	str	r3, [r4, #4]
24061d9a:	bf04      	itt	eq
24061d9c:	1949      	addeq	r1, r1, r5
24061d9e:	6021      	streq	r1, [r4, #0]
24061da0:	6054      	str	r4, [r2, #4]
24061da2:	e7ca      	b.n	24061d3a <_free_r+0x26>
24061da4:	b003      	add	sp, #12
24061da6:	bd30      	pop	{r4, r5, pc}
24061da8:	20000624 	.word	0x20000624

24061dac <_malloc_usable_size_r>:
24061dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
24061db0:	1f18      	subs	r0, r3, #4
24061db2:	2b00      	cmp	r3, #0
24061db4:	bfbc      	itt	lt
24061db6:	580b      	ldrlt	r3, [r1, r0]
24061db8:	18c0      	addlt	r0, r0, r3
24061dba:	4770      	bx	lr

24061dbc <__ssputs_r>:
24061dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24061dc0:	688e      	ldr	r6, [r1, #8]
24061dc2:	461f      	mov	r7, r3
24061dc4:	42be      	cmp	r6, r7
24061dc6:	680b      	ldr	r3, [r1, #0]
24061dc8:	4682      	mov	sl, r0
24061dca:	460c      	mov	r4, r1
24061dcc:	4690      	mov	r8, r2
24061dce:	d82c      	bhi.n	24061e2a <__ssputs_r+0x6e>
24061dd0:	898a      	ldrh	r2, [r1, #12]
24061dd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
24061dd6:	d026      	beq.n	24061e26 <__ssputs_r+0x6a>
24061dd8:	6965      	ldr	r5, [r4, #20]
24061dda:	6909      	ldr	r1, [r1, #16]
24061ddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
24061de0:	eba3 0901 	sub.w	r9, r3, r1
24061de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
24061de8:	1c7b      	adds	r3, r7, #1
24061dea:	444b      	add	r3, r9
24061dec:	106d      	asrs	r5, r5, #1
24061dee:	429d      	cmp	r5, r3
24061df0:	bf38      	it	cc
24061df2:	461d      	movcc	r5, r3
24061df4:	0553      	lsls	r3, r2, #21
24061df6:	d527      	bpl.n	24061e48 <__ssputs_r+0x8c>
24061df8:	4629      	mov	r1, r5
24061dfa:	f7ff fb89 	bl	24061510 <_malloc_r>
24061dfe:	4606      	mov	r6, r0
24061e00:	b360      	cbz	r0, 24061e5c <__ssputs_r+0xa0>
24061e02:	6921      	ldr	r1, [r4, #16]
24061e04:	464a      	mov	r2, r9
24061e06:	f7ff ff70 	bl	24061cea <memcpy>
24061e0a:	89a3      	ldrh	r3, [r4, #12]
24061e0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
24061e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24061e14:	81a3      	strh	r3, [r4, #12]
24061e16:	6126      	str	r6, [r4, #16]
24061e18:	6165      	str	r5, [r4, #20]
24061e1a:	444e      	add	r6, r9
24061e1c:	eba5 0509 	sub.w	r5, r5, r9
24061e20:	6026      	str	r6, [r4, #0]
24061e22:	60a5      	str	r5, [r4, #8]
24061e24:	463e      	mov	r6, r7
24061e26:	42be      	cmp	r6, r7
24061e28:	d900      	bls.n	24061e2c <__ssputs_r+0x70>
24061e2a:	463e      	mov	r6, r7
24061e2c:	6820      	ldr	r0, [r4, #0]
24061e2e:	4632      	mov	r2, r6
24061e30:	4641      	mov	r1, r8
24061e32:	f000 fcff 	bl	24062834 <memmove>
24061e36:	68a3      	ldr	r3, [r4, #8]
24061e38:	1b9b      	subs	r3, r3, r6
24061e3a:	60a3      	str	r3, [r4, #8]
24061e3c:	6823      	ldr	r3, [r4, #0]
24061e3e:	4433      	add	r3, r6
24061e40:	6023      	str	r3, [r4, #0]
24061e42:	2000      	movs	r0, #0
24061e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24061e48:	462a      	mov	r2, r5
24061e4a:	f7ff fc59 	bl	24061700 <_realloc_r>
24061e4e:	4606      	mov	r6, r0
24061e50:	2800      	cmp	r0, #0
24061e52:	d1e0      	bne.n	24061e16 <__ssputs_r+0x5a>
24061e54:	6921      	ldr	r1, [r4, #16]
24061e56:	4650      	mov	r0, sl
24061e58:	f7ff ff5c 	bl	24061d14 <_free_r>
24061e5c:	230c      	movs	r3, #12
24061e5e:	f8ca 3000 	str.w	r3, [sl]
24061e62:	89a3      	ldrh	r3, [r4, #12]
24061e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24061e68:	81a3      	strh	r3, [r4, #12]
24061e6a:	f04f 30ff 	mov.w	r0, #4294967295
24061e6e:	e7e9      	b.n	24061e44 <__ssputs_r+0x88>

24061e70 <_svfiprintf_r>:
24061e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24061e74:	4698      	mov	r8, r3
24061e76:	898b      	ldrh	r3, [r1, #12]
24061e78:	061b      	lsls	r3, r3, #24
24061e7a:	b09d      	sub	sp, #116	; 0x74
24061e7c:	4607      	mov	r7, r0
24061e7e:	460d      	mov	r5, r1
24061e80:	4614      	mov	r4, r2
24061e82:	d50e      	bpl.n	24061ea2 <_svfiprintf_r+0x32>
24061e84:	690b      	ldr	r3, [r1, #16]
24061e86:	b963      	cbnz	r3, 24061ea2 <_svfiprintf_r+0x32>
24061e88:	2140      	movs	r1, #64	; 0x40
24061e8a:	f7ff fb41 	bl	24061510 <_malloc_r>
24061e8e:	6028      	str	r0, [r5, #0]
24061e90:	6128      	str	r0, [r5, #16]
24061e92:	b920      	cbnz	r0, 24061e9e <_svfiprintf_r+0x2e>
24061e94:	230c      	movs	r3, #12
24061e96:	603b      	str	r3, [r7, #0]
24061e98:	f04f 30ff 	mov.w	r0, #4294967295
24061e9c:	e0d0      	b.n	24062040 <_svfiprintf_r+0x1d0>
24061e9e:	2340      	movs	r3, #64	; 0x40
24061ea0:	616b      	str	r3, [r5, #20]
24061ea2:	2300      	movs	r3, #0
24061ea4:	9309      	str	r3, [sp, #36]	; 0x24
24061ea6:	2320      	movs	r3, #32
24061ea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
24061eac:	f8cd 800c 	str.w	r8, [sp, #12]
24061eb0:	2330      	movs	r3, #48	; 0x30
24061eb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 24062058 <_svfiprintf_r+0x1e8>
24061eb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
24061eba:	f04f 0901 	mov.w	r9, #1
24061ebe:	4623      	mov	r3, r4
24061ec0:	469a      	mov	sl, r3
24061ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
24061ec6:	b10a      	cbz	r2, 24061ecc <_svfiprintf_r+0x5c>
24061ec8:	2a25      	cmp	r2, #37	; 0x25
24061eca:	d1f9      	bne.n	24061ec0 <_svfiprintf_r+0x50>
24061ecc:	ebba 0b04 	subs.w	fp, sl, r4
24061ed0:	d00b      	beq.n	24061eea <_svfiprintf_r+0x7a>
24061ed2:	465b      	mov	r3, fp
24061ed4:	4622      	mov	r2, r4
24061ed6:	4629      	mov	r1, r5
24061ed8:	4638      	mov	r0, r7
24061eda:	f7ff ff6f 	bl	24061dbc <__ssputs_r>
24061ede:	3001      	adds	r0, #1
24061ee0:	f000 80a9 	beq.w	24062036 <_svfiprintf_r+0x1c6>
24061ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
24061ee6:	445a      	add	r2, fp
24061ee8:	9209      	str	r2, [sp, #36]	; 0x24
24061eea:	f89a 3000 	ldrb.w	r3, [sl]
24061eee:	2b00      	cmp	r3, #0
24061ef0:	f000 80a1 	beq.w	24062036 <_svfiprintf_r+0x1c6>
24061ef4:	2300      	movs	r3, #0
24061ef6:	f04f 32ff 	mov.w	r2, #4294967295
24061efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
24061efe:	f10a 0a01 	add.w	sl, sl, #1
24061f02:	9304      	str	r3, [sp, #16]
24061f04:	9307      	str	r3, [sp, #28]
24061f06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
24061f0a:	931a      	str	r3, [sp, #104]	; 0x68
24061f0c:	4654      	mov	r4, sl
24061f0e:	2205      	movs	r2, #5
24061f10:	f814 1b01 	ldrb.w	r1, [r4], #1
24061f14:	4850      	ldr	r0, [pc, #320]	; (24062058 <_svfiprintf_r+0x1e8>)
24061f16:	f7ee f893 	bl	24050040 <memchr>
24061f1a:	9a04      	ldr	r2, [sp, #16]
24061f1c:	b9d8      	cbnz	r0, 24061f56 <_svfiprintf_r+0xe6>
24061f1e:	06d0      	lsls	r0, r2, #27
24061f20:	bf44      	itt	mi
24061f22:	2320      	movmi	r3, #32
24061f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
24061f28:	0711      	lsls	r1, r2, #28
24061f2a:	bf44      	itt	mi
24061f2c:	232b      	movmi	r3, #43	; 0x2b
24061f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
24061f32:	f89a 3000 	ldrb.w	r3, [sl]
24061f36:	2b2a      	cmp	r3, #42	; 0x2a
24061f38:	d015      	beq.n	24061f66 <_svfiprintf_r+0xf6>
24061f3a:	9a07      	ldr	r2, [sp, #28]
24061f3c:	4654      	mov	r4, sl
24061f3e:	2000      	movs	r0, #0
24061f40:	f04f 0c0a 	mov.w	ip, #10
24061f44:	4621      	mov	r1, r4
24061f46:	f811 3b01 	ldrb.w	r3, [r1], #1
24061f4a:	3b30      	subs	r3, #48	; 0x30
24061f4c:	2b09      	cmp	r3, #9
24061f4e:	d94d      	bls.n	24061fec <_svfiprintf_r+0x17c>
24061f50:	b1b0      	cbz	r0, 24061f80 <_svfiprintf_r+0x110>
24061f52:	9207      	str	r2, [sp, #28]
24061f54:	e014      	b.n	24061f80 <_svfiprintf_r+0x110>
24061f56:	eba0 0308 	sub.w	r3, r0, r8
24061f5a:	fa09 f303 	lsl.w	r3, r9, r3
24061f5e:	4313      	orrs	r3, r2
24061f60:	9304      	str	r3, [sp, #16]
24061f62:	46a2      	mov	sl, r4
24061f64:	e7d2      	b.n	24061f0c <_svfiprintf_r+0x9c>
24061f66:	9b03      	ldr	r3, [sp, #12]
24061f68:	1d19      	adds	r1, r3, #4
24061f6a:	681b      	ldr	r3, [r3, #0]
24061f6c:	9103      	str	r1, [sp, #12]
24061f6e:	2b00      	cmp	r3, #0
24061f70:	bfbb      	ittet	lt
24061f72:	425b      	neglt	r3, r3
24061f74:	f042 0202 	orrlt.w	r2, r2, #2
24061f78:	9307      	strge	r3, [sp, #28]
24061f7a:	9307      	strlt	r3, [sp, #28]
24061f7c:	bfb8      	it	lt
24061f7e:	9204      	strlt	r2, [sp, #16]
24061f80:	7823      	ldrb	r3, [r4, #0]
24061f82:	2b2e      	cmp	r3, #46	; 0x2e
24061f84:	d10c      	bne.n	24061fa0 <_svfiprintf_r+0x130>
24061f86:	7863      	ldrb	r3, [r4, #1]
24061f88:	2b2a      	cmp	r3, #42	; 0x2a
24061f8a:	d134      	bne.n	24061ff6 <_svfiprintf_r+0x186>
24061f8c:	9b03      	ldr	r3, [sp, #12]
24061f8e:	1d1a      	adds	r2, r3, #4
24061f90:	681b      	ldr	r3, [r3, #0]
24061f92:	9203      	str	r2, [sp, #12]
24061f94:	2b00      	cmp	r3, #0
24061f96:	bfb8      	it	lt
24061f98:	f04f 33ff 	movlt.w	r3, #4294967295
24061f9c:	3402      	adds	r4, #2
24061f9e:	9305      	str	r3, [sp, #20]
24061fa0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 24062068 <_svfiprintf_r+0x1f8>
24061fa4:	7821      	ldrb	r1, [r4, #0]
24061fa6:	2203      	movs	r2, #3
24061fa8:	4650      	mov	r0, sl
24061faa:	f7ee f849 	bl	24050040 <memchr>
24061fae:	b138      	cbz	r0, 24061fc0 <_svfiprintf_r+0x150>
24061fb0:	9b04      	ldr	r3, [sp, #16]
24061fb2:	eba0 000a 	sub.w	r0, r0, sl
24061fb6:	2240      	movs	r2, #64	; 0x40
24061fb8:	4082      	lsls	r2, r0
24061fba:	4313      	orrs	r3, r2
24061fbc:	3401      	adds	r4, #1
24061fbe:	9304      	str	r3, [sp, #16]
24061fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
24061fc4:	4825      	ldr	r0, [pc, #148]	; (2406205c <_svfiprintf_r+0x1ec>)
24061fc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
24061fca:	2206      	movs	r2, #6
24061fcc:	f7ee f838 	bl	24050040 <memchr>
24061fd0:	2800      	cmp	r0, #0
24061fd2:	d038      	beq.n	24062046 <_svfiprintf_r+0x1d6>
24061fd4:	4b22      	ldr	r3, [pc, #136]	; (24062060 <_svfiprintf_r+0x1f0>)
24061fd6:	bb1b      	cbnz	r3, 24062020 <_svfiprintf_r+0x1b0>
24061fd8:	9b03      	ldr	r3, [sp, #12]
24061fda:	3307      	adds	r3, #7
24061fdc:	f023 0307 	bic.w	r3, r3, #7
24061fe0:	3308      	adds	r3, #8
24061fe2:	9303      	str	r3, [sp, #12]
24061fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
24061fe6:	4433      	add	r3, r6
24061fe8:	9309      	str	r3, [sp, #36]	; 0x24
24061fea:	e768      	b.n	24061ebe <_svfiprintf_r+0x4e>
24061fec:	fb0c 3202 	mla	r2, ip, r2, r3
24061ff0:	460c      	mov	r4, r1
24061ff2:	2001      	movs	r0, #1
24061ff4:	e7a6      	b.n	24061f44 <_svfiprintf_r+0xd4>
24061ff6:	2300      	movs	r3, #0
24061ff8:	3401      	adds	r4, #1
24061ffa:	9305      	str	r3, [sp, #20]
24061ffc:	4619      	mov	r1, r3
24061ffe:	f04f 0c0a 	mov.w	ip, #10
24062002:	4620      	mov	r0, r4
24062004:	f810 2b01 	ldrb.w	r2, [r0], #1
24062008:	3a30      	subs	r2, #48	; 0x30
2406200a:	2a09      	cmp	r2, #9
2406200c:	d903      	bls.n	24062016 <_svfiprintf_r+0x1a6>
2406200e:	2b00      	cmp	r3, #0
24062010:	d0c6      	beq.n	24061fa0 <_svfiprintf_r+0x130>
24062012:	9105      	str	r1, [sp, #20]
24062014:	e7c4      	b.n	24061fa0 <_svfiprintf_r+0x130>
24062016:	fb0c 2101 	mla	r1, ip, r1, r2
2406201a:	4604      	mov	r4, r0
2406201c:	2301      	movs	r3, #1
2406201e:	e7f0      	b.n	24062002 <_svfiprintf_r+0x192>
24062020:	ab03      	add	r3, sp, #12
24062022:	9300      	str	r3, [sp, #0]
24062024:	462a      	mov	r2, r5
24062026:	4b0f      	ldr	r3, [pc, #60]	; (24062064 <_svfiprintf_r+0x1f4>)
24062028:	a904      	add	r1, sp, #16
2406202a:	4638      	mov	r0, r7
2406202c:	f3af 8000 	nop.w
24062030:	1c42      	adds	r2, r0, #1
24062032:	4606      	mov	r6, r0
24062034:	d1d6      	bne.n	24061fe4 <_svfiprintf_r+0x174>
24062036:	89ab      	ldrh	r3, [r5, #12]
24062038:	065b      	lsls	r3, r3, #25
2406203a:	f53f af2d 	bmi.w	24061e98 <_svfiprintf_r+0x28>
2406203e:	9809      	ldr	r0, [sp, #36]	; 0x24
24062040:	b01d      	add	sp, #116	; 0x74
24062042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24062046:	ab03      	add	r3, sp, #12
24062048:	9300      	str	r3, [sp, #0]
2406204a:	462a      	mov	r2, r5
2406204c:	4b05      	ldr	r3, [pc, #20]	; (24062064 <_svfiprintf_r+0x1f4>)
2406204e:	a904      	add	r1, sp, #16
24062050:	4638      	mov	r0, r7
24062052:	f000 f9bd 	bl	240623d0 <_printf_i>
24062056:	e7eb      	b.n	24062030 <_svfiprintf_r+0x1c0>
24062058:	24064333 	.word	0x24064333
2406205c:	2406433d 	.word	0x2406433d
24062060:	00000000 	.word	0x00000000
24062064:	24061dbd 	.word	0x24061dbd
24062068:	24064339 	.word	0x24064339

2406206c <__sfputc_r>:
2406206c:	6893      	ldr	r3, [r2, #8]
2406206e:	3b01      	subs	r3, #1
24062070:	2b00      	cmp	r3, #0
24062072:	b410      	push	{r4}
24062074:	6093      	str	r3, [r2, #8]
24062076:	da08      	bge.n	2406208a <__sfputc_r+0x1e>
24062078:	6994      	ldr	r4, [r2, #24]
2406207a:	42a3      	cmp	r3, r4
2406207c:	db01      	blt.n	24062082 <__sfputc_r+0x16>
2406207e:	290a      	cmp	r1, #10
24062080:	d103      	bne.n	2406208a <__sfputc_r+0x1e>
24062082:	f85d 4b04 	ldr.w	r4, [sp], #4
24062086:	f7ff bd10 	b.w	24061aaa <__swbuf_r>
2406208a:	6813      	ldr	r3, [r2, #0]
2406208c:	1c58      	adds	r0, r3, #1
2406208e:	6010      	str	r0, [r2, #0]
24062090:	7019      	strb	r1, [r3, #0]
24062092:	4608      	mov	r0, r1
24062094:	f85d 4b04 	ldr.w	r4, [sp], #4
24062098:	4770      	bx	lr

2406209a <__sfputs_r>:
2406209a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2406209c:	4606      	mov	r6, r0
2406209e:	460f      	mov	r7, r1
240620a0:	4614      	mov	r4, r2
240620a2:	18d5      	adds	r5, r2, r3
240620a4:	42ac      	cmp	r4, r5
240620a6:	d101      	bne.n	240620ac <__sfputs_r+0x12>
240620a8:	2000      	movs	r0, #0
240620aa:	e007      	b.n	240620bc <__sfputs_r+0x22>
240620ac:	f814 1b01 	ldrb.w	r1, [r4], #1
240620b0:	463a      	mov	r2, r7
240620b2:	4630      	mov	r0, r6
240620b4:	f7ff ffda 	bl	2406206c <__sfputc_r>
240620b8:	1c43      	adds	r3, r0, #1
240620ba:	d1f3      	bne.n	240620a4 <__sfputs_r+0xa>
240620bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

240620c0 <_vfiprintf_r>:
240620c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240620c4:	460d      	mov	r5, r1
240620c6:	b09d      	sub	sp, #116	; 0x74
240620c8:	4614      	mov	r4, r2
240620ca:	4698      	mov	r8, r3
240620cc:	4606      	mov	r6, r0
240620ce:	b118      	cbz	r0, 240620d8 <_vfiprintf_r+0x18>
240620d0:	6a03      	ldr	r3, [r0, #32]
240620d2:	b90b      	cbnz	r3, 240620d8 <_vfiprintf_r+0x18>
240620d4:	f7ff fbd0 	bl	24061878 <__sinit>
240620d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
240620da:	07d9      	lsls	r1, r3, #31
240620dc:	d405      	bmi.n	240620ea <_vfiprintf_r+0x2a>
240620de:	89ab      	ldrh	r3, [r5, #12]
240620e0:	059a      	lsls	r2, r3, #22
240620e2:	d402      	bmi.n	240620ea <_vfiprintf_r+0x2a>
240620e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
240620e6:	f7ff fdfe 	bl	24061ce6 <__retarget_lock_acquire_recursive>
240620ea:	89ab      	ldrh	r3, [r5, #12]
240620ec:	071b      	lsls	r3, r3, #28
240620ee:	d501      	bpl.n	240620f4 <_vfiprintf_r+0x34>
240620f0:	692b      	ldr	r3, [r5, #16]
240620f2:	b99b      	cbnz	r3, 2406211c <_vfiprintf_r+0x5c>
240620f4:	4629      	mov	r1, r5
240620f6:	4630      	mov	r0, r6
240620f8:	f7ff fd14 	bl	24061b24 <__swsetup_r>
240620fc:	b170      	cbz	r0, 2406211c <_vfiprintf_r+0x5c>
240620fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
24062100:	07dc      	lsls	r4, r3, #31
24062102:	d504      	bpl.n	2406210e <_vfiprintf_r+0x4e>
24062104:	f04f 30ff 	mov.w	r0, #4294967295
24062108:	b01d      	add	sp, #116	; 0x74
2406210a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2406210e:	89ab      	ldrh	r3, [r5, #12]
24062110:	0598      	lsls	r0, r3, #22
24062112:	d4f7      	bmi.n	24062104 <_vfiprintf_r+0x44>
24062114:	6da8      	ldr	r0, [r5, #88]	; 0x58
24062116:	f7ff fde7 	bl	24061ce8 <__retarget_lock_release_recursive>
2406211a:	e7f3      	b.n	24062104 <_vfiprintf_r+0x44>
2406211c:	2300      	movs	r3, #0
2406211e:	9309      	str	r3, [sp, #36]	; 0x24
24062120:	2320      	movs	r3, #32
24062122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
24062126:	f8cd 800c 	str.w	r8, [sp, #12]
2406212a:	2330      	movs	r3, #48	; 0x30
2406212c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 240622e0 <_vfiprintf_r+0x220>
24062130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
24062134:	f04f 0901 	mov.w	r9, #1
24062138:	4623      	mov	r3, r4
2406213a:	469a      	mov	sl, r3
2406213c:	f813 2b01 	ldrb.w	r2, [r3], #1
24062140:	b10a      	cbz	r2, 24062146 <_vfiprintf_r+0x86>
24062142:	2a25      	cmp	r2, #37	; 0x25
24062144:	d1f9      	bne.n	2406213a <_vfiprintf_r+0x7a>
24062146:	ebba 0b04 	subs.w	fp, sl, r4
2406214a:	d00b      	beq.n	24062164 <_vfiprintf_r+0xa4>
2406214c:	465b      	mov	r3, fp
2406214e:	4622      	mov	r2, r4
24062150:	4629      	mov	r1, r5
24062152:	4630      	mov	r0, r6
24062154:	f7ff ffa1 	bl	2406209a <__sfputs_r>
24062158:	3001      	adds	r0, #1
2406215a:	f000 80a9 	beq.w	240622b0 <_vfiprintf_r+0x1f0>
2406215e:	9a09      	ldr	r2, [sp, #36]	; 0x24
24062160:	445a      	add	r2, fp
24062162:	9209      	str	r2, [sp, #36]	; 0x24
24062164:	f89a 3000 	ldrb.w	r3, [sl]
24062168:	2b00      	cmp	r3, #0
2406216a:	f000 80a1 	beq.w	240622b0 <_vfiprintf_r+0x1f0>
2406216e:	2300      	movs	r3, #0
24062170:	f04f 32ff 	mov.w	r2, #4294967295
24062174:	e9cd 2305 	strd	r2, r3, [sp, #20]
24062178:	f10a 0a01 	add.w	sl, sl, #1
2406217c:	9304      	str	r3, [sp, #16]
2406217e:	9307      	str	r3, [sp, #28]
24062180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
24062184:	931a      	str	r3, [sp, #104]	; 0x68
24062186:	4654      	mov	r4, sl
24062188:	2205      	movs	r2, #5
2406218a:	f814 1b01 	ldrb.w	r1, [r4], #1
2406218e:	4854      	ldr	r0, [pc, #336]	; (240622e0 <_vfiprintf_r+0x220>)
24062190:	f7ed ff56 	bl	24050040 <memchr>
24062194:	9a04      	ldr	r2, [sp, #16]
24062196:	b9d8      	cbnz	r0, 240621d0 <_vfiprintf_r+0x110>
24062198:	06d1      	lsls	r1, r2, #27
2406219a:	bf44      	itt	mi
2406219c:	2320      	movmi	r3, #32
2406219e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
240621a2:	0713      	lsls	r3, r2, #28
240621a4:	bf44      	itt	mi
240621a6:	232b      	movmi	r3, #43	; 0x2b
240621a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
240621ac:	f89a 3000 	ldrb.w	r3, [sl]
240621b0:	2b2a      	cmp	r3, #42	; 0x2a
240621b2:	d015      	beq.n	240621e0 <_vfiprintf_r+0x120>
240621b4:	9a07      	ldr	r2, [sp, #28]
240621b6:	4654      	mov	r4, sl
240621b8:	2000      	movs	r0, #0
240621ba:	f04f 0c0a 	mov.w	ip, #10
240621be:	4621      	mov	r1, r4
240621c0:	f811 3b01 	ldrb.w	r3, [r1], #1
240621c4:	3b30      	subs	r3, #48	; 0x30
240621c6:	2b09      	cmp	r3, #9
240621c8:	d94d      	bls.n	24062266 <_vfiprintf_r+0x1a6>
240621ca:	b1b0      	cbz	r0, 240621fa <_vfiprintf_r+0x13a>
240621cc:	9207      	str	r2, [sp, #28]
240621ce:	e014      	b.n	240621fa <_vfiprintf_r+0x13a>
240621d0:	eba0 0308 	sub.w	r3, r0, r8
240621d4:	fa09 f303 	lsl.w	r3, r9, r3
240621d8:	4313      	orrs	r3, r2
240621da:	9304      	str	r3, [sp, #16]
240621dc:	46a2      	mov	sl, r4
240621de:	e7d2      	b.n	24062186 <_vfiprintf_r+0xc6>
240621e0:	9b03      	ldr	r3, [sp, #12]
240621e2:	1d19      	adds	r1, r3, #4
240621e4:	681b      	ldr	r3, [r3, #0]
240621e6:	9103      	str	r1, [sp, #12]
240621e8:	2b00      	cmp	r3, #0
240621ea:	bfbb      	ittet	lt
240621ec:	425b      	neglt	r3, r3
240621ee:	f042 0202 	orrlt.w	r2, r2, #2
240621f2:	9307      	strge	r3, [sp, #28]
240621f4:	9307      	strlt	r3, [sp, #28]
240621f6:	bfb8      	it	lt
240621f8:	9204      	strlt	r2, [sp, #16]
240621fa:	7823      	ldrb	r3, [r4, #0]
240621fc:	2b2e      	cmp	r3, #46	; 0x2e
240621fe:	d10c      	bne.n	2406221a <_vfiprintf_r+0x15a>
24062200:	7863      	ldrb	r3, [r4, #1]
24062202:	2b2a      	cmp	r3, #42	; 0x2a
24062204:	d134      	bne.n	24062270 <_vfiprintf_r+0x1b0>
24062206:	9b03      	ldr	r3, [sp, #12]
24062208:	1d1a      	adds	r2, r3, #4
2406220a:	681b      	ldr	r3, [r3, #0]
2406220c:	9203      	str	r2, [sp, #12]
2406220e:	2b00      	cmp	r3, #0
24062210:	bfb8      	it	lt
24062212:	f04f 33ff 	movlt.w	r3, #4294967295
24062216:	3402      	adds	r4, #2
24062218:	9305      	str	r3, [sp, #20]
2406221a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 240622f0 <_vfiprintf_r+0x230>
2406221e:	7821      	ldrb	r1, [r4, #0]
24062220:	2203      	movs	r2, #3
24062222:	4650      	mov	r0, sl
24062224:	f7ed ff0c 	bl	24050040 <memchr>
24062228:	b138      	cbz	r0, 2406223a <_vfiprintf_r+0x17a>
2406222a:	9b04      	ldr	r3, [sp, #16]
2406222c:	eba0 000a 	sub.w	r0, r0, sl
24062230:	2240      	movs	r2, #64	; 0x40
24062232:	4082      	lsls	r2, r0
24062234:	4313      	orrs	r3, r2
24062236:	3401      	adds	r4, #1
24062238:	9304      	str	r3, [sp, #16]
2406223a:	f814 1b01 	ldrb.w	r1, [r4], #1
2406223e:	4829      	ldr	r0, [pc, #164]	; (240622e4 <_vfiprintf_r+0x224>)
24062240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
24062244:	2206      	movs	r2, #6
24062246:	f7ed fefb 	bl	24050040 <memchr>
2406224a:	2800      	cmp	r0, #0
2406224c:	d03f      	beq.n	240622ce <_vfiprintf_r+0x20e>
2406224e:	4b26      	ldr	r3, [pc, #152]	; (240622e8 <_vfiprintf_r+0x228>)
24062250:	bb1b      	cbnz	r3, 2406229a <_vfiprintf_r+0x1da>
24062252:	9b03      	ldr	r3, [sp, #12]
24062254:	3307      	adds	r3, #7
24062256:	f023 0307 	bic.w	r3, r3, #7
2406225a:	3308      	adds	r3, #8
2406225c:	9303      	str	r3, [sp, #12]
2406225e:	9b09      	ldr	r3, [sp, #36]	; 0x24
24062260:	443b      	add	r3, r7
24062262:	9309      	str	r3, [sp, #36]	; 0x24
24062264:	e768      	b.n	24062138 <_vfiprintf_r+0x78>
24062266:	fb0c 3202 	mla	r2, ip, r2, r3
2406226a:	460c      	mov	r4, r1
2406226c:	2001      	movs	r0, #1
2406226e:	e7a6      	b.n	240621be <_vfiprintf_r+0xfe>
24062270:	2300      	movs	r3, #0
24062272:	3401      	adds	r4, #1
24062274:	9305      	str	r3, [sp, #20]
24062276:	4619      	mov	r1, r3
24062278:	f04f 0c0a 	mov.w	ip, #10
2406227c:	4620      	mov	r0, r4
2406227e:	f810 2b01 	ldrb.w	r2, [r0], #1
24062282:	3a30      	subs	r2, #48	; 0x30
24062284:	2a09      	cmp	r2, #9
24062286:	d903      	bls.n	24062290 <_vfiprintf_r+0x1d0>
24062288:	2b00      	cmp	r3, #0
2406228a:	d0c6      	beq.n	2406221a <_vfiprintf_r+0x15a>
2406228c:	9105      	str	r1, [sp, #20]
2406228e:	e7c4      	b.n	2406221a <_vfiprintf_r+0x15a>
24062290:	fb0c 2101 	mla	r1, ip, r1, r2
24062294:	4604      	mov	r4, r0
24062296:	2301      	movs	r3, #1
24062298:	e7f0      	b.n	2406227c <_vfiprintf_r+0x1bc>
2406229a:	ab03      	add	r3, sp, #12
2406229c:	9300      	str	r3, [sp, #0]
2406229e:	462a      	mov	r2, r5
240622a0:	4b12      	ldr	r3, [pc, #72]	; (240622ec <_vfiprintf_r+0x22c>)
240622a2:	a904      	add	r1, sp, #16
240622a4:	4630      	mov	r0, r6
240622a6:	f3af 8000 	nop.w
240622aa:	4607      	mov	r7, r0
240622ac:	1c78      	adds	r0, r7, #1
240622ae:	d1d6      	bne.n	2406225e <_vfiprintf_r+0x19e>
240622b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
240622b2:	07d9      	lsls	r1, r3, #31
240622b4:	d405      	bmi.n	240622c2 <_vfiprintf_r+0x202>
240622b6:	89ab      	ldrh	r3, [r5, #12]
240622b8:	059a      	lsls	r2, r3, #22
240622ba:	d402      	bmi.n	240622c2 <_vfiprintf_r+0x202>
240622bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
240622be:	f7ff fd13 	bl	24061ce8 <__retarget_lock_release_recursive>
240622c2:	89ab      	ldrh	r3, [r5, #12]
240622c4:	065b      	lsls	r3, r3, #25
240622c6:	f53f af1d 	bmi.w	24062104 <_vfiprintf_r+0x44>
240622ca:	9809      	ldr	r0, [sp, #36]	; 0x24
240622cc:	e71c      	b.n	24062108 <_vfiprintf_r+0x48>
240622ce:	ab03      	add	r3, sp, #12
240622d0:	9300      	str	r3, [sp, #0]
240622d2:	462a      	mov	r2, r5
240622d4:	4b05      	ldr	r3, [pc, #20]	; (240622ec <_vfiprintf_r+0x22c>)
240622d6:	a904      	add	r1, sp, #16
240622d8:	4630      	mov	r0, r6
240622da:	f000 f879 	bl	240623d0 <_printf_i>
240622de:	e7e4      	b.n	240622aa <_vfiprintf_r+0x1ea>
240622e0:	24064333 	.word	0x24064333
240622e4:	2406433d 	.word	0x2406433d
240622e8:	00000000 	.word	0x00000000
240622ec:	2406209b 	.word	0x2406209b
240622f0:	24064339 	.word	0x24064339

240622f4 <_printf_common>:
240622f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
240622f8:	4616      	mov	r6, r2
240622fa:	4699      	mov	r9, r3
240622fc:	688a      	ldr	r2, [r1, #8]
240622fe:	690b      	ldr	r3, [r1, #16]
24062300:	f8dd 8020 	ldr.w	r8, [sp, #32]
24062304:	4293      	cmp	r3, r2
24062306:	bfb8      	it	lt
24062308:	4613      	movlt	r3, r2
2406230a:	6033      	str	r3, [r6, #0]
2406230c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
24062310:	4607      	mov	r7, r0
24062312:	460c      	mov	r4, r1
24062314:	b10a      	cbz	r2, 2406231a <_printf_common+0x26>
24062316:	3301      	adds	r3, #1
24062318:	6033      	str	r3, [r6, #0]
2406231a:	6823      	ldr	r3, [r4, #0]
2406231c:	0699      	lsls	r1, r3, #26
2406231e:	bf42      	ittt	mi
24062320:	6833      	ldrmi	r3, [r6, #0]
24062322:	3302      	addmi	r3, #2
24062324:	6033      	strmi	r3, [r6, #0]
24062326:	6825      	ldr	r5, [r4, #0]
24062328:	f015 0506 	ands.w	r5, r5, #6
2406232c:	d106      	bne.n	2406233c <_printf_common+0x48>
2406232e:	f104 0a19 	add.w	sl, r4, #25
24062332:	68e3      	ldr	r3, [r4, #12]
24062334:	6832      	ldr	r2, [r6, #0]
24062336:	1a9b      	subs	r3, r3, r2
24062338:	42ab      	cmp	r3, r5
2406233a:	dc26      	bgt.n	2406238a <_printf_common+0x96>
2406233c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
24062340:	1e13      	subs	r3, r2, #0
24062342:	6822      	ldr	r2, [r4, #0]
24062344:	bf18      	it	ne
24062346:	2301      	movne	r3, #1
24062348:	0692      	lsls	r2, r2, #26
2406234a:	d42b      	bmi.n	240623a4 <_printf_common+0xb0>
2406234c:	f104 0243 	add.w	r2, r4, #67	; 0x43
24062350:	4649      	mov	r1, r9
24062352:	4638      	mov	r0, r7
24062354:	47c0      	blx	r8
24062356:	3001      	adds	r0, #1
24062358:	d01e      	beq.n	24062398 <_printf_common+0xa4>
2406235a:	6823      	ldr	r3, [r4, #0]
2406235c:	6922      	ldr	r2, [r4, #16]
2406235e:	f003 0306 	and.w	r3, r3, #6
24062362:	2b04      	cmp	r3, #4
24062364:	bf02      	ittt	eq
24062366:	68e5      	ldreq	r5, [r4, #12]
24062368:	6833      	ldreq	r3, [r6, #0]
2406236a:	1aed      	subeq	r5, r5, r3
2406236c:	68a3      	ldr	r3, [r4, #8]
2406236e:	bf0c      	ite	eq
24062370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
24062374:	2500      	movne	r5, #0
24062376:	4293      	cmp	r3, r2
24062378:	bfc4      	itt	gt
2406237a:	1a9b      	subgt	r3, r3, r2
2406237c:	18ed      	addgt	r5, r5, r3
2406237e:	2600      	movs	r6, #0
24062380:	341a      	adds	r4, #26
24062382:	42b5      	cmp	r5, r6
24062384:	d11a      	bne.n	240623bc <_printf_common+0xc8>
24062386:	2000      	movs	r0, #0
24062388:	e008      	b.n	2406239c <_printf_common+0xa8>
2406238a:	2301      	movs	r3, #1
2406238c:	4652      	mov	r2, sl
2406238e:	4649      	mov	r1, r9
24062390:	4638      	mov	r0, r7
24062392:	47c0      	blx	r8
24062394:	3001      	adds	r0, #1
24062396:	d103      	bne.n	240623a0 <_printf_common+0xac>
24062398:	f04f 30ff 	mov.w	r0, #4294967295
2406239c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
240623a0:	3501      	adds	r5, #1
240623a2:	e7c6      	b.n	24062332 <_printf_common+0x3e>
240623a4:	18e1      	adds	r1, r4, r3
240623a6:	1c5a      	adds	r2, r3, #1
240623a8:	2030      	movs	r0, #48	; 0x30
240623aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
240623ae:	4422      	add	r2, r4
240623b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
240623b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
240623b8:	3302      	adds	r3, #2
240623ba:	e7c7      	b.n	2406234c <_printf_common+0x58>
240623bc:	2301      	movs	r3, #1
240623be:	4622      	mov	r2, r4
240623c0:	4649      	mov	r1, r9
240623c2:	4638      	mov	r0, r7
240623c4:	47c0      	blx	r8
240623c6:	3001      	adds	r0, #1
240623c8:	d0e6      	beq.n	24062398 <_printf_common+0xa4>
240623ca:	3601      	adds	r6, #1
240623cc:	e7d9      	b.n	24062382 <_printf_common+0x8e>
	...

240623d0 <_printf_i>:
240623d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
240623d4:	7e0f      	ldrb	r7, [r1, #24]
240623d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
240623d8:	2f78      	cmp	r7, #120	; 0x78
240623da:	4691      	mov	r9, r2
240623dc:	4680      	mov	r8, r0
240623de:	460c      	mov	r4, r1
240623e0:	469a      	mov	sl, r3
240623e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
240623e6:	d807      	bhi.n	240623f8 <_printf_i+0x28>
240623e8:	2f62      	cmp	r7, #98	; 0x62
240623ea:	d80a      	bhi.n	24062402 <_printf_i+0x32>
240623ec:	2f00      	cmp	r7, #0
240623ee:	f000 80d4 	beq.w	2406259a <_printf_i+0x1ca>
240623f2:	2f58      	cmp	r7, #88	; 0x58
240623f4:	f000 80c0 	beq.w	24062578 <_printf_i+0x1a8>
240623f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
240623fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
24062400:	e03a      	b.n	24062478 <_printf_i+0xa8>
24062402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
24062406:	2b15      	cmp	r3, #21
24062408:	d8f6      	bhi.n	240623f8 <_printf_i+0x28>
2406240a:	a101      	add	r1, pc, #4	; (adr r1, 24062410 <_printf_i+0x40>)
2406240c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
24062410:	24062469 	.word	0x24062469
24062414:	2406247d 	.word	0x2406247d
24062418:	240623f9 	.word	0x240623f9
2406241c:	240623f9 	.word	0x240623f9
24062420:	240623f9 	.word	0x240623f9
24062424:	240623f9 	.word	0x240623f9
24062428:	2406247d 	.word	0x2406247d
2406242c:	240623f9 	.word	0x240623f9
24062430:	240623f9 	.word	0x240623f9
24062434:	240623f9 	.word	0x240623f9
24062438:	240623f9 	.word	0x240623f9
2406243c:	24062581 	.word	0x24062581
24062440:	240624a9 	.word	0x240624a9
24062444:	2406253b 	.word	0x2406253b
24062448:	240623f9 	.word	0x240623f9
2406244c:	240623f9 	.word	0x240623f9
24062450:	240625a3 	.word	0x240625a3
24062454:	240623f9 	.word	0x240623f9
24062458:	240624a9 	.word	0x240624a9
2406245c:	240623f9 	.word	0x240623f9
24062460:	240623f9 	.word	0x240623f9
24062464:	24062543 	.word	0x24062543
24062468:	682b      	ldr	r3, [r5, #0]
2406246a:	1d1a      	adds	r2, r3, #4
2406246c:	681b      	ldr	r3, [r3, #0]
2406246e:	602a      	str	r2, [r5, #0]
24062470:	f104 0542 	add.w	r5, r4, #66	; 0x42
24062474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
24062478:	2301      	movs	r3, #1
2406247a:	e09f      	b.n	240625bc <_printf_i+0x1ec>
2406247c:	6820      	ldr	r0, [r4, #0]
2406247e:	682b      	ldr	r3, [r5, #0]
24062480:	0607      	lsls	r7, r0, #24
24062482:	f103 0104 	add.w	r1, r3, #4
24062486:	6029      	str	r1, [r5, #0]
24062488:	d501      	bpl.n	2406248e <_printf_i+0xbe>
2406248a:	681e      	ldr	r6, [r3, #0]
2406248c:	e003      	b.n	24062496 <_printf_i+0xc6>
2406248e:	0646      	lsls	r6, r0, #25
24062490:	d5fb      	bpl.n	2406248a <_printf_i+0xba>
24062492:	f9b3 6000 	ldrsh.w	r6, [r3]
24062496:	2e00      	cmp	r6, #0
24062498:	da03      	bge.n	240624a2 <_printf_i+0xd2>
2406249a:	232d      	movs	r3, #45	; 0x2d
2406249c:	4276      	negs	r6, r6
2406249e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
240624a2:	485a      	ldr	r0, [pc, #360]	; (2406260c <_printf_i+0x23c>)
240624a4:	230a      	movs	r3, #10
240624a6:	e012      	b.n	240624ce <_printf_i+0xfe>
240624a8:	682b      	ldr	r3, [r5, #0]
240624aa:	6820      	ldr	r0, [r4, #0]
240624ac:	1d19      	adds	r1, r3, #4
240624ae:	6029      	str	r1, [r5, #0]
240624b0:	0605      	lsls	r5, r0, #24
240624b2:	d501      	bpl.n	240624b8 <_printf_i+0xe8>
240624b4:	681e      	ldr	r6, [r3, #0]
240624b6:	e002      	b.n	240624be <_printf_i+0xee>
240624b8:	0641      	lsls	r1, r0, #25
240624ba:	d5fb      	bpl.n	240624b4 <_printf_i+0xe4>
240624bc:	881e      	ldrh	r6, [r3, #0]
240624be:	4853      	ldr	r0, [pc, #332]	; (2406260c <_printf_i+0x23c>)
240624c0:	2f6f      	cmp	r7, #111	; 0x6f
240624c2:	bf0c      	ite	eq
240624c4:	2308      	moveq	r3, #8
240624c6:	230a      	movne	r3, #10
240624c8:	2100      	movs	r1, #0
240624ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
240624ce:	6865      	ldr	r5, [r4, #4]
240624d0:	60a5      	str	r5, [r4, #8]
240624d2:	2d00      	cmp	r5, #0
240624d4:	bfa2      	ittt	ge
240624d6:	6821      	ldrge	r1, [r4, #0]
240624d8:	f021 0104 	bicge.w	r1, r1, #4
240624dc:	6021      	strge	r1, [r4, #0]
240624de:	b90e      	cbnz	r6, 240624e4 <_printf_i+0x114>
240624e0:	2d00      	cmp	r5, #0
240624e2:	d04b      	beq.n	2406257c <_printf_i+0x1ac>
240624e4:	4615      	mov	r5, r2
240624e6:	fbb6 f1f3 	udiv	r1, r6, r3
240624ea:	fb03 6711 	mls	r7, r3, r1, r6
240624ee:	5dc7      	ldrb	r7, [r0, r7]
240624f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
240624f4:	4637      	mov	r7, r6
240624f6:	42bb      	cmp	r3, r7
240624f8:	460e      	mov	r6, r1
240624fa:	d9f4      	bls.n	240624e6 <_printf_i+0x116>
240624fc:	2b08      	cmp	r3, #8
240624fe:	d10b      	bne.n	24062518 <_printf_i+0x148>
24062500:	6823      	ldr	r3, [r4, #0]
24062502:	07de      	lsls	r6, r3, #31
24062504:	d508      	bpl.n	24062518 <_printf_i+0x148>
24062506:	6923      	ldr	r3, [r4, #16]
24062508:	6861      	ldr	r1, [r4, #4]
2406250a:	4299      	cmp	r1, r3
2406250c:	bfde      	ittt	le
2406250e:	2330      	movle	r3, #48	; 0x30
24062510:	f805 3c01 	strble.w	r3, [r5, #-1]
24062514:	f105 35ff 	addle.w	r5, r5, #4294967295
24062518:	1b52      	subs	r2, r2, r5
2406251a:	6122      	str	r2, [r4, #16]
2406251c:	f8cd a000 	str.w	sl, [sp]
24062520:	464b      	mov	r3, r9
24062522:	aa03      	add	r2, sp, #12
24062524:	4621      	mov	r1, r4
24062526:	4640      	mov	r0, r8
24062528:	f7ff fee4 	bl	240622f4 <_printf_common>
2406252c:	3001      	adds	r0, #1
2406252e:	d14a      	bne.n	240625c6 <_printf_i+0x1f6>
24062530:	f04f 30ff 	mov.w	r0, #4294967295
24062534:	b004      	add	sp, #16
24062536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2406253a:	6823      	ldr	r3, [r4, #0]
2406253c:	f043 0320 	orr.w	r3, r3, #32
24062540:	6023      	str	r3, [r4, #0]
24062542:	4833      	ldr	r0, [pc, #204]	; (24062610 <_printf_i+0x240>)
24062544:	2778      	movs	r7, #120	; 0x78
24062546:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
2406254a:	6823      	ldr	r3, [r4, #0]
2406254c:	6829      	ldr	r1, [r5, #0]
2406254e:	061f      	lsls	r7, r3, #24
24062550:	f851 6b04 	ldr.w	r6, [r1], #4
24062554:	d402      	bmi.n	2406255c <_printf_i+0x18c>
24062556:	065f      	lsls	r7, r3, #25
24062558:	bf48      	it	mi
2406255a:	b2b6      	uxthmi	r6, r6
2406255c:	07df      	lsls	r7, r3, #31
2406255e:	bf48      	it	mi
24062560:	f043 0320 	orrmi.w	r3, r3, #32
24062564:	6029      	str	r1, [r5, #0]
24062566:	bf48      	it	mi
24062568:	6023      	strmi	r3, [r4, #0]
2406256a:	b91e      	cbnz	r6, 24062574 <_printf_i+0x1a4>
2406256c:	6823      	ldr	r3, [r4, #0]
2406256e:	f023 0320 	bic.w	r3, r3, #32
24062572:	6023      	str	r3, [r4, #0]
24062574:	2310      	movs	r3, #16
24062576:	e7a7      	b.n	240624c8 <_printf_i+0xf8>
24062578:	4824      	ldr	r0, [pc, #144]	; (2406260c <_printf_i+0x23c>)
2406257a:	e7e4      	b.n	24062546 <_printf_i+0x176>
2406257c:	4615      	mov	r5, r2
2406257e:	e7bd      	b.n	240624fc <_printf_i+0x12c>
24062580:	682b      	ldr	r3, [r5, #0]
24062582:	6826      	ldr	r6, [r4, #0]
24062584:	6961      	ldr	r1, [r4, #20]
24062586:	1d18      	adds	r0, r3, #4
24062588:	6028      	str	r0, [r5, #0]
2406258a:	0635      	lsls	r5, r6, #24
2406258c:	681b      	ldr	r3, [r3, #0]
2406258e:	d501      	bpl.n	24062594 <_printf_i+0x1c4>
24062590:	6019      	str	r1, [r3, #0]
24062592:	e002      	b.n	2406259a <_printf_i+0x1ca>
24062594:	0670      	lsls	r0, r6, #25
24062596:	d5fb      	bpl.n	24062590 <_printf_i+0x1c0>
24062598:	8019      	strh	r1, [r3, #0]
2406259a:	2300      	movs	r3, #0
2406259c:	6123      	str	r3, [r4, #16]
2406259e:	4615      	mov	r5, r2
240625a0:	e7bc      	b.n	2406251c <_printf_i+0x14c>
240625a2:	682b      	ldr	r3, [r5, #0]
240625a4:	1d1a      	adds	r2, r3, #4
240625a6:	602a      	str	r2, [r5, #0]
240625a8:	681d      	ldr	r5, [r3, #0]
240625aa:	6862      	ldr	r2, [r4, #4]
240625ac:	2100      	movs	r1, #0
240625ae:	4628      	mov	r0, r5
240625b0:	f7ed fd46 	bl	24050040 <memchr>
240625b4:	b108      	cbz	r0, 240625ba <_printf_i+0x1ea>
240625b6:	1b40      	subs	r0, r0, r5
240625b8:	6060      	str	r0, [r4, #4]
240625ba:	6863      	ldr	r3, [r4, #4]
240625bc:	6123      	str	r3, [r4, #16]
240625be:	2300      	movs	r3, #0
240625c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
240625c4:	e7aa      	b.n	2406251c <_printf_i+0x14c>
240625c6:	6923      	ldr	r3, [r4, #16]
240625c8:	462a      	mov	r2, r5
240625ca:	4649      	mov	r1, r9
240625cc:	4640      	mov	r0, r8
240625ce:	47d0      	blx	sl
240625d0:	3001      	adds	r0, #1
240625d2:	d0ad      	beq.n	24062530 <_printf_i+0x160>
240625d4:	6823      	ldr	r3, [r4, #0]
240625d6:	079b      	lsls	r3, r3, #30
240625d8:	d413      	bmi.n	24062602 <_printf_i+0x232>
240625da:	68e0      	ldr	r0, [r4, #12]
240625dc:	9b03      	ldr	r3, [sp, #12]
240625de:	4298      	cmp	r0, r3
240625e0:	bfb8      	it	lt
240625e2:	4618      	movlt	r0, r3
240625e4:	e7a6      	b.n	24062534 <_printf_i+0x164>
240625e6:	2301      	movs	r3, #1
240625e8:	4632      	mov	r2, r6
240625ea:	4649      	mov	r1, r9
240625ec:	4640      	mov	r0, r8
240625ee:	47d0      	blx	sl
240625f0:	3001      	adds	r0, #1
240625f2:	d09d      	beq.n	24062530 <_printf_i+0x160>
240625f4:	3501      	adds	r5, #1
240625f6:	68e3      	ldr	r3, [r4, #12]
240625f8:	9903      	ldr	r1, [sp, #12]
240625fa:	1a5b      	subs	r3, r3, r1
240625fc:	42ab      	cmp	r3, r5
240625fe:	dcf2      	bgt.n	240625e6 <_printf_i+0x216>
24062600:	e7eb      	b.n	240625da <_printf_i+0x20a>
24062602:	2500      	movs	r5, #0
24062604:	f104 0619 	add.w	r6, r4, #25
24062608:	e7f5      	b.n	240625f6 <_printf_i+0x226>
2406260a:	bf00      	nop
2406260c:	24064344 	.word	0x24064344
24062610:	24064355 	.word	0x24064355

24062614 <__sflush_r>:
24062614:	898a      	ldrh	r2, [r1, #12]
24062616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2406261a:	4605      	mov	r5, r0
2406261c:	0710      	lsls	r0, r2, #28
2406261e:	460c      	mov	r4, r1
24062620:	d458      	bmi.n	240626d4 <__sflush_r+0xc0>
24062622:	684b      	ldr	r3, [r1, #4]
24062624:	2b00      	cmp	r3, #0
24062626:	dc05      	bgt.n	24062634 <__sflush_r+0x20>
24062628:	6c0b      	ldr	r3, [r1, #64]	; 0x40
2406262a:	2b00      	cmp	r3, #0
2406262c:	dc02      	bgt.n	24062634 <__sflush_r+0x20>
2406262e:	2000      	movs	r0, #0
24062630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24062634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
24062636:	2e00      	cmp	r6, #0
24062638:	d0f9      	beq.n	2406262e <__sflush_r+0x1a>
2406263a:	2300      	movs	r3, #0
2406263c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
24062640:	682f      	ldr	r7, [r5, #0]
24062642:	6a21      	ldr	r1, [r4, #32]
24062644:	602b      	str	r3, [r5, #0]
24062646:	d032      	beq.n	240626ae <__sflush_r+0x9a>
24062648:	6d60      	ldr	r0, [r4, #84]	; 0x54
2406264a:	89a3      	ldrh	r3, [r4, #12]
2406264c:	075a      	lsls	r2, r3, #29
2406264e:	d505      	bpl.n	2406265c <__sflush_r+0x48>
24062650:	6863      	ldr	r3, [r4, #4]
24062652:	1ac0      	subs	r0, r0, r3
24062654:	6b63      	ldr	r3, [r4, #52]	; 0x34
24062656:	b10b      	cbz	r3, 2406265c <__sflush_r+0x48>
24062658:	6c23      	ldr	r3, [r4, #64]	; 0x40
2406265a:	1ac0      	subs	r0, r0, r3
2406265c:	2300      	movs	r3, #0
2406265e:	4602      	mov	r2, r0
24062660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
24062662:	6a21      	ldr	r1, [r4, #32]
24062664:	4628      	mov	r0, r5
24062666:	47b0      	blx	r6
24062668:	1c43      	adds	r3, r0, #1
2406266a:	89a3      	ldrh	r3, [r4, #12]
2406266c:	d106      	bne.n	2406267c <__sflush_r+0x68>
2406266e:	6829      	ldr	r1, [r5, #0]
24062670:	291d      	cmp	r1, #29
24062672:	d82b      	bhi.n	240626cc <__sflush_r+0xb8>
24062674:	4a29      	ldr	r2, [pc, #164]	; (2406271c <__sflush_r+0x108>)
24062676:	410a      	asrs	r2, r1
24062678:	07d6      	lsls	r6, r2, #31
2406267a:	d427      	bmi.n	240626cc <__sflush_r+0xb8>
2406267c:	2200      	movs	r2, #0
2406267e:	6062      	str	r2, [r4, #4]
24062680:	04d9      	lsls	r1, r3, #19
24062682:	6922      	ldr	r2, [r4, #16]
24062684:	6022      	str	r2, [r4, #0]
24062686:	d504      	bpl.n	24062692 <__sflush_r+0x7e>
24062688:	1c42      	adds	r2, r0, #1
2406268a:	d101      	bne.n	24062690 <__sflush_r+0x7c>
2406268c:	682b      	ldr	r3, [r5, #0]
2406268e:	b903      	cbnz	r3, 24062692 <__sflush_r+0x7e>
24062690:	6560      	str	r0, [r4, #84]	; 0x54
24062692:	6b61      	ldr	r1, [r4, #52]	; 0x34
24062694:	602f      	str	r7, [r5, #0]
24062696:	2900      	cmp	r1, #0
24062698:	d0c9      	beq.n	2406262e <__sflush_r+0x1a>
2406269a:	f104 0344 	add.w	r3, r4, #68	; 0x44
2406269e:	4299      	cmp	r1, r3
240626a0:	d002      	beq.n	240626a8 <__sflush_r+0x94>
240626a2:	4628      	mov	r0, r5
240626a4:	f7ff fb36 	bl	24061d14 <_free_r>
240626a8:	2000      	movs	r0, #0
240626aa:	6360      	str	r0, [r4, #52]	; 0x34
240626ac:	e7c0      	b.n	24062630 <__sflush_r+0x1c>
240626ae:	2301      	movs	r3, #1
240626b0:	4628      	mov	r0, r5
240626b2:	47b0      	blx	r6
240626b4:	1c41      	adds	r1, r0, #1
240626b6:	d1c8      	bne.n	2406264a <__sflush_r+0x36>
240626b8:	682b      	ldr	r3, [r5, #0]
240626ba:	2b00      	cmp	r3, #0
240626bc:	d0c5      	beq.n	2406264a <__sflush_r+0x36>
240626be:	2b1d      	cmp	r3, #29
240626c0:	d001      	beq.n	240626c6 <__sflush_r+0xb2>
240626c2:	2b16      	cmp	r3, #22
240626c4:	d101      	bne.n	240626ca <__sflush_r+0xb6>
240626c6:	602f      	str	r7, [r5, #0]
240626c8:	e7b1      	b.n	2406262e <__sflush_r+0x1a>
240626ca:	89a3      	ldrh	r3, [r4, #12]
240626cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240626d0:	81a3      	strh	r3, [r4, #12]
240626d2:	e7ad      	b.n	24062630 <__sflush_r+0x1c>
240626d4:	690f      	ldr	r7, [r1, #16]
240626d6:	2f00      	cmp	r7, #0
240626d8:	d0a9      	beq.n	2406262e <__sflush_r+0x1a>
240626da:	0793      	lsls	r3, r2, #30
240626dc:	680e      	ldr	r6, [r1, #0]
240626de:	bf08      	it	eq
240626e0:	694b      	ldreq	r3, [r1, #20]
240626e2:	600f      	str	r7, [r1, #0]
240626e4:	bf18      	it	ne
240626e6:	2300      	movne	r3, #0
240626e8:	eba6 0807 	sub.w	r8, r6, r7
240626ec:	608b      	str	r3, [r1, #8]
240626ee:	f1b8 0f00 	cmp.w	r8, #0
240626f2:	dd9c      	ble.n	2406262e <__sflush_r+0x1a>
240626f4:	6a21      	ldr	r1, [r4, #32]
240626f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
240626f8:	4643      	mov	r3, r8
240626fa:	463a      	mov	r2, r7
240626fc:	4628      	mov	r0, r5
240626fe:	47b0      	blx	r6
24062700:	2800      	cmp	r0, #0
24062702:	dc06      	bgt.n	24062712 <__sflush_r+0xfe>
24062704:	89a3      	ldrh	r3, [r4, #12]
24062706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2406270a:	81a3      	strh	r3, [r4, #12]
2406270c:	f04f 30ff 	mov.w	r0, #4294967295
24062710:	e78e      	b.n	24062630 <__sflush_r+0x1c>
24062712:	4407      	add	r7, r0
24062714:	eba8 0800 	sub.w	r8, r8, r0
24062718:	e7e9      	b.n	240626ee <__sflush_r+0xda>
2406271a:	bf00      	nop
2406271c:	dfbffffe 	.word	0xdfbffffe

24062720 <_fflush_r>:
24062720:	b538      	push	{r3, r4, r5, lr}
24062722:	690b      	ldr	r3, [r1, #16]
24062724:	4605      	mov	r5, r0
24062726:	460c      	mov	r4, r1
24062728:	b913      	cbnz	r3, 24062730 <_fflush_r+0x10>
2406272a:	2500      	movs	r5, #0
2406272c:	4628      	mov	r0, r5
2406272e:	bd38      	pop	{r3, r4, r5, pc}
24062730:	b118      	cbz	r0, 2406273a <_fflush_r+0x1a>
24062732:	6a03      	ldr	r3, [r0, #32]
24062734:	b90b      	cbnz	r3, 2406273a <_fflush_r+0x1a>
24062736:	f7ff f89f 	bl	24061878 <__sinit>
2406273a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2406273e:	2b00      	cmp	r3, #0
24062740:	d0f3      	beq.n	2406272a <_fflush_r+0xa>
24062742:	6e62      	ldr	r2, [r4, #100]	; 0x64
24062744:	07d0      	lsls	r0, r2, #31
24062746:	d404      	bmi.n	24062752 <_fflush_r+0x32>
24062748:	0599      	lsls	r1, r3, #22
2406274a:	d402      	bmi.n	24062752 <_fflush_r+0x32>
2406274c:	6da0      	ldr	r0, [r4, #88]	; 0x58
2406274e:	f7ff faca 	bl	24061ce6 <__retarget_lock_acquire_recursive>
24062752:	4628      	mov	r0, r5
24062754:	4621      	mov	r1, r4
24062756:	f7ff ff5d 	bl	24062614 <__sflush_r>
2406275a:	6e63      	ldr	r3, [r4, #100]	; 0x64
2406275c:	07da      	lsls	r2, r3, #31
2406275e:	4605      	mov	r5, r0
24062760:	d4e4      	bmi.n	2406272c <_fflush_r+0xc>
24062762:	89a3      	ldrh	r3, [r4, #12]
24062764:	059b      	lsls	r3, r3, #22
24062766:	d4e1      	bmi.n	2406272c <_fflush_r+0xc>
24062768:	6da0      	ldr	r0, [r4, #88]	; 0x58
2406276a:	f7ff fabd 	bl	24061ce8 <__retarget_lock_release_recursive>
2406276e:	e7dd      	b.n	2406272c <_fflush_r+0xc>

24062770 <__swhatbuf_r>:
24062770:	b570      	push	{r4, r5, r6, lr}
24062772:	460c      	mov	r4, r1
24062774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
24062778:	2900      	cmp	r1, #0
2406277a:	b096      	sub	sp, #88	; 0x58
2406277c:	4615      	mov	r5, r2
2406277e:	461e      	mov	r6, r3
24062780:	da0d      	bge.n	2406279e <__swhatbuf_r+0x2e>
24062782:	89a3      	ldrh	r3, [r4, #12]
24062784:	f013 0f80 	tst.w	r3, #128	; 0x80
24062788:	f04f 0100 	mov.w	r1, #0
2406278c:	bf0c      	ite	eq
2406278e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
24062792:	2340      	movne	r3, #64	; 0x40
24062794:	2000      	movs	r0, #0
24062796:	6031      	str	r1, [r6, #0]
24062798:	602b      	str	r3, [r5, #0]
2406279a:	b016      	add	sp, #88	; 0x58
2406279c:	bd70      	pop	{r4, r5, r6, pc}
2406279e:	466a      	mov	r2, sp
240627a0:	f000 f892 	bl	240628c8 <_fstat_r>
240627a4:	2800      	cmp	r0, #0
240627a6:	dbec      	blt.n	24062782 <__swhatbuf_r+0x12>
240627a8:	9901      	ldr	r1, [sp, #4]
240627aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
240627ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
240627b2:	4259      	negs	r1, r3
240627b4:	4159      	adcs	r1, r3
240627b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
240627ba:	e7eb      	b.n	24062794 <__swhatbuf_r+0x24>

240627bc <__smakebuf_r>:
240627bc:	898b      	ldrh	r3, [r1, #12]
240627be:	b573      	push	{r0, r1, r4, r5, r6, lr}
240627c0:	079d      	lsls	r5, r3, #30
240627c2:	4606      	mov	r6, r0
240627c4:	460c      	mov	r4, r1
240627c6:	d507      	bpl.n	240627d8 <__smakebuf_r+0x1c>
240627c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
240627cc:	6023      	str	r3, [r4, #0]
240627ce:	6123      	str	r3, [r4, #16]
240627d0:	2301      	movs	r3, #1
240627d2:	6163      	str	r3, [r4, #20]
240627d4:	b002      	add	sp, #8
240627d6:	bd70      	pop	{r4, r5, r6, pc}
240627d8:	ab01      	add	r3, sp, #4
240627da:	466a      	mov	r2, sp
240627dc:	f7ff ffc8 	bl	24062770 <__swhatbuf_r>
240627e0:	9900      	ldr	r1, [sp, #0]
240627e2:	4605      	mov	r5, r0
240627e4:	4630      	mov	r0, r6
240627e6:	f7fe fe93 	bl	24061510 <_malloc_r>
240627ea:	b948      	cbnz	r0, 24062800 <__smakebuf_r+0x44>
240627ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
240627f0:	059a      	lsls	r2, r3, #22
240627f2:	d4ef      	bmi.n	240627d4 <__smakebuf_r+0x18>
240627f4:	f023 0303 	bic.w	r3, r3, #3
240627f8:	f043 0302 	orr.w	r3, r3, #2
240627fc:	81a3      	strh	r3, [r4, #12]
240627fe:	e7e3      	b.n	240627c8 <__smakebuf_r+0xc>
24062800:	89a3      	ldrh	r3, [r4, #12]
24062802:	6020      	str	r0, [r4, #0]
24062804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24062808:	81a3      	strh	r3, [r4, #12]
2406280a:	9b00      	ldr	r3, [sp, #0]
2406280c:	6163      	str	r3, [r4, #20]
2406280e:	9b01      	ldr	r3, [sp, #4]
24062810:	6120      	str	r0, [r4, #16]
24062812:	b15b      	cbz	r3, 2406282c <__smakebuf_r+0x70>
24062814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
24062818:	4630      	mov	r0, r6
2406281a:	f000 f867 	bl	240628ec <_isatty_r>
2406281e:	b128      	cbz	r0, 2406282c <__smakebuf_r+0x70>
24062820:	89a3      	ldrh	r3, [r4, #12]
24062822:	f023 0303 	bic.w	r3, r3, #3
24062826:	f043 0301 	orr.w	r3, r3, #1
2406282a:	81a3      	strh	r3, [r4, #12]
2406282c:	89a3      	ldrh	r3, [r4, #12]
2406282e:	431d      	orrs	r5, r3
24062830:	81a5      	strh	r5, [r4, #12]
24062832:	e7cf      	b.n	240627d4 <__smakebuf_r+0x18>

24062834 <memmove>:
24062834:	4288      	cmp	r0, r1
24062836:	b510      	push	{r4, lr}
24062838:	eb01 0402 	add.w	r4, r1, r2
2406283c:	d902      	bls.n	24062844 <memmove+0x10>
2406283e:	4284      	cmp	r4, r0
24062840:	4623      	mov	r3, r4
24062842:	d807      	bhi.n	24062854 <memmove+0x20>
24062844:	1e43      	subs	r3, r0, #1
24062846:	42a1      	cmp	r1, r4
24062848:	d008      	beq.n	2406285c <memmove+0x28>
2406284a:	f811 2b01 	ldrb.w	r2, [r1], #1
2406284e:	f803 2f01 	strb.w	r2, [r3, #1]!
24062852:	e7f8      	b.n	24062846 <memmove+0x12>
24062854:	4402      	add	r2, r0
24062856:	4601      	mov	r1, r0
24062858:	428a      	cmp	r2, r1
2406285a:	d100      	bne.n	2406285e <memmove+0x2a>
2406285c:	bd10      	pop	{r4, pc}
2406285e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
24062862:	f802 4d01 	strb.w	r4, [r2, #-1]!
24062866:	e7f7      	b.n	24062858 <memmove+0x24>

24062868 <_raise_r>:
24062868:	291f      	cmp	r1, #31
2406286a:	b538      	push	{r3, r4, r5, lr}
2406286c:	4604      	mov	r4, r0
2406286e:	460d      	mov	r5, r1
24062870:	d904      	bls.n	2406287c <_raise_r+0x14>
24062872:	2316      	movs	r3, #22
24062874:	6003      	str	r3, [r0, #0]
24062876:	f04f 30ff 	mov.w	r0, #4294967295
2406287a:	bd38      	pop	{r3, r4, r5, pc}
2406287c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
2406287e:	b112      	cbz	r2, 24062886 <_raise_r+0x1e>
24062880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
24062884:	b94b      	cbnz	r3, 2406289a <_raise_r+0x32>
24062886:	4620      	mov	r0, r4
24062888:	f000 f852 	bl	24062930 <_getpid_r>
2406288c:	462a      	mov	r2, r5
2406288e:	4601      	mov	r1, r0
24062890:	4620      	mov	r0, r4
24062892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
24062896:	f000 b839 	b.w	2406290c <_kill_r>
2406289a:	2b01      	cmp	r3, #1
2406289c:	d00a      	beq.n	240628b4 <_raise_r+0x4c>
2406289e:	1c59      	adds	r1, r3, #1
240628a0:	d103      	bne.n	240628aa <_raise_r+0x42>
240628a2:	2316      	movs	r3, #22
240628a4:	6003      	str	r3, [r0, #0]
240628a6:	2001      	movs	r0, #1
240628a8:	e7e7      	b.n	2406287a <_raise_r+0x12>
240628aa:	2400      	movs	r4, #0
240628ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
240628b0:	4628      	mov	r0, r5
240628b2:	4798      	blx	r3
240628b4:	2000      	movs	r0, #0
240628b6:	e7e0      	b.n	2406287a <_raise_r+0x12>

240628b8 <raise>:
240628b8:	4b02      	ldr	r3, [pc, #8]	; (240628c4 <raise+0xc>)
240628ba:	4601      	mov	r1, r0
240628bc:	6818      	ldr	r0, [r3, #0]
240628be:	f7ff bfd3 	b.w	24062868 <_raise_r>
240628c2:	bf00      	nop
240628c4:	200000ac 	.word	0x200000ac

240628c8 <_fstat_r>:
240628c8:	b538      	push	{r3, r4, r5, lr}
240628ca:	4d07      	ldr	r5, [pc, #28]	; (240628e8 <_fstat_r+0x20>)
240628cc:	2300      	movs	r3, #0
240628ce:	4604      	mov	r4, r0
240628d0:	4608      	mov	r0, r1
240628d2:	4611      	mov	r1, r2
240628d4:	602b      	str	r3, [r5, #0]
240628d6:	f7f1 f92a 	bl	24053b2e <_fstat>
240628da:	1c43      	adds	r3, r0, #1
240628dc:	d102      	bne.n	240628e4 <_fstat_r+0x1c>
240628de:	682b      	ldr	r3, [r5, #0]
240628e0:	b103      	cbz	r3, 240628e4 <_fstat_r+0x1c>
240628e2:	6023      	str	r3, [r4, #0]
240628e4:	bd38      	pop	{r3, r4, r5, pc}
240628e6:	bf00      	nop
240628e8:	20000768 	.word	0x20000768

240628ec <_isatty_r>:
240628ec:	b538      	push	{r3, r4, r5, lr}
240628ee:	4d06      	ldr	r5, [pc, #24]	; (24062908 <_isatty_r+0x1c>)
240628f0:	2300      	movs	r3, #0
240628f2:	4604      	mov	r4, r0
240628f4:	4608      	mov	r0, r1
240628f6:	602b      	str	r3, [r5, #0]
240628f8:	f7f1 f929 	bl	24053b4e <_isatty>
240628fc:	1c43      	adds	r3, r0, #1
240628fe:	d102      	bne.n	24062906 <_isatty_r+0x1a>
24062900:	682b      	ldr	r3, [r5, #0]
24062902:	b103      	cbz	r3, 24062906 <_isatty_r+0x1a>
24062904:	6023      	str	r3, [r4, #0]
24062906:	bd38      	pop	{r3, r4, r5, pc}
24062908:	20000768 	.word	0x20000768

2406290c <_kill_r>:
2406290c:	b538      	push	{r3, r4, r5, lr}
2406290e:	4d07      	ldr	r5, [pc, #28]	; (2406292c <_kill_r+0x20>)
24062910:	2300      	movs	r3, #0
24062912:	4604      	mov	r4, r0
24062914:	4608      	mov	r0, r1
24062916:	4611      	mov	r1, r2
24062918:	602b      	str	r3, [r5, #0]
2406291a:	f7f1 f8a9 	bl	24053a70 <_kill>
2406291e:	1c43      	adds	r3, r0, #1
24062920:	d102      	bne.n	24062928 <_kill_r+0x1c>
24062922:	682b      	ldr	r3, [r5, #0]
24062924:	b103      	cbz	r3, 24062928 <_kill_r+0x1c>
24062926:	6023      	str	r3, [r4, #0]
24062928:	bd38      	pop	{r3, r4, r5, pc}
2406292a:	bf00      	nop
2406292c:	20000768 	.word	0x20000768

24062930 <_getpid_r>:
24062930:	f7f1 b896 	b.w	24053a60 <_getpid>

24062934 <_init>:
24062934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24062936:	bf00      	nop
24062938:	bcf8      	pop	{r3, r4, r5, r6, r7}
2406293a:	bc08      	pop	{r3}
2406293c:	469e      	mov	lr, r3
2406293e:	4770      	bx	lr

24062940 <_fini>:
24062940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24062942:	bf00      	nop
24062944:	bcf8      	pop	{r3, r4, r5, r6, r7}
24062946:	bc08      	pop	{r3}
24062948:	469e      	mov	lr, r3
2406294a:	4770      	bx	lr
