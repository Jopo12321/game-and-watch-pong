
GamePong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  24000000  24000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 ._itcram      00000000  00000100  00000100  0004009c  2**0
                  CONTENTS
  2 ._itcram_hot  00000000  00000100  00000100  0004009c  2**0
                  CONTENTS
  3 ._ram_uc      0004b000  240002b0  240002b0  000102ac  2**4
                  ALLOC
  4 ._ram_exec    00000000  24050000  24050000  0004009c  2**0
                  CONTENTS
  5 ._extflash    00000000  90000000  90000000  0004009c  2**0
                  CONTENTS
  6 ._configflash 00000000  900ff000  900ff000  0004009c  2**0
                  CONTENTS
  7 ._ram         00000000  24050000  24050000  0004009c  2**0
                  CONTENTS
  8 ._ahbram      00017700  30000000  30000000  00050000  2**2
                  ALLOC
  9 .text         00010568  24050000  24050000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .rodata       00001180  24060568  24060568  00030568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init_array   00000004  240616e8  240616e8  000316e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .fini_array   00000004  240616ec  240616ec  000316ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         0000009c  20000000  240616f0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 ._flash_end   00000000  240616f0  240616f0  0004009c  2**0
                  CONTENTS
 15 .bss          0000067c  2000009c  2000009c  0001009c  2**2
                  ALLOC
 16 ._persistent  00000000  20000718  20000718  0004009c  2**0
                  CONTENTS
 17 ._user_heap   00008008  20000718  20000718  0001009c  2**0
                  ALLOC
 18 ._user_stack  000178e0  20008720  20008720  0001009c  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  0004009c  2**0
                  CONTENTS, READONLY
 20 .comment      00000043  00000000  00000000  000400ca  2**0
                  CONTENTS, READONLY
 21 .debug_info   00021c12  00000000  00000000  0004010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00004391  00000000  00000000  00061d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 000019b8  00000000  00000000  000660b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0003782d  00000000  00000000  00067a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   0002344f  00000000  00000000  0009f295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0015da95  00000000  00000000  000c26e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00001383  00000000  00000000  00220179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_frame  000076f0  00000000  00000000  002214fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 00000064  00000000  00000000  00228bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24050000 <__do_global_dtors_aux>:
24050000:	b510      	push	{r4, lr}
24050002:	4c05      	ldr	r4, [pc, #20]	; (24050018 <__do_global_dtors_aux+0x18>)
24050004:	7823      	ldrb	r3, [r4, #0]
24050006:	b933      	cbnz	r3, 24050016 <__do_global_dtors_aux+0x16>
24050008:	4b04      	ldr	r3, [pc, #16]	; (2405001c <__do_global_dtors_aux+0x1c>)
2405000a:	b113      	cbz	r3, 24050012 <__do_global_dtors_aux+0x12>
2405000c:	4804      	ldr	r0, [pc, #16]	; (24050020 <__do_global_dtors_aux+0x20>)
2405000e:	f3af 8000 	nop.w
24050012:	2301      	movs	r3, #1
24050014:	7023      	strb	r3, [r4, #0]
24050016:	bd10      	pop	{r4, pc}
24050018:	2000009c 	.word	0x2000009c
2405001c:	00000000 	.word	0x00000000
24050020:	24060550 	.word	0x24060550

24050024 <frame_dummy>:
24050024:	b508      	push	{r3, lr}
24050026:	4b03      	ldr	r3, [pc, #12]	; (24050034 <frame_dummy+0x10>)
24050028:	b11b      	cbz	r3, 24050032 <frame_dummy+0xe>
2405002a:	4903      	ldr	r1, [pc, #12]	; (24050038 <frame_dummy+0x14>)
2405002c:	4803      	ldr	r0, [pc, #12]	; (2405003c <frame_dummy+0x18>)
2405002e:	f3af 8000 	nop.w
24050032:	bd08      	pop	{r3, pc}
24050034:	00000000 	.word	0x00000000
24050038:	200000a0 	.word	0x200000a0
2405003c:	24060550 	.word	0x24060550

24050040 <memchr>:
24050040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
24050044:	2a10      	cmp	r2, #16
24050046:	db2b      	blt.n	240500a0 <memchr+0x60>
24050048:	f010 0f07 	tst.w	r0, #7
2405004c:	d008      	beq.n	24050060 <memchr+0x20>
2405004e:	f810 3b01 	ldrb.w	r3, [r0], #1
24050052:	3a01      	subs	r2, #1
24050054:	428b      	cmp	r3, r1
24050056:	d02d      	beq.n	240500b4 <memchr+0x74>
24050058:	f010 0f07 	tst.w	r0, #7
2405005c:	b342      	cbz	r2, 240500b0 <memchr+0x70>
2405005e:	d1f6      	bne.n	2405004e <memchr+0xe>
24050060:	b4f0      	push	{r4, r5, r6, r7}
24050062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
24050066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2405006a:	f022 0407 	bic.w	r4, r2, #7
2405006e:	f07f 0700 	mvns.w	r7, #0
24050072:	2300      	movs	r3, #0
24050074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
24050078:	3c08      	subs	r4, #8
2405007a:	ea85 0501 	eor.w	r5, r5, r1
2405007e:	ea86 0601 	eor.w	r6, r6, r1
24050082:	fa85 f547 	uadd8	r5, r5, r7
24050086:	faa3 f587 	sel	r5, r3, r7
2405008a:	fa86 f647 	uadd8	r6, r6, r7
2405008e:	faa5 f687 	sel	r6, r5, r7
24050092:	b98e      	cbnz	r6, 240500b8 <memchr+0x78>
24050094:	d1ee      	bne.n	24050074 <memchr+0x34>
24050096:	bcf0      	pop	{r4, r5, r6, r7}
24050098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2405009c:	f002 0207 	and.w	r2, r2, #7
240500a0:	b132      	cbz	r2, 240500b0 <memchr+0x70>
240500a2:	f810 3b01 	ldrb.w	r3, [r0], #1
240500a6:	3a01      	subs	r2, #1
240500a8:	ea83 0301 	eor.w	r3, r3, r1
240500ac:	b113      	cbz	r3, 240500b4 <memchr+0x74>
240500ae:	d1f8      	bne.n	240500a2 <memchr+0x62>
240500b0:	2000      	movs	r0, #0
240500b2:	4770      	bx	lr
240500b4:	3801      	subs	r0, #1
240500b6:	4770      	bx	lr
240500b8:	2d00      	cmp	r5, #0
240500ba:	bf06      	itte	eq
240500bc:	4635      	moveq	r5, r6
240500be:	3803      	subeq	r0, #3
240500c0:	3807      	subne	r0, #7
240500c2:	f015 0f01 	tst.w	r5, #1
240500c6:	d107      	bne.n	240500d8 <memchr+0x98>
240500c8:	3001      	adds	r0, #1
240500ca:	f415 7f80 	tst.w	r5, #256	; 0x100
240500ce:	bf02      	ittt	eq
240500d0:	3001      	addeq	r0, #1
240500d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
240500d6:	3001      	addeq	r0, #1
240500d8:	bcf0      	pop	{r4, r5, r6, r7}
240500da:	3801      	subs	r0, #1
240500dc:	4770      	bx	lr
240500de:	bf00      	nop

240500e0 <buttons_get>:
#define B_TIME (1 << 6)
#define B_GAME (1 << 7)
#define B_PAUSE (1 << 8)
#define B_POWER (1 << 9)

uint32_t buttons_get() {
240500e0:	b580      	push	{r7, lr}
240500e2:	b084      	sub	sp, #16
240500e4:	af00      	add	r7, sp, #0
    bool left = HAL_GPIO_ReadPin(BTN_Left_GPIO_Port, BTN_Left_Pin) == GPIO_PIN_RESET;
240500e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
240500ea:	4843      	ldr	r0, [pc, #268]	; (240501f8 <buttons_get+0x118>)
240500ec:	f007 fe8c 	bl	24057e08 <HAL_GPIO_ReadPin>
240500f0:	4603      	mov	r3, r0
240500f2:	2b00      	cmp	r3, #0
240500f4:	bf0c      	ite	eq
240500f6:	2301      	moveq	r3, #1
240500f8:	2300      	movne	r3, #0
240500fa:	73fb      	strb	r3, [r7, #15]
    bool right = HAL_GPIO_ReadPin(BTN_Right_GPIO_Port, BTN_Right_Pin) == GPIO_PIN_RESET;
240500fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24050100:	483d      	ldr	r0, [pc, #244]	; (240501f8 <buttons_get+0x118>)
24050102:	f007 fe81 	bl	24057e08 <HAL_GPIO_ReadPin>
24050106:	4603      	mov	r3, r0
24050108:	2b00      	cmp	r3, #0
2405010a:	bf0c      	ite	eq
2405010c:	2301      	moveq	r3, #1
2405010e:	2300      	movne	r3, #0
24050110:	73bb      	strb	r3, [r7, #14]
    bool up = HAL_GPIO_ReadPin(BTN_Up_GPIO_Port, BTN_Up_Pin) == GPIO_PIN_RESET ;
24050112:	2101      	movs	r1, #1
24050114:	4838      	ldr	r0, [pc, #224]	; (240501f8 <buttons_get+0x118>)
24050116:	f007 fe77 	bl	24057e08 <HAL_GPIO_ReadPin>
2405011a:	4603      	mov	r3, r0
2405011c:	2b00      	cmp	r3, #0
2405011e:	bf0c      	ite	eq
24050120:	2301      	moveq	r3, #1
24050122:	2300      	movne	r3, #0
24050124:	737b      	strb	r3, [r7, #13]
    bool down = HAL_GPIO_ReadPin(BTN_Down_GPIO_Port, BTN_Down_Pin) == GPIO_PIN_RESET;
24050126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2405012a:	4833      	ldr	r0, [pc, #204]	; (240501f8 <buttons_get+0x118>)
2405012c:	f007 fe6c 	bl	24057e08 <HAL_GPIO_ReadPin>
24050130:	4603      	mov	r3, r0
24050132:	2b00      	cmp	r3, #0
24050134:	bf0c      	ite	eq
24050136:	2301      	moveq	r3, #1
24050138:	2300      	movne	r3, #0
2405013a:	733b      	strb	r3, [r7, #12]
    bool a = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin) == GPIO_PIN_RESET;
2405013c:	f44f 7100 	mov.w	r1, #512	; 0x200
24050140:	482d      	ldr	r0, [pc, #180]	; (240501f8 <buttons_get+0x118>)
24050142:	f007 fe61 	bl	24057e08 <HAL_GPIO_ReadPin>
24050146:	4603      	mov	r3, r0
24050148:	2b00      	cmp	r3, #0
2405014a:	bf0c      	ite	eq
2405014c:	2301      	moveq	r3, #1
2405014e:	2300      	movne	r3, #0
24050150:	72fb      	strb	r3, [r7, #11]
    bool b = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_B_Pin) == GPIO_PIN_RESET;
24050152:	2120      	movs	r1, #32
24050154:	4828      	ldr	r0, [pc, #160]	; (240501f8 <buttons_get+0x118>)
24050156:	f007 fe57 	bl	24057e08 <HAL_GPIO_ReadPin>
2405015a:	4603      	mov	r3, r0
2405015c:	2b00      	cmp	r3, #0
2405015e:	bf0c      	ite	eq
24050160:	2301      	moveq	r3, #1
24050162:	2300      	movne	r3, #0
24050164:	72bb      	strb	r3, [r7, #10]
    bool time = HAL_GPIO_ReadPin(BTN_TIME_GPIO_Port, BTN_TIME_Pin) == GPIO_PIN_RESET;
24050166:	2120      	movs	r1, #32
24050168:	4824      	ldr	r0, [pc, #144]	; (240501fc <buttons_get+0x11c>)
2405016a:	f007 fe4d 	bl	24057e08 <HAL_GPIO_ReadPin>
2405016e:	4603      	mov	r3, r0
24050170:	2b00      	cmp	r3, #0
24050172:	bf0c      	ite	eq
24050174:	2301      	moveq	r3, #1
24050176:	2300      	movne	r3, #0
24050178:	727b      	strb	r3, [r7, #9]
    bool game = HAL_GPIO_ReadPin(BTN_GAME_GPIO_Port, BTN_GAME_Pin) == GPIO_PIN_RESET;
2405017a:	2102      	movs	r1, #2
2405017c:	481f      	ldr	r0, [pc, #124]	; (240501fc <buttons_get+0x11c>)
2405017e:	f007 fe43 	bl	24057e08 <HAL_GPIO_ReadPin>
24050182:	4603      	mov	r3, r0
24050184:	2b00      	cmp	r3, #0
24050186:	bf0c      	ite	eq
24050188:	2301      	moveq	r3, #1
2405018a:	2300      	movne	r3, #0
2405018c:	723b      	strb	r3, [r7, #8]
    bool pause = HAL_GPIO_ReadPin(BTN_PAUSE_GPIO_Port, BTN_PAUSE_Pin) == GPIO_PIN_RESET;
2405018e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24050192:	481a      	ldr	r0, [pc, #104]	; (240501fc <buttons_get+0x11c>)
24050194:	f007 fe38 	bl	24057e08 <HAL_GPIO_ReadPin>
24050198:	4603      	mov	r3, r0
2405019a:	2b00      	cmp	r3, #0
2405019c:	bf0c      	ite	eq
2405019e:	2301      	moveq	r3, #1
240501a0:	2300      	movne	r3, #0
240501a2:	71fb      	strb	r3, [r7, #7]
    bool power = HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == GPIO_PIN_RESET;
240501a4:	2101      	movs	r1, #1
240501a6:	4816      	ldr	r0, [pc, #88]	; (24050200 <buttons_get+0x120>)
240501a8:	f007 fe2e 	bl	24057e08 <HAL_GPIO_ReadPin>
240501ac:	4603      	mov	r3, r0
240501ae:	2b00      	cmp	r3, #0
240501b0:	bf0c      	ite	eq
240501b2:	2301      	moveq	r3, #1
240501b4:	2300      	movne	r3, #0
240501b6:	71bb      	strb	r3, [r7, #6]

    return (
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) | (time << 6) | (game << 7) | (pause << 8) | (power << 9)
240501b8:	7bfa      	ldrb	r2, [r7, #15]
240501ba:	7b7b      	ldrb	r3, [r7, #13]
240501bc:	005b      	lsls	r3, r3, #1
240501be:	431a      	orrs	r2, r3
240501c0:	7bbb      	ldrb	r3, [r7, #14]
240501c2:	009b      	lsls	r3, r3, #2
240501c4:	431a      	orrs	r2, r3
240501c6:	7b3b      	ldrb	r3, [r7, #12]
240501c8:	00db      	lsls	r3, r3, #3
240501ca:	431a      	orrs	r2, r3
240501cc:	7afb      	ldrb	r3, [r7, #11]
240501ce:	011b      	lsls	r3, r3, #4
240501d0:	431a      	orrs	r2, r3
240501d2:	7abb      	ldrb	r3, [r7, #10]
240501d4:	015b      	lsls	r3, r3, #5
240501d6:	431a      	orrs	r2, r3
240501d8:	7a7b      	ldrb	r3, [r7, #9]
240501da:	019b      	lsls	r3, r3, #6
240501dc:	431a      	orrs	r2, r3
240501de:	7a3b      	ldrb	r3, [r7, #8]
240501e0:	01db      	lsls	r3, r3, #7
240501e2:	431a      	orrs	r2, r3
240501e4:	79fb      	ldrb	r3, [r7, #7]
240501e6:	021b      	lsls	r3, r3, #8
240501e8:	431a      	orrs	r2, r3
240501ea:	79bb      	ldrb	r3, [r7, #6]
240501ec:	025b      	lsls	r3, r3, #9
240501ee:	4313      	orrs	r3, r2
    );


}
240501f0:	4618      	mov	r0, r3
240501f2:	3710      	adds	r7, #16
240501f4:	46bd      	mov	sp, r7
240501f6:	bd80      	pop	{r7, pc}
240501f8:	58020c00 	.word	0x58020c00
240501fc:	58020800 	.word	0x58020800
24050200:	58020000 	.word	0x58020000

24050204 <flash_memory_map>:
#include "flash.h"
#include "main.h"

void flash_memory_map(OSPI_HandleTypeDef *spi) {
24050204:	b580      	push	{r7, lr}
24050206:	b0ac      	sub	sp, #176	; 0xb0
24050208:	af00      	add	r7, sp, #0
2405020a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef cmd = {
2405020c:	f107 0360 	add.w	r3, r7, #96	; 0x60
24050210:	2250      	movs	r2, #80	; 0x50
24050212:	2100      	movs	r1, #0
24050214:	4618      	mov	r0, r3
24050216:	f00f f940 	bl	2405f49a <memset>
2405021a:	23eb      	movs	r3, #235	; 0xeb
2405021c:	66bb      	str	r3, [r7, #104]	; 0x68
2405021e:	2301      	movs	r3, #1
24050220:	66fb      	str	r3, [r7, #108]	; 0x6c
24050222:	f44f 7340 	mov.w	r3, #768	; 0x300
24050226:	67fb      	str	r3, [r7, #124]	; 0x7c
24050228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2405022c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
24050230:	2304      	movs	r3, #4
24050232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
24050236:	f44f 3340 	mov.w	r3, #196608	; 0x30000
2405023a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
2405023e:	2301      	movs	r3, #1
24050240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
24050244:	2304      	movs	r3, #4
24050246:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    .AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_8_BITS, // ??? firmware uses '1' ??
    .NbData = 1, // Data length
    .AlternateBytes = 0b000100, //0xa5, // Hmmmm
  };

  HAL_Delay(1);
2405024a:	2001      	movs	r0, #1
2405024c:	f002 fd6e 	bl	24052d2c <HAL_Delay>
  
  if(HAL_OSPI_Command(spi, &cmd, 1000) != HAL_OK) {
24050250:	f107 0360 	add.w	r3, r7, #96	; 0x60
24050254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24050258:	4619      	mov	r1, r3
2405025a:	6878      	ldr	r0, [r7, #4]
2405025c:	f008 fbf2 	bl	24058a44 <HAL_OSPI_Command>
24050260:	4603      	mov	r3, r0
24050262:	2b00      	cmp	r3, #0
24050264:	d001      	beq.n	2405026a <flash_memory_map+0x66>
      Error_Handler();
24050266:	f001 fe43 	bl	24051ef0 <Error_Handler>
  }
  HAL_Delay(50);
2405026a:	2032      	movs	r0, #50	; 0x32
2405026c:	f002 fd5e 	bl	24052d2c <HAL_Delay>


  OSPI_MemoryMappedTypeDef sMemMappedCfg;

  OSPI_RegularCmdTypeDef sCommand = {
24050270:	f107 0308 	add.w	r3, r7, #8
24050274:	2250      	movs	r2, #80	; 0x50
24050276:	2100      	movs	r1, #0
24050278:	4618      	mov	r0, r3
2405027a:	f00f f90e 	bl	2405f49a <memset>
2405027e:	2301      	movs	r3, #1
24050280:	60bb      	str	r3, [r7, #8]
24050282:	23eb      	movs	r3, #235	; 0xeb
24050284:	613b      	str	r3, [r7, #16]
24050286:	2301      	movs	r3, #1
24050288:	617b      	str	r3, [r7, #20]
2405028a:	f44f 7340 	mov.w	r3, #768	; 0x300
2405028e:	627b      	str	r3, [r7, #36]	; 0x24
24050290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24050294:	62bb      	str	r3, [r7, #40]	; 0x28
24050296:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
2405029a:	643b      	str	r3, [r7, #64]	; 0x40
2405029c:	2301      	movs	r3, #1
2405029e:	647b      	str	r3, [r7, #68]	; 0x44
240502a0:	2304      	movs	r3, #4
240502a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  // }
  // HAL_Delay(100);



  sCommand.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
240502a4:	2302      	movs	r3, #2
240502a6:	60bb      	str	r3, [r7, #8]
  sCommand.Instruction = 0x38; /* 4PP / 4 x page program */ // LINEAR_BURST_WRITE;
240502a8:	2338      	movs	r3, #56	; 0x38
240502aa:	613b      	str	r3, [r7, #16]
  sCommand.DummyCycles = 0; //DUMMY_CLOCK_CYCLES_SRAM_WRITE;
240502ac:	2300      	movs	r3, #0
240502ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_OSPI_Command(spi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) !=
240502b0:	f107 0308 	add.w	r3, r7, #8
240502b4:	f241 3288 	movw	r2, #5000	; 0x1388
240502b8:	4619      	mov	r1, r3
240502ba:	6878      	ldr	r0, [r7, #4]
240502bc:	f008 fbc2 	bl	24058a44 <HAL_OSPI_Command>
240502c0:	4603      	mov	r3, r0
240502c2:	2b00      	cmp	r3, #0
240502c4:	d001      	beq.n	240502ca <flash_memory_map+0xc6>
      HAL_OK) {
    Error_Handler();
240502c6:	f001 fe13 	bl	24051ef0 <Error_Handler>
  }
  /* Memory-mapped mode configuration for Linear burst read operations */
  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
240502ca:	2301      	movs	r3, #1
240502cc:	60bb      	str	r3, [r7, #8]
  sCommand.Instruction = 0xEB; /* 4READ */  //LINEAR_BURST_READ;
240502ce:	23eb      	movs	r3, #235	; 0xeb
240502d0:	613b      	str	r3, [r7, #16]
  sCommand.DummyCycles = 6; //DUMMY_CLOCK_CYCLES_SRAM_READ;
240502d2:	2306      	movs	r3, #6
240502d4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(spi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) !=
240502d6:	f107 0308 	add.w	r3, r7, #8
240502da:	f241 3288 	movw	r2, #5000	; 0x1388
240502de:	4619      	mov	r1, r3
240502e0:	6878      	ldr	r0, [r7, #4]
240502e2:	f008 fbaf 	bl	24058a44 <HAL_OSPI_Command>
240502e6:	4603      	mov	r3, r0
240502e8:	2b00      	cmp	r3, #0
240502ea:	d001      	beq.n	240502f0 <flash_memory_map+0xec>
      HAL_OK) {
    Error_Handler();
240502ec:	f001 fe00 	bl	24051ef0 <Error_Handler>
  }
  /*Disable timeout counter for memory mapped mode*/
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
240502f0:	2300      	movs	r3, #0
240502f2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMemMappedCfg.TimeOutPeriod = 0;
240502f4:	2300      	movs	r3, #0
240502f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  /*Enable memory mapped mode*/
  if (HAL_OSPI_MemoryMapped(spi, &sMemMappedCfg) != HAL_OK) {
240502f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
240502fc:	4619      	mov	r1, r3
240502fe:	6878      	ldr	r0, [r7, #4]
24050300:	f008 fc2e 	bl	24058b60 <HAL_OSPI_MemoryMapped>
24050304:	4603      	mov	r3, r0
24050306:	2b00      	cmp	r3, #0
24050308:	d001      	beq.n	2405030e <flash_memory_map+0x10a>
    Error_Handler();
2405030a:	f001 fdf1 	bl	24051ef0 <Error_Handler>
  }
}
2405030e:	bf00      	nop
24050310:	37b0      	adds	r7, #176	; 0xb0
24050312:	46bd      	mov	sp, r7
24050314:	bd80      	pop	{r7, pc}
	...

24050318 <game_init>:
int ball_xspeed;
int ball_yspeed;
int ball_x;
int ball_y;

void game_init(void) {
24050318:	b580      	push	{r7, lr}
2405031a:	b082      	sub	sp, #8
2405031c:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
2405031e:	f001 f8ab 	bl	24051478 <lcd_get_active_buffer>
24050322:	6078      	str	r0, [r7, #4]
	draw_background(buf);
24050324:	6878      	ldr	r0, [r7, #4]
24050326:	f000 f887 	bl	24050438 <draw_background>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
2405032a:	2200      	movs	r2, #0
2405032c:	492c      	ldr	r1, [pc, #176]	; (240503e0 <game_init+0xc8>)
2405032e:	482d      	ldr	r0, [pc, #180]	; (240503e4 <game_init+0xcc>)
24050330:	f00d f974 	bl	2405d61c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
24050334:	2200      	movs	r2, #0
24050336:	492c      	ldr	r1, [pc, #176]	; (240503e8 <game_init+0xd0>)
24050338:	482a      	ldr	r0, [pc, #168]	; (240503e4 <game_init+0xcc>)
2405033a:	f00d fa53 	bl	2405d7e4 <HAL_RTC_GetDate>
	HAL_ADC_Start(&hadc1);
2405033e:	482b      	ldr	r0, [pc, #172]	; (240503ec <game_init+0xd4>)
24050340:	f003 f868 	bl	24053414 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
24050344:	f04f 31ff 	mov.w	r1, #4294967295
24050348:	4828      	ldr	r0, [pc, #160]	; (240503ec <game_init+0xd4>)
2405034a:	f003 f91d 	bl	24053588 <HAL_ADC_PollForConversion>
	srand(HAL_ADC_GetValue(&hadc1) ^ sTime.SubSeconds);
2405034e:	4827      	ldr	r0, [pc, #156]	; (240503ec <game_init+0xd4>)
24050350:	f003 f9f2 	bl	24053738 <HAL_ADC_GetValue>
24050354:	4602      	mov	r2, r0
24050356:	4b22      	ldr	r3, [pc, #136]	; (240503e0 <game_init+0xc8>)
24050358:	685b      	ldr	r3, [r3, #4]
2405035a:	4053      	eors	r3, r2
2405035c:	4618      	mov	r0, r3
2405035e:	f00e ff0b 	bl	2405f178 <srand>
	ball_xspeed = randsing() * ball_speed;
24050362:	f00e ff37 	bl	2405f1d4 <rand>
24050366:	4603      	mov	r3, r0
24050368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405036c:	db02      	blt.n	24050374 <game_init+0x5c>
2405036e:	f04f 33ff 	mov.w	r3, #4294967295
24050372:	e000      	b.n	24050376 <game_init+0x5e>
24050374:	2301      	movs	r3, #1
24050376:	2203      	movs	r2, #3
24050378:	fb02 f303 	mul.w	r3, r2, r3
2405037c:	4a1c      	ldr	r2, [pc, #112]	; (240503f0 <game_init+0xd8>)
2405037e:	6013      	str	r3, [r2, #0]
	ball_yspeed = randsing() * ball_speed;
24050380:	f00e ff28 	bl	2405f1d4 <rand>
24050384:	4603      	mov	r3, r0
24050386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405038a:	db02      	blt.n	24050392 <game_init+0x7a>
2405038c:	f04f 33ff 	mov.w	r3, #4294967295
24050390:	e000      	b.n	24050394 <game_init+0x7c>
24050392:	2301      	movs	r3, #1
24050394:	2203      	movs	r2, #3
24050396:	fb02 f303 	mul.w	r3, r2, r3
2405039a:	4a16      	ldr	r2, [pc, #88]	; (240503f4 <game_init+0xdc>)
2405039c:	6013      	str	r3, [r2, #0]
	ball_x = 160;
2405039e:	4b16      	ldr	r3, [pc, #88]	; (240503f8 <game_init+0xe0>)
240503a0:	22a0      	movs	r2, #160	; 0xa0
240503a2:	601a      	str	r2, [r3, #0]
	ball_y = randint(190, 70);
240503a4:	f00e ff16 	bl	2405f1d4 <rand>
240503a8:	4601      	mov	r1, r0
240503aa:	4b14      	ldr	r3, [pc, #80]	; (240503fc <game_init+0xe4>)
240503ac:	fb83 2301 	smull	r2, r3, r3, r1
240503b0:	105a      	asrs	r2, r3, #1
240503b2:	17cb      	asrs	r3, r1, #31
240503b4:	1ad2      	subs	r2, r2, r3
240503b6:	4613      	mov	r3, r2
240503b8:	011b      	lsls	r3, r3, #4
240503ba:	1a9b      	subs	r3, r3, r2
240503bc:	00db      	lsls	r3, r3, #3
240503be:	4413      	add	r3, r2
240503c0:	1aca      	subs	r2, r1, r3
240503c2:	f102 0346 	add.w	r3, r2, #70	; 0x46
240503c6:	4a0e      	ldr	r2, [pc, #56]	; (24050400 <game_init+0xe8>)
240503c8:	6013      	str	r3, [r2, #0]
	lcd_sync();
240503ca:	f001 f83d 	bl	24051448 <lcd_sync>
	lcd_swap();
240503ce:	f001 f825 	bl	2405141c <lcd_swap>
	lcd_wait_for_vblank();
240503d2:	f001 f87d 	bl	240514d0 <lcd_wait_for_vblank>
}
240503d6:	bf00      	nop
240503d8:	3708      	adds	r7, #8
240503da:	46bd      	mov	sp, r7
240503dc:	bd80      	pop	{r7, pc}
240503de:	bf00      	nop
240503e0:	200000b8 	.word	0x200000b8
240503e4:	200003fc 	.word	0x200003fc
240503e8:	200000cc 	.word	0x200000cc
240503ec:	20000204 	.word	0x20000204
240503f0:	200001e8 	.word	0x200001e8
240503f4:	200001ec 	.word	0x200001ec
240503f8:	200001f0 	.word	0x200001f0
240503fc:	043b3d5b 	.word	0x043b3d5b
24050400:	200001f4 	.word	0x200001f4

24050404 <game_loop>:

void game_loop(void) {
24050404:	b580      	push	{r7, lr}
24050406:	b082      	sub	sp, #8
24050408:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
2405040a:	f001 f835 	bl	24051478 <lcd_get_active_buffer>
2405040e:	6078      	str	r0, [r7, #4]
	draw_background(buf);
24050410:	6878      	ldr	r0, [r7, #4]
24050412:	f000 f811 	bl	24050438 <draw_background>
	update_player(buf);
24050416:	6878      	ldr	r0, [r7, #4]
24050418:	f000 f878 	bl	2405050c <update_player>
	update_ai(buf);
2405041c:	6878      	ldr	r0, [r7, #4]
2405041e:	f000 f9e1 	bl	240507e4 <update_ai>
	update_ball(buf);
24050422:	6878      	ldr	r0, [r7, #4]
24050424:	f000 f8ec 	bl	24050600 <update_ball>
	lcd_swap();
24050428:	f000 fff8 	bl	2405141c <lcd_swap>
	lcd_wait_for_vblank();
2405042c:	f001 f850 	bl	240514d0 <lcd_wait_for_vblank>
}
24050430:	bf00      	nop
24050432:	3708      	adds	r7, #8
24050434:	46bd      	mov	sp, r7
24050436:	bd80      	pop	{r7, pc}

24050438 <draw_background>:

void draw_background(uint16_t *buf) {
24050438:	b590      	push	{r4, r7, lr}
2405043a:	b085      	sub	sp, #20
2405043c:	af02      	add	r7, sp, #8
2405043e:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
24050440:	2100      	movs	r1, #0
24050442:	6878      	ldr	r0, [r7, #4]
24050444:	f000 fa6a 	bl	2405091c <LCD_Clear>
	LCD_DrawRect(buf, 0, 20, LCD_GetXSize() - 1, LCD_GetYSize() - 21,
24050448:	f000 fa26 	bl	24050898 <LCD_GetXSize>
2405044c:	4603      	mov	r3, r0
2405044e:	3b01      	subs	r3, #1
24050450:	b29c      	uxth	r4, r3
24050452:	f000 fa2a 	bl	240508aa <LCD_GetYSize>
24050456:	4603      	mov	r3, r0
24050458:	3b15      	subs	r3, #21
2405045a:	b29b      	uxth	r3, r3
2405045c:	f64f 72ff 	movw	r2, #65535	; 0xffff
24050460:	9201      	str	r2, [sp, #4]
24050462:	9300      	str	r3, [sp, #0]
24050464:	4623      	mov	r3, r4
24050466:	2214      	movs	r2, #20
24050468:	2100      	movs	r1, #0
2405046a:	6878      	ldr	r0, [r7, #4]
2405046c:	f000 fb84 	bl	24050b78 <LCD_DrawRect>
	LCD_COLOR_WHITE);
	draw_score(buf);
24050470:	6878      	ldr	r0, [r7, #4]
24050472:	f000 f805 	bl	24050480 <draw_score>
}
24050476:	bf00      	nop
24050478:	370c      	adds	r7, #12
2405047a:	46bd      	mov	sp, r7
2405047c:	bd90      	pop	{r4, r7, pc}
	...

24050480 <draw_score>:

void draw_score(uint16_t *buf) {
24050480:	b580      	push	{r7, lr}
24050482:	b084      	sub	sp, #16
24050484:	af02      	add	r7, sp, #8
24050486:	6078      	str	r0, [r7, #4]
	LCD_SetFont(&Font16);
24050488:	4818      	ldr	r0, [pc, #96]	; (240504ec <draw_score+0x6c>)
2405048a:	f000 fa17 	bl	240508bc <LCD_SetFont>
	sprintf(score_p1_buf, "%d", score_p1);
2405048e:	4b18      	ldr	r3, [pc, #96]	; (240504f0 <draw_score+0x70>)
24050490:	681b      	ldr	r3, [r3, #0]
24050492:	461a      	mov	r2, r3
24050494:	4917      	ldr	r1, [pc, #92]	; (240504f4 <draw_score+0x74>)
24050496:	4818      	ldr	r0, [pc, #96]	; (240504f8 <draw_score+0x78>)
24050498:	f00e ff9c 	bl	2405f3d4 <siprintf>
	LCD_DisplayStringAt(buf, 0, 4, (uint8_t*) score_p1_buf, LEFT_MODE);
2405049c:	2303      	movs	r3, #3
2405049e:	9300      	str	r3, [sp, #0]
240504a0:	4b15      	ldr	r3, [pc, #84]	; (240504f8 <draw_score+0x78>)
240504a2:	2204      	movs	r2, #4
240504a4:	2100      	movs	r1, #0
240504a6:	6878      	ldr	r0, [r7, #4]
240504a8:	f000 fa52 	bl	24050950 <LCD_DisplayStringAt>
	sprintf(score_p2_buf, "%d", score_p2);
240504ac:	4b13      	ldr	r3, [pc, #76]	; (240504fc <draw_score+0x7c>)
240504ae:	681b      	ldr	r3, [r3, #0]
240504b0:	461a      	mov	r2, r3
240504b2:	4910      	ldr	r1, [pc, #64]	; (240504f4 <draw_score+0x74>)
240504b4:	4812      	ldr	r0, [pc, #72]	; (24050500 <draw_score+0x80>)
240504b6:	f00e ff8d 	bl	2405f3d4 <siprintf>
	LCD_DisplayStringAt(buf, 2, 4, (uint8_t*) score_p2_buf, RIGHT_MODE);
240504ba:	2302      	movs	r3, #2
240504bc:	9300      	str	r3, [sp, #0]
240504be:	4b10      	ldr	r3, [pc, #64]	; (24050500 <draw_score+0x80>)
240504c0:	2204      	movs	r2, #4
240504c2:	2102      	movs	r1, #2
240504c4:	6878      	ldr	r0, [r7, #4]
240504c6:	f000 fa43 	bl	24050950 <LCD_DisplayStringAt>
	sprintf(text_buf, "SCORE");
240504ca:	490e      	ldr	r1, [pc, #56]	; (24050504 <draw_score+0x84>)
240504cc:	480e      	ldr	r0, [pc, #56]	; (24050508 <draw_score+0x88>)
240504ce:	f00e ff81 	bl	2405f3d4 <siprintf>
	LCD_DisplayStringAt(buf, 1, 4, (uint8_t*) text_buf, CENTER_MODE);
240504d2:	2301      	movs	r3, #1
240504d4:	9300      	str	r3, [sp, #0]
240504d6:	4b0c      	ldr	r3, [pc, #48]	; (24050508 <draw_score+0x88>)
240504d8:	2204      	movs	r2, #4
240504da:	2101      	movs	r1, #1
240504dc:	6878      	ldr	r0, [r7, #4]
240504de:	f000 fa37 	bl	24050950 <LCD_DisplayStringAt>
}
240504e2:	bf00      	nop
240504e4:	3708      	adds	r7, #8
240504e6:	46bd      	mov	sp, r7
240504e8:	bd80      	pop	{r7, pc}
240504ea:	bf00      	nop
240504ec:	20000008 	.word	0x20000008
240504f0:	200000d0 	.word	0x200000d0
240504f4:	24060568 	.word	0x24060568
240504f8:	200000d8 	.word	0x200000d8
240504fc:	200000d4 	.word	0x200000d4
24050500:	200000e0 	.word	0x200000e0
24050504:	2406056c 	.word	0x2406056c
24050508:	200000e8 	.word	0x200000e8

2405050c <update_player>:

void update_player(uint16_t *buf) {
2405050c:	b590      	push	{r4, r7, lr}
2405050e:	b087      	sub	sp, #28
24050510:	af02      	add	r7, sp, #8
24050512:	6078      	str	r0, [r7, #4]
	uint32_t buttons = buttons_get();
24050514:	f7ff fde4 	bl	240500e0 <buttons_get>
24050518:	60f8      	str	r0, [r7, #12]
	if (buttons & B_Up) {
2405051a:	68fb      	ldr	r3, [r7, #12]
2405051c:	f003 0302 	and.w	r3, r3, #2
24050520:	2b00      	cmp	r3, #0
24050522:	d00c      	beq.n	2405053e <update_player+0x32>
		if (p1_y >= 20 + p1_speed + 2) {
24050524:	2302      	movs	r3, #2
24050526:	f103 0215 	add.w	r2, r3, #21
2405052a:	4b2f      	ldr	r3, [pc, #188]	; (240505e8 <update_player+0xdc>)
2405052c:	681b      	ldr	r3, [r3, #0]
2405052e:	429a      	cmp	r2, r3
24050530:	da05      	bge.n	2405053e <update_player+0x32>
			p1_y = p1_y - p1_speed;
24050532:	4b2d      	ldr	r3, [pc, #180]	; (240505e8 <update_player+0xdc>)
24050534:	681b      	ldr	r3, [r3, #0]
24050536:	2202      	movs	r2, #2
24050538:	1a9b      	subs	r3, r3, r2
2405053a:	4a2b      	ldr	r2, [pc, #172]	; (240505e8 <update_player+0xdc>)
2405053c:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_Down) {
2405053e:	68fb      	ldr	r3, [r7, #12]
24050540:	f003 0308 	and.w	r3, r3, #8
24050544:	2b00      	cmp	r3, #0
24050546:	d012      	beq.n	2405056e <update_player+0x62>
		if (p1_y <= LCD_GetYSize() - p1_height - p1_speed - 2) {
24050548:	f000 f9af 	bl	240508aa <LCD_GetYSize>
2405054c:	4603      	mov	r3, r0
2405054e:	461a      	mov	r2, r3
24050550:	2328      	movs	r3, #40	; 0x28
24050552:	1ad3      	subs	r3, r2, r3
24050554:	2202      	movs	r2, #2
24050556:	1a9b      	subs	r3, r3, r2
24050558:	1e5a      	subs	r2, r3, #1
2405055a:	4b23      	ldr	r3, [pc, #140]	; (240505e8 <update_player+0xdc>)
2405055c:	681b      	ldr	r3, [r3, #0]
2405055e:	429a      	cmp	r2, r3
24050560:	dd05      	ble.n	2405056e <update_player+0x62>
			p1_y = p1_y + p1_speed;
24050562:	4b21      	ldr	r3, [pc, #132]	; (240505e8 <update_player+0xdc>)
24050564:	681b      	ldr	r3, [r3, #0]
24050566:	2202      	movs	r2, #2
24050568:	4413      	add	r3, r2
2405056a:	4a1f      	ldr	r2, [pc, #124]	; (240505e8 <update_player+0xdc>)
2405056c:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_GAME) {
2405056e:	68fb      	ldr	r3, [r7, #12]
24050570:	f003 0380 	and.w	r3, r3, #128	; 0x80
24050574:	2b00      	cmp	r3, #0
24050576:	d01a      	beq.n	240505ae <update_player+0xa2>
		score_p1 = 0;
24050578:	4b1c      	ldr	r3, [pc, #112]	; (240505ec <update_player+0xe0>)
2405057a:	2200      	movs	r2, #0
2405057c:	601a      	str	r2, [r3, #0]
		score_p2 = 0;
2405057e:	4b1c      	ldr	r3, [pc, #112]	; (240505f0 <update_player+0xe4>)
24050580:	2200      	movs	r2, #0
24050582:	601a      	str	r2, [r3, #0]
		p1_x = 3;
24050584:	4b1b      	ldr	r3, [pc, #108]	; (240505f4 <update_player+0xe8>)
24050586:	2203      	movs	r2, #3
24050588:	601a      	str	r2, [r3, #0]
		p1_y = 110;
2405058a:	4b17      	ldr	r3, [pc, #92]	; (240505e8 <update_player+0xdc>)
2405058c:	226e      	movs	r2, #110	; 0x6e
2405058e:	601a      	str	r2, [r3, #0]
		p2_x = 320 - 3 - p2_width;
24050590:	2205      	movs	r2, #5
24050592:	f240 133d 	movw	r3, #317	; 0x13d
24050596:	1a9b      	subs	r3, r3, r2
24050598:	4a17      	ldr	r2, [pc, #92]	; (240505f8 <update_player+0xec>)
2405059a:	6013      	str	r3, [r2, #0]
		p2_y = 110;
2405059c:	4b17      	ldr	r3, [pc, #92]	; (240505fc <update_player+0xf0>)
2405059e:	226e      	movs	r2, #110	; 0x6e
240505a0:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
240505a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
240505a6:	f002 fbc1 	bl	24052d2c <HAL_Delay>
		game_init();
240505aa:	f7ff feb5 	bl	24050318 <game_init>
	}
	if (buttons & B_POWER) {
240505ae:	68fb      	ldr	r3, [r7, #12]
240505b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
240505b4:	2b00      	cmp	r3, #0
240505b6:	d001      	beq.n	240505bc <update_player+0xb0>
		HAL_NVIC_SystemReset();
240505b8:	f004 f941 	bl	2405483e <HAL_NVIC_SystemReset>
	}
	LCD_FillRect(buf, p1_x, p1_y, p1_width, p1_height, LCD_COLOR_WHITE);
240505bc:	4b0d      	ldr	r3, [pc, #52]	; (240505f4 <update_player+0xe8>)
240505be:	681b      	ldr	r3, [r3, #0]
240505c0:	b299      	uxth	r1, r3
240505c2:	4b09      	ldr	r3, [pc, #36]	; (240505e8 <update_player+0xdc>)
240505c4:	681b      	ldr	r3, [r3, #0]
240505c6:	b29a      	uxth	r2, r3
240505c8:	2305      	movs	r3, #5
240505ca:	b298      	uxth	r0, r3
240505cc:	2328      	movs	r3, #40	; 0x28
240505ce:	b29b      	uxth	r3, r3
240505d0:	f64f 74ff 	movw	r4, #65535	; 0xffff
240505d4:	9401      	str	r4, [sp, #4]
240505d6:	9300      	str	r3, [sp, #0]
240505d8:	4603      	mov	r3, r0
240505da:	6878      	ldr	r0, [r7, #4]
240505dc:	f000 fbb0 	bl	24050d40 <LCD_FillRect>
}
240505e0:	bf00      	nop
240505e2:	3714      	adds	r7, #20
240505e4:	46bd      	mov	sp, r7
240505e6:	bd90      	pop	{r4, r7, pc}
240505e8:	20000014 	.word	0x20000014
240505ec:	200000d0 	.word	0x200000d0
240505f0:	200000d4 	.word	0x200000d4
240505f4:	20000010 	.word	0x20000010
240505f8:	20000018 	.word	0x20000018
240505fc:	2000001c 	.word	0x2000001c

24050600 <update_ball>:

void update_ball(uint16_t *buf) {
24050600:	b580      	push	{r7, lr}
24050602:	b084      	sub	sp, #16
24050604:	af02      	add	r7, sp, #8
24050606:	6078      	str	r0, [r7, #4]

	if (ball_x <= ball_r + ball_speed + p1_x + p1_width / 2
24050608:	2208      	movs	r2, #8
2405060a:	2303      	movs	r3, #3
2405060c:	441a      	add	r2, r3
2405060e:	4b6b      	ldr	r3, [pc, #428]	; (240507bc <update_ball+0x1bc>)
24050610:	681b      	ldr	r3, [r3, #0]
24050612:	441a      	add	r2, r3
24050614:	2305      	movs	r3, #5
24050616:	2b00      	cmp	r3, #0
24050618:	da00      	bge.n	2405061c <update_ball+0x1c>
2405061a:	3301      	adds	r3, #1
2405061c:	105b      	asrs	r3, r3, #1
2405061e:	441a      	add	r2, r3
24050620:	4b67      	ldr	r3, [pc, #412]	; (240507c0 <update_ball+0x1c0>)
24050622:	681b      	ldr	r3, [r3, #0]
24050624:	429a      	cmp	r2, r3
24050626:	db38      	blt.n	2405069a <update_ball+0x9a>
			&& ball_xspeed == -ball_speed) {
24050628:	2303      	movs	r3, #3
2405062a:	425a      	negs	r2, r3
2405062c:	4b65      	ldr	r3, [pc, #404]	; (240507c4 <update_ball+0x1c4>)
2405062e:	681b      	ldr	r3, [r3, #0]
24050630:	429a      	cmp	r2, r3
24050632:	d132      	bne.n	2405069a <update_ball+0x9a>
		ball_xspeed = ball_speed;
24050634:	2203      	movs	r2, #3
24050636:	4b63      	ldr	r3, [pc, #396]	; (240507c4 <update_ball+0x1c4>)
24050638:	601a      	str	r2, [r3, #0]
		if (ball_y >= p1_y - 2 && ball_y <= p1_y + p1_height + 2) {
2405063a:	4b63      	ldr	r3, [pc, #396]	; (240507c8 <update_ball+0x1c8>)
2405063c:	681b      	ldr	r3, [r3, #0]
2405063e:	1e9a      	subs	r2, r3, #2
24050640:	4b62      	ldr	r3, [pc, #392]	; (240507cc <update_ball+0x1cc>)
24050642:	681b      	ldr	r3, [r3, #0]
24050644:	429a      	cmp	r2, r3
24050646:	dc08      	bgt.n	2405065a <update_ball+0x5a>
24050648:	4b5f      	ldr	r3, [pc, #380]	; (240507c8 <update_ball+0x1c8>)
2405064a:	681b      	ldr	r3, [r3, #0]
2405064c:	2228      	movs	r2, #40	; 0x28
2405064e:	4413      	add	r3, r2
24050650:	1c9a      	adds	r2, r3, #2
24050652:	4b5e      	ldr	r3, [pc, #376]	; (240507cc <update_ball+0x1cc>)
24050654:	681b      	ldr	r3, [r3, #0]
24050656:	429a      	cmp	r2, r3
24050658:	da1f      	bge.n	2405069a <update_ball+0x9a>

		} else {
			score_p2++;
2405065a:	4b5d      	ldr	r3, [pc, #372]	; (240507d0 <update_ball+0x1d0>)
2405065c:	681b      	ldr	r3, [r3, #0]
2405065e:	3301      	adds	r3, #1
24050660:	4a5b      	ldr	r2, [pc, #364]	; (240507d0 <update_ball+0x1d0>)
24050662:	6013      	str	r3, [r2, #0]
			draw_score(buf);
24050664:	6878      	ldr	r0, [r7, #4]
24050666:	f7ff ff0b 	bl	24050480 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
2405066a:	4b55      	ldr	r3, [pc, #340]	; (240507c0 <update_ball+0x1c0>)
2405066c:	681b      	ldr	r3, [r3, #0]
2405066e:	b299      	uxth	r1, r3
24050670:	4b56      	ldr	r3, [pc, #344]	; (240507cc <update_ball+0x1cc>)
24050672:	681b      	ldr	r3, [r3, #0]
24050674:	b29a      	uxth	r2, r3
24050676:	2308      	movs	r3, #8
24050678:	b29b      	uxth	r3, r3
2405067a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
2405067e:	9000      	str	r0, [sp, #0]
24050680:	6878      	ldr	r0, [r7, #4]
24050682:	f000 fb8e 	bl	24050da2 <LCD_FillCircle>
			lcd_swap();
24050686:	f000 fec9 	bl	2405141c <lcd_swap>
			lcd_wait_for_vblank();
2405068a:	f000 ff21 	bl	240514d0 <lcd_wait_for_vblank>
			HAL_Delay(1000);
2405068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
24050692:	f002 fb4b 	bl	24052d2c <HAL_Delay>
			game_init();
24050696:	f7ff fe3f 	bl	24050318 <game_init>
		}
	}
	if (ball_x >= p2_x + p2_width / 2 - ball_r - ball_speed
2405069a:	2305      	movs	r3, #5
2405069c:	2b00      	cmp	r3, #0
2405069e:	da00      	bge.n	240506a2 <update_ball+0xa2>
240506a0:	3301      	adds	r3, #1
240506a2:	105b      	asrs	r3, r3, #1
240506a4:	461a      	mov	r2, r3
240506a6:	4b4b      	ldr	r3, [pc, #300]	; (240507d4 <update_ball+0x1d4>)
240506a8:	681b      	ldr	r3, [r3, #0]
240506aa:	4413      	add	r3, r2
240506ac:	2208      	movs	r2, #8
240506ae:	1a9b      	subs	r3, r3, r2
240506b0:	2203      	movs	r2, #3
240506b2:	1a9a      	subs	r2, r3, r2
240506b4:	4b42      	ldr	r3, [pc, #264]	; (240507c0 <update_ball+0x1c0>)
240506b6:	681b      	ldr	r3, [r3, #0]
240506b8:	429a      	cmp	r2, r3
240506ba:	dc38      	bgt.n	2405072e <update_ball+0x12e>
			&& ball_xspeed == ball_speed) {
240506bc:	4b41      	ldr	r3, [pc, #260]	; (240507c4 <update_ball+0x1c4>)
240506be:	681b      	ldr	r3, [r3, #0]
240506c0:	2203      	movs	r2, #3
240506c2:	4293      	cmp	r3, r2
240506c4:	d133      	bne.n	2405072e <update_ball+0x12e>
		ball_xspeed = -ball_speed;
240506c6:	2303      	movs	r3, #3
240506c8:	425b      	negs	r3, r3
240506ca:	4a3e      	ldr	r2, [pc, #248]	; (240507c4 <update_ball+0x1c4>)
240506cc:	6013      	str	r3, [r2, #0]
		if (ball_y >= p2_y - 2 && ball_y <= p2_y + p2_height + 2) {
240506ce:	4b42      	ldr	r3, [pc, #264]	; (240507d8 <update_ball+0x1d8>)
240506d0:	681b      	ldr	r3, [r3, #0]
240506d2:	1e9a      	subs	r2, r3, #2
240506d4:	4b3d      	ldr	r3, [pc, #244]	; (240507cc <update_ball+0x1cc>)
240506d6:	681b      	ldr	r3, [r3, #0]
240506d8:	429a      	cmp	r2, r3
240506da:	dc08      	bgt.n	240506ee <update_ball+0xee>
240506dc:	4b3e      	ldr	r3, [pc, #248]	; (240507d8 <update_ball+0x1d8>)
240506de:	681b      	ldr	r3, [r3, #0]
240506e0:	2228      	movs	r2, #40	; 0x28
240506e2:	4413      	add	r3, r2
240506e4:	1c9a      	adds	r2, r3, #2
240506e6:	4b39      	ldr	r3, [pc, #228]	; (240507cc <update_ball+0x1cc>)
240506e8:	681b      	ldr	r3, [r3, #0]
240506ea:	429a      	cmp	r2, r3
240506ec:	da1f      	bge.n	2405072e <update_ball+0x12e>

		} else {
			score_p1++;
240506ee:	4b3b      	ldr	r3, [pc, #236]	; (240507dc <update_ball+0x1dc>)
240506f0:	681b      	ldr	r3, [r3, #0]
240506f2:	3301      	adds	r3, #1
240506f4:	4a39      	ldr	r2, [pc, #228]	; (240507dc <update_ball+0x1dc>)
240506f6:	6013      	str	r3, [r2, #0]
			draw_score(buf);
240506f8:	6878      	ldr	r0, [r7, #4]
240506fa:	f7ff fec1 	bl	24050480 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
240506fe:	4b30      	ldr	r3, [pc, #192]	; (240507c0 <update_ball+0x1c0>)
24050700:	681b      	ldr	r3, [r3, #0]
24050702:	b299      	uxth	r1, r3
24050704:	4b31      	ldr	r3, [pc, #196]	; (240507cc <update_ball+0x1cc>)
24050706:	681b      	ldr	r3, [r3, #0]
24050708:	b29a      	uxth	r2, r3
2405070a:	2308      	movs	r3, #8
2405070c:	b29b      	uxth	r3, r3
2405070e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
24050712:	9000      	str	r0, [sp, #0]
24050714:	6878      	ldr	r0, [r7, #4]
24050716:	f000 fb44 	bl	24050da2 <LCD_FillCircle>
			lcd_swap();
2405071a:	f000 fe7f 	bl	2405141c <lcd_swap>
			lcd_wait_for_vblank();
2405071e:	f000 fed7 	bl	240514d0 <lcd_wait_for_vblank>
			HAL_Delay(1000);
24050722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
24050726:	f002 fb01 	bl	24052d2c <HAL_Delay>
			game_init();
2405072a:	f7ff fdf5 	bl	24050318 <game_init>
		}
	}
	if (ball_y <= 20 + ball_r + ball_speed && ball_yspeed == -ball_speed) {
2405072e:	2308      	movs	r3, #8
24050730:	3314      	adds	r3, #20
24050732:	2203      	movs	r2, #3
24050734:	441a      	add	r2, r3
24050736:	4b25      	ldr	r3, [pc, #148]	; (240507cc <update_ball+0x1cc>)
24050738:	681b      	ldr	r3, [r3, #0]
2405073a:	429a      	cmp	r2, r3
2405073c:	db08      	blt.n	24050750 <update_ball+0x150>
2405073e:	2303      	movs	r3, #3
24050740:	425a      	negs	r2, r3
24050742:	4b27      	ldr	r3, [pc, #156]	; (240507e0 <update_ball+0x1e0>)
24050744:	681b      	ldr	r3, [r3, #0]
24050746:	429a      	cmp	r2, r3
24050748:	d102      	bne.n	24050750 <update_ball+0x150>
		ball_yspeed = ball_speed;
2405074a:	2203      	movs	r2, #3
2405074c:	4b24      	ldr	r3, [pc, #144]	; (240507e0 <update_ball+0x1e0>)
2405074e:	601a      	str	r2, [r3, #0]
	}
	if (ball_y >= LCD_GetYSize() - ball_r - ball_speed
24050750:	f000 f8ab 	bl	240508aa <LCD_GetYSize>
24050754:	4603      	mov	r3, r0
24050756:	461a      	mov	r2, r3
24050758:	2308      	movs	r3, #8
2405075a:	1ad3      	subs	r3, r2, r3
2405075c:	2203      	movs	r2, #3
2405075e:	1a9a      	subs	r2, r3, r2
24050760:	4b1a      	ldr	r3, [pc, #104]	; (240507cc <update_ball+0x1cc>)
24050762:	681b      	ldr	r3, [r3, #0]
24050764:	429a      	cmp	r2, r3
24050766:	dc08      	bgt.n	2405077a <update_ball+0x17a>
			&& ball_yspeed == ball_speed) {
24050768:	4b1d      	ldr	r3, [pc, #116]	; (240507e0 <update_ball+0x1e0>)
2405076a:	681b      	ldr	r3, [r3, #0]
2405076c:	2203      	movs	r2, #3
2405076e:	4293      	cmp	r3, r2
24050770:	d103      	bne.n	2405077a <update_ball+0x17a>
		ball_yspeed = -ball_speed;
24050772:	2303      	movs	r3, #3
24050774:	425b      	negs	r3, r3
24050776:	4a1a      	ldr	r2, [pc, #104]	; (240507e0 <update_ball+0x1e0>)
24050778:	6013      	str	r3, [r2, #0]
	}
	ball_x = ball_x + ball_xspeed;
2405077a:	4b11      	ldr	r3, [pc, #68]	; (240507c0 <update_ball+0x1c0>)
2405077c:	681a      	ldr	r2, [r3, #0]
2405077e:	4b11      	ldr	r3, [pc, #68]	; (240507c4 <update_ball+0x1c4>)
24050780:	681b      	ldr	r3, [r3, #0]
24050782:	4413      	add	r3, r2
24050784:	4a0e      	ldr	r2, [pc, #56]	; (240507c0 <update_ball+0x1c0>)
24050786:	6013      	str	r3, [r2, #0]
	ball_y = ball_y + ball_yspeed;
24050788:	4b10      	ldr	r3, [pc, #64]	; (240507cc <update_ball+0x1cc>)
2405078a:	681a      	ldr	r2, [r3, #0]
2405078c:	4b14      	ldr	r3, [pc, #80]	; (240507e0 <update_ball+0x1e0>)
2405078e:	681b      	ldr	r3, [r3, #0]
24050790:	4413      	add	r3, r2
24050792:	4a0e      	ldr	r2, [pc, #56]	; (240507cc <update_ball+0x1cc>)
24050794:	6013      	str	r3, [r2, #0]

	LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_WHITE);
24050796:	4b0a      	ldr	r3, [pc, #40]	; (240507c0 <update_ball+0x1c0>)
24050798:	681b      	ldr	r3, [r3, #0]
2405079a:	b299      	uxth	r1, r3
2405079c:	4b0b      	ldr	r3, [pc, #44]	; (240507cc <update_ball+0x1cc>)
2405079e:	681b      	ldr	r3, [r3, #0]
240507a0:	b29a      	uxth	r2, r3
240507a2:	2308      	movs	r3, #8
240507a4:	b29b      	uxth	r3, r3
240507a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
240507aa:	9000      	str	r0, [sp, #0]
240507ac:	6878      	ldr	r0, [r7, #4]
240507ae:	f000 faf8 	bl	24050da2 <LCD_FillCircle>
}
240507b2:	bf00      	nop
240507b4:	3708      	adds	r7, #8
240507b6:	46bd      	mov	sp, r7
240507b8:	bd80      	pop	{r7, pc}
240507ba:	bf00      	nop
240507bc:	20000010 	.word	0x20000010
240507c0:	200001f0 	.word	0x200001f0
240507c4:	200001e8 	.word	0x200001e8
240507c8:	20000014 	.word	0x20000014
240507cc:	200001f4 	.word	0x200001f4
240507d0:	200000d4 	.word	0x200000d4
240507d4:	20000018 	.word	0x20000018
240507d8:	2000001c 	.word	0x2000001c
240507dc:	200000d0 	.word	0x200000d0
240507e0:	200001ec 	.word	0x200001ec

240507e4 <update_ai>:

void update_ai(uint16_t *buf) {
240507e4:	b590      	push	{r4, r7, lr}
240507e6:	b085      	sub	sp, #20
240507e8:	af02      	add	r7, sp, #8
240507ea:	6078      	str	r0, [r7, #4]
	if (ball_y < (p2_y + (p2_height / 2))) {
240507ec:	2328      	movs	r3, #40	; 0x28
240507ee:	2b00      	cmp	r3, #0
240507f0:	da00      	bge.n	240507f4 <update_ai+0x10>
240507f2:	3301      	adds	r3, #1
240507f4:	105b      	asrs	r3, r3, #1
240507f6:	461a      	mov	r2, r3
240507f8:	4b24      	ldr	r3, [pc, #144]	; (2405088c <update_ai+0xa8>)
240507fa:	681b      	ldr	r3, [r3, #0]
240507fc:	441a      	add	r2, r3
240507fe:	4b24      	ldr	r3, [pc, #144]	; (24050890 <update_ai+0xac>)
24050800:	681b      	ldr	r3, [r3, #0]
24050802:	429a      	cmp	r2, r3
24050804:	dd0c      	ble.n	24050820 <update_ai+0x3c>
		if (p2_y >= 20 + p2_speed + 2) {
24050806:	2302      	movs	r3, #2
24050808:	f103 0215 	add.w	r2, r3, #21
2405080c:	4b1f      	ldr	r3, [pc, #124]	; (2405088c <update_ai+0xa8>)
2405080e:	681b      	ldr	r3, [r3, #0]
24050810:	429a      	cmp	r2, r3
24050812:	da05      	bge.n	24050820 <update_ai+0x3c>
			p2_y = p2_y - p2_speed;
24050814:	4b1d      	ldr	r3, [pc, #116]	; (2405088c <update_ai+0xa8>)
24050816:	681b      	ldr	r3, [r3, #0]
24050818:	2202      	movs	r2, #2
2405081a:	1a9b      	subs	r3, r3, r2
2405081c:	4a1b      	ldr	r2, [pc, #108]	; (2405088c <update_ai+0xa8>)
2405081e:	6013      	str	r3, [r2, #0]
		}
	}
	if (ball_y > (p2_y + (p2_height / 2))) {
24050820:	2328      	movs	r3, #40	; 0x28
24050822:	2b00      	cmp	r3, #0
24050824:	da00      	bge.n	24050828 <update_ai+0x44>
24050826:	3301      	adds	r3, #1
24050828:	105b      	asrs	r3, r3, #1
2405082a:	461a      	mov	r2, r3
2405082c:	4b17      	ldr	r3, [pc, #92]	; (2405088c <update_ai+0xa8>)
2405082e:	681b      	ldr	r3, [r3, #0]
24050830:	441a      	add	r2, r3
24050832:	4b17      	ldr	r3, [pc, #92]	; (24050890 <update_ai+0xac>)
24050834:	681b      	ldr	r3, [r3, #0]
24050836:	429a      	cmp	r2, r3
24050838:	da12      	bge.n	24050860 <update_ai+0x7c>
		if (p2_y <= LCD_GetYSize() - p2_height - p2_speed - 2) {
2405083a:	f000 f836 	bl	240508aa <LCD_GetYSize>
2405083e:	4603      	mov	r3, r0
24050840:	461a      	mov	r2, r3
24050842:	2328      	movs	r3, #40	; 0x28
24050844:	1ad3      	subs	r3, r2, r3
24050846:	2202      	movs	r2, #2
24050848:	1a9b      	subs	r3, r3, r2
2405084a:	1e5a      	subs	r2, r3, #1
2405084c:	4b0f      	ldr	r3, [pc, #60]	; (2405088c <update_ai+0xa8>)
2405084e:	681b      	ldr	r3, [r3, #0]
24050850:	429a      	cmp	r2, r3
24050852:	dd05      	ble.n	24050860 <update_ai+0x7c>
			p2_y = p2_y + p2_speed;
24050854:	4b0d      	ldr	r3, [pc, #52]	; (2405088c <update_ai+0xa8>)
24050856:	681b      	ldr	r3, [r3, #0]
24050858:	2202      	movs	r2, #2
2405085a:	4413      	add	r3, r2
2405085c:	4a0b      	ldr	r2, [pc, #44]	; (2405088c <update_ai+0xa8>)
2405085e:	6013      	str	r3, [r2, #0]
		}
	}
	LCD_FillRect(buf, p2_x, p2_y, p2_width, p2_height, LCD_COLOR_WHITE);
24050860:	4b0c      	ldr	r3, [pc, #48]	; (24050894 <update_ai+0xb0>)
24050862:	681b      	ldr	r3, [r3, #0]
24050864:	b299      	uxth	r1, r3
24050866:	4b09      	ldr	r3, [pc, #36]	; (2405088c <update_ai+0xa8>)
24050868:	681b      	ldr	r3, [r3, #0]
2405086a:	b29a      	uxth	r2, r3
2405086c:	2305      	movs	r3, #5
2405086e:	b298      	uxth	r0, r3
24050870:	2328      	movs	r3, #40	; 0x28
24050872:	b29b      	uxth	r3, r3
24050874:	f64f 74ff 	movw	r4, #65535	; 0xffff
24050878:	9401      	str	r4, [sp, #4]
2405087a:	9300      	str	r3, [sp, #0]
2405087c:	4603      	mov	r3, r0
2405087e:	6878      	ldr	r0, [r7, #4]
24050880:	f000 fa5e 	bl	24050d40 <LCD_FillRect>
}
24050884:	bf00      	nop
24050886:	370c      	adds	r7, #12
24050888:	46bd      	mov	sp, r7
2405088a:	bd90      	pop	{r4, r7, pc}
2405088c:	2000001c 	.word	0x2000001c
24050890:	200001f4 	.word	0x200001f4
24050894:	20000018 	.word	0x20000018

24050898 <LCD_GetXSize>:
/**
 * @brief  Gets the LCD X size.
 * @param  None
 * @retval The used LCD X size
 */
uint16_t LCD_GetXSize(void) {
24050898:	b480      	push	{r7}
2405089a:	af00      	add	r7, sp, #0
	return GW_LCD_WIDTH;
2405089c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
240508a0:	4618      	mov	r0, r3
240508a2:	46bd      	mov	sp, r7
240508a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240508a8:	4770      	bx	lr

240508aa <LCD_GetYSize>:
/**
 * @brief  Gets the LCD Y size.
 * @param  None
 * @retval The used LCD Y size
 */
uint16_t LCD_GetYSize(void) {
240508aa:	b480      	push	{r7}
240508ac:	af00      	add	r7, sp, #0
	return GW_LCD_HEIGHT;
240508ae:	23f0      	movs	r3, #240	; 0xf0
}
240508b0:	4618      	mov	r0, r3
240508b2:	46bd      	mov	sp, r7
240508b4:	f85d 7b04 	ldr.w	r7, [sp], #4
240508b8:	4770      	bx	lr
	...

240508bc <LCD_SetFont>:
/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *pFonts) {
240508bc:	b480      	push	{r7}
240508be:	b083      	sub	sp, #12
240508c0:	af00      	add	r7, sp, #0
240508c2:	6078      	str	r0, [r7, #4]
	font = pFonts;
240508c4:	4a04      	ldr	r2, [pc, #16]	; (240508d8 <LCD_SetFont+0x1c>)
240508c6:	687b      	ldr	r3, [r7, #4]
240508c8:	6013      	str	r3, [r2, #0]
}
240508ca:	bf00      	nop
240508cc:	370c      	adds	r7, #12
240508ce:	46bd      	mov	sp, r7
240508d0:	f85d 7b04 	ldr.w	r7, [sp], #4
240508d4:	4770      	bx	lr
240508d6:	bf00      	nop
240508d8:	20000020 	.word	0x20000020

240508dc <LCD_DrawPixel>:
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in RGB(5-6-5)
 * @retval None
 */
void LCD_DrawPixel(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t pixel) {
240508dc:	b480      	push	{r7}
240508de:	b085      	sub	sp, #20
240508e0:	af00      	add	r7, sp, #0
240508e2:	60f8      	str	r0, [r7, #12]
240508e4:	4608      	mov	r0, r1
240508e6:	4611      	mov	r1, r2
240508e8:	461a      	mov	r2, r3
240508ea:	4603      	mov	r3, r0
240508ec:	817b      	strh	r3, [r7, #10]
240508ee:	460b      	mov	r3, r1
240508f0:	813b      	strh	r3, [r7, #8]
240508f2:	4613      	mov	r3, r2
240508f4:	80fb      	strh	r3, [r7, #6]
	buf[PPOS(Xpos, Ypos)] = pixel;
240508f6:	893a      	ldrh	r2, [r7, #8]
240508f8:	4613      	mov	r3, r2
240508fa:	009b      	lsls	r3, r3, #2
240508fc:	4413      	add	r3, r2
240508fe:	019b      	lsls	r3, r3, #6
24050900:	461a      	mov	r2, r3
24050902:	897b      	ldrh	r3, [r7, #10]
24050904:	4413      	add	r3, r2
24050906:	005b      	lsls	r3, r3, #1
24050908:	68fa      	ldr	r2, [r7, #12]
2405090a:	4413      	add	r3, r2
2405090c:	88fa      	ldrh	r2, [r7, #6]
2405090e:	801a      	strh	r2, [r3, #0]
}
24050910:	bf00      	nop
24050912:	3714      	adds	r7, #20
24050914:	46bd      	mov	sp, r7
24050916:	f85d 7b04 	ldr.w	r7, [sp], #4
2405091a:	4770      	bx	lr

2405091c <LCD_Clear>:
/**
 * @brief  Clears the whole LCD.
 * @param  Color: the color of the background
 * @retval None
 */
void LCD_Clear(uint16_t *buf, uint16_t color) {
2405091c:	b590      	push	{r4, r7, lr}
2405091e:	b085      	sub	sp, #20
24050920:	af02      	add	r7, sp, #8
24050922:	6078      	str	r0, [r7, #4]
24050924:	460b      	mov	r3, r1
24050926:	807b      	strh	r3, [r7, #2]
	FillBuffer((uint32_t*) buf, LCD_GetXSize(), LCD_GetYSize(), 0, color);
24050928:	f7ff ffb6 	bl	24050898 <LCD_GetXSize>
2405092c:	4603      	mov	r3, r0
2405092e:	461c      	mov	r4, r3
24050930:	f7ff ffbb 	bl	240508aa <LCD_GetYSize>
24050934:	4603      	mov	r3, r0
24050936:	461a      	mov	r2, r3
24050938:	887b      	ldrh	r3, [r7, #2]
2405093a:	9300      	str	r3, [sp, #0]
2405093c:	2300      	movs	r3, #0
2405093e:	4621      	mov	r1, r4
24050940:	6878      	ldr	r0, [r7, #4]
24050942:	f000 fb63 	bl	2405100c <FillBuffer>
}
24050946:	bf00      	nop
24050948:	370c      	adds	r7, #12
2405094a:	46bd      	mov	sp, r7
2405094c:	bd90      	pop	{r4, r7, pc}
	...

24050950 <LCD_DisplayStringAt>:
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 * @retval None
 */
void LCD_DisplayStringAt(uint16_t *buf, uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
24050950:	b590      	push	{r4, r7, lr}
24050952:	b089      	sub	sp, #36	; 0x24
24050954:	af00      	add	r7, sp, #0
24050956:	60f8      	str	r0, [r7, #12]
24050958:	607b      	str	r3, [r7, #4]
2405095a:	460b      	mov	r3, r1
2405095c:	817b      	strh	r3, [r7, #10]
2405095e:	4613      	mov	r3, r2
24050960:	813b      	strh	r3, [r7, #8]
	uint16_t refcolumn = 1, i = 0;
24050962:	2301      	movs	r3, #1
24050964:	83fb      	strh	r3, [r7, #30]
24050966:	2300      	movs	r3, #0
24050968:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
2405096a:	2300      	movs	r3, #0
2405096c:	61bb      	str	r3, [r7, #24]
2405096e:	2300      	movs	r3, #0
24050970:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = pText;
24050972:	687b      	ldr	r3, [r7, #4]
24050974:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++)
24050976:	e002      	b.n	2405097e <LCD_DisplayStringAt+0x2e>
		size++;
24050978:	69bb      	ldr	r3, [r7, #24]
2405097a:	3301      	adds	r3, #1
2405097c:	61bb      	str	r3, [r7, #24]
	while (*ptr++)
2405097e:	697b      	ldr	r3, [r7, #20]
24050980:	1c5a      	adds	r2, r3, #1
24050982:	617a      	str	r2, [r7, #20]
24050984:	781b      	ldrb	r3, [r3, #0]
24050986:	2b00      	cmp	r3, #0
24050988:	d1f6      	bne.n	24050978 <LCD_DisplayStringAt+0x28>

	/* Characters number per line */
	xsize = (LCD_GetXSize() / font->Width);
2405098a:	f7ff ff85 	bl	24050898 <LCD_GetXSize>
2405098e:	4603      	mov	r3, r0
24050990:	461a      	mov	r2, r3
24050992:	4b36      	ldr	r3, [pc, #216]	; (24050a6c <LCD_DisplayStringAt+0x11c>)
24050994:	681b      	ldr	r3, [r3, #0]
24050996:	889b      	ldrh	r3, [r3, #4]
24050998:	fbb2 f3f3 	udiv	r3, r2, r3
2405099c:	b29b      	uxth	r3, r3
2405099e:	613b      	str	r3, [r7, #16]

	switch (mode) {
240509a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
240509a4:	2b03      	cmp	r3, #3
240509a6:	d014      	beq.n	240509d2 <LCD_DisplayStringAt+0x82>
240509a8:	2b03      	cmp	r3, #3
240509aa:	dc23      	bgt.n	240509f4 <LCD_DisplayStringAt+0xa4>
240509ac:	2b01      	cmp	r3, #1
240509ae:	d002      	beq.n	240509b6 <LCD_DisplayStringAt+0x66>
240509b0:	2b02      	cmp	r3, #2
240509b2:	d011      	beq.n	240509d8 <LCD_DisplayStringAt+0x88>
240509b4:	e01e      	b.n	240509f4 <LCD_DisplayStringAt+0xa4>
	case CENTER_MODE: {
		refcolumn = X + ((xsize - size) * font->Width) / 2;
240509b6:	693a      	ldr	r2, [r7, #16]
240509b8:	69bb      	ldr	r3, [r7, #24]
240509ba:	1ad3      	subs	r3, r2, r3
240509bc:	4a2b      	ldr	r2, [pc, #172]	; (24050a6c <LCD_DisplayStringAt+0x11c>)
240509be:	6812      	ldr	r2, [r2, #0]
240509c0:	8892      	ldrh	r2, [r2, #4]
240509c2:	fb02 f303 	mul.w	r3, r2, r3
240509c6:	085b      	lsrs	r3, r3, #1
240509c8:	b29a      	uxth	r2, r3
240509ca:	897b      	ldrh	r3, [r7, #10]
240509cc:	4413      	add	r3, r2
240509ce:	83fb      	strh	r3, [r7, #30]
		break;
240509d0:	e013      	b.n	240509fa <LCD_DisplayStringAt+0xaa>
	}
	case LEFT_MODE: {
		refcolumn = X;
240509d2:	897b      	ldrh	r3, [r7, #10]
240509d4:	83fb      	strh	r3, [r7, #30]
		break;
240509d6:	e010      	b.n	240509fa <LCD_DisplayStringAt+0xaa>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * font->Width);
240509d8:	693a      	ldr	r2, [r7, #16]
240509da:	69bb      	ldr	r3, [r7, #24]
240509dc:	1ad3      	subs	r3, r2, r3
240509de:	b29a      	uxth	r2, r3
240509e0:	4b22      	ldr	r3, [pc, #136]	; (24050a6c <LCD_DisplayStringAt+0x11c>)
240509e2:	681b      	ldr	r3, [r3, #0]
240509e4:	889b      	ldrh	r3, [r3, #4]
240509e6:	fb12 f303 	smulbb	r3, r2, r3
240509ea:	b29a      	uxth	r2, r3
240509ec:	897b      	ldrh	r3, [r7, #10]
240509ee:	4413      	add	r3, r2
240509f0:	83fb      	strh	r3, [r7, #30]
		break;
240509f2:	e002      	b.n	240509fa <LCD_DisplayStringAt+0xaa>
	}
	default: {
		refcolumn = X;
240509f4:	897b      	ldrh	r3, [r7, #10]
240509f6:	83fb      	strh	r3, [r7, #30]
		break;
240509f8:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
240509fa:	e012      	b.n	24050a22 <LCD_DisplayStringAt+0xd2>
			& (((LCD_GetXSize() - (i * font->Width)) & 0xFFFF) >= font->Width)) {
		/* Display one character on LCD */
		LCD_DisplayChar(buf, refcolumn, Y, *pText);
240509fc:	687b      	ldr	r3, [r7, #4]
240509fe:	781b      	ldrb	r3, [r3, #0]
24050a00:	893a      	ldrh	r2, [r7, #8]
24050a02:	8bf9      	ldrh	r1, [r7, #30]
24050a04:	68f8      	ldr	r0, [r7, #12]
24050a06:	f000 f833 	bl	24050a70 <LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += font->Width;
24050a0a:	4b18      	ldr	r3, [pc, #96]	; (24050a6c <LCD_DisplayStringAt+0x11c>)
24050a0c:	681b      	ldr	r3, [r3, #0]
24050a0e:	889a      	ldrh	r2, [r3, #4]
24050a10:	8bfb      	ldrh	r3, [r7, #30]
24050a12:	4413      	add	r3, r2
24050a14:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		pText++;
24050a16:	687b      	ldr	r3, [r7, #4]
24050a18:	3301      	adds	r3, #1
24050a1a:	607b      	str	r3, [r7, #4]
		i++;
24050a1c:	8bbb      	ldrh	r3, [r7, #28]
24050a1e:	3301      	adds	r3, #1
24050a20:	83bb      	strh	r3, [r7, #28]
	while ((*pText != 0)
24050a22:	687b      	ldr	r3, [r7, #4]
24050a24:	781b      	ldrb	r3, [r3, #0]
			& (((LCD_GetXSize() - (i * font->Width)) & 0xFFFF) >= font->Width)) {
24050a26:	2b00      	cmp	r3, #0
24050a28:	bf14      	ite	ne
24050a2a:	2301      	movne	r3, #1
24050a2c:	2300      	moveq	r3, #0
24050a2e:	b2dc      	uxtb	r4, r3
24050a30:	f7ff ff32 	bl	24050898 <LCD_GetXSize>
24050a34:	4603      	mov	r3, r0
24050a36:	4619      	mov	r1, r3
24050a38:	8bbb      	ldrh	r3, [r7, #28]
24050a3a:	4a0c      	ldr	r2, [pc, #48]	; (24050a6c <LCD_DisplayStringAt+0x11c>)
24050a3c:	6812      	ldr	r2, [r2, #0]
24050a3e:	8892      	ldrh	r2, [r2, #4]
24050a40:	fb02 f303 	mul.w	r3, r2, r3
24050a44:	1acb      	subs	r3, r1, r3
24050a46:	b29b      	uxth	r3, r3
24050a48:	4a08      	ldr	r2, [pc, #32]	; (24050a6c <LCD_DisplayStringAt+0x11c>)
24050a4a:	6812      	ldr	r2, [r2, #0]
24050a4c:	8892      	ldrh	r2, [r2, #4]
24050a4e:	4293      	cmp	r3, r2
24050a50:	bfac      	ite	ge
24050a52:	2301      	movge	r3, #1
24050a54:	2300      	movlt	r3, #0
24050a56:	b2db      	uxtb	r3, r3
24050a58:	4023      	ands	r3, r4
24050a5a:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
24050a5c:	2b00      	cmp	r3, #0
24050a5e:	d1cd      	bne.n	240509fc <LCD_DisplayStringAt+0xac>
	}
}
24050a60:	bf00      	nop
24050a62:	bf00      	nop
24050a64:	3724      	adds	r7, #36	; 0x24
24050a66:	46bd      	mov	sp, r7
24050a68:	bd90      	pop	{r4, r7, pc}
24050a6a:	bf00      	nop
24050a6c:	20000020 	.word	0x20000020

24050a70 <LCD_DisplayChar>:
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 * @retval None
 */
void LCD_DisplayChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
24050a70:	b580      	push	{r7, lr}
24050a72:	b084      	sub	sp, #16
24050a74:	af00      	add	r7, sp, #0
24050a76:	60f8      	str	r0, [r7, #12]
24050a78:	4608      	mov	r0, r1
24050a7a:	4611      	mov	r1, r2
24050a7c:	461a      	mov	r2, r3
24050a7e:	4603      	mov	r3, r0
24050a80:	817b      	strh	r3, [r7, #10]
24050a82:	460b      	mov	r3, r1
24050a84:	813b      	strh	r3, [r7, #8]
24050a86:	4613      	mov	r3, r2
24050a88:	71fb      	strb	r3, [r7, #7]
	DrawChar(buf, Xpos, Ypos,
			&font->table[(Ascii - ' ') * font->Height * ((font->Width + 7) / 8)]);
24050a8a:	4b0f      	ldr	r3, [pc, #60]	; (24050ac8 <LCD_DisplayChar+0x58>)
24050a8c:	681b      	ldr	r3, [r3, #0]
24050a8e:	681a      	ldr	r2, [r3, #0]
24050a90:	79fb      	ldrb	r3, [r7, #7]
24050a92:	3b20      	subs	r3, #32
24050a94:	490c      	ldr	r1, [pc, #48]	; (24050ac8 <LCD_DisplayChar+0x58>)
24050a96:	6809      	ldr	r1, [r1, #0]
24050a98:	88c9      	ldrh	r1, [r1, #6]
24050a9a:	fb03 f101 	mul.w	r1, r3, r1
24050a9e:	4b0a      	ldr	r3, [pc, #40]	; (24050ac8 <LCD_DisplayChar+0x58>)
24050aa0:	681b      	ldr	r3, [r3, #0]
24050aa2:	889b      	ldrh	r3, [r3, #4]
24050aa4:	3307      	adds	r3, #7
24050aa6:	2b00      	cmp	r3, #0
24050aa8:	da00      	bge.n	24050aac <LCD_DisplayChar+0x3c>
24050aaa:	3307      	adds	r3, #7
24050aac:	10db      	asrs	r3, r3, #3
24050aae:	fb01 f303 	mul.w	r3, r1, r3
	DrawChar(buf, Xpos, Ypos,
24050ab2:	4413      	add	r3, r2
24050ab4:	893a      	ldrh	r2, [r7, #8]
24050ab6:	8979      	ldrh	r1, [r7, #10]
24050ab8:	68f8      	ldr	r0, [r7, #12]
24050aba:	f000 fa09 	bl	24050ed0 <DrawChar>
}
24050abe:	bf00      	nop
24050ac0:	3710      	adds	r7, #16
24050ac2:	46bd      	mov	sp, r7
24050ac4:	bd80      	pop	{r7, pc}
24050ac6:	bf00      	nop
24050ac8:	20000020 	.word	0x20000020

24050acc <LCD_DrawHLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawHLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
24050acc:	b580      	push	{r7, lr}
24050ace:	b088      	sub	sp, #32
24050ad0:	af02      	add	r7, sp, #8
24050ad2:	60f8      	str	r0, [r7, #12]
24050ad4:	4608      	mov	r0, r1
24050ad6:	4611      	mov	r1, r2
24050ad8:	461a      	mov	r2, r3
24050ada:	4603      	mov	r3, r0
24050adc:	817b      	strh	r3, [r7, #10]
24050ade:	460b      	mov	r3, r1
24050ae0:	813b      	strh	r3, [r7, #8]
24050ae2:	4613      	mov	r3, r2
24050ae4:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
24050ae6:	2300      	movs	r3, #0
24050ae8:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
24050aea:	f7ff fed5 	bl	24050898 <LCD_GetXSize>
24050aee:	4603      	mov	r3, r0
24050af0:	461a      	mov	r2, r3
24050af2:	893b      	ldrh	r3, [r7, #8]
24050af4:	fb03 f202 	mul.w	r2, r3, r2
24050af8:	897b      	ldrh	r3, [r7, #10]
24050afa:	4413      	add	r3, r2
24050afc:	005b      	lsls	r3, r3, #1
24050afe:	68fa      	ldr	r2, [r7, #12]
24050b00:	4413      	add	r3, r2
24050b02:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, Length, 1, 0, color);
24050b04:	88f9      	ldrh	r1, [r7, #6]
24050b06:	8c3b      	ldrh	r3, [r7, #32]
24050b08:	9300      	str	r3, [sp, #0]
24050b0a:	2300      	movs	r3, #0
24050b0c:	2201      	movs	r2, #1
24050b0e:	6978      	ldr	r0, [r7, #20]
24050b10:	f000 fa7c 	bl	2405100c <FillBuffer>
}
24050b14:	bf00      	nop
24050b16:	3718      	adds	r7, #24
24050b18:	46bd      	mov	sp, r7
24050b1a:	bd80      	pop	{r7, pc}

24050b1c <LCD_DrawVLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawVLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
24050b1c:	b590      	push	{r4, r7, lr}
24050b1e:	b089      	sub	sp, #36	; 0x24
24050b20:	af02      	add	r7, sp, #8
24050b22:	60f8      	str	r0, [r7, #12]
24050b24:	4608      	mov	r0, r1
24050b26:	4611      	mov	r1, r2
24050b28:	461a      	mov	r2, r3
24050b2a:	4603      	mov	r3, r0
24050b2c:	817b      	strh	r3, [r7, #10]
24050b2e:	460b      	mov	r3, r1
24050b30:	813b      	strh	r3, [r7, #8]
24050b32:	4613      	mov	r3, r2
24050b34:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
24050b36:	2300      	movs	r3, #0
24050b38:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
24050b3a:	f7ff fead 	bl	24050898 <LCD_GetXSize>
24050b3e:	4603      	mov	r3, r0
24050b40:	461a      	mov	r2, r3
24050b42:	893b      	ldrh	r3, [r7, #8]
24050b44:	fb03 f202 	mul.w	r2, r3, r2
24050b48:	897b      	ldrh	r3, [r7, #10]
24050b4a:	4413      	add	r3, r2
24050b4c:	005b      	lsls	r3, r3, #1
24050b4e:	68fa      	ldr	r2, [r7, #12]
24050b50:	4413      	add	r3, r2
24050b52:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, 1, Length, (LCD_GetXSize() - 1), color);
24050b54:	88fc      	ldrh	r4, [r7, #6]
24050b56:	f7ff fe9f 	bl	24050898 <LCD_GetXSize>
24050b5a:	4603      	mov	r3, r0
24050b5c:	3b01      	subs	r3, #1
24050b5e:	461a      	mov	r2, r3
24050b60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050b62:	9300      	str	r3, [sp, #0]
24050b64:	4613      	mov	r3, r2
24050b66:	4622      	mov	r2, r4
24050b68:	2101      	movs	r1, #1
24050b6a:	6978      	ldr	r0, [r7, #20]
24050b6c:	f000 fa4e 	bl	2405100c <FillBuffer>
}
24050b70:	bf00      	nop
24050b72:	371c      	adds	r7, #28
24050b74:	46bd      	mov	sp, r7
24050b76:	bd90      	pop	{r4, r7, pc}

24050b78 <LCD_DrawRect>:
 * @param  Height: display rectangle height
 * @param  Width: display rectangle width
 * @retval None
 */
void LCD_DrawRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
24050b78:	b580      	push	{r7, lr}
24050b7a:	b086      	sub	sp, #24
24050b7c:	af02      	add	r7, sp, #8
24050b7e:	60f8      	str	r0, [r7, #12]
24050b80:	4608      	mov	r0, r1
24050b82:	4611      	mov	r1, r2
24050b84:	461a      	mov	r2, r3
24050b86:	4603      	mov	r3, r0
24050b88:	817b      	strh	r3, [r7, #10]
24050b8a:	460b      	mov	r3, r1
24050b8c:	813b      	strh	r3, [r7, #8]
24050b8e:	4613      	mov	r3, r2
24050b90:	80fb      	strh	r3, [r7, #6]
	/* Draw horizontal lines */
	LCD_DrawHLine(buf, Xpos, Ypos, Width, color);
24050b92:	88f8      	ldrh	r0, [r7, #6]
24050b94:	893a      	ldrh	r2, [r7, #8]
24050b96:	8979      	ldrh	r1, [r7, #10]
24050b98:	8bbb      	ldrh	r3, [r7, #28]
24050b9a:	9300      	str	r3, [sp, #0]
24050b9c:	4603      	mov	r3, r0
24050b9e:	68f8      	ldr	r0, [r7, #12]
24050ba0:	f7ff ff94 	bl	24050acc <LCD_DrawHLine>
	LCD_DrawHLine(buf, Xpos, (Ypos + Height), Width, color);
24050ba4:	893a      	ldrh	r2, [r7, #8]
24050ba6:	8b3b      	ldrh	r3, [r7, #24]
24050ba8:	4413      	add	r3, r2
24050baa:	b29a      	uxth	r2, r3
24050bac:	88f8      	ldrh	r0, [r7, #6]
24050bae:	8979      	ldrh	r1, [r7, #10]
24050bb0:	8bbb      	ldrh	r3, [r7, #28]
24050bb2:	9300      	str	r3, [sp, #0]
24050bb4:	4603      	mov	r3, r0
24050bb6:	68f8      	ldr	r0, [r7, #12]
24050bb8:	f7ff ff88 	bl	24050acc <LCD_DrawHLine>

	/* Draw vertical lines */
	LCD_DrawVLine(buf, Xpos, Ypos, Height, color);
24050bbc:	8b38      	ldrh	r0, [r7, #24]
24050bbe:	893a      	ldrh	r2, [r7, #8]
24050bc0:	8979      	ldrh	r1, [r7, #10]
24050bc2:	8bbb      	ldrh	r3, [r7, #28]
24050bc4:	9300      	str	r3, [sp, #0]
24050bc6:	4603      	mov	r3, r0
24050bc8:	68f8      	ldr	r0, [r7, #12]
24050bca:	f7ff ffa7 	bl	24050b1c <LCD_DrawVLine>
	LCD_DrawVLine(buf, (Xpos + Width), Ypos, Height, color);
24050bce:	897a      	ldrh	r2, [r7, #10]
24050bd0:	88fb      	ldrh	r3, [r7, #6]
24050bd2:	4413      	add	r3, r2
24050bd4:	b299      	uxth	r1, r3
24050bd6:	8b38      	ldrh	r0, [r7, #24]
24050bd8:	893a      	ldrh	r2, [r7, #8]
24050bda:	8bbb      	ldrh	r3, [r7, #28]
24050bdc:	9300      	str	r3, [sp, #0]
24050bde:	4603      	mov	r3, r0
24050be0:	68f8      	ldr	r0, [r7, #12]
24050be2:	f7ff ff9b 	bl	24050b1c <LCD_DrawVLine>
}
24050be6:	bf00      	nop
24050be8:	3710      	adds	r7, #16
24050bea:	46bd      	mov	sp, r7
24050bec:	bd80      	pop	{r7, pc}

24050bee <LCD_DrawCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_DrawCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
24050bee:	b580      	push	{r7, lr}
24050bf0:	b088      	sub	sp, #32
24050bf2:	af00      	add	r7, sp, #0
24050bf4:	60f8      	str	r0, [r7, #12]
24050bf6:	4608      	mov	r0, r1
24050bf8:	4611      	mov	r1, r2
24050bfa:	461a      	mov	r2, r3
24050bfc:	4603      	mov	r3, r0
24050bfe:	817b      	strh	r3, [r7, #10]
24050c00:	460b      	mov	r3, r1
24050c02:	813b      	strh	r3, [r7, #8]
24050c04:	4613      	mov	r3, r2
24050c06:	80fb      	strh	r3, [r7, #6]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
24050c08:	88fb      	ldrh	r3, [r7, #6]
24050c0a:	005b      	lsls	r3, r3, #1
24050c0c:	f1c3 0303 	rsb	r3, r3, #3
24050c10:	61fb      	str	r3, [r7, #28]
	curx = 0;
24050c12:	2300      	movs	r3, #0
24050c14:	61bb      	str	r3, [r7, #24]
	cury = Radius;
24050c16:	88fb      	ldrh	r3, [r7, #6]
24050c18:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
24050c1a:	e087      	b.n	24050d2c <LCD_DrawCircle+0x13e>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos - cury), color);
24050c1c:	69bb      	ldr	r3, [r7, #24]
24050c1e:	b29a      	uxth	r2, r3
24050c20:	897b      	ldrh	r3, [r7, #10]
24050c22:	4413      	add	r3, r2
24050c24:	b299      	uxth	r1, r3
24050c26:	697b      	ldr	r3, [r7, #20]
24050c28:	b29b      	uxth	r3, r3
24050c2a:	893a      	ldrh	r2, [r7, #8]
24050c2c:	1ad3      	subs	r3, r2, r3
24050c2e:	b29a      	uxth	r2, r3
24050c30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050c32:	68f8      	ldr	r0, [r7, #12]
24050c34:	f7ff fe52 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos - cury), color);
24050c38:	69bb      	ldr	r3, [r7, #24]
24050c3a:	b29b      	uxth	r3, r3
24050c3c:	897a      	ldrh	r2, [r7, #10]
24050c3e:	1ad3      	subs	r3, r2, r3
24050c40:	b299      	uxth	r1, r3
24050c42:	697b      	ldr	r3, [r7, #20]
24050c44:	b29b      	uxth	r3, r3
24050c46:	893a      	ldrh	r2, [r7, #8]
24050c48:	1ad3      	subs	r3, r2, r3
24050c4a:	b29a      	uxth	r2, r3
24050c4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050c4e:	68f8      	ldr	r0, [r7, #12]
24050c50:	f7ff fe44 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos - curx), color);
24050c54:	697b      	ldr	r3, [r7, #20]
24050c56:	b29a      	uxth	r2, r3
24050c58:	897b      	ldrh	r3, [r7, #10]
24050c5a:	4413      	add	r3, r2
24050c5c:	b299      	uxth	r1, r3
24050c5e:	69bb      	ldr	r3, [r7, #24]
24050c60:	b29b      	uxth	r3, r3
24050c62:	893a      	ldrh	r2, [r7, #8]
24050c64:	1ad3      	subs	r3, r2, r3
24050c66:	b29a      	uxth	r2, r3
24050c68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050c6a:	68f8      	ldr	r0, [r7, #12]
24050c6c:	f7ff fe36 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos - curx), color);
24050c70:	697b      	ldr	r3, [r7, #20]
24050c72:	b29b      	uxth	r3, r3
24050c74:	897a      	ldrh	r2, [r7, #10]
24050c76:	1ad3      	subs	r3, r2, r3
24050c78:	b299      	uxth	r1, r3
24050c7a:	69bb      	ldr	r3, [r7, #24]
24050c7c:	b29b      	uxth	r3, r3
24050c7e:	893a      	ldrh	r2, [r7, #8]
24050c80:	1ad3      	subs	r3, r2, r3
24050c82:	b29a      	uxth	r2, r3
24050c84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050c86:	68f8      	ldr	r0, [r7, #12]
24050c88:	f7ff fe28 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos + cury), color);
24050c8c:	69bb      	ldr	r3, [r7, #24]
24050c8e:	b29a      	uxth	r2, r3
24050c90:	897b      	ldrh	r3, [r7, #10]
24050c92:	4413      	add	r3, r2
24050c94:	b299      	uxth	r1, r3
24050c96:	697b      	ldr	r3, [r7, #20]
24050c98:	b29a      	uxth	r2, r3
24050c9a:	893b      	ldrh	r3, [r7, #8]
24050c9c:	4413      	add	r3, r2
24050c9e:	b29a      	uxth	r2, r3
24050ca0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050ca2:	68f8      	ldr	r0, [r7, #12]
24050ca4:	f7ff fe1a 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos + cury), color);
24050ca8:	69bb      	ldr	r3, [r7, #24]
24050caa:	b29b      	uxth	r3, r3
24050cac:	897a      	ldrh	r2, [r7, #10]
24050cae:	1ad3      	subs	r3, r2, r3
24050cb0:	b299      	uxth	r1, r3
24050cb2:	697b      	ldr	r3, [r7, #20]
24050cb4:	b29a      	uxth	r2, r3
24050cb6:	893b      	ldrh	r3, [r7, #8]
24050cb8:	4413      	add	r3, r2
24050cba:	b29a      	uxth	r2, r3
24050cbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050cbe:	68f8      	ldr	r0, [r7, #12]
24050cc0:	f7ff fe0c 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos + curx), color);
24050cc4:	697b      	ldr	r3, [r7, #20]
24050cc6:	b29a      	uxth	r2, r3
24050cc8:	897b      	ldrh	r3, [r7, #10]
24050cca:	4413      	add	r3, r2
24050ccc:	b299      	uxth	r1, r3
24050cce:	69bb      	ldr	r3, [r7, #24]
24050cd0:	b29a      	uxth	r2, r3
24050cd2:	893b      	ldrh	r3, [r7, #8]
24050cd4:	4413      	add	r3, r2
24050cd6:	b29a      	uxth	r2, r3
24050cd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050cda:	68f8      	ldr	r0, [r7, #12]
24050cdc:	f7ff fdfe 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos + curx), color);
24050ce0:	697b      	ldr	r3, [r7, #20]
24050ce2:	b29b      	uxth	r3, r3
24050ce4:	897a      	ldrh	r2, [r7, #10]
24050ce6:	1ad3      	subs	r3, r2, r3
24050ce8:	b299      	uxth	r1, r3
24050cea:	69bb      	ldr	r3, [r7, #24]
24050cec:	b29a      	uxth	r2, r3
24050cee:	893b      	ldrh	r3, [r7, #8]
24050cf0:	4413      	add	r3, r2
24050cf2:	b29a      	uxth	r2, r3
24050cf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050cf6:	68f8      	ldr	r0, [r7, #12]
24050cf8:	f7ff fdf0 	bl	240508dc <LCD_DrawPixel>

		if (d < 0) {
24050cfc:	69fb      	ldr	r3, [r7, #28]
24050cfe:	2b00      	cmp	r3, #0
24050d00:	da06      	bge.n	24050d10 <LCD_DrawCircle+0x122>
			d += (curx << 2) + 6;
24050d02:	69bb      	ldr	r3, [r7, #24]
24050d04:	009a      	lsls	r2, r3, #2
24050d06:	69fb      	ldr	r3, [r7, #28]
24050d08:	4413      	add	r3, r2
24050d0a:	3306      	adds	r3, #6
24050d0c:	61fb      	str	r3, [r7, #28]
24050d0e:	e00a      	b.n	24050d26 <LCD_DrawCircle+0x138>
		} else {
			d += ((curx - cury) << 2) + 10;
24050d10:	69ba      	ldr	r2, [r7, #24]
24050d12:	697b      	ldr	r3, [r7, #20]
24050d14:	1ad3      	subs	r3, r2, r3
24050d16:	009a      	lsls	r2, r3, #2
24050d18:	69fb      	ldr	r3, [r7, #28]
24050d1a:	4413      	add	r3, r2
24050d1c:	330a      	adds	r3, #10
24050d1e:	61fb      	str	r3, [r7, #28]
			cury--;
24050d20:	697b      	ldr	r3, [r7, #20]
24050d22:	3b01      	subs	r3, #1
24050d24:	617b      	str	r3, [r7, #20]
		}
		curx++;
24050d26:	69bb      	ldr	r3, [r7, #24]
24050d28:	3301      	adds	r3, #1
24050d2a:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
24050d2c:	69ba      	ldr	r2, [r7, #24]
24050d2e:	697b      	ldr	r3, [r7, #20]
24050d30:	429a      	cmp	r2, r3
24050d32:	f67f af73 	bls.w	24050c1c <LCD_DrawCircle+0x2e>
	}
}
24050d36:	bf00      	nop
24050d38:	bf00      	nop
24050d3a:	3720      	adds	r7, #32
24050d3c:	46bd      	mov	sp, r7
24050d3e:	bd80      	pop	{r7, pc}

24050d40 <LCD_FillRect>:
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 * @retval None
 */
void LCD_FillRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
24050d40:	b5b0      	push	{r4, r5, r7, lr}
24050d42:	b088      	sub	sp, #32
24050d44:	af02      	add	r7, sp, #8
24050d46:	60f8      	str	r0, [r7, #12]
24050d48:	4608      	mov	r0, r1
24050d4a:	4611      	mov	r1, r2
24050d4c:	461a      	mov	r2, r3
24050d4e:	4603      	mov	r3, r0
24050d50:	817b      	strh	r3, [r7, #10]
24050d52:	460b      	mov	r3, r1
24050d54:	813b      	strh	r3, [r7, #8]
24050d56:	4613      	mov	r3, r2
24050d58:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
24050d5a:	2300      	movs	r3, #0
24050d5c:	617b      	str	r3, [r7, #20]

	/* Get the rectangle start address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
24050d5e:	f7ff fd9b 	bl	24050898 <LCD_GetXSize>
24050d62:	4603      	mov	r3, r0
24050d64:	461a      	mov	r2, r3
24050d66:	893b      	ldrh	r3, [r7, #8]
24050d68:	fb03 f202 	mul.w	r2, r3, r2
24050d6c:	897b      	ldrh	r3, [r7, #10]
24050d6e:	4413      	add	r3, r2
24050d70:	005b      	lsls	r3, r3, #1
24050d72:	68fa      	ldr	r2, [r7, #12]
24050d74:	4413      	add	r3, r2
24050d76:	617b      	str	r3, [r7, #20]

	/* Fill the rectangle */
	FillBuffer((uint32_t*) xaddress, Width, Height, (LCD_GetXSize() - Width),
24050d78:	88fc      	ldrh	r4, [r7, #6]
24050d7a:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
24050d7c:	f7ff fd8c 	bl	24050898 <LCD_GetXSize>
24050d80:	4603      	mov	r3, r0
24050d82:	461a      	mov	r2, r3
24050d84:	88fb      	ldrh	r3, [r7, #6]
24050d86:	1ad3      	subs	r3, r2, r3
24050d88:	461a      	mov	r2, r3
24050d8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
24050d8c:	9300      	str	r3, [sp, #0]
24050d8e:	4613      	mov	r3, r2
24050d90:	462a      	mov	r2, r5
24050d92:	4621      	mov	r1, r4
24050d94:	6978      	ldr	r0, [r7, #20]
24050d96:	f000 f939 	bl	2405100c <FillBuffer>
			color);
}
24050d9a:	bf00      	nop
24050d9c:	3718      	adds	r7, #24
24050d9e:	46bd      	mov	sp, r7
24050da0:	bdb0      	pop	{r4, r5, r7, pc}

24050da2 <LCD_FillCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_FillCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
24050da2:	b580      	push	{r7, lr}
24050da4:	b08a      	sub	sp, #40	; 0x28
24050da6:	af02      	add	r7, sp, #8
24050da8:	60f8      	str	r0, [r7, #12]
24050daa:	4608      	mov	r0, r1
24050dac:	4611      	mov	r1, r2
24050dae:	461a      	mov	r2, r3
24050db0:	4603      	mov	r3, r0
24050db2:	817b      	strh	r3, [r7, #10]
24050db4:	460b      	mov	r3, r1
24050db6:	813b      	strh	r3, [r7, #8]
24050db8:	4613      	mov	r3, r2
24050dba:	80fb      	strh	r3, [r7, #6]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
24050dbc:	88fb      	ldrh	r3, [r7, #6]
24050dbe:	005b      	lsls	r3, r3, #1
24050dc0:	f1c3 0303 	rsb	r3, r3, #3
24050dc4:	61fb      	str	r3, [r7, #28]

	curx = 0;
24050dc6:	2300      	movs	r3, #0
24050dc8:	61bb      	str	r3, [r7, #24]
	cury = Radius;
24050dca:	88fb      	ldrh	r3, [r7, #6]
24050dcc:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
24050dce:	e06d      	b.n	24050eac <LCD_FillCircle+0x10a>
		if (cury > 0) {
24050dd0:	697b      	ldr	r3, [r7, #20]
24050dd2:	2b00      	cmp	r3, #0
24050dd4:	d027      	beq.n	24050e26 <LCD_FillCircle+0x84>
			LCD_DrawHLine(buf, Xpos - cury, Ypos + curx, 2 * cury, color);
24050dd6:	697b      	ldr	r3, [r7, #20]
24050dd8:	b29b      	uxth	r3, r3
24050dda:	897a      	ldrh	r2, [r7, #10]
24050ddc:	1ad3      	subs	r3, r2, r3
24050dde:	b299      	uxth	r1, r3
24050de0:	69bb      	ldr	r3, [r7, #24]
24050de2:	b29a      	uxth	r2, r3
24050de4:	893b      	ldrh	r3, [r7, #8]
24050de6:	4413      	add	r3, r2
24050de8:	b29a      	uxth	r2, r3
24050dea:	697b      	ldr	r3, [r7, #20]
24050dec:	b29b      	uxth	r3, r3
24050dee:	005b      	lsls	r3, r3, #1
24050df0:	b298      	uxth	r0, r3
24050df2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050df4:	9300      	str	r3, [sp, #0]
24050df6:	4603      	mov	r3, r0
24050df8:	68f8      	ldr	r0, [r7, #12]
24050dfa:	f7ff fe67 	bl	24050acc <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - cury, Ypos - curx, 2 * cury, color);
24050dfe:	697b      	ldr	r3, [r7, #20]
24050e00:	b29b      	uxth	r3, r3
24050e02:	897a      	ldrh	r2, [r7, #10]
24050e04:	1ad3      	subs	r3, r2, r3
24050e06:	b299      	uxth	r1, r3
24050e08:	69bb      	ldr	r3, [r7, #24]
24050e0a:	b29b      	uxth	r3, r3
24050e0c:	893a      	ldrh	r2, [r7, #8]
24050e0e:	1ad3      	subs	r3, r2, r3
24050e10:	b29a      	uxth	r2, r3
24050e12:	697b      	ldr	r3, [r7, #20]
24050e14:	b29b      	uxth	r3, r3
24050e16:	005b      	lsls	r3, r3, #1
24050e18:	b298      	uxth	r0, r3
24050e1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050e1c:	9300      	str	r3, [sp, #0]
24050e1e:	4603      	mov	r3, r0
24050e20:	68f8      	ldr	r0, [r7, #12]
24050e22:	f7ff fe53 	bl	24050acc <LCD_DrawHLine>
		}

		if (curx > 0) {
24050e26:	69bb      	ldr	r3, [r7, #24]
24050e28:	2b00      	cmp	r3, #0
24050e2a:	d027      	beq.n	24050e7c <LCD_FillCircle+0xda>
			LCD_DrawHLine(buf, Xpos - curx, Ypos - cury, 2 * curx, color);
24050e2c:	69bb      	ldr	r3, [r7, #24]
24050e2e:	b29b      	uxth	r3, r3
24050e30:	897a      	ldrh	r2, [r7, #10]
24050e32:	1ad3      	subs	r3, r2, r3
24050e34:	b299      	uxth	r1, r3
24050e36:	697b      	ldr	r3, [r7, #20]
24050e38:	b29b      	uxth	r3, r3
24050e3a:	893a      	ldrh	r2, [r7, #8]
24050e3c:	1ad3      	subs	r3, r2, r3
24050e3e:	b29a      	uxth	r2, r3
24050e40:	69bb      	ldr	r3, [r7, #24]
24050e42:	b29b      	uxth	r3, r3
24050e44:	005b      	lsls	r3, r3, #1
24050e46:	b298      	uxth	r0, r3
24050e48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050e4a:	9300      	str	r3, [sp, #0]
24050e4c:	4603      	mov	r3, r0
24050e4e:	68f8      	ldr	r0, [r7, #12]
24050e50:	f7ff fe3c 	bl	24050acc <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - curx, Ypos + cury, 2 * curx, color);
24050e54:	69bb      	ldr	r3, [r7, #24]
24050e56:	b29b      	uxth	r3, r3
24050e58:	897a      	ldrh	r2, [r7, #10]
24050e5a:	1ad3      	subs	r3, r2, r3
24050e5c:	b299      	uxth	r1, r3
24050e5e:	697b      	ldr	r3, [r7, #20]
24050e60:	b29a      	uxth	r2, r3
24050e62:	893b      	ldrh	r3, [r7, #8]
24050e64:	4413      	add	r3, r2
24050e66:	b29a      	uxth	r2, r3
24050e68:	69bb      	ldr	r3, [r7, #24]
24050e6a:	b29b      	uxth	r3, r3
24050e6c:	005b      	lsls	r3, r3, #1
24050e6e:	b298      	uxth	r0, r3
24050e70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050e72:	9300      	str	r3, [sp, #0]
24050e74:	4603      	mov	r3, r0
24050e76:	68f8      	ldr	r0, [r7, #12]
24050e78:	f7ff fe28 	bl	24050acc <LCD_DrawHLine>
		}
		if (d < 0) {
24050e7c:	69fb      	ldr	r3, [r7, #28]
24050e7e:	2b00      	cmp	r3, #0
24050e80:	da06      	bge.n	24050e90 <LCD_FillCircle+0xee>
			d += (curx << 2) + 6;
24050e82:	69bb      	ldr	r3, [r7, #24]
24050e84:	009a      	lsls	r2, r3, #2
24050e86:	69fb      	ldr	r3, [r7, #28]
24050e88:	4413      	add	r3, r2
24050e8a:	3306      	adds	r3, #6
24050e8c:	61fb      	str	r3, [r7, #28]
24050e8e:	e00a      	b.n	24050ea6 <LCD_FillCircle+0x104>
		} else {
			d += ((curx - cury) << 2) + 10;
24050e90:	69ba      	ldr	r2, [r7, #24]
24050e92:	697b      	ldr	r3, [r7, #20]
24050e94:	1ad3      	subs	r3, r2, r3
24050e96:	009a      	lsls	r2, r3, #2
24050e98:	69fb      	ldr	r3, [r7, #28]
24050e9a:	4413      	add	r3, r2
24050e9c:	330a      	adds	r3, #10
24050e9e:	61fb      	str	r3, [r7, #28]
			cury--;
24050ea0:	697b      	ldr	r3, [r7, #20]
24050ea2:	3b01      	subs	r3, #1
24050ea4:	617b      	str	r3, [r7, #20]
		}
		curx++;
24050ea6:	69bb      	ldr	r3, [r7, #24]
24050ea8:	3301      	adds	r3, #1
24050eaa:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
24050eac:	69ba      	ldr	r2, [r7, #24]
24050eae:	697b      	ldr	r3, [r7, #20]
24050eb0:	429a      	cmp	r2, r3
24050eb2:	d98d      	bls.n	24050dd0 <LCD_FillCircle+0x2e>
	}
	LCD_DrawCircle(buf, Xpos, Ypos, Radius, color);
24050eb4:	88f8      	ldrh	r0, [r7, #6]
24050eb6:	893a      	ldrh	r2, [r7, #8]
24050eb8:	8979      	ldrh	r1, [r7, #10]
24050eba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050ebc:	9300      	str	r3, [sp, #0]
24050ebe:	4603      	mov	r3, r0
24050ec0:	68f8      	ldr	r0, [r7, #12]
24050ec2:	f7ff fe94 	bl	24050bee <LCD_DrawCircle>
}
24050ec6:	bf00      	nop
24050ec8:	3720      	adds	r7, #32
24050eca:	46bd      	mov	sp, r7
24050ecc:	bd80      	pop	{r7, pc}
	...

24050ed0 <DrawChar>:
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		const uint8_t *c) {
24050ed0:	b580      	push	{r7, lr}
24050ed2:	b08a      	sub	sp, #40	; 0x28
24050ed4:	af00      	add	r7, sp, #0
24050ed6:	60f8      	str	r0, [r7, #12]
24050ed8:	607b      	str	r3, [r7, #4]
24050eda:	460b      	mov	r3, r1
24050edc:	817b      	strh	r3, [r7, #10]
24050ede:	4613      	mov	r3, r2
24050ee0:	813b      	strh	r3, [r7, #8]
	uint32_t i = 0, j = 0;
24050ee2:	2300      	movs	r3, #0
24050ee4:	627b      	str	r3, [r7, #36]	; 0x24
24050ee6:	2300      	movs	r3, #0
24050ee8:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
24050eea:	2300      	movs	r3, #0
24050eec:	61fb      	str	r3, [r7, #28]

	height = font->Height;
24050eee:	4b44      	ldr	r3, [pc, #272]	; (24051000 <DrawChar+0x130>)
24050ef0:	681b      	ldr	r3, [r3, #0]
24050ef2:	88db      	ldrh	r3, [r3, #6]
24050ef4:	837b      	strh	r3, [r7, #26]
	width = font->Width;
24050ef6:	4b42      	ldr	r3, [pc, #264]	; (24051000 <DrawChar+0x130>)
24050ef8:	681b      	ldr	r3, [r3, #0]
24050efa:	889b      	ldrh	r3, [r3, #4]
24050efc:	833b      	strh	r3, [r7, #24]

	offset = 8 * ((width + 7) / 8) - width;
24050efe:	8b3b      	ldrh	r3, [r7, #24]
24050f00:	3307      	adds	r3, #7
24050f02:	2b00      	cmp	r3, #0
24050f04:	da00      	bge.n	24050f08 <DrawChar+0x38>
24050f06:	3307      	adds	r3, #7
24050f08:	10db      	asrs	r3, r3, #3
24050f0a:	b2db      	uxtb	r3, r3
24050f0c:	00db      	lsls	r3, r3, #3
24050f0e:	b2da      	uxtb	r2, r3
24050f10:	8b3b      	ldrh	r3, [r7, #24]
24050f12:	b2db      	uxtb	r3, r3
24050f14:	1ad3      	subs	r3, r2, r3
24050f16:	75fb      	strb	r3, [r7, #23]

	for (i = 0; i < height; i++) {
24050f18:	2300      	movs	r3, #0
24050f1a:	627b      	str	r3, [r7, #36]	; 0x24
24050f1c:	e067      	b.n	24050fee <DrawChar+0x11e>
		pchar = ((uint8_t*) c + (width + 7) / 8 * i);
24050f1e:	8b3b      	ldrh	r3, [r7, #24]
24050f20:	3307      	adds	r3, #7
24050f22:	2b00      	cmp	r3, #0
24050f24:	da00      	bge.n	24050f28 <DrawChar+0x58>
24050f26:	3307      	adds	r3, #7
24050f28:	10db      	asrs	r3, r3, #3
24050f2a:	461a      	mov	r2, r3
24050f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24050f2e:	fb02 f303 	mul.w	r3, r2, r3
24050f32:	687a      	ldr	r2, [r7, #4]
24050f34:	4413      	add	r3, r2
24050f36:	613b      	str	r3, [r7, #16]

		switch (((width + 7) / 8)) {
24050f38:	8b3b      	ldrh	r3, [r7, #24]
24050f3a:	3307      	adds	r3, #7
24050f3c:	2b00      	cmp	r3, #0
24050f3e:	da00      	bge.n	24050f42 <DrawChar+0x72>
24050f40:	3307      	adds	r3, #7
24050f42:	10db      	asrs	r3, r3, #3
24050f44:	2b01      	cmp	r3, #1
24050f46:	d002      	beq.n	24050f4e <DrawChar+0x7e>
24050f48:	2b02      	cmp	r3, #2
24050f4a:	d004      	beq.n	24050f56 <DrawChar+0x86>
24050f4c:	e00c      	b.n	24050f68 <DrawChar+0x98>
		case 1:
			line = pchar[0];
24050f4e:	693b      	ldr	r3, [r7, #16]
24050f50:	781b      	ldrb	r3, [r3, #0]
24050f52:	61fb      	str	r3, [r7, #28]
			break;
24050f54:	e016      	b.n	24050f84 <DrawChar+0xb4>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
24050f56:	693b      	ldr	r3, [r7, #16]
24050f58:	781b      	ldrb	r3, [r3, #0]
24050f5a:	021b      	lsls	r3, r3, #8
24050f5c:	693a      	ldr	r2, [r7, #16]
24050f5e:	3201      	adds	r2, #1
24050f60:	7812      	ldrb	r2, [r2, #0]
24050f62:	4313      	orrs	r3, r2
24050f64:	61fb      	str	r3, [r7, #28]
			break;
24050f66:	e00d      	b.n	24050f84 <DrawChar+0xb4>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
24050f68:	693b      	ldr	r3, [r7, #16]
24050f6a:	781b      	ldrb	r3, [r3, #0]
24050f6c:	041a      	lsls	r2, r3, #16
24050f6e:	693b      	ldr	r3, [r7, #16]
24050f70:	3301      	adds	r3, #1
24050f72:	781b      	ldrb	r3, [r3, #0]
24050f74:	021b      	lsls	r3, r3, #8
24050f76:	4313      	orrs	r3, r2
24050f78:	693a      	ldr	r2, [r7, #16]
24050f7a:	3202      	adds	r2, #2
24050f7c:	7812      	ldrb	r2, [r2, #0]
24050f7e:	4313      	orrs	r3, r2
24050f80:	61fb      	str	r3, [r7, #28]
			break;
24050f82:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
24050f84:	2300      	movs	r3, #0
24050f86:	623b      	str	r3, [r7, #32]
24050f88:	e027      	b.n	24050fda <DrawChar+0x10a>
			if (line & (1 << (width - j + offset - 1))) {
24050f8a:	8b3a      	ldrh	r2, [r7, #24]
24050f8c:	6a3b      	ldr	r3, [r7, #32]
24050f8e:	1ad2      	subs	r2, r2, r3
24050f90:	7dfb      	ldrb	r3, [r7, #23]
24050f92:	4413      	add	r3, r2
24050f94:	3b01      	subs	r3, #1
24050f96:	2201      	movs	r2, #1
24050f98:	fa02 f303 	lsl.w	r3, r2, r3
24050f9c:	461a      	mov	r2, r3
24050f9e:	69fb      	ldr	r3, [r7, #28]
24050fa0:	4013      	ands	r3, r2
24050fa2:	2b00      	cmp	r3, #0
24050fa4:	d00b      	beq.n	24050fbe <DrawChar+0xee>
				LCD_DrawPixel(buf, (Xpos + j), Ypos, font_color);
24050fa6:	6a3b      	ldr	r3, [r7, #32]
24050fa8:	b29a      	uxth	r2, r3
24050faa:	897b      	ldrh	r3, [r7, #10]
24050fac:	4413      	add	r3, r2
24050fae:	b299      	uxth	r1, r3
24050fb0:	4b14      	ldr	r3, [pc, #80]	; (24051004 <DrawChar+0x134>)
24050fb2:	881b      	ldrh	r3, [r3, #0]
24050fb4:	893a      	ldrh	r2, [r7, #8]
24050fb6:	68f8      	ldr	r0, [r7, #12]
24050fb8:	f7ff fc90 	bl	240508dc <LCD_DrawPixel>
24050fbc:	e00a      	b.n	24050fd4 <DrawChar+0x104>
			} else {
				LCD_DrawPixel(buf, (Xpos + j), Ypos, font_bcolor);
24050fbe:	6a3b      	ldr	r3, [r7, #32]
24050fc0:	b29a      	uxth	r2, r3
24050fc2:	897b      	ldrh	r3, [r7, #10]
24050fc4:	4413      	add	r3, r2
24050fc6:	b299      	uxth	r1, r3
24050fc8:	4b0f      	ldr	r3, [pc, #60]	; (24051008 <DrawChar+0x138>)
24050fca:	881b      	ldrh	r3, [r3, #0]
24050fcc:	893a      	ldrh	r2, [r7, #8]
24050fce:	68f8      	ldr	r0, [r7, #12]
24050fd0:	f7ff fc84 	bl	240508dc <LCD_DrawPixel>
		for (j = 0; j < width; j++) {
24050fd4:	6a3b      	ldr	r3, [r7, #32]
24050fd6:	3301      	adds	r3, #1
24050fd8:	623b      	str	r3, [r7, #32]
24050fda:	8b3b      	ldrh	r3, [r7, #24]
24050fdc:	6a3a      	ldr	r2, [r7, #32]
24050fde:	429a      	cmp	r2, r3
24050fe0:	d3d3      	bcc.n	24050f8a <DrawChar+0xba>
			}
		}
		Ypos++;
24050fe2:	893b      	ldrh	r3, [r7, #8]
24050fe4:	3301      	adds	r3, #1
24050fe6:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
24050fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24050fea:	3301      	adds	r3, #1
24050fec:	627b      	str	r3, [r7, #36]	; 0x24
24050fee:	8b7b      	ldrh	r3, [r7, #26]
24050ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24050ff2:	429a      	cmp	r2, r3
24050ff4:	d393      	bcc.n	24050f1e <DrawChar+0x4e>
	}
}
24050ff6:	bf00      	nop
24050ff8:	bf00      	nop
24050ffa:	3728      	adds	r7, #40	; 0x28
24050ffc:	46bd      	mov	sp, r7
24050ffe:	bd80      	pop	{r7, pc}
24051000:	20000020 	.word	0x20000020
24051004:	20000024 	.word	0x20000024
24051008:	200001f8 	.word	0x200001f8

2405100c <FillBuffer>:
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 * @retval None
 */
static void FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize,
		uint32_t OffLine, uint16_t ColorIndex) {
2405100c:	b480      	push	{r7}
2405100e:	b085      	sub	sp, #20
24051010:	af00      	add	r7, sp, #0
24051012:	60f8      	str	r0, [r7, #12]
24051014:	60b9      	str	r1, [r7, #8]
24051016:	607a      	str	r2, [r7, #4]
24051018:	603b      	str	r3, [r7, #0]

	DMA2D->CR = DMA2D_R2M;
2405101a:	4b16      	ldr	r3, [pc, #88]	; (24051074 <FillBuffer+0x68>)
2405101c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
24051020:	601a      	str	r2, [r3, #0]
	DMA2D->OCOLR = 0x0000FFFF & ColorIndex;
24051022:	4a14      	ldr	r2, [pc, #80]	; (24051074 <FillBuffer+0x68>)
24051024:	8b3b      	ldrh	r3, [r7, #24]
24051026:	6393      	str	r3, [r2, #56]	; 0x38
	DMA2D->OMAR = (uint32_t) pDst;
24051028:	4a12      	ldr	r2, [pc, #72]	; (24051074 <FillBuffer+0x68>)
2405102a:	68fb      	ldr	r3, [r7, #12]
2405102c:	63d3      	str	r3, [r2, #60]	; 0x3c
	DMA2D->OOR = OffLine;
2405102e:	4a11      	ldr	r2, [pc, #68]	; (24051074 <FillBuffer+0x68>)
24051030:	683b      	ldr	r3, [r7, #0]
24051032:	6413      	str	r3, [r2, #64]	; 0x40
	DMA2D->OPFCCR = LTDC_PIXEL_FORMAT_RGB565;
24051034:	4b0f      	ldr	r3, [pc, #60]	; (24051074 <FillBuffer+0x68>)
24051036:	2202      	movs	r2, #2
24051038:	635a      	str	r2, [r3, #52]	; 0x34
	DMA2D->NLR = (uint32_t) (xSize << 16) | (uint16_t) ySize;
2405103a:	68bb      	ldr	r3, [r7, #8]
2405103c:	041b      	lsls	r3, r3, #16
2405103e:	687a      	ldr	r2, [r7, #4]
24051040:	b292      	uxth	r2, r2
24051042:	4611      	mov	r1, r2
24051044:	4a0b      	ldr	r2, [pc, #44]	; (24051074 <FillBuffer+0x68>)
24051046:	430b      	orrs	r3, r1
24051048:	6453      	str	r3, [r2, #68]	; 0x44

	DMA2D->CR |= DMA2D_CR_START;
2405104a:	4b0a      	ldr	r3, [pc, #40]	; (24051074 <FillBuffer+0x68>)
2405104c:	681b      	ldr	r3, [r3, #0]
2405104e:	4a09      	ldr	r2, [pc, #36]	; (24051074 <FillBuffer+0x68>)
24051050:	f043 0301 	orr.w	r3, r3, #1
24051054:	6013      	str	r3, [r2, #0]

	while (DMA2D->CR & DMA2D_CR_START) {
24051056:	bf00      	nop
24051058:	4b06      	ldr	r3, [pc, #24]	; (24051074 <FillBuffer+0x68>)
2405105a:	681b      	ldr	r3, [r3, #0]
2405105c:	f003 0301 	and.w	r3, r3, #1
24051060:	2b00      	cmp	r3, #0
24051062:	d1f9      	bne.n	24051058 <FillBuffer+0x4c>

	}
}
24051064:	bf00      	nop
24051066:	bf00      	nop
24051068:	3714      	adds	r7, #20
2405106a:	46bd      	mov	sp, r7
2405106c:	f85d 7b04 	ldr.w	r7, [sp], #4
24051070:	4770      	bx	lr
24051072:	bf00      	nop
24051074:	52001000 	.word	0x52001000

24051078 <lcd_backlight_set>:
  HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
  HAL_DAC_Stop(&hdac2, DAC_CHANNEL_1);
}

void lcd_backlight_set(uint8_t brightness)
{
24051078:	b580      	push	{r7, lr}
2405107a:	b082      	sub	sp, #8
2405107c:	af00      	add	r7, sp, #0
2405107e:	4603      	mov	r3, r0
24051080:	71fb      	strb	r3, [r7, #7]
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
24051082:	79fb      	ldrb	r3, [r7, #7]
24051084:	2208      	movs	r2, #8
24051086:	2100      	movs	r1, #0
24051088:	480f      	ldr	r0, [pc, #60]	; (240510c8 <lcd_backlight_set+0x50>)
2405108a:	f003 fc5c 	bl	24054946 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, brightness);
2405108e:	79fb      	ldrb	r3, [r7, #7]
24051090:	2208      	movs	r2, #8
24051092:	2110      	movs	r1, #16
24051094:	480c      	ldr	r0, [pc, #48]	; (240510c8 <lcd_backlight_set+0x50>)
24051096:	f003 fc56 	bl	24054946 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
2405109a:	79fb      	ldrb	r3, [r7, #7]
2405109c:	2208      	movs	r2, #8
2405109e:	2100      	movs	r1, #0
240510a0:	480a      	ldr	r0, [pc, #40]	; (240510cc <lcd_backlight_set+0x54>)
240510a2:	f003 fc50 	bl	24054946 <HAL_DAC_SetValue>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
240510a6:	2100      	movs	r1, #0
240510a8:	4807      	ldr	r0, [pc, #28]	; (240510c8 <lcd_backlight_set+0x50>)
240510aa:	f003 fbfa 	bl	240548a2 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
240510ae:	2110      	movs	r1, #16
240510b0:	4805      	ldr	r0, [pc, #20]	; (240510c8 <lcd_backlight_set+0x50>)
240510b2:	f003 fbf6 	bl	240548a2 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
240510b6:	2100      	movs	r1, #0
240510b8:	4804      	ldr	r0, [pc, #16]	; (240510cc <lcd_backlight_set+0x54>)
240510ba:	f003 fbf2 	bl	240548a2 <HAL_DAC_Start>
}
240510be:	bf00      	nop
240510c0:	3708      	adds	r7, #8
240510c2:	46bd      	mov	sp, r7
240510c4:	bd80      	pop	{r7, pc}
240510c6:	bf00      	nop
240510c8:	20000268 	.word	0x20000268
240510cc:	2000027c 	.word	0x2000027c

240510d0 <lcd_deinit>:
{
  lcd_backlight_set(255);
}

void lcd_deinit(SPI_HandleTypeDef *spi)
{
240510d0:	b580      	push	{r7, lr}
240510d2:	b082      	sub	sp, #8
240510d4:	af00      	add	r7, sp, #0
240510d6:	6078      	str	r0, [r7, #4]
  // Chip select low.
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240510d8:	2200      	movs	r2, #0
240510da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240510de:	480b      	ldr	r0, [pc, #44]	; (2405110c <lcd_deinit+0x3c>)
240510e0:	f006 feaa 	bl	24057e38 <HAL_GPIO_WritePin>
  // 3.3v power to display *SET* to disable supply.
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
240510e4:	2201      	movs	r2, #1
240510e6:	2102      	movs	r1, #2
240510e8:	4809      	ldr	r0, [pc, #36]	; (24051110 <lcd_deinit+0x40>)
240510ea:	f006 fea5 	bl	24057e38 <HAL_GPIO_WritePin>
  // Disable 1.8v.
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
240510ee:	2200      	movs	r2, #0
240510f0:	2110      	movs	r1, #16
240510f2:	4807      	ldr	r0, [pc, #28]	; (24051110 <lcd_deinit+0x40>)
240510f4:	f006 fea0 	bl	24057e38 <HAL_GPIO_WritePin>
  // Pull reset line(?) low. (Flakey without this)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
240510f8:	2200      	movs	r2, #0
240510fa:	f44f 7180 	mov.w	r1, #256	; 0x100
240510fe:	4804      	ldr	r0, [pc, #16]	; (24051110 <lcd_deinit+0x40>)
24051100:	f006 fe9a 	bl	24057e38 <HAL_GPIO_WritePin>
}
24051104:	bf00      	nop
24051106:	3708      	adds	r7, #8
24051108:	46bd      	mov	sp, r7
2405110a:	bd80      	pop	{r7, pc}
2405110c:	58020400 	.word	0x58020400
24051110:	58020c00 	.word	0x58020c00

24051114 <lcd_init>:

void lcd_init(SPI_HandleTypeDef *spi, LTDC_HandleTypeDef *ltdc)
{
24051114:	b580      	push	{r7, lr}
24051116:	b082      	sub	sp, #8
24051118:	af00      	add	r7, sp, #0
2405111a:	6078      	str	r0, [r7, #4]
2405111c:	6039      	str	r1, [r7, #0]
// Wake
// Enable 3.3v
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
2405111e:	2200      	movs	r2, #0
24051120:	2102      	movs	r1, #2
24051122:	489c      	ldr	r0, [pc, #624]	; (24051394 <lcd_init+0x280>)
24051124:	f006 fe88 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(1);
24051128:	2001      	movs	r0, #1
2405112a:	f001 fdff 	bl	24052d2c <HAL_Delay>
  // Enable 1.8V
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
2405112e:	2201      	movs	r2, #1
24051130:	2110      	movs	r1, #16
24051132:	4898      	ldr	r0, [pc, #608]	; (24051394 <lcd_init+0x280>)
24051134:	f006 fe80 	bl	24057e38 <HAL_GPIO_WritePin>
  // also assert CS, not sure where to put this yet
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051138:	2201      	movs	r2, #1
2405113a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405113e:	4896      	ldr	r0, [pc, #600]	; (24051398 <lcd_init+0x284>)
24051140:	f006 fe7a 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(7);
24051144:	2007      	movs	r0, #7
24051146:	f001 fdf1 	bl	24052d2c <HAL_Delay>


// HAL_SPI_Transmit(spi, (uint8_t *)"\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55", 10, 100);
  // Lets go, bootup sequence.
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
2405114a:	2201      	movs	r2, #1
2405114c:	f44f 7180 	mov.w	r1, #256	; 0x100
24051150:	4890      	ldr	r0, [pc, #576]	; (24051394 <lcd_init+0x280>)
24051152:	f006 fe71 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
24051156:	2002      	movs	r0, #2
24051158:	f001 fde8 	bl	24052d2c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
2405115c:	2200      	movs	r2, #0
2405115e:	f44f 7180 	mov.w	r1, #256	; 0x100
24051162:	488c      	ldr	r0, [pc, #560]	; (24051394 <lcd_init+0x280>)
24051164:	f006 fe68 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
24051168:	2002      	movs	r0, #2
2405116a:	f001 fddf 	bl	24052d2c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
2405116e:	2201      	movs	r2, #1
24051170:	f44f 7180 	mov.w	r1, #256	; 0x100
24051174:	4887      	ldr	r0, [pc, #540]	; (24051394 <lcd_init+0x280>)
24051176:	f006 fe5f 	bl	24057e38 <HAL_GPIO_WritePin>

  HAL_Delay(10);
2405117a:	200a      	movs	r0, #10
2405117c:	f001 fdd6 	bl	24052d2c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051180:	2200      	movs	r2, #0
24051182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051186:	4884      	ldr	r0, [pc, #528]	; (24051398 <lcd_init+0x284>)
24051188:	f006 fe56 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(45);
2405118c:	202d      	movs	r0, #45	; 0x2d
2405118e:	f001 fdcd 	bl	24052d2c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x08\x80", 2, 100);
24051192:	2364      	movs	r3, #100	; 0x64
24051194:	2202      	movs	r2, #2
24051196:	4981      	ldr	r1, [pc, #516]	; (2405139c <lcd_init+0x288>)
24051198:	6878      	ldr	r0, [r7, #4]
2405119a:	f00d fd07 	bl	2405ebac <HAL_SPI_Transmit>
  HAL_Delay(2);
2405119e:	2002      	movs	r0, #2
240511a0:	f001 fdc4 	bl	24052d2c <HAL_Delay>

  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240511a4:	2201      	movs	r2, #1
240511a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240511aa:	487b      	ldr	r0, [pc, #492]	; (24051398 <lcd_init+0x284>)
240511ac:	f006 fe44 	bl	24057e38 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240511b0:	2200      	movs	r2, #0
240511b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240511b6:	4878      	ldr	r0, [pc, #480]	; (24051398 <lcd_init+0x284>)
240511b8:	f006 fe3e 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
240511bc:	2002      	movs	r0, #2
240511be:	f001 fdb5 	bl	24052d2c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x6E\x80", 2, 100);
240511c2:	2364      	movs	r3, #100	; 0x64
240511c4:	2202      	movs	r2, #2
240511c6:	4976      	ldr	r1, [pc, #472]	; (240513a0 <lcd_init+0x28c>)
240511c8:	6878      	ldr	r0, [r7, #4]
240511ca:	f00d fcef 	bl	2405ebac <HAL_SPI_Transmit>
  HAL_Delay(2);
240511ce:	2002      	movs	r0, #2
240511d0:	f001 fdac 	bl	24052d2c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240511d4:	2201      	movs	r2, #1
240511d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240511da:	486f      	ldr	r0, [pc, #444]	; (24051398 <lcd_init+0x284>)
240511dc:	f006 fe2c 	bl	24057e38 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240511e0:	2200      	movs	r2, #0
240511e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240511e6:	486c      	ldr	r0, [pc, #432]	; (24051398 <lcd_init+0x284>)
240511e8:	f006 fe26 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
240511ec:	2002      	movs	r0, #2
240511ee:	f001 fd9d 	bl	24052d2c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x80\x80", 2, 100);
240511f2:	2364      	movs	r3, #100	; 0x64
240511f4:	2202      	movs	r2, #2
240511f6:	496b      	ldr	r1, [pc, #428]	; (240513a4 <lcd_init+0x290>)
240511f8:	6878      	ldr	r0, [r7, #4]
240511fa:	f00d fcd7 	bl	2405ebac <HAL_SPI_Transmit>

  HAL_Delay(2);
240511fe:	2002      	movs	r0, #2
24051200:	f001 fd94 	bl	24052d2c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051204:	2201      	movs	r2, #1
24051206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405120a:	4863      	ldr	r0, [pc, #396]	; (24051398 <lcd_init+0x284>)
2405120c:	f006 fe14 	bl	24057e38 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051210:	2200      	movs	r2, #0
24051212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051216:	4860      	ldr	r0, [pc, #384]	; (24051398 <lcd_init+0x284>)
24051218:	f006 fe0e 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
2405121c:	2002      	movs	r0, #2
2405121e:	f001 fd85 	bl	24052d2c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x68\x00", 2, 100);
24051222:	2364      	movs	r3, #100	; 0x64
24051224:	2202      	movs	r2, #2
24051226:	4960      	ldr	r1, [pc, #384]	; (240513a8 <lcd_init+0x294>)
24051228:	6878      	ldr	r0, [r7, #4]
2405122a:	f00d fcbf 	bl	2405ebac <HAL_SPI_Transmit>
  HAL_Delay(2);
2405122e:	2002      	movs	r0, #2
24051230:	f001 fd7c 	bl	24052d2c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051234:	2201      	movs	r2, #1
24051236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405123a:	4857      	ldr	r0, [pc, #348]	; (24051398 <lcd_init+0x284>)
2405123c:	f006 fdfc 	bl	24057e38 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051240:	2200      	movs	r2, #0
24051242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051246:	4854      	ldr	r0, [pc, #336]	; (24051398 <lcd_init+0x284>)
24051248:	f006 fdf6 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
2405124c:	2002      	movs	r0, #2
2405124e:	f001 fd6d 	bl	24052d2c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\xd0\x00", 2, 100);
24051252:	2364      	movs	r3, #100	; 0x64
24051254:	2202      	movs	r2, #2
24051256:	4955      	ldr	r1, [pc, #340]	; (240513ac <lcd_init+0x298>)
24051258:	6878      	ldr	r0, [r7, #4]
2405125a:	f00d fca7 	bl	2405ebac <HAL_SPI_Transmit>
  HAL_Delay(2);
2405125e:	2002      	movs	r0, #2
24051260:	f001 fd64 	bl	24052d2c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051264:	2201      	movs	r2, #1
24051266:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405126a:	484b      	ldr	r0, [pc, #300]	; (24051398 <lcd_init+0x284>)
2405126c:	f006 fde4 	bl	24057e38 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051270:	2200      	movs	r2, #0
24051272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051276:	4848      	ldr	r0, [pc, #288]	; (24051398 <lcd_init+0x284>)
24051278:	f006 fdde 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
2405127c:	2002      	movs	r0, #2
2405127e:	f001 fd55 	bl	24052d2c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x1b\x00", 2, 100);
24051282:	2364      	movs	r3, #100	; 0x64
24051284:	2202      	movs	r2, #2
24051286:	494a      	ldr	r1, [pc, #296]	; (240513b0 <lcd_init+0x29c>)
24051288:	6878      	ldr	r0, [r7, #4]
2405128a:	f00d fc8f 	bl	2405ebac <HAL_SPI_Transmit>

  HAL_Delay(2);
2405128e:	2002      	movs	r0, #2
24051290:	f001 fd4c 	bl	24052d2c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051294:	2201      	movs	r2, #1
24051296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405129a:	483f      	ldr	r0, [pc, #252]	; (24051398 <lcd_init+0x284>)
2405129c:	f006 fdcc 	bl	24057e38 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240512a0:	2200      	movs	r2, #0
240512a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240512a6:	483c      	ldr	r0, [pc, #240]	; (24051398 <lcd_init+0x284>)
240512a8:	f006 fdc6 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
240512ac:	2002      	movs	r0, #2
240512ae:	f001 fd3d 	bl	24052d2c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\xe0\x00", 2, 100);
240512b2:	2364      	movs	r3, #100	; 0x64
240512b4:	2202      	movs	r2, #2
240512b6:	493f      	ldr	r1, [pc, #252]	; (240513b4 <lcd_init+0x2a0>)
240512b8:	6878      	ldr	r0, [r7, #4]
240512ba:	f00d fc77 	bl	2405ebac <HAL_SPI_Transmit>


  HAL_Delay(2);
240512be:	2002      	movs	r0, #2
240512c0:	f001 fd34 	bl	24052d2c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240512c4:	2201      	movs	r2, #1
240512c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240512ca:	4833      	ldr	r0, [pc, #204]	; (24051398 <lcd_init+0x284>)
240512cc:	f006 fdb4 	bl	24057e38 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240512d0:	2200      	movs	r2, #0
240512d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240512d6:	4830      	ldr	r0, [pc, #192]	; (24051398 <lcd_init+0x284>)
240512d8:	f006 fdae 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
240512dc:	2002      	movs	r0, #2
240512de:	f001 fd25 	bl	24052d2c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x6a\x80", 2, 100);
240512e2:	2364      	movs	r3, #100	; 0x64
240512e4:	2202      	movs	r2, #2
240512e6:	4934      	ldr	r1, [pc, #208]	; (240513b8 <lcd_init+0x2a4>)
240512e8:	6878      	ldr	r0, [r7, #4]
240512ea:	f00d fc5f 	bl	2405ebac <HAL_SPI_Transmit>

  HAL_Delay(2);
240512ee:	2002      	movs	r0, #2
240512f0:	f001 fd1c 	bl	24052d2c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240512f4:	2201      	movs	r2, #1
240512f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240512fa:	4827      	ldr	r0, [pc, #156]	; (24051398 <lcd_init+0x284>)
240512fc:	f006 fd9c 	bl	24057e38 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051300:	2200      	movs	r2, #0
24051302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051306:	4824      	ldr	r0, [pc, #144]	; (24051398 <lcd_init+0x284>)
24051308:	f006 fd96 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
2405130c:	2002      	movs	r0, #2
2405130e:	f001 fd0d 	bl	24052d2c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x80\x00", 2, 100);
24051312:	2364      	movs	r3, #100	; 0x64
24051314:	2202      	movs	r2, #2
24051316:	4929      	ldr	r1, [pc, #164]	; (240513bc <lcd_init+0x2a8>)
24051318:	6878      	ldr	r0, [r7, #4]
2405131a:	f00d fc47 	bl	2405ebac <HAL_SPI_Transmit>
  HAL_Delay(2);
2405131e:	2002      	movs	r0, #2
24051320:	f001 fd04 	bl	24052d2c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051324:	2201      	movs	r2, #1
24051326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405132a:	481b      	ldr	r0, [pc, #108]	; (24051398 <lcd_init+0x284>)
2405132c:	f006 fd84 	bl	24057e38 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051330:	2200      	movs	r2, #0
24051332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051336:	4818      	ldr	r0, [pc, #96]	; (24051398 <lcd_init+0x284>)
24051338:	f006 fd7e 	bl	24057e38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
2405133c:	2002      	movs	r0, #2
2405133e:	f001 fcf5 	bl	24052d2c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x14\x80", 2, 100);
24051342:	2364      	movs	r3, #100	; 0x64
24051344:	2202      	movs	r2, #2
24051346:	491e      	ldr	r1, [pc, #120]	; (240513c0 <lcd_init+0x2ac>)
24051348:	6878      	ldr	r0, [r7, #4]
2405134a:	f00d fc2f 	bl	2405ebac <HAL_SPI_Transmit>
  HAL_Delay(2);
2405134e:	2002      	movs	r0, #2
24051350:	f001 fcec 	bl	24052d2c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051354:	2201      	movs	r2, #1
24051356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405135a:	480f      	ldr	r0, [pc, #60]	; (24051398 <lcd_init+0x284>)
2405135c:	f006 fd6c 	bl	24057e38 <HAL_GPIO_WritePin>

  HAL_LTDC_SetAddress(ltdc,(uint32_t) &fb1, 0);
24051360:	4b18      	ldr	r3, [pc, #96]	; (240513c4 <lcd_init+0x2b0>)
24051362:	2200      	movs	r2, #0
24051364:	4619      	mov	r1, r3
24051366:	6838      	ldr	r0, [r7, #0]
24051368:	f006 ff46 	bl	240581f8 <HAL_LTDC_SetAddress>

  memset(fb1, 0, sizeof(framebuffer1));
2405136c:	4b15      	ldr	r3, [pc, #84]	; (240513c4 <lcd_init+0x2b0>)
2405136e:	681b      	ldr	r3, [r3, #0]
24051370:	f44f 3216 	mov.w	r2, #153600	; 0x25800
24051374:	2100      	movs	r1, #0
24051376:	4618      	mov	r0, r3
24051378:	f00e f88f 	bl	2405f49a <memset>
  memset(fb2, 0, sizeof(framebuffer1));
2405137c:	4b12      	ldr	r3, [pc, #72]	; (240513c8 <lcd_init+0x2b4>)
2405137e:	681b      	ldr	r3, [r3, #0]
24051380:	f44f 3216 	mov.w	r2, #153600	; 0x25800
24051384:	2100      	movs	r1, #0
24051386:	4618      	mov	r0, r3
24051388:	f00e f887 	bl	2405f49a <memset>
}
2405138c:	bf00      	nop
2405138e:	3708      	adds	r7, #8
24051390:	46bd      	mov	sp, r7
24051392:	bd80      	pop	{r7, pc}
24051394:	58020c00 	.word	0x58020c00
24051398:	58020400 	.word	0x58020400
2405139c:	24060574 	.word	0x24060574
240513a0:	24060578 	.word	0x24060578
240513a4:	2406057c 	.word	0x2406057c
240513a8:	24060580 	.word	0x24060580
240513ac:	24060584 	.word	0x24060584
240513b0:	24060588 	.word	0x24060588
240513b4:	2406058c 	.word	0x2406058c
240513b8:	24060590 	.word	0x24060590
240513bc:	24060594 	.word	0x24060594
240513c0:	24060598 	.word	0x24060598
240513c4:	20000028 	.word	0x20000028
240513c8:	2000002c 	.word	0x2000002c

240513cc <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback (LTDC_HandleTypeDef *hltdc) {
240513cc:	b580      	push	{r7, lr}
240513ce:	b082      	sub	sp, #8
240513d0:	af00      	add	r7, sp, #0
240513d2:	6078      	str	r0, [r7, #4]
  frame_counter++;
240513d4:	4b0d      	ldr	r3, [pc, #52]	; (2405140c <HAL_LTDC_ReloadEventCallback+0x40>)
240513d6:	681b      	ldr	r3, [r3, #0]
240513d8:	3301      	adds	r3, #1
240513da:	4a0c      	ldr	r2, [pc, #48]	; (2405140c <HAL_LTDC_ReloadEventCallback+0x40>)
240513dc:	6013      	str	r3, [r2, #0]
  if (active_framebuffer == 0) {
240513de:	4b0c      	ldr	r3, [pc, #48]	; (24051410 <HAL_LTDC_ReloadEventCallback+0x44>)
240513e0:	681b      	ldr	r3, [r3, #0]
240513e2:	2b00      	cmp	r3, #0
240513e4:	d107      	bne.n	240513f6 <HAL_LTDC_ReloadEventCallback+0x2a>
    HAL_LTDC_SetAddress(hltdc, (uint32_t) fb2, 0);
240513e6:	4b0b      	ldr	r3, [pc, #44]	; (24051414 <HAL_LTDC_ReloadEventCallback+0x48>)
240513e8:	681b      	ldr	r3, [r3, #0]
240513ea:	2200      	movs	r2, #0
240513ec:	4619      	mov	r1, r3
240513ee:	6878      	ldr	r0, [r7, #4]
240513f0:	f006 ff02 	bl	240581f8 <HAL_LTDC_SetAddress>
  } else {
    HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
  }
}
240513f4:	e006      	b.n	24051404 <HAL_LTDC_ReloadEventCallback+0x38>
    HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
240513f6:	4b08      	ldr	r3, [pc, #32]	; (24051418 <HAL_LTDC_ReloadEventCallback+0x4c>)
240513f8:	681b      	ldr	r3, [r3, #0]
240513fa:	2200      	movs	r2, #0
240513fc:	4619      	mov	r1, r3
240513fe:	6878      	ldr	r0, [r7, #4]
24051400:	f006 fefa 	bl	240581f8 <HAL_LTDC_SetAddress>
}
24051404:	bf00      	nop
24051406:	3708      	adds	r7, #8
24051408:	46bd      	mov	sp, r7
2405140a:	bd80      	pop	{r7, pc}
2405140c:	20000200 	.word	0x20000200
24051410:	200001fc 	.word	0x200001fc
24051414:	2000002c 	.word	0x2000002c
24051418:	20000028 	.word	0x20000028

2405141c <lcd_swap>:
{
  return (uint32_t) ((hltdc.Instance->SRCR) & (LTDC_SRCR_VBR | LTDC_SRCR_IMR));
}

void lcd_swap(void)
{
2405141c:	b580      	push	{r7, lr}
2405141e:	af00      	add	r7, sp, #0
  HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
24051420:	2102      	movs	r1, #2
24051422:	4807      	ldr	r0, [pc, #28]	; (24051440 <lcd_swap+0x24>)
24051424:	f006 ff1e 	bl	24058264 <HAL_LTDC_Reload>
  active_framebuffer = active_framebuffer ? 0 : 1;
24051428:	4b06      	ldr	r3, [pc, #24]	; (24051444 <lcd_swap+0x28>)
2405142a:	681b      	ldr	r3, [r3, #0]
2405142c:	2b00      	cmp	r3, #0
2405142e:	bf0c      	ite	eq
24051430:	2301      	moveq	r3, #1
24051432:	2300      	movne	r3, #0
24051434:	b2db      	uxtb	r3, r3
24051436:	461a      	mov	r2, r3
24051438:	4b02      	ldr	r3, [pc, #8]	; (24051444 <lcd_swap+0x28>)
2405143a:	601a      	str	r2, [r3, #0]
}
2405143c:	bf00      	nop
2405143e:	bd80      	pop	{r7, pc}
24051440:	200002f8 	.word	0x200002f8
24051444:	200001fc 	.word	0x200001fc

24051448 <lcd_sync>:

void lcd_sync(void)
{
24051448:	b580      	push	{r7, lr}
2405144a:	b082      	sub	sp, #8
2405144c:	af00      	add	r7, sp, #0
  void *active = lcd_get_active_buffer();
2405144e:	f000 f813 	bl	24051478 <lcd_get_active_buffer>
24051452:	6078      	str	r0, [r7, #4]
  void *inactive = lcd_get_inactive_buffer();
24051454:	f000 f826 	bl	240514a4 <lcd_get_inactive_buffer>
24051458:	6038      	str	r0, [r7, #0]

  if (active != inactive) {
2405145a:	687a      	ldr	r2, [r7, #4]
2405145c:	683b      	ldr	r3, [r7, #0]
2405145e:	429a      	cmp	r2, r3
24051460:	d005      	beq.n	2405146e <lcd_sync+0x26>
    memcpy(inactive, active, sizeof(framebuffer1));
24051462:	f44f 3216 	mov.w	r2, #153600	; 0x25800
24051466:	6879      	ldr	r1, [r7, #4]
24051468:	6838      	ldr	r0, [r7, #0]
2405146a:	f00e f892 	bl	2405f592 <memcpy>
  }
}
2405146e:	bf00      	nop
24051470:	3708      	adds	r7, #8
24051472:	46bd      	mov	sp, r7
24051474:	bd80      	pop	{r7, pc}
	...

24051478 <lcd_get_active_buffer>:

void* lcd_get_active_buffer(void)
{
24051478:	b480      	push	{r7}
2405147a:	af00      	add	r7, sp, #0
  return active_framebuffer ? fb2 : fb1;
2405147c:	4b06      	ldr	r3, [pc, #24]	; (24051498 <lcd_get_active_buffer+0x20>)
2405147e:	681b      	ldr	r3, [r3, #0]
24051480:	2b00      	cmp	r3, #0
24051482:	d002      	beq.n	2405148a <lcd_get_active_buffer+0x12>
24051484:	4b05      	ldr	r3, [pc, #20]	; (2405149c <lcd_get_active_buffer+0x24>)
24051486:	681b      	ldr	r3, [r3, #0]
24051488:	e001      	b.n	2405148e <lcd_get_active_buffer+0x16>
2405148a:	4b05      	ldr	r3, [pc, #20]	; (240514a0 <lcd_get_active_buffer+0x28>)
2405148c:	681b      	ldr	r3, [r3, #0]
}
2405148e:	4618      	mov	r0, r3
24051490:	46bd      	mov	sp, r7
24051492:	f85d 7b04 	ldr.w	r7, [sp], #4
24051496:	4770      	bx	lr
24051498:	200001fc 	.word	0x200001fc
2405149c:	2000002c 	.word	0x2000002c
240514a0:	20000028 	.word	0x20000028

240514a4 <lcd_get_inactive_buffer>:

void* lcd_get_inactive_buffer(void)
{
240514a4:	b480      	push	{r7}
240514a6:	af00      	add	r7, sp, #0
  return active_framebuffer ? fb1 : fb2;
240514a8:	4b06      	ldr	r3, [pc, #24]	; (240514c4 <lcd_get_inactive_buffer+0x20>)
240514aa:	681b      	ldr	r3, [r3, #0]
240514ac:	2b00      	cmp	r3, #0
240514ae:	d002      	beq.n	240514b6 <lcd_get_inactive_buffer+0x12>
240514b0:	4b05      	ldr	r3, [pc, #20]	; (240514c8 <lcd_get_inactive_buffer+0x24>)
240514b2:	681b      	ldr	r3, [r3, #0]
240514b4:	e001      	b.n	240514ba <lcd_get_inactive_buffer+0x16>
240514b6:	4b05      	ldr	r3, [pc, #20]	; (240514cc <lcd_get_inactive_buffer+0x28>)
240514b8:	681b      	ldr	r3, [r3, #0]
}
240514ba:	4618      	mov	r0, r3
240514bc:	46bd      	mov	sp, r7
240514be:	f85d 7b04 	ldr.w	r7, [sp], #4
240514c2:	4770      	bx	lr
240514c4:	200001fc 	.word	0x200001fc
240514c8:	20000028 	.word	0x20000028
240514cc:	2000002c 	.word	0x2000002c

240514d0 <lcd_wait_for_vblank>:
  fb1 = buf1;
  fb2 = buf2;
}

void lcd_wait_for_vblank(void)
{
240514d0:	b480      	push	{r7}
240514d2:	b083      	sub	sp, #12
240514d4:	af00      	add	r7, sp, #0
  uint32_t old_counter = frame_counter;
240514d6:	4b08      	ldr	r3, [pc, #32]	; (240514f8 <lcd_wait_for_vblank+0x28>)
240514d8:	681b      	ldr	r3, [r3, #0]
240514da:	607b      	str	r3, [r7, #4]
  while (old_counter == frame_counter) {
240514dc:	e000      	b.n	240514e0 <lcd_wait_for_vblank+0x10>
    __asm("nop");
240514de:	bf00      	nop
  while (old_counter == frame_counter) {
240514e0:	4b05      	ldr	r3, [pc, #20]	; (240514f8 <lcd_wait_for_vblank+0x28>)
240514e2:	681b      	ldr	r3, [r3, #0]
240514e4:	687a      	ldr	r2, [r7, #4]
240514e6:	429a      	cmp	r2, r3
240514e8:	d0f9      	beq.n	240514de <lcd_wait_for_vblank+0xe>
  }
}
240514ea:	bf00      	nop
240514ec:	bf00      	nop
240514ee:	370c      	adds	r7, #12
240514f0:	46bd      	mov	sp, r7
240514f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240514f6:	4770      	bx	lr
240514f8:	20000200 	.word	0x20000200

240514fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
240514fc:	b580      	push	{r7, lr}
240514fe:	b082      	sub	sp, #8
24051500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
24051502:	f001 fb81 	bl	24052c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
24051506:	f000 f84f 	bl	240515a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
2405150a:	f000 f8cf 	bl	240516ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
2405150e:	f000 fbff 	bl	24051d10 <MX_GPIO_Init>
  MX_DMA_Init();
24051512:	f000 fbdd 	bl	24051cd0 <MX_DMA_Init>
  MX_LTDC_Init();
24051516:	f000 fa11 	bl	2405193c <MX_LTDC_Init>
  MX_SPI2_Init();
2405151a:	f000 fb83 	bl	24051c24 <MX_SPI2_Init>
  MX_OCTOSPI1_Init();
2405151e:	f000 fa8d 	bl	24051a3c <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
24051522:	f000 fb49 	bl	24051bb8 <MX_SAI1_Init>
  MX_ADC1_Init();
24051526:	f000 f905 	bl	24051734 <MX_ADC1_Init>
  MX_DAC1_Init();
2405152a:	f000 f97b 	bl	24051824 <MX_DAC1_Init>
  MX_DAC2_Init();
2405152e:	f000 f9b5 	bl	2405189c <MX_DAC2_Init>
  MX_DMA2D_Init();
24051532:	f000 f9e5 	bl	24051900 <MX_DMA2D_Init>
  MX_RTC_Init();
24051536:	f000 fae1 	bl	24051afc <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
2405153a:	f000 f8ef 	bl	2405171c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	lcd_deinit(&hspi2);
2405153e:	4814      	ldr	r0, [pc, #80]	; (24051590 <main+0x94>)
24051540:	f7ff fdc6 	bl	240510d0 <lcd_deinit>
	lcd_init(&hspi2, &hltdc);
24051544:	4913      	ldr	r1, [pc, #76]	; (24051594 <main+0x98>)
24051546:	4812      	ldr	r0, [pc, #72]	; (24051590 <main+0x94>)
24051548:	f7ff fde4 	bl	24051114 <lcd_init>
	lcd_backlight_set(175);
2405154c:	20af      	movs	r0, #175	; 0xaf
2405154e:	f7ff fd93 	bl	24051078 <lcd_backlight_set>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	flash_memory_map(&hospi1);
24051552:	4811      	ldr	r0, [pc, #68]	; (24051598 <main+0x9c>)
24051554:	f7fe fe56 	bl	24050204 <flash_memory_map>

	// Sanity check, sometimes this is triggered
	uint32_t add = 0x90000000;
24051558:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
2405155c:	607b      	str	r3, [r7, #4]
	uint32_t *ptr = (uint32_t*) add;
2405155e:	687b      	ldr	r3, [r7, #4]
24051560:	603b      	str	r3, [r7, #0]
	if (*ptr == 0x88888888) {
24051562:	683b      	ldr	r3, [r7, #0]
24051564:	681b      	ldr	r3, [r3, #0]
24051566:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
2405156a:	d101      	bne.n	24051570 <main+0x74>
		Error_Handler();
2405156c:	f000 fcc0 	bl	24051ef0 <Error_Handler>
	}

	// Create a continuous square wave and loop it using DMA in circular mode
	memset(audiobuffer, 0x00, sizeof(audiobuffer));
24051570:	4a0a      	ldr	r2, [pc, #40]	; (2405159c <main+0xa0>)
24051572:	2100      	movs	r1, #0
24051574:	480a      	ldr	r0, [pc, #40]	; (240515a0 <main+0xa4>)
24051576:	f00d ff90 	bl	2405f49a <memset>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) audiobuffer,
2405157a:	f64b 3280 	movw	r2, #48000	; 0xbb80
2405157e:	4908      	ldr	r1, [pc, #32]	; (240515a0 <main+0xa4>)
24051580:	4808      	ldr	r0, [pc, #32]	; (240515a4 <main+0xa8>)
24051582:	f00c fd19 	bl	2405dfb8 <HAL_SAI_Transmit_DMA>
			sizeof(audiobuffer) / sizeof(audiobuffer[0]));

	game_init();
24051586:	f7fe fec7 	bl	24050318 <game_init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		game_loop();
2405158a:	f7fe ff3b 	bl	24050404 <game_loop>
2405158e:	e7fc      	b.n	2405158a <main+0x8e>
24051590:	20000534 	.word	0x20000534
24051594:	200002f8 	.word	0x200002f8
24051598:	200003a0 	.word	0x200003a0
2405159c:	00017700 	.word	0x00017700
240515a0:	30000000 	.word	0x30000000
240515a4:	20000424 	.word	0x20000424

240515a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
240515a8:	b580      	push	{r7, lr}
240515aa:	b09c      	sub	sp, #112	; 0x70
240515ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
240515ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
240515b2:	224c      	movs	r2, #76	; 0x4c
240515b4:	2100      	movs	r1, #0
240515b6:	4618      	mov	r0, r3
240515b8:	f00d ff6f 	bl	2405f49a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
240515bc:	1d3b      	adds	r3, r7, #4
240515be:	2220      	movs	r2, #32
240515c0:	2100      	movs	r1, #0
240515c2:	4618      	mov	r0, r3
240515c4:	f00d ff69 	bl	2405f49a <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
240515c8:	4b36      	ldr	r3, [pc, #216]	; (240516a4 <SystemClock_Config+0xfc>)
240515ca:	f04f 32ff 	mov.w	r2, #4294967295
240515ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
240515d2:	2002      	movs	r0, #2
240515d4:	f008 fb12 	bl	24059bfc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240515d8:	2300      	movs	r3, #0
240515da:	603b      	str	r3, [r7, #0]
240515dc:	4b32      	ldr	r3, [pc, #200]	; (240516a8 <SystemClock_Config+0x100>)
240515de:	699b      	ldr	r3, [r3, #24]
240515e0:	4a31      	ldr	r2, [pc, #196]	; (240516a8 <SystemClock_Config+0x100>)
240515e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
240515e6:	6193      	str	r3, [r2, #24]
240515e8:	4b2f      	ldr	r3, [pc, #188]	; (240516a8 <SystemClock_Config+0x100>)
240515ea:	699b      	ldr	r3, [r3, #24]
240515ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
240515f0:	603b      	str	r3, [r7, #0]
240515f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240515f4:	bf00      	nop
240515f6:	4b2c      	ldr	r3, [pc, #176]	; (240516a8 <SystemClock_Config+0x100>)
240515f8:	699b      	ldr	r3, [r3, #24]
240515fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
240515fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24051602:	d1f8      	bne.n	240515f6 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
24051604:	f008 faea 	bl	24059bdc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
24051608:	4b26      	ldr	r3, [pc, #152]	; (240516a4 <SystemClock_Config+0xfc>)
2405160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405160c:	4a25      	ldr	r2, [pc, #148]	; (240516a4 <SystemClock_Config+0xfc>)
2405160e:	f023 0318 	bic.w	r3, r3, #24
24051612:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
24051614:	230e      	movs	r3, #14
24051616:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
24051618:	2301      	movs	r3, #1
2405161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
2405161c:	2301      	movs	r3, #1
2405161e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
24051620:	2340      	movs	r3, #64	; 0x40
24051622:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
24051624:	2301      	movs	r3, #1
24051626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24051628:	2302      	movs	r3, #2
2405162a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
2405162c:	2300      	movs	r3, #0
2405162e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
24051630:	2310      	movs	r3, #16
24051632:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 140;
24051634:	238c      	movs	r3, #140	; 0x8c
24051636:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
24051638:	2302      	movs	r3, #2
2405163a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
2405163c:	2302      	movs	r3, #2
2405163e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
24051640:	2302      	movs	r3, #2
24051642:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
24051644:	2308      	movs	r3, #8
24051646:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24051648:	2300      	movs	r3, #0
2405164a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
2405164c:	2300      	movs	r3, #0
2405164e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24051650:	f107 0324 	add.w	r3, r7, #36	; 0x24
24051654:	4618      	mov	r0, r3
24051656:	f008 fb0b 	bl	24059c70 <HAL_RCC_OscConfig>
2405165a:	4603      	mov	r3, r0
2405165c:	2b00      	cmp	r3, #0
2405165e:	d001      	beq.n	24051664 <SystemClock_Config+0xbc>
  {
    Error_Handler();
24051660:	f000 fc46 	bl	24051ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24051664:	233f      	movs	r3, #63	; 0x3f
24051666:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24051668:	2303      	movs	r3, #3
2405166a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
2405166c:	2300      	movs	r3, #0
2405166e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
24051670:	2300      	movs	r3, #0
24051672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24051674:	2340      	movs	r3, #64	; 0x40
24051676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
24051678:	2340      	movs	r3, #64	; 0x40
2405167a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
2405167c:	f44f 6380 	mov.w	r3, #1024	; 0x400
24051680:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24051682:	2340      	movs	r3, #64	; 0x40
24051684:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
24051686:	1d3b      	adds	r3, r7, #4
24051688:	2106      	movs	r1, #6
2405168a:	4618      	mov	r0, r3
2405168c:	f008 ff22 	bl	2405a4d4 <HAL_RCC_ClockConfig>
24051690:	4603      	mov	r3, r0
24051692:	2b00      	cmp	r3, #0
24051694:	d001      	beq.n	2405169a <SystemClock_Config+0xf2>
  {
    Error_Handler();
24051696:	f000 fc2b 	bl	24051ef0 <Error_Handler>
  }
}
2405169a:	bf00      	nop
2405169c:	3770      	adds	r7, #112	; 0x70
2405169e:	46bd      	mov	sp, r7
240516a0:	bd80      	pop	{r7, pc}
240516a2:	bf00      	nop
240516a4:	58024400 	.word	0x58024400
240516a8:	58024800 	.word	0x58024800

240516ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
240516ac:	b580      	push	{r7, lr}
240516ae:	b0b0      	sub	sp, #192	; 0xc0
240516b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240516b2:	463b      	mov	r3, r7
240516b4:	22c0      	movs	r2, #192	; 0xc0
240516b6:	2100      	movs	r1, #0
240516b8:	4618      	mov	r0, r3
240516ba:	f00d feee 	bl	2405f49a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER
240516be:	4a16      	ldr	r2, [pc, #88]	; (24051718 <PeriphCommonClock_Config+0x6c>)
240516c0:	f04f 0300 	mov.w	r3, #0
240516c4:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLL3.PLL3M = 4;
240516c8:	2304      	movs	r3, #4
240516ca:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 9;
240516cc:	2309      	movs	r3, #9
240516ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
240516d0:	2302      	movs	r3, #2
240516d2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
240516d4:	2302      	movs	r3, #2
240516d6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 24;
240516d8:	2318      	movs	r3, #24
240516da:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
240516dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
240516e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
240516e2:	2300      	movs	r3, #0
240516e4:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
240516e6:	2300      	movs	r3, #0
240516e8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
240516ea:	2300      	movs	r3, #0
240516ec:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
240516ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
240516f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
240516f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
240516fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240516fe:	463b      	mov	r3, r7
24051700:	4618      	mov	r0, r3
24051702:	f009 fa5d 	bl	2405abc0 <HAL_RCCEx_PeriphCLKConfig>
24051706:	4603      	mov	r3, r0
24051708:	2b00      	cmp	r3, #0
2405170a:	d001      	beq.n	24051710 <PeriphCommonClock_Config+0x64>
  {
    Error_Handler();
2405170c:	f000 fbf0 	bl	24051ef0 <Error_Handler>
  }
}
24051710:	bf00      	nop
24051712:	37c0      	adds	r7, #192	; 0xc0
24051714:	46bd      	mov	sp, r7
24051716:	bd80      	pop	{r7, pc}
24051718:	a0080000 	.word	0xa0080000

2405171c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
2405171c:	b580      	push	{r7, lr}
2405171e:	af00      	add	r7, sp, #0
  /* OCTOSPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
24051720:	2200      	movs	r2, #0
24051722:	2100      	movs	r1, #0
24051724:	205c      	movs	r0, #92	; 0x5c
24051726:	f003 f862 	bl	240547ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
2405172a:	205c      	movs	r0, #92	; 0x5c
2405172c:	f003 f879 	bl	24054822 <HAL_NVIC_EnableIRQ>
}
24051730:	bf00      	nop
24051732:	bd80      	pop	{r7, pc}

24051734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
24051734:	b580      	push	{r7, lr}
24051736:	b08a      	sub	sp, #40	; 0x28
24051738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
2405173a:	f107 031c 	add.w	r3, r7, #28
2405173e:	2200      	movs	r2, #0
24051740:	601a      	str	r2, [r3, #0]
24051742:	605a      	str	r2, [r3, #4]
24051744:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
24051746:	463b      	mov	r3, r7
24051748:	2200      	movs	r2, #0
2405174a:	601a      	str	r2, [r3, #0]
2405174c:	605a      	str	r2, [r3, #4]
2405174e:	609a      	str	r2, [r3, #8]
24051750:	60da      	str	r2, [r3, #12]
24051752:	611a      	str	r2, [r3, #16]
24051754:	615a      	str	r2, [r3, #20]
24051756:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
24051758:	4b2f      	ldr	r3, [pc, #188]	; (24051818 <MX_ADC1_Init+0xe4>)
2405175a:	4a30      	ldr	r2, [pc, #192]	; (2405181c <MX_ADC1_Init+0xe8>)
2405175c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
2405175e:	4b2e      	ldr	r3, [pc, #184]	; (24051818 <MX_ADC1_Init+0xe4>)
24051760:	2200      	movs	r2, #0
24051762:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
24051764:	4b2c      	ldr	r3, [pc, #176]	; (24051818 <MX_ADC1_Init+0xe4>)
24051766:	2200      	movs	r2, #0
24051768:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
2405176a:	4b2b      	ldr	r3, [pc, #172]	; (24051818 <MX_ADC1_Init+0xe4>)
2405176c:	2200      	movs	r2, #0
2405176e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
24051770:	4b29      	ldr	r3, [pc, #164]	; (24051818 <MX_ADC1_Init+0xe4>)
24051772:	2204      	movs	r2, #4
24051774:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
24051776:	4b28      	ldr	r3, [pc, #160]	; (24051818 <MX_ADC1_Init+0xe4>)
24051778:	2200      	movs	r2, #0
2405177a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
2405177c:	4b26      	ldr	r3, [pc, #152]	; (24051818 <MX_ADC1_Init+0xe4>)
2405177e:	2200      	movs	r2, #0
24051780:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
24051782:	4b25      	ldr	r3, [pc, #148]	; (24051818 <MX_ADC1_Init+0xe4>)
24051784:	2201      	movs	r2, #1
24051786:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
24051788:	4b23      	ldr	r3, [pc, #140]	; (24051818 <MX_ADC1_Init+0xe4>)
2405178a:	2200      	movs	r2, #0
2405178c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
2405178e:	4b22      	ldr	r3, [pc, #136]	; (24051818 <MX_ADC1_Init+0xe4>)
24051790:	2200      	movs	r2, #0
24051792:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
24051794:	4b20      	ldr	r3, [pc, #128]	; (24051818 <MX_ADC1_Init+0xe4>)
24051796:	2200      	movs	r2, #0
24051798:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
2405179a:	4b1f      	ldr	r3, [pc, #124]	; (24051818 <MX_ADC1_Init+0xe4>)
2405179c:	2200      	movs	r2, #0
2405179e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
240517a0:	4b1d      	ldr	r3, [pc, #116]	; (24051818 <MX_ADC1_Init+0xe4>)
240517a2:	2200      	movs	r2, #0
240517a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
240517a6:	4b1c      	ldr	r3, [pc, #112]	; (24051818 <MX_ADC1_Init+0xe4>)
240517a8:	2200      	movs	r2, #0
240517aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
240517ac:	4b1a      	ldr	r3, [pc, #104]	; (24051818 <MX_ADC1_Init+0xe4>)
240517ae:	2200      	movs	r2, #0
240517b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
240517b4:	4818      	ldr	r0, [pc, #96]	; (24051818 <MX_ADC1_Init+0xe4>)
240517b6:	f001 fcd3 	bl	24053160 <HAL_ADC_Init>
240517ba:	4603      	mov	r3, r0
240517bc:	2b00      	cmp	r3, #0
240517be:	d001      	beq.n	240517c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
240517c0:	f000 fb96 	bl	24051ef0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
240517c4:	2300      	movs	r3, #0
240517c6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
240517c8:	f107 031c 	add.w	r3, r7, #28
240517cc:	4619      	mov	r1, r3
240517ce:	4812      	ldr	r0, [pc, #72]	; (24051818 <MX_ADC1_Init+0xe4>)
240517d0:	f002 fe80 	bl	240544d4 <HAL_ADCEx_MultiModeConfigChannel>
240517d4:	4603      	mov	r3, r0
240517d6:	2b00      	cmp	r3, #0
240517d8:	d001      	beq.n	240517de <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
240517da:	f000 fb89 	bl	24051ef0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
240517de:	4b10      	ldr	r3, [pc, #64]	; (24051820 <MX_ADC1_Init+0xec>)
240517e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
240517e2:	2306      	movs	r3, #6
240517e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
240517e6:	2300      	movs	r3, #0
240517e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
240517ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
240517ee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
240517f0:	2304      	movs	r3, #4
240517f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
240517f4:	2300      	movs	r3, #0
240517f6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
240517f8:	2300      	movs	r3, #0
240517fa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
240517fc:	463b      	mov	r3, r7
240517fe:	4619      	mov	r1, r3
24051800:	4805      	ldr	r0, [pc, #20]	; (24051818 <MX_ADC1_Init+0xe4>)
24051802:	f002 f9df 	bl	24053bc4 <HAL_ADC_ConfigChannel>
24051806:	4603      	mov	r3, r0
24051808:	2b00      	cmp	r3, #0
2405180a:	d001      	beq.n	24051810 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
2405180c:	f000 fb70 	bl	24051ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
24051810:	bf00      	nop
24051812:	3728      	adds	r7, #40	; 0x28
24051814:	46bd      	mov	sp, r7
24051816:	bd80      	pop	{r7, pc}
24051818:	20000204 	.word	0x20000204
2405181c:	40022000 	.word	0x40022000
24051820:	10c00010 	.word	0x10c00010

24051824 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
24051824:	b580      	push	{r7, lr}
24051826:	b08a      	sub	sp, #40	; 0x28
24051828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
2405182a:	1d3b      	adds	r3, r7, #4
2405182c:	2224      	movs	r2, #36	; 0x24
2405182e:	2100      	movs	r1, #0
24051830:	4618      	mov	r0, r3
24051832:	f00d fe32 	bl	2405f49a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
24051836:	4b17      	ldr	r3, [pc, #92]	; (24051894 <MX_DAC1_Init+0x70>)
24051838:	4a17      	ldr	r2, [pc, #92]	; (24051898 <MX_DAC1_Init+0x74>)
2405183a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
2405183c:	4815      	ldr	r0, [pc, #84]	; (24051894 <MX_DAC1_Init+0x70>)
2405183e:	f003 f80e 	bl	2405485e <HAL_DAC_Init>
24051842:	4603      	mov	r3, r0
24051844:	2b00      	cmp	r3, #0
24051846:	d001      	beq.n	2405184c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
24051848:	f000 fb52 	bl	24051ef0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
2405184c:	2300      	movs	r3, #0
2405184e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
24051850:	2300      	movs	r3, #0
24051852:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
24051854:	2300      	movs	r3, #0
24051856:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
24051858:	2301      	movs	r3, #1
2405185a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
2405185c:	2300      	movs	r3, #0
2405185e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
24051860:	1d3b      	adds	r3, r7, #4
24051862:	2200      	movs	r2, #0
24051864:	4619      	mov	r1, r3
24051866:	480b      	ldr	r0, [pc, #44]	; (24051894 <MX_DAC1_Init+0x70>)
24051868:	f003 f892 	bl	24054990 <HAL_DAC_ConfigChannel>
2405186c:	4603      	mov	r3, r0
2405186e:	2b00      	cmp	r3, #0
24051870:	d001      	beq.n	24051876 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
24051872:	f000 fb3d 	bl	24051ef0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
24051876:	1d3b      	adds	r3, r7, #4
24051878:	2210      	movs	r2, #16
2405187a:	4619      	mov	r1, r3
2405187c:	4805      	ldr	r0, [pc, #20]	; (24051894 <MX_DAC1_Init+0x70>)
2405187e:	f003 f887 	bl	24054990 <HAL_DAC_ConfigChannel>
24051882:	4603      	mov	r3, r0
24051884:	2b00      	cmp	r3, #0
24051886:	d001      	beq.n	2405188c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
24051888:	f000 fb32 	bl	24051ef0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
2405188c:	bf00      	nop
2405188e:	3728      	adds	r7, #40	; 0x28
24051890:	46bd      	mov	sp, r7
24051892:	bd80      	pop	{r7, pc}
24051894:	20000268 	.word	0x20000268
24051898:	40007400 	.word	0x40007400

2405189c <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
2405189c:	b580      	push	{r7, lr}
2405189e:	b08a      	sub	sp, #40	; 0x28
240518a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
240518a2:	1d3b      	adds	r3, r7, #4
240518a4:	2224      	movs	r2, #36	; 0x24
240518a6:	2100      	movs	r1, #0
240518a8:	4618      	mov	r0, r3
240518aa:	f00d fdf6 	bl	2405f49a <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
240518ae:	4b12      	ldr	r3, [pc, #72]	; (240518f8 <MX_DAC2_Init+0x5c>)
240518b0:	4a12      	ldr	r2, [pc, #72]	; (240518fc <MX_DAC2_Init+0x60>)
240518b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
240518b4:	4810      	ldr	r0, [pc, #64]	; (240518f8 <MX_DAC2_Init+0x5c>)
240518b6:	f002 ffd2 	bl	2405485e <HAL_DAC_Init>
240518ba:	4603      	mov	r3, r0
240518bc:	2b00      	cmp	r3, #0
240518be:	d001      	beq.n	240518c4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
240518c0:	f000 fb16 	bl	24051ef0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
240518c4:	2300      	movs	r3, #0
240518c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
240518c8:	2300      	movs	r3, #0
240518ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
240518cc:	2300      	movs	r3, #0
240518ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
240518d0:	2301      	movs	r3, #1
240518d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
240518d4:	2300      	movs	r3, #0
240518d6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
240518d8:	1d3b      	adds	r3, r7, #4
240518da:	2200      	movs	r2, #0
240518dc:	4619      	mov	r1, r3
240518de:	4806      	ldr	r0, [pc, #24]	; (240518f8 <MX_DAC2_Init+0x5c>)
240518e0:	f003 f856 	bl	24054990 <HAL_DAC_ConfigChannel>
240518e4:	4603      	mov	r3, r0
240518e6:	2b00      	cmp	r3, #0
240518e8:	d001      	beq.n	240518ee <MX_DAC2_Init+0x52>
  {
    Error_Handler();
240518ea:	f000 fb01 	bl	24051ef0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
240518ee:	bf00      	nop
240518f0:	3728      	adds	r7, #40	; 0x28
240518f2:	46bd      	mov	sp, r7
240518f4:	bd80      	pop	{r7, pc}
240518f6:	bf00      	nop
240518f8:	2000027c 	.word	0x2000027c
240518fc:	58003400 	.word	0x58003400

24051900 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
24051900:	b580      	push	{r7, lr}
24051902:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
24051904:	4b0b      	ldr	r3, [pc, #44]	; (24051934 <MX_DMA2D_Init+0x34>)
24051906:	4a0c      	ldr	r2, [pc, #48]	; (24051938 <MX_DMA2D_Init+0x38>)
24051908:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
2405190a:	4b0a      	ldr	r3, [pc, #40]	; (24051934 <MX_DMA2D_Init+0x34>)
2405190c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
24051910:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
24051912:	4b08      	ldr	r3, [pc, #32]	; (24051934 <MX_DMA2D_Init+0x34>)
24051914:	2202      	movs	r2, #2
24051916:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
24051918:	4b06      	ldr	r3, [pc, #24]	; (24051934 <MX_DMA2D_Init+0x34>)
2405191a:	2200      	movs	r2, #0
2405191c:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
2405191e:	4805      	ldr	r0, [pc, #20]	; (24051934 <MX_DMA2D_Init+0x34>)
24051920:	f006 f85e 	bl	240579e0 <HAL_DMA2D_Init>
24051924:	4603      	mov	r3, r0
24051926:	2b00      	cmp	r3, #0
24051928:	d001      	beq.n	2405192e <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
2405192a:	f000 fae1 	bl	24051ef0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
2405192e:	bf00      	nop
24051930:	bd80      	pop	{r7, pc}
24051932:	bf00      	nop
24051934:	20000290 	.word	0x20000290
24051938:	52001000 	.word	0x52001000

2405193c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
2405193c:	b580      	push	{r7, lr}
2405193e:	b08e      	sub	sp, #56	; 0x38
24051940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
24051942:	1d3b      	adds	r3, r7, #4
24051944:	2234      	movs	r2, #52	; 0x34
24051946:	2100      	movs	r1, #0
24051948:	4618      	mov	r0, r3
2405194a:	f00d fda6 	bl	2405f49a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
2405194e:	4b39      	ldr	r3, [pc, #228]	; (24051a34 <MX_LTDC_Init+0xf8>)
24051950:	4a39      	ldr	r2, [pc, #228]	; (24051a38 <MX_LTDC_Init+0xfc>)
24051952:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
24051954:	4b37      	ldr	r3, [pc, #220]	; (24051a34 <MX_LTDC_Init+0xf8>)
24051956:	2200      	movs	r2, #0
24051958:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
2405195a:	4b36      	ldr	r3, [pc, #216]	; (24051a34 <MX_LTDC_Init+0xf8>)
2405195c:	2200      	movs	r2, #0
2405195e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
24051960:	4b34      	ldr	r3, [pc, #208]	; (24051a34 <MX_LTDC_Init+0xf8>)
24051962:	2200      	movs	r2, #0
24051964:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IIPC;
24051966:	4b33      	ldr	r3, [pc, #204]	; (24051a34 <MX_LTDC_Init+0xf8>)
24051968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2405196c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
2405196e:	4b31      	ldr	r3, [pc, #196]	; (24051a34 <MX_LTDC_Init+0xf8>)
24051970:	2209      	movs	r2, #9
24051972:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
24051974:	4b2f      	ldr	r3, [pc, #188]	; (24051a34 <MX_LTDC_Init+0xf8>)
24051976:	2201      	movs	r2, #1
24051978:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 60;
2405197a:	4b2e      	ldr	r3, [pc, #184]	; (24051a34 <MX_LTDC_Init+0xf8>)
2405197c:	223c      	movs	r2, #60	; 0x3c
2405197e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 7;
24051980:	4b2c      	ldr	r3, [pc, #176]	; (24051a34 <MX_LTDC_Init+0xf8>)
24051982:	2207      	movs	r2, #7
24051984:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 380;
24051986:	4b2b      	ldr	r3, [pc, #172]	; (24051a34 <MX_LTDC_Init+0xf8>)
24051988:	f44f 72be 	mov.w	r2, #380	; 0x17c
2405198c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 247;
2405198e:	4b29      	ldr	r3, [pc, #164]	; (24051a34 <MX_LTDC_Init+0xf8>)
24051990:	22f7      	movs	r2, #247	; 0xf7
24051992:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 392;
24051994:	4b27      	ldr	r3, [pc, #156]	; (24051a34 <MX_LTDC_Init+0xf8>)
24051996:	f44f 72c4 	mov.w	r2, #392	; 0x188
2405199a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 255;
2405199c:	4b25      	ldr	r3, [pc, #148]	; (24051a34 <MX_LTDC_Init+0xf8>)
2405199e:	22ff      	movs	r2, #255	; 0xff
240519a0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
240519a2:	4b24      	ldr	r3, [pc, #144]	; (24051a34 <MX_LTDC_Init+0xf8>)
240519a4:	2200      	movs	r2, #0
240519a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
240519aa:	4b22      	ldr	r3, [pc, #136]	; (24051a34 <MX_LTDC_Init+0xf8>)
240519ac:	2200      	movs	r2, #0
240519ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
240519b2:	4b20      	ldr	r3, [pc, #128]	; (24051a34 <MX_LTDC_Init+0xf8>)
240519b4:	2200      	movs	r2, #0
240519b6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
240519ba:	481e      	ldr	r0, [pc, #120]	; (24051a34 <MX_LTDC_Init+0xf8>)
240519bc:	f006 fa56 	bl	24057e6c <HAL_LTDC_Init>
240519c0:	4603      	mov	r3, r0
240519c2:	2b00      	cmp	r3, #0
240519c4:	d001      	beq.n	240519ca <MX_LTDC_Init+0x8e>
  {
    Error_Handler();
240519c6:	f000 fa93 	bl	24051ef0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
240519ca:	2300      	movs	r3, #0
240519cc:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
240519ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
240519d2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
240519d4:	2300      	movs	r3, #0
240519d6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
240519d8:	23f0      	movs	r3, #240	; 0xf0
240519da:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
240519dc:	2302      	movs	r3, #2
240519de:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
240519e0:	23ff      	movs	r3, #255	; 0xff
240519e2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
240519e4:	23ff      	movs	r3, #255	; 0xff
240519e6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
240519e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
240519ec:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
240519ee:	2305      	movs	r3, #5
240519f0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x24000000;
240519f2:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
240519f6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 320;
240519f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
240519fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 240;
240519fe:	23f0      	movs	r3, #240	; 0xf0
24051a00:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
24051a02:	2300      	movs	r3, #0
24051a04:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
24051a08:	23ff      	movs	r3, #255	; 0xff
24051a0a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
24051a0e:	2300      	movs	r3, #0
24051a10:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
24051a14:	1d3b      	adds	r3, r7, #4
24051a16:	2200      	movs	r2, #0
24051a18:	4619      	mov	r1, r3
24051a1a:	4806      	ldr	r0, [pc, #24]	; (24051a34 <MX_LTDC_Init+0xf8>)
24051a1c:	f006 fbae 	bl	2405817c <HAL_LTDC_ConfigLayer>
24051a20:	4603      	mov	r3, r0
24051a22:	2b00      	cmp	r3, #0
24051a24:	d001      	beq.n	24051a2a <MX_LTDC_Init+0xee>
  {
    Error_Handler();
24051a26:	f000 fa63 	bl	24051ef0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
24051a2a:	bf00      	nop
24051a2c:	3738      	adds	r7, #56	; 0x38
24051a2e:	46bd      	mov	sp, r7
24051a30:	bd80      	pop	{r7, pc}
24051a32:	bf00      	nop
24051a34:	200002f8 	.word	0x200002f8
24051a38:	50001000 	.word	0x50001000

24051a3c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
24051a3c:	b580      	push	{r7, lr}
24051a3e:	b086      	sub	sp, #24
24051a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
24051a42:	463b      	mov	r3, r7
24051a44:	2200      	movs	r2, #0
24051a46:	601a      	str	r2, [r3, #0]
24051a48:	605a      	str	r2, [r3, #4]
24051a4a:	609a      	str	r2, [r3, #8]
24051a4c:	60da      	str	r2, [r3, #12]
24051a4e:	611a      	str	r2, [r3, #16]
24051a50:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
24051a52:	4b28      	ldr	r3, [pc, #160]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a54:	4a28      	ldr	r2, [pc, #160]	; (24051af8 <MX_OCTOSPI1_Init+0xbc>)
24051a56:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
24051a58:	4b26      	ldr	r3, [pc, #152]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a5a:	2204      	movs	r2, #4
24051a5c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
24051a5e:	4b25      	ldr	r3, [pc, #148]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a60:	2200      	movs	r2, #0
24051a62:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
24051a64:	4b23      	ldr	r3, [pc, #140]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
24051a6a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 20;
24051a6c:	4b21      	ldr	r3, [pc, #132]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a6e:	2214      	movs	r2, #20
24051a70:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
24051a72:	4b20      	ldr	r3, [pc, #128]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a74:	2202      	movs	r2, #2
24051a76:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
24051a78:	4b1e      	ldr	r3, [pc, #120]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a7a:	2200      	movs	r2, #0
24051a7c:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
24051a7e:	4b1d      	ldr	r3, [pc, #116]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a80:	2200      	movs	r2, #0
24051a82:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
24051a84:	4b1b      	ldr	r3, [pc, #108]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a86:	2200      	movs	r2, #0
24051a88:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
24051a8a:	4b1a      	ldr	r3, [pc, #104]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a8c:	2201      	movs	r2, #1
24051a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
24051a90:	4b18      	ldr	r3, [pc, #96]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a92:	2200      	movs	r2, #0
24051a94:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
24051a96:	4b17      	ldr	r3, [pc, #92]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a98:	2200      	movs	r2, #0
24051a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
24051a9c:	4b15      	ldr	r3, [pc, #84]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051a9e:	2200      	movs	r2, #0
24051aa0:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
24051aa2:	4b14      	ldr	r3, [pc, #80]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051aa4:	2208      	movs	r2, #8
24051aa6:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
24051aa8:	4b12      	ldr	r3, [pc, #72]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051aaa:	2200      	movs	r2, #0
24051aac:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
24051aae:	4b11      	ldr	r3, [pc, #68]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051ab0:	2200      	movs	r2, #0
24051ab2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
24051ab4:	480f      	ldr	r0, [pc, #60]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051ab6:	f006 fdc7 	bl	24058648 <HAL_OSPI_Init>
24051aba:	4603      	mov	r3, r0
24051abc:	2b00      	cmp	r3, #0
24051abe:	d001      	beq.n	24051ac4 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
24051ac0:	f000 fa16 	bl	24051ef0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
24051ac4:	2301      	movs	r3, #1
24051ac6:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
24051ac8:	2301      	movs	r3, #1
24051aca:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
24051acc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
24051ad0:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24051ad2:	463b      	mov	r3, r7
24051ad4:	f241 3288 	movw	r2, #5000	; 0x1388
24051ad8:	4619      	mov	r1, r3
24051ada:	4806      	ldr	r0, [pc, #24]	; (24051af4 <MX_OCTOSPI1_Init+0xb8>)
24051adc:	f007 f8ee 	bl	24058cbc <HAL_OSPIM_Config>
24051ae0:	4603      	mov	r3, r0
24051ae2:	2b00      	cmp	r3, #0
24051ae4:	d001      	beq.n	24051aea <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
24051ae6:	f000 fa03 	bl	24051ef0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
24051aea:	bf00      	nop
24051aec:	3718      	adds	r7, #24
24051aee:	46bd      	mov	sp, r7
24051af0:	bd80      	pop	{r7, pc}
24051af2:	bf00      	nop
24051af4:	200003a0 	.word	0x200003a0
24051af8:	52005000 	.word	0x52005000

24051afc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
24051afc:	b580      	push	{r7, lr}
24051afe:	b086      	sub	sp, #24
24051b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
24051b02:	1d3b      	adds	r3, r7, #4
24051b04:	2200      	movs	r2, #0
24051b06:	601a      	str	r2, [r3, #0]
24051b08:	605a      	str	r2, [r3, #4]
24051b0a:	609a      	str	r2, [r3, #8]
24051b0c:	60da      	str	r2, [r3, #12]
24051b0e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
24051b10:	2300      	movs	r3, #0
24051b12:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
24051b14:	4b26      	ldr	r3, [pc, #152]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b16:	4a27      	ldr	r2, [pc, #156]	; (24051bb4 <MX_RTC_Init+0xb8>)
24051b18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
24051b1a:	4b25      	ldr	r3, [pc, #148]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b1c:	2200      	movs	r2, #0
24051b1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
24051b20:	4b23      	ldr	r3, [pc, #140]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b22:	227f      	movs	r2, #127	; 0x7f
24051b24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
24051b26:	4b22      	ldr	r3, [pc, #136]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b28:	22ff      	movs	r2, #255	; 0xff
24051b2a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
24051b2c:	4b20      	ldr	r3, [pc, #128]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b2e:	2200      	movs	r2, #0
24051b30:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
24051b32:	4b1f      	ldr	r3, [pc, #124]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b34:	2200      	movs	r2, #0
24051b36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
24051b38:	4b1d      	ldr	r3, [pc, #116]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
24051b3e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
24051b40:	4b1b      	ldr	r3, [pc, #108]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b42:	2200      	movs	r2, #0
24051b44:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
24051b46:	481a      	ldr	r0, [pc, #104]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b48:	f00b fc44 	bl	2405d3d4 <HAL_RTC_Init>
24051b4c:	4603      	mov	r3, r0
24051b4e:	2b00      	cmp	r3, #0
24051b50:	d001      	beq.n	24051b56 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
24051b52:	f000 f9cd 	bl	24051ef0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
24051b56:	2300      	movs	r3, #0
24051b58:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
24051b5a:	2300      	movs	r3, #0
24051b5c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
24051b5e:	2300      	movs	r3, #0
24051b60:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
24051b62:	2300      	movs	r3, #0
24051b64:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
24051b66:	2300      	movs	r3, #0
24051b68:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
24051b6a:	1d3b      	adds	r3, r7, #4
24051b6c:	2201      	movs	r2, #1
24051b6e:	4619      	mov	r1, r3
24051b70:	480f      	ldr	r0, [pc, #60]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b72:	f00b fcb5 	bl	2405d4e0 <HAL_RTC_SetTime>
24051b76:	4603      	mov	r3, r0
24051b78:	2b00      	cmp	r3, #0
24051b7a:	d001      	beq.n	24051b80 <MX_RTC_Init+0x84>
  {
    Error_Handler();
24051b7c:	f000 f9b8 	bl	24051ef0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
24051b80:	2301      	movs	r3, #1
24051b82:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
24051b84:	2301      	movs	r3, #1
24051b86:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
24051b88:	2301      	movs	r3, #1
24051b8a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
24051b8c:	2300      	movs	r3, #0
24051b8e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
24051b90:	463b      	mov	r3, r7
24051b92:	2201      	movs	r2, #1
24051b94:	4619      	mov	r1, r3
24051b96:	4806      	ldr	r0, [pc, #24]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b98:	f00b fd9c 	bl	2405d6d4 <HAL_RTC_SetDate>
24051b9c:	4603      	mov	r3, r0
24051b9e:	2b00      	cmp	r3, #0
24051ba0:	d001      	beq.n	24051ba6 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
24051ba2:	f000 f9a5 	bl	24051ef0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
24051ba6:	bf00      	nop
24051ba8:	3718      	adds	r7, #24
24051baa:	46bd      	mov	sp, r7
24051bac:	bd80      	pop	{r7, pc}
24051bae:	bf00      	nop
24051bb0:	200003fc 	.word	0x200003fc
24051bb4:	58004000 	.word	0x58004000

24051bb8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
24051bb8:	b580      	push	{r7, lr}
24051bba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
24051bbc:	4b17      	ldr	r3, [pc, #92]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bbe:	4a18      	ldr	r2, [pc, #96]	; (24051c20 <MX_SAI1_Init+0x68>)
24051bc0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
24051bc2:	4b16      	ldr	r3, [pc, #88]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bc4:	2200      	movs	r2, #0
24051bc6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24051bc8:	4b14      	ldr	r3, [pc, #80]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bca:	2200      	movs	r2, #0
24051bcc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24051bce:	4b13      	ldr	r3, [pc, #76]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bd0:	2200      	movs	r2, #0
24051bd2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24051bd4:	4b11      	ldr	r3, [pc, #68]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bd6:	2200      	movs	r2, #0
24051bd8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24051bda:	4b10      	ldr	r3, [pc, #64]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bdc:	2200      	movs	r2, #0
24051bde:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24051be0:	4b0e      	ldr	r3, [pc, #56]	; (24051c1c <MX_SAI1_Init+0x64>)
24051be2:	f64b 3280 	movw	r2, #48000	; 0xbb80
24051be6:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24051be8:	4b0c      	ldr	r3, [pc, #48]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bea:	2200      	movs	r2, #0
24051bec:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
24051bee:	4b0b      	ldr	r3, [pc, #44]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24051bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24051bf6:	4b09      	ldr	r3, [pc, #36]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bf8:	2200      	movs	r2, #0
24051bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
24051bfc:	4b07      	ldr	r3, [pc, #28]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bfe:	2200      	movs	r2, #0
24051c00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
24051c02:	2302      	movs	r3, #2
24051c04:	2200      	movs	r2, #0
24051c06:	2100      	movs	r1, #0
24051c08:	4804      	ldr	r0, [pc, #16]	; (24051c1c <MX_SAI1_Init+0x64>)
24051c0a:	f00b ff0b 	bl	2405da24 <HAL_SAI_InitProtocol>
24051c0e:	4603      	mov	r3, r0
24051c10:	2b00      	cmp	r3, #0
24051c12:	d001      	beq.n	24051c18 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
24051c14:	f000 f96c 	bl	24051ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
24051c18:	bf00      	nop
24051c1a:	bd80      	pop	{r7, pc}
24051c1c:	20000424 	.word	0x20000424
24051c20:	40015804 	.word	0x40015804

24051c24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
24051c24:	b580      	push	{r7, lr}
24051c26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
24051c28:	4b27      	ldr	r3, [pc, #156]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c2a:	4a28      	ldr	r2, [pc, #160]	; (24051ccc <MX_SPI2_Init+0xa8>)
24051c2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
24051c2e:	4b26      	ldr	r3, [pc, #152]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
24051c34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
24051c36:	4b24      	ldr	r3, [pc, #144]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
24051c3c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
24051c3e:	4b22      	ldr	r3, [pc, #136]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c40:	2207      	movs	r2, #7
24051c42:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
24051c44:	4b20      	ldr	r3, [pc, #128]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c46:	2200      	movs	r2, #0
24051c48:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
24051c4a:	4b1f      	ldr	r3, [pc, #124]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c4c:	2200      	movs	r2, #0
24051c4e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
24051c50:	4b1d      	ldr	r3, [pc, #116]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
24051c56:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
24051c58:	4b1b      	ldr	r3, [pc, #108]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c5a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
24051c5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
24051c60:	4b19      	ldr	r3, [pc, #100]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c62:	2200      	movs	r2, #0
24051c64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
24051c66:	4b18      	ldr	r3, [pc, #96]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c68:	2200      	movs	r2, #0
24051c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
24051c6c:	4b16      	ldr	r3, [pc, #88]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c6e:	2200      	movs	r2, #0
24051c70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
24051c72:	4b15      	ldr	r3, [pc, #84]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c74:	2200      	movs	r2, #0
24051c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
24051c78:	4b13      	ldr	r3, [pc, #76]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c7a:	2200      	movs	r2, #0
24051c7c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24051c7e:	4b12      	ldr	r3, [pc, #72]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c80:	2200      	movs	r2, #0
24051c82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
24051c84:	4b10      	ldr	r3, [pc, #64]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c86:	2200      	movs	r2, #0
24051c88:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24051c8a:	4b0f      	ldr	r3, [pc, #60]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c8c:	2200      	movs	r2, #0
24051c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24051c90:	4b0d      	ldr	r3, [pc, #52]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c92:	2200      	movs	r2, #0
24051c94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24051c96:	4b0c      	ldr	r3, [pc, #48]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c98:	2200      	movs	r2, #0
24051c9a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
24051c9c:	4b0a      	ldr	r3, [pc, #40]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c9e:	2200      	movs	r2, #0
24051ca0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24051ca2:	4b09      	ldr	r3, [pc, #36]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051ca4:	2200      	movs	r2, #0
24051ca6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
24051ca8:	4b07      	ldr	r3, [pc, #28]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051caa:	2200      	movs	r2, #0
24051cac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24051cae:	4b06      	ldr	r3, [pc, #24]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051cb0:	2200      	movs	r2, #0
24051cb2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
24051cb4:	4804      	ldr	r0, [pc, #16]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051cb6:	f00c fe55 	bl	2405e964 <HAL_SPI_Init>
24051cba:	4603      	mov	r3, r0
24051cbc:	2b00      	cmp	r3, #0
24051cbe:	d001      	beq.n	24051cc4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
24051cc0:	f000 f916 	bl	24051ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
24051cc4:	bf00      	nop
24051cc6:	bd80      	pop	{r7, pc}
24051cc8:	20000534 	.word	0x20000534
24051ccc:	40003800 	.word	0x40003800

24051cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
24051cd0:	b580      	push	{r7, lr}
24051cd2:	b082      	sub	sp, #8
24051cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24051cd6:	4b0d      	ldr	r3, [pc, #52]	; (24051d0c <MX_DMA_Init+0x3c>)
24051cd8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24051cdc:	4a0b      	ldr	r2, [pc, #44]	; (24051d0c <MX_DMA_Init+0x3c>)
24051cde:	f043 0301 	orr.w	r3, r3, #1
24051ce2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
24051ce6:	4b09      	ldr	r3, [pc, #36]	; (24051d0c <MX_DMA_Init+0x3c>)
24051ce8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24051cec:	f003 0301 	and.w	r3, r3, #1
24051cf0:	607b      	str	r3, [r7, #4]
24051cf2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
24051cf4:	2200      	movs	r2, #0
24051cf6:	2100      	movs	r1, #0
24051cf8:	200b      	movs	r0, #11
24051cfa:	f002 fd78 	bl	240547ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
24051cfe:	200b      	movs	r0, #11
24051d00:	f002 fd8f 	bl	24054822 <HAL_NVIC_EnableIRQ>

}
24051d04:	bf00      	nop
24051d06:	3708      	adds	r7, #8
24051d08:	46bd      	mov	sp, r7
24051d0a:	bd80      	pop	{r7, pc}
24051d0c:	58024400 	.word	0x58024400

24051d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
24051d10:	b580      	push	{r7, lr}
24051d12:	b08a      	sub	sp, #40	; 0x28
24051d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24051d16:	f107 0314 	add.w	r3, r7, #20
24051d1a:	2200      	movs	r2, #0
24051d1c:	601a      	str	r2, [r3, #0]
24051d1e:	605a      	str	r2, [r3, #4]
24051d20:	609a      	str	r2, [r3, #8]
24051d22:	60da      	str	r2, [r3, #12]
24051d24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24051d26:	4b6c      	ldr	r3, [pc, #432]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d2c:	4a6a      	ldr	r2, [pc, #424]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d2e:	f043 0310 	orr.w	r3, r3, #16
24051d32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24051d36:	4b68      	ldr	r3, [pc, #416]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d3c:	f003 0310 	and.w	r3, r3, #16
24051d40:	613b      	str	r3, [r7, #16]
24051d42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24051d44:	4b64      	ldr	r3, [pc, #400]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d4a:	4a63      	ldr	r2, [pc, #396]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d4c:	f043 0304 	orr.w	r3, r3, #4
24051d50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24051d54:	4b60      	ldr	r3, [pc, #384]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d5a:	f003 0304 	and.w	r3, r3, #4
24051d5e:	60fb      	str	r3, [r7, #12]
24051d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24051d62:	4b5d      	ldr	r3, [pc, #372]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d68:	4a5b      	ldr	r2, [pc, #364]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d6a:	f043 0301 	orr.w	r3, r3, #1
24051d6e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24051d72:	4b59      	ldr	r3, [pc, #356]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d78:	f003 0301 	and.w	r3, r3, #1
24051d7c:	60bb      	str	r3, [r7, #8]
24051d7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24051d80:	4b55      	ldr	r3, [pc, #340]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d86:	4a54      	ldr	r2, [pc, #336]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d88:	f043 0302 	orr.w	r3, r3, #2
24051d8c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24051d90:	4b51      	ldr	r3, [pc, #324]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d96:	f003 0302 	and.w	r3, r3, #2
24051d9a:	607b      	str	r3, [r7, #4]
24051d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24051d9e:	4b4e      	ldr	r3, [pc, #312]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051da0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051da4:	4a4c      	ldr	r2, [pc, #304]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051da6:	f043 0308 	orr.w	r3, r3, #8
24051daa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24051dae:	4b4a      	ldr	r3, [pc, #296]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051db0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051db4:	f003 0308 	and.w	r3, r3, #8
24051db8:	603b      	str	r3, [r7, #0]
24051dba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Speaker_enable_GPIO_Port, GPIO_Speaker_enable_Pin, GPIO_PIN_SET);
24051dbc:	2201      	movs	r2, #1
24051dbe:	2108      	movs	r1, #8
24051dc0:	4846      	ldr	r0, [pc, #280]	; (24051edc <MX_GPIO_Init+0x1cc>)
24051dc2:	f006 f839 	bl	24057e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
24051dc6:	2200      	movs	r2, #0
24051dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
24051dcc:	4843      	ldr	r0, [pc, #268]	; (24051edc <MX_GPIO_Init+0x1cc>)
24051dce:	f006 f833 	bl	24057e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051dd2:	2201      	movs	r2, #1
24051dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051dd8:	4841      	ldr	r0, [pc, #260]	; (24051ee0 <MX_GPIO_Init+0x1d0>)
24051dda:	f006 f82d 	bl	24057e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_4, GPIO_PIN_SET);
24051dde:	2201      	movs	r2, #1
24051de0:	f44f 7188 	mov.w	r1, #272	; 0x110
24051de4:	483f      	ldr	r0, [pc, #252]	; (24051ee4 <MX_GPIO_Init+0x1d4>)
24051de6:	f006 f827 	bl	24057e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
24051dea:	2200      	movs	r2, #0
24051dec:	2102      	movs	r1, #2
24051dee:	483d      	ldr	r0, [pc, #244]	; (24051ee4 <MX_GPIO_Init+0x1d4>)
24051df0:	f006 f822 	bl	24057e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_Speaker_enable_Pin PE8 */
  GPIO_InitStruct.Pin = GPIO_Speaker_enable_Pin|GPIO_PIN_8;
24051df4:	f44f 7384 	mov.w	r3, #264	; 0x108
24051df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24051dfa:	2301      	movs	r3, #1
24051dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24051dfe:	2300      	movs	r3, #0
24051e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24051e02:	2300      	movs	r3, #0
24051e04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24051e06:	f107 0314 	add.w	r3, r7, #20
24051e0a:	4619      	mov	r1, r3
24051e0c:	4833      	ldr	r0, [pc, #204]	; (24051edc <MX_GPIO_Init+0x1cc>)
24051e0e:	f005 fe4b 	bl	24057aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_PAUSE_Pin BTN_GAME_Pin BTN_TIME_Pin */
  GPIO_InitStruct.Pin = BTN_PAUSE_Pin|BTN_GAME_Pin|BTN_TIME_Pin;
24051e12:	f242 0322 	movw	r3, #8226	; 0x2022
24051e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24051e18:	2300      	movs	r3, #0
24051e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24051e1c:	2301      	movs	r3, #1
24051e1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24051e20:	f107 0314 	add.w	r3, r7, #20
24051e24:	4619      	mov	r1, r3
24051e26:	4830      	ldr	r0, [pc, #192]	; (24051ee8 <MX_GPIO_Init+0x1d8>)
24051e28:	f005 fe3e 	bl	24057aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_PWR_Pin */
  GPIO_InitStruct.Pin = BTN_PWR_Pin;
24051e2c:	2301      	movs	r3, #1
24051e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24051e30:	2300      	movs	r3, #0
24051e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24051e34:	2300      	movs	r3, #0
24051e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_PWR_GPIO_Port, &GPIO_InitStruct);
24051e38:	f107 0314 	add.w	r3, r7, #20
24051e3c:	4619      	mov	r1, r3
24051e3e:	482b      	ldr	r0, [pc, #172]	; (24051eec <MX_GPIO_Init+0x1dc>)
24051e40:	f005 fe32 	bl	24057aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24051e44:	2304      	movs	r3, #4
24051e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
24051e48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
24051e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24051e4e:	2300      	movs	r3, #0
24051e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24051e52:	f107 0314 	add.w	r3, r7, #20
24051e56:	4619      	mov	r1, r3
24051e58:	4824      	ldr	r0, [pc, #144]	; (24051eec <MX_GPIO_Init+0x1dc>)
24051e5a:	f005 fe25 	bl	24057aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
24051e5e:	2380      	movs	r3, #128	; 0x80
24051e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
24051e62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
24051e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24051e68:	2300      	movs	r3, #0
24051e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24051e6c:	f107 0314 	add.w	r3, r7, #20
24051e70:	4619      	mov	r1, r3
24051e72:	481a      	ldr	r0, [pc, #104]	; (24051edc <MX_GPIO_Init+0x1cc>)
24051e74:	f005 fe18 	bl	24057aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24051e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24051e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24051e7e:	2301      	movs	r3, #1
24051e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24051e82:	2300      	movs	r3, #0
24051e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24051e86:	2300      	movs	r3, #0
24051e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24051e8a:	f107 0314 	add.w	r3, r7, #20
24051e8e:	4619      	mov	r1, r3
24051e90:	4813      	ldr	r0, [pc, #76]	; (24051ee0 <MX_GPIO_Init+0x1d0>)
24051e92:	f005 fe09 	bl	24057aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD1 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_4;
24051e96:	f44f 7389 	mov.w	r3, #274	; 0x112
24051e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24051e9c:	2301      	movs	r3, #1
24051e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24051ea0:	2300      	movs	r3, #0
24051ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24051ea4:	2300      	movs	r3, #0
24051ea6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24051ea8:	f107 0314 	add.w	r3, r7, #20
24051eac:	4619      	mov	r1, r3
24051eae:	480d      	ldr	r0, [pc, #52]	; (24051ee4 <MX_GPIO_Init+0x1d4>)
24051eb0:	f005 fdfa 	bl	24057aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_Left_Pin BTN_Down_Pin BTN_Right_Pin
                           BTN_Up_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_Left_Pin|BTN_Down_Pin|BTN_Right_Pin
24051eb4:	f64c 2321 	movw	r3, #51745	; 0xca21
24051eb8:	617b      	str	r3, [r7, #20]
                          |BTN_Up_Pin|BTN_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24051eba:	2300      	movs	r3, #0
24051ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24051ebe:	2301      	movs	r3, #1
24051ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24051ec2:	f107 0314 	add.w	r3, r7, #20
24051ec6:	4619      	mov	r1, r3
24051ec8:	4806      	ldr	r0, [pc, #24]	; (24051ee4 <MX_GPIO_Init+0x1d4>)
24051eca:	f005 fded 	bl	24057aa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
24051ece:	bf00      	nop
24051ed0:	3728      	adds	r7, #40	; 0x28
24051ed2:	46bd      	mov	sp, r7
24051ed4:	bd80      	pop	{r7, pc}
24051ed6:	bf00      	nop
24051ed8:	58024400 	.word	0x58024400
24051edc:	58021000 	.word	0x58021000
24051ee0:	58020400 	.word	0x58020400
24051ee4:	58020c00 	.word	0x58020c00
24051ee8:	58020800 	.word	0x58020800
24051eec:	58020000 	.word	0x58020000

24051ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
24051ef0:	b480      	push	{r7}
24051ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
24051ef4:	b672      	cpsid	i
}
24051ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
24051ef8:	e7fe      	b.n	24051ef8 <Error_Handler+0x8>
	...

24051efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
24051efc:	b480      	push	{r7}
24051efe:	b083      	sub	sp, #12
24051f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24051f02:	4b0a      	ldr	r3, [pc, #40]	; (24051f2c <HAL_MspInit+0x30>)
24051f04:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24051f08:	4a08      	ldr	r2, [pc, #32]	; (24051f2c <HAL_MspInit+0x30>)
24051f0a:	f043 0302 	orr.w	r3, r3, #2
24051f0e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
24051f12:	4b06      	ldr	r3, [pc, #24]	; (24051f2c <HAL_MspInit+0x30>)
24051f14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24051f18:	f003 0302 	and.w	r3, r3, #2
24051f1c:	607b      	str	r3, [r7, #4]
24051f1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24051f20:	bf00      	nop
24051f22:	370c      	adds	r7, #12
24051f24:	46bd      	mov	sp, r7
24051f26:	f85d 7b04 	ldr.w	r7, [sp], #4
24051f2a:	4770      	bx	lr
24051f2c:	58024400 	.word	0x58024400

24051f30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
24051f30:	b580      	push	{r7, lr}
24051f32:	b08a      	sub	sp, #40	; 0x28
24051f34:	af00      	add	r7, sp, #0
24051f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24051f38:	f107 0314 	add.w	r3, r7, #20
24051f3c:	2200      	movs	r2, #0
24051f3e:	601a      	str	r2, [r3, #0]
24051f40:	605a      	str	r2, [r3, #4]
24051f42:	609a      	str	r2, [r3, #8]
24051f44:	60da      	str	r2, [r3, #12]
24051f46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
24051f48:	687b      	ldr	r3, [r7, #4]
24051f4a:	681b      	ldr	r3, [r3, #0]
24051f4c:	4a1c      	ldr	r2, [pc, #112]	; (24051fc0 <HAL_ADC_MspInit+0x90>)
24051f4e:	4293      	cmp	r3, r2
24051f50:	d131      	bne.n	24051fb6 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
24051f52:	4b1c      	ldr	r3, [pc, #112]	; (24051fc4 <HAL_ADC_MspInit+0x94>)
24051f54:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24051f58:	4a1a      	ldr	r2, [pc, #104]	; (24051fc4 <HAL_ADC_MspInit+0x94>)
24051f5a:	f043 0320 	orr.w	r3, r3, #32
24051f5e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
24051f62:	4b18      	ldr	r3, [pc, #96]	; (24051fc4 <HAL_ADC_MspInit+0x94>)
24051f64:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24051f68:	f003 0320 	and.w	r3, r3, #32
24051f6c:	613b      	str	r3, [r7, #16]
24051f6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
24051f70:	4b14      	ldr	r3, [pc, #80]	; (24051fc4 <HAL_ADC_MspInit+0x94>)
24051f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051f76:	4a13      	ldr	r2, [pc, #76]	; (24051fc4 <HAL_ADC_MspInit+0x94>)
24051f78:	f043 0304 	orr.w	r3, r3, #4
24051f7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24051f80:	4b10      	ldr	r3, [pc, #64]	; (24051fc4 <HAL_ADC_MspInit+0x94>)
24051f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051f86:	f003 0304 	and.w	r3, r3, #4
24051f8a:	60fb      	str	r3, [r7, #12]
24051f8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24051f8e:	2310      	movs	r3, #16
24051f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
24051f92:	2303      	movs	r3, #3
24051f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24051f96:	2300      	movs	r3, #0
24051f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24051f9a:	f107 0314 	add.w	r3, r7, #20
24051f9e:	4619      	mov	r1, r3
24051fa0:	4809      	ldr	r0, [pc, #36]	; (24051fc8 <HAL_ADC_MspInit+0x98>)
24051fa2:	f005 fd81 	bl	24057aa8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
24051fa6:	2200      	movs	r2, #0
24051fa8:	2100      	movs	r1, #0
24051faa:	2012      	movs	r0, #18
24051fac:	f002 fc1f 	bl	240547ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
24051fb0:	2012      	movs	r0, #18
24051fb2:	f002 fc36 	bl	24054822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
24051fb6:	bf00      	nop
24051fb8:	3728      	adds	r7, #40	; 0x28
24051fba:	46bd      	mov	sp, r7
24051fbc:	bd80      	pop	{r7, pc}
24051fbe:	bf00      	nop
24051fc0:	40022000 	.word	0x40022000
24051fc4:	58024400 	.word	0x58024400
24051fc8:	58020800 	.word	0x58020800

24051fcc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
24051fcc:	b580      	push	{r7, lr}
24051fce:	b08c      	sub	sp, #48	; 0x30
24051fd0:	af00      	add	r7, sp, #0
24051fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24051fd4:	f107 031c 	add.w	r3, r7, #28
24051fd8:	2200      	movs	r2, #0
24051fda:	601a      	str	r2, [r3, #0]
24051fdc:	605a      	str	r2, [r3, #4]
24051fde:	609a      	str	r2, [r3, #8]
24051fe0:	60da      	str	r2, [r3, #12]
24051fe2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
24051fe4:	687b      	ldr	r3, [r7, #4]
24051fe6:	681b      	ldr	r3, [r3, #0]
24051fe8:	4a30      	ldr	r2, [pc, #192]	; (240520ac <HAL_DAC_MspInit+0xe0>)
24051fea:	4293      	cmp	r3, r2
24051fec:	d12a      	bne.n	24052044 <HAL_DAC_MspInit+0x78>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
24051fee:	4b30      	ldr	r3, [pc, #192]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24051ff0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
24051ff4:	4a2e      	ldr	r2, [pc, #184]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24051ff6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
24051ffa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
24051ffe:	4b2c      	ldr	r3, [pc, #176]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24052000:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
24052004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24052008:	61bb      	str	r3, [r7, #24]
2405200a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
2405200c:	4b28      	ldr	r3, [pc, #160]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
2405200e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052012:	4a27      	ldr	r2, [pc, #156]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24052014:	f043 0301 	orr.w	r3, r3, #1
24052018:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405201c:	4b24      	ldr	r3, [pc, #144]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
2405201e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052022:	f003 0301 	and.w	r3, r3, #1
24052026:	617b      	str	r3, [r7, #20]
24052028:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
2405202a:	2330      	movs	r3, #48	; 0x30
2405202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
2405202e:	2303      	movs	r3, #3
24052030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052032:	2300      	movs	r3, #0
24052034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24052036:	f107 031c 	add.w	r3, r7, #28
2405203a:	4619      	mov	r1, r3
2405203c:	481d      	ldr	r0, [pc, #116]	; (240520b4 <HAL_DAC_MspInit+0xe8>)
2405203e:	f005 fd33 	bl	24057aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
24052042:	e02e      	b.n	240520a2 <HAL_DAC_MspInit+0xd6>
  else if(hdac->Instance==DAC2)
24052044:	687b      	ldr	r3, [r7, #4]
24052046:	681b      	ldr	r3, [r3, #0]
24052048:	4a1b      	ldr	r2, [pc, #108]	; (240520b8 <HAL_DAC_MspInit+0xec>)
2405204a:	4293      	cmp	r3, r2
2405204c:	d129      	bne.n	240520a2 <HAL_DAC_MspInit+0xd6>
    __HAL_RCC_DAC2_CLK_ENABLE();
2405204e:	4b18      	ldr	r3, [pc, #96]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24052050:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24052054:	4a16      	ldr	r2, [pc, #88]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24052056:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
2405205a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
2405205e:	4b14      	ldr	r3, [pc, #80]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24052060:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24052064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24052068:	613b      	str	r3, [r7, #16]
2405206a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
2405206c:	4b10      	ldr	r3, [pc, #64]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
2405206e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052072:	4a0f      	ldr	r2, [pc, #60]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24052074:	f043 0301 	orr.w	r3, r3, #1
24052078:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405207c:	4b0c      	ldr	r3, [pc, #48]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
2405207e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052082:	f003 0301 	and.w	r3, r3, #1
24052086:	60fb      	str	r3, [r7, #12]
24052088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
2405208a:	2340      	movs	r3, #64	; 0x40
2405208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
2405208e:	2303      	movs	r3, #3
24052090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052092:	2300      	movs	r3, #0
24052094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24052096:	f107 031c 	add.w	r3, r7, #28
2405209a:	4619      	mov	r1, r3
2405209c:	4805      	ldr	r0, [pc, #20]	; (240520b4 <HAL_DAC_MspInit+0xe8>)
2405209e:	f005 fd03 	bl	24057aa8 <HAL_GPIO_Init>
}
240520a2:	bf00      	nop
240520a4:	3730      	adds	r7, #48	; 0x30
240520a6:	46bd      	mov	sp, r7
240520a8:	bd80      	pop	{r7, pc}
240520aa:	bf00      	nop
240520ac:	40007400 	.word	0x40007400
240520b0:	58024400 	.word	0x58024400
240520b4:	58020000 	.word	0x58020000
240520b8:	58003400 	.word	0x58003400

240520bc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
240520bc:	b480      	push	{r7}
240520be:	b085      	sub	sp, #20
240520c0:	af00      	add	r7, sp, #0
240520c2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
240520c4:	687b      	ldr	r3, [r7, #4]
240520c6:	681b      	ldr	r3, [r3, #0]
240520c8:	4a0b      	ldr	r2, [pc, #44]	; (240520f8 <HAL_DMA2D_MspInit+0x3c>)
240520ca:	4293      	cmp	r3, r2
240520cc:	d10e      	bne.n	240520ec <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
240520ce:	4b0b      	ldr	r3, [pc, #44]	; (240520fc <HAL_DMA2D_MspInit+0x40>)
240520d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
240520d4:	4a09      	ldr	r2, [pc, #36]	; (240520fc <HAL_DMA2D_MspInit+0x40>)
240520d6:	f043 0310 	orr.w	r3, r3, #16
240520da:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
240520de:	4b07      	ldr	r3, [pc, #28]	; (240520fc <HAL_DMA2D_MspInit+0x40>)
240520e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
240520e4:	f003 0310 	and.w	r3, r3, #16
240520e8:	60fb      	str	r3, [r7, #12]
240520ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
240520ec:	bf00      	nop
240520ee:	3714      	adds	r7, #20
240520f0:	46bd      	mov	sp, r7
240520f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240520f6:	4770      	bx	lr
240520f8:	52001000 	.word	0x52001000
240520fc:	58024400 	.word	0x58024400

24052100 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
24052100:	b580      	push	{r7, lr}
24052102:	b08e      	sub	sp, #56	; 0x38
24052104:	af00      	add	r7, sp, #0
24052106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24052108:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405210c:	2200      	movs	r2, #0
2405210e:	601a      	str	r2, [r3, #0]
24052110:	605a      	str	r2, [r3, #4]
24052112:	609a      	str	r2, [r3, #8]
24052114:	60da      	str	r2, [r3, #12]
24052116:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
24052118:	687b      	ldr	r3, [r7, #4]
2405211a:	681b      	ldr	r3, [r3, #0]
2405211c:	4a90      	ldr	r2, [pc, #576]	; (24052360 <HAL_LTDC_MspInit+0x260>)
2405211e:	4293      	cmp	r3, r2
24052120:	f040 8119 	bne.w	24052356 <HAL_LTDC_MspInit+0x256>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
24052124:	4b8f      	ldr	r3, [pc, #572]	; (24052364 <HAL_LTDC_MspInit+0x264>)
24052126:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
2405212a:	4a8e      	ldr	r2, [pc, #568]	; (24052364 <HAL_LTDC_MspInit+0x264>)
2405212c:	f043 0308 	orr.w	r3, r3, #8
24052130:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
24052134:	4b8b      	ldr	r3, [pc, #556]	; (24052364 <HAL_LTDC_MspInit+0x264>)
24052136:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
2405213a:	f003 0308 	and.w	r3, r3, #8
2405213e:	623b      	str	r3, [r7, #32]
24052140:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
24052142:	4b88      	ldr	r3, [pc, #544]	; (24052364 <HAL_LTDC_MspInit+0x264>)
24052144:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052148:	4a86      	ldr	r2, [pc, #536]	; (24052364 <HAL_LTDC_MspInit+0x264>)
2405214a:	f043 0304 	orr.w	r3, r3, #4
2405214e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052152:	4b84      	ldr	r3, [pc, #528]	; (24052364 <HAL_LTDC_MspInit+0x264>)
24052154:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052158:	f003 0304 	and.w	r3, r3, #4
2405215c:	61fb      	str	r3, [r7, #28]
2405215e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24052160:	4b80      	ldr	r3, [pc, #512]	; (24052364 <HAL_LTDC_MspInit+0x264>)
24052162:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052166:	4a7f      	ldr	r2, [pc, #508]	; (24052364 <HAL_LTDC_MspInit+0x264>)
24052168:	f043 0301 	orr.w	r3, r3, #1
2405216c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052170:	4b7c      	ldr	r3, [pc, #496]	; (24052364 <HAL_LTDC_MspInit+0x264>)
24052172:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052176:	f003 0301 	and.w	r3, r3, #1
2405217a:	61bb      	str	r3, [r7, #24]
2405217c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2405217e:	4b79      	ldr	r3, [pc, #484]	; (24052364 <HAL_LTDC_MspInit+0x264>)
24052180:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052184:	4a77      	ldr	r2, [pc, #476]	; (24052364 <HAL_LTDC_MspInit+0x264>)
24052186:	f043 0302 	orr.w	r3, r3, #2
2405218a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405218e:	4b75      	ldr	r3, [pc, #468]	; (24052364 <HAL_LTDC_MspInit+0x264>)
24052190:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052194:	f003 0302 	and.w	r3, r3, #2
24052198:	617b      	str	r3, [r7, #20]
2405219a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
2405219c:	4b71      	ldr	r3, [pc, #452]	; (24052364 <HAL_LTDC_MspInit+0x264>)
2405219e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240521a2:	4a70      	ldr	r2, [pc, #448]	; (24052364 <HAL_LTDC_MspInit+0x264>)
240521a4:	f043 0310 	orr.w	r3, r3, #16
240521a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240521ac:	4b6d      	ldr	r3, [pc, #436]	; (24052364 <HAL_LTDC_MspInit+0x264>)
240521ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240521b2:	f003 0310 	and.w	r3, r3, #16
240521b6:	613b      	str	r3, [r7, #16]
240521b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
240521ba:	4b6a      	ldr	r3, [pc, #424]	; (24052364 <HAL_LTDC_MspInit+0x264>)
240521bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240521c0:	4a68      	ldr	r2, [pc, #416]	; (24052364 <HAL_LTDC_MspInit+0x264>)
240521c2:	f043 0308 	orr.w	r3, r3, #8
240521c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240521ca:	4b66      	ldr	r3, [pc, #408]	; (24052364 <HAL_LTDC_MspInit+0x264>)
240521cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240521d0:	f003 0308 	and.w	r3, r3, #8
240521d4:	60fb      	str	r3, [r7, #12]
240521d6:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PD6     ------> LTDC_B2
    PB5     ------> LTDC_B5
    PB8     ------> LTDC_B6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
240521d8:	2301      	movs	r3, #1
240521da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240521dc:	2302      	movs	r3, #2
240521de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240521e0:	2300      	movs	r3, #0
240521e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240521e4:	2300      	movs	r3, #0
240521e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
240521e8:	230b      	movs	r3, #11
240521ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240521ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
240521f0:	4619      	mov	r1, r3
240521f2:	485d      	ldr	r0, [pc, #372]	; (24052368 <HAL_LTDC_MspInit+0x268>)
240521f4:	f005 fc58 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
240521f8:	f44f 6338 	mov.w	r3, #2944	; 0xb80
240521fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240521fe:	2302      	movs	r3, #2
24052200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052202:	2300      	movs	r3, #0
24052204:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052206:	2300      	movs	r3, #0
24052208:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
2405220a:	230e      	movs	r3, #14
2405220c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2405220e:	f107 0324 	add.w	r3, r7, #36	; 0x24
24052212:	4619      	mov	r1, r3
24052214:	4855      	ldr	r0, [pc, #340]	; (2405236c <HAL_LTDC_MspInit+0x26c>)
24052216:	f005 fc47 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
2405221a:	2301      	movs	r3, #1
2405221c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405221e:	2302      	movs	r3, #2
24052220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052222:	2300      	movs	r3, #0
24052224:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052226:	2300      	movs	r3, #0
24052228:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
2405222a:	2309      	movs	r3, #9
2405222c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2405222e:	f107 0324 	add.w	r3, r7, #36	; 0x24
24052232:	4619      	mov	r1, r3
24052234:	484e      	ldr	r0, [pc, #312]	; (24052370 <HAL_LTDC_MspInit+0x270>)
24052236:	f005 fc37 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
2405223a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
2405223e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24052240:	2302      	movs	r3, #2
24052242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052244:	2300      	movs	r3, #0
24052246:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052248:	2300      	movs	r3, #0
2405224a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
2405224c:	230e      	movs	r3, #14
2405224e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24052250:	f107 0324 	add.w	r3, r7, #36	; 0x24
24052254:	4619      	mov	r1, r3
24052256:	4847      	ldr	r0, [pc, #284]	; (24052374 <HAL_LTDC_MspInit+0x274>)
24052258:	f005 fc26 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_8;
2405225c:	f44f 439a 	mov.w	r3, #19712	; 0x4d00
24052260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24052262:	2302      	movs	r3, #2
24052264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052266:	2300      	movs	r3, #0
24052268:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2405226a:	2300      	movs	r3, #0
2405226c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
2405226e:	230e      	movs	r3, #14
24052270:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24052272:	f107 0324 	add.w	r3, r7, #36	; 0x24
24052276:	4619      	mov	r1, r3
24052278:	483d      	ldr	r0, [pc, #244]	; (24052370 <HAL_LTDC_MspInit+0x270>)
2405227a:	f005 fc15 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
2405227e:	f44f 6389 	mov.w	r3, #1096	; 0x448
24052282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24052284:	2302      	movs	r3, #2
24052286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052288:	2300      	movs	r3, #0
2405228a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2405228c:	2300      	movs	r3, #0
2405228e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24052290:	230e      	movs	r3, #14
24052292:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24052294:	f107 0324 	add.w	r3, r7, #36	; 0x24
24052298:	4619      	mov	r1, r3
2405229a:	4837      	ldr	r0, [pc, #220]	; (24052378 <HAL_LTDC_MspInit+0x278>)
2405229c:	f005 fc04 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
240522a0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
240522a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240522a6:	2302      	movs	r3, #2
240522a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240522aa:	2300      	movs	r3, #0
240522ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240522ae:	2300      	movs	r3, #0
240522b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
240522b2:	230e      	movs	r3, #14
240522b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240522b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
240522ba:	4619      	mov	r1, r3
240522bc:	482a      	ldr	r0, [pc, #168]	; (24052368 <HAL_LTDC_MspInit+0x268>)
240522be:	f005 fbf3 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
240522c2:	f44f 7300 	mov.w	r3, #512	; 0x200
240522c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240522c8:	2302      	movs	r3, #2
240522ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240522cc:	2300      	movs	r3, #0
240522ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240522d0:	2300      	movs	r3, #0
240522d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
240522d4:	230a      	movs	r3, #10
240522d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240522d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
240522dc:	4619      	mov	r1, r3
240522de:	4822      	ldr	r0, [pc, #136]	; (24052368 <HAL_LTDC_MspInit+0x268>)
240522e0:	f005 fbe2 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
240522e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
240522e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240522ea:	2302      	movs	r3, #2
240522ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240522ee:	2300      	movs	r3, #0
240522f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240522f2:	2300      	movs	r3, #0
240522f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
240522f6:	230c      	movs	r3, #12
240522f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240522fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
240522fe:	4619      	mov	r1, r3
24052300:	481a      	ldr	r0, [pc, #104]	; (2405236c <HAL_LTDC_MspInit+0x26c>)
24052302:	f005 fbd1 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
24052306:	2304      	movs	r3, #4
24052308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405230a:	2302      	movs	r3, #2
2405230c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405230e:	2300      	movs	r3, #0
24052310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052312:	2300      	movs	r3, #0
24052314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
24052316:	2309      	movs	r3, #9
24052318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2405231a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405231e:	4619      	mov	r1, r3
24052320:	4815      	ldr	r0, [pc, #84]	; (24052378 <HAL_LTDC_MspInit+0x278>)
24052322:	f005 fbc1 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
24052326:	2320      	movs	r3, #32
24052328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405232a:	2302      	movs	r3, #2
2405232c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405232e:	2300      	movs	r3, #0
24052330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052332:	2300      	movs	r3, #0
24052334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
24052336:	230b      	movs	r3, #11
24052338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2405233a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405233e:	4619      	mov	r1, r3
24052340:	480b      	ldr	r0, [pc, #44]	; (24052370 <HAL_LTDC_MspInit+0x270>)
24052342:	f005 fbb1 	bl	24057aa8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
24052346:	2200      	movs	r2, #0
24052348:	2100      	movs	r1, #0
2405234a:	2058      	movs	r0, #88	; 0x58
2405234c:	f002 fa4f 	bl	240547ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
24052350:	2058      	movs	r0, #88	; 0x58
24052352:	f002 fa66 	bl	24054822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
24052356:	bf00      	nop
24052358:	3738      	adds	r7, #56	; 0x38
2405235a:	46bd      	mov	sp, r7
2405235c:	bd80      	pop	{r7, pc}
2405235e:	bf00      	nop
24052360:	50001000 	.word	0x50001000
24052364:	58024400 	.word	0x58024400
24052368:	58020800 	.word	0x58020800
2405236c:	58020000 	.word	0x58020000
24052370:	58020400 	.word	0x58020400
24052374:	58021000 	.word	0x58021000
24052378:	58020c00 	.word	0x58020c00

2405237c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
2405237c:	b580      	push	{r7, lr}
2405237e:	b0be      	sub	sp, #248	; 0xf8
24052380:	af00      	add	r7, sp, #0
24052382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24052384:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
24052388:	2200      	movs	r2, #0
2405238a:	601a      	str	r2, [r3, #0]
2405238c:	605a      	str	r2, [r3, #4]
2405238e:	609a      	str	r2, [r3, #8]
24052390:	60da      	str	r2, [r3, #12]
24052392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24052394:	f107 0320 	add.w	r3, r7, #32
24052398:	22c0      	movs	r2, #192	; 0xc0
2405239a:	2100      	movs	r1, #0
2405239c:	4618      	mov	r0, r3
2405239e:	f00d f87c 	bl	2405f49a <memset>
  if(hospi->Instance==OCTOSPI1)
240523a2:	687b      	ldr	r3, [r7, #4]
240523a4:	681b      	ldr	r3, [r3, #0]
240523a6:	4a7a      	ldr	r2, [pc, #488]	; (24052590 <HAL_OSPI_MspInit+0x214>)
240523a8:	4293      	cmp	r3, r2
240523aa:	f040 80ec 	bne.w	24052586 <HAL_OSPI_MspInit+0x20a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
240523ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
240523b2:	f04f 0300 	mov.w	r3, #0
240523b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
240523ba:	2330      	movs	r3, #48	; 0x30
240523bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240523be:	f107 0320 	add.w	r3, r7, #32
240523c2:	4618      	mov	r0, r3
240523c4:	f008 fbfc 	bl	2405abc0 <HAL_RCCEx_PeriphCLKConfig>
240523c8:	4603      	mov	r3, r0
240523ca:	2b00      	cmp	r3, #0
240523cc:	d001      	beq.n	240523d2 <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
240523ce:	f7ff fd8f 	bl	24051ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
240523d2:	4b70      	ldr	r3, [pc, #448]	; (24052594 <HAL_OSPI_MspInit+0x218>)
240523d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
240523d8:	4a6e      	ldr	r2, [pc, #440]	; (24052594 <HAL_OSPI_MspInit+0x218>)
240523da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
240523de:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
240523e2:	4b6c      	ldr	r3, [pc, #432]	; (24052594 <HAL_OSPI_MspInit+0x218>)
240523e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
240523e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
240523ec:	61fb      	str	r3, [r7, #28]
240523ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
240523f0:	4b68      	ldr	r3, [pc, #416]	; (24052594 <HAL_OSPI_MspInit+0x218>)
240523f2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
240523f6:	4a67      	ldr	r2, [pc, #412]	; (24052594 <HAL_OSPI_MspInit+0x218>)
240523f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
240523fc:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
24052400:	4b64      	ldr	r3, [pc, #400]	; (24052594 <HAL_OSPI_MspInit+0x218>)
24052402:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
24052406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2405240a:	61bb      	str	r3, [r7, #24]
2405240c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
2405240e:	4b61      	ldr	r3, [pc, #388]	; (24052594 <HAL_OSPI_MspInit+0x218>)
24052410:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052414:	4a5f      	ldr	r2, [pc, #380]	; (24052594 <HAL_OSPI_MspInit+0x218>)
24052416:	f043 0310 	orr.w	r3, r3, #16
2405241a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405241e:	4b5d      	ldr	r3, [pc, #372]	; (24052594 <HAL_OSPI_MspInit+0x218>)
24052420:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052424:	f003 0310 	and.w	r3, r3, #16
24052428:	617b      	str	r3, [r7, #20]
2405242a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
2405242c:	4b59      	ldr	r3, [pc, #356]	; (24052594 <HAL_OSPI_MspInit+0x218>)
2405242e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052432:	4a58      	ldr	r2, [pc, #352]	; (24052594 <HAL_OSPI_MspInit+0x218>)
24052434:	f043 0301 	orr.w	r3, r3, #1
24052438:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405243c:	4b55      	ldr	r3, [pc, #340]	; (24052594 <HAL_OSPI_MspInit+0x218>)
2405243e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052442:	f003 0301 	and.w	r3, r3, #1
24052446:	613b      	str	r3, [r7, #16]
24052448:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2405244a:	4b52      	ldr	r3, [pc, #328]	; (24052594 <HAL_OSPI_MspInit+0x218>)
2405244c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052450:	4a50      	ldr	r2, [pc, #320]	; (24052594 <HAL_OSPI_MspInit+0x218>)
24052452:	f043 0302 	orr.w	r3, r3, #2
24052456:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405245a:	4b4e      	ldr	r3, [pc, #312]	; (24052594 <HAL_OSPI_MspInit+0x218>)
2405245c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052460:	f003 0302 	and.w	r3, r3, #2
24052464:	60fb      	str	r3, [r7, #12]
24052466:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24052468:	4b4a      	ldr	r3, [pc, #296]	; (24052594 <HAL_OSPI_MspInit+0x218>)
2405246a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405246e:	4a49      	ldr	r2, [pc, #292]	; (24052594 <HAL_OSPI_MspInit+0x218>)
24052470:	f043 0308 	orr.w	r3, r3, #8
24052474:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052478:	4b46      	ldr	r3, [pc, #280]	; (24052594 <HAL_OSPI_MspInit+0x218>)
2405247a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405247e:	f003 0308 	and.w	r3, r3, #8
24052482:	60bb      	str	r3, [r7, #8]
24052484:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    PD12     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24052486:	2304      	movs	r3, #4
24052488:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405248c:	2302      	movs	r3, #2
2405248e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052492:	2300      	movs	r3, #0
24052494:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24052498:	2303      	movs	r3, #3
2405249a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
2405249e:	2309      	movs	r3, #9
240524a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240524a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
240524a8:	4619      	mov	r1, r3
240524aa:	483b      	ldr	r0, [pc, #236]	; (24052598 <HAL_OSPI_MspInit+0x21c>)
240524ac:	f005 fafc 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
240524b0:	2302      	movs	r3, #2
240524b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240524b6:	2302      	movs	r3, #2
240524b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240524bc:	2300      	movs	r3, #0
240524be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240524c2:	2303      	movs	r3, #3
240524c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
240524c8:	2309      	movs	r3, #9
240524ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240524ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
240524d2:	4619      	mov	r1, r3
240524d4:	4831      	ldr	r0, [pc, #196]	; (2405259c <HAL_OSPI_MspInit+0x220>)
240524d6:	f005 fae7 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
240524da:	2302      	movs	r3, #2
240524dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240524e0:	2302      	movs	r3, #2
240524e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240524e6:	2300      	movs	r3, #0
240524e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240524ec:	2303      	movs	r3, #3
240524ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
240524f2:	230b      	movs	r3, #11
240524f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240524f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
240524fc:	4619      	mov	r1, r3
240524fe:	4828      	ldr	r0, [pc, #160]	; (240525a0 <HAL_OSPI_MspInit+0x224>)
24052500:	f005 fad2 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
24052504:	2304      	movs	r3, #4
24052506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405250a:	2302      	movs	r3, #2
2405250c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052510:	2300      	movs	r3, #0
24052512:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24052516:	2303      	movs	r3, #3
24052518:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
2405251c:	2309      	movs	r3, #9
2405251e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24052522:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
24052526:	4619      	mov	r1, r3
24052528:	481d      	ldr	r0, [pc, #116]	; (240525a0 <HAL_OSPI_MspInit+0x224>)
2405252a:	f005 fabd 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
2405252e:	f44f 6300 	mov.w	r3, #2048	; 0x800
24052532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24052536:	2302      	movs	r3, #2
24052538:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405253c:	2300      	movs	r3, #0
2405253e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24052542:	2303      	movs	r3, #3
24052544:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
24052548:	230b      	movs	r3, #11
2405254a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2405254e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
24052552:	4619      	mov	r1, r3
24052554:	4810      	ldr	r0, [pc, #64]	; (24052598 <HAL_OSPI_MspInit+0x21c>)
24052556:	f005 faa7 	bl	24057aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
2405255a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2405255e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24052562:	2302      	movs	r3, #2
24052564:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052568:	2300      	movs	r3, #0
2405256a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2405256e:	2303      	movs	r3, #3
24052570:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
24052574:	2309      	movs	r3, #9
24052576:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2405257a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
2405257e:	4619      	mov	r1, r3
24052580:	4808      	ldr	r0, [pc, #32]	; (240525a4 <HAL_OSPI_MspInit+0x228>)
24052582:	f005 fa91 	bl	24057aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
24052586:	bf00      	nop
24052588:	37f8      	adds	r7, #248	; 0xf8
2405258a:	46bd      	mov	sp, r7
2405258c:	bd80      	pop	{r7, pc}
2405258e:	bf00      	nop
24052590:	52005000 	.word	0x52005000
24052594:	58024400 	.word	0x58024400
24052598:	58021000 	.word	0x58021000
2405259c:	58020000 	.word	0x58020000
240525a0:	58020400 	.word	0x58020400
240525a4:	58020c00 	.word	0x58020c00

240525a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
240525a8:	b580      	push	{r7, lr}
240525aa:	b0b2      	sub	sp, #200	; 0xc8
240525ac:	af00      	add	r7, sp, #0
240525ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240525b0:	f107 0308 	add.w	r3, r7, #8
240525b4:	22c0      	movs	r2, #192	; 0xc0
240525b6:	2100      	movs	r1, #0
240525b8:	4618      	mov	r0, r3
240525ba:	f00c ff6e 	bl	2405f49a <memset>
  if(hrtc->Instance==RTC)
240525be:	687b      	ldr	r3, [r7, #4]
240525c0:	681b      	ldr	r3, [r3, #0]
240525c2:	4a10      	ldr	r2, [pc, #64]	; (24052604 <HAL_RTC_MspInit+0x5c>)
240525c4:	4293      	cmp	r3, r2
240525c6:	d119      	bne.n	240525fc <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
240525c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
240525cc:	f04f 0300 	mov.w	r3, #0
240525d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
240525d4:	f44f 7380 	mov.w	r3, #256	; 0x100
240525d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240525dc:	f107 0308 	add.w	r3, r7, #8
240525e0:	4618      	mov	r0, r3
240525e2:	f008 faed 	bl	2405abc0 <HAL_RCCEx_PeriphCLKConfig>
240525e6:	4603      	mov	r3, r0
240525e8:	2b00      	cmp	r3, #0
240525ea:	d001      	beq.n	240525f0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
240525ec:	f7ff fc80 	bl	24051ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
240525f0:	4b05      	ldr	r3, [pc, #20]	; (24052608 <HAL_RTC_MspInit+0x60>)
240525f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240525f4:	4a04      	ldr	r2, [pc, #16]	; (24052608 <HAL_RTC_MspInit+0x60>)
240525f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
240525fa:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
240525fc:	bf00      	nop
240525fe:	37c8      	adds	r7, #200	; 0xc8
24052600:	46bd      	mov	sp, r7
24052602:	bd80      	pop	{r7, pc}
24052604:	58004000 	.word	0x58004000
24052608:	58024400 	.word	0x58024400

2405260c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
2405260c:	b580      	push	{r7, lr}
2405260e:	b0ba      	sub	sp, #232	; 0xe8
24052610:	af00      	add	r7, sp, #0
24052612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24052614:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
24052618:	2200      	movs	r2, #0
2405261a:	601a      	str	r2, [r3, #0]
2405261c:	605a      	str	r2, [r3, #4]
2405261e:	609a      	str	r2, [r3, #8]
24052620:	60da      	str	r2, [r3, #12]
24052622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24052624:	f107 0310 	add.w	r3, r7, #16
24052628:	22c0      	movs	r2, #192	; 0xc0
2405262a:	2100      	movs	r1, #0
2405262c:	4618      	mov	r0, r3
2405262e:	f00c ff34 	bl	2405f49a <memset>
  if(hspi->Instance==SPI2)
24052632:	687b      	ldr	r3, [r7, #4]
24052634:	681b      	ldr	r3, [r3, #0]
24052636:	4a27      	ldr	r2, [pc, #156]	; (240526d4 <HAL_SPI_MspInit+0xc8>)
24052638:	4293      	cmp	r3, r2
2405263a:	d146      	bne.n	240526ca <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
2405263c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24052640:	f04f 0300 	mov.w	r3, #0
24052644:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
24052648:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2405264c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2405264e:	f107 0310 	add.w	r3, r7, #16
24052652:	4618      	mov	r0, r3
24052654:	f008 fab4 	bl	2405abc0 <HAL_RCCEx_PeriphCLKConfig>
24052658:	4603      	mov	r3, r0
2405265a:	2b00      	cmp	r3, #0
2405265c:	d001      	beq.n	24052662 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
2405265e:	f7ff fc47 	bl	24051ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
24052662:	4b1d      	ldr	r3, [pc, #116]	; (240526d8 <HAL_SPI_MspInit+0xcc>)
24052664:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
24052668:	4a1b      	ldr	r2, [pc, #108]	; (240526d8 <HAL_SPI_MspInit+0xcc>)
2405266a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2405266e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
24052672:	4b19      	ldr	r3, [pc, #100]	; (240526d8 <HAL_SPI_MspInit+0xcc>)
24052674:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
24052678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2405267c:	60fb      	str	r3, [r7, #12]
2405267e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
24052680:	4b15      	ldr	r3, [pc, #84]	; (240526d8 <HAL_SPI_MspInit+0xcc>)
24052682:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052686:	4a14      	ldr	r2, [pc, #80]	; (240526d8 <HAL_SPI_MspInit+0xcc>)
24052688:	f043 0302 	orr.w	r3, r3, #2
2405268c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052690:	4b11      	ldr	r3, [pc, #68]	; (240526d8 <HAL_SPI_MspInit+0xcc>)
24052692:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052696:	f003 0302 	and.w	r3, r3, #2
2405269a:	60bb      	str	r3, [r7, #8]
2405269c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
2405269e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
240526a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240526a6:	2302      	movs	r3, #2
240526a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240526ac:	2300      	movs	r3, #0
240526ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240526b2:	2300      	movs	r3, #0
240526b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
240526b8:	2305      	movs	r3, #5
240526ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240526be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
240526c2:	4619      	mov	r1, r3
240526c4:	4805      	ldr	r0, [pc, #20]	; (240526dc <HAL_SPI_MspInit+0xd0>)
240526c6:	f005 f9ef 	bl	24057aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
240526ca:	bf00      	nop
240526cc:	37e8      	adds	r7, #232	; 0xe8
240526ce:	46bd      	mov	sp, r7
240526d0:	bd80      	pop	{r7, pc}
240526d2:	bf00      	nop
240526d4:	40003800 	.word	0x40003800
240526d8:	58024400 	.word	0x58024400
240526dc:	58020400 	.word	0x58020400

240526e0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
240526e0:	b580      	push	{r7, lr}
240526e2:	b0ba      	sub	sp, #232	; 0xe8
240526e4:	af00      	add	r7, sp, #0
240526e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240526e8:	f107 0310 	add.w	r3, r7, #16
240526ec:	22c0      	movs	r2, #192	; 0xc0
240526ee:	2100      	movs	r1, #0
240526f0:	4618      	mov	r0, r3
240526f2:	f00c fed2 	bl	2405f49a <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
240526f6:	687b      	ldr	r3, [r7, #4]
240526f8:	681b      	ldr	r3, [r3, #0]
240526fa:	4a4b      	ldr	r2, [pc, #300]	; (24052828 <HAL_SAI_MspInit+0x148>)
240526fc:	4293      	cmp	r3, r2
240526fe:	f040 808f 	bne.w	24052820 <HAL_SAI_MspInit+0x140>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
24052702:	f44f 7280 	mov.w	r2, #256	; 0x100
24052706:	f04f 0300 	mov.w	r3, #0
2405270a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
2405270e:	2319      	movs	r3, #25
24052710:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
24052712:	23c0      	movs	r3, #192	; 0xc0
24052714:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
24052716:	2305      	movs	r3, #5
24052718:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
2405271a:	2302      	movs	r3, #2
2405271c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 5;
2405271e:	2305      	movs	r3, #5
24052720:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
24052722:	2340      	movs	r3, #64	; 0x40
24052724:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
24052726:	2300      	movs	r3, #0
24052728:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
2405272a:	2300      	movs	r3, #0
2405272c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
2405272e:	2301      	movs	r3, #1
24052730:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24052732:	f107 0310 	add.w	r3, r7, #16
24052736:	4618      	mov	r0, r3
24052738:	f008 fa42 	bl	2405abc0 <HAL_RCCEx_PeriphCLKConfig>
2405273c:	4603      	mov	r3, r0
2405273e:	2b00      	cmp	r3, #0
24052740:	d001      	beq.n	24052746 <HAL_SAI_MspInit+0x66>
    {
      Error_Handler();
24052742:	f7ff fbd5 	bl	24051ef0 <Error_Handler>
    }

    if (SAI1_client == 0)
24052746:	4b39      	ldr	r3, [pc, #228]	; (2405282c <HAL_SAI_MspInit+0x14c>)
24052748:	681b      	ldr	r3, [r3, #0]
2405274a:	2b00      	cmp	r3, #0
2405274c:	d116      	bne.n	2405277c <HAL_SAI_MspInit+0x9c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
2405274e:	4b38      	ldr	r3, [pc, #224]	; (24052830 <HAL_SAI_MspInit+0x150>)
24052750:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
24052754:	4a36      	ldr	r2, [pc, #216]	; (24052830 <HAL_SAI_MspInit+0x150>)
24052756:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2405275a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
2405275e:	4b34      	ldr	r3, [pc, #208]	; (24052830 <HAL_SAI_MspInit+0x150>)
24052760:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
24052764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24052768:	60fb      	str	r3, [r7, #12]
2405276a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
2405276c:	2200      	movs	r2, #0
2405276e:	2100      	movs	r1, #0
24052770:	2057      	movs	r0, #87	; 0x57
24052772:	f002 f83c 	bl	240547ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
24052776:	2057      	movs	r0, #87	; 0x57
24052778:	f002 f853 	bl	24054822 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
2405277c:	4b2b      	ldr	r3, [pc, #172]	; (2405282c <HAL_SAI_MspInit+0x14c>)
2405277e:	681b      	ldr	r3, [r3, #0]
24052780:	3301      	adds	r3, #1
24052782:	4a2a      	ldr	r2, [pc, #168]	; (2405282c <HAL_SAI_MspInit+0x14c>)
24052784:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24052786:	2370      	movs	r3, #112	; 0x70
24052788:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405278c:	2302      	movs	r3, #2
2405278e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052792:	2300      	movs	r3, #0
24052794:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052798:	2300      	movs	r3, #0
2405279a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
2405279e:	2306      	movs	r3, #6
240527a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240527a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
240527a8:	4619      	mov	r1, r3
240527aa:	4822      	ldr	r0, [pc, #136]	; (24052834 <HAL_SAI_MspInit+0x154>)
240527ac:	f005 f97c 	bl	24057aa8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
240527b0:	4b21      	ldr	r3, [pc, #132]	; (24052838 <HAL_SAI_MspInit+0x158>)
240527b2:	4a22      	ldr	r2, [pc, #136]	; (2405283c <HAL_SAI_MspInit+0x15c>)
240527b4:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
240527b6:	4b20      	ldr	r3, [pc, #128]	; (24052838 <HAL_SAI_MspInit+0x158>)
240527b8:	2257      	movs	r2, #87	; 0x57
240527ba:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
240527bc:	4b1e      	ldr	r3, [pc, #120]	; (24052838 <HAL_SAI_MspInit+0x158>)
240527be:	2240      	movs	r2, #64	; 0x40
240527c0:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
240527c2:	4b1d      	ldr	r3, [pc, #116]	; (24052838 <HAL_SAI_MspInit+0x158>)
240527c4:	2200      	movs	r2, #0
240527c6:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
240527c8:	4b1b      	ldr	r3, [pc, #108]	; (24052838 <HAL_SAI_MspInit+0x158>)
240527ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
240527ce:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
240527d0:	4b19      	ldr	r3, [pc, #100]	; (24052838 <HAL_SAI_MspInit+0x158>)
240527d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
240527d6:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
240527d8:	4b17      	ldr	r3, [pc, #92]	; (24052838 <HAL_SAI_MspInit+0x158>)
240527da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
240527de:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
240527e0:	4b15      	ldr	r3, [pc, #84]	; (24052838 <HAL_SAI_MspInit+0x158>)
240527e2:	f44f 7280 	mov.w	r2, #256	; 0x100
240527e6:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
240527e8:	4b13      	ldr	r3, [pc, #76]	; (24052838 <HAL_SAI_MspInit+0x158>)
240527ea:	2200      	movs	r2, #0
240527ec:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
240527ee:	4b12      	ldr	r3, [pc, #72]	; (24052838 <HAL_SAI_MspInit+0x158>)
240527f0:	2200      	movs	r2, #0
240527f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
240527f4:	4810      	ldr	r0, [pc, #64]	; (24052838 <HAL_SAI_MspInit+0x158>)
240527f6:	f002 fa09 	bl	24054c0c <HAL_DMA_Init>
240527fa:	4603      	mov	r3, r0
240527fc:	2b00      	cmp	r3, #0
240527fe:	d001      	beq.n	24052804 <HAL_SAI_MspInit+0x124>
    {
      Error_Handler();
24052800:	f7ff fb76 	bl	24051ef0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
24052804:	687b      	ldr	r3, [r7, #4]
24052806:	4a0c      	ldr	r2, [pc, #48]	; (24052838 <HAL_SAI_MspInit+0x158>)
24052808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
2405280c:	4a0a      	ldr	r2, [pc, #40]	; (24052838 <HAL_SAI_MspInit+0x158>)
2405280e:	687b      	ldr	r3, [r7, #4]
24052810:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
24052812:	687b      	ldr	r3, [r7, #4]
24052814:	4a08      	ldr	r2, [pc, #32]	; (24052838 <HAL_SAI_MspInit+0x158>)
24052816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
2405281a:	4a07      	ldr	r2, [pc, #28]	; (24052838 <HAL_SAI_MspInit+0x158>)
2405281c:	687b      	ldr	r3, [r7, #4]
2405281e:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
24052820:	bf00      	nop
24052822:	37e8      	adds	r7, #232	; 0xe8
24052824:	46bd      	mov	sp, r7
24052826:	bd80      	pop	{r7, pc}
24052828:	40015804 	.word	0x40015804
2405282c:	200005bc 	.word	0x200005bc
24052830:	58024400 	.word	0x58024400
24052834:	58021000 	.word	0x58021000
24052838:	200004bc 	.word	0x200004bc
2405283c:	40020010 	.word	0x40020010

24052840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
24052840:	b480      	push	{r7}
24052842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
24052844:	e7fe      	b.n	24052844 <NMI_Handler+0x4>

24052846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
24052846:	b480      	push	{r7}
24052848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2405284a:	e7fe      	b.n	2405284a <HardFault_Handler+0x4>

2405284c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2405284c:	b480      	push	{r7}
2405284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24052850:	e7fe      	b.n	24052850 <MemManage_Handler+0x4>

24052852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
24052852:	b480      	push	{r7}
24052854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24052856:	e7fe      	b.n	24052856 <BusFault_Handler+0x4>

24052858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
24052858:	b480      	push	{r7}
2405285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2405285c:	e7fe      	b.n	2405285c <UsageFault_Handler+0x4>

2405285e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2405285e:	b480      	push	{r7}
24052860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24052862:	bf00      	nop
24052864:	46bd      	mov	sp, r7
24052866:	f85d 7b04 	ldr.w	r7, [sp], #4
2405286a:	4770      	bx	lr

2405286c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
2405286c:	b480      	push	{r7}
2405286e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
24052870:	bf00      	nop
24052872:	46bd      	mov	sp, r7
24052874:	f85d 7b04 	ldr.w	r7, [sp], #4
24052878:	4770      	bx	lr

2405287a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
2405287a:	b480      	push	{r7}
2405287c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2405287e:	bf00      	nop
24052880:	46bd      	mov	sp, r7
24052882:	f85d 7b04 	ldr.w	r7, [sp], #4
24052886:	4770      	bx	lr

24052888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
24052888:	b580      	push	{r7, lr}
2405288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2405288c:	f000 fa2e 	bl	24052cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#if 1
	if (HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == 0) // is power button down ?
24052890:	2101      	movs	r1, #1
24052892:	480c      	ldr	r0, [pc, #48]	; (240528c4 <SysTick_Handler+0x3c>)
24052894:	f005 fab8 	bl	24057e08 <HAL_GPIO_ReadPin>
24052898:	4603      	mov	r3, r0
2405289a:	2b00      	cmp	r3, #0
2405289c:	d10d      	bne.n	240528ba <SysTick_Handler+0x32>
			{
		g_system_reset_ticks++;
2405289e:	4b0a      	ldr	r3, [pc, #40]	; (240528c8 <SysTick_Handler+0x40>)
240528a0:	681b      	ldr	r3, [r3, #0]
240528a2:	3301      	adds	r3, #1
240528a4:	4a08      	ldr	r2, [pc, #32]	; (240528c8 <SysTick_Handler+0x40>)
240528a6:	6013      	str	r3, [r2, #0]
		if (g_system_reset_ticks >= 5000) {
240528a8:	4b07      	ldr	r3, [pc, #28]	; (240528c8 <SysTick_Handler+0x40>)
240528aa:	681b      	ldr	r3, [r3, #0]
240528ac:	f241 3287 	movw	r2, #4999	; 0x1387
240528b0:	4293      	cmp	r3, r2
240528b2:	dd05      	ble.n	240528c0 <SysTick_Handler+0x38>
			HAL_NVIC_SystemReset();
240528b4:	f001 ffc3 	bl	2405483e <HAL_NVIC_SystemReset>
	} else {
		g_system_reset_ticks = 0;
	}
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
240528b8:	e002      	b.n	240528c0 <SysTick_Handler+0x38>
		g_system_reset_ticks = 0;
240528ba:	4b03      	ldr	r3, [pc, #12]	; (240528c8 <SysTick_Handler+0x40>)
240528bc:	2200      	movs	r2, #0
240528be:	601a      	str	r2, [r3, #0]
}
240528c0:	bf00      	nop
240528c2:	bd80      	pop	{r7, pc}
240528c4:	58020000 	.word	0x58020000
240528c8:	200005c0 	.word	0x200005c0

240528cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
240528cc:	b580      	push	{r7, lr}
240528ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
240528d0:	4802      	ldr	r0, [pc, #8]	; (240528dc <DMA1_Stream0_IRQHandler+0x10>)
240528d2:	f003 fcf7 	bl	240562c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
240528d6:	bf00      	nop
240528d8:	bd80      	pop	{r7, pc}
240528da:	bf00      	nop
240528dc:	200004bc 	.word	0x200004bc

240528e0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
240528e0:	b580      	push	{r7, lr}
240528e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
240528e4:	4802      	ldr	r0, [pc, #8]	; (240528f0 <ADC_IRQHandler+0x10>)
240528e6:	f000 ff35 	bl	24053754 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
240528ea:	bf00      	nop
240528ec:	bd80      	pop	{r7, pc}
240528ee:	bf00      	nop
240528f0:	20000204 	.word	0x20000204

240528f4 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
240528f4:	b580      	push	{r7, lr}
240528f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
240528f8:	4802      	ldr	r0, [pc, #8]	; (24052904 <SAI1_IRQHandler+0x10>)
240528fa:	f00b fc13 	bl	2405e124 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
240528fe:	bf00      	nop
24052900:	bd80      	pop	{r7, pc}
24052902:	bf00      	nop
24052904:	20000424 	.word	0x20000424

24052908 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
24052908:	b580      	push	{r7, lr}
2405290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
2405290c:	4802      	ldr	r0, [pc, #8]	; (24052918 <LTDC_IRQHandler+0x10>)
2405290e:	f005 fb7d 	bl	2405800c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
24052912:	bf00      	nop
24052914:	bd80      	pop	{r7, pc}
24052916:	bf00      	nop
24052918:	200002f8 	.word	0x200002f8

2405291c <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
2405291c:	b580      	push	{r7, lr}
2405291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
24052920:	4802      	ldr	r0, [pc, #8]	; (2405292c <OCTOSPI1_IRQHandler+0x10>)
24052922:	f005 ff4d 	bl	240587c0 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
24052926:	bf00      	nop
24052928:	bd80      	pop	{r7, pc}
2405292a:	bf00      	nop
2405292c:	200003a0 	.word	0x200003a0

24052930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
24052930:	b480      	push	{r7}
24052932:	af00      	add	r7, sp, #0
	return 1;
24052934:	2301      	movs	r3, #1
}
24052936:	4618      	mov	r0, r3
24052938:	46bd      	mov	sp, r7
2405293a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405293e:	4770      	bx	lr

24052940 <_kill>:

int _kill(int pid, int sig)
{
24052940:	b580      	push	{r7, lr}
24052942:	b082      	sub	sp, #8
24052944:	af00      	add	r7, sp, #0
24052946:	6078      	str	r0, [r7, #4]
24052948:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
2405294a:	f00c fdf5 	bl	2405f538 <__errno>
2405294e:	4603      	mov	r3, r0
24052950:	2216      	movs	r2, #22
24052952:	601a      	str	r2, [r3, #0]
	return -1;
24052954:	f04f 33ff 	mov.w	r3, #4294967295
}
24052958:	4618      	mov	r0, r3
2405295a:	3708      	adds	r7, #8
2405295c:	46bd      	mov	sp, r7
2405295e:	bd80      	pop	{r7, pc}

24052960 <_exit>:

void _exit (int status)
{
24052960:	b580      	push	{r7, lr}
24052962:	b082      	sub	sp, #8
24052964:	af00      	add	r7, sp, #0
24052966:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
24052968:	f04f 31ff 	mov.w	r1, #4294967295
2405296c:	6878      	ldr	r0, [r7, #4]
2405296e:	f7ff ffe7 	bl	24052940 <_kill>
	while (1) {}		/* Make sure we hang here */
24052972:	e7fe      	b.n	24052972 <_exit+0x12>

24052974 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
24052974:	b580      	push	{r7, lr}
24052976:	b086      	sub	sp, #24
24052978:	af00      	add	r7, sp, #0
2405297a:	60f8      	str	r0, [r7, #12]
2405297c:	60b9      	str	r1, [r7, #8]
2405297e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
24052980:	2300      	movs	r3, #0
24052982:	617b      	str	r3, [r7, #20]
24052984:	e00a      	b.n	2405299c <_read+0x28>
	{
		*ptr++ = __io_getchar();
24052986:	f3af 8000 	nop.w
2405298a:	4601      	mov	r1, r0
2405298c:	68bb      	ldr	r3, [r7, #8]
2405298e:	1c5a      	adds	r2, r3, #1
24052990:	60ba      	str	r2, [r7, #8]
24052992:	b2ca      	uxtb	r2, r1
24052994:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
24052996:	697b      	ldr	r3, [r7, #20]
24052998:	3301      	adds	r3, #1
2405299a:	617b      	str	r3, [r7, #20]
2405299c:	697a      	ldr	r2, [r7, #20]
2405299e:	687b      	ldr	r3, [r7, #4]
240529a0:	429a      	cmp	r2, r3
240529a2:	dbf0      	blt.n	24052986 <_read+0x12>
	}

return len;
240529a4:	687b      	ldr	r3, [r7, #4]
}
240529a6:	4618      	mov	r0, r3
240529a8:	3718      	adds	r7, #24
240529aa:	46bd      	mov	sp, r7
240529ac:	bd80      	pop	{r7, pc}

240529ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
240529ae:	b580      	push	{r7, lr}
240529b0:	b086      	sub	sp, #24
240529b2:	af00      	add	r7, sp, #0
240529b4:	60f8      	str	r0, [r7, #12]
240529b6:	60b9      	str	r1, [r7, #8]
240529b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
240529ba:	2300      	movs	r3, #0
240529bc:	617b      	str	r3, [r7, #20]
240529be:	e009      	b.n	240529d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
240529c0:	68bb      	ldr	r3, [r7, #8]
240529c2:	1c5a      	adds	r2, r3, #1
240529c4:	60ba      	str	r2, [r7, #8]
240529c6:	781b      	ldrb	r3, [r3, #0]
240529c8:	4618      	mov	r0, r3
240529ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
240529ce:	697b      	ldr	r3, [r7, #20]
240529d0:	3301      	adds	r3, #1
240529d2:	617b      	str	r3, [r7, #20]
240529d4:	697a      	ldr	r2, [r7, #20]
240529d6:	687b      	ldr	r3, [r7, #4]
240529d8:	429a      	cmp	r2, r3
240529da:	dbf1      	blt.n	240529c0 <_write+0x12>
	}
	return len;
240529dc:	687b      	ldr	r3, [r7, #4]
}
240529de:	4618      	mov	r0, r3
240529e0:	3718      	adds	r7, #24
240529e2:	46bd      	mov	sp, r7
240529e4:	bd80      	pop	{r7, pc}

240529e6 <_close>:

int _close(int file)
{
240529e6:	b480      	push	{r7}
240529e8:	b083      	sub	sp, #12
240529ea:	af00      	add	r7, sp, #0
240529ec:	6078      	str	r0, [r7, #4]
	return -1;
240529ee:	f04f 33ff 	mov.w	r3, #4294967295
}
240529f2:	4618      	mov	r0, r3
240529f4:	370c      	adds	r7, #12
240529f6:	46bd      	mov	sp, r7
240529f8:	f85d 7b04 	ldr.w	r7, [sp], #4
240529fc:	4770      	bx	lr

240529fe <_fstat>:


int _fstat(int file, struct stat *st)
{
240529fe:	b480      	push	{r7}
24052a00:	b083      	sub	sp, #12
24052a02:	af00      	add	r7, sp, #0
24052a04:	6078      	str	r0, [r7, #4]
24052a06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
24052a08:	683b      	ldr	r3, [r7, #0]
24052a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
24052a0e:	605a      	str	r2, [r3, #4]
	return 0;
24052a10:	2300      	movs	r3, #0
}
24052a12:	4618      	mov	r0, r3
24052a14:	370c      	adds	r7, #12
24052a16:	46bd      	mov	sp, r7
24052a18:	f85d 7b04 	ldr.w	r7, [sp], #4
24052a1c:	4770      	bx	lr

24052a1e <_isatty>:

int _isatty(int file)
{
24052a1e:	b480      	push	{r7}
24052a20:	b083      	sub	sp, #12
24052a22:	af00      	add	r7, sp, #0
24052a24:	6078      	str	r0, [r7, #4]
	return 1;
24052a26:	2301      	movs	r3, #1
}
24052a28:	4618      	mov	r0, r3
24052a2a:	370c      	adds	r7, #12
24052a2c:	46bd      	mov	sp, r7
24052a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
24052a32:	4770      	bx	lr

24052a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
24052a34:	b480      	push	{r7}
24052a36:	b085      	sub	sp, #20
24052a38:	af00      	add	r7, sp, #0
24052a3a:	60f8      	str	r0, [r7, #12]
24052a3c:	60b9      	str	r1, [r7, #8]
24052a3e:	607a      	str	r2, [r7, #4]
	return 0;
24052a40:	2300      	movs	r3, #0
}
24052a42:	4618      	mov	r0, r3
24052a44:	3714      	adds	r7, #20
24052a46:	46bd      	mov	sp, r7
24052a48:	f85d 7b04 	ldr.w	r7, [sp], #4
24052a4c:	4770      	bx	lr
	...

24052a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
24052a50:	b580      	push	{r7, lr}
24052a52:	b086      	sub	sp, #24
24052a54:	af00      	add	r7, sp, #0
24052a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
24052a58:	4a14      	ldr	r2, [pc, #80]	; (24052aac <_sbrk+0x5c>)
24052a5a:	4b15      	ldr	r3, [pc, #84]	; (24052ab0 <_sbrk+0x60>)
24052a5c:	1ad3      	subs	r3, r2, r3
24052a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
24052a60:	697b      	ldr	r3, [r7, #20]
24052a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
24052a64:	4b13      	ldr	r3, [pc, #76]	; (24052ab4 <_sbrk+0x64>)
24052a66:	681b      	ldr	r3, [r3, #0]
24052a68:	2b00      	cmp	r3, #0
24052a6a:	d102      	bne.n	24052a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
24052a6c:	4b11      	ldr	r3, [pc, #68]	; (24052ab4 <_sbrk+0x64>)
24052a6e:	4a12      	ldr	r2, [pc, #72]	; (24052ab8 <_sbrk+0x68>)
24052a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
24052a72:	4b10      	ldr	r3, [pc, #64]	; (24052ab4 <_sbrk+0x64>)
24052a74:	681a      	ldr	r2, [r3, #0]
24052a76:	687b      	ldr	r3, [r7, #4]
24052a78:	4413      	add	r3, r2
24052a7a:	693a      	ldr	r2, [r7, #16]
24052a7c:	429a      	cmp	r2, r3
24052a7e:	d207      	bcs.n	24052a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
24052a80:	f00c fd5a 	bl	2405f538 <__errno>
24052a84:	4603      	mov	r3, r0
24052a86:	220c      	movs	r2, #12
24052a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
24052a8a:	f04f 33ff 	mov.w	r3, #4294967295
24052a8e:	e009      	b.n	24052aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
24052a90:	4b08      	ldr	r3, [pc, #32]	; (24052ab4 <_sbrk+0x64>)
24052a92:	681b      	ldr	r3, [r3, #0]
24052a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
24052a96:	4b07      	ldr	r3, [pc, #28]	; (24052ab4 <_sbrk+0x64>)
24052a98:	681a      	ldr	r2, [r3, #0]
24052a9a:	687b      	ldr	r3, [r7, #4]
24052a9c:	4413      	add	r3, r2
24052a9e:	4a05      	ldr	r2, [pc, #20]	; (24052ab4 <_sbrk+0x64>)
24052aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
24052aa2:	68fb      	ldr	r3, [r7, #12]
}
24052aa4:	4618      	mov	r0, r3
24052aa6:	3718      	adds	r7, #24
24052aa8:	46bd      	mov	sp, r7
24052aaa:	bd80      	pop	{r7, pc}
24052aac:	20020000 	.word	0x20020000
24052ab0:	00005000 	.word	0x00005000
24052ab4:	200005c4 	.word	0x200005c4
24052ab8:	20000718 	.word	0x20000718

24052abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
24052abc:	b480      	push	{r7}
24052abe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24052ac0:	4b34      	ldr	r3, [pc, #208]	; (24052b94 <SystemInit+0xd8>)
24052ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24052ac6:	4a33      	ldr	r2, [pc, #204]	; (24052b94 <SystemInit+0xd8>)
24052ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24052acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24052ad0:	4b31      	ldr	r3, [pc, #196]	; (24052b98 <SystemInit+0xdc>)
24052ad2:	681b      	ldr	r3, [r3, #0]
24052ad4:	f003 030f 	and.w	r3, r3, #15
24052ad8:	2b02      	cmp	r3, #2
24052ada:	d807      	bhi.n	24052aec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24052adc:	4b2e      	ldr	r3, [pc, #184]	; (24052b98 <SystemInit+0xdc>)
24052ade:	681b      	ldr	r3, [r3, #0]
24052ae0:	f023 030f 	bic.w	r3, r3, #15
24052ae4:	4a2c      	ldr	r2, [pc, #176]	; (24052b98 <SystemInit+0xdc>)
24052ae6:	f043 0303 	orr.w	r3, r3, #3
24052aea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24052aec:	4b2b      	ldr	r3, [pc, #172]	; (24052b9c <SystemInit+0xe0>)
24052aee:	681b      	ldr	r3, [r3, #0]
24052af0:	4a2a      	ldr	r2, [pc, #168]	; (24052b9c <SystemInit+0xe0>)
24052af2:	f043 0301 	orr.w	r3, r3, #1
24052af6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24052af8:	4b28      	ldr	r3, [pc, #160]	; (24052b9c <SystemInit+0xe0>)
24052afa:	2200      	movs	r2, #0
24052afc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24052afe:	4b27      	ldr	r3, [pc, #156]	; (24052b9c <SystemInit+0xe0>)
24052b00:	681a      	ldr	r2, [r3, #0]
24052b02:	4926      	ldr	r1, [pc, #152]	; (24052b9c <SystemInit+0xe0>)
24052b04:	4b26      	ldr	r3, [pc, #152]	; (24052ba0 <SystemInit+0xe4>)
24052b06:	4013      	ands	r3, r2
24052b08:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24052b0a:	4b23      	ldr	r3, [pc, #140]	; (24052b98 <SystemInit+0xdc>)
24052b0c:	681b      	ldr	r3, [r3, #0]
24052b0e:	f003 030c 	and.w	r3, r3, #12
24052b12:	2b00      	cmp	r3, #0
24052b14:	d007      	beq.n	24052b26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24052b16:	4b20      	ldr	r3, [pc, #128]	; (24052b98 <SystemInit+0xdc>)
24052b18:	681b      	ldr	r3, [r3, #0]
24052b1a:	f023 030f 	bic.w	r3, r3, #15
24052b1e:	4a1e      	ldr	r2, [pc, #120]	; (24052b98 <SystemInit+0xdc>)
24052b20:	f043 0303 	orr.w	r3, r3, #3
24052b24:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
24052b26:	4b1d      	ldr	r3, [pc, #116]	; (24052b9c <SystemInit+0xe0>)
24052b28:	2200      	movs	r2, #0
24052b2a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
24052b2c:	4b1b      	ldr	r3, [pc, #108]	; (24052b9c <SystemInit+0xe0>)
24052b2e:	2200      	movs	r2, #0
24052b30:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
24052b32:	4b1a      	ldr	r3, [pc, #104]	; (24052b9c <SystemInit+0xe0>)
24052b34:	2200      	movs	r2, #0
24052b36:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
24052b38:	4b18      	ldr	r3, [pc, #96]	; (24052b9c <SystemInit+0xe0>)
24052b3a:	4a1a      	ldr	r2, [pc, #104]	; (24052ba4 <SystemInit+0xe8>)
24052b3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
24052b3e:	4b17      	ldr	r3, [pc, #92]	; (24052b9c <SystemInit+0xe0>)
24052b40:	4a19      	ldr	r2, [pc, #100]	; (24052ba8 <SystemInit+0xec>)
24052b42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24052b44:	4b15      	ldr	r3, [pc, #84]	; (24052b9c <SystemInit+0xe0>)
24052b46:	4a19      	ldr	r2, [pc, #100]	; (24052bac <SystemInit+0xf0>)
24052b48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24052b4a:	4b14      	ldr	r3, [pc, #80]	; (24052b9c <SystemInit+0xe0>)
24052b4c:	2200      	movs	r2, #0
24052b4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24052b50:	4b12      	ldr	r3, [pc, #72]	; (24052b9c <SystemInit+0xe0>)
24052b52:	4a16      	ldr	r2, [pc, #88]	; (24052bac <SystemInit+0xf0>)
24052b54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24052b56:	4b11      	ldr	r3, [pc, #68]	; (24052b9c <SystemInit+0xe0>)
24052b58:	2200      	movs	r2, #0
24052b5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24052b5c:	4b0f      	ldr	r3, [pc, #60]	; (24052b9c <SystemInit+0xe0>)
24052b5e:	4a13      	ldr	r2, [pc, #76]	; (24052bac <SystemInit+0xf0>)
24052b60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24052b62:	4b0e      	ldr	r3, [pc, #56]	; (24052b9c <SystemInit+0xe0>)
24052b64:	2200      	movs	r2, #0
24052b66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24052b68:	4b0c      	ldr	r3, [pc, #48]	; (24052b9c <SystemInit+0xe0>)
24052b6a:	681b      	ldr	r3, [r3, #0]
24052b6c:	4a0b      	ldr	r2, [pc, #44]	; (24052b9c <SystemInit+0xe0>)
24052b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24052b72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
24052b74:	4b09      	ldr	r3, [pc, #36]	; (24052b9c <SystemInit+0xe0>)
24052b76:	2200      	movs	r2, #0
24052b78:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24052b7a:	4b0d      	ldr	r3, [pc, #52]	; (24052bb0 <SystemInit+0xf4>)
24052b7c:	f243 02d2 	movw	r2, #12498	; 0x30d2
24052b80:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
24052b82:	4b04      	ldr	r3, [pc, #16]	; (24052b94 <SystemInit+0xd8>)
24052b84:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
24052b88:	609a      	str	r2, [r3, #8]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
24052b8a:	bf00      	nop
24052b8c:	46bd      	mov	sp, r7
24052b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
24052b92:	4770      	bx	lr
24052b94:	e000ed00 	.word	0xe000ed00
24052b98:	52002000 	.word	0x52002000
24052b9c:	58024400 	.word	0x58024400
24052ba0:	eaf6ed7f 	.word	0xeaf6ed7f
24052ba4:	02020200 	.word	0x02020200
24052ba8:	01ff0000 	.word	0x01ff0000
24052bac:	01010280 	.word	0x01010280
24052bb0:	52004000 	.word	0x52004000

24052bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
24052bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 24052bec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
24052bb8:	f7ff ff80 	bl	24052abc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
24052bbc:	480c      	ldr	r0, [pc, #48]	; (24052bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
24052bbe:	490d      	ldr	r1, [pc, #52]	; (24052bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
24052bc0:	4a0d      	ldr	r2, [pc, #52]	; (24052bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
24052bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
24052bc4:	e002      	b.n	24052bcc <LoopCopyDataInit>

24052bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
24052bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
24052bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
24052bca:	3304      	adds	r3, #4

24052bcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
24052bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
24052bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
24052bd0:	d3f9      	bcc.n	24052bc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
24052bd2:	4a0a      	ldr	r2, [pc, #40]	; (24052bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
24052bd4:	4c0a      	ldr	r4, [pc, #40]	; (24052c00 <LoopFillZerobss+0x22>)
  movs r3, #0
24052bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
24052bd8:	e001      	b.n	24052bde <LoopFillZerobss>

24052bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
24052bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
24052bdc:	3204      	adds	r2, #4

24052bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
24052bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
24052be0:	d3fb      	bcc.n	24052bda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
24052be2:	f00c fcaf 	bl	2405f544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
24052be6:	f7fe fc89 	bl	240514fc <main>
  bx  lr
24052bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
24052bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
24052bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
24052bf4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
24052bf8:	240616f0 	.word	0x240616f0
  ldr r2, =_sbss
24052bfc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
24052c00:	20000718 	.word	0x20000718

24052c04 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
24052c04:	e7fe      	b.n	24052c04 <BDMA1_IRQHandler>
	...

24052c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24052c08:	b580      	push	{r7, lr}
24052c0a:	b082      	sub	sp, #8
24052c0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24052c0e:	2003      	movs	r0, #3
24052c10:	f001 fde2 	bl	240547d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
24052c14:	f007 fe14 	bl	2405a840 <HAL_RCC_GetSysClockFreq>
24052c18:	4602      	mov	r2, r0
24052c1a:	4b15      	ldr	r3, [pc, #84]	; (24052c70 <HAL_Init+0x68>)
24052c1c:	699b      	ldr	r3, [r3, #24]
24052c1e:	0a1b      	lsrs	r3, r3, #8
24052c20:	f003 030f 	and.w	r3, r3, #15
24052c24:	4913      	ldr	r1, [pc, #76]	; (24052c74 <HAL_Init+0x6c>)
24052c26:	5ccb      	ldrb	r3, [r1, r3]
24052c28:	f003 031f 	and.w	r3, r3, #31
24052c2c:	fa22 f303 	lsr.w	r3, r2, r3
24052c30:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
24052c32:	4b0f      	ldr	r3, [pc, #60]	; (24052c70 <HAL_Init+0x68>)
24052c34:	699b      	ldr	r3, [r3, #24]
24052c36:	f003 030f 	and.w	r3, r3, #15
24052c3a:	4a0e      	ldr	r2, [pc, #56]	; (24052c74 <HAL_Init+0x6c>)
24052c3c:	5cd3      	ldrb	r3, [r2, r3]
24052c3e:	f003 031f 	and.w	r3, r3, #31
24052c42:	687a      	ldr	r2, [r7, #4]
24052c44:	fa22 f303 	lsr.w	r3, r2, r3
24052c48:	4a0b      	ldr	r2, [pc, #44]	; (24052c78 <HAL_Init+0x70>)
24052c4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24052c4c:	4a0b      	ldr	r2, [pc, #44]	; (24052c7c <HAL_Init+0x74>)
24052c4e:	687b      	ldr	r3, [r7, #4]
24052c50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24052c52:	2000      	movs	r0, #0
24052c54:	f000 f814 	bl	24052c80 <HAL_InitTick>
24052c58:	4603      	mov	r3, r0
24052c5a:	2b00      	cmp	r3, #0
24052c5c:	d001      	beq.n	24052c62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
24052c5e:	2301      	movs	r3, #1
24052c60:	e002      	b.n	24052c68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
24052c62:	f7ff f94b 	bl	24051efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
24052c66:	2300      	movs	r3, #0
}
24052c68:	4618      	mov	r0, r3
24052c6a:	3708      	adds	r7, #8
24052c6c:	46bd      	mov	sp, r7
24052c6e:	bd80      	pop	{r7, pc}
24052c70:	58024400 	.word	0x58024400
24052c74:	240615f0 	.word	0x240615f0
24052c78:	20000034 	.word	0x20000034
24052c7c:	20000030 	.word	0x20000030

24052c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
24052c80:	b580      	push	{r7, lr}
24052c82:	b082      	sub	sp, #8
24052c84:	af00      	add	r7, sp, #0
24052c86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24052c88:	4b15      	ldr	r3, [pc, #84]	; (24052ce0 <HAL_InitTick+0x60>)
24052c8a:	781b      	ldrb	r3, [r3, #0]
24052c8c:	2b00      	cmp	r3, #0
24052c8e:	d101      	bne.n	24052c94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
24052c90:	2301      	movs	r3, #1
24052c92:	e021      	b.n	24052cd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24052c94:	4b13      	ldr	r3, [pc, #76]	; (24052ce4 <HAL_InitTick+0x64>)
24052c96:	681a      	ldr	r2, [r3, #0]
24052c98:	4b11      	ldr	r3, [pc, #68]	; (24052ce0 <HAL_InitTick+0x60>)
24052c9a:	781b      	ldrb	r3, [r3, #0]
24052c9c:	4619      	mov	r1, r3
24052c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
24052ca2:	fbb3 f3f1 	udiv	r3, r3, r1
24052ca6:	fbb2 f3f3 	udiv	r3, r2, r3
24052caa:	4618      	mov	r0, r3
24052cac:	f001 fdcb 	bl	24054846 <HAL_SYSTICK_Config>
24052cb0:	4603      	mov	r3, r0
24052cb2:	2b00      	cmp	r3, #0
24052cb4:	d001      	beq.n	24052cba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
24052cb6:	2301      	movs	r3, #1
24052cb8:	e00e      	b.n	24052cd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24052cba:	687b      	ldr	r3, [r7, #4]
24052cbc:	2b0f      	cmp	r3, #15
24052cbe:	d80a      	bhi.n	24052cd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24052cc0:	2200      	movs	r2, #0
24052cc2:	6879      	ldr	r1, [r7, #4]
24052cc4:	f04f 30ff 	mov.w	r0, #4294967295
24052cc8:	f001 fd91 	bl	240547ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24052ccc:	4a06      	ldr	r2, [pc, #24]	; (24052ce8 <HAL_InitTick+0x68>)
24052cce:	687b      	ldr	r3, [r7, #4]
24052cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
24052cd2:	2300      	movs	r3, #0
24052cd4:	e000      	b.n	24052cd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
24052cd6:	2301      	movs	r3, #1
}
24052cd8:	4618      	mov	r0, r3
24052cda:	3708      	adds	r7, #8
24052cdc:	46bd      	mov	sp, r7
24052cde:	bd80      	pop	{r7, pc}
24052ce0:	2000003c 	.word	0x2000003c
24052ce4:	20000030 	.word	0x20000030
24052ce8:	20000038 	.word	0x20000038

24052cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
24052cec:	b480      	push	{r7}
24052cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
24052cf0:	4b06      	ldr	r3, [pc, #24]	; (24052d0c <HAL_IncTick+0x20>)
24052cf2:	781b      	ldrb	r3, [r3, #0]
24052cf4:	461a      	mov	r2, r3
24052cf6:	4b06      	ldr	r3, [pc, #24]	; (24052d10 <HAL_IncTick+0x24>)
24052cf8:	681b      	ldr	r3, [r3, #0]
24052cfa:	4413      	add	r3, r2
24052cfc:	4a04      	ldr	r2, [pc, #16]	; (24052d10 <HAL_IncTick+0x24>)
24052cfe:	6013      	str	r3, [r2, #0]
}
24052d00:	bf00      	nop
24052d02:	46bd      	mov	sp, r7
24052d04:	f85d 7b04 	ldr.w	r7, [sp], #4
24052d08:	4770      	bx	lr
24052d0a:	bf00      	nop
24052d0c:	2000003c 	.word	0x2000003c
24052d10:	200005c8 	.word	0x200005c8

24052d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
24052d14:	b480      	push	{r7}
24052d16:	af00      	add	r7, sp, #0
  return uwTick;
24052d18:	4b03      	ldr	r3, [pc, #12]	; (24052d28 <HAL_GetTick+0x14>)
24052d1a:	681b      	ldr	r3, [r3, #0]
}
24052d1c:	4618      	mov	r0, r3
24052d1e:	46bd      	mov	sp, r7
24052d20:	f85d 7b04 	ldr.w	r7, [sp], #4
24052d24:	4770      	bx	lr
24052d26:	bf00      	nop
24052d28:	200005c8 	.word	0x200005c8

24052d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24052d2c:	b580      	push	{r7, lr}
24052d2e:	b084      	sub	sp, #16
24052d30:	af00      	add	r7, sp, #0
24052d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
24052d34:	f7ff ffee 	bl	24052d14 <HAL_GetTick>
24052d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
24052d3a:	687b      	ldr	r3, [r7, #4]
24052d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24052d3e:	68fb      	ldr	r3, [r7, #12]
24052d40:	f1b3 3fff 	cmp.w	r3, #4294967295
24052d44:	d005      	beq.n	24052d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
24052d46:	4b0a      	ldr	r3, [pc, #40]	; (24052d70 <HAL_Delay+0x44>)
24052d48:	781b      	ldrb	r3, [r3, #0]
24052d4a:	461a      	mov	r2, r3
24052d4c:	68fb      	ldr	r3, [r7, #12]
24052d4e:	4413      	add	r3, r2
24052d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
24052d52:	bf00      	nop
24052d54:	f7ff ffde 	bl	24052d14 <HAL_GetTick>
24052d58:	4602      	mov	r2, r0
24052d5a:	68bb      	ldr	r3, [r7, #8]
24052d5c:	1ad3      	subs	r3, r2, r3
24052d5e:	68fa      	ldr	r2, [r7, #12]
24052d60:	429a      	cmp	r2, r3
24052d62:	d8f7      	bhi.n	24052d54 <HAL_Delay+0x28>
  {
  }
}
24052d64:	bf00      	nop
24052d66:	bf00      	nop
24052d68:	3710      	adds	r7, #16
24052d6a:	46bd      	mov	sp, r7
24052d6c:	bd80      	pop	{r7, pc}
24052d6e:	bf00      	nop
24052d70:	2000003c 	.word	0x2000003c

24052d74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
24052d74:	b480      	push	{r7}
24052d76:	b083      	sub	sp, #12
24052d78:	af00      	add	r7, sp, #0
24052d7a:	6078      	str	r0, [r7, #4]
24052d7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
24052d7e:	687b      	ldr	r3, [r7, #4]
24052d80:	689b      	ldr	r3, [r3, #8]
24052d82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
24052d86:	683b      	ldr	r3, [r7, #0]
24052d88:	431a      	orrs	r2, r3
24052d8a:	687b      	ldr	r3, [r7, #4]
24052d8c:	609a      	str	r2, [r3, #8]
}
24052d8e:	bf00      	nop
24052d90:	370c      	adds	r7, #12
24052d92:	46bd      	mov	sp, r7
24052d94:	f85d 7b04 	ldr.w	r7, [sp], #4
24052d98:	4770      	bx	lr

24052d9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
24052d9a:	b480      	push	{r7}
24052d9c:	b083      	sub	sp, #12
24052d9e:	af00      	add	r7, sp, #0
24052da0:	6078      	str	r0, [r7, #4]
24052da2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
24052da4:	687b      	ldr	r3, [r7, #4]
24052da6:	689b      	ldr	r3, [r3, #8]
24052da8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
24052dac:	683b      	ldr	r3, [r7, #0]
24052dae:	431a      	orrs	r2, r3
24052db0:	687b      	ldr	r3, [r7, #4]
24052db2:	609a      	str	r2, [r3, #8]
}
24052db4:	bf00      	nop
24052db6:	370c      	adds	r7, #12
24052db8:	46bd      	mov	sp, r7
24052dba:	f85d 7b04 	ldr.w	r7, [sp], #4
24052dbe:	4770      	bx	lr

24052dc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
24052dc0:	b480      	push	{r7}
24052dc2:	b083      	sub	sp, #12
24052dc4:	af00      	add	r7, sp, #0
24052dc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
24052dc8:	687b      	ldr	r3, [r7, #4]
24052dca:	689b      	ldr	r3, [r3, #8]
24052dcc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
24052dd0:	4618      	mov	r0, r3
24052dd2:	370c      	adds	r7, #12
24052dd4:	46bd      	mov	sp, r7
24052dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
24052dda:	4770      	bx	lr

24052ddc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
24052ddc:	b480      	push	{r7}
24052dde:	b087      	sub	sp, #28
24052de0:	af00      	add	r7, sp, #0
24052de2:	60f8      	str	r0, [r7, #12]
24052de4:	60b9      	str	r1, [r7, #8]
24052de6:	607a      	str	r2, [r7, #4]
24052de8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
24052dea:	68fb      	ldr	r3, [r7, #12]
24052dec:	3360      	adds	r3, #96	; 0x60
24052dee:	461a      	mov	r2, r3
24052df0:	68bb      	ldr	r3, [r7, #8]
24052df2:	009b      	lsls	r3, r3, #2
24052df4:	4413      	add	r3, r2
24052df6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
24052df8:	697b      	ldr	r3, [r7, #20]
24052dfa:	681b      	ldr	r3, [r3, #0]
24052dfc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
24052e00:	687b      	ldr	r3, [r7, #4]
24052e02:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
24052e06:	683b      	ldr	r3, [r7, #0]
24052e08:	430b      	orrs	r3, r1
24052e0a:	431a      	orrs	r2, r3
24052e0c:	697b      	ldr	r3, [r7, #20]
24052e0e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
24052e10:	bf00      	nop
24052e12:	371c      	adds	r7, #28
24052e14:	46bd      	mov	sp, r7
24052e16:	f85d 7b04 	ldr.w	r7, [sp], #4
24052e1a:	4770      	bx	lr

24052e1c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
24052e1c:	b480      	push	{r7}
24052e1e:	b085      	sub	sp, #20
24052e20:	af00      	add	r7, sp, #0
24052e22:	60f8      	str	r0, [r7, #12]
24052e24:	60b9      	str	r1, [r7, #8]
24052e26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
24052e28:	68fb      	ldr	r3, [r7, #12]
24052e2a:	691b      	ldr	r3, [r3, #16]
24052e2c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
24052e30:	68bb      	ldr	r3, [r7, #8]
24052e32:	f003 031f 	and.w	r3, r3, #31
24052e36:	6879      	ldr	r1, [r7, #4]
24052e38:	fa01 f303 	lsl.w	r3, r1, r3
24052e3c:	431a      	orrs	r2, r3
24052e3e:	68fb      	ldr	r3, [r7, #12]
24052e40:	611a      	str	r2, [r3, #16]
}
24052e42:	bf00      	nop
24052e44:	3714      	adds	r7, #20
24052e46:	46bd      	mov	sp, r7
24052e48:	f85d 7b04 	ldr.w	r7, [sp], #4
24052e4c:	4770      	bx	lr

24052e4e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
24052e4e:	b480      	push	{r7}
24052e50:	b087      	sub	sp, #28
24052e52:	af00      	add	r7, sp, #0
24052e54:	60f8      	str	r0, [r7, #12]
24052e56:	60b9      	str	r1, [r7, #8]
24052e58:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
24052e5a:	68fb      	ldr	r3, [r7, #12]
24052e5c:	3360      	adds	r3, #96	; 0x60
24052e5e:	461a      	mov	r2, r3
24052e60:	68bb      	ldr	r3, [r7, #8]
24052e62:	009b      	lsls	r3, r3, #2
24052e64:	4413      	add	r3, r2
24052e66:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
24052e68:	697b      	ldr	r3, [r7, #20]
24052e6a:	681b      	ldr	r3, [r3, #0]
24052e6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24052e70:	687b      	ldr	r3, [r7, #4]
24052e72:	431a      	orrs	r2, r3
24052e74:	697b      	ldr	r3, [r7, #20]
24052e76:	601a      	str	r2, [r3, #0]
  }
}
24052e78:	bf00      	nop
24052e7a:	371c      	adds	r7, #28
24052e7c:	46bd      	mov	sp, r7
24052e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
24052e82:	4770      	bx	lr

24052e84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
24052e84:	b480      	push	{r7}
24052e86:	b083      	sub	sp, #12
24052e88:	af00      	add	r7, sp, #0
24052e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
24052e8c:	687b      	ldr	r3, [r7, #4]
24052e8e:	68db      	ldr	r3, [r3, #12]
24052e90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
24052e94:	2b00      	cmp	r3, #0
24052e96:	d101      	bne.n	24052e9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
24052e98:	2301      	movs	r3, #1
24052e9a:	e000      	b.n	24052e9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
24052e9c:	2300      	movs	r3, #0
}
24052e9e:	4618      	mov	r0, r3
24052ea0:	370c      	adds	r7, #12
24052ea2:	46bd      	mov	sp, r7
24052ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
24052ea8:	4770      	bx	lr

24052eaa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
24052eaa:	b480      	push	{r7}
24052eac:	b087      	sub	sp, #28
24052eae:	af00      	add	r7, sp, #0
24052eb0:	60f8      	str	r0, [r7, #12]
24052eb2:	60b9      	str	r1, [r7, #8]
24052eb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
24052eb6:	68fb      	ldr	r3, [r7, #12]
24052eb8:	3330      	adds	r3, #48	; 0x30
24052eba:	461a      	mov	r2, r3
24052ebc:	68bb      	ldr	r3, [r7, #8]
24052ebe:	0a1b      	lsrs	r3, r3, #8
24052ec0:	009b      	lsls	r3, r3, #2
24052ec2:	f003 030c 	and.w	r3, r3, #12
24052ec6:	4413      	add	r3, r2
24052ec8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
24052eca:	697b      	ldr	r3, [r7, #20]
24052ecc:	681a      	ldr	r2, [r3, #0]
24052ece:	68bb      	ldr	r3, [r7, #8]
24052ed0:	f003 031f 	and.w	r3, r3, #31
24052ed4:	211f      	movs	r1, #31
24052ed6:	fa01 f303 	lsl.w	r3, r1, r3
24052eda:	43db      	mvns	r3, r3
24052edc:	401a      	ands	r2, r3
24052ede:	687b      	ldr	r3, [r7, #4]
24052ee0:	0e9b      	lsrs	r3, r3, #26
24052ee2:	f003 011f 	and.w	r1, r3, #31
24052ee6:	68bb      	ldr	r3, [r7, #8]
24052ee8:	f003 031f 	and.w	r3, r3, #31
24052eec:	fa01 f303 	lsl.w	r3, r1, r3
24052ef0:	431a      	orrs	r2, r3
24052ef2:	697b      	ldr	r3, [r7, #20]
24052ef4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
24052ef6:	bf00      	nop
24052ef8:	371c      	adds	r7, #28
24052efa:	46bd      	mov	sp, r7
24052efc:	f85d 7b04 	ldr.w	r7, [sp], #4
24052f00:	4770      	bx	lr

24052f02 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
24052f02:	b480      	push	{r7}
24052f04:	b083      	sub	sp, #12
24052f06:	af00      	add	r7, sp, #0
24052f08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
24052f0a:	687b      	ldr	r3, [r7, #4]
24052f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24052f0e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
24052f12:	2b00      	cmp	r3, #0
24052f14:	d101      	bne.n	24052f1a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
24052f16:	2301      	movs	r3, #1
24052f18:	e000      	b.n	24052f1c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
24052f1a:	2300      	movs	r3, #0
}
24052f1c:	4618      	mov	r0, r3
24052f1e:	370c      	adds	r7, #12
24052f20:	46bd      	mov	sp, r7
24052f22:	f85d 7b04 	ldr.w	r7, [sp], #4
24052f26:	4770      	bx	lr

24052f28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
24052f28:	b480      	push	{r7}
24052f2a:	b087      	sub	sp, #28
24052f2c:	af00      	add	r7, sp, #0
24052f2e:	60f8      	str	r0, [r7, #12]
24052f30:	60b9      	str	r1, [r7, #8]
24052f32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
24052f34:	68fb      	ldr	r3, [r7, #12]
24052f36:	3314      	adds	r3, #20
24052f38:	461a      	mov	r2, r3
24052f3a:	68bb      	ldr	r3, [r7, #8]
24052f3c:	0e5b      	lsrs	r3, r3, #25
24052f3e:	009b      	lsls	r3, r3, #2
24052f40:	f003 0304 	and.w	r3, r3, #4
24052f44:	4413      	add	r3, r2
24052f46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
24052f48:	697b      	ldr	r3, [r7, #20]
24052f4a:	681a      	ldr	r2, [r3, #0]
24052f4c:	68bb      	ldr	r3, [r7, #8]
24052f4e:	0d1b      	lsrs	r3, r3, #20
24052f50:	f003 031f 	and.w	r3, r3, #31
24052f54:	2107      	movs	r1, #7
24052f56:	fa01 f303 	lsl.w	r3, r1, r3
24052f5a:	43db      	mvns	r3, r3
24052f5c:	401a      	ands	r2, r3
24052f5e:	68bb      	ldr	r3, [r7, #8]
24052f60:	0d1b      	lsrs	r3, r3, #20
24052f62:	f003 031f 	and.w	r3, r3, #31
24052f66:	6879      	ldr	r1, [r7, #4]
24052f68:	fa01 f303 	lsl.w	r3, r1, r3
24052f6c:	431a      	orrs	r2, r3
24052f6e:	697b      	ldr	r3, [r7, #20]
24052f70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
24052f72:	bf00      	nop
24052f74:	371c      	adds	r7, #28
24052f76:	46bd      	mov	sp, r7
24052f78:	f85d 7b04 	ldr.w	r7, [sp], #4
24052f7c:	4770      	bx	lr
	...

24052f80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
24052f80:	b480      	push	{r7}
24052f82:	b085      	sub	sp, #20
24052f84:	af00      	add	r7, sp, #0
24052f86:	60f8      	str	r0, [r7, #12]
24052f88:	60b9      	str	r1, [r7, #8]
24052f8a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
24052f8c:	68fb      	ldr	r3, [r7, #12]
24052f8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
24052f92:	68bb      	ldr	r3, [r7, #8]
24052f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
24052f98:	43db      	mvns	r3, r3
24052f9a:	401a      	ands	r2, r3
24052f9c:	687b      	ldr	r3, [r7, #4]
24052f9e:	f003 0318 	and.w	r3, r3, #24
24052fa2:	4908      	ldr	r1, [pc, #32]	; (24052fc4 <LL_ADC_SetChannelSingleDiff+0x44>)
24052fa4:	40d9      	lsrs	r1, r3
24052fa6:	68bb      	ldr	r3, [r7, #8]
24052fa8:	400b      	ands	r3, r1
24052faa:	f3c3 0313 	ubfx	r3, r3, #0, #20
24052fae:	431a      	orrs	r2, r3
24052fb0:	68fb      	ldr	r3, [r7, #12]
24052fb2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
24052fb6:	bf00      	nop
24052fb8:	3714      	adds	r7, #20
24052fba:	46bd      	mov	sp, r7
24052fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
24052fc0:	4770      	bx	lr
24052fc2:	bf00      	nop
24052fc4:	000fffff 	.word	0x000fffff

24052fc8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
24052fc8:	b480      	push	{r7}
24052fca:	b083      	sub	sp, #12
24052fcc:	af00      	add	r7, sp, #0
24052fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
24052fd0:	687b      	ldr	r3, [r7, #4]
24052fd2:	689b      	ldr	r3, [r3, #8]
24052fd4:	f003 031f 	and.w	r3, r3, #31
}
24052fd8:	4618      	mov	r0, r3
24052fda:	370c      	adds	r7, #12
24052fdc:	46bd      	mov	sp, r7
24052fde:	f85d 7b04 	ldr.w	r7, [sp], #4
24052fe2:	4770      	bx	lr

24052fe4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
24052fe4:	b480      	push	{r7}
24052fe6:	b083      	sub	sp, #12
24052fe8:	af00      	add	r7, sp, #0
24052fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
24052fec:	687b      	ldr	r3, [r7, #4]
24052fee:	689b      	ldr	r3, [r3, #8]
24052ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
24052ff4:	4618      	mov	r0, r3
24052ff6:	370c      	adds	r7, #12
24052ff8:	46bd      	mov	sp, r7
24052ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
24052ffe:	4770      	bx	lr

24053000 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
24053000:	b480      	push	{r7}
24053002:	b083      	sub	sp, #12
24053004:	af00      	add	r7, sp, #0
24053006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
24053008:	687b      	ldr	r3, [r7, #4]
2405300a:	689a      	ldr	r2, [r3, #8]
2405300c:	4b04      	ldr	r3, [pc, #16]	; (24053020 <LL_ADC_DisableDeepPowerDown+0x20>)
2405300e:	4013      	ands	r3, r2
24053010:	687a      	ldr	r2, [r7, #4]
24053012:	6093      	str	r3, [r2, #8]
}
24053014:	bf00      	nop
24053016:	370c      	adds	r7, #12
24053018:	46bd      	mov	sp, r7
2405301a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405301e:	4770      	bx	lr
24053020:	5fffffc0 	.word	0x5fffffc0

24053024 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
24053024:	b480      	push	{r7}
24053026:	b083      	sub	sp, #12
24053028:	af00      	add	r7, sp, #0
2405302a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
2405302c:	687b      	ldr	r3, [r7, #4]
2405302e:	689b      	ldr	r3, [r3, #8]
24053030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24053034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24053038:	d101      	bne.n	2405303e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
2405303a:	2301      	movs	r3, #1
2405303c:	e000      	b.n	24053040 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
2405303e:	2300      	movs	r3, #0
}
24053040:	4618      	mov	r0, r3
24053042:	370c      	adds	r7, #12
24053044:	46bd      	mov	sp, r7
24053046:	f85d 7b04 	ldr.w	r7, [sp], #4
2405304a:	4770      	bx	lr

2405304c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
2405304c:	b480      	push	{r7}
2405304e:	b083      	sub	sp, #12
24053050:	af00      	add	r7, sp, #0
24053052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24053054:	687b      	ldr	r3, [r7, #4]
24053056:	689a      	ldr	r2, [r3, #8]
24053058:	4b05      	ldr	r3, [pc, #20]	; (24053070 <LL_ADC_EnableInternalRegulator+0x24>)
2405305a:	4013      	ands	r3, r2
2405305c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
24053060:	687b      	ldr	r3, [r7, #4]
24053062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
24053064:	bf00      	nop
24053066:	370c      	adds	r7, #12
24053068:	46bd      	mov	sp, r7
2405306a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405306e:	4770      	bx	lr
24053070:	6fffffc0 	.word	0x6fffffc0

24053074 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
24053074:	b480      	push	{r7}
24053076:	b083      	sub	sp, #12
24053078:	af00      	add	r7, sp, #0
2405307a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
2405307c:	687b      	ldr	r3, [r7, #4]
2405307e:	689b      	ldr	r3, [r3, #8]
24053080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24053084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24053088:	d101      	bne.n	2405308e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
2405308a:	2301      	movs	r3, #1
2405308c:	e000      	b.n	24053090 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
2405308e:	2300      	movs	r3, #0
}
24053090:	4618      	mov	r0, r3
24053092:	370c      	adds	r7, #12
24053094:	46bd      	mov	sp, r7
24053096:	f85d 7b04 	ldr.w	r7, [sp], #4
2405309a:	4770      	bx	lr

2405309c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
2405309c:	b480      	push	{r7}
2405309e:	b083      	sub	sp, #12
240530a0:	af00      	add	r7, sp, #0
240530a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
240530a4:	687b      	ldr	r3, [r7, #4]
240530a6:	689a      	ldr	r2, [r3, #8]
240530a8:	4b05      	ldr	r3, [pc, #20]	; (240530c0 <LL_ADC_Enable+0x24>)
240530aa:	4013      	ands	r3, r2
240530ac:	f043 0201 	orr.w	r2, r3, #1
240530b0:	687b      	ldr	r3, [r7, #4]
240530b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
240530b4:	bf00      	nop
240530b6:	370c      	adds	r7, #12
240530b8:	46bd      	mov	sp, r7
240530ba:	f85d 7b04 	ldr.w	r7, [sp], #4
240530be:	4770      	bx	lr
240530c0:	7fffffc0 	.word	0x7fffffc0

240530c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
240530c4:	b480      	push	{r7}
240530c6:	b083      	sub	sp, #12
240530c8:	af00      	add	r7, sp, #0
240530ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
240530cc:	687b      	ldr	r3, [r7, #4]
240530ce:	689b      	ldr	r3, [r3, #8]
240530d0:	f003 0301 	and.w	r3, r3, #1
240530d4:	2b01      	cmp	r3, #1
240530d6:	d101      	bne.n	240530dc <LL_ADC_IsEnabled+0x18>
240530d8:	2301      	movs	r3, #1
240530da:	e000      	b.n	240530de <LL_ADC_IsEnabled+0x1a>
240530dc:	2300      	movs	r3, #0
}
240530de:	4618      	mov	r0, r3
240530e0:	370c      	adds	r7, #12
240530e2:	46bd      	mov	sp, r7
240530e4:	f85d 7b04 	ldr.w	r7, [sp], #4
240530e8:	4770      	bx	lr
	...

240530ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
240530ec:	b480      	push	{r7}
240530ee:	b083      	sub	sp, #12
240530f0:	af00      	add	r7, sp, #0
240530f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
240530f4:	687b      	ldr	r3, [r7, #4]
240530f6:	689a      	ldr	r2, [r3, #8]
240530f8:	4b05      	ldr	r3, [pc, #20]	; (24053110 <LL_ADC_REG_StartConversion+0x24>)
240530fa:	4013      	ands	r3, r2
240530fc:	f043 0204 	orr.w	r2, r3, #4
24053100:	687b      	ldr	r3, [r7, #4]
24053102:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
24053104:	bf00      	nop
24053106:	370c      	adds	r7, #12
24053108:	46bd      	mov	sp, r7
2405310a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405310e:	4770      	bx	lr
24053110:	7fffffc0 	.word	0x7fffffc0

24053114 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
24053114:	b480      	push	{r7}
24053116:	b083      	sub	sp, #12
24053118:	af00      	add	r7, sp, #0
2405311a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
2405311c:	687b      	ldr	r3, [r7, #4]
2405311e:	689b      	ldr	r3, [r3, #8]
24053120:	f003 0304 	and.w	r3, r3, #4
24053124:	2b04      	cmp	r3, #4
24053126:	d101      	bne.n	2405312c <LL_ADC_REG_IsConversionOngoing+0x18>
24053128:	2301      	movs	r3, #1
2405312a:	e000      	b.n	2405312e <LL_ADC_REG_IsConversionOngoing+0x1a>
2405312c:	2300      	movs	r3, #0
}
2405312e:	4618      	mov	r0, r3
24053130:	370c      	adds	r7, #12
24053132:	46bd      	mov	sp, r7
24053134:	f85d 7b04 	ldr.w	r7, [sp], #4
24053138:	4770      	bx	lr

2405313a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
2405313a:	b480      	push	{r7}
2405313c:	b083      	sub	sp, #12
2405313e:	af00      	add	r7, sp, #0
24053140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
24053142:	687b      	ldr	r3, [r7, #4]
24053144:	689b      	ldr	r3, [r3, #8]
24053146:	f003 0308 	and.w	r3, r3, #8
2405314a:	2b08      	cmp	r3, #8
2405314c:	d101      	bne.n	24053152 <LL_ADC_INJ_IsConversionOngoing+0x18>
2405314e:	2301      	movs	r3, #1
24053150:	e000      	b.n	24053154 <LL_ADC_INJ_IsConversionOngoing+0x1a>
24053152:	2300      	movs	r3, #0
}
24053154:	4618      	mov	r0, r3
24053156:	370c      	adds	r7, #12
24053158:	46bd      	mov	sp, r7
2405315a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405315e:	4770      	bx	lr

24053160 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
24053160:	b590      	push	{r4, r7, lr}
24053162:	b089      	sub	sp, #36	; 0x24
24053164:	af00      	add	r7, sp, #0
24053166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
24053168:	2300      	movs	r3, #0
2405316a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
2405316c:	2300      	movs	r3, #0
2405316e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
24053170:	687b      	ldr	r3, [r7, #4]
24053172:	2b00      	cmp	r3, #0
24053174:	d101      	bne.n	2405317a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
24053176:	2301      	movs	r3, #1
24053178:	e138      	b.n	240533ec <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
2405317a:	687b      	ldr	r3, [r7, #4]
2405317c:	68db      	ldr	r3, [r3, #12]
2405317e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
24053180:	687b      	ldr	r3, [r7, #4]
24053182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053184:	2b00      	cmp	r3, #0
24053186:	d109      	bne.n	2405319c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
24053188:	6878      	ldr	r0, [r7, #4]
2405318a:	f7fe fed1 	bl	24051f30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
2405318e:	687b      	ldr	r3, [r7, #4]
24053190:	2200      	movs	r2, #0
24053192:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
24053194:	687b      	ldr	r3, [r7, #4]
24053196:	2200      	movs	r2, #0
24053198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
2405319c:	687b      	ldr	r3, [r7, #4]
2405319e:	681b      	ldr	r3, [r3, #0]
240531a0:	4618      	mov	r0, r3
240531a2:	f7ff ff3f 	bl	24053024 <LL_ADC_IsDeepPowerDownEnabled>
240531a6:	4603      	mov	r3, r0
240531a8:	2b00      	cmp	r3, #0
240531aa:	d004      	beq.n	240531b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
240531ac:	687b      	ldr	r3, [r7, #4]
240531ae:	681b      	ldr	r3, [r3, #0]
240531b0:	4618      	mov	r0, r3
240531b2:	f7ff ff25 	bl	24053000 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
240531b6:	687b      	ldr	r3, [r7, #4]
240531b8:	681b      	ldr	r3, [r3, #0]
240531ba:	4618      	mov	r0, r3
240531bc:	f7ff ff5a 	bl	24053074 <LL_ADC_IsInternalRegulatorEnabled>
240531c0:	4603      	mov	r3, r0
240531c2:	2b00      	cmp	r3, #0
240531c4:	d114      	bne.n	240531f0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
240531c6:	687b      	ldr	r3, [r7, #4]
240531c8:	681b      	ldr	r3, [r3, #0]
240531ca:	4618      	mov	r0, r3
240531cc:	f7ff ff3e 	bl	2405304c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
240531d0:	4b88      	ldr	r3, [pc, #544]	; (240533f4 <HAL_ADC_Init+0x294>)
240531d2:	681b      	ldr	r3, [r3, #0]
240531d4:	099b      	lsrs	r3, r3, #6
240531d6:	4a88      	ldr	r2, [pc, #544]	; (240533f8 <HAL_ADC_Init+0x298>)
240531d8:	fba2 2303 	umull	r2, r3, r2, r3
240531dc:	099b      	lsrs	r3, r3, #6
240531de:	3301      	adds	r3, #1
240531e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
240531e2:	e002      	b.n	240531ea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
240531e4:	68bb      	ldr	r3, [r7, #8]
240531e6:	3b01      	subs	r3, #1
240531e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
240531ea:	68bb      	ldr	r3, [r7, #8]
240531ec:	2b00      	cmp	r3, #0
240531ee:	d1f9      	bne.n	240531e4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
240531f0:	687b      	ldr	r3, [r7, #4]
240531f2:	681b      	ldr	r3, [r3, #0]
240531f4:	4618      	mov	r0, r3
240531f6:	f7ff ff3d 	bl	24053074 <LL_ADC_IsInternalRegulatorEnabled>
240531fa:	4603      	mov	r3, r0
240531fc:	2b00      	cmp	r3, #0
240531fe:	d10d      	bne.n	2405321c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24053200:	687b      	ldr	r3, [r7, #4]
24053202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053204:	f043 0210 	orr.w	r2, r3, #16
24053208:	687b      	ldr	r3, [r7, #4]
2405320a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2405320c:	687b      	ldr	r3, [r7, #4]
2405320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24053210:	f043 0201 	orr.w	r2, r3, #1
24053214:	687b      	ldr	r3, [r7, #4]
24053216:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
24053218:	2301      	movs	r3, #1
2405321a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
2405321c:	687b      	ldr	r3, [r7, #4]
2405321e:	681b      	ldr	r3, [r3, #0]
24053220:	4618      	mov	r0, r3
24053222:	f7ff ff77 	bl	24053114 <LL_ADC_REG_IsConversionOngoing>
24053226:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24053228:	687b      	ldr	r3, [r7, #4]
2405322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405322c:	f003 0310 	and.w	r3, r3, #16
24053230:	2b00      	cmp	r3, #0
24053232:	f040 80d2 	bne.w	240533da <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
24053236:	697b      	ldr	r3, [r7, #20]
24053238:	2b00      	cmp	r3, #0
2405323a:	f040 80ce 	bne.w	240533da <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
2405323e:	687b      	ldr	r3, [r7, #4]
24053240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053242:	f423 7381 	bic.w	r3, r3, #258	; 0x102
24053246:	f043 0202 	orr.w	r2, r3, #2
2405324a:	687b      	ldr	r3, [r7, #4]
2405324c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
2405324e:	687b      	ldr	r3, [r7, #4]
24053250:	681b      	ldr	r3, [r3, #0]
24053252:	4618      	mov	r0, r3
24053254:	f7ff ff36 	bl	240530c4 <LL_ADC_IsEnabled>
24053258:	4603      	mov	r3, r0
2405325a:	2b00      	cmp	r3, #0
2405325c:	d110      	bne.n	24053280 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
2405325e:	4867      	ldr	r0, [pc, #412]	; (240533fc <HAL_ADC_Init+0x29c>)
24053260:	f7ff ff30 	bl	240530c4 <LL_ADC_IsEnabled>
24053264:	4604      	mov	r4, r0
24053266:	4866      	ldr	r0, [pc, #408]	; (24053400 <HAL_ADC_Init+0x2a0>)
24053268:	f7ff ff2c 	bl	240530c4 <LL_ADC_IsEnabled>
2405326c:	4603      	mov	r3, r0
2405326e:	4323      	orrs	r3, r4
24053270:	2b00      	cmp	r3, #0
24053272:	d105      	bne.n	24053280 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
24053274:	687b      	ldr	r3, [r7, #4]
24053276:	685b      	ldr	r3, [r3, #4]
24053278:	4619      	mov	r1, r3
2405327a:	4862      	ldr	r0, [pc, #392]	; (24053404 <HAL_ADC_Init+0x2a4>)
2405327c:	f7ff fd7a 	bl	24052d74 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
24053280:	687b      	ldr	r3, [r7, #4]
24053282:	7d5b      	ldrb	r3, [r3, #21]
24053284:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
24053286:	687b      	ldr	r3, [r7, #4]
24053288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
2405328a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
2405328c:	687b      	ldr	r3, [r7, #4]
2405328e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
24053290:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
24053292:	687b      	ldr	r3, [r7, #4]
24053294:	7f1b      	ldrb	r3, [r3, #28]
24053296:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
24053298:	4313      	orrs	r3, r2
2405329a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
2405329c:	687b      	ldr	r3, [r7, #4]
2405329e:	7f1b      	ldrb	r3, [r3, #28]
240532a0:	2b01      	cmp	r3, #1
240532a2:	d106      	bne.n	240532b2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
240532a4:	687b      	ldr	r3, [r7, #4]
240532a6:	6a1b      	ldr	r3, [r3, #32]
240532a8:	3b01      	subs	r3, #1
240532aa:	045b      	lsls	r3, r3, #17
240532ac:	69ba      	ldr	r2, [r7, #24]
240532ae:	4313      	orrs	r3, r2
240532b0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
240532b2:	687b      	ldr	r3, [r7, #4]
240532b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240532b6:	2b00      	cmp	r3, #0
240532b8:	d009      	beq.n	240532ce <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
240532ba:	687b      	ldr	r3, [r7, #4]
240532bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240532be:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
240532c2:	687b      	ldr	r3, [r7, #4]
240532c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240532c6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
240532c8:	69ba      	ldr	r2, [r7, #24]
240532ca:	4313      	orrs	r3, r2
240532cc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
240532ce:	687b      	ldr	r3, [r7, #4]
240532d0:	681b      	ldr	r3, [r3, #0]
240532d2:	68da      	ldr	r2, [r3, #12]
240532d4:	4b4c      	ldr	r3, [pc, #304]	; (24053408 <HAL_ADC_Init+0x2a8>)
240532d6:	4013      	ands	r3, r2
240532d8:	687a      	ldr	r2, [r7, #4]
240532da:	6812      	ldr	r2, [r2, #0]
240532dc:	69b9      	ldr	r1, [r7, #24]
240532de:	430b      	orrs	r3, r1
240532e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
240532e2:	687b      	ldr	r3, [r7, #4]
240532e4:	681b      	ldr	r3, [r3, #0]
240532e6:	4618      	mov	r0, r3
240532e8:	f7ff ff14 	bl	24053114 <LL_ADC_REG_IsConversionOngoing>
240532ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
240532ee:	687b      	ldr	r3, [r7, #4]
240532f0:	681b      	ldr	r3, [r3, #0]
240532f2:	4618      	mov	r0, r3
240532f4:	f7ff ff21 	bl	2405313a <LL_ADC_INJ_IsConversionOngoing>
240532f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
240532fa:	693b      	ldr	r3, [r7, #16]
240532fc:	2b00      	cmp	r3, #0
240532fe:	d14a      	bne.n	24053396 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
24053300:	68fb      	ldr	r3, [r7, #12]
24053302:	2b00      	cmp	r3, #0
24053304:	d147      	bne.n	24053396 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
24053306:	687b      	ldr	r3, [r7, #4]
24053308:	7d1b      	ldrb	r3, [r3, #20]
2405330a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
2405330c:	687b      	ldr	r3, [r7, #4]
2405330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
24053310:	4313      	orrs	r3, r2
24053312:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
24053314:	687b      	ldr	r3, [r7, #4]
24053316:	681b      	ldr	r3, [r3, #0]
24053318:	68da      	ldr	r2, [r3, #12]
2405331a:	4b3c      	ldr	r3, [pc, #240]	; (2405340c <HAL_ADC_Init+0x2ac>)
2405331c:	4013      	ands	r3, r2
2405331e:	687a      	ldr	r2, [r7, #4]
24053320:	6812      	ldr	r2, [r2, #0]
24053322:	69b9      	ldr	r1, [r7, #24]
24053324:	430b      	orrs	r3, r1
24053326:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
24053328:	687b      	ldr	r3, [r7, #4]
2405332a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2405332e:	2b01      	cmp	r3, #1
24053330:	d11b      	bne.n	2405336a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
24053332:	687b      	ldr	r3, [r7, #4]
24053334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24053336:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
24053338:	687b      	ldr	r3, [r7, #4]
2405333a:	681b      	ldr	r3, [r3, #0]
2405333c:	691a      	ldr	r2, [r3, #16]
2405333e:	4b34      	ldr	r3, [pc, #208]	; (24053410 <HAL_ADC_Init+0x2b0>)
24053340:	4013      	ands	r3, r2
24053342:	687a      	ldr	r2, [r7, #4]
24053344:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24053346:	3a01      	subs	r2, #1
24053348:	0411      	lsls	r1, r2, #16
2405334a:	687a      	ldr	r2, [r7, #4]
2405334c:	6c12      	ldr	r2, [r2, #64]	; 0x40
2405334e:	4311      	orrs	r1, r2
24053350:	687a      	ldr	r2, [r7, #4]
24053352:	6c52      	ldr	r2, [r2, #68]	; 0x44
24053354:	4311      	orrs	r1, r2
24053356:	687a      	ldr	r2, [r7, #4]
24053358:	6c92      	ldr	r2, [r2, #72]	; 0x48
2405335a:	430a      	orrs	r2, r1
2405335c:	431a      	orrs	r2, r3
2405335e:	687b      	ldr	r3, [r7, #4]
24053360:	681b      	ldr	r3, [r3, #0]
24053362:	f042 0201 	orr.w	r2, r2, #1
24053366:	611a      	str	r2, [r3, #16]
24053368:	e007      	b.n	2405337a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
2405336a:	687b      	ldr	r3, [r7, #4]
2405336c:	681b      	ldr	r3, [r3, #0]
2405336e:	691a      	ldr	r2, [r3, #16]
24053370:	687b      	ldr	r3, [r7, #4]
24053372:	681b      	ldr	r3, [r3, #0]
24053374:	f022 0201 	bic.w	r2, r2, #1
24053378:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
2405337a:	687b      	ldr	r3, [r7, #4]
2405337c:	681b      	ldr	r3, [r3, #0]
2405337e:	691b      	ldr	r3, [r3, #16]
24053380:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
24053384:	687b      	ldr	r3, [r7, #4]
24053386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24053388:	687b      	ldr	r3, [r7, #4]
2405338a:	681b      	ldr	r3, [r3, #0]
2405338c:	430a      	orrs	r2, r1
2405338e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
24053390:	6878      	ldr	r0, [r7, #4]
24053392:	f000 ff79 	bl	24054288 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
24053396:	687b      	ldr	r3, [r7, #4]
24053398:	68db      	ldr	r3, [r3, #12]
2405339a:	2b01      	cmp	r3, #1
2405339c:	d10c      	bne.n	240533b8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
2405339e:	687b      	ldr	r3, [r7, #4]
240533a0:	681b      	ldr	r3, [r3, #0]
240533a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240533a4:	f023 010f 	bic.w	r1, r3, #15
240533a8:	687b      	ldr	r3, [r7, #4]
240533aa:	699b      	ldr	r3, [r3, #24]
240533ac:	1e5a      	subs	r2, r3, #1
240533ae:	687b      	ldr	r3, [r7, #4]
240533b0:	681b      	ldr	r3, [r3, #0]
240533b2:	430a      	orrs	r2, r1
240533b4:	631a      	str	r2, [r3, #48]	; 0x30
240533b6:	e007      	b.n	240533c8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
240533b8:	687b      	ldr	r3, [r7, #4]
240533ba:	681b      	ldr	r3, [r3, #0]
240533bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
240533be:	687b      	ldr	r3, [r7, #4]
240533c0:	681b      	ldr	r3, [r3, #0]
240533c2:	f022 020f 	bic.w	r2, r2, #15
240533c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
240533c8:	687b      	ldr	r3, [r7, #4]
240533ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240533cc:	f023 0303 	bic.w	r3, r3, #3
240533d0:	f043 0201 	orr.w	r2, r3, #1
240533d4:	687b      	ldr	r3, [r7, #4]
240533d6:	655a      	str	r2, [r3, #84]	; 0x54
240533d8:	e007      	b.n	240533ea <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240533da:	687b      	ldr	r3, [r7, #4]
240533dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240533de:	f043 0210 	orr.w	r2, r3, #16
240533e2:	687b      	ldr	r3, [r7, #4]
240533e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
240533e6:	2301      	movs	r3, #1
240533e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
240533ea:	7ffb      	ldrb	r3, [r7, #31]
}
240533ec:	4618      	mov	r0, r3
240533ee:	3724      	adds	r7, #36	; 0x24
240533f0:	46bd      	mov	sp, r7
240533f2:	bd90      	pop	{r4, r7, pc}
240533f4:	20000030 	.word	0x20000030
240533f8:	053e2d63 	.word	0x053e2d63
240533fc:	40022000 	.word	0x40022000
24053400:	40022100 	.word	0x40022100
24053404:	40022300 	.word	0x40022300
24053408:	fff0c003 	.word	0xfff0c003
2405340c:	ffffbffc 	.word	0xffffbffc
24053410:	fc00f81e 	.word	0xfc00f81e

24053414 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
24053414:	b580      	push	{r7, lr}
24053416:	b086      	sub	sp, #24
24053418:	af00      	add	r7, sp, #0
2405341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
2405341c:	4856      	ldr	r0, [pc, #344]	; (24053578 <HAL_ADC_Start+0x164>)
2405341e:	f7ff fdd3 	bl	24052fc8 <LL_ADC_GetMultimode>
24053422:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24053424:	687b      	ldr	r3, [r7, #4]
24053426:	681b      	ldr	r3, [r3, #0]
24053428:	4618      	mov	r0, r3
2405342a:	f7ff fe73 	bl	24053114 <LL_ADC_REG_IsConversionOngoing>
2405342e:	4603      	mov	r3, r0
24053430:	2b00      	cmp	r3, #0
24053432:	f040 809a 	bne.w	2405356a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
24053436:	687b      	ldr	r3, [r7, #4]
24053438:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
2405343c:	2b01      	cmp	r3, #1
2405343e:	d101      	bne.n	24053444 <HAL_ADC_Start+0x30>
24053440:	2302      	movs	r3, #2
24053442:	e095      	b.n	24053570 <HAL_ADC_Start+0x15c>
24053444:	687b      	ldr	r3, [r7, #4]
24053446:	2201      	movs	r2, #1
24053448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
2405344c:	6878      	ldr	r0, [r7, #4]
2405344e:	f000 fe9f 	bl	24054190 <ADC_Enable>
24053452:	4603      	mov	r3, r0
24053454:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
24053456:	7dfb      	ldrb	r3, [r7, #23]
24053458:	2b00      	cmp	r3, #0
2405345a:	f040 8081 	bne.w	24053560 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
2405345e:	687b      	ldr	r3, [r7, #4]
24053460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
24053462:	4b46      	ldr	r3, [pc, #280]	; (2405357c <HAL_ADC_Start+0x168>)
24053464:	4013      	ands	r3, r2
24053466:	f443 7280 	orr.w	r2, r3, #256	; 0x100
2405346a:	687b      	ldr	r3, [r7, #4]
2405346c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2405346e:	687b      	ldr	r3, [r7, #4]
24053470:	681b      	ldr	r3, [r3, #0]
24053472:	4a43      	ldr	r2, [pc, #268]	; (24053580 <HAL_ADC_Start+0x16c>)
24053474:	4293      	cmp	r3, r2
24053476:	d002      	beq.n	2405347e <HAL_ADC_Start+0x6a>
24053478:	687b      	ldr	r3, [r7, #4]
2405347a:	681b      	ldr	r3, [r3, #0]
2405347c:	e000      	b.n	24053480 <HAL_ADC_Start+0x6c>
2405347e:	4b41      	ldr	r3, [pc, #260]	; (24053584 <HAL_ADC_Start+0x170>)
24053480:	687a      	ldr	r2, [r7, #4]
24053482:	6812      	ldr	r2, [r2, #0]
24053484:	4293      	cmp	r3, r2
24053486:	d002      	beq.n	2405348e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24053488:	693b      	ldr	r3, [r7, #16]
2405348a:	2b00      	cmp	r3, #0
2405348c:	d105      	bne.n	2405349a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2405348e:	687b      	ldr	r3, [r7, #4]
24053490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053492:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
24053496:	687b      	ldr	r3, [r7, #4]
24053498:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
2405349a:	687b      	ldr	r3, [r7, #4]
2405349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405349e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
240534a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240534a6:	d106      	bne.n	240534b6 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
240534a8:	687b      	ldr	r3, [r7, #4]
240534aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240534ac:	f023 0206 	bic.w	r2, r3, #6
240534b0:	687b      	ldr	r3, [r7, #4]
240534b2:	659a      	str	r2, [r3, #88]	; 0x58
240534b4:	e002      	b.n	240534bc <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
240534b6:	687b      	ldr	r3, [r7, #4]
240534b8:	2200      	movs	r2, #0
240534ba:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
240534bc:	687b      	ldr	r3, [r7, #4]
240534be:	681b      	ldr	r3, [r3, #0]
240534c0:	221c      	movs	r2, #28
240534c2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
240534c4:	687b      	ldr	r3, [r7, #4]
240534c6:	2200      	movs	r2, #0
240534c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240534cc:	687b      	ldr	r3, [r7, #4]
240534ce:	681b      	ldr	r3, [r3, #0]
240534d0:	4a2b      	ldr	r2, [pc, #172]	; (24053580 <HAL_ADC_Start+0x16c>)
240534d2:	4293      	cmp	r3, r2
240534d4:	d002      	beq.n	240534dc <HAL_ADC_Start+0xc8>
240534d6:	687b      	ldr	r3, [r7, #4]
240534d8:	681b      	ldr	r3, [r3, #0]
240534da:	e000      	b.n	240534de <HAL_ADC_Start+0xca>
240534dc:	4b29      	ldr	r3, [pc, #164]	; (24053584 <HAL_ADC_Start+0x170>)
240534de:	687a      	ldr	r2, [r7, #4]
240534e0:	6812      	ldr	r2, [r2, #0]
240534e2:	4293      	cmp	r3, r2
240534e4:	d008      	beq.n	240534f8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240534e6:	693b      	ldr	r3, [r7, #16]
240534e8:	2b00      	cmp	r3, #0
240534ea:	d005      	beq.n	240534f8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
240534ec:	693b      	ldr	r3, [r7, #16]
240534ee:	2b05      	cmp	r3, #5
240534f0:	d002      	beq.n	240534f8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
240534f2:	693b      	ldr	r3, [r7, #16]
240534f4:	2b09      	cmp	r3, #9
240534f6:	d114      	bne.n	24053522 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
240534f8:	687b      	ldr	r3, [r7, #4]
240534fa:	681b      	ldr	r3, [r3, #0]
240534fc:	68db      	ldr	r3, [r3, #12]
240534fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24053502:	2b00      	cmp	r3, #0
24053504:	d007      	beq.n	24053516 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
24053506:	687b      	ldr	r3, [r7, #4]
24053508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405350a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
2405350e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
24053512:	687b      	ldr	r3, [r7, #4]
24053514:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
24053516:	687b      	ldr	r3, [r7, #4]
24053518:	681b      	ldr	r3, [r3, #0]
2405351a:	4618      	mov	r0, r3
2405351c:	f7ff fde6 	bl	240530ec <LL_ADC_REG_StartConversion>
24053520:	e025      	b.n	2405356e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
24053522:	687b      	ldr	r3, [r7, #4]
24053524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053526:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
2405352a:	687b      	ldr	r3, [r7, #4]
2405352c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2405352e:	687b      	ldr	r3, [r7, #4]
24053530:	681b      	ldr	r3, [r3, #0]
24053532:	4a13      	ldr	r2, [pc, #76]	; (24053580 <HAL_ADC_Start+0x16c>)
24053534:	4293      	cmp	r3, r2
24053536:	d002      	beq.n	2405353e <HAL_ADC_Start+0x12a>
24053538:	687b      	ldr	r3, [r7, #4]
2405353a:	681b      	ldr	r3, [r3, #0]
2405353c:	e000      	b.n	24053540 <HAL_ADC_Start+0x12c>
2405353e:	4b11      	ldr	r3, [pc, #68]	; (24053584 <HAL_ADC_Start+0x170>)
24053540:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
24053542:	68fb      	ldr	r3, [r7, #12]
24053544:	68db      	ldr	r3, [r3, #12]
24053546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405354a:	2b00      	cmp	r3, #0
2405354c:	d00f      	beq.n	2405356e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
2405354e:	687b      	ldr	r3, [r7, #4]
24053550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053552:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24053556:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
2405355a:	687b      	ldr	r3, [r7, #4]
2405355c:	655a      	str	r2, [r3, #84]	; 0x54
2405355e:	e006      	b.n	2405356e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
24053560:	687b      	ldr	r3, [r7, #4]
24053562:	2200      	movs	r2, #0
24053564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
24053568:	e001      	b.n	2405356e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
2405356a:	2302      	movs	r3, #2
2405356c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
2405356e:	7dfb      	ldrb	r3, [r7, #23]
}
24053570:	4618      	mov	r0, r3
24053572:	3718      	adds	r7, #24
24053574:	46bd      	mov	sp, r7
24053576:	bd80      	pop	{r7, pc}
24053578:	40022300 	.word	0x40022300
2405357c:	fffff0fe 	.word	0xfffff0fe
24053580:	40022100 	.word	0x40022100
24053584:	40022000 	.word	0x40022000

24053588 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
24053588:	b580      	push	{r7, lr}
2405358a:	b088      	sub	sp, #32
2405358c:	af00      	add	r7, sp, #0
2405358e:	6078      	str	r0, [r7, #4]
24053590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24053592:	4866      	ldr	r0, [pc, #408]	; (2405372c <HAL_ADC_PollForConversion+0x1a4>)
24053594:	f7ff fd18 	bl	24052fc8 <LL_ADC_GetMultimode>
24053598:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
2405359a:	687b      	ldr	r3, [r7, #4]
2405359c:	691b      	ldr	r3, [r3, #16]
2405359e:	2b08      	cmp	r3, #8
240535a0:	d102      	bne.n	240535a8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
240535a2:	2308      	movs	r3, #8
240535a4:	61fb      	str	r3, [r7, #28]
240535a6:	e02a      	b.n	240535fe <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240535a8:	697b      	ldr	r3, [r7, #20]
240535aa:	2b00      	cmp	r3, #0
240535ac:	d005      	beq.n	240535ba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
240535ae:	697b      	ldr	r3, [r7, #20]
240535b0:	2b05      	cmp	r3, #5
240535b2:	d002      	beq.n	240535ba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
240535b4:	697b      	ldr	r3, [r7, #20]
240535b6:	2b09      	cmp	r3, #9
240535b8:	d111      	bne.n	240535de <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
240535ba:	687b      	ldr	r3, [r7, #4]
240535bc:	681b      	ldr	r3, [r3, #0]
240535be:	68db      	ldr	r3, [r3, #12]
240535c0:	f003 0301 	and.w	r3, r3, #1
240535c4:	2b00      	cmp	r3, #0
240535c6:	d007      	beq.n	240535d8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
240535c8:	687b      	ldr	r3, [r7, #4]
240535ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240535cc:	f043 0220 	orr.w	r2, r3, #32
240535d0:	687b      	ldr	r3, [r7, #4]
240535d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
240535d4:	2301      	movs	r3, #1
240535d6:	e0a4      	b.n	24053722 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
240535d8:	2304      	movs	r3, #4
240535da:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
240535dc:	e00f      	b.n	240535fe <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
240535de:	4853      	ldr	r0, [pc, #332]	; (2405372c <HAL_ADC_PollForConversion+0x1a4>)
240535e0:	f7ff fd00 	bl	24052fe4 <LL_ADC_GetMultiDMATransfer>
240535e4:	4603      	mov	r3, r0
240535e6:	2b00      	cmp	r3, #0
240535e8:	d007      	beq.n	240535fa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
240535ea:	687b      	ldr	r3, [r7, #4]
240535ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240535ee:	f043 0220 	orr.w	r2, r3, #32
240535f2:	687b      	ldr	r3, [r7, #4]
240535f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
240535f6:	2301      	movs	r3, #1
240535f8:	e093      	b.n	24053722 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
240535fa:	2304      	movs	r3, #4
240535fc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
240535fe:	f7ff fb89 	bl	24052d14 <HAL_GetTick>
24053602:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
24053604:	e021      	b.n	2405364a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
24053606:	683b      	ldr	r3, [r7, #0]
24053608:	f1b3 3fff 	cmp.w	r3, #4294967295
2405360c:	d01d      	beq.n	2405364a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
2405360e:	f7ff fb81 	bl	24052d14 <HAL_GetTick>
24053612:	4602      	mov	r2, r0
24053614:	693b      	ldr	r3, [r7, #16]
24053616:	1ad3      	subs	r3, r2, r3
24053618:	683a      	ldr	r2, [r7, #0]
2405361a:	429a      	cmp	r2, r3
2405361c:	d302      	bcc.n	24053624 <HAL_ADC_PollForConversion+0x9c>
2405361e:	683b      	ldr	r3, [r7, #0]
24053620:	2b00      	cmp	r3, #0
24053622:	d112      	bne.n	2405364a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
24053624:	687b      	ldr	r3, [r7, #4]
24053626:	681b      	ldr	r3, [r3, #0]
24053628:	681a      	ldr	r2, [r3, #0]
2405362a:	69fb      	ldr	r3, [r7, #28]
2405362c:	4013      	ands	r3, r2
2405362e:	2b00      	cmp	r3, #0
24053630:	d10b      	bne.n	2405364a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
24053632:	687b      	ldr	r3, [r7, #4]
24053634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053636:	f043 0204 	orr.w	r2, r3, #4
2405363a:	687b      	ldr	r3, [r7, #4]
2405363c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
2405363e:	687b      	ldr	r3, [r7, #4]
24053640:	2200      	movs	r2, #0
24053642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
24053646:	2303      	movs	r3, #3
24053648:	e06b      	b.n	24053722 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
2405364a:	687b      	ldr	r3, [r7, #4]
2405364c:	681b      	ldr	r3, [r3, #0]
2405364e:	681a      	ldr	r2, [r3, #0]
24053650:	69fb      	ldr	r3, [r7, #28]
24053652:	4013      	ands	r3, r2
24053654:	2b00      	cmp	r3, #0
24053656:	d0d6      	beq.n	24053606 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
24053658:	687b      	ldr	r3, [r7, #4]
2405365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405365c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
24053660:	687b      	ldr	r3, [r7, #4]
24053662:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
24053664:	687b      	ldr	r3, [r7, #4]
24053666:	681b      	ldr	r3, [r3, #0]
24053668:	4618      	mov	r0, r3
2405366a:	f7ff fc0b 	bl	24052e84 <LL_ADC_REG_IsTriggerSourceSWStart>
2405366e:	4603      	mov	r3, r0
24053670:	2b00      	cmp	r3, #0
24053672:	d01c      	beq.n	240536ae <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
24053674:	687b      	ldr	r3, [r7, #4]
24053676:	7d5b      	ldrb	r3, [r3, #21]
24053678:	2b00      	cmp	r3, #0
2405367a:	d118      	bne.n	240536ae <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
2405367c:	687b      	ldr	r3, [r7, #4]
2405367e:	681b      	ldr	r3, [r3, #0]
24053680:	681b      	ldr	r3, [r3, #0]
24053682:	f003 0308 	and.w	r3, r3, #8
24053686:	2b08      	cmp	r3, #8
24053688:	d111      	bne.n	240536ae <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
2405368a:	687b      	ldr	r3, [r7, #4]
2405368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405368e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
24053692:	687b      	ldr	r3, [r7, #4]
24053694:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
24053696:	687b      	ldr	r3, [r7, #4]
24053698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405369a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
2405369e:	2b00      	cmp	r3, #0
240536a0:	d105      	bne.n	240536ae <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
240536a2:	687b      	ldr	r3, [r7, #4]
240536a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240536a6:	f043 0201 	orr.w	r2, r3, #1
240536aa:	687b      	ldr	r3, [r7, #4]
240536ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240536ae:	687b      	ldr	r3, [r7, #4]
240536b0:	681b      	ldr	r3, [r3, #0]
240536b2:	4a1f      	ldr	r2, [pc, #124]	; (24053730 <HAL_ADC_PollForConversion+0x1a8>)
240536b4:	4293      	cmp	r3, r2
240536b6:	d002      	beq.n	240536be <HAL_ADC_PollForConversion+0x136>
240536b8:	687b      	ldr	r3, [r7, #4]
240536ba:	681b      	ldr	r3, [r3, #0]
240536bc:	e000      	b.n	240536c0 <HAL_ADC_PollForConversion+0x138>
240536be:	4b1d      	ldr	r3, [pc, #116]	; (24053734 <HAL_ADC_PollForConversion+0x1ac>)
240536c0:	687a      	ldr	r2, [r7, #4]
240536c2:	6812      	ldr	r2, [r2, #0]
240536c4:	4293      	cmp	r3, r2
240536c6:	d008      	beq.n	240536da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240536c8:	697b      	ldr	r3, [r7, #20]
240536ca:	2b00      	cmp	r3, #0
240536cc:	d005      	beq.n	240536da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
240536ce:	697b      	ldr	r3, [r7, #20]
240536d0:	2b05      	cmp	r3, #5
240536d2:	d002      	beq.n	240536da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
240536d4:	697b      	ldr	r3, [r7, #20]
240536d6:	2b09      	cmp	r3, #9
240536d8:	d104      	bne.n	240536e4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
240536da:	687b      	ldr	r3, [r7, #4]
240536dc:	681b      	ldr	r3, [r3, #0]
240536de:	68db      	ldr	r3, [r3, #12]
240536e0:	61bb      	str	r3, [r7, #24]
240536e2:	e00c      	b.n	240536fe <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
240536e4:	687b      	ldr	r3, [r7, #4]
240536e6:	681b      	ldr	r3, [r3, #0]
240536e8:	4a11      	ldr	r2, [pc, #68]	; (24053730 <HAL_ADC_PollForConversion+0x1a8>)
240536ea:	4293      	cmp	r3, r2
240536ec:	d002      	beq.n	240536f4 <HAL_ADC_PollForConversion+0x16c>
240536ee:	687b      	ldr	r3, [r7, #4]
240536f0:	681b      	ldr	r3, [r3, #0]
240536f2:	e000      	b.n	240536f6 <HAL_ADC_PollForConversion+0x16e>
240536f4:	4b0f      	ldr	r3, [pc, #60]	; (24053734 <HAL_ADC_PollForConversion+0x1ac>)
240536f6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
240536f8:	68fb      	ldr	r3, [r7, #12]
240536fa:	68db      	ldr	r3, [r3, #12]
240536fc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
240536fe:	69fb      	ldr	r3, [r7, #28]
24053700:	2b08      	cmp	r3, #8
24053702:	d104      	bne.n	2405370e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
24053704:	687b      	ldr	r3, [r7, #4]
24053706:	681b      	ldr	r3, [r3, #0]
24053708:	2208      	movs	r2, #8
2405370a:	601a      	str	r2, [r3, #0]
2405370c:	e008      	b.n	24053720 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
2405370e:	69bb      	ldr	r3, [r7, #24]
24053710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24053714:	2b00      	cmp	r3, #0
24053716:	d103      	bne.n	24053720 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
24053718:	687b      	ldr	r3, [r7, #4]
2405371a:	681b      	ldr	r3, [r3, #0]
2405371c:	220c      	movs	r2, #12
2405371e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
24053720:	2300      	movs	r3, #0
}
24053722:	4618      	mov	r0, r3
24053724:	3720      	adds	r7, #32
24053726:	46bd      	mov	sp, r7
24053728:	bd80      	pop	{r7, pc}
2405372a:	bf00      	nop
2405372c:	40022300 	.word	0x40022300
24053730:	40022100 	.word	0x40022100
24053734:	40022000 	.word	0x40022000

24053738 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
24053738:	b480      	push	{r7}
2405373a:	b083      	sub	sp, #12
2405373c:	af00      	add	r7, sp, #0
2405373e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
24053740:	687b      	ldr	r3, [r7, #4]
24053742:	681b      	ldr	r3, [r3, #0]
24053744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
24053746:	4618      	mov	r0, r3
24053748:	370c      	adds	r7, #12
2405374a:	46bd      	mov	sp, r7
2405374c:	f85d 7b04 	ldr.w	r7, [sp], #4
24053750:	4770      	bx	lr
	...

24053754 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
24053754:	b580      	push	{r7, lr}
24053756:	b08a      	sub	sp, #40	; 0x28
24053758:	af00      	add	r7, sp, #0
2405375a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
2405375c:	2300      	movs	r3, #0
2405375e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
24053760:	687b      	ldr	r3, [r7, #4]
24053762:	681b      	ldr	r3, [r3, #0]
24053764:	681b      	ldr	r3, [r3, #0]
24053766:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
24053768:	687b      	ldr	r3, [r7, #4]
2405376a:	681b      	ldr	r3, [r3, #0]
2405376c:	685b      	ldr	r3, [r3, #4]
2405376e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24053770:	4882      	ldr	r0, [pc, #520]	; (2405397c <HAL_ADC_IRQHandler+0x228>)
24053772:	f7ff fc29 	bl	24052fc8 <LL_ADC_GetMultimode>
24053776:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
24053778:	69fb      	ldr	r3, [r7, #28]
2405377a:	f003 0302 	and.w	r3, r3, #2
2405377e:	2b00      	cmp	r3, #0
24053780:	d017      	beq.n	240537b2 <HAL_ADC_IRQHandler+0x5e>
24053782:	69bb      	ldr	r3, [r7, #24]
24053784:	f003 0302 	and.w	r3, r3, #2
24053788:	2b00      	cmp	r3, #0
2405378a:	d012      	beq.n	240537b2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
2405378c:	687b      	ldr	r3, [r7, #4]
2405378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053790:	f003 0310 	and.w	r3, r3, #16
24053794:	2b00      	cmp	r3, #0
24053796:	d105      	bne.n	240537a4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
24053798:	687b      	ldr	r3, [r7, #4]
2405379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405379c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
240537a0:	687b      	ldr	r3, [r7, #4]
240537a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
240537a4:	6878      	ldr	r0, [r7, #4]
240537a6:	f000 fe8b 	bl	240544c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
240537aa:	687b      	ldr	r3, [r7, #4]
240537ac:	681b      	ldr	r3, [r3, #0]
240537ae:	2202      	movs	r2, #2
240537b0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
240537b2:	69fb      	ldr	r3, [r7, #28]
240537b4:	f003 0304 	and.w	r3, r3, #4
240537b8:	2b00      	cmp	r3, #0
240537ba:	d004      	beq.n	240537c6 <HAL_ADC_IRQHandler+0x72>
240537bc:	69bb      	ldr	r3, [r7, #24]
240537be:	f003 0304 	and.w	r3, r3, #4
240537c2:	2b00      	cmp	r3, #0
240537c4:	d10a      	bne.n	240537dc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
240537c6:	69fb      	ldr	r3, [r7, #28]
240537c8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
240537cc:	2b00      	cmp	r3, #0
240537ce:	f000 8083 	beq.w	240538d8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
240537d2:	69bb      	ldr	r3, [r7, #24]
240537d4:	f003 0308 	and.w	r3, r3, #8
240537d8:	2b00      	cmp	r3, #0
240537da:	d07d      	beq.n	240538d8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
240537dc:	687b      	ldr	r3, [r7, #4]
240537de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240537e0:	f003 0310 	and.w	r3, r3, #16
240537e4:	2b00      	cmp	r3, #0
240537e6:	d105      	bne.n	240537f4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
240537e8:	687b      	ldr	r3, [r7, #4]
240537ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240537ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
240537f0:	687b      	ldr	r3, [r7, #4]
240537f2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
240537f4:	687b      	ldr	r3, [r7, #4]
240537f6:	681b      	ldr	r3, [r3, #0]
240537f8:	4618      	mov	r0, r3
240537fa:	f7ff fb43 	bl	24052e84 <LL_ADC_REG_IsTriggerSourceSWStart>
240537fe:	4603      	mov	r3, r0
24053800:	2b00      	cmp	r3, #0
24053802:	d062      	beq.n	240538ca <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24053804:	687b      	ldr	r3, [r7, #4]
24053806:	681b      	ldr	r3, [r3, #0]
24053808:	4a5d      	ldr	r2, [pc, #372]	; (24053980 <HAL_ADC_IRQHandler+0x22c>)
2405380a:	4293      	cmp	r3, r2
2405380c:	d002      	beq.n	24053814 <HAL_ADC_IRQHandler+0xc0>
2405380e:	687b      	ldr	r3, [r7, #4]
24053810:	681b      	ldr	r3, [r3, #0]
24053812:	e000      	b.n	24053816 <HAL_ADC_IRQHandler+0xc2>
24053814:	4b5b      	ldr	r3, [pc, #364]	; (24053984 <HAL_ADC_IRQHandler+0x230>)
24053816:	687a      	ldr	r2, [r7, #4]
24053818:	6812      	ldr	r2, [r2, #0]
2405381a:	4293      	cmp	r3, r2
2405381c:	d008      	beq.n	24053830 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2405381e:	697b      	ldr	r3, [r7, #20]
24053820:	2b00      	cmp	r3, #0
24053822:	d005      	beq.n	24053830 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
24053824:	697b      	ldr	r3, [r7, #20]
24053826:	2b05      	cmp	r3, #5
24053828:	d002      	beq.n	24053830 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
2405382a:	697b      	ldr	r3, [r7, #20]
2405382c:	2b09      	cmp	r3, #9
2405382e:	d104      	bne.n	2405383a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
24053830:	687b      	ldr	r3, [r7, #4]
24053832:	681b      	ldr	r3, [r3, #0]
24053834:	68db      	ldr	r3, [r3, #12]
24053836:	623b      	str	r3, [r7, #32]
24053838:	e00c      	b.n	24053854 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2405383a:	687b      	ldr	r3, [r7, #4]
2405383c:	681b      	ldr	r3, [r3, #0]
2405383e:	4a50      	ldr	r2, [pc, #320]	; (24053980 <HAL_ADC_IRQHandler+0x22c>)
24053840:	4293      	cmp	r3, r2
24053842:	d002      	beq.n	2405384a <HAL_ADC_IRQHandler+0xf6>
24053844:	687b      	ldr	r3, [r7, #4]
24053846:	681b      	ldr	r3, [r3, #0]
24053848:	e000      	b.n	2405384c <HAL_ADC_IRQHandler+0xf8>
2405384a:	4b4e      	ldr	r3, [pc, #312]	; (24053984 <HAL_ADC_IRQHandler+0x230>)
2405384c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
2405384e:	693b      	ldr	r3, [r7, #16]
24053850:	68db      	ldr	r3, [r3, #12]
24053852:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
24053854:	6a3b      	ldr	r3, [r7, #32]
24053856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405385a:	2b00      	cmp	r3, #0
2405385c:	d135      	bne.n	240538ca <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
2405385e:	687b      	ldr	r3, [r7, #4]
24053860:	681b      	ldr	r3, [r3, #0]
24053862:	681b      	ldr	r3, [r3, #0]
24053864:	f003 0308 	and.w	r3, r3, #8
24053868:	2b08      	cmp	r3, #8
2405386a:	d12e      	bne.n	240538ca <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2405386c:	687b      	ldr	r3, [r7, #4]
2405386e:	681b      	ldr	r3, [r3, #0]
24053870:	4618      	mov	r0, r3
24053872:	f7ff fc4f 	bl	24053114 <LL_ADC_REG_IsConversionOngoing>
24053876:	4603      	mov	r3, r0
24053878:	2b00      	cmp	r3, #0
2405387a:	d11a      	bne.n	240538b2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2405387c:	687b      	ldr	r3, [r7, #4]
2405387e:	681b      	ldr	r3, [r3, #0]
24053880:	685a      	ldr	r2, [r3, #4]
24053882:	687b      	ldr	r3, [r7, #4]
24053884:	681b      	ldr	r3, [r3, #0]
24053886:	f022 020c 	bic.w	r2, r2, #12
2405388a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
2405388c:	687b      	ldr	r3, [r7, #4]
2405388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
24053894:	687b      	ldr	r3, [r7, #4]
24053896:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
24053898:	687b      	ldr	r3, [r7, #4]
2405389a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405389c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
240538a0:	2b00      	cmp	r3, #0
240538a2:	d112      	bne.n	240538ca <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
240538a4:	687b      	ldr	r3, [r7, #4]
240538a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240538a8:	f043 0201 	orr.w	r2, r3, #1
240538ac:	687b      	ldr	r3, [r7, #4]
240538ae:	655a      	str	r2, [r3, #84]	; 0x54
240538b0:	e00b      	b.n	240538ca <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240538b2:	687b      	ldr	r3, [r7, #4]
240538b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240538b6:	f043 0210 	orr.w	r2, r3, #16
240538ba:	687b      	ldr	r3, [r7, #4]
240538bc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240538be:	687b      	ldr	r3, [r7, #4]
240538c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240538c2:	f043 0201 	orr.w	r2, r3, #1
240538c6:	687b      	ldr	r3, [r7, #4]
240538c8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
240538ca:	6878      	ldr	r0, [r7, #4]
240538cc:	f000 f95c 	bl	24053b88 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
240538d0:	687b      	ldr	r3, [r7, #4]
240538d2:	681b      	ldr	r3, [r3, #0]
240538d4:	220c      	movs	r2, #12
240538d6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
240538d8:	69fb      	ldr	r3, [r7, #28]
240538da:	f003 0320 	and.w	r3, r3, #32
240538de:	2b00      	cmp	r3, #0
240538e0:	d004      	beq.n	240538ec <HAL_ADC_IRQHandler+0x198>
240538e2:	69bb      	ldr	r3, [r7, #24]
240538e4:	f003 0320 	and.w	r3, r3, #32
240538e8:	2b00      	cmp	r3, #0
240538ea:	d10b      	bne.n	24053904 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
240538ec:	69fb      	ldr	r3, [r7, #28]
240538ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
240538f2:	2b00      	cmp	r3, #0
240538f4:	f000 809f 	beq.w	24053a36 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
240538f8:	69bb      	ldr	r3, [r7, #24]
240538fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
240538fe:	2b00      	cmp	r3, #0
24053900:	f000 8099 	beq.w	24053a36 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24053904:	687b      	ldr	r3, [r7, #4]
24053906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053908:	f003 0310 	and.w	r3, r3, #16
2405390c:	2b00      	cmp	r3, #0
2405390e:	d105      	bne.n	2405391c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
24053910:	687b      	ldr	r3, [r7, #4]
24053912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053914:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
24053918:	687b      	ldr	r3, [r7, #4]
2405391a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
2405391c:	687b      	ldr	r3, [r7, #4]
2405391e:	681b      	ldr	r3, [r3, #0]
24053920:	4618      	mov	r0, r3
24053922:	f7ff faee 	bl	24052f02 <LL_ADC_INJ_IsTriggerSourceSWStart>
24053926:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
24053928:	687b      	ldr	r3, [r7, #4]
2405392a:	681b      	ldr	r3, [r3, #0]
2405392c:	4618      	mov	r0, r3
2405392e:	f7ff faa9 	bl	24052e84 <LL_ADC_REG_IsTriggerSourceSWStart>
24053932:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24053934:	687b      	ldr	r3, [r7, #4]
24053936:	681b      	ldr	r3, [r3, #0]
24053938:	4a11      	ldr	r2, [pc, #68]	; (24053980 <HAL_ADC_IRQHandler+0x22c>)
2405393a:	4293      	cmp	r3, r2
2405393c:	d002      	beq.n	24053944 <HAL_ADC_IRQHandler+0x1f0>
2405393e:	687b      	ldr	r3, [r7, #4]
24053940:	681b      	ldr	r3, [r3, #0]
24053942:	e000      	b.n	24053946 <HAL_ADC_IRQHandler+0x1f2>
24053944:	4b0f      	ldr	r3, [pc, #60]	; (24053984 <HAL_ADC_IRQHandler+0x230>)
24053946:	687a      	ldr	r2, [r7, #4]
24053948:	6812      	ldr	r2, [r2, #0]
2405394a:	4293      	cmp	r3, r2
2405394c:	d008      	beq.n	24053960 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2405394e:	697b      	ldr	r3, [r7, #20]
24053950:	2b00      	cmp	r3, #0
24053952:	d005      	beq.n	24053960 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
24053954:	697b      	ldr	r3, [r7, #20]
24053956:	2b06      	cmp	r3, #6
24053958:	d002      	beq.n	24053960 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
2405395a:	697b      	ldr	r3, [r7, #20]
2405395c:	2b07      	cmp	r3, #7
2405395e:	d104      	bne.n	2405396a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
24053960:	687b      	ldr	r3, [r7, #4]
24053962:	681b      	ldr	r3, [r3, #0]
24053964:	68db      	ldr	r3, [r3, #12]
24053966:	623b      	str	r3, [r7, #32]
24053968:	e013      	b.n	24053992 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2405396a:	687b      	ldr	r3, [r7, #4]
2405396c:	681b      	ldr	r3, [r3, #0]
2405396e:	4a04      	ldr	r2, [pc, #16]	; (24053980 <HAL_ADC_IRQHandler+0x22c>)
24053970:	4293      	cmp	r3, r2
24053972:	d009      	beq.n	24053988 <HAL_ADC_IRQHandler+0x234>
24053974:	687b      	ldr	r3, [r7, #4]
24053976:	681b      	ldr	r3, [r3, #0]
24053978:	e007      	b.n	2405398a <HAL_ADC_IRQHandler+0x236>
2405397a:	bf00      	nop
2405397c:	40022300 	.word	0x40022300
24053980:	40022100 	.word	0x40022100
24053984:	40022000 	.word	0x40022000
24053988:	4b7d      	ldr	r3, [pc, #500]	; (24053b80 <HAL_ADC_IRQHandler+0x42c>)
2405398a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
2405398c:	693b      	ldr	r3, [r7, #16]
2405398e:	68db      	ldr	r3, [r3, #12]
24053990:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
24053992:	68fb      	ldr	r3, [r7, #12]
24053994:	2b00      	cmp	r3, #0
24053996:	d047      	beq.n	24053a28 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
24053998:	6a3b      	ldr	r3, [r7, #32]
2405399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405399e:	2b00      	cmp	r3, #0
240539a0:	d007      	beq.n	240539b2 <HAL_ADC_IRQHandler+0x25e>
240539a2:	68bb      	ldr	r3, [r7, #8]
240539a4:	2b00      	cmp	r3, #0
240539a6:	d03f      	beq.n	24053a28 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
240539a8:	6a3b      	ldr	r3, [r7, #32]
240539aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
240539ae:	2b00      	cmp	r3, #0
240539b0:	d13a      	bne.n	24053a28 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
240539b2:	687b      	ldr	r3, [r7, #4]
240539b4:	681b      	ldr	r3, [r3, #0]
240539b6:	681b      	ldr	r3, [r3, #0]
240539b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
240539bc:	2b40      	cmp	r3, #64	; 0x40
240539be:	d133      	bne.n	24053a28 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
240539c0:	6a3b      	ldr	r3, [r7, #32]
240539c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
240539c6:	2b00      	cmp	r3, #0
240539c8:	d12e      	bne.n	24053a28 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
240539ca:	687b      	ldr	r3, [r7, #4]
240539cc:	681b      	ldr	r3, [r3, #0]
240539ce:	4618      	mov	r0, r3
240539d0:	f7ff fbb3 	bl	2405313a <LL_ADC_INJ_IsConversionOngoing>
240539d4:	4603      	mov	r3, r0
240539d6:	2b00      	cmp	r3, #0
240539d8:	d11a      	bne.n	24053a10 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
240539da:	687b      	ldr	r3, [r7, #4]
240539dc:	681b      	ldr	r3, [r3, #0]
240539de:	685a      	ldr	r2, [r3, #4]
240539e0:	687b      	ldr	r3, [r7, #4]
240539e2:	681b      	ldr	r3, [r3, #0]
240539e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
240539e8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
240539ea:	687b      	ldr	r3, [r7, #4]
240539ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240539ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
240539f2:	687b      	ldr	r3, [r7, #4]
240539f4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
240539f6:	687b      	ldr	r3, [r7, #4]
240539f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240539fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
240539fe:	2b00      	cmp	r3, #0
24053a00:	d112      	bne.n	24053a28 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
24053a02:	687b      	ldr	r3, [r7, #4]
24053a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053a06:	f043 0201 	orr.w	r2, r3, #1
24053a0a:	687b      	ldr	r3, [r7, #4]
24053a0c:	655a      	str	r2, [r3, #84]	; 0x54
24053a0e:	e00b      	b.n	24053a28 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24053a10:	687b      	ldr	r3, [r7, #4]
24053a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053a14:	f043 0210 	orr.w	r2, r3, #16
24053a18:	687b      	ldr	r3, [r7, #4]
24053a1a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24053a1c:	687b      	ldr	r3, [r7, #4]
24053a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24053a20:	f043 0201 	orr.w	r2, r3, #1
24053a24:	687b      	ldr	r3, [r7, #4]
24053a26:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
24053a28:	6878      	ldr	r0, [r7, #4]
24053a2a:	f000 fd21 	bl	24054470 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
24053a2e:	687b      	ldr	r3, [r7, #4]
24053a30:	681b      	ldr	r3, [r3, #0]
24053a32:	2260      	movs	r2, #96	; 0x60
24053a34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
24053a36:	69fb      	ldr	r3, [r7, #28]
24053a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
24053a3c:	2b00      	cmp	r3, #0
24053a3e:	d011      	beq.n	24053a64 <HAL_ADC_IRQHandler+0x310>
24053a40:	69bb      	ldr	r3, [r7, #24]
24053a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
24053a46:	2b00      	cmp	r3, #0
24053a48:	d00c      	beq.n	24053a64 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
24053a4a:	687b      	ldr	r3, [r7, #4]
24053a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053a4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
24053a52:	687b      	ldr	r3, [r7, #4]
24053a54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
24053a56:	6878      	ldr	r0, [r7, #4]
24053a58:	f000 f8a0 	bl	24053b9c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
24053a5c:	687b      	ldr	r3, [r7, #4]
24053a5e:	681b      	ldr	r3, [r3, #0]
24053a60:	2280      	movs	r2, #128	; 0x80
24053a62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
24053a64:	69fb      	ldr	r3, [r7, #28]
24053a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
24053a6a:	2b00      	cmp	r3, #0
24053a6c:	d012      	beq.n	24053a94 <HAL_ADC_IRQHandler+0x340>
24053a6e:	69bb      	ldr	r3, [r7, #24]
24053a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
24053a74:	2b00      	cmp	r3, #0
24053a76:	d00d      	beq.n	24053a94 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
24053a78:	687b      	ldr	r3, [r7, #4]
24053a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053a7c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
24053a80:	687b      	ldr	r3, [r7, #4]
24053a82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
24053a84:	6878      	ldr	r0, [r7, #4]
24053a86:	f000 fd07 	bl	24054498 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
24053a8a:	687b      	ldr	r3, [r7, #4]
24053a8c:	681b      	ldr	r3, [r3, #0]
24053a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
24053a92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
24053a94:	69fb      	ldr	r3, [r7, #28]
24053a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
24053a9a:	2b00      	cmp	r3, #0
24053a9c:	d012      	beq.n	24053ac4 <HAL_ADC_IRQHandler+0x370>
24053a9e:	69bb      	ldr	r3, [r7, #24]
24053aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
24053aa4:	2b00      	cmp	r3, #0
24053aa6:	d00d      	beq.n	24053ac4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
24053aa8:	687b      	ldr	r3, [r7, #4]
24053aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053aac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
24053ab0:	687b      	ldr	r3, [r7, #4]
24053ab2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
24053ab4:	6878      	ldr	r0, [r7, #4]
24053ab6:	f000 fcf9 	bl	240544ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
24053aba:	687b      	ldr	r3, [r7, #4]
24053abc:	681b      	ldr	r3, [r3, #0]
24053abe:	f44f 7200 	mov.w	r2, #512	; 0x200
24053ac2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
24053ac4:	69fb      	ldr	r3, [r7, #28]
24053ac6:	f003 0310 	and.w	r3, r3, #16
24053aca:	2b00      	cmp	r3, #0
24053acc:	d036      	beq.n	24053b3c <HAL_ADC_IRQHandler+0x3e8>
24053ace:	69bb      	ldr	r3, [r7, #24]
24053ad0:	f003 0310 	and.w	r3, r3, #16
24053ad4:	2b00      	cmp	r3, #0
24053ad6:	d031      	beq.n	24053b3c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
24053ad8:	687b      	ldr	r3, [r7, #4]
24053ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24053adc:	2b00      	cmp	r3, #0
24053ade:	d102      	bne.n	24053ae6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
24053ae0:	2301      	movs	r3, #1
24053ae2:	627b      	str	r3, [r7, #36]	; 0x24
24053ae4:	e014      	b.n	24053b10 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
24053ae6:	697b      	ldr	r3, [r7, #20]
24053ae8:	2b00      	cmp	r3, #0
24053aea:	d008      	beq.n	24053afe <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
24053aec:	4825      	ldr	r0, [pc, #148]	; (24053b84 <HAL_ADC_IRQHandler+0x430>)
24053aee:	f7ff fa79 	bl	24052fe4 <LL_ADC_GetMultiDMATransfer>
24053af2:	4603      	mov	r3, r0
24053af4:	2b00      	cmp	r3, #0
24053af6:	d00b      	beq.n	24053b10 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
24053af8:	2301      	movs	r3, #1
24053afa:	627b      	str	r3, [r7, #36]	; 0x24
24053afc:	e008      	b.n	24053b10 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
24053afe:	687b      	ldr	r3, [r7, #4]
24053b00:	681b      	ldr	r3, [r3, #0]
24053b02:	68db      	ldr	r3, [r3, #12]
24053b04:	f003 0303 	and.w	r3, r3, #3
24053b08:	2b00      	cmp	r3, #0
24053b0a:	d001      	beq.n	24053b10 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
24053b0c:	2301      	movs	r3, #1
24053b0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
24053b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24053b12:	2b01      	cmp	r3, #1
24053b14:	d10e      	bne.n	24053b34 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
24053b16:	687b      	ldr	r3, [r7, #4]
24053b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053b1a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
24053b1e:	687b      	ldr	r3, [r7, #4]
24053b20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
24053b22:	687b      	ldr	r3, [r7, #4]
24053b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24053b26:	f043 0202 	orr.w	r2, r3, #2
24053b2a:	687b      	ldr	r3, [r7, #4]
24053b2c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
24053b2e:	6878      	ldr	r0, [r7, #4]
24053b30:	f000 f83e 	bl	24053bb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
24053b34:	687b      	ldr	r3, [r7, #4]
24053b36:	681b      	ldr	r3, [r3, #0]
24053b38:	2210      	movs	r2, #16
24053b3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
24053b3c:	69fb      	ldr	r3, [r7, #28]
24053b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24053b42:	2b00      	cmp	r3, #0
24053b44:	d018      	beq.n	24053b78 <HAL_ADC_IRQHandler+0x424>
24053b46:	69bb      	ldr	r3, [r7, #24]
24053b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24053b4c:	2b00      	cmp	r3, #0
24053b4e:	d013      	beq.n	24053b78 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
24053b50:	687b      	ldr	r3, [r7, #4]
24053b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053b54:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
24053b58:	687b      	ldr	r3, [r7, #4]
24053b5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
24053b5c:	687b      	ldr	r3, [r7, #4]
24053b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24053b60:	f043 0208 	orr.w	r2, r3, #8
24053b64:	687b      	ldr	r3, [r7, #4]
24053b66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
24053b68:	687b      	ldr	r3, [r7, #4]
24053b6a:	681b      	ldr	r3, [r3, #0]
24053b6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
24053b70:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
24053b72:	6878      	ldr	r0, [r7, #4]
24053b74:	f000 fc86 	bl	24054484 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
24053b78:	bf00      	nop
24053b7a:	3728      	adds	r7, #40	; 0x28
24053b7c:	46bd      	mov	sp, r7
24053b7e:	bd80      	pop	{r7, pc}
24053b80:	40022000 	.word	0x40022000
24053b84:	40022300 	.word	0x40022300

24053b88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
24053b88:	b480      	push	{r7}
24053b8a:	b083      	sub	sp, #12
24053b8c:	af00      	add	r7, sp, #0
24053b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
24053b90:	bf00      	nop
24053b92:	370c      	adds	r7, #12
24053b94:	46bd      	mov	sp, r7
24053b96:	f85d 7b04 	ldr.w	r7, [sp], #4
24053b9a:	4770      	bx	lr

24053b9c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
24053b9c:	b480      	push	{r7}
24053b9e:	b083      	sub	sp, #12
24053ba0:	af00      	add	r7, sp, #0
24053ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
24053ba4:	bf00      	nop
24053ba6:	370c      	adds	r7, #12
24053ba8:	46bd      	mov	sp, r7
24053baa:	f85d 7b04 	ldr.w	r7, [sp], #4
24053bae:	4770      	bx	lr

24053bb0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
24053bb0:	b480      	push	{r7}
24053bb2:	b083      	sub	sp, #12
24053bb4:	af00      	add	r7, sp, #0
24053bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
24053bb8:	bf00      	nop
24053bba:	370c      	adds	r7, #12
24053bbc:	46bd      	mov	sp, r7
24053bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
24053bc2:	4770      	bx	lr

24053bc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
24053bc4:	b590      	push	{r4, r7, lr}
24053bc6:	b0a1      	sub	sp, #132	; 0x84
24053bc8:	af00      	add	r7, sp, #0
24053bca:	6078      	str	r0, [r7, #4]
24053bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
24053bce:	2300      	movs	r3, #0
24053bd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
24053bd4:	2300      	movs	r3, #0
24053bd6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
24053bd8:	683b      	ldr	r3, [r7, #0]
24053bda:	68db      	ldr	r3, [r3, #12]
24053bdc:	4a9a      	ldr	r2, [pc, #616]	; (24053e48 <HAL_ADC_ConfigChannel+0x284>)
24053bde:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
24053be0:	687b      	ldr	r3, [r7, #4]
24053be2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
24053be6:	2b01      	cmp	r3, #1
24053be8:	d101      	bne.n	24053bee <HAL_ADC_ConfigChannel+0x2a>
24053bea:	2302      	movs	r3, #2
24053bec:	e2bc      	b.n	24054168 <HAL_ADC_ConfigChannel+0x5a4>
24053bee:	687b      	ldr	r3, [r7, #4]
24053bf0:	2201      	movs	r2, #1
24053bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24053bf6:	687b      	ldr	r3, [r7, #4]
24053bf8:	681b      	ldr	r3, [r3, #0]
24053bfa:	4618      	mov	r0, r3
24053bfc:	f7ff fa8a 	bl	24053114 <LL_ADC_REG_IsConversionOngoing>
24053c00:	4603      	mov	r3, r0
24053c02:	2b00      	cmp	r3, #0
24053c04:	f040 82a1 	bne.w	2405414a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
24053c08:	683b      	ldr	r3, [r7, #0]
24053c0a:	681b      	ldr	r3, [r3, #0]
24053c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053c10:	2b00      	cmp	r3, #0
24053c12:	d108      	bne.n	24053c26 <HAL_ADC_ConfigChannel+0x62>
24053c14:	683b      	ldr	r3, [r7, #0]
24053c16:	681b      	ldr	r3, [r3, #0]
24053c18:	0e9b      	lsrs	r3, r3, #26
24053c1a:	f003 031f 	and.w	r3, r3, #31
24053c1e:	2201      	movs	r2, #1
24053c20:	fa02 f303 	lsl.w	r3, r2, r3
24053c24:	e016      	b.n	24053c54 <HAL_ADC_ConfigChannel+0x90>
24053c26:	683b      	ldr	r3, [r7, #0]
24053c28:	681b      	ldr	r3, [r3, #0]
24053c2a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
24053c2e:	fa93 f3a3 	rbit	r3, r3
24053c32:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
24053c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
24053c36:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
24053c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
24053c3a:	2b00      	cmp	r3, #0
24053c3c:	d101      	bne.n	24053c42 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
24053c3e:	2320      	movs	r3, #32
24053c40:	e003      	b.n	24053c4a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
24053c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
24053c44:	fab3 f383 	clz	r3, r3
24053c48:	b2db      	uxtb	r3, r3
24053c4a:	f003 031f 	and.w	r3, r3, #31
24053c4e:	2201      	movs	r2, #1
24053c50:	fa02 f303 	lsl.w	r3, r2, r3
24053c54:	687a      	ldr	r2, [r7, #4]
24053c56:	6812      	ldr	r2, [r2, #0]
24053c58:	69d1      	ldr	r1, [r2, #28]
24053c5a:	687a      	ldr	r2, [r7, #4]
24053c5c:	6812      	ldr	r2, [r2, #0]
24053c5e:	430b      	orrs	r3, r1
24053c60:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
24053c62:	687b      	ldr	r3, [r7, #4]
24053c64:	6818      	ldr	r0, [r3, #0]
24053c66:	683b      	ldr	r3, [r7, #0]
24053c68:	6859      	ldr	r1, [r3, #4]
24053c6a:	683b      	ldr	r3, [r7, #0]
24053c6c:	681b      	ldr	r3, [r3, #0]
24053c6e:	461a      	mov	r2, r3
24053c70:	f7ff f91b 	bl	24052eaa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
24053c74:	687b      	ldr	r3, [r7, #4]
24053c76:	681b      	ldr	r3, [r3, #0]
24053c78:	4618      	mov	r0, r3
24053c7a:	f7ff fa4b 	bl	24053114 <LL_ADC_REG_IsConversionOngoing>
24053c7e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
24053c80:	687b      	ldr	r3, [r7, #4]
24053c82:	681b      	ldr	r3, [r3, #0]
24053c84:	4618      	mov	r0, r3
24053c86:	f7ff fa58 	bl	2405313a <LL_ADC_INJ_IsConversionOngoing>
24053c8a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
24053c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
24053c8e:	2b00      	cmp	r3, #0
24053c90:	f040 80a0 	bne.w	24053dd4 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
24053c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
24053c96:	2b00      	cmp	r3, #0
24053c98:	f040 809c 	bne.w	24053dd4 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
24053c9c:	687b      	ldr	r3, [r7, #4]
24053c9e:	6818      	ldr	r0, [r3, #0]
24053ca0:	683b      	ldr	r3, [r7, #0]
24053ca2:	6819      	ldr	r1, [r3, #0]
24053ca4:	683b      	ldr	r3, [r7, #0]
24053ca6:	689b      	ldr	r3, [r3, #8]
24053ca8:	461a      	mov	r2, r3
24053caa:	f7ff f93d 	bl	24052f28 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
24053cae:	687b      	ldr	r3, [r7, #4]
24053cb0:	681b      	ldr	r3, [r3, #0]
24053cb2:	68db      	ldr	r3, [r3, #12]
24053cb4:	f003 0310 	and.w	r3, r3, #16
24053cb8:	2b00      	cmp	r3, #0
24053cba:	d10b      	bne.n	24053cd4 <HAL_ADC_ConfigChannel+0x110>
24053cbc:	683b      	ldr	r3, [r7, #0]
24053cbe:	695a      	ldr	r2, [r3, #20]
24053cc0:	687b      	ldr	r3, [r7, #4]
24053cc2:	681b      	ldr	r3, [r3, #0]
24053cc4:	68db      	ldr	r3, [r3, #12]
24053cc6:	089b      	lsrs	r3, r3, #2
24053cc8:	f003 0307 	and.w	r3, r3, #7
24053ccc:	005b      	lsls	r3, r3, #1
24053cce:	fa02 f303 	lsl.w	r3, r2, r3
24053cd2:	e00a      	b.n	24053cea <HAL_ADC_ConfigChannel+0x126>
24053cd4:	683b      	ldr	r3, [r7, #0]
24053cd6:	695a      	ldr	r2, [r3, #20]
24053cd8:	687b      	ldr	r3, [r7, #4]
24053cda:	681b      	ldr	r3, [r3, #0]
24053cdc:	68db      	ldr	r3, [r3, #12]
24053cde:	089b      	lsrs	r3, r3, #2
24053ce0:	f003 0304 	and.w	r3, r3, #4
24053ce4:	005b      	lsls	r3, r3, #1
24053ce6:	fa02 f303 	lsl.w	r3, r2, r3
24053cea:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
24053cec:	683b      	ldr	r3, [r7, #0]
24053cee:	691b      	ldr	r3, [r3, #16]
24053cf0:	2b04      	cmp	r3, #4
24053cf2:	d027      	beq.n	24053d44 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
24053cf4:	687b      	ldr	r3, [r7, #4]
24053cf6:	6818      	ldr	r0, [r3, #0]
24053cf8:	683b      	ldr	r3, [r7, #0]
24053cfa:	6919      	ldr	r1, [r3, #16]
24053cfc:	683b      	ldr	r3, [r7, #0]
24053cfe:	681a      	ldr	r2, [r3, #0]
24053d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
24053d02:	f7ff f86b 	bl	24052ddc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
24053d06:	687b      	ldr	r3, [r7, #4]
24053d08:	6818      	ldr	r0, [r3, #0]
24053d0a:	683b      	ldr	r3, [r7, #0]
24053d0c:	6919      	ldr	r1, [r3, #16]
24053d0e:	683b      	ldr	r3, [r7, #0]
24053d10:	7e5b      	ldrb	r3, [r3, #25]
24053d12:	2b01      	cmp	r3, #1
24053d14:	d102      	bne.n	24053d1c <HAL_ADC_ConfigChannel+0x158>
24053d16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
24053d1a:	e000      	b.n	24053d1e <HAL_ADC_ConfigChannel+0x15a>
24053d1c:	2300      	movs	r3, #0
24053d1e:	461a      	mov	r2, r3
24053d20:	f7ff f895 	bl	24052e4e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
24053d24:	687b      	ldr	r3, [r7, #4]
24053d26:	6818      	ldr	r0, [r3, #0]
24053d28:	683b      	ldr	r3, [r7, #0]
24053d2a:	6919      	ldr	r1, [r3, #16]
24053d2c:	683b      	ldr	r3, [r7, #0]
24053d2e:	7e1b      	ldrb	r3, [r3, #24]
24053d30:	2b01      	cmp	r3, #1
24053d32:	d102      	bne.n	24053d3a <HAL_ADC_ConfigChannel+0x176>
24053d34:	f44f 6300 	mov.w	r3, #2048	; 0x800
24053d38:	e000      	b.n	24053d3c <HAL_ADC_ConfigChannel+0x178>
24053d3a:	2300      	movs	r3, #0
24053d3c:	461a      	mov	r2, r3
24053d3e:	f7ff f86d 	bl	24052e1c <LL_ADC_SetDataRightShift>
24053d42:	e047      	b.n	24053dd4 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24053d44:	687b      	ldr	r3, [r7, #4]
24053d46:	681b      	ldr	r3, [r3, #0]
24053d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24053d4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053d4e:	683b      	ldr	r3, [r7, #0]
24053d50:	681b      	ldr	r3, [r3, #0]
24053d52:	069b      	lsls	r3, r3, #26
24053d54:	429a      	cmp	r2, r3
24053d56:	d107      	bne.n	24053d68 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
24053d58:	687b      	ldr	r3, [r7, #4]
24053d5a:	681b      	ldr	r3, [r3, #0]
24053d5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
24053d5e:	687b      	ldr	r3, [r7, #4]
24053d60:	681b      	ldr	r3, [r3, #0]
24053d62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
24053d66:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24053d68:	687b      	ldr	r3, [r7, #4]
24053d6a:	681b      	ldr	r3, [r3, #0]
24053d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24053d6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053d72:	683b      	ldr	r3, [r7, #0]
24053d74:	681b      	ldr	r3, [r3, #0]
24053d76:	069b      	lsls	r3, r3, #26
24053d78:	429a      	cmp	r2, r3
24053d7a:	d107      	bne.n	24053d8c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
24053d7c:	687b      	ldr	r3, [r7, #4]
24053d7e:	681b      	ldr	r3, [r3, #0]
24053d80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
24053d82:	687b      	ldr	r3, [r7, #4]
24053d84:	681b      	ldr	r3, [r3, #0]
24053d86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
24053d8a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24053d8c:	687b      	ldr	r3, [r7, #4]
24053d8e:	681b      	ldr	r3, [r3, #0]
24053d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24053d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053d96:	683b      	ldr	r3, [r7, #0]
24053d98:	681b      	ldr	r3, [r3, #0]
24053d9a:	069b      	lsls	r3, r3, #26
24053d9c:	429a      	cmp	r2, r3
24053d9e:	d107      	bne.n	24053db0 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
24053da0:	687b      	ldr	r3, [r7, #4]
24053da2:	681b      	ldr	r3, [r3, #0]
24053da4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
24053da6:	687b      	ldr	r3, [r7, #4]
24053da8:	681b      	ldr	r3, [r3, #0]
24053daa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
24053dae:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24053db0:	687b      	ldr	r3, [r7, #4]
24053db2:	681b      	ldr	r3, [r3, #0]
24053db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24053db6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053dba:	683b      	ldr	r3, [r7, #0]
24053dbc:	681b      	ldr	r3, [r3, #0]
24053dbe:	069b      	lsls	r3, r3, #26
24053dc0:	429a      	cmp	r2, r3
24053dc2:	d107      	bne.n	24053dd4 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
24053dc4:	687b      	ldr	r3, [r7, #4]
24053dc6:	681b      	ldr	r3, [r3, #0]
24053dc8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
24053dca:	687b      	ldr	r3, [r7, #4]
24053dcc:	681b      	ldr	r3, [r3, #0]
24053dce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
24053dd2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
24053dd4:	687b      	ldr	r3, [r7, #4]
24053dd6:	681b      	ldr	r3, [r3, #0]
24053dd8:	4618      	mov	r0, r3
24053dda:	f7ff f973 	bl	240530c4 <LL_ADC_IsEnabled>
24053dde:	4603      	mov	r3, r0
24053de0:	2b00      	cmp	r3, #0
24053de2:	f040 81bb 	bne.w	2405415c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
24053de6:	687b      	ldr	r3, [r7, #4]
24053de8:	6818      	ldr	r0, [r3, #0]
24053dea:	683b      	ldr	r3, [r7, #0]
24053dec:	6819      	ldr	r1, [r3, #0]
24053dee:	683b      	ldr	r3, [r7, #0]
24053df0:	68db      	ldr	r3, [r3, #12]
24053df2:	461a      	mov	r2, r3
24053df4:	f7ff f8c4 	bl	24052f80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
24053df8:	683b      	ldr	r3, [r7, #0]
24053dfa:	68db      	ldr	r3, [r3, #12]
24053dfc:	4a12      	ldr	r2, [pc, #72]	; (24053e48 <HAL_ADC_ConfigChannel+0x284>)
24053dfe:	4293      	cmp	r3, r2
24053e00:	f040 8130 	bne.w	24054064 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24053e04:	687b      	ldr	r3, [r7, #4]
24053e06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24053e08:	683b      	ldr	r3, [r7, #0]
24053e0a:	681b      	ldr	r3, [r3, #0]
24053e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053e10:	2b00      	cmp	r3, #0
24053e12:	d10b      	bne.n	24053e2c <HAL_ADC_ConfigChannel+0x268>
24053e14:	683b      	ldr	r3, [r7, #0]
24053e16:	681b      	ldr	r3, [r3, #0]
24053e18:	0e9b      	lsrs	r3, r3, #26
24053e1a:	3301      	adds	r3, #1
24053e1c:	f003 031f 	and.w	r3, r3, #31
24053e20:	2b09      	cmp	r3, #9
24053e22:	bf94      	ite	ls
24053e24:	2301      	movls	r3, #1
24053e26:	2300      	movhi	r3, #0
24053e28:	b2db      	uxtb	r3, r3
24053e2a:	e01b      	b.n	24053e64 <HAL_ADC_ConfigChannel+0x2a0>
24053e2c:	683b      	ldr	r3, [r7, #0]
24053e2e:	681b      	ldr	r3, [r3, #0]
24053e30:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
24053e34:	fa93 f3a3 	rbit	r3, r3
24053e38:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
24053e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
24053e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
24053e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
24053e40:	2b00      	cmp	r3, #0
24053e42:	d103      	bne.n	24053e4c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
24053e44:	2320      	movs	r3, #32
24053e46:	e005      	b.n	24053e54 <HAL_ADC_ConfigChannel+0x290>
24053e48:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
24053e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
24053e4e:	fab3 f383 	clz	r3, r3
24053e52:	b2db      	uxtb	r3, r3
24053e54:	3301      	adds	r3, #1
24053e56:	f003 031f 	and.w	r3, r3, #31
24053e5a:	2b09      	cmp	r3, #9
24053e5c:	bf94      	ite	ls
24053e5e:	2301      	movls	r3, #1
24053e60:	2300      	movhi	r3, #0
24053e62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24053e64:	2b00      	cmp	r3, #0
24053e66:	d079      	beq.n	24053f5c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24053e68:	683b      	ldr	r3, [r7, #0]
24053e6a:	681b      	ldr	r3, [r3, #0]
24053e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053e70:	2b00      	cmp	r3, #0
24053e72:	d107      	bne.n	24053e84 <HAL_ADC_ConfigChannel+0x2c0>
24053e74:	683b      	ldr	r3, [r7, #0]
24053e76:	681b      	ldr	r3, [r3, #0]
24053e78:	0e9b      	lsrs	r3, r3, #26
24053e7a:	3301      	adds	r3, #1
24053e7c:	069b      	lsls	r3, r3, #26
24053e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053e82:	e015      	b.n	24053eb0 <HAL_ADC_ConfigChannel+0x2ec>
24053e84:	683b      	ldr	r3, [r7, #0]
24053e86:	681b      	ldr	r3, [r3, #0]
24053e88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
24053e8c:	fa93 f3a3 	rbit	r3, r3
24053e90:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
24053e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
24053e94:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
24053e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
24053e98:	2b00      	cmp	r3, #0
24053e9a:	d101      	bne.n	24053ea0 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
24053e9c:	2320      	movs	r3, #32
24053e9e:	e003      	b.n	24053ea8 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
24053ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
24053ea2:	fab3 f383 	clz	r3, r3
24053ea6:	b2db      	uxtb	r3, r3
24053ea8:	3301      	adds	r3, #1
24053eaa:	069b      	lsls	r3, r3, #26
24053eac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053eb0:	683b      	ldr	r3, [r7, #0]
24053eb2:	681b      	ldr	r3, [r3, #0]
24053eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053eb8:	2b00      	cmp	r3, #0
24053eba:	d109      	bne.n	24053ed0 <HAL_ADC_ConfigChannel+0x30c>
24053ebc:	683b      	ldr	r3, [r7, #0]
24053ebe:	681b      	ldr	r3, [r3, #0]
24053ec0:	0e9b      	lsrs	r3, r3, #26
24053ec2:	3301      	adds	r3, #1
24053ec4:	f003 031f 	and.w	r3, r3, #31
24053ec8:	2101      	movs	r1, #1
24053eca:	fa01 f303 	lsl.w	r3, r1, r3
24053ece:	e017      	b.n	24053f00 <HAL_ADC_ConfigChannel+0x33c>
24053ed0:	683b      	ldr	r3, [r7, #0]
24053ed2:	681b      	ldr	r3, [r3, #0]
24053ed4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
24053ed8:	fa93 f3a3 	rbit	r3, r3
24053edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
24053ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24053ee0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
24053ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
24053ee4:	2b00      	cmp	r3, #0
24053ee6:	d101      	bne.n	24053eec <HAL_ADC_ConfigChannel+0x328>
    return 32U;
24053ee8:	2320      	movs	r3, #32
24053eea:	e003      	b.n	24053ef4 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
24053eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
24053eee:	fab3 f383 	clz	r3, r3
24053ef2:	b2db      	uxtb	r3, r3
24053ef4:	3301      	adds	r3, #1
24053ef6:	f003 031f 	and.w	r3, r3, #31
24053efa:	2101      	movs	r1, #1
24053efc:	fa01 f303 	lsl.w	r3, r1, r3
24053f00:	ea42 0103 	orr.w	r1, r2, r3
24053f04:	683b      	ldr	r3, [r7, #0]
24053f06:	681b      	ldr	r3, [r3, #0]
24053f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053f0c:	2b00      	cmp	r3, #0
24053f0e:	d10a      	bne.n	24053f26 <HAL_ADC_ConfigChannel+0x362>
24053f10:	683b      	ldr	r3, [r7, #0]
24053f12:	681b      	ldr	r3, [r3, #0]
24053f14:	0e9b      	lsrs	r3, r3, #26
24053f16:	3301      	adds	r3, #1
24053f18:	f003 021f 	and.w	r2, r3, #31
24053f1c:	4613      	mov	r3, r2
24053f1e:	005b      	lsls	r3, r3, #1
24053f20:	4413      	add	r3, r2
24053f22:	051b      	lsls	r3, r3, #20
24053f24:	e018      	b.n	24053f58 <HAL_ADC_ConfigChannel+0x394>
24053f26:	683b      	ldr	r3, [r7, #0]
24053f28:	681b      	ldr	r3, [r3, #0]
24053f2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24053f2e:	fa93 f3a3 	rbit	r3, r3
24053f32:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
24053f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24053f36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
24053f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24053f3a:	2b00      	cmp	r3, #0
24053f3c:	d101      	bne.n	24053f42 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
24053f3e:	2320      	movs	r3, #32
24053f40:	e003      	b.n	24053f4a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
24053f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24053f44:	fab3 f383 	clz	r3, r3
24053f48:	b2db      	uxtb	r3, r3
24053f4a:	3301      	adds	r3, #1
24053f4c:	f003 021f 	and.w	r2, r3, #31
24053f50:	4613      	mov	r3, r2
24053f52:	005b      	lsls	r3, r3, #1
24053f54:	4413      	add	r3, r2
24053f56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24053f58:	430b      	orrs	r3, r1
24053f5a:	e07e      	b.n	2405405a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24053f5c:	683b      	ldr	r3, [r7, #0]
24053f5e:	681b      	ldr	r3, [r3, #0]
24053f60:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053f64:	2b00      	cmp	r3, #0
24053f66:	d107      	bne.n	24053f78 <HAL_ADC_ConfigChannel+0x3b4>
24053f68:	683b      	ldr	r3, [r7, #0]
24053f6a:	681b      	ldr	r3, [r3, #0]
24053f6c:	0e9b      	lsrs	r3, r3, #26
24053f6e:	3301      	adds	r3, #1
24053f70:	069b      	lsls	r3, r3, #26
24053f72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053f76:	e015      	b.n	24053fa4 <HAL_ADC_ConfigChannel+0x3e0>
24053f78:	683b      	ldr	r3, [r7, #0]
24053f7a:	681b      	ldr	r3, [r3, #0]
24053f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
24053f80:	fa93 f3a3 	rbit	r3, r3
24053f84:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
24053f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24053f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
24053f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24053f8c:	2b00      	cmp	r3, #0
24053f8e:	d101      	bne.n	24053f94 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
24053f90:	2320      	movs	r3, #32
24053f92:	e003      	b.n	24053f9c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
24053f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24053f96:	fab3 f383 	clz	r3, r3
24053f9a:	b2db      	uxtb	r3, r3
24053f9c:	3301      	adds	r3, #1
24053f9e:	069b      	lsls	r3, r3, #26
24053fa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053fa4:	683b      	ldr	r3, [r7, #0]
24053fa6:	681b      	ldr	r3, [r3, #0]
24053fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053fac:	2b00      	cmp	r3, #0
24053fae:	d109      	bne.n	24053fc4 <HAL_ADC_ConfigChannel+0x400>
24053fb0:	683b      	ldr	r3, [r7, #0]
24053fb2:	681b      	ldr	r3, [r3, #0]
24053fb4:	0e9b      	lsrs	r3, r3, #26
24053fb6:	3301      	adds	r3, #1
24053fb8:	f003 031f 	and.w	r3, r3, #31
24053fbc:	2101      	movs	r1, #1
24053fbe:	fa01 f303 	lsl.w	r3, r1, r3
24053fc2:	e017      	b.n	24053ff4 <HAL_ADC_ConfigChannel+0x430>
24053fc4:	683b      	ldr	r3, [r7, #0]
24053fc6:	681b      	ldr	r3, [r3, #0]
24053fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053fca:	69fb      	ldr	r3, [r7, #28]
24053fcc:	fa93 f3a3 	rbit	r3, r3
24053fd0:	61bb      	str	r3, [r7, #24]
  return result;
24053fd2:	69bb      	ldr	r3, [r7, #24]
24053fd4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
24053fd6:	6a3b      	ldr	r3, [r7, #32]
24053fd8:	2b00      	cmp	r3, #0
24053fda:	d101      	bne.n	24053fe0 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
24053fdc:	2320      	movs	r3, #32
24053fde:	e003      	b.n	24053fe8 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
24053fe0:	6a3b      	ldr	r3, [r7, #32]
24053fe2:	fab3 f383 	clz	r3, r3
24053fe6:	b2db      	uxtb	r3, r3
24053fe8:	3301      	adds	r3, #1
24053fea:	f003 031f 	and.w	r3, r3, #31
24053fee:	2101      	movs	r1, #1
24053ff0:	fa01 f303 	lsl.w	r3, r1, r3
24053ff4:	ea42 0103 	orr.w	r1, r2, r3
24053ff8:	683b      	ldr	r3, [r7, #0]
24053ffa:	681b      	ldr	r3, [r3, #0]
24053ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
24054000:	2b00      	cmp	r3, #0
24054002:	d10d      	bne.n	24054020 <HAL_ADC_ConfigChannel+0x45c>
24054004:	683b      	ldr	r3, [r7, #0]
24054006:	681b      	ldr	r3, [r3, #0]
24054008:	0e9b      	lsrs	r3, r3, #26
2405400a:	3301      	adds	r3, #1
2405400c:	f003 021f 	and.w	r2, r3, #31
24054010:	4613      	mov	r3, r2
24054012:	005b      	lsls	r3, r3, #1
24054014:	4413      	add	r3, r2
24054016:	3b1e      	subs	r3, #30
24054018:	051b      	lsls	r3, r3, #20
2405401a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2405401e:	e01b      	b.n	24054058 <HAL_ADC_ConfigChannel+0x494>
24054020:	683b      	ldr	r3, [r7, #0]
24054022:	681b      	ldr	r3, [r3, #0]
24054024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24054026:	693b      	ldr	r3, [r7, #16]
24054028:	fa93 f3a3 	rbit	r3, r3
2405402c:	60fb      	str	r3, [r7, #12]
  return result;
2405402e:	68fb      	ldr	r3, [r7, #12]
24054030:	617b      	str	r3, [r7, #20]
  if (value == 0U)
24054032:	697b      	ldr	r3, [r7, #20]
24054034:	2b00      	cmp	r3, #0
24054036:	d101      	bne.n	2405403c <HAL_ADC_ConfigChannel+0x478>
    return 32U;
24054038:	2320      	movs	r3, #32
2405403a:	e003      	b.n	24054044 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
2405403c:	697b      	ldr	r3, [r7, #20]
2405403e:	fab3 f383 	clz	r3, r3
24054042:	b2db      	uxtb	r3, r3
24054044:	3301      	adds	r3, #1
24054046:	f003 021f 	and.w	r2, r3, #31
2405404a:	4613      	mov	r3, r2
2405404c:	005b      	lsls	r3, r3, #1
2405404e:	4413      	add	r3, r2
24054050:	3b1e      	subs	r3, #30
24054052:	051b      	lsls	r3, r3, #20
24054054:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24054058:	430b      	orrs	r3, r1
2405405a:	683a      	ldr	r2, [r7, #0]
2405405c:	6892      	ldr	r2, [r2, #8]
2405405e:	4619      	mov	r1, r3
24054060:	f7fe ff62 	bl	24052f28 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
24054064:	683b      	ldr	r3, [r7, #0]
24054066:	681b      	ldr	r3, [r3, #0]
24054068:	2b00      	cmp	r3, #0
2405406a:	da77      	bge.n	2405415c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
2405406c:	4840      	ldr	r0, [pc, #256]	; (24054170 <HAL_ADC_ConfigChannel+0x5ac>)
2405406e:	f7fe fea7 	bl	24052dc0 <LL_ADC_GetCommonPathInternalCh>
24054072:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24054074:	483f      	ldr	r0, [pc, #252]	; (24054174 <HAL_ADC_ConfigChannel+0x5b0>)
24054076:	f7ff f825 	bl	240530c4 <LL_ADC_IsEnabled>
2405407a:	4604      	mov	r4, r0
2405407c:	483e      	ldr	r0, [pc, #248]	; (24054178 <HAL_ADC_ConfigChannel+0x5b4>)
2405407e:	f7ff f821 	bl	240530c4 <LL_ADC_IsEnabled>
24054082:	4603      	mov	r3, r0
24054084:	4323      	orrs	r3, r4
24054086:	2b00      	cmp	r3, #0
24054088:	d155      	bne.n	24054136 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
2405408a:	683b      	ldr	r3, [r7, #0]
2405408c:	681b      	ldr	r3, [r3, #0]
2405408e:	4a3b      	ldr	r2, [pc, #236]	; (2405417c <HAL_ADC_ConfigChannel+0x5b8>)
24054090:	4293      	cmp	r3, r2
24054092:	d122      	bne.n	240540da <HAL_ADC_ConfigChannel+0x516>
24054094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24054096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
2405409a:	2b00      	cmp	r3, #0
2405409c:	d11d      	bne.n	240540da <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
2405409e:	687b      	ldr	r3, [r7, #4]
240540a0:	681b      	ldr	r3, [r3, #0]
240540a2:	4a35      	ldr	r2, [pc, #212]	; (24054178 <HAL_ADC_ConfigChannel+0x5b4>)
240540a4:	4293      	cmp	r3, r2
240540a6:	d159      	bne.n	2405415c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
240540a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240540aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
240540ae:	4619      	mov	r1, r3
240540b0:	482f      	ldr	r0, [pc, #188]	; (24054170 <HAL_ADC_ConfigChannel+0x5ac>)
240540b2:	f7fe fe72 	bl	24052d9a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
240540b6:	4b32      	ldr	r3, [pc, #200]	; (24054180 <HAL_ADC_ConfigChannel+0x5bc>)
240540b8:	681b      	ldr	r3, [r3, #0]
240540ba:	099b      	lsrs	r3, r3, #6
240540bc:	4a31      	ldr	r2, [pc, #196]	; (24054184 <HAL_ADC_ConfigChannel+0x5c0>)
240540be:	fba2 2303 	umull	r2, r3, r2, r3
240540c2:	099b      	lsrs	r3, r3, #6
240540c4:	3301      	adds	r3, #1
240540c6:	005b      	lsls	r3, r3, #1
240540c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
240540ca:	e002      	b.n	240540d2 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
240540cc:	68bb      	ldr	r3, [r7, #8]
240540ce:	3b01      	subs	r3, #1
240540d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
240540d2:	68bb      	ldr	r3, [r7, #8]
240540d4:	2b00      	cmp	r3, #0
240540d6:	d1f9      	bne.n	240540cc <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
240540d8:	e040      	b.n	2405415c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
240540da:	683b      	ldr	r3, [r7, #0]
240540dc:	681b      	ldr	r3, [r3, #0]
240540de:	4a2a      	ldr	r2, [pc, #168]	; (24054188 <HAL_ADC_ConfigChannel+0x5c4>)
240540e0:	4293      	cmp	r3, r2
240540e2:	d111      	bne.n	24054108 <HAL_ADC_ConfigChannel+0x544>
240540e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240540e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
240540ea:	2b00      	cmp	r3, #0
240540ec:	d10c      	bne.n	24054108 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
240540ee:	687b      	ldr	r3, [r7, #4]
240540f0:	681b      	ldr	r3, [r3, #0]
240540f2:	4a21      	ldr	r2, [pc, #132]	; (24054178 <HAL_ADC_ConfigChannel+0x5b4>)
240540f4:	4293      	cmp	r3, r2
240540f6:	d131      	bne.n	2405415c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
240540f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240540fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
240540fe:	4619      	mov	r1, r3
24054100:	481b      	ldr	r0, [pc, #108]	; (24054170 <HAL_ADC_ConfigChannel+0x5ac>)
24054102:	f7fe fe4a 	bl	24052d9a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
24054106:	e029      	b.n	2405415c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
24054108:	683b      	ldr	r3, [r7, #0]
2405410a:	681b      	ldr	r3, [r3, #0]
2405410c:	4a1f      	ldr	r2, [pc, #124]	; (2405418c <HAL_ADC_ConfigChannel+0x5c8>)
2405410e:	4293      	cmp	r3, r2
24054110:	d124      	bne.n	2405415c <HAL_ADC_ConfigChannel+0x598>
24054112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24054114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24054118:	2b00      	cmp	r3, #0
2405411a:	d11f      	bne.n	2405415c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
2405411c:	687b      	ldr	r3, [r7, #4]
2405411e:	681b      	ldr	r3, [r3, #0]
24054120:	4a15      	ldr	r2, [pc, #84]	; (24054178 <HAL_ADC_ConfigChannel+0x5b4>)
24054122:	4293      	cmp	r3, r2
24054124:	d11a      	bne.n	2405415c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
24054126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24054128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2405412c:	4619      	mov	r1, r3
2405412e:	4810      	ldr	r0, [pc, #64]	; (24054170 <HAL_ADC_ConfigChannel+0x5ac>)
24054130:	f7fe fe33 	bl	24052d9a <LL_ADC_SetCommonPathInternalCh>
24054134:	e012      	b.n	2405415c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24054136:	687b      	ldr	r3, [r7, #4]
24054138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405413a:	f043 0220 	orr.w	r2, r3, #32
2405413e:	687b      	ldr	r3, [r7, #4]
24054140:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
24054142:	2301      	movs	r3, #1
24054144:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
24054148:	e008      	b.n	2405415c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2405414a:	687b      	ldr	r3, [r7, #4]
2405414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405414e:	f043 0220 	orr.w	r2, r3, #32
24054152:	687b      	ldr	r3, [r7, #4]
24054154:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
24054156:	2301      	movs	r3, #1
24054158:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
2405415c:	687b      	ldr	r3, [r7, #4]
2405415e:	2200      	movs	r2, #0
24054160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
24054164:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
24054168:	4618      	mov	r0, r3
2405416a:	3784      	adds	r7, #132	; 0x84
2405416c:	46bd      	mov	sp, r7
2405416e:	bd90      	pop	{r4, r7, pc}
24054170:	40022300 	.word	0x40022300
24054174:	40022000 	.word	0x40022000
24054178:	40022100 	.word	0x40022100
2405417c:	cb840000 	.word	0xcb840000
24054180:	20000030 	.word	0x20000030
24054184:	053e2d63 	.word	0x053e2d63
24054188:	bac04000 	.word	0xbac04000
2405418c:	cfb80000 	.word	0xcfb80000

24054190 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
24054190:	b580      	push	{r7, lr}
24054192:	b084      	sub	sp, #16
24054194:	af00      	add	r7, sp, #0
24054196:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
24054198:	687b      	ldr	r3, [r7, #4]
2405419a:	681b      	ldr	r3, [r3, #0]
2405419c:	4618      	mov	r0, r3
2405419e:	f7fe ff91 	bl	240530c4 <LL_ADC_IsEnabled>
240541a2:	4603      	mov	r3, r0
240541a4:	2b00      	cmp	r3, #0
240541a6:	d161      	bne.n	2405426c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
240541a8:	687b      	ldr	r3, [r7, #4]
240541aa:	681b      	ldr	r3, [r3, #0]
240541ac:	689a      	ldr	r2, [r3, #8]
240541ae:	4b32      	ldr	r3, [pc, #200]	; (24054278 <ADC_Enable+0xe8>)
240541b0:	4013      	ands	r3, r2
240541b2:	2b00      	cmp	r3, #0
240541b4:	d00d      	beq.n	240541d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240541b6:	687b      	ldr	r3, [r7, #4]
240541b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240541ba:	f043 0210 	orr.w	r2, r3, #16
240541be:	687b      	ldr	r3, [r7, #4]
240541c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240541c2:	687b      	ldr	r3, [r7, #4]
240541c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240541c6:	f043 0201 	orr.w	r2, r3, #1
240541ca:	687b      	ldr	r3, [r7, #4]
240541cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
240541ce:	2301      	movs	r3, #1
240541d0:	e04d      	b.n	2405426e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
240541d2:	687b      	ldr	r3, [r7, #4]
240541d4:	681b      	ldr	r3, [r3, #0]
240541d6:	4618      	mov	r0, r3
240541d8:	f7fe ff60 	bl	2405309c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
240541dc:	f7fe fd9a 	bl	24052d14 <HAL_GetTick>
240541e0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
240541e2:	4826      	ldr	r0, [pc, #152]	; (2405427c <ADC_Enable+0xec>)
240541e4:	f7fe fef0 	bl	24052fc8 <LL_ADC_GetMultimode>
240541e8:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240541ea:	687b      	ldr	r3, [r7, #4]
240541ec:	681b      	ldr	r3, [r3, #0]
240541ee:	4a24      	ldr	r2, [pc, #144]	; (24054280 <ADC_Enable+0xf0>)
240541f0:	4293      	cmp	r3, r2
240541f2:	d002      	beq.n	240541fa <ADC_Enable+0x6a>
240541f4:	687b      	ldr	r3, [r7, #4]
240541f6:	681b      	ldr	r3, [r3, #0]
240541f8:	e000      	b.n	240541fc <ADC_Enable+0x6c>
240541fa:	4b22      	ldr	r3, [pc, #136]	; (24054284 <ADC_Enable+0xf4>)
240541fc:	687a      	ldr	r2, [r7, #4]
240541fe:	6812      	ldr	r2, [r2, #0]
24054200:	4293      	cmp	r3, r2
24054202:	d02c      	beq.n	2405425e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054204:	68bb      	ldr	r3, [r7, #8]
24054206:	2b00      	cmp	r3, #0
24054208:	d130      	bne.n	2405426c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
2405420a:	e028      	b.n	2405425e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
2405420c:	687b      	ldr	r3, [r7, #4]
2405420e:	681b      	ldr	r3, [r3, #0]
24054210:	4618      	mov	r0, r3
24054212:	f7fe ff57 	bl	240530c4 <LL_ADC_IsEnabled>
24054216:	4603      	mov	r3, r0
24054218:	2b00      	cmp	r3, #0
2405421a:	d104      	bne.n	24054226 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
2405421c:	687b      	ldr	r3, [r7, #4]
2405421e:	681b      	ldr	r3, [r3, #0]
24054220:	4618      	mov	r0, r3
24054222:	f7fe ff3b 	bl	2405309c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
24054226:	f7fe fd75 	bl	24052d14 <HAL_GetTick>
2405422a:	4602      	mov	r2, r0
2405422c:	68fb      	ldr	r3, [r7, #12]
2405422e:	1ad3      	subs	r3, r2, r3
24054230:	2b02      	cmp	r3, #2
24054232:	d914      	bls.n	2405425e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
24054234:	687b      	ldr	r3, [r7, #4]
24054236:	681b      	ldr	r3, [r3, #0]
24054238:	681b      	ldr	r3, [r3, #0]
2405423a:	f003 0301 	and.w	r3, r3, #1
2405423e:	2b01      	cmp	r3, #1
24054240:	d00d      	beq.n	2405425e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24054242:	687b      	ldr	r3, [r7, #4]
24054244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054246:	f043 0210 	orr.w	r2, r3, #16
2405424a:	687b      	ldr	r3, [r7, #4]
2405424c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2405424e:	687b      	ldr	r3, [r7, #4]
24054250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24054252:	f043 0201 	orr.w	r2, r3, #1
24054256:	687b      	ldr	r3, [r7, #4]
24054258:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
2405425a:	2301      	movs	r3, #1
2405425c:	e007      	b.n	2405426e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
2405425e:	687b      	ldr	r3, [r7, #4]
24054260:	681b      	ldr	r3, [r3, #0]
24054262:	681b      	ldr	r3, [r3, #0]
24054264:	f003 0301 	and.w	r3, r3, #1
24054268:	2b01      	cmp	r3, #1
2405426a:	d1cf      	bne.n	2405420c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
2405426c:	2300      	movs	r3, #0
}
2405426e:	4618      	mov	r0, r3
24054270:	3710      	adds	r7, #16
24054272:	46bd      	mov	sp, r7
24054274:	bd80      	pop	{r7, pc}
24054276:	bf00      	nop
24054278:	8000003f 	.word	0x8000003f
2405427c:	40022300 	.word	0x40022300
24054280:	40022100 	.word	0x40022100
24054284:	40022000 	.word	0x40022000

24054288 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
24054288:	b580      	push	{r7, lr}
2405428a:	b084      	sub	sp, #16
2405428c:	af00      	add	r7, sp, #0
2405428e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
24054290:	4b60      	ldr	r3, [pc, #384]	; (24054414 <ADC_ConfigureBoostMode+0x18c>)
24054292:	689b      	ldr	r3, [r3, #8]
24054294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
24054298:	2b00      	cmp	r3, #0
2405429a:	d01c      	beq.n	240542d6 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
2405429c:	f006 fc4a 	bl	2405ab34 <HAL_RCC_GetHCLKFreq>
240542a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
240542a2:	687b      	ldr	r3, [r7, #4]
240542a4:	685b      	ldr	r3, [r3, #4]
240542a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
240542aa:	d010      	beq.n	240542ce <ADC_ConfigureBoostMode+0x46>
240542ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
240542b0:	d873      	bhi.n	2405439a <ADC_ConfigureBoostMode+0x112>
240542b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240542b6:	d002      	beq.n	240542be <ADC_ConfigureBoostMode+0x36>
240542b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240542bc:	d16d      	bne.n	2405439a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
240542be:	687b      	ldr	r3, [r7, #4]
240542c0:	685b      	ldr	r3, [r3, #4]
240542c2:	0c1b      	lsrs	r3, r3, #16
240542c4:	68fa      	ldr	r2, [r7, #12]
240542c6:	fbb2 f3f3 	udiv	r3, r2, r3
240542ca:	60fb      	str	r3, [r7, #12]
        break;
240542cc:	e068      	b.n	240543a0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
240542ce:	68fb      	ldr	r3, [r7, #12]
240542d0:	089b      	lsrs	r3, r3, #2
240542d2:	60fb      	str	r3, [r7, #12]
        break;
240542d4:	e064      	b.n	240543a0 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
240542d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
240542da:	f04f 0100 	mov.w	r1, #0
240542de:	f007 fe2d 	bl	2405bf3c <HAL_RCCEx_GetPeriphCLKFreq>
240542e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
240542e4:	687b      	ldr	r3, [r7, #4]
240542e6:	685b      	ldr	r3, [r3, #4]
240542e8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
240542ec:	d051      	beq.n	24054392 <ADC_ConfigureBoostMode+0x10a>
240542ee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
240542f2:	d854      	bhi.n	2405439e <ADC_ConfigureBoostMode+0x116>
240542f4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
240542f8:	d047      	beq.n	2405438a <ADC_ConfigureBoostMode+0x102>
240542fa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
240542fe:	d84e      	bhi.n	2405439e <ADC_ConfigureBoostMode+0x116>
24054300:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
24054304:	d03d      	beq.n	24054382 <ADC_ConfigureBoostMode+0xfa>
24054306:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
2405430a:	d848      	bhi.n	2405439e <ADC_ConfigureBoostMode+0x116>
2405430c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24054310:	d033      	beq.n	2405437a <ADC_ConfigureBoostMode+0xf2>
24054312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24054316:	d842      	bhi.n	2405439e <ADC_ConfigureBoostMode+0x116>
24054318:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
2405431c:	d029      	beq.n	24054372 <ADC_ConfigureBoostMode+0xea>
2405431e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
24054322:	d83c      	bhi.n	2405439e <ADC_ConfigureBoostMode+0x116>
24054324:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
24054328:	d01a      	beq.n	24054360 <ADC_ConfigureBoostMode+0xd8>
2405432a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
2405432e:	d836      	bhi.n	2405439e <ADC_ConfigureBoostMode+0x116>
24054330:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
24054334:	d014      	beq.n	24054360 <ADC_ConfigureBoostMode+0xd8>
24054336:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
2405433a:	d830      	bhi.n	2405439e <ADC_ConfigureBoostMode+0x116>
2405433c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24054340:	d00e      	beq.n	24054360 <ADC_ConfigureBoostMode+0xd8>
24054342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24054346:	d82a      	bhi.n	2405439e <ADC_ConfigureBoostMode+0x116>
24054348:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
2405434c:	d008      	beq.n	24054360 <ADC_ConfigureBoostMode+0xd8>
2405434e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
24054352:	d824      	bhi.n	2405439e <ADC_ConfigureBoostMode+0x116>
24054354:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24054358:	d002      	beq.n	24054360 <ADC_ConfigureBoostMode+0xd8>
2405435a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
2405435e:	d11e      	bne.n	2405439e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
24054360:	687b      	ldr	r3, [r7, #4]
24054362:	685b      	ldr	r3, [r3, #4]
24054364:	0c9b      	lsrs	r3, r3, #18
24054366:	005b      	lsls	r3, r3, #1
24054368:	68fa      	ldr	r2, [r7, #12]
2405436a:	fbb2 f3f3 	udiv	r3, r2, r3
2405436e:	60fb      	str	r3, [r7, #12]
        break;
24054370:	e016      	b.n	240543a0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
24054372:	68fb      	ldr	r3, [r7, #12]
24054374:	091b      	lsrs	r3, r3, #4
24054376:	60fb      	str	r3, [r7, #12]
        break;
24054378:	e012      	b.n	240543a0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
2405437a:	68fb      	ldr	r3, [r7, #12]
2405437c:	095b      	lsrs	r3, r3, #5
2405437e:	60fb      	str	r3, [r7, #12]
        break;
24054380:	e00e      	b.n	240543a0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
24054382:	68fb      	ldr	r3, [r7, #12]
24054384:	099b      	lsrs	r3, r3, #6
24054386:	60fb      	str	r3, [r7, #12]
        break;
24054388:	e00a      	b.n	240543a0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
2405438a:	68fb      	ldr	r3, [r7, #12]
2405438c:	09db      	lsrs	r3, r3, #7
2405438e:	60fb      	str	r3, [r7, #12]
        break;
24054390:	e006      	b.n	240543a0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
24054392:	68fb      	ldr	r3, [r7, #12]
24054394:	0a1b      	lsrs	r3, r3, #8
24054396:	60fb      	str	r3, [r7, #12]
        break;
24054398:	e002      	b.n	240543a0 <ADC_ConfigureBoostMode+0x118>
        break;
2405439a:	bf00      	nop
2405439c:	e000      	b.n	240543a0 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
2405439e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
240543a0:	68fb      	ldr	r3, [r7, #12]
240543a2:	085b      	lsrs	r3, r3, #1
240543a4:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
240543a6:	68fb      	ldr	r3, [r7, #12]
240543a8:	4a1b      	ldr	r2, [pc, #108]	; (24054418 <ADC_ConfigureBoostMode+0x190>)
240543aa:	4293      	cmp	r3, r2
240543ac:	d808      	bhi.n	240543c0 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
240543ae:	687b      	ldr	r3, [r7, #4]
240543b0:	681b      	ldr	r3, [r3, #0]
240543b2:	689a      	ldr	r2, [r3, #8]
240543b4:	687b      	ldr	r3, [r7, #4]
240543b6:	681b      	ldr	r3, [r3, #0]
240543b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
240543bc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
240543be:	e025      	b.n	2405440c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
240543c0:	68fb      	ldr	r3, [r7, #12]
240543c2:	4a16      	ldr	r2, [pc, #88]	; (2405441c <ADC_ConfigureBoostMode+0x194>)
240543c4:	4293      	cmp	r3, r2
240543c6:	d80a      	bhi.n	240543de <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
240543c8:	687b      	ldr	r3, [r7, #4]
240543ca:	681b      	ldr	r3, [r3, #0]
240543cc:	689b      	ldr	r3, [r3, #8]
240543ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
240543d2:	687b      	ldr	r3, [r7, #4]
240543d4:	681b      	ldr	r3, [r3, #0]
240543d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240543da:	609a      	str	r2, [r3, #8]
}
240543dc:	e016      	b.n	2405440c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
240543de:	68fb      	ldr	r3, [r7, #12]
240543e0:	4a0f      	ldr	r2, [pc, #60]	; (24054420 <ADC_ConfigureBoostMode+0x198>)
240543e2:	4293      	cmp	r3, r2
240543e4:	d80a      	bhi.n	240543fc <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
240543e6:	687b      	ldr	r3, [r7, #4]
240543e8:	681b      	ldr	r3, [r3, #0]
240543ea:	689b      	ldr	r3, [r3, #8]
240543ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
240543f0:	687b      	ldr	r3, [r7, #4]
240543f2:	681b      	ldr	r3, [r3, #0]
240543f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
240543f8:	609a      	str	r2, [r3, #8]
}
240543fa:	e007      	b.n	2405440c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
240543fc:	687b      	ldr	r3, [r7, #4]
240543fe:	681b      	ldr	r3, [r3, #0]
24054400:	689a      	ldr	r2, [r3, #8]
24054402:	687b      	ldr	r3, [r7, #4]
24054404:	681b      	ldr	r3, [r3, #0]
24054406:	f442 7240 	orr.w	r2, r2, #768	; 0x300
2405440a:	609a      	str	r2, [r3, #8]
}
2405440c:	bf00      	nop
2405440e:	3710      	adds	r7, #16
24054410:	46bd      	mov	sp, r7
24054412:	bd80      	pop	{r7, pc}
24054414:	40022300 	.word	0x40022300
24054418:	005f5e10 	.word	0x005f5e10
2405441c:	00bebc20 	.word	0x00bebc20
24054420:	017d7840 	.word	0x017d7840

24054424 <LL_ADC_IsEnabled>:
{
24054424:	b480      	push	{r7}
24054426:	b083      	sub	sp, #12
24054428:	af00      	add	r7, sp, #0
2405442a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
2405442c:	687b      	ldr	r3, [r7, #4]
2405442e:	689b      	ldr	r3, [r3, #8]
24054430:	f003 0301 	and.w	r3, r3, #1
24054434:	2b01      	cmp	r3, #1
24054436:	d101      	bne.n	2405443c <LL_ADC_IsEnabled+0x18>
24054438:	2301      	movs	r3, #1
2405443a:	e000      	b.n	2405443e <LL_ADC_IsEnabled+0x1a>
2405443c:	2300      	movs	r3, #0
}
2405443e:	4618      	mov	r0, r3
24054440:	370c      	adds	r7, #12
24054442:	46bd      	mov	sp, r7
24054444:	f85d 7b04 	ldr.w	r7, [sp], #4
24054448:	4770      	bx	lr

2405444a <LL_ADC_REG_IsConversionOngoing>:
{
2405444a:	b480      	push	{r7}
2405444c:	b083      	sub	sp, #12
2405444e:	af00      	add	r7, sp, #0
24054450:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
24054452:	687b      	ldr	r3, [r7, #4]
24054454:	689b      	ldr	r3, [r3, #8]
24054456:	f003 0304 	and.w	r3, r3, #4
2405445a:	2b04      	cmp	r3, #4
2405445c:	d101      	bne.n	24054462 <LL_ADC_REG_IsConversionOngoing+0x18>
2405445e:	2301      	movs	r3, #1
24054460:	e000      	b.n	24054464 <LL_ADC_REG_IsConversionOngoing+0x1a>
24054462:	2300      	movs	r3, #0
}
24054464:	4618      	mov	r0, r3
24054466:	370c      	adds	r7, #12
24054468:	46bd      	mov	sp, r7
2405446a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405446e:	4770      	bx	lr

24054470 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
24054470:	b480      	push	{r7}
24054472:	b083      	sub	sp, #12
24054474:	af00      	add	r7, sp, #0
24054476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
24054478:	bf00      	nop
2405447a:	370c      	adds	r7, #12
2405447c:	46bd      	mov	sp, r7
2405447e:	f85d 7b04 	ldr.w	r7, [sp], #4
24054482:	4770      	bx	lr

24054484 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
24054484:	b480      	push	{r7}
24054486:	b083      	sub	sp, #12
24054488:	af00      	add	r7, sp, #0
2405448a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
2405448c:	bf00      	nop
2405448e:	370c      	adds	r7, #12
24054490:	46bd      	mov	sp, r7
24054492:	f85d 7b04 	ldr.w	r7, [sp], #4
24054496:	4770      	bx	lr

24054498 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
24054498:	b480      	push	{r7}
2405449a:	b083      	sub	sp, #12
2405449c:	af00      	add	r7, sp, #0
2405449e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
240544a0:	bf00      	nop
240544a2:	370c      	adds	r7, #12
240544a4:	46bd      	mov	sp, r7
240544a6:	f85d 7b04 	ldr.w	r7, [sp], #4
240544aa:	4770      	bx	lr

240544ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
240544ac:	b480      	push	{r7}
240544ae:	b083      	sub	sp, #12
240544b0:	af00      	add	r7, sp, #0
240544b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
240544b4:	bf00      	nop
240544b6:	370c      	adds	r7, #12
240544b8:	46bd      	mov	sp, r7
240544ba:	f85d 7b04 	ldr.w	r7, [sp], #4
240544be:	4770      	bx	lr

240544c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
240544c0:	b480      	push	{r7}
240544c2:	b083      	sub	sp, #12
240544c4:	af00      	add	r7, sp, #0
240544c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
240544c8:	bf00      	nop
240544ca:	370c      	adds	r7, #12
240544cc:	46bd      	mov	sp, r7
240544ce:	f85d 7b04 	ldr.w	r7, [sp], #4
240544d2:	4770      	bx	lr

240544d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
240544d4:	b590      	push	{r4, r7, lr}
240544d6:	b09f      	sub	sp, #124	; 0x7c
240544d8:	af00      	add	r7, sp, #0
240544da:	6078      	str	r0, [r7, #4]
240544dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
240544de:	2300      	movs	r3, #0
240544e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
240544e4:	687b      	ldr	r3, [r7, #4]
240544e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
240544ea:	2b01      	cmp	r3, #1
240544ec:	d101      	bne.n	240544f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
240544ee:	2302      	movs	r3, #2
240544f0:	e080      	b.n	240545f4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
240544f2:	687b      	ldr	r3, [r7, #4]
240544f4:	2201      	movs	r2, #1
240544f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
240544fa:	2300      	movs	r3, #0
240544fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
240544fe:	2300      	movs	r3, #0
24054500:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
24054502:	687b      	ldr	r3, [r7, #4]
24054504:	681b      	ldr	r3, [r3, #0]
24054506:	4a3d      	ldr	r2, [pc, #244]	; (240545fc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
24054508:	4293      	cmp	r3, r2
2405450a:	d102      	bne.n	24054512 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
2405450c:	4b3c      	ldr	r3, [pc, #240]	; (24054600 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
2405450e:	60bb      	str	r3, [r7, #8]
24054510:	e001      	b.n	24054516 <HAL_ADCEx_MultiModeConfigChannel+0x42>
24054512:	2300      	movs	r3, #0
24054514:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
24054516:	68bb      	ldr	r3, [r7, #8]
24054518:	2b00      	cmp	r3, #0
2405451a:	d10b      	bne.n	24054534 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2405451c:	687b      	ldr	r3, [r7, #4]
2405451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054520:	f043 0220 	orr.w	r2, r3, #32
24054524:	687b      	ldr	r3, [r7, #4]
24054526:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
24054528:	687b      	ldr	r3, [r7, #4]
2405452a:	2200      	movs	r2, #0
2405452c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
24054530:	2301      	movs	r3, #1
24054532:	e05f      	b.n	240545f4 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
24054534:	68bb      	ldr	r3, [r7, #8]
24054536:	4618      	mov	r0, r3
24054538:	f7ff ff87 	bl	2405444a <LL_ADC_REG_IsConversionOngoing>
2405453c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2405453e:	687b      	ldr	r3, [r7, #4]
24054540:	681b      	ldr	r3, [r3, #0]
24054542:	4618      	mov	r0, r3
24054544:	f7ff ff81 	bl	2405444a <LL_ADC_REG_IsConversionOngoing>
24054548:	4603      	mov	r3, r0
2405454a:	2b00      	cmp	r3, #0
2405454c:	d141      	bne.n	240545d2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
2405454e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
24054550:	2b00      	cmp	r3, #0
24054552:	d13e      	bne.n	240545d2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
24054554:	4b2b      	ldr	r3, [pc, #172]	; (24054604 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
24054556:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24054558:	683b      	ldr	r3, [r7, #0]
2405455a:	681b      	ldr	r3, [r3, #0]
2405455c:	2b00      	cmp	r3, #0
2405455e:	d020      	beq.n	240545a2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
24054560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24054562:	689b      	ldr	r3, [r3, #8]
24054564:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24054568:	683b      	ldr	r3, [r7, #0]
2405456a:	685b      	ldr	r3, [r3, #4]
2405456c:	431a      	orrs	r2, r3
2405456e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24054570:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24054572:	4822      	ldr	r0, [pc, #136]	; (240545fc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
24054574:	f7ff ff56 	bl	24054424 <LL_ADC_IsEnabled>
24054578:	4604      	mov	r4, r0
2405457a:	4821      	ldr	r0, [pc, #132]	; (24054600 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
2405457c:	f7ff ff52 	bl	24054424 <LL_ADC_IsEnabled>
24054580:	4603      	mov	r3, r0
24054582:	4323      	orrs	r3, r4
24054584:	2b00      	cmp	r3, #0
24054586:	d12e      	bne.n	240545e6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
24054588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
2405458a:	689a      	ldr	r2, [r3, #8]
2405458c:	4b1e      	ldr	r3, [pc, #120]	; (24054608 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
2405458e:	4013      	ands	r3, r2
24054590:	683a      	ldr	r2, [r7, #0]
24054592:	6811      	ldr	r1, [r2, #0]
24054594:	683a      	ldr	r2, [r7, #0]
24054596:	6892      	ldr	r2, [r2, #8]
24054598:	430a      	orrs	r2, r1
2405459a:	431a      	orrs	r2, r3
2405459c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
2405459e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
240545a0:	e021      	b.n	240545e6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
240545a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240545a4:	689b      	ldr	r3, [r3, #8]
240545a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
240545aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240545ac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
240545ae:	4813      	ldr	r0, [pc, #76]	; (240545fc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
240545b0:	f7ff ff38 	bl	24054424 <LL_ADC_IsEnabled>
240545b4:	4604      	mov	r4, r0
240545b6:	4812      	ldr	r0, [pc, #72]	; (24054600 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
240545b8:	f7ff ff34 	bl	24054424 <LL_ADC_IsEnabled>
240545bc:	4603      	mov	r3, r0
240545be:	4323      	orrs	r3, r4
240545c0:	2b00      	cmp	r3, #0
240545c2:	d110      	bne.n	240545e6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
240545c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240545c6:	689a      	ldr	r2, [r3, #8]
240545c8:	4b0f      	ldr	r3, [pc, #60]	; (24054608 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
240545ca:	4013      	ands	r3, r2
240545cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
240545ce:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
240545d0:	e009      	b.n	240545e6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
240545d2:	687b      	ldr	r3, [r7, #4]
240545d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240545d6:	f043 0220 	orr.w	r2, r3, #32
240545da:	687b      	ldr	r3, [r7, #4]
240545dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
240545de:	2301      	movs	r3, #1
240545e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
240545e4:	e000      	b.n	240545e8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
240545e6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
240545e8:	687b      	ldr	r3, [r7, #4]
240545ea:	2200      	movs	r2, #0
240545ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
240545f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
240545f4:	4618      	mov	r0, r3
240545f6:	377c      	adds	r7, #124	; 0x7c
240545f8:	46bd      	mov	sp, r7
240545fa:	bd90      	pop	{r4, r7, pc}
240545fc:	40022000 	.word	0x40022000
24054600:	40022100 	.word	0x40022100
24054604:	40022300 	.word	0x40022300
24054608:	fffff0e0 	.word	0xfffff0e0

2405460c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2405460c:	b480      	push	{r7}
2405460e:	b085      	sub	sp, #20
24054610:	af00      	add	r7, sp, #0
24054612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
24054614:	687b      	ldr	r3, [r7, #4]
24054616:	f003 0307 	and.w	r3, r3, #7
2405461a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2405461c:	4b0b      	ldr	r3, [pc, #44]	; (2405464c <__NVIC_SetPriorityGrouping+0x40>)
2405461e:	68db      	ldr	r3, [r3, #12]
24054620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24054622:	68ba      	ldr	r2, [r7, #8]
24054624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
24054628:	4013      	ands	r3, r2
2405462a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
2405462c:	68fb      	ldr	r3, [r7, #12]
2405462e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24054630:	68bb      	ldr	r3, [r7, #8]
24054632:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
24054634:	4b06      	ldr	r3, [pc, #24]	; (24054650 <__NVIC_SetPriorityGrouping+0x44>)
24054636:	4313      	orrs	r3, r2
24054638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2405463a:	4a04      	ldr	r2, [pc, #16]	; (2405464c <__NVIC_SetPriorityGrouping+0x40>)
2405463c:	68bb      	ldr	r3, [r7, #8]
2405463e:	60d3      	str	r3, [r2, #12]
}
24054640:	bf00      	nop
24054642:	3714      	adds	r7, #20
24054644:	46bd      	mov	sp, r7
24054646:	f85d 7b04 	ldr.w	r7, [sp], #4
2405464a:	4770      	bx	lr
2405464c:	e000ed00 	.word	0xe000ed00
24054650:	05fa0000 	.word	0x05fa0000

24054654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
24054654:	b480      	push	{r7}
24054656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24054658:	4b04      	ldr	r3, [pc, #16]	; (2405466c <__NVIC_GetPriorityGrouping+0x18>)
2405465a:	68db      	ldr	r3, [r3, #12]
2405465c:	0a1b      	lsrs	r3, r3, #8
2405465e:	f003 0307 	and.w	r3, r3, #7
}
24054662:	4618      	mov	r0, r3
24054664:	46bd      	mov	sp, r7
24054666:	f85d 7b04 	ldr.w	r7, [sp], #4
2405466a:	4770      	bx	lr
2405466c:	e000ed00 	.word	0xe000ed00

24054670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
24054670:	b480      	push	{r7}
24054672:	b083      	sub	sp, #12
24054674:	af00      	add	r7, sp, #0
24054676:	4603      	mov	r3, r0
24054678:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
2405467a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2405467e:	2b00      	cmp	r3, #0
24054680:	db0b      	blt.n	2405469a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24054682:	88fb      	ldrh	r3, [r7, #6]
24054684:	f003 021f 	and.w	r2, r3, #31
24054688:	4907      	ldr	r1, [pc, #28]	; (240546a8 <__NVIC_EnableIRQ+0x38>)
2405468a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2405468e:	095b      	lsrs	r3, r3, #5
24054690:	2001      	movs	r0, #1
24054692:	fa00 f202 	lsl.w	r2, r0, r2
24054696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
2405469a:	bf00      	nop
2405469c:	370c      	adds	r7, #12
2405469e:	46bd      	mov	sp, r7
240546a0:	f85d 7b04 	ldr.w	r7, [sp], #4
240546a4:	4770      	bx	lr
240546a6:	bf00      	nop
240546a8:	e000e100 	.word	0xe000e100

240546ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
240546ac:	b480      	push	{r7}
240546ae:	b083      	sub	sp, #12
240546b0:	af00      	add	r7, sp, #0
240546b2:	4603      	mov	r3, r0
240546b4:	6039      	str	r1, [r7, #0]
240546b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
240546b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240546bc:	2b00      	cmp	r3, #0
240546be:	db0a      	blt.n	240546d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240546c0:	683b      	ldr	r3, [r7, #0]
240546c2:	b2da      	uxtb	r2, r3
240546c4:	490c      	ldr	r1, [pc, #48]	; (240546f8 <__NVIC_SetPriority+0x4c>)
240546c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240546ca:	0112      	lsls	r2, r2, #4
240546cc:	b2d2      	uxtb	r2, r2
240546ce:	440b      	add	r3, r1
240546d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
240546d4:	e00a      	b.n	240546ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240546d6:	683b      	ldr	r3, [r7, #0]
240546d8:	b2da      	uxtb	r2, r3
240546da:	4908      	ldr	r1, [pc, #32]	; (240546fc <__NVIC_SetPriority+0x50>)
240546dc:	88fb      	ldrh	r3, [r7, #6]
240546de:	f003 030f 	and.w	r3, r3, #15
240546e2:	3b04      	subs	r3, #4
240546e4:	0112      	lsls	r2, r2, #4
240546e6:	b2d2      	uxtb	r2, r2
240546e8:	440b      	add	r3, r1
240546ea:	761a      	strb	r2, [r3, #24]
}
240546ec:	bf00      	nop
240546ee:	370c      	adds	r7, #12
240546f0:	46bd      	mov	sp, r7
240546f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240546f6:	4770      	bx	lr
240546f8:	e000e100 	.word	0xe000e100
240546fc:	e000ed00 	.word	0xe000ed00

24054700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
24054700:	b480      	push	{r7}
24054702:	b089      	sub	sp, #36	; 0x24
24054704:	af00      	add	r7, sp, #0
24054706:	60f8      	str	r0, [r7, #12]
24054708:	60b9      	str	r1, [r7, #8]
2405470a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2405470c:	68fb      	ldr	r3, [r7, #12]
2405470e:	f003 0307 	and.w	r3, r3, #7
24054712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24054714:	69fb      	ldr	r3, [r7, #28]
24054716:	f1c3 0307 	rsb	r3, r3, #7
2405471a:	2b04      	cmp	r3, #4
2405471c:	bf28      	it	cs
2405471e:	2304      	movcs	r3, #4
24054720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24054722:	69fb      	ldr	r3, [r7, #28]
24054724:	3304      	adds	r3, #4
24054726:	2b06      	cmp	r3, #6
24054728:	d902      	bls.n	24054730 <NVIC_EncodePriority+0x30>
2405472a:	69fb      	ldr	r3, [r7, #28]
2405472c:	3b03      	subs	r3, #3
2405472e:	e000      	b.n	24054732 <NVIC_EncodePriority+0x32>
24054730:	2300      	movs	r3, #0
24054732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24054734:	f04f 32ff 	mov.w	r2, #4294967295
24054738:	69bb      	ldr	r3, [r7, #24]
2405473a:	fa02 f303 	lsl.w	r3, r2, r3
2405473e:	43da      	mvns	r2, r3
24054740:	68bb      	ldr	r3, [r7, #8]
24054742:	401a      	ands	r2, r3
24054744:	697b      	ldr	r3, [r7, #20]
24054746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24054748:	f04f 31ff 	mov.w	r1, #4294967295
2405474c:	697b      	ldr	r3, [r7, #20]
2405474e:	fa01 f303 	lsl.w	r3, r1, r3
24054752:	43d9      	mvns	r1, r3
24054754:	687b      	ldr	r3, [r7, #4]
24054756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24054758:	4313      	orrs	r3, r2
         );
}
2405475a:	4618      	mov	r0, r3
2405475c:	3724      	adds	r7, #36	; 0x24
2405475e:	46bd      	mov	sp, r7
24054760:	f85d 7b04 	ldr.w	r7, [sp], #4
24054764:	4770      	bx	lr
	...

24054768 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
24054768:	b480      	push	{r7}
2405476a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
2405476c:	f3bf 8f4f 	dsb	sy
}
24054770:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
24054772:	4b06      	ldr	r3, [pc, #24]	; (2405478c <__NVIC_SystemReset+0x24>)
24054774:	68db      	ldr	r3, [r3, #12]
24054776:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
2405477a:	4904      	ldr	r1, [pc, #16]	; (2405478c <__NVIC_SystemReset+0x24>)
2405477c:	4b04      	ldr	r3, [pc, #16]	; (24054790 <__NVIC_SystemReset+0x28>)
2405477e:	4313      	orrs	r3, r2
24054780:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
24054782:	f3bf 8f4f 	dsb	sy
}
24054786:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
24054788:	bf00      	nop
2405478a:	e7fd      	b.n	24054788 <__NVIC_SystemReset+0x20>
2405478c:	e000ed00 	.word	0xe000ed00
24054790:	05fa0004 	.word	0x05fa0004

24054794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
24054794:	b580      	push	{r7, lr}
24054796:	b082      	sub	sp, #8
24054798:	af00      	add	r7, sp, #0
2405479a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
2405479c:	687b      	ldr	r3, [r7, #4]
2405479e:	3b01      	subs	r3, #1
240547a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
240547a4:	d301      	bcc.n	240547aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
240547a6:	2301      	movs	r3, #1
240547a8:	e00f      	b.n	240547ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
240547aa:	4a0a      	ldr	r2, [pc, #40]	; (240547d4 <SysTick_Config+0x40>)
240547ac:	687b      	ldr	r3, [r7, #4]
240547ae:	3b01      	subs	r3, #1
240547b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
240547b2:	210f      	movs	r1, #15
240547b4:	f04f 30ff 	mov.w	r0, #4294967295
240547b8:	f7ff ff78 	bl	240546ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
240547bc:	4b05      	ldr	r3, [pc, #20]	; (240547d4 <SysTick_Config+0x40>)
240547be:	2200      	movs	r2, #0
240547c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
240547c2:	4b04      	ldr	r3, [pc, #16]	; (240547d4 <SysTick_Config+0x40>)
240547c4:	2207      	movs	r2, #7
240547c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
240547c8:	2300      	movs	r3, #0
}
240547ca:	4618      	mov	r0, r3
240547cc:	3708      	adds	r7, #8
240547ce:	46bd      	mov	sp, r7
240547d0:	bd80      	pop	{r7, pc}
240547d2:	bf00      	nop
240547d4:	e000e010 	.word	0xe000e010

240547d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
240547d8:	b580      	push	{r7, lr}
240547da:	b082      	sub	sp, #8
240547dc:	af00      	add	r7, sp, #0
240547de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
240547e0:	6878      	ldr	r0, [r7, #4]
240547e2:	f7ff ff13 	bl	2405460c <__NVIC_SetPriorityGrouping>
}
240547e6:	bf00      	nop
240547e8:	3708      	adds	r7, #8
240547ea:	46bd      	mov	sp, r7
240547ec:	bd80      	pop	{r7, pc}

240547ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
240547ee:	b580      	push	{r7, lr}
240547f0:	b086      	sub	sp, #24
240547f2:	af00      	add	r7, sp, #0
240547f4:	4603      	mov	r3, r0
240547f6:	60b9      	str	r1, [r7, #8]
240547f8:	607a      	str	r2, [r7, #4]
240547fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
240547fc:	f7ff ff2a 	bl	24054654 <__NVIC_GetPriorityGrouping>
24054800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
24054802:	687a      	ldr	r2, [r7, #4]
24054804:	68b9      	ldr	r1, [r7, #8]
24054806:	6978      	ldr	r0, [r7, #20]
24054808:	f7ff ff7a 	bl	24054700 <NVIC_EncodePriority>
2405480c:	4602      	mov	r2, r0
2405480e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24054812:	4611      	mov	r1, r2
24054814:	4618      	mov	r0, r3
24054816:	f7ff ff49 	bl	240546ac <__NVIC_SetPriority>
}
2405481a:	bf00      	nop
2405481c:	3718      	adds	r7, #24
2405481e:	46bd      	mov	sp, r7
24054820:	bd80      	pop	{r7, pc}

24054822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
24054822:	b580      	push	{r7, lr}
24054824:	b082      	sub	sp, #8
24054826:	af00      	add	r7, sp, #0
24054828:	4603      	mov	r3, r0
2405482a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
2405482c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24054830:	4618      	mov	r0, r3
24054832:	f7ff ff1d 	bl	24054670 <__NVIC_EnableIRQ>
}
24054836:	bf00      	nop
24054838:	3708      	adds	r7, #8
2405483a:	46bd      	mov	sp, r7
2405483c:	bd80      	pop	{r7, pc}

2405483e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
2405483e:	b580      	push	{r7, lr}
24054840:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
24054842:	f7ff ff91 	bl	24054768 <__NVIC_SystemReset>

24054846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24054846:	b580      	push	{r7, lr}
24054848:	b082      	sub	sp, #8
2405484a:	af00      	add	r7, sp, #0
2405484c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2405484e:	6878      	ldr	r0, [r7, #4]
24054850:	f7ff ffa0 	bl	24054794 <SysTick_Config>
24054854:	4603      	mov	r3, r0
}
24054856:	4618      	mov	r0, r3
24054858:	3708      	adds	r7, #8
2405485a:	46bd      	mov	sp, r7
2405485c:	bd80      	pop	{r7, pc}

2405485e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
2405485e:	b580      	push	{r7, lr}
24054860:	b082      	sub	sp, #8
24054862:	af00      	add	r7, sp, #0
24054864:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
24054866:	687b      	ldr	r3, [r7, #4]
24054868:	2b00      	cmp	r3, #0
2405486a:	d101      	bne.n	24054870 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
2405486c:	2301      	movs	r3, #1
2405486e:	e014      	b.n	2405489a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
24054870:	687b      	ldr	r3, [r7, #4]
24054872:	791b      	ldrb	r3, [r3, #4]
24054874:	b2db      	uxtb	r3, r3
24054876:	2b00      	cmp	r3, #0
24054878:	d105      	bne.n	24054886 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
2405487a:	687b      	ldr	r3, [r7, #4]
2405487c:	2200      	movs	r2, #0
2405487e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
24054880:	6878      	ldr	r0, [r7, #4]
24054882:	f7fd fba3 	bl	24051fcc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
24054886:	687b      	ldr	r3, [r7, #4]
24054888:	2202      	movs	r2, #2
2405488a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
2405488c:	687b      	ldr	r3, [r7, #4]
2405488e:	2200      	movs	r2, #0
24054890:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
24054892:	687b      	ldr	r3, [r7, #4]
24054894:	2201      	movs	r2, #1
24054896:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
24054898:	2300      	movs	r3, #0
}
2405489a:	4618      	mov	r0, r3
2405489c:	3708      	adds	r7, #8
2405489e:	46bd      	mov	sp, r7
240548a0:	bd80      	pop	{r7, pc}

240548a2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
240548a2:	b480      	push	{r7}
240548a4:	b083      	sub	sp, #12
240548a6:	af00      	add	r7, sp, #0
240548a8:	6078      	str	r0, [r7, #4]
240548aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
240548ac:	687b      	ldr	r3, [r7, #4]
240548ae:	795b      	ldrb	r3, [r3, #5]
240548b0:	2b01      	cmp	r3, #1
240548b2:	d101      	bne.n	240548b8 <HAL_DAC_Start+0x16>
240548b4:	2302      	movs	r3, #2
240548b6:	e040      	b.n	2405493a <HAL_DAC_Start+0x98>
240548b8:	687b      	ldr	r3, [r7, #4]
240548ba:	2201      	movs	r2, #1
240548bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
240548be:	687b      	ldr	r3, [r7, #4]
240548c0:	2202      	movs	r2, #2
240548c2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
240548c4:	687b      	ldr	r3, [r7, #4]
240548c6:	681b      	ldr	r3, [r3, #0]
240548c8:	6819      	ldr	r1, [r3, #0]
240548ca:	683b      	ldr	r3, [r7, #0]
240548cc:	f003 0310 	and.w	r3, r3, #16
240548d0:	2201      	movs	r2, #1
240548d2:	409a      	lsls	r2, r3
240548d4:	687b      	ldr	r3, [r7, #4]
240548d6:	681b      	ldr	r3, [r3, #0]
240548d8:	430a      	orrs	r2, r1
240548da:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
240548dc:	683b      	ldr	r3, [r7, #0]
240548de:	2b00      	cmp	r3, #0
240548e0:	d10f      	bne.n	24054902 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
240548e2:	687b      	ldr	r3, [r7, #4]
240548e4:	681b      	ldr	r3, [r3, #0]
240548e6:	681b      	ldr	r3, [r3, #0]
240548e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
240548ec:	2b02      	cmp	r3, #2
240548ee:	d11d      	bne.n	2405492c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
240548f0:	687b      	ldr	r3, [r7, #4]
240548f2:	681b      	ldr	r3, [r3, #0]
240548f4:	685a      	ldr	r2, [r3, #4]
240548f6:	687b      	ldr	r3, [r7, #4]
240548f8:	681b      	ldr	r3, [r3, #0]
240548fa:	f042 0201 	orr.w	r2, r2, #1
240548fe:	605a      	str	r2, [r3, #4]
24054900:	e014      	b.n	2405492c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
24054902:	687b      	ldr	r3, [r7, #4]
24054904:	681b      	ldr	r3, [r3, #0]
24054906:	681b      	ldr	r3, [r3, #0]
24054908:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
2405490c:	683b      	ldr	r3, [r7, #0]
2405490e:	f003 0310 	and.w	r3, r3, #16
24054912:	2102      	movs	r1, #2
24054914:	fa01 f303 	lsl.w	r3, r1, r3
24054918:	429a      	cmp	r2, r3
2405491a:	d107      	bne.n	2405492c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
2405491c:	687b      	ldr	r3, [r7, #4]
2405491e:	681b      	ldr	r3, [r3, #0]
24054920:	685a      	ldr	r2, [r3, #4]
24054922:	687b      	ldr	r3, [r7, #4]
24054924:	681b      	ldr	r3, [r3, #0]
24054926:	f042 0202 	orr.w	r2, r2, #2
2405492a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
2405492c:	687b      	ldr	r3, [r7, #4]
2405492e:	2201      	movs	r2, #1
24054930:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
24054932:	687b      	ldr	r3, [r7, #4]
24054934:	2200      	movs	r2, #0
24054936:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
24054938:	2300      	movs	r3, #0
}
2405493a:	4618      	mov	r0, r3
2405493c:	370c      	adds	r7, #12
2405493e:	46bd      	mov	sp, r7
24054940:	f85d 7b04 	ldr.w	r7, [sp], #4
24054944:	4770      	bx	lr

24054946 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
24054946:	b480      	push	{r7}
24054948:	b087      	sub	sp, #28
2405494a:	af00      	add	r7, sp, #0
2405494c:	60f8      	str	r0, [r7, #12]
2405494e:	60b9      	str	r1, [r7, #8]
24054950:	607a      	str	r2, [r7, #4]
24054952:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
24054954:	2300      	movs	r3, #0
24054956:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
24054958:	68fb      	ldr	r3, [r7, #12]
2405495a:	681b      	ldr	r3, [r3, #0]
2405495c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
2405495e:	68bb      	ldr	r3, [r7, #8]
24054960:	2b00      	cmp	r3, #0
24054962:	d105      	bne.n	24054970 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
24054964:	697a      	ldr	r2, [r7, #20]
24054966:	687b      	ldr	r3, [r7, #4]
24054968:	4413      	add	r3, r2
2405496a:	3308      	adds	r3, #8
2405496c:	617b      	str	r3, [r7, #20]
2405496e:	e004      	b.n	2405497a <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
24054970:	697a      	ldr	r2, [r7, #20]
24054972:	687b      	ldr	r3, [r7, #4]
24054974:	4413      	add	r3, r2
24054976:	3314      	adds	r3, #20
24054978:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
2405497a:	697b      	ldr	r3, [r7, #20]
2405497c:	461a      	mov	r2, r3
2405497e:	683b      	ldr	r3, [r7, #0]
24054980:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
24054982:	2300      	movs	r3, #0
}
24054984:	4618      	mov	r0, r3
24054986:	371c      	adds	r7, #28
24054988:	46bd      	mov	sp, r7
2405498a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405498e:	4770      	bx	lr

24054990 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
24054990:	b580      	push	{r7, lr}
24054992:	b088      	sub	sp, #32
24054994:	af00      	add	r7, sp, #0
24054996:	60f8      	str	r0, [r7, #12]
24054998:	60b9      	str	r1, [r7, #8]
2405499a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
2405499c:	68fb      	ldr	r3, [r7, #12]
2405499e:	795b      	ldrb	r3, [r3, #5]
240549a0:	2b01      	cmp	r3, #1
240549a2:	d101      	bne.n	240549a8 <HAL_DAC_ConfigChannel+0x18>
240549a4:	2302      	movs	r3, #2
240549a6:	e12a      	b.n	24054bfe <HAL_DAC_ConfigChannel+0x26e>
240549a8:	68fb      	ldr	r3, [r7, #12]
240549aa:	2201      	movs	r2, #1
240549ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
240549ae:	68fb      	ldr	r3, [r7, #12]
240549b0:	2202      	movs	r2, #2
240549b2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
240549b4:	68bb      	ldr	r3, [r7, #8]
240549b6:	681b      	ldr	r3, [r3, #0]
240549b8:	2b04      	cmp	r3, #4
240549ba:	f040 8081 	bne.w	24054ac0 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
240549be:	f7fe f9a9 	bl	24052d14 <HAL_GetTick>
240549c2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
240549c4:	687b      	ldr	r3, [r7, #4]
240549c6:	2b00      	cmp	r3, #0
240549c8:	d140      	bne.n	24054a4c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
240549ca:	e018      	b.n	240549fe <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
240549cc:	f7fe f9a2 	bl	24052d14 <HAL_GetTick>
240549d0:	4602      	mov	r2, r0
240549d2:	69bb      	ldr	r3, [r7, #24]
240549d4:	1ad3      	subs	r3, r2, r3
240549d6:	2b01      	cmp	r3, #1
240549d8:	d911      	bls.n	240549fe <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
240549da:	68fb      	ldr	r3, [r7, #12]
240549dc:	681b      	ldr	r3, [r3, #0]
240549de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240549e0:	4b89      	ldr	r3, [pc, #548]	; (24054c08 <HAL_DAC_ConfigChannel+0x278>)
240549e2:	4013      	ands	r3, r2
240549e4:	2b00      	cmp	r3, #0
240549e6:	d00a      	beq.n	240549fe <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
240549e8:	68fb      	ldr	r3, [r7, #12]
240549ea:	691b      	ldr	r3, [r3, #16]
240549ec:	f043 0208 	orr.w	r2, r3, #8
240549f0:	68fb      	ldr	r3, [r7, #12]
240549f2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
240549f4:	68fb      	ldr	r3, [r7, #12]
240549f6:	2203      	movs	r2, #3
240549f8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
240549fa:	2303      	movs	r3, #3
240549fc:	e0ff      	b.n	24054bfe <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
240549fe:	68fb      	ldr	r3, [r7, #12]
24054a00:	681b      	ldr	r3, [r3, #0]
24054a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24054a04:	4b80      	ldr	r3, [pc, #512]	; (24054c08 <HAL_DAC_ConfigChannel+0x278>)
24054a06:	4013      	ands	r3, r2
24054a08:	2b00      	cmp	r3, #0
24054a0a:	d1df      	bne.n	240549cc <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
24054a0c:	2001      	movs	r0, #1
24054a0e:	f7fe f98d 	bl	24052d2c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
24054a12:	68fb      	ldr	r3, [r7, #12]
24054a14:	681b      	ldr	r3, [r3, #0]
24054a16:	68ba      	ldr	r2, [r7, #8]
24054a18:	6992      	ldr	r2, [r2, #24]
24054a1a:	641a      	str	r2, [r3, #64]	; 0x40
24054a1c:	e023      	b.n	24054a66 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
24054a1e:	f7fe f979 	bl	24052d14 <HAL_GetTick>
24054a22:	4602      	mov	r2, r0
24054a24:	69bb      	ldr	r3, [r7, #24]
24054a26:	1ad3      	subs	r3, r2, r3
24054a28:	2b01      	cmp	r3, #1
24054a2a:	d90f      	bls.n	24054a4c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
24054a2c:	68fb      	ldr	r3, [r7, #12]
24054a2e:	681b      	ldr	r3, [r3, #0]
24054a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24054a32:	2b00      	cmp	r3, #0
24054a34:	da0a      	bge.n	24054a4c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
24054a36:	68fb      	ldr	r3, [r7, #12]
24054a38:	691b      	ldr	r3, [r3, #16]
24054a3a:	f043 0208 	orr.w	r2, r3, #8
24054a3e:	68fb      	ldr	r3, [r7, #12]
24054a40:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
24054a42:	68fb      	ldr	r3, [r7, #12]
24054a44:	2203      	movs	r2, #3
24054a46:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
24054a48:	2303      	movs	r3, #3
24054a4a:	e0d8      	b.n	24054bfe <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
24054a4c:	68fb      	ldr	r3, [r7, #12]
24054a4e:	681b      	ldr	r3, [r3, #0]
24054a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24054a52:	2b00      	cmp	r3, #0
24054a54:	dbe3      	blt.n	24054a1e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
24054a56:	2001      	movs	r0, #1
24054a58:	f7fe f968 	bl	24052d2c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
24054a5c:	68fb      	ldr	r3, [r7, #12]
24054a5e:	681b      	ldr	r3, [r3, #0]
24054a60:	68ba      	ldr	r2, [r7, #8]
24054a62:	6992      	ldr	r2, [r2, #24]
24054a64:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
24054a66:	68fb      	ldr	r3, [r7, #12]
24054a68:	681b      	ldr	r3, [r3, #0]
24054a6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
24054a6c:	687b      	ldr	r3, [r7, #4]
24054a6e:	f003 0310 	and.w	r3, r3, #16
24054a72:	f240 31ff 	movw	r1, #1023	; 0x3ff
24054a76:	fa01 f303 	lsl.w	r3, r1, r3
24054a7a:	43db      	mvns	r3, r3
24054a7c:	ea02 0103 	and.w	r1, r2, r3
24054a80:	68bb      	ldr	r3, [r7, #8]
24054a82:	69da      	ldr	r2, [r3, #28]
24054a84:	687b      	ldr	r3, [r7, #4]
24054a86:	f003 0310 	and.w	r3, r3, #16
24054a8a:	409a      	lsls	r2, r3
24054a8c:	68fb      	ldr	r3, [r7, #12]
24054a8e:	681b      	ldr	r3, [r3, #0]
24054a90:	430a      	orrs	r2, r1
24054a92:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
24054a94:	68fb      	ldr	r3, [r7, #12]
24054a96:	681b      	ldr	r3, [r3, #0]
24054a98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
24054a9a:	687b      	ldr	r3, [r7, #4]
24054a9c:	f003 0310 	and.w	r3, r3, #16
24054aa0:	21ff      	movs	r1, #255	; 0xff
24054aa2:	fa01 f303 	lsl.w	r3, r1, r3
24054aa6:	43db      	mvns	r3, r3
24054aa8:	ea02 0103 	and.w	r1, r2, r3
24054aac:	68bb      	ldr	r3, [r7, #8]
24054aae:	6a1a      	ldr	r2, [r3, #32]
24054ab0:	687b      	ldr	r3, [r7, #4]
24054ab2:	f003 0310 	and.w	r3, r3, #16
24054ab6:	409a      	lsls	r2, r3
24054ab8:	68fb      	ldr	r3, [r7, #12]
24054aba:	681b      	ldr	r3, [r3, #0]
24054abc:	430a      	orrs	r2, r1
24054abe:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
24054ac0:	68bb      	ldr	r3, [r7, #8]
24054ac2:	691b      	ldr	r3, [r3, #16]
24054ac4:	2b01      	cmp	r3, #1
24054ac6:	d11d      	bne.n	24054b04 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
24054ac8:	68fb      	ldr	r3, [r7, #12]
24054aca:	681b      	ldr	r3, [r3, #0]
24054acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24054ace:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
24054ad0:	687b      	ldr	r3, [r7, #4]
24054ad2:	f003 0310 	and.w	r3, r3, #16
24054ad6:	221f      	movs	r2, #31
24054ad8:	fa02 f303 	lsl.w	r3, r2, r3
24054adc:	43db      	mvns	r3, r3
24054ade:	697a      	ldr	r2, [r7, #20]
24054ae0:	4013      	ands	r3, r2
24054ae2:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
24054ae4:	68bb      	ldr	r3, [r7, #8]
24054ae6:	695b      	ldr	r3, [r3, #20]
24054ae8:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24054aea:	687b      	ldr	r3, [r7, #4]
24054aec:	f003 0310 	and.w	r3, r3, #16
24054af0:	693a      	ldr	r2, [r7, #16]
24054af2:	fa02 f303 	lsl.w	r3, r2, r3
24054af6:	697a      	ldr	r2, [r7, #20]
24054af8:	4313      	orrs	r3, r2
24054afa:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
24054afc:	68fb      	ldr	r3, [r7, #12]
24054afe:	681b      	ldr	r3, [r3, #0]
24054b00:	697a      	ldr	r2, [r7, #20]
24054b02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
24054b04:	68fb      	ldr	r3, [r7, #12]
24054b06:	681b      	ldr	r3, [r3, #0]
24054b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24054b0a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
24054b0c:	687b      	ldr	r3, [r7, #4]
24054b0e:	f003 0310 	and.w	r3, r3, #16
24054b12:	2207      	movs	r2, #7
24054b14:	fa02 f303 	lsl.w	r3, r2, r3
24054b18:	43db      	mvns	r3, r3
24054b1a:	697a      	ldr	r2, [r7, #20]
24054b1c:	4013      	ands	r3, r2
24054b1e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
24054b20:	68bb      	ldr	r3, [r7, #8]
24054b22:	68db      	ldr	r3, [r3, #12]
24054b24:	2b01      	cmp	r3, #1
24054b26:	d102      	bne.n	24054b2e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
24054b28:	2300      	movs	r3, #0
24054b2a:	61fb      	str	r3, [r7, #28]
24054b2c:	e00f      	b.n	24054b4e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
24054b2e:	68bb      	ldr	r3, [r7, #8]
24054b30:	68db      	ldr	r3, [r3, #12]
24054b32:	2b02      	cmp	r3, #2
24054b34:	d102      	bne.n	24054b3c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
24054b36:	2301      	movs	r3, #1
24054b38:	61fb      	str	r3, [r7, #28]
24054b3a:	e008      	b.n	24054b4e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
24054b3c:	68bb      	ldr	r3, [r7, #8]
24054b3e:	689b      	ldr	r3, [r3, #8]
24054b40:	2b00      	cmp	r3, #0
24054b42:	d102      	bne.n	24054b4a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
24054b44:	2301      	movs	r3, #1
24054b46:	61fb      	str	r3, [r7, #28]
24054b48:	e001      	b.n	24054b4e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
24054b4a:	2300      	movs	r3, #0
24054b4c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
24054b4e:	68bb      	ldr	r3, [r7, #8]
24054b50:	681a      	ldr	r2, [r3, #0]
24054b52:	68bb      	ldr	r3, [r7, #8]
24054b54:	689b      	ldr	r3, [r3, #8]
24054b56:	4313      	orrs	r3, r2
24054b58:	69fa      	ldr	r2, [r7, #28]
24054b5a:	4313      	orrs	r3, r2
24054b5c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24054b5e:	687b      	ldr	r3, [r7, #4]
24054b60:	f003 0310 	and.w	r3, r3, #16
24054b64:	693a      	ldr	r2, [r7, #16]
24054b66:	fa02 f303 	lsl.w	r3, r2, r3
24054b6a:	697a      	ldr	r2, [r7, #20]
24054b6c:	4313      	orrs	r3, r2
24054b6e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
24054b70:	68fb      	ldr	r3, [r7, #12]
24054b72:	681b      	ldr	r3, [r3, #0]
24054b74:	697a      	ldr	r2, [r7, #20]
24054b76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
24054b78:	68fb      	ldr	r3, [r7, #12]
24054b7a:	681b      	ldr	r3, [r3, #0]
24054b7c:	6819      	ldr	r1, [r3, #0]
24054b7e:	687b      	ldr	r3, [r7, #4]
24054b80:	f003 0310 	and.w	r3, r3, #16
24054b84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
24054b88:	fa02 f303 	lsl.w	r3, r2, r3
24054b8c:	43da      	mvns	r2, r3
24054b8e:	68fb      	ldr	r3, [r7, #12]
24054b90:	681b      	ldr	r3, [r3, #0]
24054b92:	400a      	ands	r2, r1
24054b94:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
24054b96:	68fb      	ldr	r3, [r7, #12]
24054b98:	681b      	ldr	r3, [r3, #0]
24054b9a:	681b      	ldr	r3, [r3, #0]
24054b9c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
24054b9e:	687b      	ldr	r3, [r7, #4]
24054ba0:	f003 0310 	and.w	r3, r3, #16
24054ba4:	f640 72fe 	movw	r2, #4094	; 0xffe
24054ba8:	fa02 f303 	lsl.w	r3, r2, r3
24054bac:	43db      	mvns	r3, r3
24054bae:	697a      	ldr	r2, [r7, #20]
24054bb0:	4013      	ands	r3, r2
24054bb2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
24054bb4:	68bb      	ldr	r3, [r7, #8]
24054bb6:	685b      	ldr	r3, [r3, #4]
24054bb8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24054bba:	687b      	ldr	r3, [r7, #4]
24054bbc:	f003 0310 	and.w	r3, r3, #16
24054bc0:	693a      	ldr	r2, [r7, #16]
24054bc2:	fa02 f303 	lsl.w	r3, r2, r3
24054bc6:	697a      	ldr	r2, [r7, #20]
24054bc8:	4313      	orrs	r3, r2
24054bca:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
24054bcc:	68fb      	ldr	r3, [r7, #12]
24054bce:	681b      	ldr	r3, [r3, #0]
24054bd0:	697a      	ldr	r2, [r7, #20]
24054bd2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
24054bd4:	68fb      	ldr	r3, [r7, #12]
24054bd6:	681b      	ldr	r3, [r3, #0]
24054bd8:	6819      	ldr	r1, [r3, #0]
24054bda:	687b      	ldr	r3, [r7, #4]
24054bdc:	f003 0310 	and.w	r3, r3, #16
24054be0:	22c0      	movs	r2, #192	; 0xc0
24054be2:	fa02 f303 	lsl.w	r3, r2, r3
24054be6:	43da      	mvns	r2, r3
24054be8:	68fb      	ldr	r3, [r7, #12]
24054bea:	681b      	ldr	r3, [r3, #0]
24054bec:	400a      	ands	r2, r1
24054bee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
24054bf0:	68fb      	ldr	r3, [r7, #12]
24054bf2:	2201      	movs	r2, #1
24054bf4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
24054bf6:	68fb      	ldr	r3, [r7, #12]
24054bf8:	2200      	movs	r2, #0
24054bfa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
24054bfc:	2300      	movs	r3, #0
}
24054bfe:	4618      	mov	r0, r3
24054c00:	3720      	adds	r7, #32
24054c02:	46bd      	mov	sp, r7
24054c04:	bd80      	pop	{r7, pc}
24054c06:	bf00      	nop
24054c08:	20008000 	.word	0x20008000

24054c0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
24054c0c:	b580      	push	{r7, lr}
24054c0e:	b086      	sub	sp, #24
24054c10:	af00      	add	r7, sp, #0
24054c12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
24054c14:	f7fe f87e 	bl	24052d14 <HAL_GetTick>
24054c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24054c1a:	687b      	ldr	r3, [r7, #4]
24054c1c:	2b00      	cmp	r3, #0
24054c1e:	d101      	bne.n	24054c24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
24054c20:	2301      	movs	r3, #1
24054c22:	e37d      	b.n	24055320 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24054c24:	687b      	ldr	r3, [r7, #4]
24054c26:	681b      	ldr	r3, [r3, #0]
24054c28:	4a66      	ldr	r2, [pc, #408]	; (24054dc4 <HAL_DMA_Init+0x1b8>)
24054c2a:	4293      	cmp	r3, r2
24054c2c:	d04a      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054c2e:	687b      	ldr	r3, [r7, #4]
24054c30:	681b      	ldr	r3, [r3, #0]
24054c32:	4a65      	ldr	r2, [pc, #404]	; (24054dc8 <HAL_DMA_Init+0x1bc>)
24054c34:	4293      	cmp	r3, r2
24054c36:	d045      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054c38:	687b      	ldr	r3, [r7, #4]
24054c3a:	681b      	ldr	r3, [r3, #0]
24054c3c:	4a63      	ldr	r2, [pc, #396]	; (24054dcc <HAL_DMA_Init+0x1c0>)
24054c3e:	4293      	cmp	r3, r2
24054c40:	d040      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054c42:	687b      	ldr	r3, [r7, #4]
24054c44:	681b      	ldr	r3, [r3, #0]
24054c46:	4a62      	ldr	r2, [pc, #392]	; (24054dd0 <HAL_DMA_Init+0x1c4>)
24054c48:	4293      	cmp	r3, r2
24054c4a:	d03b      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054c4c:	687b      	ldr	r3, [r7, #4]
24054c4e:	681b      	ldr	r3, [r3, #0]
24054c50:	4a60      	ldr	r2, [pc, #384]	; (24054dd4 <HAL_DMA_Init+0x1c8>)
24054c52:	4293      	cmp	r3, r2
24054c54:	d036      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054c56:	687b      	ldr	r3, [r7, #4]
24054c58:	681b      	ldr	r3, [r3, #0]
24054c5a:	4a5f      	ldr	r2, [pc, #380]	; (24054dd8 <HAL_DMA_Init+0x1cc>)
24054c5c:	4293      	cmp	r3, r2
24054c5e:	d031      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054c60:	687b      	ldr	r3, [r7, #4]
24054c62:	681b      	ldr	r3, [r3, #0]
24054c64:	4a5d      	ldr	r2, [pc, #372]	; (24054ddc <HAL_DMA_Init+0x1d0>)
24054c66:	4293      	cmp	r3, r2
24054c68:	d02c      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054c6a:	687b      	ldr	r3, [r7, #4]
24054c6c:	681b      	ldr	r3, [r3, #0]
24054c6e:	4a5c      	ldr	r2, [pc, #368]	; (24054de0 <HAL_DMA_Init+0x1d4>)
24054c70:	4293      	cmp	r3, r2
24054c72:	d027      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054c74:	687b      	ldr	r3, [r7, #4]
24054c76:	681b      	ldr	r3, [r3, #0]
24054c78:	4a5a      	ldr	r2, [pc, #360]	; (24054de4 <HAL_DMA_Init+0x1d8>)
24054c7a:	4293      	cmp	r3, r2
24054c7c:	d022      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054c7e:	687b      	ldr	r3, [r7, #4]
24054c80:	681b      	ldr	r3, [r3, #0]
24054c82:	4a59      	ldr	r2, [pc, #356]	; (24054de8 <HAL_DMA_Init+0x1dc>)
24054c84:	4293      	cmp	r3, r2
24054c86:	d01d      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054c88:	687b      	ldr	r3, [r7, #4]
24054c8a:	681b      	ldr	r3, [r3, #0]
24054c8c:	4a57      	ldr	r2, [pc, #348]	; (24054dec <HAL_DMA_Init+0x1e0>)
24054c8e:	4293      	cmp	r3, r2
24054c90:	d018      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054c92:	687b      	ldr	r3, [r7, #4]
24054c94:	681b      	ldr	r3, [r3, #0]
24054c96:	4a56      	ldr	r2, [pc, #344]	; (24054df0 <HAL_DMA_Init+0x1e4>)
24054c98:	4293      	cmp	r3, r2
24054c9a:	d013      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054c9c:	687b      	ldr	r3, [r7, #4]
24054c9e:	681b      	ldr	r3, [r3, #0]
24054ca0:	4a54      	ldr	r2, [pc, #336]	; (24054df4 <HAL_DMA_Init+0x1e8>)
24054ca2:	4293      	cmp	r3, r2
24054ca4:	d00e      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054ca6:	687b      	ldr	r3, [r7, #4]
24054ca8:	681b      	ldr	r3, [r3, #0]
24054caa:	4a53      	ldr	r2, [pc, #332]	; (24054df8 <HAL_DMA_Init+0x1ec>)
24054cac:	4293      	cmp	r3, r2
24054cae:	d009      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054cb0:	687b      	ldr	r3, [r7, #4]
24054cb2:	681b      	ldr	r3, [r3, #0]
24054cb4:	4a51      	ldr	r2, [pc, #324]	; (24054dfc <HAL_DMA_Init+0x1f0>)
24054cb6:	4293      	cmp	r3, r2
24054cb8:	d004      	beq.n	24054cc4 <HAL_DMA_Init+0xb8>
24054cba:	687b      	ldr	r3, [r7, #4]
24054cbc:	681b      	ldr	r3, [r3, #0]
24054cbe:	4a50      	ldr	r2, [pc, #320]	; (24054e00 <HAL_DMA_Init+0x1f4>)
24054cc0:	4293      	cmp	r3, r2
24054cc2:	d101      	bne.n	24054cc8 <HAL_DMA_Init+0xbc>
24054cc4:	2301      	movs	r3, #1
24054cc6:	e000      	b.n	24054cca <HAL_DMA_Init+0xbe>
24054cc8:	2300      	movs	r3, #0
24054cca:	2b00      	cmp	r3, #0
24054ccc:	f000 813c 	beq.w	24054f48 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24054cd0:	687b      	ldr	r3, [r7, #4]
24054cd2:	2202      	movs	r2, #2
24054cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
24054cd8:	687b      	ldr	r3, [r7, #4]
24054cda:	2200      	movs	r2, #0
24054cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24054ce0:	687b      	ldr	r3, [r7, #4]
24054ce2:	681b      	ldr	r3, [r3, #0]
24054ce4:	4a37      	ldr	r2, [pc, #220]	; (24054dc4 <HAL_DMA_Init+0x1b8>)
24054ce6:	4293      	cmp	r3, r2
24054ce8:	d04a      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054cea:	687b      	ldr	r3, [r7, #4]
24054cec:	681b      	ldr	r3, [r3, #0]
24054cee:	4a36      	ldr	r2, [pc, #216]	; (24054dc8 <HAL_DMA_Init+0x1bc>)
24054cf0:	4293      	cmp	r3, r2
24054cf2:	d045      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054cf4:	687b      	ldr	r3, [r7, #4]
24054cf6:	681b      	ldr	r3, [r3, #0]
24054cf8:	4a34      	ldr	r2, [pc, #208]	; (24054dcc <HAL_DMA_Init+0x1c0>)
24054cfa:	4293      	cmp	r3, r2
24054cfc:	d040      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054cfe:	687b      	ldr	r3, [r7, #4]
24054d00:	681b      	ldr	r3, [r3, #0]
24054d02:	4a33      	ldr	r2, [pc, #204]	; (24054dd0 <HAL_DMA_Init+0x1c4>)
24054d04:	4293      	cmp	r3, r2
24054d06:	d03b      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054d08:	687b      	ldr	r3, [r7, #4]
24054d0a:	681b      	ldr	r3, [r3, #0]
24054d0c:	4a31      	ldr	r2, [pc, #196]	; (24054dd4 <HAL_DMA_Init+0x1c8>)
24054d0e:	4293      	cmp	r3, r2
24054d10:	d036      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054d12:	687b      	ldr	r3, [r7, #4]
24054d14:	681b      	ldr	r3, [r3, #0]
24054d16:	4a30      	ldr	r2, [pc, #192]	; (24054dd8 <HAL_DMA_Init+0x1cc>)
24054d18:	4293      	cmp	r3, r2
24054d1a:	d031      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054d1c:	687b      	ldr	r3, [r7, #4]
24054d1e:	681b      	ldr	r3, [r3, #0]
24054d20:	4a2e      	ldr	r2, [pc, #184]	; (24054ddc <HAL_DMA_Init+0x1d0>)
24054d22:	4293      	cmp	r3, r2
24054d24:	d02c      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054d26:	687b      	ldr	r3, [r7, #4]
24054d28:	681b      	ldr	r3, [r3, #0]
24054d2a:	4a2d      	ldr	r2, [pc, #180]	; (24054de0 <HAL_DMA_Init+0x1d4>)
24054d2c:	4293      	cmp	r3, r2
24054d2e:	d027      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054d30:	687b      	ldr	r3, [r7, #4]
24054d32:	681b      	ldr	r3, [r3, #0]
24054d34:	4a2b      	ldr	r2, [pc, #172]	; (24054de4 <HAL_DMA_Init+0x1d8>)
24054d36:	4293      	cmp	r3, r2
24054d38:	d022      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054d3a:	687b      	ldr	r3, [r7, #4]
24054d3c:	681b      	ldr	r3, [r3, #0]
24054d3e:	4a2a      	ldr	r2, [pc, #168]	; (24054de8 <HAL_DMA_Init+0x1dc>)
24054d40:	4293      	cmp	r3, r2
24054d42:	d01d      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054d44:	687b      	ldr	r3, [r7, #4]
24054d46:	681b      	ldr	r3, [r3, #0]
24054d48:	4a28      	ldr	r2, [pc, #160]	; (24054dec <HAL_DMA_Init+0x1e0>)
24054d4a:	4293      	cmp	r3, r2
24054d4c:	d018      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054d4e:	687b      	ldr	r3, [r7, #4]
24054d50:	681b      	ldr	r3, [r3, #0]
24054d52:	4a27      	ldr	r2, [pc, #156]	; (24054df0 <HAL_DMA_Init+0x1e4>)
24054d54:	4293      	cmp	r3, r2
24054d56:	d013      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054d58:	687b      	ldr	r3, [r7, #4]
24054d5a:	681b      	ldr	r3, [r3, #0]
24054d5c:	4a25      	ldr	r2, [pc, #148]	; (24054df4 <HAL_DMA_Init+0x1e8>)
24054d5e:	4293      	cmp	r3, r2
24054d60:	d00e      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054d62:	687b      	ldr	r3, [r7, #4]
24054d64:	681b      	ldr	r3, [r3, #0]
24054d66:	4a24      	ldr	r2, [pc, #144]	; (24054df8 <HAL_DMA_Init+0x1ec>)
24054d68:	4293      	cmp	r3, r2
24054d6a:	d009      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054d6c:	687b      	ldr	r3, [r7, #4]
24054d6e:	681b      	ldr	r3, [r3, #0]
24054d70:	4a22      	ldr	r2, [pc, #136]	; (24054dfc <HAL_DMA_Init+0x1f0>)
24054d72:	4293      	cmp	r3, r2
24054d74:	d004      	beq.n	24054d80 <HAL_DMA_Init+0x174>
24054d76:	687b      	ldr	r3, [r7, #4]
24054d78:	681b      	ldr	r3, [r3, #0]
24054d7a:	4a21      	ldr	r2, [pc, #132]	; (24054e00 <HAL_DMA_Init+0x1f4>)
24054d7c:	4293      	cmp	r3, r2
24054d7e:	d108      	bne.n	24054d92 <HAL_DMA_Init+0x186>
24054d80:	687b      	ldr	r3, [r7, #4]
24054d82:	681b      	ldr	r3, [r3, #0]
24054d84:	681a      	ldr	r2, [r3, #0]
24054d86:	687b      	ldr	r3, [r7, #4]
24054d88:	681b      	ldr	r3, [r3, #0]
24054d8a:	f022 0201 	bic.w	r2, r2, #1
24054d8e:	601a      	str	r2, [r3, #0]
24054d90:	e007      	b.n	24054da2 <HAL_DMA_Init+0x196>
24054d92:	687b      	ldr	r3, [r7, #4]
24054d94:	681b      	ldr	r3, [r3, #0]
24054d96:	681a      	ldr	r2, [r3, #0]
24054d98:	687b      	ldr	r3, [r7, #4]
24054d9a:	681b      	ldr	r3, [r3, #0]
24054d9c:	f022 0201 	bic.w	r2, r2, #1
24054da0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24054da2:	e02f      	b.n	24054e04 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24054da4:	f7fd ffb6 	bl	24052d14 <HAL_GetTick>
24054da8:	4602      	mov	r2, r0
24054daa:	693b      	ldr	r3, [r7, #16]
24054dac:	1ad3      	subs	r3, r2, r3
24054dae:	2b05      	cmp	r3, #5
24054db0:	d928      	bls.n	24054e04 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24054db2:	687b      	ldr	r3, [r7, #4]
24054db4:	2220      	movs	r2, #32
24054db6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24054db8:	687b      	ldr	r3, [r7, #4]
24054dba:	2203      	movs	r2, #3
24054dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
24054dc0:	2301      	movs	r3, #1
24054dc2:	e2ad      	b.n	24055320 <HAL_DMA_Init+0x714>
24054dc4:	40020010 	.word	0x40020010
24054dc8:	40020028 	.word	0x40020028
24054dcc:	40020040 	.word	0x40020040
24054dd0:	40020058 	.word	0x40020058
24054dd4:	40020070 	.word	0x40020070
24054dd8:	40020088 	.word	0x40020088
24054ddc:	400200a0 	.word	0x400200a0
24054de0:	400200b8 	.word	0x400200b8
24054de4:	40020410 	.word	0x40020410
24054de8:	40020428 	.word	0x40020428
24054dec:	40020440 	.word	0x40020440
24054df0:	40020458 	.word	0x40020458
24054df4:	40020470 	.word	0x40020470
24054df8:	40020488 	.word	0x40020488
24054dfc:	400204a0 	.word	0x400204a0
24054e00:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24054e04:	687b      	ldr	r3, [r7, #4]
24054e06:	681b      	ldr	r3, [r3, #0]
24054e08:	681b      	ldr	r3, [r3, #0]
24054e0a:	f003 0301 	and.w	r3, r3, #1
24054e0e:	2b00      	cmp	r3, #0
24054e10:	d1c8      	bne.n	24054da4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24054e12:	687b      	ldr	r3, [r7, #4]
24054e14:	681b      	ldr	r3, [r3, #0]
24054e16:	681b      	ldr	r3, [r3, #0]
24054e18:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24054e1a:	697a      	ldr	r2, [r7, #20]
24054e1c:	4b73      	ldr	r3, [pc, #460]	; (24054fec <HAL_DMA_Init+0x3e0>)
24054e1e:	4013      	ands	r3, r2
24054e20:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
24054e22:	687b      	ldr	r3, [r7, #4]
24054e24:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24054e26:	687b      	ldr	r3, [r7, #4]
24054e28:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
24054e2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24054e2c:	687b      	ldr	r3, [r7, #4]
24054e2e:	691b      	ldr	r3, [r3, #16]
24054e30:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24054e32:	687b      	ldr	r3, [r7, #4]
24054e34:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24054e36:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24054e38:	687b      	ldr	r3, [r7, #4]
24054e3a:	699b      	ldr	r3, [r3, #24]
24054e3c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
24054e3e:	687b      	ldr	r3, [r7, #4]
24054e40:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24054e42:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
24054e44:	687b      	ldr	r3, [r7, #4]
24054e46:	6a1b      	ldr	r3, [r3, #32]
24054e48:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
24054e4a:	697a      	ldr	r2, [r7, #20]
24054e4c:	4313      	orrs	r3, r2
24054e4e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24054e50:	687b      	ldr	r3, [r7, #4]
24054e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24054e54:	2b04      	cmp	r3, #4
24054e56:	d107      	bne.n	24054e68 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24054e58:	687b      	ldr	r3, [r7, #4]
24054e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24054e5c:	687b      	ldr	r3, [r7, #4]
24054e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24054e60:	4313      	orrs	r3, r2
24054e62:	697a      	ldr	r2, [r7, #20]
24054e64:	4313      	orrs	r3, r2
24054e66:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24054e68:	687b      	ldr	r3, [r7, #4]
24054e6a:	685b      	ldr	r3, [r3, #4]
24054e6c:	2b28      	cmp	r3, #40	; 0x28
24054e6e:	d903      	bls.n	24054e78 <HAL_DMA_Init+0x26c>
24054e70:	687b      	ldr	r3, [r7, #4]
24054e72:	685b      	ldr	r3, [r3, #4]
24054e74:	2b2e      	cmp	r3, #46	; 0x2e
24054e76:	d91f      	bls.n	24054eb8 <HAL_DMA_Init+0x2ac>
24054e78:	687b      	ldr	r3, [r7, #4]
24054e7a:	685b      	ldr	r3, [r3, #4]
24054e7c:	2b3e      	cmp	r3, #62	; 0x3e
24054e7e:	d903      	bls.n	24054e88 <HAL_DMA_Init+0x27c>
24054e80:	687b      	ldr	r3, [r7, #4]
24054e82:	685b      	ldr	r3, [r3, #4]
24054e84:	2b42      	cmp	r3, #66	; 0x42
24054e86:	d917      	bls.n	24054eb8 <HAL_DMA_Init+0x2ac>
24054e88:	687b      	ldr	r3, [r7, #4]
24054e8a:	685b      	ldr	r3, [r3, #4]
24054e8c:	2b46      	cmp	r3, #70	; 0x46
24054e8e:	d903      	bls.n	24054e98 <HAL_DMA_Init+0x28c>
24054e90:	687b      	ldr	r3, [r7, #4]
24054e92:	685b      	ldr	r3, [r3, #4]
24054e94:	2b48      	cmp	r3, #72	; 0x48
24054e96:	d90f      	bls.n	24054eb8 <HAL_DMA_Init+0x2ac>
24054e98:	687b      	ldr	r3, [r7, #4]
24054e9a:	685b      	ldr	r3, [r3, #4]
24054e9c:	2b4e      	cmp	r3, #78	; 0x4e
24054e9e:	d903      	bls.n	24054ea8 <HAL_DMA_Init+0x29c>
24054ea0:	687b      	ldr	r3, [r7, #4]
24054ea2:	685b      	ldr	r3, [r3, #4]
24054ea4:	2b52      	cmp	r3, #82	; 0x52
24054ea6:	d907      	bls.n	24054eb8 <HAL_DMA_Init+0x2ac>
24054ea8:	687b      	ldr	r3, [r7, #4]
24054eaa:	685b      	ldr	r3, [r3, #4]
24054eac:	2b73      	cmp	r3, #115	; 0x73
24054eae:	d905      	bls.n	24054ebc <HAL_DMA_Init+0x2b0>
24054eb0:	687b      	ldr	r3, [r7, #4]
24054eb2:	685b      	ldr	r3, [r3, #4]
24054eb4:	2b77      	cmp	r3, #119	; 0x77
24054eb6:	d801      	bhi.n	24054ebc <HAL_DMA_Init+0x2b0>
24054eb8:	2301      	movs	r3, #1
24054eba:	e000      	b.n	24054ebe <HAL_DMA_Init+0x2b2>
24054ebc:	2300      	movs	r3, #0
24054ebe:	2b00      	cmp	r3, #0
24054ec0:	d003      	beq.n	24054eca <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
24054ec2:	697b      	ldr	r3, [r7, #20]
24054ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
24054ec8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24054eca:	687b      	ldr	r3, [r7, #4]
24054ecc:	681b      	ldr	r3, [r3, #0]
24054ece:	697a      	ldr	r2, [r7, #20]
24054ed0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24054ed2:	687b      	ldr	r3, [r7, #4]
24054ed4:	681b      	ldr	r3, [r3, #0]
24054ed6:	695b      	ldr	r3, [r3, #20]
24054ed8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24054eda:	697b      	ldr	r3, [r7, #20]
24054edc:	f023 0307 	bic.w	r3, r3, #7
24054ee0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
24054ee2:	687b      	ldr	r3, [r7, #4]
24054ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24054ee6:	697a      	ldr	r2, [r7, #20]
24054ee8:	4313      	orrs	r3, r2
24054eea:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24054eec:	687b      	ldr	r3, [r7, #4]
24054eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24054ef0:	2b04      	cmp	r3, #4
24054ef2:	d117      	bne.n	24054f24 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
24054ef4:	687b      	ldr	r3, [r7, #4]
24054ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24054ef8:	697a      	ldr	r2, [r7, #20]
24054efa:	4313      	orrs	r3, r2
24054efc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24054efe:	687b      	ldr	r3, [r7, #4]
24054f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24054f02:	2b00      	cmp	r3, #0
24054f04:	d00e      	beq.n	24054f24 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
24054f06:	6878      	ldr	r0, [r7, #4]
24054f08:	f002 fbe0 	bl	240576cc <DMA_CheckFifoParam>
24054f0c:	4603      	mov	r3, r0
24054f0e:	2b00      	cmp	r3, #0
24054f10:	d008      	beq.n	24054f24 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24054f12:	687b      	ldr	r3, [r7, #4]
24054f14:	2240      	movs	r2, #64	; 0x40
24054f16:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24054f18:	687b      	ldr	r3, [r7, #4]
24054f1a:	2201      	movs	r2, #1
24054f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
24054f20:	2301      	movs	r3, #1
24054f22:	e1fd      	b.n	24055320 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24054f24:	687b      	ldr	r3, [r7, #4]
24054f26:	681b      	ldr	r3, [r3, #0]
24054f28:	697a      	ldr	r2, [r7, #20]
24054f2a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24054f2c:	6878      	ldr	r0, [r7, #4]
24054f2e:	f002 fb1b 	bl	24057568 <DMA_CalcBaseAndBitshift>
24054f32:	4603      	mov	r3, r0
24054f34:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24054f36:	687b      	ldr	r3, [r7, #4]
24054f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24054f3a:	f003 031f 	and.w	r3, r3, #31
24054f3e:	223f      	movs	r2, #63	; 0x3f
24054f40:	409a      	lsls	r2, r3
24054f42:	68bb      	ldr	r3, [r7, #8]
24054f44:	609a      	str	r2, [r3, #8]
24054f46:	e0fd      	b.n	24055144 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24054f48:	687b      	ldr	r3, [r7, #4]
24054f4a:	681b      	ldr	r3, [r3, #0]
24054f4c:	4a28      	ldr	r2, [pc, #160]	; (24054ff0 <HAL_DMA_Init+0x3e4>)
24054f4e:	4293      	cmp	r3, r2
24054f50:	d04a      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054f52:	687b      	ldr	r3, [r7, #4]
24054f54:	681b      	ldr	r3, [r3, #0]
24054f56:	4a27      	ldr	r2, [pc, #156]	; (24054ff4 <HAL_DMA_Init+0x3e8>)
24054f58:	4293      	cmp	r3, r2
24054f5a:	d045      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054f5c:	687b      	ldr	r3, [r7, #4]
24054f5e:	681b      	ldr	r3, [r3, #0]
24054f60:	4a25      	ldr	r2, [pc, #148]	; (24054ff8 <HAL_DMA_Init+0x3ec>)
24054f62:	4293      	cmp	r3, r2
24054f64:	d040      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054f66:	687b      	ldr	r3, [r7, #4]
24054f68:	681b      	ldr	r3, [r3, #0]
24054f6a:	4a24      	ldr	r2, [pc, #144]	; (24054ffc <HAL_DMA_Init+0x3f0>)
24054f6c:	4293      	cmp	r3, r2
24054f6e:	d03b      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054f70:	687b      	ldr	r3, [r7, #4]
24054f72:	681b      	ldr	r3, [r3, #0]
24054f74:	4a22      	ldr	r2, [pc, #136]	; (24055000 <HAL_DMA_Init+0x3f4>)
24054f76:	4293      	cmp	r3, r2
24054f78:	d036      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054f7a:	687b      	ldr	r3, [r7, #4]
24054f7c:	681b      	ldr	r3, [r3, #0]
24054f7e:	4a21      	ldr	r2, [pc, #132]	; (24055004 <HAL_DMA_Init+0x3f8>)
24054f80:	4293      	cmp	r3, r2
24054f82:	d031      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054f84:	687b      	ldr	r3, [r7, #4]
24054f86:	681b      	ldr	r3, [r3, #0]
24054f88:	4a1f      	ldr	r2, [pc, #124]	; (24055008 <HAL_DMA_Init+0x3fc>)
24054f8a:	4293      	cmp	r3, r2
24054f8c:	d02c      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054f8e:	687b      	ldr	r3, [r7, #4]
24054f90:	681b      	ldr	r3, [r3, #0]
24054f92:	4a1e      	ldr	r2, [pc, #120]	; (2405500c <HAL_DMA_Init+0x400>)
24054f94:	4293      	cmp	r3, r2
24054f96:	d027      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054f98:	687b      	ldr	r3, [r7, #4]
24054f9a:	681b      	ldr	r3, [r3, #0]
24054f9c:	4a1c      	ldr	r2, [pc, #112]	; (24055010 <HAL_DMA_Init+0x404>)
24054f9e:	4293      	cmp	r3, r2
24054fa0:	d022      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054fa2:	687b      	ldr	r3, [r7, #4]
24054fa4:	681b      	ldr	r3, [r3, #0]
24054fa6:	4a1b      	ldr	r2, [pc, #108]	; (24055014 <HAL_DMA_Init+0x408>)
24054fa8:	4293      	cmp	r3, r2
24054faa:	d01d      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054fac:	687b      	ldr	r3, [r7, #4]
24054fae:	681b      	ldr	r3, [r3, #0]
24054fb0:	4a19      	ldr	r2, [pc, #100]	; (24055018 <HAL_DMA_Init+0x40c>)
24054fb2:	4293      	cmp	r3, r2
24054fb4:	d018      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054fb6:	687b      	ldr	r3, [r7, #4]
24054fb8:	681b      	ldr	r3, [r3, #0]
24054fba:	4a18      	ldr	r2, [pc, #96]	; (2405501c <HAL_DMA_Init+0x410>)
24054fbc:	4293      	cmp	r3, r2
24054fbe:	d013      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054fc0:	687b      	ldr	r3, [r7, #4]
24054fc2:	681b      	ldr	r3, [r3, #0]
24054fc4:	4a16      	ldr	r2, [pc, #88]	; (24055020 <HAL_DMA_Init+0x414>)
24054fc6:	4293      	cmp	r3, r2
24054fc8:	d00e      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054fca:	687b      	ldr	r3, [r7, #4]
24054fcc:	681b      	ldr	r3, [r3, #0]
24054fce:	4a15      	ldr	r2, [pc, #84]	; (24055024 <HAL_DMA_Init+0x418>)
24054fd0:	4293      	cmp	r3, r2
24054fd2:	d009      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054fd4:	687b      	ldr	r3, [r7, #4]
24054fd6:	681b      	ldr	r3, [r3, #0]
24054fd8:	4a13      	ldr	r2, [pc, #76]	; (24055028 <HAL_DMA_Init+0x41c>)
24054fda:	4293      	cmp	r3, r2
24054fdc:	d004      	beq.n	24054fe8 <HAL_DMA_Init+0x3dc>
24054fde:	687b      	ldr	r3, [r7, #4]
24054fe0:	681b      	ldr	r3, [r3, #0]
24054fe2:	4a12      	ldr	r2, [pc, #72]	; (2405502c <HAL_DMA_Init+0x420>)
24054fe4:	4293      	cmp	r3, r2
24054fe6:	d123      	bne.n	24055030 <HAL_DMA_Init+0x424>
24054fe8:	2301      	movs	r3, #1
24054fea:	e022      	b.n	24055032 <HAL_DMA_Init+0x426>
24054fec:	fe10803f 	.word	0xfe10803f
24054ff0:	48022c08 	.word	0x48022c08
24054ff4:	48022c1c 	.word	0x48022c1c
24054ff8:	48022c30 	.word	0x48022c30
24054ffc:	48022c44 	.word	0x48022c44
24055000:	48022c58 	.word	0x48022c58
24055004:	48022c6c 	.word	0x48022c6c
24055008:	48022c80 	.word	0x48022c80
2405500c:	48022c94 	.word	0x48022c94
24055010:	58025408 	.word	0x58025408
24055014:	5802541c 	.word	0x5802541c
24055018:	58025430 	.word	0x58025430
2405501c:	58025444 	.word	0x58025444
24055020:	58025458 	.word	0x58025458
24055024:	5802546c 	.word	0x5802546c
24055028:	58025480 	.word	0x58025480
2405502c:	58025494 	.word	0x58025494
24055030:	2300      	movs	r3, #0
24055032:	2b00      	cmp	r3, #0
24055034:	d07d      	beq.n	24055132 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24055036:	687b      	ldr	r3, [r7, #4]
24055038:	681b      	ldr	r3, [r3, #0]
2405503a:	4a7f      	ldr	r2, [pc, #508]	; (24055238 <HAL_DMA_Init+0x62c>)
2405503c:	4293      	cmp	r3, r2
2405503e:	d021      	beq.n	24055084 <HAL_DMA_Init+0x478>
24055040:	687b      	ldr	r3, [r7, #4]
24055042:	681b      	ldr	r3, [r3, #0]
24055044:	4a7d      	ldr	r2, [pc, #500]	; (2405523c <HAL_DMA_Init+0x630>)
24055046:	4293      	cmp	r3, r2
24055048:	d01c      	beq.n	24055084 <HAL_DMA_Init+0x478>
2405504a:	687b      	ldr	r3, [r7, #4]
2405504c:	681b      	ldr	r3, [r3, #0]
2405504e:	4a7c      	ldr	r2, [pc, #496]	; (24055240 <HAL_DMA_Init+0x634>)
24055050:	4293      	cmp	r3, r2
24055052:	d017      	beq.n	24055084 <HAL_DMA_Init+0x478>
24055054:	687b      	ldr	r3, [r7, #4]
24055056:	681b      	ldr	r3, [r3, #0]
24055058:	4a7a      	ldr	r2, [pc, #488]	; (24055244 <HAL_DMA_Init+0x638>)
2405505a:	4293      	cmp	r3, r2
2405505c:	d012      	beq.n	24055084 <HAL_DMA_Init+0x478>
2405505e:	687b      	ldr	r3, [r7, #4]
24055060:	681b      	ldr	r3, [r3, #0]
24055062:	4a79      	ldr	r2, [pc, #484]	; (24055248 <HAL_DMA_Init+0x63c>)
24055064:	4293      	cmp	r3, r2
24055066:	d00d      	beq.n	24055084 <HAL_DMA_Init+0x478>
24055068:	687b      	ldr	r3, [r7, #4]
2405506a:	681b      	ldr	r3, [r3, #0]
2405506c:	4a77      	ldr	r2, [pc, #476]	; (2405524c <HAL_DMA_Init+0x640>)
2405506e:	4293      	cmp	r3, r2
24055070:	d008      	beq.n	24055084 <HAL_DMA_Init+0x478>
24055072:	687b      	ldr	r3, [r7, #4]
24055074:	681b      	ldr	r3, [r3, #0]
24055076:	4a76      	ldr	r2, [pc, #472]	; (24055250 <HAL_DMA_Init+0x644>)
24055078:	4293      	cmp	r3, r2
2405507a:	d003      	beq.n	24055084 <HAL_DMA_Init+0x478>
2405507c:	687b      	ldr	r3, [r7, #4]
2405507e:	681b      	ldr	r3, [r3, #0]
24055080:	4a74      	ldr	r2, [pc, #464]	; (24055254 <HAL_DMA_Init+0x648>)
24055082:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24055084:	687b      	ldr	r3, [r7, #4]
24055086:	2202      	movs	r2, #2
24055088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
2405508c:	687b      	ldr	r3, [r7, #4]
2405508e:	2200      	movs	r2, #0
24055090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24055094:	687b      	ldr	r3, [r7, #4]
24055096:	681b      	ldr	r3, [r3, #0]
24055098:	681b      	ldr	r3, [r3, #0]
2405509a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
2405509c:	697a      	ldr	r2, [r7, #20]
2405509e:	4b6e      	ldr	r3, [pc, #440]	; (24055258 <HAL_DMA_Init+0x64c>)
240550a0:	4013      	ands	r3, r2
240550a2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240550a4:	687b      	ldr	r3, [r7, #4]
240550a6:	689b      	ldr	r3, [r3, #8]
240550a8:	2b40      	cmp	r3, #64	; 0x40
240550aa:	d008      	beq.n	240550be <HAL_DMA_Init+0x4b2>
240550ac:	687b      	ldr	r3, [r7, #4]
240550ae:	689b      	ldr	r3, [r3, #8]
240550b0:	2b80      	cmp	r3, #128	; 0x80
240550b2:	d102      	bne.n	240550ba <HAL_DMA_Init+0x4ae>
240550b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
240550b8:	e002      	b.n	240550c0 <HAL_DMA_Init+0x4b4>
240550ba:	2300      	movs	r3, #0
240550bc:	e000      	b.n	240550c0 <HAL_DMA_Init+0x4b4>
240550be:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
240550c0:	687a      	ldr	r2, [r7, #4]
240550c2:	68d2      	ldr	r2, [r2, #12]
240550c4:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240550c6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
240550c8:	687b      	ldr	r3, [r7, #4]
240550ca:	691b      	ldr	r3, [r3, #16]
240550cc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
240550ce:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
240550d0:	687b      	ldr	r3, [r7, #4]
240550d2:	695b      	ldr	r3, [r3, #20]
240550d4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
240550d6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
240550d8:	687b      	ldr	r3, [r7, #4]
240550da:	699b      	ldr	r3, [r3, #24]
240550dc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
240550de:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
240550e0:	687b      	ldr	r3, [r7, #4]
240550e2:	69db      	ldr	r3, [r3, #28]
240550e4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
240550e6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
240550e8:	687b      	ldr	r3, [r7, #4]
240550ea:	6a1b      	ldr	r3, [r3, #32]
240550ec:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
240550ee:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240550f0:	697a      	ldr	r2, [r7, #20]
240550f2:	4313      	orrs	r3, r2
240550f4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
240550f6:	687b      	ldr	r3, [r7, #4]
240550f8:	681b      	ldr	r3, [r3, #0]
240550fa:	697a      	ldr	r2, [r7, #20]
240550fc:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
240550fe:	687b      	ldr	r3, [r7, #4]
24055100:	681b      	ldr	r3, [r3, #0]
24055102:	461a      	mov	r2, r3
24055104:	4b55      	ldr	r3, [pc, #340]	; (2405525c <HAL_DMA_Init+0x650>)
24055106:	4413      	add	r3, r2
24055108:	4a55      	ldr	r2, [pc, #340]	; (24055260 <HAL_DMA_Init+0x654>)
2405510a:	fba2 2303 	umull	r2, r3, r2, r3
2405510e:	091b      	lsrs	r3, r3, #4
24055110:	009a      	lsls	r2, r3, #2
24055112:	687b      	ldr	r3, [r7, #4]
24055114:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24055116:	6878      	ldr	r0, [r7, #4]
24055118:	f002 fa26 	bl	24057568 <DMA_CalcBaseAndBitshift>
2405511c:	4603      	mov	r3, r0
2405511e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24055120:	687b      	ldr	r3, [r7, #4]
24055122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24055124:	f003 031f 	and.w	r3, r3, #31
24055128:	2201      	movs	r2, #1
2405512a:	409a      	lsls	r2, r3
2405512c:	68fb      	ldr	r3, [r7, #12]
2405512e:	605a      	str	r2, [r3, #4]
24055130:	e008      	b.n	24055144 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24055132:	687b      	ldr	r3, [r7, #4]
24055134:	2240      	movs	r2, #64	; 0x40
24055136:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24055138:	687b      	ldr	r3, [r7, #4]
2405513a:	2203      	movs	r2, #3
2405513c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
24055140:	2301      	movs	r3, #1
24055142:	e0ed      	b.n	24055320 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24055144:	687b      	ldr	r3, [r7, #4]
24055146:	681b      	ldr	r3, [r3, #0]
24055148:	4a46      	ldr	r2, [pc, #280]	; (24055264 <HAL_DMA_Init+0x658>)
2405514a:	4293      	cmp	r3, r2
2405514c:	d072      	beq.n	24055234 <HAL_DMA_Init+0x628>
2405514e:	687b      	ldr	r3, [r7, #4]
24055150:	681b      	ldr	r3, [r3, #0]
24055152:	4a45      	ldr	r2, [pc, #276]	; (24055268 <HAL_DMA_Init+0x65c>)
24055154:	4293      	cmp	r3, r2
24055156:	d06d      	beq.n	24055234 <HAL_DMA_Init+0x628>
24055158:	687b      	ldr	r3, [r7, #4]
2405515a:	681b      	ldr	r3, [r3, #0]
2405515c:	4a43      	ldr	r2, [pc, #268]	; (2405526c <HAL_DMA_Init+0x660>)
2405515e:	4293      	cmp	r3, r2
24055160:	d068      	beq.n	24055234 <HAL_DMA_Init+0x628>
24055162:	687b      	ldr	r3, [r7, #4]
24055164:	681b      	ldr	r3, [r3, #0]
24055166:	4a42      	ldr	r2, [pc, #264]	; (24055270 <HAL_DMA_Init+0x664>)
24055168:	4293      	cmp	r3, r2
2405516a:	d063      	beq.n	24055234 <HAL_DMA_Init+0x628>
2405516c:	687b      	ldr	r3, [r7, #4]
2405516e:	681b      	ldr	r3, [r3, #0]
24055170:	4a40      	ldr	r2, [pc, #256]	; (24055274 <HAL_DMA_Init+0x668>)
24055172:	4293      	cmp	r3, r2
24055174:	d05e      	beq.n	24055234 <HAL_DMA_Init+0x628>
24055176:	687b      	ldr	r3, [r7, #4]
24055178:	681b      	ldr	r3, [r3, #0]
2405517a:	4a3f      	ldr	r2, [pc, #252]	; (24055278 <HAL_DMA_Init+0x66c>)
2405517c:	4293      	cmp	r3, r2
2405517e:	d059      	beq.n	24055234 <HAL_DMA_Init+0x628>
24055180:	687b      	ldr	r3, [r7, #4]
24055182:	681b      	ldr	r3, [r3, #0]
24055184:	4a3d      	ldr	r2, [pc, #244]	; (2405527c <HAL_DMA_Init+0x670>)
24055186:	4293      	cmp	r3, r2
24055188:	d054      	beq.n	24055234 <HAL_DMA_Init+0x628>
2405518a:	687b      	ldr	r3, [r7, #4]
2405518c:	681b      	ldr	r3, [r3, #0]
2405518e:	4a3c      	ldr	r2, [pc, #240]	; (24055280 <HAL_DMA_Init+0x674>)
24055190:	4293      	cmp	r3, r2
24055192:	d04f      	beq.n	24055234 <HAL_DMA_Init+0x628>
24055194:	687b      	ldr	r3, [r7, #4]
24055196:	681b      	ldr	r3, [r3, #0]
24055198:	4a3a      	ldr	r2, [pc, #232]	; (24055284 <HAL_DMA_Init+0x678>)
2405519a:	4293      	cmp	r3, r2
2405519c:	d04a      	beq.n	24055234 <HAL_DMA_Init+0x628>
2405519e:	687b      	ldr	r3, [r7, #4]
240551a0:	681b      	ldr	r3, [r3, #0]
240551a2:	4a39      	ldr	r2, [pc, #228]	; (24055288 <HAL_DMA_Init+0x67c>)
240551a4:	4293      	cmp	r3, r2
240551a6:	d045      	beq.n	24055234 <HAL_DMA_Init+0x628>
240551a8:	687b      	ldr	r3, [r7, #4]
240551aa:	681b      	ldr	r3, [r3, #0]
240551ac:	4a37      	ldr	r2, [pc, #220]	; (2405528c <HAL_DMA_Init+0x680>)
240551ae:	4293      	cmp	r3, r2
240551b0:	d040      	beq.n	24055234 <HAL_DMA_Init+0x628>
240551b2:	687b      	ldr	r3, [r7, #4]
240551b4:	681b      	ldr	r3, [r3, #0]
240551b6:	4a36      	ldr	r2, [pc, #216]	; (24055290 <HAL_DMA_Init+0x684>)
240551b8:	4293      	cmp	r3, r2
240551ba:	d03b      	beq.n	24055234 <HAL_DMA_Init+0x628>
240551bc:	687b      	ldr	r3, [r7, #4]
240551be:	681b      	ldr	r3, [r3, #0]
240551c0:	4a34      	ldr	r2, [pc, #208]	; (24055294 <HAL_DMA_Init+0x688>)
240551c2:	4293      	cmp	r3, r2
240551c4:	d036      	beq.n	24055234 <HAL_DMA_Init+0x628>
240551c6:	687b      	ldr	r3, [r7, #4]
240551c8:	681b      	ldr	r3, [r3, #0]
240551ca:	4a33      	ldr	r2, [pc, #204]	; (24055298 <HAL_DMA_Init+0x68c>)
240551cc:	4293      	cmp	r3, r2
240551ce:	d031      	beq.n	24055234 <HAL_DMA_Init+0x628>
240551d0:	687b      	ldr	r3, [r7, #4]
240551d2:	681b      	ldr	r3, [r3, #0]
240551d4:	4a31      	ldr	r2, [pc, #196]	; (2405529c <HAL_DMA_Init+0x690>)
240551d6:	4293      	cmp	r3, r2
240551d8:	d02c      	beq.n	24055234 <HAL_DMA_Init+0x628>
240551da:	687b      	ldr	r3, [r7, #4]
240551dc:	681b      	ldr	r3, [r3, #0]
240551de:	4a30      	ldr	r2, [pc, #192]	; (240552a0 <HAL_DMA_Init+0x694>)
240551e0:	4293      	cmp	r3, r2
240551e2:	d027      	beq.n	24055234 <HAL_DMA_Init+0x628>
240551e4:	687b      	ldr	r3, [r7, #4]
240551e6:	681b      	ldr	r3, [r3, #0]
240551e8:	4a13      	ldr	r2, [pc, #76]	; (24055238 <HAL_DMA_Init+0x62c>)
240551ea:	4293      	cmp	r3, r2
240551ec:	d022      	beq.n	24055234 <HAL_DMA_Init+0x628>
240551ee:	687b      	ldr	r3, [r7, #4]
240551f0:	681b      	ldr	r3, [r3, #0]
240551f2:	4a12      	ldr	r2, [pc, #72]	; (2405523c <HAL_DMA_Init+0x630>)
240551f4:	4293      	cmp	r3, r2
240551f6:	d01d      	beq.n	24055234 <HAL_DMA_Init+0x628>
240551f8:	687b      	ldr	r3, [r7, #4]
240551fa:	681b      	ldr	r3, [r3, #0]
240551fc:	4a10      	ldr	r2, [pc, #64]	; (24055240 <HAL_DMA_Init+0x634>)
240551fe:	4293      	cmp	r3, r2
24055200:	d018      	beq.n	24055234 <HAL_DMA_Init+0x628>
24055202:	687b      	ldr	r3, [r7, #4]
24055204:	681b      	ldr	r3, [r3, #0]
24055206:	4a0f      	ldr	r2, [pc, #60]	; (24055244 <HAL_DMA_Init+0x638>)
24055208:	4293      	cmp	r3, r2
2405520a:	d013      	beq.n	24055234 <HAL_DMA_Init+0x628>
2405520c:	687b      	ldr	r3, [r7, #4]
2405520e:	681b      	ldr	r3, [r3, #0]
24055210:	4a0d      	ldr	r2, [pc, #52]	; (24055248 <HAL_DMA_Init+0x63c>)
24055212:	4293      	cmp	r3, r2
24055214:	d00e      	beq.n	24055234 <HAL_DMA_Init+0x628>
24055216:	687b      	ldr	r3, [r7, #4]
24055218:	681b      	ldr	r3, [r3, #0]
2405521a:	4a0c      	ldr	r2, [pc, #48]	; (2405524c <HAL_DMA_Init+0x640>)
2405521c:	4293      	cmp	r3, r2
2405521e:	d009      	beq.n	24055234 <HAL_DMA_Init+0x628>
24055220:	687b      	ldr	r3, [r7, #4]
24055222:	681b      	ldr	r3, [r3, #0]
24055224:	4a0a      	ldr	r2, [pc, #40]	; (24055250 <HAL_DMA_Init+0x644>)
24055226:	4293      	cmp	r3, r2
24055228:	d004      	beq.n	24055234 <HAL_DMA_Init+0x628>
2405522a:	687b      	ldr	r3, [r7, #4]
2405522c:	681b      	ldr	r3, [r3, #0]
2405522e:	4a09      	ldr	r2, [pc, #36]	; (24055254 <HAL_DMA_Init+0x648>)
24055230:	4293      	cmp	r3, r2
24055232:	d137      	bne.n	240552a4 <HAL_DMA_Init+0x698>
24055234:	2301      	movs	r3, #1
24055236:	e036      	b.n	240552a6 <HAL_DMA_Init+0x69a>
24055238:	58025408 	.word	0x58025408
2405523c:	5802541c 	.word	0x5802541c
24055240:	58025430 	.word	0x58025430
24055244:	58025444 	.word	0x58025444
24055248:	58025458 	.word	0x58025458
2405524c:	5802546c 	.word	0x5802546c
24055250:	58025480 	.word	0x58025480
24055254:	58025494 	.word	0x58025494
24055258:	fffe000f 	.word	0xfffe000f
2405525c:	a7fdabf8 	.word	0xa7fdabf8
24055260:	cccccccd 	.word	0xcccccccd
24055264:	40020010 	.word	0x40020010
24055268:	40020028 	.word	0x40020028
2405526c:	40020040 	.word	0x40020040
24055270:	40020058 	.word	0x40020058
24055274:	40020070 	.word	0x40020070
24055278:	40020088 	.word	0x40020088
2405527c:	400200a0 	.word	0x400200a0
24055280:	400200b8 	.word	0x400200b8
24055284:	40020410 	.word	0x40020410
24055288:	40020428 	.word	0x40020428
2405528c:	40020440 	.word	0x40020440
24055290:	40020458 	.word	0x40020458
24055294:	40020470 	.word	0x40020470
24055298:	40020488 	.word	0x40020488
2405529c:	400204a0 	.word	0x400204a0
240552a0:	400204b8 	.word	0x400204b8
240552a4:	2300      	movs	r3, #0
240552a6:	2b00      	cmp	r3, #0
240552a8:	d032      	beq.n	24055310 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
240552aa:	6878      	ldr	r0, [r7, #4]
240552ac:	f002 fa8a 	bl	240577c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
240552b0:	687b      	ldr	r3, [r7, #4]
240552b2:	689b      	ldr	r3, [r3, #8]
240552b4:	2b80      	cmp	r3, #128	; 0x80
240552b6:	d102      	bne.n	240552be <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
240552b8:	687b      	ldr	r3, [r7, #4]
240552ba:	2200      	movs	r2, #0
240552bc:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
240552be:	687b      	ldr	r3, [r7, #4]
240552c0:	685a      	ldr	r2, [r3, #4]
240552c2:	687b      	ldr	r3, [r7, #4]
240552c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240552c6:	b2d2      	uxtb	r2, r2
240552c8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240552ca:	687b      	ldr	r3, [r7, #4]
240552cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240552ce:	687a      	ldr	r2, [r7, #4]
240552d0:	6e92      	ldr	r2, [r2, #104]	; 0x68
240552d2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
240552d4:	687b      	ldr	r3, [r7, #4]
240552d6:	685b      	ldr	r3, [r3, #4]
240552d8:	2b00      	cmp	r3, #0
240552da:	d010      	beq.n	240552fe <HAL_DMA_Init+0x6f2>
240552dc:	687b      	ldr	r3, [r7, #4]
240552de:	685b      	ldr	r3, [r3, #4]
240552e0:	2b08      	cmp	r3, #8
240552e2:	d80c      	bhi.n	240552fe <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
240552e4:	6878      	ldr	r0, [r7, #4]
240552e6:	f002 fb07 	bl	240578f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
240552ea:	687b      	ldr	r3, [r7, #4]
240552ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240552ee:	2200      	movs	r2, #0
240552f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240552f2:	687b      	ldr	r3, [r7, #4]
240552f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240552f6:	687a      	ldr	r2, [r7, #4]
240552f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
240552fa:	605a      	str	r2, [r3, #4]
240552fc:	e008      	b.n	24055310 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
240552fe:	687b      	ldr	r3, [r7, #4]
24055300:	2200      	movs	r2, #0
24055302:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
24055304:	687b      	ldr	r3, [r7, #4]
24055306:	2200      	movs	r2, #0
24055308:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
2405530a:	687b      	ldr	r3, [r7, #4]
2405530c:	2200      	movs	r2, #0
2405530e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24055310:	687b      	ldr	r3, [r7, #4]
24055312:	2200      	movs	r2, #0
24055314:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
24055316:	687b      	ldr	r3, [r7, #4]
24055318:	2201      	movs	r2, #1
2405531a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
2405531e:	2300      	movs	r3, #0
}
24055320:	4618      	mov	r0, r3
24055322:	3718      	adds	r7, #24
24055324:	46bd      	mov	sp, r7
24055326:	bd80      	pop	{r7, pc}

24055328 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24055328:	b580      	push	{r7, lr}
2405532a:	b086      	sub	sp, #24
2405532c:	af00      	add	r7, sp, #0
2405532e:	60f8      	str	r0, [r7, #12]
24055330:	60b9      	str	r1, [r7, #8]
24055332:	607a      	str	r2, [r7, #4]
24055334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24055336:	2300      	movs	r3, #0
24055338:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2405533a:	68fb      	ldr	r3, [r7, #12]
2405533c:	2b00      	cmp	r3, #0
2405533e:	d101      	bne.n	24055344 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
24055340:	2301      	movs	r3, #1
24055342:	e226      	b.n	24055792 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24055344:	68fb      	ldr	r3, [r7, #12]
24055346:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
2405534a:	2b01      	cmp	r3, #1
2405534c:	d101      	bne.n	24055352 <HAL_DMA_Start_IT+0x2a>
2405534e:	2302      	movs	r3, #2
24055350:	e21f      	b.n	24055792 <HAL_DMA_Start_IT+0x46a>
24055352:	68fb      	ldr	r3, [r7, #12]
24055354:	2201      	movs	r2, #1
24055356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
2405535a:	68fb      	ldr	r3, [r7, #12]
2405535c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24055360:	b2db      	uxtb	r3, r3
24055362:	2b01      	cmp	r3, #1
24055364:	f040 820a 	bne.w	2405577c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24055368:	68fb      	ldr	r3, [r7, #12]
2405536a:	2202      	movs	r2, #2
2405536c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24055370:	68fb      	ldr	r3, [r7, #12]
24055372:	2200      	movs	r2, #0
24055374:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24055376:	68fb      	ldr	r3, [r7, #12]
24055378:	681b      	ldr	r3, [r3, #0]
2405537a:	4a68      	ldr	r2, [pc, #416]	; (2405551c <HAL_DMA_Start_IT+0x1f4>)
2405537c:	4293      	cmp	r3, r2
2405537e:	d04a      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
24055380:	68fb      	ldr	r3, [r7, #12]
24055382:	681b      	ldr	r3, [r3, #0]
24055384:	4a66      	ldr	r2, [pc, #408]	; (24055520 <HAL_DMA_Start_IT+0x1f8>)
24055386:	4293      	cmp	r3, r2
24055388:	d045      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
2405538a:	68fb      	ldr	r3, [r7, #12]
2405538c:	681b      	ldr	r3, [r3, #0]
2405538e:	4a65      	ldr	r2, [pc, #404]	; (24055524 <HAL_DMA_Start_IT+0x1fc>)
24055390:	4293      	cmp	r3, r2
24055392:	d040      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
24055394:	68fb      	ldr	r3, [r7, #12]
24055396:	681b      	ldr	r3, [r3, #0]
24055398:	4a63      	ldr	r2, [pc, #396]	; (24055528 <HAL_DMA_Start_IT+0x200>)
2405539a:	4293      	cmp	r3, r2
2405539c:	d03b      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
2405539e:	68fb      	ldr	r3, [r7, #12]
240553a0:	681b      	ldr	r3, [r3, #0]
240553a2:	4a62      	ldr	r2, [pc, #392]	; (2405552c <HAL_DMA_Start_IT+0x204>)
240553a4:	4293      	cmp	r3, r2
240553a6:	d036      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
240553a8:	68fb      	ldr	r3, [r7, #12]
240553aa:	681b      	ldr	r3, [r3, #0]
240553ac:	4a60      	ldr	r2, [pc, #384]	; (24055530 <HAL_DMA_Start_IT+0x208>)
240553ae:	4293      	cmp	r3, r2
240553b0:	d031      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
240553b2:	68fb      	ldr	r3, [r7, #12]
240553b4:	681b      	ldr	r3, [r3, #0]
240553b6:	4a5f      	ldr	r2, [pc, #380]	; (24055534 <HAL_DMA_Start_IT+0x20c>)
240553b8:	4293      	cmp	r3, r2
240553ba:	d02c      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
240553bc:	68fb      	ldr	r3, [r7, #12]
240553be:	681b      	ldr	r3, [r3, #0]
240553c0:	4a5d      	ldr	r2, [pc, #372]	; (24055538 <HAL_DMA_Start_IT+0x210>)
240553c2:	4293      	cmp	r3, r2
240553c4:	d027      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
240553c6:	68fb      	ldr	r3, [r7, #12]
240553c8:	681b      	ldr	r3, [r3, #0]
240553ca:	4a5c      	ldr	r2, [pc, #368]	; (2405553c <HAL_DMA_Start_IT+0x214>)
240553cc:	4293      	cmp	r3, r2
240553ce:	d022      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
240553d0:	68fb      	ldr	r3, [r7, #12]
240553d2:	681b      	ldr	r3, [r3, #0]
240553d4:	4a5a      	ldr	r2, [pc, #360]	; (24055540 <HAL_DMA_Start_IT+0x218>)
240553d6:	4293      	cmp	r3, r2
240553d8:	d01d      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
240553da:	68fb      	ldr	r3, [r7, #12]
240553dc:	681b      	ldr	r3, [r3, #0]
240553de:	4a59      	ldr	r2, [pc, #356]	; (24055544 <HAL_DMA_Start_IT+0x21c>)
240553e0:	4293      	cmp	r3, r2
240553e2:	d018      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
240553e4:	68fb      	ldr	r3, [r7, #12]
240553e6:	681b      	ldr	r3, [r3, #0]
240553e8:	4a57      	ldr	r2, [pc, #348]	; (24055548 <HAL_DMA_Start_IT+0x220>)
240553ea:	4293      	cmp	r3, r2
240553ec:	d013      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
240553ee:	68fb      	ldr	r3, [r7, #12]
240553f0:	681b      	ldr	r3, [r3, #0]
240553f2:	4a56      	ldr	r2, [pc, #344]	; (2405554c <HAL_DMA_Start_IT+0x224>)
240553f4:	4293      	cmp	r3, r2
240553f6:	d00e      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
240553f8:	68fb      	ldr	r3, [r7, #12]
240553fa:	681b      	ldr	r3, [r3, #0]
240553fc:	4a54      	ldr	r2, [pc, #336]	; (24055550 <HAL_DMA_Start_IT+0x228>)
240553fe:	4293      	cmp	r3, r2
24055400:	d009      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
24055402:	68fb      	ldr	r3, [r7, #12]
24055404:	681b      	ldr	r3, [r3, #0]
24055406:	4a53      	ldr	r2, [pc, #332]	; (24055554 <HAL_DMA_Start_IT+0x22c>)
24055408:	4293      	cmp	r3, r2
2405540a:	d004      	beq.n	24055416 <HAL_DMA_Start_IT+0xee>
2405540c:	68fb      	ldr	r3, [r7, #12]
2405540e:	681b      	ldr	r3, [r3, #0]
24055410:	4a51      	ldr	r2, [pc, #324]	; (24055558 <HAL_DMA_Start_IT+0x230>)
24055412:	4293      	cmp	r3, r2
24055414:	d108      	bne.n	24055428 <HAL_DMA_Start_IT+0x100>
24055416:	68fb      	ldr	r3, [r7, #12]
24055418:	681b      	ldr	r3, [r3, #0]
2405541a:	681a      	ldr	r2, [r3, #0]
2405541c:	68fb      	ldr	r3, [r7, #12]
2405541e:	681b      	ldr	r3, [r3, #0]
24055420:	f022 0201 	bic.w	r2, r2, #1
24055424:	601a      	str	r2, [r3, #0]
24055426:	e007      	b.n	24055438 <HAL_DMA_Start_IT+0x110>
24055428:	68fb      	ldr	r3, [r7, #12]
2405542a:	681b      	ldr	r3, [r3, #0]
2405542c:	681a      	ldr	r2, [r3, #0]
2405542e:	68fb      	ldr	r3, [r7, #12]
24055430:	681b      	ldr	r3, [r3, #0]
24055432:	f022 0201 	bic.w	r2, r2, #1
24055436:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24055438:	683b      	ldr	r3, [r7, #0]
2405543a:	687a      	ldr	r2, [r7, #4]
2405543c:	68b9      	ldr	r1, [r7, #8]
2405543e:	68f8      	ldr	r0, [r7, #12]
24055440:	f001 feae 	bl	240571a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24055444:	68fb      	ldr	r3, [r7, #12]
24055446:	681b      	ldr	r3, [r3, #0]
24055448:	4a34      	ldr	r2, [pc, #208]	; (2405551c <HAL_DMA_Start_IT+0x1f4>)
2405544a:	4293      	cmp	r3, r2
2405544c:	d04a      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
2405544e:	68fb      	ldr	r3, [r7, #12]
24055450:	681b      	ldr	r3, [r3, #0]
24055452:	4a33      	ldr	r2, [pc, #204]	; (24055520 <HAL_DMA_Start_IT+0x1f8>)
24055454:	4293      	cmp	r3, r2
24055456:	d045      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
24055458:	68fb      	ldr	r3, [r7, #12]
2405545a:	681b      	ldr	r3, [r3, #0]
2405545c:	4a31      	ldr	r2, [pc, #196]	; (24055524 <HAL_DMA_Start_IT+0x1fc>)
2405545e:	4293      	cmp	r3, r2
24055460:	d040      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
24055462:	68fb      	ldr	r3, [r7, #12]
24055464:	681b      	ldr	r3, [r3, #0]
24055466:	4a30      	ldr	r2, [pc, #192]	; (24055528 <HAL_DMA_Start_IT+0x200>)
24055468:	4293      	cmp	r3, r2
2405546a:	d03b      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
2405546c:	68fb      	ldr	r3, [r7, #12]
2405546e:	681b      	ldr	r3, [r3, #0]
24055470:	4a2e      	ldr	r2, [pc, #184]	; (2405552c <HAL_DMA_Start_IT+0x204>)
24055472:	4293      	cmp	r3, r2
24055474:	d036      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
24055476:	68fb      	ldr	r3, [r7, #12]
24055478:	681b      	ldr	r3, [r3, #0]
2405547a:	4a2d      	ldr	r2, [pc, #180]	; (24055530 <HAL_DMA_Start_IT+0x208>)
2405547c:	4293      	cmp	r3, r2
2405547e:	d031      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
24055480:	68fb      	ldr	r3, [r7, #12]
24055482:	681b      	ldr	r3, [r3, #0]
24055484:	4a2b      	ldr	r2, [pc, #172]	; (24055534 <HAL_DMA_Start_IT+0x20c>)
24055486:	4293      	cmp	r3, r2
24055488:	d02c      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
2405548a:	68fb      	ldr	r3, [r7, #12]
2405548c:	681b      	ldr	r3, [r3, #0]
2405548e:	4a2a      	ldr	r2, [pc, #168]	; (24055538 <HAL_DMA_Start_IT+0x210>)
24055490:	4293      	cmp	r3, r2
24055492:	d027      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
24055494:	68fb      	ldr	r3, [r7, #12]
24055496:	681b      	ldr	r3, [r3, #0]
24055498:	4a28      	ldr	r2, [pc, #160]	; (2405553c <HAL_DMA_Start_IT+0x214>)
2405549a:	4293      	cmp	r3, r2
2405549c:	d022      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
2405549e:	68fb      	ldr	r3, [r7, #12]
240554a0:	681b      	ldr	r3, [r3, #0]
240554a2:	4a27      	ldr	r2, [pc, #156]	; (24055540 <HAL_DMA_Start_IT+0x218>)
240554a4:	4293      	cmp	r3, r2
240554a6:	d01d      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
240554a8:	68fb      	ldr	r3, [r7, #12]
240554aa:	681b      	ldr	r3, [r3, #0]
240554ac:	4a25      	ldr	r2, [pc, #148]	; (24055544 <HAL_DMA_Start_IT+0x21c>)
240554ae:	4293      	cmp	r3, r2
240554b0:	d018      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
240554b2:	68fb      	ldr	r3, [r7, #12]
240554b4:	681b      	ldr	r3, [r3, #0]
240554b6:	4a24      	ldr	r2, [pc, #144]	; (24055548 <HAL_DMA_Start_IT+0x220>)
240554b8:	4293      	cmp	r3, r2
240554ba:	d013      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
240554bc:	68fb      	ldr	r3, [r7, #12]
240554be:	681b      	ldr	r3, [r3, #0]
240554c0:	4a22      	ldr	r2, [pc, #136]	; (2405554c <HAL_DMA_Start_IT+0x224>)
240554c2:	4293      	cmp	r3, r2
240554c4:	d00e      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
240554c6:	68fb      	ldr	r3, [r7, #12]
240554c8:	681b      	ldr	r3, [r3, #0]
240554ca:	4a21      	ldr	r2, [pc, #132]	; (24055550 <HAL_DMA_Start_IT+0x228>)
240554cc:	4293      	cmp	r3, r2
240554ce:	d009      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
240554d0:	68fb      	ldr	r3, [r7, #12]
240554d2:	681b      	ldr	r3, [r3, #0]
240554d4:	4a1f      	ldr	r2, [pc, #124]	; (24055554 <HAL_DMA_Start_IT+0x22c>)
240554d6:	4293      	cmp	r3, r2
240554d8:	d004      	beq.n	240554e4 <HAL_DMA_Start_IT+0x1bc>
240554da:	68fb      	ldr	r3, [r7, #12]
240554dc:	681b      	ldr	r3, [r3, #0]
240554de:	4a1e      	ldr	r2, [pc, #120]	; (24055558 <HAL_DMA_Start_IT+0x230>)
240554e0:	4293      	cmp	r3, r2
240554e2:	d101      	bne.n	240554e8 <HAL_DMA_Start_IT+0x1c0>
240554e4:	2301      	movs	r3, #1
240554e6:	e000      	b.n	240554ea <HAL_DMA_Start_IT+0x1c2>
240554e8:	2300      	movs	r3, #0
240554ea:	2b00      	cmp	r3, #0
240554ec:	d036      	beq.n	2405555c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
240554ee:	68fb      	ldr	r3, [r7, #12]
240554f0:	681b      	ldr	r3, [r3, #0]
240554f2:	681b      	ldr	r3, [r3, #0]
240554f4:	f023 021e 	bic.w	r2, r3, #30
240554f8:	68fb      	ldr	r3, [r7, #12]
240554fa:	681b      	ldr	r3, [r3, #0]
240554fc:	f042 0216 	orr.w	r2, r2, #22
24055500:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24055502:	68fb      	ldr	r3, [r7, #12]
24055504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24055506:	2b00      	cmp	r3, #0
24055508:	d03e      	beq.n	24055588 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
2405550a:	68fb      	ldr	r3, [r7, #12]
2405550c:	681b      	ldr	r3, [r3, #0]
2405550e:	681a      	ldr	r2, [r3, #0]
24055510:	68fb      	ldr	r3, [r7, #12]
24055512:	681b      	ldr	r3, [r3, #0]
24055514:	f042 0208 	orr.w	r2, r2, #8
24055518:	601a      	str	r2, [r3, #0]
2405551a:	e035      	b.n	24055588 <HAL_DMA_Start_IT+0x260>
2405551c:	40020010 	.word	0x40020010
24055520:	40020028 	.word	0x40020028
24055524:	40020040 	.word	0x40020040
24055528:	40020058 	.word	0x40020058
2405552c:	40020070 	.word	0x40020070
24055530:	40020088 	.word	0x40020088
24055534:	400200a0 	.word	0x400200a0
24055538:	400200b8 	.word	0x400200b8
2405553c:	40020410 	.word	0x40020410
24055540:	40020428 	.word	0x40020428
24055544:	40020440 	.word	0x40020440
24055548:	40020458 	.word	0x40020458
2405554c:	40020470 	.word	0x40020470
24055550:	40020488 	.word	0x40020488
24055554:	400204a0 	.word	0x400204a0
24055558:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
2405555c:	68fb      	ldr	r3, [r7, #12]
2405555e:	681b      	ldr	r3, [r3, #0]
24055560:	681b      	ldr	r3, [r3, #0]
24055562:	f023 020e 	bic.w	r2, r3, #14
24055566:	68fb      	ldr	r3, [r7, #12]
24055568:	681b      	ldr	r3, [r3, #0]
2405556a:	f042 020a 	orr.w	r2, r2, #10
2405556e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24055570:	68fb      	ldr	r3, [r7, #12]
24055572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24055574:	2b00      	cmp	r3, #0
24055576:	d007      	beq.n	24055588 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24055578:	68fb      	ldr	r3, [r7, #12]
2405557a:	681b      	ldr	r3, [r3, #0]
2405557c:	681a      	ldr	r2, [r3, #0]
2405557e:	68fb      	ldr	r3, [r7, #12]
24055580:	681b      	ldr	r3, [r3, #0]
24055582:	f042 0204 	orr.w	r2, r2, #4
24055586:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24055588:	68fb      	ldr	r3, [r7, #12]
2405558a:	681b      	ldr	r3, [r3, #0]
2405558c:	4a83      	ldr	r2, [pc, #524]	; (2405579c <HAL_DMA_Start_IT+0x474>)
2405558e:	4293      	cmp	r3, r2
24055590:	d072      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
24055592:	68fb      	ldr	r3, [r7, #12]
24055594:	681b      	ldr	r3, [r3, #0]
24055596:	4a82      	ldr	r2, [pc, #520]	; (240557a0 <HAL_DMA_Start_IT+0x478>)
24055598:	4293      	cmp	r3, r2
2405559a:	d06d      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
2405559c:	68fb      	ldr	r3, [r7, #12]
2405559e:	681b      	ldr	r3, [r3, #0]
240555a0:	4a80      	ldr	r2, [pc, #512]	; (240557a4 <HAL_DMA_Start_IT+0x47c>)
240555a2:	4293      	cmp	r3, r2
240555a4:	d068      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
240555a6:	68fb      	ldr	r3, [r7, #12]
240555a8:	681b      	ldr	r3, [r3, #0]
240555aa:	4a7f      	ldr	r2, [pc, #508]	; (240557a8 <HAL_DMA_Start_IT+0x480>)
240555ac:	4293      	cmp	r3, r2
240555ae:	d063      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
240555b0:	68fb      	ldr	r3, [r7, #12]
240555b2:	681b      	ldr	r3, [r3, #0]
240555b4:	4a7d      	ldr	r2, [pc, #500]	; (240557ac <HAL_DMA_Start_IT+0x484>)
240555b6:	4293      	cmp	r3, r2
240555b8:	d05e      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
240555ba:	68fb      	ldr	r3, [r7, #12]
240555bc:	681b      	ldr	r3, [r3, #0]
240555be:	4a7c      	ldr	r2, [pc, #496]	; (240557b0 <HAL_DMA_Start_IT+0x488>)
240555c0:	4293      	cmp	r3, r2
240555c2:	d059      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
240555c4:	68fb      	ldr	r3, [r7, #12]
240555c6:	681b      	ldr	r3, [r3, #0]
240555c8:	4a7a      	ldr	r2, [pc, #488]	; (240557b4 <HAL_DMA_Start_IT+0x48c>)
240555ca:	4293      	cmp	r3, r2
240555cc:	d054      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
240555ce:	68fb      	ldr	r3, [r7, #12]
240555d0:	681b      	ldr	r3, [r3, #0]
240555d2:	4a79      	ldr	r2, [pc, #484]	; (240557b8 <HAL_DMA_Start_IT+0x490>)
240555d4:	4293      	cmp	r3, r2
240555d6:	d04f      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
240555d8:	68fb      	ldr	r3, [r7, #12]
240555da:	681b      	ldr	r3, [r3, #0]
240555dc:	4a77      	ldr	r2, [pc, #476]	; (240557bc <HAL_DMA_Start_IT+0x494>)
240555de:	4293      	cmp	r3, r2
240555e0:	d04a      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
240555e2:	68fb      	ldr	r3, [r7, #12]
240555e4:	681b      	ldr	r3, [r3, #0]
240555e6:	4a76      	ldr	r2, [pc, #472]	; (240557c0 <HAL_DMA_Start_IT+0x498>)
240555e8:	4293      	cmp	r3, r2
240555ea:	d045      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
240555ec:	68fb      	ldr	r3, [r7, #12]
240555ee:	681b      	ldr	r3, [r3, #0]
240555f0:	4a74      	ldr	r2, [pc, #464]	; (240557c4 <HAL_DMA_Start_IT+0x49c>)
240555f2:	4293      	cmp	r3, r2
240555f4:	d040      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
240555f6:	68fb      	ldr	r3, [r7, #12]
240555f8:	681b      	ldr	r3, [r3, #0]
240555fa:	4a73      	ldr	r2, [pc, #460]	; (240557c8 <HAL_DMA_Start_IT+0x4a0>)
240555fc:	4293      	cmp	r3, r2
240555fe:	d03b      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
24055600:	68fb      	ldr	r3, [r7, #12]
24055602:	681b      	ldr	r3, [r3, #0]
24055604:	4a71      	ldr	r2, [pc, #452]	; (240557cc <HAL_DMA_Start_IT+0x4a4>)
24055606:	4293      	cmp	r3, r2
24055608:	d036      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
2405560a:	68fb      	ldr	r3, [r7, #12]
2405560c:	681b      	ldr	r3, [r3, #0]
2405560e:	4a70      	ldr	r2, [pc, #448]	; (240557d0 <HAL_DMA_Start_IT+0x4a8>)
24055610:	4293      	cmp	r3, r2
24055612:	d031      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
24055614:	68fb      	ldr	r3, [r7, #12]
24055616:	681b      	ldr	r3, [r3, #0]
24055618:	4a6e      	ldr	r2, [pc, #440]	; (240557d4 <HAL_DMA_Start_IT+0x4ac>)
2405561a:	4293      	cmp	r3, r2
2405561c:	d02c      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
2405561e:	68fb      	ldr	r3, [r7, #12]
24055620:	681b      	ldr	r3, [r3, #0]
24055622:	4a6d      	ldr	r2, [pc, #436]	; (240557d8 <HAL_DMA_Start_IT+0x4b0>)
24055624:	4293      	cmp	r3, r2
24055626:	d027      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
24055628:	68fb      	ldr	r3, [r7, #12]
2405562a:	681b      	ldr	r3, [r3, #0]
2405562c:	4a6b      	ldr	r2, [pc, #428]	; (240557dc <HAL_DMA_Start_IT+0x4b4>)
2405562e:	4293      	cmp	r3, r2
24055630:	d022      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
24055632:	68fb      	ldr	r3, [r7, #12]
24055634:	681b      	ldr	r3, [r3, #0]
24055636:	4a6a      	ldr	r2, [pc, #424]	; (240557e0 <HAL_DMA_Start_IT+0x4b8>)
24055638:	4293      	cmp	r3, r2
2405563a:	d01d      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
2405563c:	68fb      	ldr	r3, [r7, #12]
2405563e:	681b      	ldr	r3, [r3, #0]
24055640:	4a68      	ldr	r2, [pc, #416]	; (240557e4 <HAL_DMA_Start_IT+0x4bc>)
24055642:	4293      	cmp	r3, r2
24055644:	d018      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
24055646:	68fb      	ldr	r3, [r7, #12]
24055648:	681b      	ldr	r3, [r3, #0]
2405564a:	4a67      	ldr	r2, [pc, #412]	; (240557e8 <HAL_DMA_Start_IT+0x4c0>)
2405564c:	4293      	cmp	r3, r2
2405564e:	d013      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
24055650:	68fb      	ldr	r3, [r7, #12]
24055652:	681b      	ldr	r3, [r3, #0]
24055654:	4a65      	ldr	r2, [pc, #404]	; (240557ec <HAL_DMA_Start_IT+0x4c4>)
24055656:	4293      	cmp	r3, r2
24055658:	d00e      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
2405565a:	68fb      	ldr	r3, [r7, #12]
2405565c:	681b      	ldr	r3, [r3, #0]
2405565e:	4a64      	ldr	r2, [pc, #400]	; (240557f0 <HAL_DMA_Start_IT+0x4c8>)
24055660:	4293      	cmp	r3, r2
24055662:	d009      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
24055664:	68fb      	ldr	r3, [r7, #12]
24055666:	681b      	ldr	r3, [r3, #0]
24055668:	4a62      	ldr	r2, [pc, #392]	; (240557f4 <HAL_DMA_Start_IT+0x4cc>)
2405566a:	4293      	cmp	r3, r2
2405566c:	d004      	beq.n	24055678 <HAL_DMA_Start_IT+0x350>
2405566e:	68fb      	ldr	r3, [r7, #12]
24055670:	681b      	ldr	r3, [r3, #0]
24055672:	4a61      	ldr	r2, [pc, #388]	; (240557f8 <HAL_DMA_Start_IT+0x4d0>)
24055674:	4293      	cmp	r3, r2
24055676:	d101      	bne.n	2405567c <HAL_DMA_Start_IT+0x354>
24055678:	2301      	movs	r3, #1
2405567a:	e000      	b.n	2405567e <HAL_DMA_Start_IT+0x356>
2405567c:	2300      	movs	r3, #0
2405567e:	2b00      	cmp	r3, #0
24055680:	d01a      	beq.n	240556b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24055682:	68fb      	ldr	r3, [r7, #12]
24055684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24055686:	681b      	ldr	r3, [r3, #0]
24055688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405568c:	2b00      	cmp	r3, #0
2405568e:	d007      	beq.n	240556a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24055690:	68fb      	ldr	r3, [r7, #12]
24055692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24055694:	681a      	ldr	r2, [r3, #0]
24055696:	68fb      	ldr	r3, [r7, #12]
24055698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405569a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2405569e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
240556a0:	68fb      	ldr	r3, [r7, #12]
240556a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240556a4:	2b00      	cmp	r3, #0
240556a6:	d007      	beq.n	240556b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
240556a8:	68fb      	ldr	r3, [r7, #12]
240556aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240556ac:	681a      	ldr	r2, [r3, #0]
240556ae:	68fb      	ldr	r3, [r7, #12]
240556b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240556b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240556b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
240556b8:	68fb      	ldr	r3, [r7, #12]
240556ba:	681b      	ldr	r3, [r3, #0]
240556bc:	4a37      	ldr	r2, [pc, #220]	; (2405579c <HAL_DMA_Start_IT+0x474>)
240556be:	4293      	cmp	r3, r2
240556c0:	d04a      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
240556c2:	68fb      	ldr	r3, [r7, #12]
240556c4:	681b      	ldr	r3, [r3, #0]
240556c6:	4a36      	ldr	r2, [pc, #216]	; (240557a0 <HAL_DMA_Start_IT+0x478>)
240556c8:	4293      	cmp	r3, r2
240556ca:	d045      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
240556cc:	68fb      	ldr	r3, [r7, #12]
240556ce:	681b      	ldr	r3, [r3, #0]
240556d0:	4a34      	ldr	r2, [pc, #208]	; (240557a4 <HAL_DMA_Start_IT+0x47c>)
240556d2:	4293      	cmp	r3, r2
240556d4:	d040      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
240556d6:	68fb      	ldr	r3, [r7, #12]
240556d8:	681b      	ldr	r3, [r3, #0]
240556da:	4a33      	ldr	r2, [pc, #204]	; (240557a8 <HAL_DMA_Start_IT+0x480>)
240556dc:	4293      	cmp	r3, r2
240556de:	d03b      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
240556e0:	68fb      	ldr	r3, [r7, #12]
240556e2:	681b      	ldr	r3, [r3, #0]
240556e4:	4a31      	ldr	r2, [pc, #196]	; (240557ac <HAL_DMA_Start_IT+0x484>)
240556e6:	4293      	cmp	r3, r2
240556e8:	d036      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
240556ea:	68fb      	ldr	r3, [r7, #12]
240556ec:	681b      	ldr	r3, [r3, #0]
240556ee:	4a30      	ldr	r2, [pc, #192]	; (240557b0 <HAL_DMA_Start_IT+0x488>)
240556f0:	4293      	cmp	r3, r2
240556f2:	d031      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
240556f4:	68fb      	ldr	r3, [r7, #12]
240556f6:	681b      	ldr	r3, [r3, #0]
240556f8:	4a2e      	ldr	r2, [pc, #184]	; (240557b4 <HAL_DMA_Start_IT+0x48c>)
240556fa:	4293      	cmp	r3, r2
240556fc:	d02c      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
240556fe:	68fb      	ldr	r3, [r7, #12]
24055700:	681b      	ldr	r3, [r3, #0]
24055702:	4a2d      	ldr	r2, [pc, #180]	; (240557b8 <HAL_DMA_Start_IT+0x490>)
24055704:	4293      	cmp	r3, r2
24055706:	d027      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
24055708:	68fb      	ldr	r3, [r7, #12]
2405570a:	681b      	ldr	r3, [r3, #0]
2405570c:	4a2b      	ldr	r2, [pc, #172]	; (240557bc <HAL_DMA_Start_IT+0x494>)
2405570e:	4293      	cmp	r3, r2
24055710:	d022      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
24055712:	68fb      	ldr	r3, [r7, #12]
24055714:	681b      	ldr	r3, [r3, #0]
24055716:	4a2a      	ldr	r2, [pc, #168]	; (240557c0 <HAL_DMA_Start_IT+0x498>)
24055718:	4293      	cmp	r3, r2
2405571a:	d01d      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
2405571c:	68fb      	ldr	r3, [r7, #12]
2405571e:	681b      	ldr	r3, [r3, #0]
24055720:	4a28      	ldr	r2, [pc, #160]	; (240557c4 <HAL_DMA_Start_IT+0x49c>)
24055722:	4293      	cmp	r3, r2
24055724:	d018      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
24055726:	68fb      	ldr	r3, [r7, #12]
24055728:	681b      	ldr	r3, [r3, #0]
2405572a:	4a27      	ldr	r2, [pc, #156]	; (240557c8 <HAL_DMA_Start_IT+0x4a0>)
2405572c:	4293      	cmp	r3, r2
2405572e:	d013      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
24055730:	68fb      	ldr	r3, [r7, #12]
24055732:	681b      	ldr	r3, [r3, #0]
24055734:	4a25      	ldr	r2, [pc, #148]	; (240557cc <HAL_DMA_Start_IT+0x4a4>)
24055736:	4293      	cmp	r3, r2
24055738:	d00e      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
2405573a:	68fb      	ldr	r3, [r7, #12]
2405573c:	681b      	ldr	r3, [r3, #0]
2405573e:	4a24      	ldr	r2, [pc, #144]	; (240557d0 <HAL_DMA_Start_IT+0x4a8>)
24055740:	4293      	cmp	r3, r2
24055742:	d009      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
24055744:	68fb      	ldr	r3, [r7, #12]
24055746:	681b      	ldr	r3, [r3, #0]
24055748:	4a22      	ldr	r2, [pc, #136]	; (240557d4 <HAL_DMA_Start_IT+0x4ac>)
2405574a:	4293      	cmp	r3, r2
2405574c:	d004      	beq.n	24055758 <HAL_DMA_Start_IT+0x430>
2405574e:	68fb      	ldr	r3, [r7, #12]
24055750:	681b      	ldr	r3, [r3, #0]
24055752:	4a21      	ldr	r2, [pc, #132]	; (240557d8 <HAL_DMA_Start_IT+0x4b0>)
24055754:	4293      	cmp	r3, r2
24055756:	d108      	bne.n	2405576a <HAL_DMA_Start_IT+0x442>
24055758:	68fb      	ldr	r3, [r7, #12]
2405575a:	681b      	ldr	r3, [r3, #0]
2405575c:	681a      	ldr	r2, [r3, #0]
2405575e:	68fb      	ldr	r3, [r7, #12]
24055760:	681b      	ldr	r3, [r3, #0]
24055762:	f042 0201 	orr.w	r2, r2, #1
24055766:	601a      	str	r2, [r3, #0]
24055768:	e012      	b.n	24055790 <HAL_DMA_Start_IT+0x468>
2405576a:	68fb      	ldr	r3, [r7, #12]
2405576c:	681b      	ldr	r3, [r3, #0]
2405576e:	681a      	ldr	r2, [r3, #0]
24055770:	68fb      	ldr	r3, [r7, #12]
24055772:	681b      	ldr	r3, [r3, #0]
24055774:	f042 0201 	orr.w	r2, r2, #1
24055778:	601a      	str	r2, [r3, #0]
2405577a:	e009      	b.n	24055790 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2405577c:	68fb      	ldr	r3, [r7, #12]
2405577e:	f44f 6200 	mov.w	r2, #2048	; 0x800
24055782:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
24055784:	68fb      	ldr	r3, [r7, #12]
24055786:	2200      	movs	r2, #0
24055788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
2405578c:	2301      	movs	r3, #1
2405578e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
24055790:	7dfb      	ldrb	r3, [r7, #23]
}
24055792:	4618      	mov	r0, r3
24055794:	3718      	adds	r7, #24
24055796:	46bd      	mov	sp, r7
24055798:	bd80      	pop	{r7, pc}
2405579a:	bf00      	nop
2405579c:	40020010 	.word	0x40020010
240557a0:	40020028 	.word	0x40020028
240557a4:	40020040 	.word	0x40020040
240557a8:	40020058 	.word	0x40020058
240557ac:	40020070 	.word	0x40020070
240557b0:	40020088 	.word	0x40020088
240557b4:	400200a0 	.word	0x400200a0
240557b8:	400200b8 	.word	0x400200b8
240557bc:	40020410 	.word	0x40020410
240557c0:	40020428 	.word	0x40020428
240557c4:	40020440 	.word	0x40020440
240557c8:	40020458 	.word	0x40020458
240557cc:	40020470 	.word	0x40020470
240557d0:	40020488 	.word	0x40020488
240557d4:	400204a0 	.word	0x400204a0
240557d8:	400204b8 	.word	0x400204b8
240557dc:	58025408 	.word	0x58025408
240557e0:	5802541c 	.word	0x5802541c
240557e4:	58025430 	.word	0x58025430
240557e8:	58025444 	.word	0x58025444
240557ec:	58025458 	.word	0x58025458
240557f0:	5802546c 	.word	0x5802546c
240557f4:	58025480 	.word	0x58025480
240557f8:	58025494 	.word	0x58025494

240557fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
240557fc:	b580      	push	{r7, lr}
240557fe:	b086      	sub	sp, #24
24055800:	af00      	add	r7, sp, #0
24055802:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
24055804:	f7fd fa86 	bl	24052d14 <HAL_GetTick>
24055808:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
2405580a:	687b      	ldr	r3, [r7, #4]
2405580c:	2b00      	cmp	r3, #0
2405580e:	d101      	bne.n	24055814 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
24055810:	2301      	movs	r3, #1
24055812:	e2dc      	b.n	24055dce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
24055814:	687b      	ldr	r3, [r7, #4]
24055816:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2405581a:	b2db      	uxtb	r3, r3
2405581c:	2b02      	cmp	r3, #2
2405581e:	d008      	beq.n	24055832 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24055820:	687b      	ldr	r3, [r7, #4]
24055822:	2280      	movs	r2, #128	; 0x80
24055824:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24055826:	687b      	ldr	r3, [r7, #4]
24055828:	2200      	movs	r2, #0
2405582a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
2405582e:	2301      	movs	r3, #1
24055830:	e2cd      	b.n	24055dce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24055832:	687b      	ldr	r3, [r7, #4]
24055834:	681b      	ldr	r3, [r3, #0]
24055836:	4a76      	ldr	r2, [pc, #472]	; (24055a10 <HAL_DMA_Abort+0x214>)
24055838:	4293      	cmp	r3, r2
2405583a:	d04a      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
2405583c:	687b      	ldr	r3, [r7, #4]
2405583e:	681b      	ldr	r3, [r3, #0]
24055840:	4a74      	ldr	r2, [pc, #464]	; (24055a14 <HAL_DMA_Abort+0x218>)
24055842:	4293      	cmp	r3, r2
24055844:	d045      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
24055846:	687b      	ldr	r3, [r7, #4]
24055848:	681b      	ldr	r3, [r3, #0]
2405584a:	4a73      	ldr	r2, [pc, #460]	; (24055a18 <HAL_DMA_Abort+0x21c>)
2405584c:	4293      	cmp	r3, r2
2405584e:	d040      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
24055850:	687b      	ldr	r3, [r7, #4]
24055852:	681b      	ldr	r3, [r3, #0]
24055854:	4a71      	ldr	r2, [pc, #452]	; (24055a1c <HAL_DMA_Abort+0x220>)
24055856:	4293      	cmp	r3, r2
24055858:	d03b      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
2405585a:	687b      	ldr	r3, [r7, #4]
2405585c:	681b      	ldr	r3, [r3, #0]
2405585e:	4a70      	ldr	r2, [pc, #448]	; (24055a20 <HAL_DMA_Abort+0x224>)
24055860:	4293      	cmp	r3, r2
24055862:	d036      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
24055864:	687b      	ldr	r3, [r7, #4]
24055866:	681b      	ldr	r3, [r3, #0]
24055868:	4a6e      	ldr	r2, [pc, #440]	; (24055a24 <HAL_DMA_Abort+0x228>)
2405586a:	4293      	cmp	r3, r2
2405586c:	d031      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
2405586e:	687b      	ldr	r3, [r7, #4]
24055870:	681b      	ldr	r3, [r3, #0]
24055872:	4a6d      	ldr	r2, [pc, #436]	; (24055a28 <HAL_DMA_Abort+0x22c>)
24055874:	4293      	cmp	r3, r2
24055876:	d02c      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
24055878:	687b      	ldr	r3, [r7, #4]
2405587a:	681b      	ldr	r3, [r3, #0]
2405587c:	4a6b      	ldr	r2, [pc, #428]	; (24055a2c <HAL_DMA_Abort+0x230>)
2405587e:	4293      	cmp	r3, r2
24055880:	d027      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
24055882:	687b      	ldr	r3, [r7, #4]
24055884:	681b      	ldr	r3, [r3, #0]
24055886:	4a6a      	ldr	r2, [pc, #424]	; (24055a30 <HAL_DMA_Abort+0x234>)
24055888:	4293      	cmp	r3, r2
2405588a:	d022      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
2405588c:	687b      	ldr	r3, [r7, #4]
2405588e:	681b      	ldr	r3, [r3, #0]
24055890:	4a68      	ldr	r2, [pc, #416]	; (24055a34 <HAL_DMA_Abort+0x238>)
24055892:	4293      	cmp	r3, r2
24055894:	d01d      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
24055896:	687b      	ldr	r3, [r7, #4]
24055898:	681b      	ldr	r3, [r3, #0]
2405589a:	4a67      	ldr	r2, [pc, #412]	; (24055a38 <HAL_DMA_Abort+0x23c>)
2405589c:	4293      	cmp	r3, r2
2405589e:	d018      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
240558a0:	687b      	ldr	r3, [r7, #4]
240558a2:	681b      	ldr	r3, [r3, #0]
240558a4:	4a65      	ldr	r2, [pc, #404]	; (24055a3c <HAL_DMA_Abort+0x240>)
240558a6:	4293      	cmp	r3, r2
240558a8:	d013      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
240558aa:	687b      	ldr	r3, [r7, #4]
240558ac:	681b      	ldr	r3, [r3, #0]
240558ae:	4a64      	ldr	r2, [pc, #400]	; (24055a40 <HAL_DMA_Abort+0x244>)
240558b0:	4293      	cmp	r3, r2
240558b2:	d00e      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
240558b4:	687b      	ldr	r3, [r7, #4]
240558b6:	681b      	ldr	r3, [r3, #0]
240558b8:	4a62      	ldr	r2, [pc, #392]	; (24055a44 <HAL_DMA_Abort+0x248>)
240558ba:	4293      	cmp	r3, r2
240558bc:	d009      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
240558be:	687b      	ldr	r3, [r7, #4]
240558c0:	681b      	ldr	r3, [r3, #0]
240558c2:	4a61      	ldr	r2, [pc, #388]	; (24055a48 <HAL_DMA_Abort+0x24c>)
240558c4:	4293      	cmp	r3, r2
240558c6:	d004      	beq.n	240558d2 <HAL_DMA_Abort+0xd6>
240558c8:	687b      	ldr	r3, [r7, #4]
240558ca:	681b      	ldr	r3, [r3, #0]
240558cc:	4a5f      	ldr	r2, [pc, #380]	; (24055a4c <HAL_DMA_Abort+0x250>)
240558ce:	4293      	cmp	r3, r2
240558d0:	d101      	bne.n	240558d6 <HAL_DMA_Abort+0xda>
240558d2:	2301      	movs	r3, #1
240558d4:	e000      	b.n	240558d8 <HAL_DMA_Abort+0xdc>
240558d6:	2300      	movs	r3, #0
240558d8:	2b00      	cmp	r3, #0
240558da:	d013      	beq.n	24055904 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
240558dc:	687b      	ldr	r3, [r7, #4]
240558de:	681b      	ldr	r3, [r3, #0]
240558e0:	681a      	ldr	r2, [r3, #0]
240558e2:	687b      	ldr	r3, [r7, #4]
240558e4:	681b      	ldr	r3, [r3, #0]
240558e6:	f022 021e 	bic.w	r2, r2, #30
240558ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240558ec:	687b      	ldr	r3, [r7, #4]
240558ee:	681b      	ldr	r3, [r3, #0]
240558f0:	695a      	ldr	r2, [r3, #20]
240558f2:	687b      	ldr	r3, [r7, #4]
240558f4:	681b      	ldr	r3, [r3, #0]
240558f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
240558fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
240558fc:	687b      	ldr	r3, [r7, #4]
240558fe:	681b      	ldr	r3, [r3, #0]
24055900:	617b      	str	r3, [r7, #20]
24055902:	e00a      	b.n	2405591a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24055904:	687b      	ldr	r3, [r7, #4]
24055906:	681b      	ldr	r3, [r3, #0]
24055908:	681a      	ldr	r2, [r3, #0]
2405590a:	687b      	ldr	r3, [r7, #4]
2405590c:	681b      	ldr	r3, [r3, #0]
2405590e:	f022 020e 	bic.w	r2, r2, #14
24055912:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
24055914:	687b      	ldr	r3, [r7, #4]
24055916:	681b      	ldr	r3, [r3, #0]
24055918:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2405591a:	687b      	ldr	r3, [r7, #4]
2405591c:	681b      	ldr	r3, [r3, #0]
2405591e:	4a3c      	ldr	r2, [pc, #240]	; (24055a10 <HAL_DMA_Abort+0x214>)
24055920:	4293      	cmp	r3, r2
24055922:	d072      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
24055924:	687b      	ldr	r3, [r7, #4]
24055926:	681b      	ldr	r3, [r3, #0]
24055928:	4a3a      	ldr	r2, [pc, #232]	; (24055a14 <HAL_DMA_Abort+0x218>)
2405592a:	4293      	cmp	r3, r2
2405592c:	d06d      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
2405592e:	687b      	ldr	r3, [r7, #4]
24055930:	681b      	ldr	r3, [r3, #0]
24055932:	4a39      	ldr	r2, [pc, #228]	; (24055a18 <HAL_DMA_Abort+0x21c>)
24055934:	4293      	cmp	r3, r2
24055936:	d068      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
24055938:	687b      	ldr	r3, [r7, #4]
2405593a:	681b      	ldr	r3, [r3, #0]
2405593c:	4a37      	ldr	r2, [pc, #220]	; (24055a1c <HAL_DMA_Abort+0x220>)
2405593e:	4293      	cmp	r3, r2
24055940:	d063      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
24055942:	687b      	ldr	r3, [r7, #4]
24055944:	681b      	ldr	r3, [r3, #0]
24055946:	4a36      	ldr	r2, [pc, #216]	; (24055a20 <HAL_DMA_Abort+0x224>)
24055948:	4293      	cmp	r3, r2
2405594a:	d05e      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
2405594c:	687b      	ldr	r3, [r7, #4]
2405594e:	681b      	ldr	r3, [r3, #0]
24055950:	4a34      	ldr	r2, [pc, #208]	; (24055a24 <HAL_DMA_Abort+0x228>)
24055952:	4293      	cmp	r3, r2
24055954:	d059      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
24055956:	687b      	ldr	r3, [r7, #4]
24055958:	681b      	ldr	r3, [r3, #0]
2405595a:	4a33      	ldr	r2, [pc, #204]	; (24055a28 <HAL_DMA_Abort+0x22c>)
2405595c:	4293      	cmp	r3, r2
2405595e:	d054      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
24055960:	687b      	ldr	r3, [r7, #4]
24055962:	681b      	ldr	r3, [r3, #0]
24055964:	4a31      	ldr	r2, [pc, #196]	; (24055a2c <HAL_DMA_Abort+0x230>)
24055966:	4293      	cmp	r3, r2
24055968:	d04f      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
2405596a:	687b      	ldr	r3, [r7, #4]
2405596c:	681b      	ldr	r3, [r3, #0]
2405596e:	4a30      	ldr	r2, [pc, #192]	; (24055a30 <HAL_DMA_Abort+0x234>)
24055970:	4293      	cmp	r3, r2
24055972:	d04a      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
24055974:	687b      	ldr	r3, [r7, #4]
24055976:	681b      	ldr	r3, [r3, #0]
24055978:	4a2e      	ldr	r2, [pc, #184]	; (24055a34 <HAL_DMA_Abort+0x238>)
2405597a:	4293      	cmp	r3, r2
2405597c:	d045      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
2405597e:	687b      	ldr	r3, [r7, #4]
24055980:	681b      	ldr	r3, [r3, #0]
24055982:	4a2d      	ldr	r2, [pc, #180]	; (24055a38 <HAL_DMA_Abort+0x23c>)
24055984:	4293      	cmp	r3, r2
24055986:	d040      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
24055988:	687b      	ldr	r3, [r7, #4]
2405598a:	681b      	ldr	r3, [r3, #0]
2405598c:	4a2b      	ldr	r2, [pc, #172]	; (24055a3c <HAL_DMA_Abort+0x240>)
2405598e:	4293      	cmp	r3, r2
24055990:	d03b      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
24055992:	687b      	ldr	r3, [r7, #4]
24055994:	681b      	ldr	r3, [r3, #0]
24055996:	4a2a      	ldr	r2, [pc, #168]	; (24055a40 <HAL_DMA_Abort+0x244>)
24055998:	4293      	cmp	r3, r2
2405599a:	d036      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
2405599c:	687b      	ldr	r3, [r7, #4]
2405599e:	681b      	ldr	r3, [r3, #0]
240559a0:	4a28      	ldr	r2, [pc, #160]	; (24055a44 <HAL_DMA_Abort+0x248>)
240559a2:	4293      	cmp	r3, r2
240559a4:	d031      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
240559a6:	687b      	ldr	r3, [r7, #4]
240559a8:	681b      	ldr	r3, [r3, #0]
240559aa:	4a27      	ldr	r2, [pc, #156]	; (24055a48 <HAL_DMA_Abort+0x24c>)
240559ac:	4293      	cmp	r3, r2
240559ae:	d02c      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
240559b0:	687b      	ldr	r3, [r7, #4]
240559b2:	681b      	ldr	r3, [r3, #0]
240559b4:	4a25      	ldr	r2, [pc, #148]	; (24055a4c <HAL_DMA_Abort+0x250>)
240559b6:	4293      	cmp	r3, r2
240559b8:	d027      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
240559ba:	687b      	ldr	r3, [r7, #4]
240559bc:	681b      	ldr	r3, [r3, #0]
240559be:	4a24      	ldr	r2, [pc, #144]	; (24055a50 <HAL_DMA_Abort+0x254>)
240559c0:	4293      	cmp	r3, r2
240559c2:	d022      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
240559c4:	687b      	ldr	r3, [r7, #4]
240559c6:	681b      	ldr	r3, [r3, #0]
240559c8:	4a22      	ldr	r2, [pc, #136]	; (24055a54 <HAL_DMA_Abort+0x258>)
240559ca:	4293      	cmp	r3, r2
240559cc:	d01d      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
240559ce:	687b      	ldr	r3, [r7, #4]
240559d0:	681b      	ldr	r3, [r3, #0]
240559d2:	4a21      	ldr	r2, [pc, #132]	; (24055a58 <HAL_DMA_Abort+0x25c>)
240559d4:	4293      	cmp	r3, r2
240559d6:	d018      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
240559d8:	687b      	ldr	r3, [r7, #4]
240559da:	681b      	ldr	r3, [r3, #0]
240559dc:	4a1f      	ldr	r2, [pc, #124]	; (24055a5c <HAL_DMA_Abort+0x260>)
240559de:	4293      	cmp	r3, r2
240559e0:	d013      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
240559e2:	687b      	ldr	r3, [r7, #4]
240559e4:	681b      	ldr	r3, [r3, #0]
240559e6:	4a1e      	ldr	r2, [pc, #120]	; (24055a60 <HAL_DMA_Abort+0x264>)
240559e8:	4293      	cmp	r3, r2
240559ea:	d00e      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
240559ec:	687b      	ldr	r3, [r7, #4]
240559ee:	681b      	ldr	r3, [r3, #0]
240559f0:	4a1c      	ldr	r2, [pc, #112]	; (24055a64 <HAL_DMA_Abort+0x268>)
240559f2:	4293      	cmp	r3, r2
240559f4:	d009      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
240559f6:	687b      	ldr	r3, [r7, #4]
240559f8:	681b      	ldr	r3, [r3, #0]
240559fa:	4a1b      	ldr	r2, [pc, #108]	; (24055a68 <HAL_DMA_Abort+0x26c>)
240559fc:	4293      	cmp	r3, r2
240559fe:	d004      	beq.n	24055a0a <HAL_DMA_Abort+0x20e>
24055a00:	687b      	ldr	r3, [r7, #4]
24055a02:	681b      	ldr	r3, [r3, #0]
24055a04:	4a19      	ldr	r2, [pc, #100]	; (24055a6c <HAL_DMA_Abort+0x270>)
24055a06:	4293      	cmp	r3, r2
24055a08:	d132      	bne.n	24055a70 <HAL_DMA_Abort+0x274>
24055a0a:	2301      	movs	r3, #1
24055a0c:	e031      	b.n	24055a72 <HAL_DMA_Abort+0x276>
24055a0e:	bf00      	nop
24055a10:	40020010 	.word	0x40020010
24055a14:	40020028 	.word	0x40020028
24055a18:	40020040 	.word	0x40020040
24055a1c:	40020058 	.word	0x40020058
24055a20:	40020070 	.word	0x40020070
24055a24:	40020088 	.word	0x40020088
24055a28:	400200a0 	.word	0x400200a0
24055a2c:	400200b8 	.word	0x400200b8
24055a30:	40020410 	.word	0x40020410
24055a34:	40020428 	.word	0x40020428
24055a38:	40020440 	.word	0x40020440
24055a3c:	40020458 	.word	0x40020458
24055a40:	40020470 	.word	0x40020470
24055a44:	40020488 	.word	0x40020488
24055a48:	400204a0 	.word	0x400204a0
24055a4c:	400204b8 	.word	0x400204b8
24055a50:	58025408 	.word	0x58025408
24055a54:	5802541c 	.word	0x5802541c
24055a58:	58025430 	.word	0x58025430
24055a5c:	58025444 	.word	0x58025444
24055a60:	58025458 	.word	0x58025458
24055a64:	5802546c 	.word	0x5802546c
24055a68:	58025480 	.word	0x58025480
24055a6c:	58025494 	.word	0x58025494
24055a70:	2300      	movs	r3, #0
24055a72:	2b00      	cmp	r3, #0
24055a74:	d007      	beq.n	24055a86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24055a76:	687b      	ldr	r3, [r7, #4]
24055a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24055a7a:	681a      	ldr	r2, [r3, #0]
24055a7c:	687b      	ldr	r3, [r7, #4]
24055a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24055a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24055a84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
24055a86:	687b      	ldr	r3, [r7, #4]
24055a88:	681b      	ldr	r3, [r3, #0]
24055a8a:	4a6d      	ldr	r2, [pc, #436]	; (24055c40 <HAL_DMA_Abort+0x444>)
24055a8c:	4293      	cmp	r3, r2
24055a8e:	d04a      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055a90:	687b      	ldr	r3, [r7, #4]
24055a92:	681b      	ldr	r3, [r3, #0]
24055a94:	4a6b      	ldr	r2, [pc, #428]	; (24055c44 <HAL_DMA_Abort+0x448>)
24055a96:	4293      	cmp	r3, r2
24055a98:	d045      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055a9a:	687b      	ldr	r3, [r7, #4]
24055a9c:	681b      	ldr	r3, [r3, #0]
24055a9e:	4a6a      	ldr	r2, [pc, #424]	; (24055c48 <HAL_DMA_Abort+0x44c>)
24055aa0:	4293      	cmp	r3, r2
24055aa2:	d040      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055aa4:	687b      	ldr	r3, [r7, #4]
24055aa6:	681b      	ldr	r3, [r3, #0]
24055aa8:	4a68      	ldr	r2, [pc, #416]	; (24055c4c <HAL_DMA_Abort+0x450>)
24055aaa:	4293      	cmp	r3, r2
24055aac:	d03b      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055aae:	687b      	ldr	r3, [r7, #4]
24055ab0:	681b      	ldr	r3, [r3, #0]
24055ab2:	4a67      	ldr	r2, [pc, #412]	; (24055c50 <HAL_DMA_Abort+0x454>)
24055ab4:	4293      	cmp	r3, r2
24055ab6:	d036      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055ab8:	687b      	ldr	r3, [r7, #4]
24055aba:	681b      	ldr	r3, [r3, #0]
24055abc:	4a65      	ldr	r2, [pc, #404]	; (24055c54 <HAL_DMA_Abort+0x458>)
24055abe:	4293      	cmp	r3, r2
24055ac0:	d031      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055ac2:	687b      	ldr	r3, [r7, #4]
24055ac4:	681b      	ldr	r3, [r3, #0]
24055ac6:	4a64      	ldr	r2, [pc, #400]	; (24055c58 <HAL_DMA_Abort+0x45c>)
24055ac8:	4293      	cmp	r3, r2
24055aca:	d02c      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055acc:	687b      	ldr	r3, [r7, #4]
24055ace:	681b      	ldr	r3, [r3, #0]
24055ad0:	4a62      	ldr	r2, [pc, #392]	; (24055c5c <HAL_DMA_Abort+0x460>)
24055ad2:	4293      	cmp	r3, r2
24055ad4:	d027      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055ad6:	687b      	ldr	r3, [r7, #4]
24055ad8:	681b      	ldr	r3, [r3, #0]
24055ada:	4a61      	ldr	r2, [pc, #388]	; (24055c60 <HAL_DMA_Abort+0x464>)
24055adc:	4293      	cmp	r3, r2
24055ade:	d022      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055ae0:	687b      	ldr	r3, [r7, #4]
24055ae2:	681b      	ldr	r3, [r3, #0]
24055ae4:	4a5f      	ldr	r2, [pc, #380]	; (24055c64 <HAL_DMA_Abort+0x468>)
24055ae6:	4293      	cmp	r3, r2
24055ae8:	d01d      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055aea:	687b      	ldr	r3, [r7, #4]
24055aec:	681b      	ldr	r3, [r3, #0]
24055aee:	4a5e      	ldr	r2, [pc, #376]	; (24055c68 <HAL_DMA_Abort+0x46c>)
24055af0:	4293      	cmp	r3, r2
24055af2:	d018      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055af4:	687b      	ldr	r3, [r7, #4]
24055af6:	681b      	ldr	r3, [r3, #0]
24055af8:	4a5c      	ldr	r2, [pc, #368]	; (24055c6c <HAL_DMA_Abort+0x470>)
24055afa:	4293      	cmp	r3, r2
24055afc:	d013      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055afe:	687b      	ldr	r3, [r7, #4]
24055b00:	681b      	ldr	r3, [r3, #0]
24055b02:	4a5b      	ldr	r2, [pc, #364]	; (24055c70 <HAL_DMA_Abort+0x474>)
24055b04:	4293      	cmp	r3, r2
24055b06:	d00e      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055b08:	687b      	ldr	r3, [r7, #4]
24055b0a:	681b      	ldr	r3, [r3, #0]
24055b0c:	4a59      	ldr	r2, [pc, #356]	; (24055c74 <HAL_DMA_Abort+0x478>)
24055b0e:	4293      	cmp	r3, r2
24055b10:	d009      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055b12:	687b      	ldr	r3, [r7, #4]
24055b14:	681b      	ldr	r3, [r3, #0]
24055b16:	4a58      	ldr	r2, [pc, #352]	; (24055c78 <HAL_DMA_Abort+0x47c>)
24055b18:	4293      	cmp	r3, r2
24055b1a:	d004      	beq.n	24055b26 <HAL_DMA_Abort+0x32a>
24055b1c:	687b      	ldr	r3, [r7, #4]
24055b1e:	681b      	ldr	r3, [r3, #0]
24055b20:	4a56      	ldr	r2, [pc, #344]	; (24055c7c <HAL_DMA_Abort+0x480>)
24055b22:	4293      	cmp	r3, r2
24055b24:	d108      	bne.n	24055b38 <HAL_DMA_Abort+0x33c>
24055b26:	687b      	ldr	r3, [r7, #4]
24055b28:	681b      	ldr	r3, [r3, #0]
24055b2a:	681a      	ldr	r2, [r3, #0]
24055b2c:	687b      	ldr	r3, [r7, #4]
24055b2e:	681b      	ldr	r3, [r3, #0]
24055b30:	f022 0201 	bic.w	r2, r2, #1
24055b34:	601a      	str	r2, [r3, #0]
24055b36:	e007      	b.n	24055b48 <HAL_DMA_Abort+0x34c>
24055b38:	687b      	ldr	r3, [r7, #4]
24055b3a:	681b      	ldr	r3, [r3, #0]
24055b3c:	681a      	ldr	r2, [r3, #0]
24055b3e:	687b      	ldr	r3, [r7, #4]
24055b40:	681b      	ldr	r3, [r3, #0]
24055b42:	f022 0201 	bic.w	r2, r2, #1
24055b46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24055b48:	e013      	b.n	24055b72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24055b4a:	f7fd f8e3 	bl	24052d14 <HAL_GetTick>
24055b4e:	4602      	mov	r2, r0
24055b50:	693b      	ldr	r3, [r7, #16]
24055b52:	1ad3      	subs	r3, r2, r3
24055b54:	2b05      	cmp	r3, #5
24055b56:	d90c      	bls.n	24055b72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24055b58:	687b      	ldr	r3, [r7, #4]
24055b5a:	2220      	movs	r2, #32
24055b5c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24055b5e:	687b      	ldr	r3, [r7, #4]
24055b60:	2203      	movs	r2, #3
24055b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24055b66:	687b      	ldr	r3, [r7, #4]
24055b68:	2200      	movs	r2, #0
24055b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
24055b6e:	2301      	movs	r3, #1
24055b70:	e12d      	b.n	24055dce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24055b72:	697b      	ldr	r3, [r7, #20]
24055b74:	681b      	ldr	r3, [r3, #0]
24055b76:	f003 0301 	and.w	r3, r3, #1
24055b7a:	2b00      	cmp	r3, #0
24055b7c:	d1e5      	bne.n	24055b4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24055b7e:	687b      	ldr	r3, [r7, #4]
24055b80:	681b      	ldr	r3, [r3, #0]
24055b82:	4a2f      	ldr	r2, [pc, #188]	; (24055c40 <HAL_DMA_Abort+0x444>)
24055b84:	4293      	cmp	r3, r2
24055b86:	d04a      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055b88:	687b      	ldr	r3, [r7, #4]
24055b8a:	681b      	ldr	r3, [r3, #0]
24055b8c:	4a2d      	ldr	r2, [pc, #180]	; (24055c44 <HAL_DMA_Abort+0x448>)
24055b8e:	4293      	cmp	r3, r2
24055b90:	d045      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055b92:	687b      	ldr	r3, [r7, #4]
24055b94:	681b      	ldr	r3, [r3, #0]
24055b96:	4a2c      	ldr	r2, [pc, #176]	; (24055c48 <HAL_DMA_Abort+0x44c>)
24055b98:	4293      	cmp	r3, r2
24055b9a:	d040      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055b9c:	687b      	ldr	r3, [r7, #4]
24055b9e:	681b      	ldr	r3, [r3, #0]
24055ba0:	4a2a      	ldr	r2, [pc, #168]	; (24055c4c <HAL_DMA_Abort+0x450>)
24055ba2:	4293      	cmp	r3, r2
24055ba4:	d03b      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055ba6:	687b      	ldr	r3, [r7, #4]
24055ba8:	681b      	ldr	r3, [r3, #0]
24055baa:	4a29      	ldr	r2, [pc, #164]	; (24055c50 <HAL_DMA_Abort+0x454>)
24055bac:	4293      	cmp	r3, r2
24055bae:	d036      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055bb0:	687b      	ldr	r3, [r7, #4]
24055bb2:	681b      	ldr	r3, [r3, #0]
24055bb4:	4a27      	ldr	r2, [pc, #156]	; (24055c54 <HAL_DMA_Abort+0x458>)
24055bb6:	4293      	cmp	r3, r2
24055bb8:	d031      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055bba:	687b      	ldr	r3, [r7, #4]
24055bbc:	681b      	ldr	r3, [r3, #0]
24055bbe:	4a26      	ldr	r2, [pc, #152]	; (24055c58 <HAL_DMA_Abort+0x45c>)
24055bc0:	4293      	cmp	r3, r2
24055bc2:	d02c      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055bc4:	687b      	ldr	r3, [r7, #4]
24055bc6:	681b      	ldr	r3, [r3, #0]
24055bc8:	4a24      	ldr	r2, [pc, #144]	; (24055c5c <HAL_DMA_Abort+0x460>)
24055bca:	4293      	cmp	r3, r2
24055bcc:	d027      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055bce:	687b      	ldr	r3, [r7, #4]
24055bd0:	681b      	ldr	r3, [r3, #0]
24055bd2:	4a23      	ldr	r2, [pc, #140]	; (24055c60 <HAL_DMA_Abort+0x464>)
24055bd4:	4293      	cmp	r3, r2
24055bd6:	d022      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055bd8:	687b      	ldr	r3, [r7, #4]
24055bda:	681b      	ldr	r3, [r3, #0]
24055bdc:	4a21      	ldr	r2, [pc, #132]	; (24055c64 <HAL_DMA_Abort+0x468>)
24055bde:	4293      	cmp	r3, r2
24055be0:	d01d      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055be2:	687b      	ldr	r3, [r7, #4]
24055be4:	681b      	ldr	r3, [r3, #0]
24055be6:	4a20      	ldr	r2, [pc, #128]	; (24055c68 <HAL_DMA_Abort+0x46c>)
24055be8:	4293      	cmp	r3, r2
24055bea:	d018      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055bec:	687b      	ldr	r3, [r7, #4]
24055bee:	681b      	ldr	r3, [r3, #0]
24055bf0:	4a1e      	ldr	r2, [pc, #120]	; (24055c6c <HAL_DMA_Abort+0x470>)
24055bf2:	4293      	cmp	r3, r2
24055bf4:	d013      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055bf6:	687b      	ldr	r3, [r7, #4]
24055bf8:	681b      	ldr	r3, [r3, #0]
24055bfa:	4a1d      	ldr	r2, [pc, #116]	; (24055c70 <HAL_DMA_Abort+0x474>)
24055bfc:	4293      	cmp	r3, r2
24055bfe:	d00e      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055c00:	687b      	ldr	r3, [r7, #4]
24055c02:	681b      	ldr	r3, [r3, #0]
24055c04:	4a1b      	ldr	r2, [pc, #108]	; (24055c74 <HAL_DMA_Abort+0x478>)
24055c06:	4293      	cmp	r3, r2
24055c08:	d009      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055c0a:	687b      	ldr	r3, [r7, #4]
24055c0c:	681b      	ldr	r3, [r3, #0]
24055c0e:	4a1a      	ldr	r2, [pc, #104]	; (24055c78 <HAL_DMA_Abort+0x47c>)
24055c10:	4293      	cmp	r3, r2
24055c12:	d004      	beq.n	24055c1e <HAL_DMA_Abort+0x422>
24055c14:	687b      	ldr	r3, [r7, #4]
24055c16:	681b      	ldr	r3, [r3, #0]
24055c18:	4a18      	ldr	r2, [pc, #96]	; (24055c7c <HAL_DMA_Abort+0x480>)
24055c1a:	4293      	cmp	r3, r2
24055c1c:	d101      	bne.n	24055c22 <HAL_DMA_Abort+0x426>
24055c1e:	2301      	movs	r3, #1
24055c20:	e000      	b.n	24055c24 <HAL_DMA_Abort+0x428>
24055c22:	2300      	movs	r3, #0
24055c24:	2b00      	cmp	r3, #0
24055c26:	d02b      	beq.n	24055c80 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24055c28:	687b      	ldr	r3, [r7, #4]
24055c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24055c2c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24055c2e:	687b      	ldr	r3, [r7, #4]
24055c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24055c32:	f003 031f 	and.w	r3, r3, #31
24055c36:	223f      	movs	r2, #63	; 0x3f
24055c38:	409a      	lsls	r2, r3
24055c3a:	68bb      	ldr	r3, [r7, #8]
24055c3c:	609a      	str	r2, [r3, #8]
24055c3e:	e02a      	b.n	24055c96 <HAL_DMA_Abort+0x49a>
24055c40:	40020010 	.word	0x40020010
24055c44:	40020028 	.word	0x40020028
24055c48:	40020040 	.word	0x40020040
24055c4c:	40020058 	.word	0x40020058
24055c50:	40020070 	.word	0x40020070
24055c54:	40020088 	.word	0x40020088
24055c58:	400200a0 	.word	0x400200a0
24055c5c:	400200b8 	.word	0x400200b8
24055c60:	40020410 	.word	0x40020410
24055c64:	40020428 	.word	0x40020428
24055c68:	40020440 	.word	0x40020440
24055c6c:	40020458 	.word	0x40020458
24055c70:	40020470 	.word	0x40020470
24055c74:	40020488 	.word	0x40020488
24055c78:	400204a0 	.word	0x400204a0
24055c7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24055c80:	687b      	ldr	r3, [r7, #4]
24055c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24055c84:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24055c86:	687b      	ldr	r3, [r7, #4]
24055c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24055c8a:	f003 031f 	and.w	r3, r3, #31
24055c8e:	2201      	movs	r2, #1
24055c90:	409a      	lsls	r2, r3
24055c92:	68fb      	ldr	r3, [r7, #12]
24055c94:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24055c96:	687b      	ldr	r3, [r7, #4]
24055c98:	681b      	ldr	r3, [r3, #0]
24055c9a:	4a4f      	ldr	r2, [pc, #316]	; (24055dd8 <HAL_DMA_Abort+0x5dc>)
24055c9c:	4293      	cmp	r3, r2
24055c9e:	d072      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055ca0:	687b      	ldr	r3, [r7, #4]
24055ca2:	681b      	ldr	r3, [r3, #0]
24055ca4:	4a4d      	ldr	r2, [pc, #308]	; (24055ddc <HAL_DMA_Abort+0x5e0>)
24055ca6:	4293      	cmp	r3, r2
24055ca8:	d06d      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055caa:	687b      	ldr	r3, [r7, #4]
24055cac:	681b      	ldr	r3, [r3, #0]
24055cae:	4a4c      	ldr	r2, [pc, #304]	; (24055de0 <HAL_DMA_Abort+0x5e4>)
24055cb0:	4293      	cmp	r3, r2
24055cb2:	d068      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055cb4:	687b      	ldr	r3, [r7, #4]
24055cb6:	681b      	ldr	r3, [r3, #0]
24055cb8:	4a4a      	ldr	r2, [pc, #296]	; (24055de4 <HAL_DMA_Abort+0x5e8>)
24055cba:	4293      	cmp	r3, r2
24055cbc:	d063      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055cbe:	687b      	ldr	r3, [r7, #4]
24055cc0:	681b      	ldr	r3, [r3, #0]
24055cc2:	4a49      	ldr	r2, [pc, #292]	; (24055de8 <HAL_DMA_Abort+0x5ec>)
24055cc4:	4293      	cmp	r3, r2
24055cc6:	d05e      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055cc8:	687b      	ldr	r3, [r7, #4]
24055cca:	681b      	ldr	r3, [r3, #0]
24055ccc:	4a47      	ldr	r2, [pc, #284]	; (24055dec <HAL_DMA_Abort+0x5f0>)
24055cce:	4293      	cmp	r3, r2
24055cd0:	d059      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055cd2:	687b      	ldr	r3, [r7, #4]
24055cd4:	681b      	ldr	r3, [r3, #0]
24055cd6:	4a46      	ldr	r2, [pc, #280]	; (24055df0 <HAL_DMA_Abort+0x5f4>)
24055cd8:	4293      	cmp	r3, r2
24055cda:	d054      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055cdc:	687b      	ldr	r3, [r7, #4]
24055cde:	681b      	ldr	r3, [r3, #0]
24055ce0:	4a44      	ldr	r2, [pc, #272]	; (24055df4 <HAL_DMA_Abort+0x5f8>)
24055ce2:	4293      	cmp	r3, r2
24055ce4:	d04f      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055ce6:	687b      	ldr	r3, [r7, #4]
24055ce8:	681b      	ldr	r3, [r3, #0]
24055cea:	4a43      	ldr	r2, [pc, #268]	; (24055df8 <HAL_DMA_Abort+0x5fc>)
24055cec:	4293      	cmp	r3, r2
24055cee:	d04a      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055cf0:	687b      	ldr	r3, [r7, #4]
24055cf2:	681b      	ldr	r3, [r3, #0]
24055cf4:	4a41      	ldr	r2, [pc, #260]	; (24055dfc <HAL_DMA_Abort+0x600>)
24055cf6:	4293      	cmp	r3, r2
24055cf8:	d045      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055cfa:	687b      	ldr	r3, [r7, #4]
24055cfc:	681b      	ldr	r3, [r3, #0]
24055cfe:	4a40      	ldr	r2, [pc, #256]	; (24055e00 <HAL_DMA_Abort+0x604>)
24055d00:	4293      	cmp	r3, r2
24055d02:	d040      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d04:	687b      	ldr	r3, [r7, #4]
24055d06:	681b      	ldr	r3, [r3, #0]
24055d08:	4a3e      	ldr	r2, [pc, #248]	; (24055e04 <HAL_DMA_Abort+0x608>)
24055d0a:	4293      	cmp	r3, r2
24055d0c:	d03b      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d0e:	687b      	ldr	r3, [r7, #4]
24055d10:	681b      	ldr	r3, [r3, #0]
24055d12:	4a3d      	ldr	r2, [pc, #244]	; (24055e08 <HAL_DMA_Abort+0x60c>)
24055d14:	4293      	cmp	r3, r2
24055d16:	d036      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d18:	687b      	ldr	r3, [r7, #4]
24055d1a:	681b      	ldr	r3, [r3, #0]
24055d1c:	4a3b      	ldr	r2, [pc, #236]	; (24055e0c <HAL_DMA_Abort+0x610>)
24055d1e:	4293      	cmp	r3, r2
24055d20:	d031      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d22:	687b      	ldr	r3, [r7, #4]
24055d24:	681b      	ldr	r3, [r3, #0]
24055d26:	4a3a      	ldr	r2, [pc, #232]	; (24055e10 <HAL_DMA_Abort+0x614>)
24055d28:	4293      	cmp	r3, r2
24055d2a:	d02c      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d2c:	687b      	ldr	r3, [r7, #4]
24055d2e:	681b      	ldr	r3, [r3, #0]
24055d30:	4a38      	ldr	r2, [pc, #224]	; (24055e14 <HAL_DMA_Abort+0x618>)
24055d32:	4293      	cmp	r3, r2
24055d34:	d027      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d36:	687b      	ldr	r3, [r7, #4]
24055d38:	681b      	ldr	r3, [r3, #0]
24055d3a:	4a37      	ldr	r2, [pc, #220]	; (24055e18 <HAL_DMA_Abort+0x61c>)
24055d3c:	4293      	cmp	r3, r2
24055d3e:	d022      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d40:	687b      	ldr	r3, [r7, #4]
24055d42:	681b      	ldr	r3, [r3, #0]
24055d44:	4a35      	ldr	r2, [pc, #212]	; (24055e1c <HAL_DMA_Abort+0x620>)
24055d46:	4293      	cmp	r3, r2
24055d48:	d01d      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d4a:	687b      	ldr	r3, [r7, #4]
24055d4c:	681b      	ldr	r3, [r3, #0]
24055d4e:	4a34      	ldr	r2, [pc, #208]	; (24055e20 <HAL_DMA_Abort+0x624>)
24055d50:	4293      	cmp	r3, r2
24055d52:	d018      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d54:	687b      	ldr	r3, [r7, #4]
24055d56:	681b      	ldr	r3, [r3, #0]
24055d58:	4a32      	ldr	r2, [pc, #200]	; (24055e24 <HAL_DMA_Abort+0x628>)
24055d5a:	4293      	cmp	r3, r2
24055d5c:	d013      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d5e:	687b      	ldr	r3, [r7, #4]
24055d60:	681b      	ldr	r3, [r3, #0]
24055d62:	4a31      	ldr	r2, [pc, #196]	; (24055e28 <HAL_DMA_Abort+0x62c>)
24055d64:	4293      	cmp	r3, r2
24055d66:	d00e      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d68:	687b      	ldr	r3, [r7, #4]
24055d6a:	681b      	ldr	r3, [r3, #0]
24055d6c:	4a2f      	ldr	r2, [pc, #188]	; (24055e2c <HAL_DMA_Abort+0x630>)
24055d6e:	4293      	cmp	r3, r2
24055d70:	d009      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d72:	687b      	ldr	r3, [r7, #4]
24055d74:	681b      	ldr	r3, [r3, #0]
24055d76:	4a2e      	ldr	r2, [pc, #184]	; (24055e30 <HAL_DMA_Abort+0x634>)
24055d78:	4293      	cmp	r3, r2
24055d7a:	d004      	beq.n	24055d86 <HAL_DMA_Abort+0x58a>
24055d7c:	687b      	ldr	r3, [r7, #4]
24055d7e:	681b      	ldr	r3, [r3, #0]
24055d80:	4a2c      	ldr	r2, [pc, #176]	; (24055e34 <HAL_DMA_Abort+0x638>)
24055d82:	4293      	cmp	r3, r2
24055d84:	d101      	bne.n	24055d8a <HAL_DMA_Abort+0x58e>
24055d86:	2301      	movs	r3, #1
24055d88:	e000      	b.n	24055d8c <HAL_DMA_Abort+0x590>
24055d8a:	2300      	movs	r3, #0
24055d8c:	2b00      	cmp	r3, #0
24055d8e:	d015      	beq.n	24055dbc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24055d90:	687b      	ldr	r3, [r7, #4]
24055d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24055d94:	687a      	ldr	r2, [r7, #4]
24055d96:	6e92      	ldr	r2, [r2, #104]	; 0x68
24055d98:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
24055d9a:	687b      	ldr	r3, [r7, #4]
24055d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24055d9e:	2b00      	cmp	r3, #0
24055da0:	d00c      	beq.n	24055dbc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24055da2:	687b      	ldr	r3, [r7, #4]
24055da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24055da6:	681a      	ldr	r2, [r3, #0]
24055da8:	687b      	ldr	r3, [r7, #4]
24055daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24055dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24055db0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24055db2:	687b      	ldr	r3, [r7, #4]
24055db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24055db6:	687a      	ldr	r2, [r7, #4]
24055db8:	6f52      	ldr	r2, [r2, #116]	; 0x74
24055dba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
24055dbc:	687b      	ldr	r3, [r7, #4]
24055dbe:	2201      	movs	r2, #1
24055dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24055dc4:	687b      	ldr	r3, [r7, #4]
24055dc6:	2200      	movs	r2, #0
24055dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
24055dcc:	2300      	movs	r3, #0
}
24055dce:	4618      	mov	r0, r3
24055dd0:	3718      	adds	r7, #24
24055dd2:	46bd      	mov	sp, r7
24055dd4:	bd80      	pop	{r7, pc}
24055dd6:	bf00      	nop
24055dd8:	40020010 	.word	0x40020010
24055ddc:	40020028 	.word	0x40020028
24055de0:	40020040 	.word	0x40020040
24055de4:	40020058 	.word	0x40020058
24055de8:	40020070 	.word	0x40020070
24055dec:	40020088 	.word	0x40020088
24055df0:	400200a0 	.word	0x400200a0
24055df4:	400200b8 	.word	0x400200b8
24055df8:	40020410 	.word	0x40020410
24055dfc:	40020428 	.word	0x40020428
24055e00:	40020440 	.word	0x40020440
24055e04:	40020458 	.word	0x40020458
24055e08:	40020470 	.word	0x40020470
24055e0c:	40020488 	.word	0x40020488
24055e10:	400204a0 	.word	0x400204a0
24055e14:	400204b8 	.word	0x400204b8
24055e18:	58025408 	.word	0x58025408
24055e1c:	5802541c 	.word	0x5802541c
24055e20:	58025430 	.word	0x58025430
24055e24:	58025444 	.word	0x58025444
24055e28:	58025458 	.word	0x58025458
24055e2c:	5802546c 	.word	0x5802546c
24055e30:	58025480 	.word	0x58025480
24055e34:	58025494 	.word	0x58025494

24055e38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
24055e38:	b580      	push	{r7, lr}
24055e3a:	b084      	sub	sp, #16
24055e3c:	af00      	add	r7, sp, #0
24055e3e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24055e40:	687b      	ldr	r3, [r7, #4]
24055e42:	2b00      	cmp	r3, #0
24055e44:	d101      	bne.n	24055e4a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
24055e46:	2301      	movs	r3, #1
24055e48:	e237      	b.n	240562ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
24055e4a:	687b      	ldr	r3, [r7, #4]
24055e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24055e50:	b2db      	uxtb	r3, r3
24055e52:	2b02      	cmp	r3, #2
24055e54:	d004      	beq.n	24055e60 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24055e56:	687b      	ldr	r3, [r7, #4]
24055e58:	2280      	movs	r2, #128	; 0x80
24055e5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
24055e5c:	2301      	movs	r3, #1
24055e5e:	e22c      	b.n	240562ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24055e60:	687b      	ldr	r3, [r7, #4]
24055e62:	681b      	ldr	r3, [r3, #0]
24055e64:	4a5c      	ldr	r2, [pc, #368]	; (24055fd8 <HAL_DMA_Abort_IT+0x1a0>)
24055e66:	4293      	cmp	r3, r2
24055e68:	d04a      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055e6a:	687b      	ldr	r3, [r7, #4]
24055e6c:	681b      	ldr	r3, [r3, #0]
24055e6e:	4a5b      	ldr	r2, [pc, #364]	; (24055fdc <HAL_DMA_Abort_IT+0x1a4>)
24055e70:	4293      	cmp	r3, r2
24055e72:	d045      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055e74:	687b      	ldr	r3, [r7, #4]
24055e76:	681b      	ldr	r3, [r3, #0]
24055e78:	4a59      	ldr	r2, [pc, #356]	; (24055fe0 <HAL_DMA_Abort_IT+0x1a8>)
24055e7a:	4293      	cmp	r3, r2
24055e7c:	d040      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055e7e:	687b      	ldr	r3, [r7, #4]
24055e80:	681b      	ldr	r3, [r3, #0]
24055e82:	4a58      	ldr	r2, [pc, #352]	; (24055fe4 <HAL_DMA_Abort_IT+0x1ac>)
24055e84:	4293      	cmp	r3, r2
24055e86:	d03b      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055e88:	687b      	ldr	r3, [r7, #4]
24055e8a:	681b      	ldr	r3, [r3, #0]
24055e8c:	4a56      	ldr	r2, [pc, #344]	; (24055fe8 <HAL_DMA_Abort_IT+0x1b0>)
24055e8e:	4293      	cmp	r3, r2
24055e90:	d036      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055e92:	687b      	ldr	r3, [r7, #4]
24055e94:	681b      	ldr	r3, [r3, #0]
24055e96:	4a55      	ldr	r2, [pc, #340]	; (24055fec <HAL_DMA_Abort_IT+0x1b4>)
24055e98:	4293      	cmp	r3, r2
24055e9a:	d031      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055e9c:	687b      	ldr	r3, [r7, #4]
24055e9e:	681b      	ldr	r3, [r3, #0]
24055ea0:	4a53      	ldr	r2, [pc, #332]	; (24055ff0 <HAL_DMA_Abort_IT+0x1b8>)
24055ea2:	4293      	cmp	r3, r2
24055ea4:	d02c      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055ea6:	687b      	ldr	r3, [r7, #4]
24055ea8:	681b      	ldr	r3, [r3, #0]
24055eaa:	4a52      	ldr	r2, [pc, #328]	; (24055ff4 <HAL_DMA_Abort_IT+0x1bc>)
24055eac:	4293      	cmp	r3, r2
24055eae:	d027      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055eb0:	687b      	ldr	r3, [r7, #4]
24055eb2:	681b      	ldr	r3, [r3, #0]
24055eb4:	4a50      	ldr	r2, [pc, #320]	; (24055ff8 <HAL_DMA_Abort_IT+0x1c0>)
24055eb6:	4293      	cmp	r3, r2
24055eb8:	d022      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055eba:	687b      	ldr	r3, [r7, #4]
24055ebc:	681b      	ldr	r3, [r3, #0]
24055ebe:	4a4f      	ldr	r2, [pc, #316]	; (24055ffc <HAL_DMA_Abort_IT+0x1c4>)
24055ec0:	4293      	cmp	r3, r2
24055ec2:	d01d      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055ec4:	687b      	ldr	r3, [r7, #4]
24055ec6:	681b      	ldr	r3, [r3, #0]
24055ec8:	4a4d      	ldr	r2, [pc, #308]	; (24056000 <HAL_DMA_Abort_IT+0x1c8>)
24055eca:	4293      	cmp	r3, r2
24055ecc:	d018      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055ece:	687b      	ldr	r3, [r7, #4]
24055ed0:	681b      	ldr	r3, [r3, #0]
24055ed2:	4a4c      	ldr	r2, [pc, #304]	; (24056004 <HAL_DMA_Abort_IT+0x1cc>)
24055ed4:	4293      	cmp	r3, r2
24055ed6:	d013      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055ed8:	687b      	ldr	r3, [r7, #4]
24055eda:	681b      	ldr	r3, [r3, #0]
24055edc:	4a4a      	ldr	r2, [pc, #296]	; (24056008 <HAL_DMA_Abort_IT+0x1d0>)
24055ede:	4293      	cmp	r3, r2
24055ee0:	d00e      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055ee2:	687b      	ldr	r3, [r7, #4]
24055ee4:	681b      	ldr	r3, [r3, #0]
24055ee6:	4a49      	ldr	r2, [pc, #292]	; (2405600c <HAL_DMA_Abort_IT+0x1d4>)
24055ee8:	4293      	cmp	r3, r2
24055eea:	d009      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055eec:	687b      	ldr	r3, [r7, #4]
24055eee:	681b      	ldr	r3, [r3, #0]
24055ef0:	4a47      	ldr	r2, [pc, #284]	; (24056010 <HAL_DMA_Abort_IT+0x1d8>)
24055ef2:	4293      	cmp	r3, r2
24055ef4:	d004      	beq.n	24055f00 <HAL_DMA_Abort_IT+0xc8>
24055ef6:	687b      	ldr	r3, [r7, #4]
24055ef8:	681b      	ldr	r3, [r3, #0]
24055efa:	4a46      	ldr	r2, [pc, #280]	; (24056014 <HAL_DMA_Abort_IT+0x1dc>)
24055efc:	4293      	cmp	r3, r2
24055efe:	d101      	bne.n	24055f04 <HAL_DMA_Abort_IT+0xcc>
24055f00:	2301      	movs	r3, #1
24055f02:	e000      	b.n	24055f06 <HAL_DMA_Abort_IT+0xce>
24055f04:	2300      	movs	r3, #0
24055f06:	2b00      	cmp	r3, #0
24055f08:	f000 8086 	beq.w	24056018 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
24055f0c:	687b      	ldr	r3, [r7, #4]
24055f0e:	2204      	movs	r2, #4
24055f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
24055f14:	687b      	ldr	r3, [r7, #4]
24055f16:	681b      	ldr	r3, [r3, #0]
24055f18:	4a2f      	ldr	r2, [pc, #188]	; (24055fd8 <HAL_DMA_Abort_IT+0x1a0>)
24055f1a:	4293      	cmp	r3, r2
24055f1c:	d04a      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f1e:	687b      	ldr	r3, [r7, #4]
24055f20:	681b      	ldr	r3, [r3, #0]
24055f22:	4a2e      	ldr	r2, [pc, #184]	; (24055fdc <HAL_DMA_Abort_IT+0x1a4>)
24055f24:	4293      	cmp	r3, r2
24055f26:	d045      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f28:	687b      	ldr	r3, [r7, #4]
24055f2a:	681b      	ldr	r3, [r3, #0]
24055f2c:	4a2c      	ldr	r2, [pc, #176]	; (24055fe0 <HAL_DMA_Abort_IT+0x1a8>)
24055f2e:	4293      	cmp	r3, r2
24055f30:	d040      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f32:	687b      	ldr	r3, [r7, #4]
24055f34:	681b      	ldr	r3, [r3, #0]
24055f36:	4a2b      	ldr	r2, [pc, #172]	; (24055fe4 <HAL_DMA_Abort_IT+0x1ac>)
24055f38:	4293      	cmp	r3, r2
24055f3a:	d03b      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f3c:	687b      	ldr	r3, [r7, #4]
24055f3e:	681b      	ldr	r3, [r3, #0]
24055f40:	4a29      	ldr	r2, [pc, #164]	; (24055fe8 <HAL_DMA_Abort_IT+0x1b0>)
24055f42:	4293      	cmp	r3, r2
24055f44:	d036      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f46:	687b      	ldr	r3, [r7, #4]
24055f48:	681b      	ldr	r3, [r3, #0]
24055f4a:	4a28      	ldr	r2, [pc, #160]	; (24055fec <HAL_DMA_Abort_IT+0x1b4>)
24055f4c:	4293      	cmp	r3, r2
24055f4e:	d031      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f50:	687b      	ldr	r3, [r7, #4]
24055f52:	681b      	ldr	r3, [r3, #0]
24055f54:	4a26      	ldr	r2, [pc, #152]	; (24055ff0 <HAL_DMA_Abort_IT+0x1b8>)
24055f56:	4293      	cmp	r3, r2
24055f58:	d02c      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f5a:	687b      	ldr	r3, [r7, #4]
24055f5c:	681b      	ldr	r3, [r3, #0]
24055f5e:	4a25      	ldr	r2, [pc, #148]	; (24055ff4 <HAL_DMA_Abort_IT+0x1bc>)
24055f60:	4293      	cmp	r3, r2
24055f62:	d027      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f64:	687b      	ldr	r3, [r7, #4]
24055f66:	681b      	ldr	r3, [r3, #0]
24055f68:	4a23      	ldr	r2, [pc, #140]	; (24055ff8 <HAL_DMA_Abort_IT+0x1c0>)
24055f6a:	4293      	cmp	r3, r2
24055f6c:	d022      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f6e:	687b      	ldr	r3, [r7, #4]
24055f70:	681b      	ldr	r3, [r3, #0]
24055f72:	4a22      	ldr	r2, [pc, #136]	; (24055ffc <HAL_DMA_Abort_IT+0x1c4>)
24055f74:	4293      	cmp	r3, r2
24055f76:	d01d      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f78:	687b      	ldr	r3, [r7, #4]
24055f7a:	681b      	ldr	r3, [r3, #0]
24055f7c:	4a20      	ldr	r2, [pc, #128]	; (24056000 <HAL_DMA_Abort_IT+0x1c8>)
24055f7e:	4293      	cmp	r3, r2
24055f80:	d018      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f82:	687b      	ldr	r3, [r7, #4]
24055f84:	681b      	ldr	r3, [r3, #0]
24055f86:	4a1f      	ldr	r2, [pc, #124]	; (24056004 <HAL_DMA_Abort_IT+0x1cc>)
24055f88:	4293      	cmp	r3, r2
24055f8a:	d013      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f8c:	687b      	ldr	r3, [r7, #4]
24055f8e:	681b      	ldr	r3, [r3, #0]
24055f90:	4a1d      	ldr	r2, [pc, #116]	; (24056008 <HAL_DMA_Abort_IT+0x1d0>)
24055f92:	4293      	cmp	r3, r2
24055f94:	d00e      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055f96:	687b      	ldr	r3, [r7, #4]
24055f98:	681b      	ldr	r3, [r3, #0]
24055f9a:	4a1c      	ldr	r2, [pc, #112]	; (2405600c <HAL_DMA_Abort_IT+0x1d4>)
24055f9c:	4293      	cmp	r3, r2
24055f9e:	d009      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055fa0:	687b      	ldr	r3, [r7, #4]
24055fa2:	681b      	ldr	r3, [r3, #0]
24055fa4:	4a1a      	ldr	r2, [pc, #104]	; (24056010 <HAL_DMA_Abort_IT+0x1d8>)
24055fa6:	4293      	cmp	r3, r2
24055fa8:	d004      	beq.n	24055fb4 <HAL_DMA_Abort_IT+0x17c>
24055faa:	687b      	ldr	r3, [r7, #4]
24055fac:	681b      	ldr	r3, [r3, #0]
24055fae:	4a19      	ldr	r2, [pc, #100]	; (24056014 <HAL_DMA_Abort_IT+0x1dc>)
24055fb0:	4293      	cmp	r3, r2
24055fb2:	d108      	bne.n	24055fc6 <HAL_DMA_Abort_IT+0x18e>
24055fb4:	687b      	ldr	r3, [r7, #4]
24055fb6:	681b      	ldr	r3, [r3, #0]
24055fb8:	681a      	ldr	r2, [r3, #0]
24055fba:	687b      	ldr	r3, [r7, #4]
24055fbc:	681b      	ldr	r3, [r3, #0]
24055fbe:	f022 0201 	bic.w	r2, r2, #1
24055fc2:	601a      	str	r2, [r3, #0]
24055fc4:	e178      	b.n	240562b8 <HAL_DMA_Abort_IT+0x480>
24055fc6:	687b      	ldr	r3, [r7, #4]
24055fc8:	681b      	ldr	r3, [r3, #0]
24055fca:	681a      	ldr	r2, [r3, #0]
24055fcc:	687b      	ldr	r3, [r7, #4]
24055fce:	681b      	ldr	r3, [r3, #0]
24055fd0:	f022 0201 	bic.w	r2, r2, #1
24055fd4:	601a      	str	r2, [r3, #0]
24055fd6:	e16f      	b.n	240562b8 <HAL_DMA_Abort_IT+0x480>
24055fd8:	40020010 	.word	0x40020010
24055fdc:	40020028 	.word	0x40020028
24055fe0:	40020040 	.word	0x40020040
24055fe4:	40020058 	.word	0x40020058
24055fe8:	40020070 	.word	0x40020070
24055fec:	40020088 	.word	0x40020088
24055ff0:	400200a0 	.word	0x400200a0
24055ff4:	400200b8 	.word	0x400200b8
24055ff8:	40020410 	.word	0x40020410
24055ffc:	40020428 	.word	0x40020428
24056000:	40020440 	.word	0x40020440
24056004:	40020458 	.word	0x40020458
24056008:	40020470 	.word	0x40020470
2405600c:	40020488 	.word	0x40020488
24056010:	400204a0 	.word	0x400204a0
24056014:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24056018:	687b      	ldr	r3, [r7, #4]
2405601a:	681b      	ldr	r3, [r3, #0]
2405601c:	681a      	ldr	r2, [r3, #0]
2405601e:	687b      	ldr	r3, [r7, #4]
24056020:	681b      	ldr	r3, [r3, #0]
24056022:	f022 020e 	bic.w	r2, r2, #14
24056026:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
24056028:	687b      	ldr	r3, [r7, #4]
2405602a:	681b      	ldr	r3, [r3, #0]
2405602c:	4a6c      	ldr	r2, [pc, #432]	; (240561e0 <HAL_DMA_Abort_IT+0x3a8>)
2405602e:	4293      	cmp	r3, r2
24056030:	d04a      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
24056032:	687b      	ldr	r3, [r7, #4]
24056034:	681b      	ldr	r3, [r3, #0]
24056036:	4a6b      	ldr	r2, [pc, #428]	; (240561e4 <HAL_DMA_Abort_IT+0x3ac>)
24056038:	4293      	cmp	r3, r2
2405603a:	d045      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
2405603c:	687b      	ldr	r3, [r7, #4]
2405603e:	681b      	ldr	r3, [r3, #0]
24056040:	4a69      	ldr	r2, [pc, #420]	; (240561e8 <HAL_DMA_Abort_IT+0x3b0>)
24056042:	4293      	cmp	r3, r2
24056044:	d040      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
24056046:	687b      	ldr	r3, [r7, #4]
24056048:	681b      	ldr	r3, [r3, #0]
2405604a:	4a68      	ldr	r2, [pc, #416]	; (240561ec <HAL_DMA_Abort_IT+0x3b4>)
2405604c:	4293      	cmp	r3, r2
2405604e:	d03b      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
24056050:	687b      	ldr	r3, [r7, #4]
24056052:	681b      	ldr	r3, [r3, #0]
24056054:	4a66      	ldr	r2, [pc, #408]	; (240561f0 <HAL_DMA_Abort_IT+0x3b8>)
24056056:	4293      	cmp	r3, r2
24056058:	d036      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
2405605a:	687b      	ldr	r3, [r7, #4]
2405605c:	681b      	ldr	r3, [r3, #0]
2405605e:	4a65      	ldr	r2, [pc, #404]	; (240561f4 <HAL_DMA_Abort_IT+0x3bc>)
24056060:	4293      	cmp	r3, r2
24056062:	d031      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
24056064:	687b      	ldr	r3, [r7, #4]
24056066:	681b      	ldr	r3, [r3, #0]
24056068:	4a63      	ldr	r2, [pc, #396]	; (240561f8 <HAL_DMA_Abort_IT+0x3c0>)
2405606a:	4293      	cmp	r3, r2
2405606c:	d02c      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
2405606e:	687b      	ldr	r3, [r7, #4]
24056070:	681b      	ldr	r3, [r3, #0]
24056072:	4a62      	ldr	r2, [pc, #392]	; (240561fc <HAL_DMA_Abort_IT+0x3c4>)
24056074:	4293      	cmp	r3, r2
24056076:	d027      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
24056078:	687b      	ldr	r3, [r7, #4]
2405607a:	681b      	ldr	r3, [r3, #0]
2405607c:	4a60      	ldr	r2, [pc, #384]	; (24056200 <HAL_DMA_Abort_IT+0x3c8>)
2405607e:	4293      	cmp	r3, r2
24056080:	d022      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
24056082:	687b      	ldr	r3, [r7, #4]
24056084:	681b      	ldr	r3, [r3, #0]
24056086:	4a5f      	ldr	r2, [pc, #380]	; (24056204 <HAL_DMA_Abort_IT+0x3cc>)
24056088:	4293      	cmp	r3, r2
2405608a:	d01d      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
2405608c:	687b      	ldr	r3, [r7, #4]
2405608e:	681b      	ldr	r3, [r3, #0]
24056090:	4a5d      	ldr	r2, [pc, #372]	; (24056208 <HAL_DMA_Abort_IT+0x3d0>)
24056092:	4293      	cmp	r3, r2
24056094:	d018      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
24056096:	687b      	ldr	r3, [r7, #4]
24056098:	681b      	ldr	r3, [r3, #0]
2405609a:	4a5c      	ldr	r2, [pc, #368]	; (2405620c <HAL_DMA_Abort_IT+0x3d4>)
2405609c:	4293      	cmp	r3, r2
2405609e:	d013      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
240560a0:	687b      	ldr	r3, [r7, #4]
240560a2:	681b      	ldr	r3, [r3, #0]
240560a4:	4a5a      	ldr	r2, [pc, #360]	; (24056210 <HAL_DMA_Abort_IT+0x3d8>)
240560a6:	4293      	cmp	r3, r2
240560a8:	d00e      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
240560aa:	687b      	ldr	r3, [r7, #4]
240560ac:	681b      	ldr	r3, [r3, #0]
240560ae:	4a59      	ldr	r2, [pc, #356]	; (24056214 <HAL_DMA_Abort_IT+0x3dc>)
240560b0:	4293      	cmp	r3, r2
240560b2:	d009      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
240560b4:	687b      	ldr	r3, [r7, #4]
240560b6:	681b      	ldr	r3, [r3, #0]
240560b8:	4a57      	ldr	r2, [pc, #348]	; (24056218 <HAL_DMA_Abort_IT+0x3e0>)
240560ba:	4293      	cmp	r3, r2
240560bc:	d004      	beq.n	240560c8 <HAL_DMA_Abort_IT+0x290>
240560be:	687b      	ldr	r3, [r7, #4]
240560c0:	681b      	ldr	r3, [r3, #0]
240560c2:	4a56      	ldr	r2, [pc, #344]	; (2405621c <HAL_DMA_Abort_IT+0x3e4>)
240560c4:	4293      	cmp	r3, r2
240560c6:	d108      	bne.n	240560da <HAL_DMA_Abort_IT+0x2a2>
240560c8:	687b      	ldr	r3, [r7, #4]
240560ca:	681b      	ldr	r3, [r3, #0]
240560cc:	681a      	ldr	r2, [r3, #0]
240560ce:	687b      	ldr	r3, [r7, #4]
240560d0:	681b      	ldr	r3, [r3, #0]
240560d2:	f022 0201 	bic.w	r2, r2, #1
240560d6:	601a      	str	r2, [r3, #0]
240560d8:	e007      	b.n	240560ea <HAL_DMA_Abort_IT+0x2b2>
240560da:	687b      	ldr	r3, [r7, #4]
240560dc:	681b      	ldr	r3, [r3, #0]
240560de:	681a      	ldr	r2, [r3, #0]
240560e0:	687b      	ldr	r3, [r7, #4]
240560e2:	681b      	ldr	r3, [r3, #0]
240560e4:	f022 0201 	bic.w	r2, r2, #1
240560e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240560ea:	687b      	ldr	r3, [r7, #4]
240560ec:	681b      	ldr	r3, [r3, #0]
240560ee:	4a3c      	ldr	r2, [pc, #240]	; (240561e0 <HAL_DMA_Abort_IT+0x3a8>)
240560f0:	4293      	cmp	r3, r2
240560f2:	d072      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
240560f4:	687b      	ldr	r3, [r7, #4]
240560f6:	681b      	ldr	r3, [r3, #0]
240560f8:	4a3a      	ldr	r2, [pc, #232]	; (240561e4 <HAL_DMA_Abort_IT+0x3ac>)
240560fa:	4293      	cmp	r3, r2
240560fc:	d06d      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
240560fe:	687b      	ldr	r3, [r7, #4]
24056100:	681b      	ldr	r3, [r3, #0]
24056102:	4a39      	ldr	r2, [pc, #228]	; (240561e8 <HAL_DMA_Abort_IT+0x3b0>)
24056104:	4293      	cmp	r3, r2
24056106:	d068      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
24056108:	687b      	ldr	r3, [r7, #4]
2405610a:	681b      	ldr	r3, [r3, #0]
2405610c:	4a37      	ldr	r2, [pc, #220]	; (240561ec <HAL_DMA_Abort_IT+0x3b4>)
2405610e:	4293      	cmp	r3, r2
24056110:	d063      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
24056112:	687b      	ldr	r3, [r7, #4]
24056114:	681b      	ldr	r3, [r3, #0]
24056116:	4a36      	ldr	r2, [pc, #216]	; (240561f0 <HAL_DMA_Abort_IT+0x3b8>)
24056118:	4293      	cmp	r3, r2
2405611a:	d05e      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
2405611c:	687b      	ldr	r3, [r7, #4]
2405611e:	681b      	ldr	r3, [r3, #0]
24056120:	4a34      	ldr	r2, [pc, #208]	; (240561f4 <HAL_DMA_Abort_IT+0x3bc>)
24056122:	4293      	cmp	r3, r2
24056124:	d059      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
24056126:	687b      	ldr	r3, [r7, #4]
24056128:	681b      	ldr	r3, [r3, #0]
2405612a:	4a33      	ldr	r2, [pc, #204]	; (240561f8 <HAL_DMA_Abort_IT+0x3c0>)
2405612c:	4293      	cmp	r3, r2
2405612e:	d054      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
24056130:	687b      	ldr	r3, [r7, #4]
24056132:	681b      	ldr	r3, [r3, #0]
24056134:	4a31      	ldr	r2, [pc, #196]	; (240561fc <HAL_DMA_Abort_IT+0x3c4>)
24056136:	4293      	cmp	r3, r2
24056138:	d04f      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
2405613a:	687b      	ldr	r3, [r7, #4]
2405613c:	681b      	ldr	r3, [r3, #0]
2405613e:	4a30      	ldr	r2, [pc, #192]	; (24056200 <HAL_DMA_Abort_IT+0x3c8>)
24056140:	4293      	cmp	r3, r2
24056142:	d04a      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
24056144:	687b      	ldr	r3, [r7, #4]
24056146:	681b      	ldr	r3, [r3, #0]
24056148:	4a2e      	ldr	r2, [pc, #184]	; (24056204 <HAL_DMA_Abort_IT+0x3cc>)
2405614a:	4293      	cmp	r3, r2
2405614c:	d045      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
2405614e:	687b      	ldr	r3, [r7, #4]
24056150:	681b      	ldr	r3, [r3, #0]
24056152:	4a2d      	ldr	r2, [pc, #180]	; (24056208 <HAL_DMA_Abort_IT+0x3d0>)
24056154:	4293      	cmp	r3, r2
24056156:	d040      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
24056158:	687b      	ldr	r3, [r7, #4]
2405615a:	681b      	ldr	r3, [r3, #0]
2405615c:	4a2b      	ldr	r2, [pc, #172]	; (2405620c <HAL_DMA_Abort_IT+0x3d4>)
2405615e:	4293      	cmp	r3, r2
24056160:	d03b      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
24056162:	687b      	ldr	r3, [r7, #4]
24056164:	681b      	ldr	r3, [r3, #0]
24056166:	4a2a      	ldr	r2, [pc, #168]	; (24056210 <HAL_DMA_Abort_IT+0x3d8>)
24056168:	4293      	cmp	r3, r2
2405616a:	d036      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
2405616c:	687b      	ldr	r3, [r7, #4]
2405616e:	681b      	ldr	r3, [r3, #0]
24056170:	4a28      	ldr	r2, [pc, #160]	; (24056214 <HAL_DMA_Abort_IT+0x3dc>)
24056172:	4293      	cmp	r3, r2
24056174:	d031      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
24056176:	687b      	ldr	r3, [r7, #4]
24056178:	681b      	ldr	r3, [r3, #0]
2405617a:	4a27      	ldr	r2, [pc, #156]	; (24056218 <HAL_DMA_Abort_IT+0x3e0>)
2405617c:	4293      	cmp	r3, r2
2405617e:	d02c      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
24056180:	687b      	ldr	r3, [r7, #4]
24056182:	681b      	ldr	r3, [r3, #0]
24056184:	4a25      	ldr	r2, [pc, #148]	; (2405621c <HAL_DMA_Abort_IT+0x3e4>)
24056186:	4293      	cmp	r3, r2
24056188:	d027      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
2405618a:	687b      	ldr	r3, [r7, #4]
2405618c:	681b      	ldr	r3, [r3, #0]
2405618e:	4a24      	ldr	r2, [pc, #144]	; (24056220 <HAL_DMA_Abort_IT+0x3e8>)
24056190:	4293      	cmp	r3, r2
24056192:	d022      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
24056194:	687b      	ldr	r3, [r7, #4]
24056196:	681b      	ldr	r3, [r3, #0]
24056198:	4a22      	ldr	r2, [pc, #136]	; (24056224 <HAL_DMA_Abort_IT+0x3ec>)
2405619a:	4293      	cmp	r3, r2
2405619c:	d01d      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
2405619e:	687b      	ldr	r3, [r7, #4]
240561a0:	681b      	ldr	r3, [r3, #0]
240561a2:	4a21      	ldr	r2, [pc, #132]	; (24056228 <HAL_DMA_Abort_IT+0x3f0>)
240561a4:	4293      	cmp	r3, r2
240561a6:	d018      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
240561a8:	687b      	ldr	r3, [r7, #4]
240561aa:	681b      	ldr	r3, [r3, #0]
240561ac:	4a1f      	ldr	r2, [pc, #124]	; (2405622c <HAL_DMA_Abort_IT+0x3f4>)
240561ae:	4293      	cmp	r3, r2
240561b0:	d013      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
240561b2:	687b      	ldr	r3, [r7, #4]
240561b4:	681b      	ldr	r3, [r3, #0]
240561b6:	4a1e      	ldr	r2, [pc, #120]	; (24056230 <HAL_DMA_Abort_IT+0x3f8>)
240561b8:	4293      	cmp	r3, r2
240561ba:	d00e      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
240561bc:	687b      	ldr	r3, [r7, #4]
240561be:	681b      	ldr	r3, [r3, #0]
240561c0:	4a1c      	ldr	r2, [pc, #112]	; (24056234 <HAL_DMA_Abort_IT+0x3fc>)
240561c2:	4293      	cmp	r3, r2
240561c4:	d009      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
240561c6:	687b      	ldr	r3, [r7, #4]
240561c8:	681b      	ldr	r3, [r3, #0]
240561ca:	4a1b      	ldr	r2, [pc, #108]	; (24056238 <HAL_DMA_Abort_IT+0x400>)
240561cc:	4293      	cmp	r3, r2
240561ce:	d004      	beq.n	240561da <HAL_DMA_Abort_IT+0x3a2>
240561d0:	687b      	ldr	r3, [r7, #4]
240561d2:	681b      	ldr	r3, [r3, #0]
240561d4:	4a19      	ldr	r2, [pc, #100]	; (2405623c <HAL_DMA_Abort_IT+0x404>)
240561d6:	4293      	cmp	r3, r2
240561d8:	d132      	bne.n	24056240 <HAL_DMA_Abort_IT+0x408>
240561da:	2301      	movs	r3, #1
240561dc:	e031      	b.n	24056242 <HAL_DMA_Abort_IT+0x40a>
240561de:	bf00      	nop
240561e0:	40020010 	.word	0x40020010
240561e4:	40020028 	.word	0x40020028
240561e8:	40020040 	.word	0x40020040
240561ec:	40020058 	.word	0x40020058
240561f0:	40020070 	.word	0x40020070
240561f4:	40020088 	.word	0x40020088
240561f8:	400200a0 	.word	0x400200a0
240561fc:	400200b8 	.word	0x400200b8
24056200:	40020410 	.word	0x40020410
24056204:	40020428 	.word	0x40020428
24056208:	40020440 	.word	0x40020440
2405620c:	40020458 	.word	0x40020458
24056210:	40020470 	.word	0x40020470
24056214:	40020488 	.word	0x40020488
24056218:	400204a0 	.word	0x400204a0
2405621c:	400204b8 	.word	0x400204b8
24056220:	58025408 	.word	0x58025408
24056224:	5802541c 	.word	0x5802541c
24056228:	58025430 	.word	0x58025430
2405622c:	58025444 	.word	0x58025444
24056230:	58025458 	.word	0x58025458
24056234:	5802546c 	.word	0x5802546c
24056238:	58025480 	.word	0x58025480
2405623c:	58025494 	.word	0x58025494
24056240:	2300      	movs	r3, #0
24056242:	2b00      	cmp	r3, #0
24056244:	d028      	beq.n	24056298 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24056246:	687b      	ldr	r3, [r7, #4]
24056248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405624a:	681a      	ldr	r2, [r3, #0]
2405624c:	687b      	ldr	r3, [r7, #4]
2405624e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24056250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24056254:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24056256:	687b      	ldr	r3, [r7, #4]
24056258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405625a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2405625c:	687b      	ldr	r3, [r7, #4]
2405625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056260:	f003 031f 	and.w	r3, r3, #31
24056264:	2201      	movs	r2, #1
24056266:	409a      	lsls	r2, r3
24056268:	68fb      	ldr	r3, [r7, #12]
2405626a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2405626c:	687b      	ldr	r3, [r7, #4]
2405626e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24056270:	687a      	ldr	r2, [r7, #4]
24056272:	6e92      	ldr	r2, [r2, #104]	; 0x68
24056274:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
24056276:	687b      	ldr	r3, [r7, #4]
24056278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405627a:	2b00      	cmp	r3, #0
2405627c:	d00c      	beq.n	24056298 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
2405627e:	687b      	ldr	r3, [r7, #4]
24056280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24056282:	681a      	ldr	r2, [r3, #0]
24056284:	687b      	ldr	r3, [r7, #4]
24056286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24056288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2405628c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2405628e:	687b      	ldr	r3, [r7, #4]
24056290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24056292:	687a      	ldr	r2, [r7, #4]
24056294:	6f52      	ldr	r2, [r2, #116]	; 0x74
24056296:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24056298:	687b      	ldr	r3, [r7, #4]
2405629a:	2201      	movs	r2, #1
2405629c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
240562a0:	687b      	ldr	r3, [r7, #4]
240562a2:	2200      	movs	r2, #0
240562a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
240562a8:	687b      	ldr	r3, [r7, #4]
240562aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240562ac:	2b00      	cmp	r3, #0
240562ae:	d003      	beq.n	240562b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
240562b0:	687b      	ldr	r3, [r7, #4]
240562b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240562b4:	6878      	ldr	r0, [r7, #4]
240562b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
240562b8:	2300      	movs	r3, #0
}
240562ba:	4618      	mov	r0, r3
240562bc:	3710      	adds	r7, #16
240562be:	46bd      	mov	sp, r7
240562c0:	bd80      	pop	{r7, pc}
240562c2:	bf00      	nop

240562c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
240562c4:	b580      	push	{r7, lr}
240562c6:	b08a      	sub	sp, #40	; 0x28
240562c8:	af00      	add	r7, sp, #0
240562ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
240562cc:	2300      	movs	r3, #0
240562ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
240562d0:	4b67      	ldr	r3, [pc, #412]	; (24056470 <HAL_DMA_IRQHandler+0x1ac>)
240562d2:	681b      	ldr	r3, [r3, #0]
240562d4:	4a67      	ldr	r2, [pc, #412]	; (24056474 <HAL_DMA_IRQHandler+0x1b0>)
240562d6:	fba2 2303 	umull	r2, r3, r2, r3
240562da:	0a9b      	lsrs	r3, r3, #10
240562dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240562de:	687b      	ldr	r3, [r7, #4]
240562e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240562e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240562e4:	687b      	ldr	r3, [r7, #4]
240562e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240562e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
240562ea:	6a3b      	ldr	r3, [r7, #32]
240562ec:	681b      	ldr	r3, [r3, #0]
240562ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
240562f0:	69fb      	ldr	r3, [r7, #28]
240562f2:	681b      	ldr	r3, [r3, #0]
240562f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
240562f6:	687b      	ldr	r3, [r7, #4]
240562f8:	681b      	ldr	r3, [r3, #0]
240562fa:	4a5f      	ldr	r2, [pc, #380]	; (24056478 <HAL_DMA_IRQHandler+0x1b4>)
240562fc:	4293      	cmp	r3, r2
240562fe:	d04a      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
24056300:	687b      	ldr	r3, [r7, #4]
24056302:	681b      	ldr	r3, [r3, #0]
24056304:	4a5d      	ldr	r2, [pc, #372]	; (2405647c <HAL_DMA_IRQHandler+0x1b8>)
24056306:	4293      	cmp	r3, r2
24056308:	d045      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
2405630a:	687b      	ldr	r3, [r7, #4]
2405630c:	681b      	ldr	r3, [r3, #0]
2405630e:	4a5c      	ldr	r2, [pc, #368]	; (24056480 <HAL_DMA_IRQHandler+0x1bc>)
24056310:	4293      	cmp	r3, r2
24056312:	d040      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
24056314:	687b      	ldr	r3, [r7, #4]
24056316:	681b      	ldr	r3, [r3, #0]
24056318:	4a5a      	ldr	r2, [pc, #360]	; (24056484 <HAL_DMA_IRQHandler+0x1c0>)
2405631a:	4293      	cmp	r3, r2
2405631c:	d03b      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
2405631e:	687b      	ldr	r3, [r7, #4]
24056320:	681b      	ldr	r3, [r3, #0]
24056322:	4a59      	ldr	r2, [pc, #356]	; (24056488 <HAL_DMA_IRQHandler+0x1c4>)
24056324:	4293      	cmp	r3, r2
24056326:	d036      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
24056328:	687b      	ldr	r3, [r7, #4]
2405632a:	681b      	ldr	r3, [r3, #0]
2405632c:	4a57      	ldr	r2, [pc, #348]	; (2405648c <HAL_DMA_IRQHandler+0x1c8>)
2405632e:	4293      	cmp	r3, r2
24056330:	d031      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
24056332:	687b      	ldr	r3, [r7, #4]
24056334:	681b      	ldr	r3, [r3, #0]
24056336:	4a56      	ldr	r2, [pc, #344]	; (24056490 <HAL_DMA_IRQHandler+0x1cc>)
24056338:	4293      	cmp	r3, r2
2405633a:	d02c      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
2405633c:	687b      	ldr	r3, [r7, #4]
2405633e:	681b      	ldr	r3, [r3, #0]
24056340:	4a54      	ldr	r2, [pc, #336]	; (24056494 <HAL_DMA_IRQHandler+0x1d0>)
24056342:	4293      	cmp	r3, r2
24056344:	d027      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
24056346:	687b      	ldr	r3, [r7, #4]
24056348:	681b      	ldr	r3, [r3, #0]
2405634a:	4a53      	ldr	r2, [pc, #332]	; (24056498 <HAL_DMA_IRQHandler+0x1d4>)
2405634c:	4293      	cmp	r3, r2
2405634e:	d022      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
24056350:	687b      	ldr	r3, [r7, #4]
24056352:	681b      	ldr	r3, [r3, #0]
24056354:	4a51      	ldr	r2, [pc, #324]	; (2405649c <HAL_DMA_IRQHandler+0x1d8>)
24056356:	4293      	cmp	r3, r2
24056358:	d01d      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
2405635a:	687b      	ldr	r3, [r7, #4]
2405635c:	681b      	ldr	r3, [r3, #0]
2405635e:	4a50      	ldr	r2, [pc, #320]	; (240564a0 <HAL_DMA_IRQHandler+0x1dc>)
24056360:	4293      	cmp	r3, r2
24056362:	d018      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
24056364:	687b      	ldr	r3, [r7, #4]
24056366:	681b      	ldr	r3, [r3, #0]
24056368:	4a4e      	ldr	r2, [pc, #312]	; (240564a4 <HAL_DMA_IRQHandler+0x1e0>)
2405636a:	4293      	cmp	r3, r2
2405636c:	d013      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
2405636e:	687b      	ldr	r3, [r7, #4]
24056370:	681b      	ldr	r3, [r3, #0]
24056372:	4a4d      	ldr	r2, [pc, #308]	; (240564a8 <HAL_DMA_IRQHandler+0x1e4>)
24056374:	4293      	cmp	r3, r2
24056376:	d00e      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
24056378:	687b      	ldr	r3, [r7, #4]
2405637a:	681b      	ldr	r3, [r3, #0]
2405637c:	4a4b      	ldr	r2, [pc, #300]	; (240564ac <HAL_DMA_IRQHandler+0x1e8>)
2405637e:	4293      	cmp	r3, r2
24056380:	d009      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
24056382:	687b      	ldr	r3, [r7, #4]
24056384:	681b      	ldr	r3, [r3, #0]
24056386:	4a4a      	ldr	r2, [pc, #296]	; (240564b0 <HAL_DMA_IRQHandler+0x1ec>)
24056388:	4293      	cmp	r3, r2
2405638a:	d004      	beq.n	24056396 <HAL_DMA_IRQHandler+0xd2>
2405638c:	687b      	ldr	r3, [r7, #4]
2405638e:	681b      	ldr	r3, [r3, #0]
24056390:	4a48      	ldr	r2, [pc, #288]	; (240564b4 <HAL_DMA_IRQHandler+0x1f0>)
24056392:	4293      	cmp	r3, r2
24056394:	d101      	bne.n	2405639a <HAL_DMA_IRQHandler+0xd6>
24056396:	2301      	movs	r3, #1
24056398:	e000      	b.n	2405639c <HAL_DMA_IRQHandler+0xd8>
2405639a:	2300      	movs	r3, #0
2405639c:	2b00      	cmp	r3, #0
2405639e:	f000 842b 	beq.w	24056bf8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240563a2:	687b      	ldr	r3, [r7, #4]
240563a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240563a6:	f003 031f 	and.w	r3, r3, #31
240563aa:	2208      	movs	r2, #8
240563ac:	409a      	lsls	r2, r3
240563ae:	69bb      	ldr	r3, [r7, #24]
240563b0:	4013      	ands	r3, r2
240563b2:	2b00      	cmp	r3, #0
240563b4:	f000 80a2 	beq.w	240564fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
240563b8:	687b      	ldr	r3, [r7, #4]
240563ba:	681b      	ldr	r3, [r3, #0]
240563bc:	4a2e      	ldr	r2, [pc, #184]	; (24056478 <HAL_DMA_IRQHandler+0x1b4>)
240563be:	4293      	cmp	r3, r2
240563c0:	d04a      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
240563c2:	687b      	ldr	r3, [r7, #4]
240563c4:	681b      	ldr	r3, [r3, #0]
240563c6:	4a2d      	ldr	r2, [pc, #180]	; (2405647c <HAL_DMA_IRQHandler+0x1b8>)
240563c8:	4293      	cmp	r3, r2
240563ca:	d045      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
240563cc:	687b      	ldr	r3, [r7, #4]
240563ce:	681b      	ldr	r3, [r3, #0]
240563d0:	4a2b      	ldr	r2, [pc, #172]	; (24056480 <HAL_DMA_IRQHandler+0x1bc>)
240563d2:	4293      	cmp	r3, r2
240563d4:	d040      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
240563d6:	687b      	ldr	r3, [r7, #4]
240563d8:	681b      	ldr	r3, [r3, #0]
240563da:	4a2a      	ldr	r2, [pc, #168]	; (24056484 <HAL_DMA_IRQHandler+0x1c0>)
240563dc:	4293      	cmp	r3, r2
240563de:	d03b      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
240563e0:	687b      	ldr	r3, [r7, #4]
240563e2:	681b      	ldr	r3, [r3, #0]
240563e4:	4a28      	ldr	r2, [pc, #160]	; (24056488 <HAL_DMA_IRQHandler+0x1c4>)
240563e6:	4293      	cmp	r3, r2
240563e8:	d036      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
240563ea:	687b      	ldr	r3, [r7, #4]
240563ec:	681b      	ldr	r3, [r3, #0]
240563ee:	4a27      	ldr	r2, [pc, #156]	; (2405648c <HAL_DMA_IRQHandler+0x1c8>)
240563f0:	4293      	cmp	r3, r2
240563f2:	d031      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
240563f4:	687b      	ldr	r3, [r7, #4]
240563f6:	681b      	ldr	r3, [r3, #0]
240563f8:	4a25      	ldr	r2, [pc, #148]	; (24056490 <HAL_DMA_IRQHandler+0x1cc>)
240563fa:	4293      	cmp	r3, r2
240563fc:	d02c      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
240563fe:	687b      	ldr	r3, [r7, #4]
24056400:	681b      	ldr	r3, [r3, #0]
24056402:	4a24      	ldr	r2, [pc, #144]	; (24056494 <HAL_DMA_IRQHandler+0x1d0>)
24056404:	4293      	cmp	r3, r2
24056406:	d027      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
24056408:	687b      	ldr	r3, [r7, #4]
2405640a:	681b      	ldr	r3, [r3, #0]
2405640c:	4a22      	ldr	r2, [pc, #136]	; (24056498 <HAL_DMA_IRQHandler+0x1d4>)
2405640e:	4293      	cmp	r3, r2
24056410:	d022      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
24056412:	687b      	ldr	r3, [r7, #4]
24056414:	681b      	ldr	r3, [r3, #0]
24056416:	4a21      	ldr	r2, [pc, #132]	; (2405649c <HAL_DMA_IRQHandler+0x1d8>)
24056418:	4293      	cmp	r3, r2
2405641a:	d01d      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
2405641c:	687b      	ldr	r3, [r7, #4]
2405641e:	681b      	ldr	r3, [r3, #0]
24056420:	4a1f      	ldr	r2, [pc, #124]	; (240564a0 <HAL_DMA_IRQHandler+0x1dc>)
24056422:	4293      	cmp	r3, r2
24056424:	d018      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
24056426:	687b      	ldr	r3, [r7, #4]
24056428:	681b      	ldr	r3, [r3, #0]
2405642a:	4a1e      	ldr	r2, [pc, #120]	; (240564a4 <HAL_DMA_IRQHandler+0x1e0>)
2405642c:	4293      	cmp	r3, r2
2405642e:	d013      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
24056430:	687b      	ldr	r3, [r7, #4]
24056432:	681b      	ldr	r3, [r3, #0]
24056434:	4a1c      	ldr	r2, [pc, #112]	; (240564a8 <HAL_DMA_IRQHandler+0x1e4>)
24056436:	4293      	cmp	r3, r2
24056438:	d00e      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
2405643a:	687b      	ldr	r3, [r7, #4]
2405643c:	681b      	ldr	r3, [r3, #0]
2405643e:	4a1b      	ldr	r2, [pc, #108]	; (240564ac <HAL_DMA_IRQHandler+0x1e8>)
24056440:	4293      	cmp	r3, r2
24056442:	d009      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
24056444:	687b      	ldr	r3, [r7, #4]
24056446:	681b      	ldr	r3, [r3, #0]
24056448:	4a19      	ldr	r2, [pc, #100]	; (240564b0 <HAL_DMA_IRQHandler+0x1ec>)
2405644a:	4293      	cmp	r3, r2
2405644c:	d004      	beq.n	24056458 <HAL_DMA_IRQHandler+0x194>
2405644e:	687b      	ldr	r3, [r7, #4]
24056450:	681b      	ldr	r3, [r3, #0]
24056452:	4a18      	ldr	r2, [pc, #96]	; (240564b4 <HAL_DMA_IRQHandler+0x1f0>)
24056454:	4293      	cmp	r3, r2
24056456:	d12f      	bne.n	240564b8 <HAL_DMA_IRQHandler+0x1f4>
24056458:	687b      	ldr	r3, [r7, #4]
2405645a:	681b      	ldr	r3, [r3, #0]
2405645c:	681b      	ldr	r3, [r3, #0]
2405645e:	f003 0304 	and.w	r3, r3, #4
24056462:	2b00      	cmp	r3, #0
24056464:	bf14      	ite	ne
24056466:	2301      	movne	r3, #1
24056468:	2300      	moveq	r3, #0
2405646a:	b2db      	uxtb	r3, r3
2405646c:	e02e      	b.n	240564cc <HAL_DMA_IRQHandler+0x208>
2405646e:	bf00      	nop
24056470:	20000030 	.word	0x20000030
24056474:	1b4e81b5 	.word	0x1b4e81b5
24056478:	40020010 	.word	0x40020010
2405647c:	40020028 	.word	0x40020028
24056480:	40020040 	.word	0x40020040
24056484:	40020058 	.word	0x40020058
24056488:	40020070 	.word	0x40020070
2405648c:	40020088 	.word	0x40020088
24056490:	400200a0 	.word	0x400200a0
24056494:	400200b8 	.word	0x400200b8
24056498:	40020410 	.word	0x40020410
2405649c:	40020428 	.word	0x40020428
240564a0:	40020440 	.word	0x40020440
240564a4:	40020458 	.word	0x40020458
240564a8:	40020470 	.word	0x40020470
240564ac:	40020488 	.word	0x40020488
240564b0:	400204a0 	.word	0x400204a0
240564b4:	400204b8 	.word	0x400204b8
240564b8:	687b      	ldr	r3, [r7, #4]
240564ba:	681b      	ldr	r3, [r3, #0]
240564bc:	681b      	ldr	r3, [r3, #0]
240564be:	f003 0308 	and.w	r3, r3, #8
240564c2:	2b00      	cmp	r3, #0
240564c4:	bf14      	ite	ne
240564c6:	2301      	movne	r3, #1
240564c8:	2300      	moveq	r3, #0
240564ca:	b2db      	uxtb	r3, r3
240564cc:	2b00      	cmp	r3, #0
240564ce:	d015      	beq.n	240564fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
240564d0:	687b      	ldr	r3, [r7, #4]
240564d2:	681b      	ldr	r3, [r3, #0]
240564d4:	681a      	ldr	r2, [r3, #0]
240564d6:	687b      	ldr	r3, [r7, #4]
240564d8:	681b      	ldr	r3, [r3, #0]
240564da:	f022 0204 	bic.w	r2, r2, #4
240564de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
240564e0:	687b      	ldr	r3, [r7, #4]
240564e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240564e4:	f003 031f 	and.w	r3, r3, #31
240564e8:	2208      	movs	r2, #8
240564ea:	409a      	lsls	r2, r3
240564ec:	6a3b      	ldr	r3, [r7, #32]
240564ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
240564f0:	687b      	ldr	r3, [r7, #4]
240564f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240564f4:	f043 0201 	orr.w	r2, r3, #1
240564f8:	687b      	ldr	r3, [r7, #4]
240564fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240564fc:	687b      	ldr	r3, [r7, #4]
240564fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056500:	f003 031f 	and.w	r3, r3, #31
24056504:	69ba      	ldr	r2, [r7, #24]
24056506:	fa22 f303 	lsr.w	r3, r2, r3
2405650a:	f003 0301 	and.w	r3, r3, #1
2405650e:	2b00      	cmp	r3, #0
24056510:	d06e      	beq.n	240565f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24056512:	687b      	ldr	r3, [r7, #4]
24056514:	681b      	ldr	r3, [r3, #0]
24056516:	4a69      	ldr	r2, [pc, #420]	; (240566bc <HAL_DMA_IRQHandler+0x3f8>)
24056518:	4293      	cmp	r3, r2
2405651a:	d04a      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
2405651c:	687b      	ldr	r3, [r7, #4]
2405651e:	681b      	ldr	r3, [r3, #0]
24056520:	4a67      	ldr	r2, [pc, #412]	; (240566c0 <HAL_DMA_IRQHandler+0x3fc>)
24056522:	4293      	cmp	r3, r2
24056524:	d045      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
24056526:	687b      	ldr	r3, [r7, #4]
24056528:	681b      	ldr	r3, [r3, #0]
2405652a:	4a66      	ldr	r2, [pc, #408]	; (240566c4 <HAL_DMA_IRQHandler+0x400>)
2405652c:	4293      	cmp	r3, r2
2405652e:	d040      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
24056530:	687b      	ldr	r3, [r7, #4]
24056532:	681b      	ldr	r3, [r3, #0]
24056534:	4a64      	ldr	r2, [pc, #400]	; (240566c8 <HAL_DMA_IRQHandler+0x404>)
24056536:	4293      	cmp	r3, r2
24056538:	d03b      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
2405653a:	687b      	ldr	r3, [r7, #4]
2405653c:	681b      	ldr	r3, [r3, #0]
2405653e:	4a63      	ldr	r2, [pc, #396]	; (240566cc <HAL_DMA_IRQHandler+0x408>)
24056540:	4293      	cmp	r3, r2
24056542:	d036      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
24056544:	687b      	ldr	r3, [r7, #4]
24056546:	681b      	ldr	r3, [r3, #0]
24056548:	4a61      	ldr	r2, [pc, #388]	; (240566d0 <HAL_DMA_IRQHandler+0x40c>)
2405654a:	4293      	cmp	r3, r2
2405654c:	d031      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
2405654e:	687b      	ldr	r3, [r7, #4]
24056550:	681b      	ldr	r3, [r3, #0]
24056552:	4a60      	ldr	r2, [pc, #384]	; (240566d4 <HAL_DMA_IRQHandler+0x410>)
24056554:	4293      	cmp	r3, r2
24056556:	d02c      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
24056558:	687b      	ldr	r3, [r7, #4]
2405655a:	681b      	ldr	r3, [r3, #0]
2405655c:	4a5e      	ldr	r2, [pc, #376]	; (240566d8 <HAL_DMA_IRQHandler+0x414>)
2405655e:	4293      	cmp	r3, r2
24056560:	d027      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
24056562:	687b      	ldr	r3, [r7, #4]
24056564:	681b      	ldr	r3, [r3, #0]
24056566:	4a5d      	ldr	r2, [pc, #372]	; (240566dc <HAL_DMA_IRQHandler+0x418>)
24056568:	4293      	cmp	r3, r2
2405656a:	d022      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
2405656c:	687b      	ldr	r3, [r7, #4]
2405656e:	681b      	ldr	r3, [r3, #0]
24056570:	4a5b      	ldr	r2, [pc, #364]	; (240566e0 <HAL_DMA_IRQHandler+0x41c>)
24056572:	4293      	cmp	r3, r2
24056574:	d01d      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
24056576:	687b      	ldr	r3, [r7, #4]
24056578:	681b      	ldr	r3, [r3, #0]
2405657a:	4a5a      	ldr	r2, [pc, #360]	; (240566e4 <HAL_DMA_IRQHandler+0x420>)
2405657c:	4293      	cmp	r3, r2
2405657e:	d018      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
24056580:	687b      	ldr	r3, [r7, #4]
24056582:	681b      	ldr	r3, [r3, #0]
24056584:	4a58      	ldr	r2, [pc, #352]	; (240566e8 <HAL_DMA_IRQHandler+0x424>)
24056586:	4293      	cmp	r3, r2
24056588:	d013      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
2405658a:	687b      	ldr	r3, [r7, #4]
2405658c:	681b      	ldr	r3, [r3, #0]
2405658e:	4a57      	ldr	r2, [pc, #348]	; (240566ec <HAL_DMA_IRQHandler+0x428>)
24056590:	4293      	cmp	r3, r2
24056592:	d00e      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
24056594:	687b      	ldr	r3, [r7, #4]
24056596:	681b      	ldr	r3, [r3, #0]
24056598:	4a55      	ldr	r2, [pc, #340]	; (240566f0 <HAL_DMA_IRQHandler+0x42c>)
2405659a:	4293      	cmp	r3, r2
2405659c:	d009      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
2405659e:	687b      	ldr	r3, [r7, #4]
240565a0:	681b      	ldr	r3, [r3, #0]
240565a2:	4a54      	ldr	r2, [pc, #336]	; (240566f4 <HAL_DMA_IRQHandler+0x430>)
240565a4:	4293      	cmp	r3, r2
240565a6:	d004      	beq.n	240565b2 <HAL_DMA_IRQHandler+0x2ee>
240565a8:	687b      	ldr	r3, [r7, #4]
240565aa:	681b      	ldr	r3, [r3, #0]
240565ac:	4a52      	ldr	r2, [pc, #328]	; (240566f8 <HAL_DMA_IRQHandler+0x434>)
240565ae:	4293      	cmp	r3, r2
240565b0:	d10a      	bne.n	240565c8 <HAL_DMA_IRQHandler+0x304>
240565b2:	687b      	ldr	r3, [r7, #4]
240565b4:	681b      	ldr	r3, [r3, #0]
240565b6:	695b      	ldr	r3, [r3, #20]
240565b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
240565bc:	2b00      	cmp	r3, #0
240565be:	bf14      	ite	ne
240565c0:	2301      	movne	r3, #1
240565c2:	2300      	moveq	r3, #0
240565c4:	b2db      	uxtb	r3, r3
240565c6:	e003      	b.n	240565d0 <HAL_DMA_IRQHandler+0x30c>
240565c8:	687b      	ldr	r3, [r7, #4]
240565ca:	681b      	ldr	r3, [r3, #0]
240565cc:	681b      	ldr	r3, [r3, #0]
240565ce:	2300      	movs	r3, #0
240565d0:	2b00      	cmp	r3, #0
240565d2:	d00d      	beq.n	240565f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
240565d4:	687b      	ldr	r3, [r7, #4]
240565d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240565d8:	f003 031f 	and.w	r3, r3, #31
240565dc:	2201      	movs	r2, #1
240565de:	409a      	lsls	r2, r3
240565e0:	6a3b      	ldr	r3, [r7, #32]
240565e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240565e4:	687b      	ldr	r3, [r7, #4]
240565e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240565e8:	f043 0202 	orr.w	r2, r3, #2
240565ec:	687b      	ldr	r3, [r7, #4]
240565ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240565f0:	687b      	ldr	r3, [r7, #4]
240565f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240565f4:	f003 031f 	and.w	r3, r3, #31
240565f8:	2204      	movs	r2, #4
240565fa:	409a      	lsls	r2, r3
240565fc:	69bb      	ldr	r3, [r7, #24]
240565fe:	4013      	ands	r3, r2
24056600:	2b00      	cmp	r3, #0
24056602:	f000 808f 	beq.w	24056724 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24056606:	687b      	ldr	r3, [r7, #4]
24056608:	681b      	ldr	r3, [r3, #0]
2405660a:	4a2c      	ldr	r2, [pc, #176]	; (240566bc <HAL_DMA_IRQHandler+0x3f8>)
2405660c:	4293      	cmp	r3, r2
2405660e:	d04a      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
24056610:	687b      	ldr	r3, [r7, #4]
24056612:	681b      	ldr	r3, [r3, #0]
24056614:	4a2a      	ldr	r2, [pc, #168]	; (240566c0 <HAL_DMA_IRQHandler+0x3fc>)
24056616:	4293      	cmp	r3, r2
24056618:	d045      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
2405661a:	687b      	ldr	r3, [r7, #4]
2405661c:	681b      	ldr	r3, [r3, #0]
2405661e:	4a29      	ldr	r2, [pc, #164]	; (240566c4 <HAL_DMA_IRQHandler+0x400>)
24056620:	4293      	cmp	r3, r2
24056622:	d040      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
24056624:	687b      	ldr	r3, [r7, #4]
24056626:	681b      	ldr	r3, [r3, #0]
24056628:	4a27      	ldr	r2, [pc, #156]	; (240566c8 <HAL_DMA_IRQHandler+0x404>)
2405662a:	4293      	cmp	r3, r2
2405662c:	d03b      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
2405662e:	687b      	ldr	r3, [r7, #4]
24056630:	681b      	ldr	r3, [r3, #0]
24056632:	4a26      	ldr	r2, [pc, #152]	; (240566cc <HAL_DMA_IRQHandler+0x408>)
24056634:	4293      	cmp	r3, r2
24056636:	d036      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
24056638:	687b      	ldr	r3, [r7, #4]
2405663a:	681b      	ldr	r3, [r3, #0]
2405663c:	4a24      	ldr	r2, [pc, #144]	; (240566d0 <HAL_DMA_IRQHandler+0x40c>)
2405663e:	4293      	cmp	r3, r2
24056640:	d031      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
24056642:	687b      	ldr	r3, [r7, #4]
24056644:	681b      	ldr	r3, [r3, #0]
24056646:	4a23      	ldr	r2, [pc, #140]	; (240566d4 <HAL_DMA_IRQHandler+0x410>)
24056648:	4293      	cmp	r3, r2
2405664a:	d02c      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
2405664c:	687b      	ldr	r3, [r7, #4]
2405664e:	681b      	ldr	r3, [r3, #0]
24056650:	4a21      	ldr	r2, [pc, #132]	; (240566d8 <HAL_DMA_IRQHandler+0x414>)
24056652:	4293      	cmp	r3, r2
24056654:	d027      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
24056656:	687b      	ldr	r3, [r7, #4]
24056658:	681b      	ldr	r3, [r3, #0]
2405665a:	4a20      	ldr	r2, [pc, #128]	; (240566dc <HAL_DMA_IRQHandler+0x418>)
2405665c:	4293      	cmp	r3, r2
2405665e:	d022      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
24056660:	687b      	ldr	r3, [r7, #4]
24056662:	681b      	ldr	r3, [r3, #0]
24056664:	4a1e      	ldr	r2, [pc, #120]	; (240566e0 <HAL_DMA_IRQHandler+0x41c>)
24056666:	4293      	cmp	r3, r2
24056668:	d01d      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
2405666a:	687b      	ldr	r3, [r7, #4]
2405666c:	681b      	ldr	r3, [r3, #0]
2405666e:	4a1d      	ldr	r2, [pc, #116]	; (240566e4 <HAL_DMA_IRQHandler+0x420>)
24056670:	4293      	cmp	r3, r2
24056672:	d018      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
24056674:	687b      	ldr	r3, [r7, #4]
24056676:	681b      	ldr	r3, [r3, #0]
24056678:	4a1b      	ldr	r2, [pc, #108]	; (240566e8 <HAL_DMA_IRQHandler+0x424>)
2405667a:	4293      	cmp	r3, r2
2405667c:	d013      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
2405667e:	687b      	ldr	r3, [r7, #4]
24056680:	681b      	ldr	r3, [r3, #0]
24056682:	4a1a      	ldr	r2, [pc, #104]	; (240566ec <HAL_DMA_IRQHandler+0x428>)
24056684:	4293      	cmp	r3, r2
24056686:	d00e      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
24056688:	687b      	ldr	r3, [r7, #4]
2405668a:	681b      	ldr	r3, [r3, #0]
2405668c:	4a18      	ldr	r2, [pc, #96]	; (240566f0 <HAL_DMA_IRQHandler+0x42c>)
2405668e:	4293      	cmp	r3, r2
24056690:	d009      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
24056692:	687b      	ldr	r3, [r7, #4]
24056694:	681b      	ldr	r3, [r3, #0]
24056696:	4a17      	ldr	r2, [pc, #92]	; (240566f4 <HAL_DMA_IRQHandler+0x430>)
24056698:	4293      	cmp	r3, r2
2405669a:	d004      	beq.n	240566a6 <HAL_DMA_IRQHandler+0x3e2>
2405669c:	687b      	ldr	r3, [r7, #4]
2405669e:	681b      	ldr	r3, [r3, #0]
240566a0:	4a15      	ldr	r2, [pc, #84]	; (240566f8 <HAL_DMA_IRQHandler+0x434>)
240566a2:	4293      	cmp	r3, r2
240566a4:	d12a      	bne.n	240566fc <HAL_DMA_IRQHandler+0x438>
240566a6:	687b      	ldr	r3, [r7, #4]
240566a8:	681b      	ldr	r3, [r3, #0]
240566aa:	681b      	ldr	r3, [r3, #0]
240566ac:	f003 0302 	and.w	r3, r3, #2
240566b0:	2b00      	cmp	r3, #0
240566b2:	bf14      	ite	ne
240566b4:	2301      	movne	r3, #1
240566b6:	2300      	moveq	r3, #0
240566b8:	b2db      	uxtb	r3, r3
240566ba:	e023      	b.n	24056704 <HAL_DMA_IRQHandler+0x440>
240566bc:	40020010 	.word	0x40020010
240566c0:	40020028 	.word	0x40020028
240566c4:	40020040 	.word	0x40020040
240566c8:	40020058 	.word	0x40020058
240566cc:	40020070 	.word	0x40020070
240566d0:	40020088 	.word	0x40020088
240566d4:	400200a0 	.word	0x400200a0
240566d8:	400200b8 	.word	0x400200b8
240566dc:	40020410 	.word	0x40020410
240566e0:	40020428 	.word	0x40020428
240566e4:	40020440 	.word	0x40020440
240566e8:	40020458 	.word	0x40020458
240566ec:	40020470 	.word	0x40020470
240566f0:	40020488 	.word	0x40020488
240566f4:	400204a0 	.word	0x400204a0
240566f8:	400204b8 	.word	0x400204b8
240566fc:	687b      	ldr	r3, [r7, #4]
240566fe:	681b      	ldr	r3, [r3, #0]
24056700:	681b      	ldr	r3, [r3, #0]
24056702:	2300      	movs	r3, #0
24056704:	2b00      	cmp	r3, #0
24056706:	d00d      	beq.n	24056724 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24056708:	687b      	ldr	r3, [r7, #4]
2405670a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405670c:	f003 031f 	and.w	r3, r3, #31
24056710:	2204      	movs	r2, #4
24056712:	409a      	lsls	r2, r3
24056714:	6a3b      	ldr	r3, [r7, #32]
24056716:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24056718:	687b      	ldr	r3, [r7, #4]
2405671a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405671c:	f043 0204 	orr.w	r2, r3, #4
24056720:	687b      	ldr	r3, [r7, #4]
24056722:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24056724:	687b      	ldr	r3, [r7, #4]
24056726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056728:	f003 031f 	and.w	r3, r3, #31
2405672c:	2210      	movs	r2, #16
2405672e:	409a      	lsls	r2, r3
24056730:	69bb      	ldr	r3, [r7, #24]
24056732:	4013      	ands	r3, r2
24056734:	2b00      	cmp	r3, #0
24056736:	f000 80a6 	beq.w	24056886 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
2405673a:	687b      	ldr	r3, [r7, #4]
2405673c:	681b      	ldr	r3, [r3, #0]
2405673e:	4a85      	ldr	r2, [pc, #532]	; (24056954 <HAL_DMA_IRQHandler+0x690>)
24056740:	4293      	cmp	r3, r2
24056742:	d04a      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
24056744:	687b      	ldr	r3, [r7, #4]
24056746:	681b      	ldr	r3, [r3, #0]
24056748:	4a83      	ldr	r2, [pc, #524]	; (24056958 <HAL_DMA_IRQHandler+0x694>)
2405674a:	4293      	cmp	r3, r2
2405674c:	d045      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
2405674e:	687b      	ldr	r3, [r7, #4]
24056750:	681b      	ldr	r3, [r3, #0]
24056752:	4a82      	ldr	r2, [pc, #520]	; (2405695c <HAL_DMA_IRQHandler+0x698>)
24056754:	4293      	cmp	r3, r2
24056756:	d040      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
24056758:	687b      	ldr	r3, [r7, #4]
2405675a:	681b      	ldr	r3, [r3, #0]
2405675c:	4a80      	ldr	r2, [pc, #512]	; (24056960 <HAL_DMA_IRQHandler+0x69c>)
2405675e:	4293      	cmp	r3, r2
24056760:	d03b      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
24056762:	687b      	ldr	r3, [r7, #4]
24056764:	681b      	ldr	r3, [r3, #0]
24056766:	4a7f      	ldr	r2, [pc, #508]	; (24056964 <HAL_DMA_IRQHandler+0x6a0>)
24056768:	4293      	cmp	r3, r2
2405676a:	d036      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
2405676c:	687b      	ldr	r3, [r7, #4]
2405676e:	681b      	ldr	r3, [r3, #0]
24056770:	4a7d      	ldr	r2, [pc, #500]	; (24056968 <HAL_DMA_IRQHandler+0x6a4>)
24056772:	4293      	cmp	r3, r2
24056774:	d031      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
24056776:	687b      	ldr	r3, [r7, #4]
24056778:	681b      	ldr	r3, [r3, #0]
2405677a:	4a7c      	ldr	r2, [pc, #496]	; (2405696c <HAL_DMA_IRQHandler+0x6a8>)
2405677c:	4293      	cmp	r3, r2
2405677e:	d02c      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
24056780:	687b      	ldr	r3, [r7, #4]
24056782:	681b      	ldr	r3, [r3, #0]
24056784:	4a7a      	ldr	r2, [pc, #488]	; (24056970 <HAL_DMA_IRQHandler+0x6ac>)
24056786:	4293      	cmp	r3, r2
24056788:	d027      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
2405678a:	687b      	ldr	r3, [r7, #4]
2405678c:	681b      	ldr	r3, [r3, #0]
2405678e:	4a79      	ldr	r2, [pc, #484]	; (24056974 <HAL_DMA_IRQHandler+0x6b0>)
24056790:	4293      	cmp	r3, r2
24056792:	d022      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
24056794:	687b      	ldr	r3, [r7, #4]
24056796:	681b      	ldr	r3, [r3, #0]
24056798:	4a77      	ldr	r2, [pc, #476]	; (24056978 <HAL_DMA_IRQHandler+0x6b4>)
2405679a:	4293      	cmp	r3, r2
2405679c:	d01d      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
2405679e:	687b      	ldr	r3, [r7, #4]
240567a0:	681b      	ldr	r3, [r3, #0]
240567a2:	4a76      	ldr	r2, [pc, #472]	; (2405697c <HAL_DMA_IRQHandler+0x6b8>)
240567a4:	4293      	cmp	r3, r2
240567a6:	d018      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
240567a8:	687b      	ldr	r3, [r7, #4]
240567aa:	681b      	ldr	r3, [r3, #0]
240567ac:	4a74      	ldr	r2, [pc, #464]	; (24056980 <HAL_DMA_IRQHandler+0x6bc>)
240567ae:	4293      	cmp	r3, r2
240567b0:	d013      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
240567b2:	687b      	ldr	r3, [r7, #4]
240567b4:	681b      	ldr	r3, [r3, #0]
240567b6:	4a73      	ldr	r2, [pc, #460]	; (24056984 <HAL_DMA_IRQHandler+0x6c0>)
240567b8:	4293      	cmp	r3, r2
240567ba:	d00e      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
240567bc:	687b      	ldr	r3, [r7, #4]
240567be:	681b      	ldr	r3, [r3, #0]
240567c0:	4a71      	ldr	r2, [pc, #452]	; (24056988 <HAL_DMA_IRQHandler+0x6c4>)
240567c2:	4293      	cmp	r3, r2
240567c4:	d009      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
240567c6:	687b      	ldr	r3, [r7, #4]
240567c8:	681b      	ldr	r3, [r3, #0]
240567ca:	4a70      	ldr	r2, [pc, #448]	; (2405698c <HAL_DMA_IRQHandler+0x6c8>)
240567cc:	4293      	cmp	r3, r2
240567ce:	d004      	beq.n	240567da <HAL_DMA_IRQHandler+0x516>
240567d0:	687b      	ldr	r3, [r7, #4]
240567d2:	681b      	ldr	r3, [r3, #0]
240567d4:	4a6e      	ldr	r2, [pc, #440]	; (24056990 <HAL_DMA_IRQHandler+0x6cc>)
240567d6:	4293      	cmp	r3, r2
240567d8:	d10a      	bne.n	240567f0 <HAL_DMA_IRQHandler+0x52c>
240567da:	687b      	ldr	r3, [r7, #4]
240567dc:	681b      	ldr	r3, [r3, #0]
240567de:	681b      	ldr	r3, [r3, #0]
240567e0:	f003 0308 	and.w	r3, r3, #8
240567e4:	2b00      	cmp	r3, #0
240567e6:	bf14      	ite	ne
240567e8:	2301      	movne	r3, #1
240567ea:	2300      	moveq	r3, #0
240567ec:	b2db      	uxtb	r3, r3
240567ee:	e009      	b.n	24056804 <HAL_DMA_IRQHandler+0x540>
240567f0:	687b      	ldr	r3, [r7, #4]
240567f2:	681b      	ldr	r3, [r3, #0]
240567f4:	681b      	ldr	r3, [r3, #0]
240567f6:	f003 0304 	and.w	r3, r3, #4
240567fa:	2b00      	cmp	r3, #0
240567fc:	bf14      	ite	ne
240567fe:	2301      	movne	r3, #1
24056800:	2300      	moveq	r3, #0
24056802:	b2db      	uxtb	r3, r3
24056804:	2b00      	cmp	r3, #0
24056806:	d03e      	beq.n	24056886 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24056808:	687b      	ldr	r3, [r7, #4]
2405680a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405680c:	f003 031f 	and.w	r3, r3, #31
24056810:	2210      	movs	r2, #16
24056812:	409a      	lsls	r2, r3
24056814:	6a3b      	ldr	r3, [r7, #32]
24056816:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24056818:	687b      	ldr	r3, [r7, #4]
2405681a:	681b      	ldr	r3, [r3, #0]
2405681c:	681b      	ldr	r3, [r3, #0]
2405681e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24056822:	2b00      	cmp	r3, #0
24056824:	d018      	beq.n	24056858 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24056826:	687b      	ldr	r3, [r7, #4]
24056828:	681b      	ldr	r3, [r3, #0]
2405682a:	681b      	ldr	r3, [r3, #0]
2405682c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24056830:	2b00      	cmp	r3, #0
24056832:	d108      	bne.n	24056846 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
24056834:	687b      	ldr	r3, [r7, #4]
24056836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056838:	2b00      	cmp	r3, #0
2405683a:	d024      	beq.n	24056886 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
2405683c:	687b      	ldr	r3, [r7, #4]
2405683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056840:	6878      	ldr	r0, [r7, #4]
24056842:	4798      	blx	r3
24056844:	e01f      	b.n	24056886 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
24056846:	687b      	ldr	r3, [r7, #4]
24056848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405684a:	2b00      	cmp	r3, #0
2405684c:	d01b      	beq.n	24056886 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
2405684e:	687b      	ldr	r3, [r7, #4]
24056850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24056852:	6878      	ldr	r0, [r7, #4]
24056854:	4798      	blx	r3
24056856:	e016      	b.n	24056886 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24056858:	687b      	ldr	r3, [r7, #4]
2405685a:	681b      	ldr	r3, [r3, #0]
2405685c:	681b      	ldr	r3, [r3, #0]
2405685e:	f403 7380 	and.w	r3, r3, #256	; 0x100
24056862:	2b00      	cmp	r3, #0
24056864:	d107      	bne.n	24056876 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24056866:	687b      	ldr	r3, [r7, #4]
24056868:	681b      	ldr	r3, [r3, #0]
2405686a:	681a      	ldr	r2, [r3, #0]
2405686c:	687b      	ldr	r3, [r7, #4]
2405686e:	681b      	ldr	r3, [r3, #0]
24056870:	f022 0208 	bic.w	r2, r2, #8
24056874:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
24056876:	687b      	ldr	r3, [r7, #4]
24056878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405687a:	2b00      	cmp	r3, #0
2405687c:	d003      	beq.n	24056886 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
2405687e:	687b      	ldr	r3, [r7, #4]
24056880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056882:	6878      	ldr	r0, [r7, #4]
24056884:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24056886:	687b      	ldr	r3, [r7, #4]
24056888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405688a:	f003 031f 	and.w	r3, r3, #31
2405688e:	2220      	movs	r2, #32
24056890:	409a      	lsls	r2, r3
24056892:	69bb      	ldr	r3, [r7, #24]
24056894:	4013      	ands	r3, r2
24056896:	2b00      	cmp	r3, #0
24056898:	f000 8110 	beq.w	24056abc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
2405689c:	687b      	ldr	r3, [r7, #4]
2405689e:	681b      	ldr	r3, [r3, #0]
240568a0:	4a2c      	ldr	r2, [pc, #176]	; (24056954 <HAL_DMA_IRQHandler+0x690>)
240568a2:	4293      	cmp	r3, r2
240568a4:	d04a      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
240568a6:	687b      	ldr	r3, [r7, #4]
240568a8:	681b      	ldr	r3, [r3, #0]
240568aa:	4a2b      	ldr	r2, [pc, #172]	; (24056958 <HAL_DMA_IRQHandler+0x694>)
240568ac:	4293      	cmp	r3, r2
240568ae:	d045      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
240568b0:	687b      	ldr	r3, [r7, #4]
240568b2:	681b      	ldr	r3, [r3, #0]
240568b4:	4a29      	ldr	r2, [pc, #164]	; (2405695c <HAL_DMA_IRQHandler+0x698>)
240568b6:	4293      	cmp	r3, r2
240568b8:	d040      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
240568ba:	687b      	ldr	r3, [r7, #4]
240568bc:	681b      	ldr	r3, [r3, #0]
240568be:	4a28      	ldr	r2, [pc, #160]	; (24056960 <HAL_DMA_IRQHandler+0x69c>)
240568c0:	4293      	cmp	r3, r2
240568c2:	d03b      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
240568c4:	687b      	ldr	r3, [r7, #4]
240568c6:	681b      	ldr	r3, [r3, #0]
240568c8:	4a26      	ldr	r2, [pc, #152]	; (24056964 <HAL_DMA_IRQHandler+0x6a0>)
240568ca:	4293      	cmp	r3, r2
240568cc:	d036      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
240568ce:	687b      	ldr	r3, [r7, #4]
240568d0:	681b      	ldr	r3, [r3, #0]
240568d2:	4a25      	ldr	r2, [pc, #148]	; (24056968 <HAL_DMA_IRQHandler+0x6a4>)
240568d4:	4293      	cmp	r3, r2
240568d6:	d031      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
240568d8:	687b      	ldr	r3, [r7, #4]
240568da:	681b      	ldr	r3, [r3, #0]
240568dc:	4a23      	ldr	r2, [pc, #140]	; (2405696c <HAL_DMA_IRQHandler+0x6a8>)
240568de:	4293      	cmp	r3, r2
240568e0:	d02c      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
240568e2:	687b      	ldr	r3, [r7, #4]
240568e4:	681b      	ldr	r3, [r3, #0]
240568e6:	4a22      	ldr	r2, [pc, #136]	; (24056970 <HAL_DMA_IRQHandler+0x6ac>)
240568e8:	4293      	cmp	r3, r2
240568ea:	d027      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
240568ec:	687b      	ldr	r3, [r7, #4]
240568ee:	681b      	ldr	r3, [r3, #0]
240568f0:	4a20      	ldr	r2, [pc, #128]	; (24056974 <HAL_DMA_IRQHandler+0x6b0>)
240568f2:	4293      	cmp	r3, r2
240568f4:	d022      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
240568f6:	687b      	ldr	r3, [r7, #4]
240568f8:	681b      	ldr	r3, [r3, #0]
240568fa:	4a1f      	ldr	r2, [pc, #124]	; (24056978 <HAL_DMA_IRQHandler+0x6b4>)
240568fc:	4293      	cmp	r3, r2
240568fe:	d01d      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
24056900:	687b      	ldr	r3, [r7, #4]
24056902:	681b      	ldr	r3, [r3, #0]
24056904:	4a1d      	ldr	r2, [pc, #116]	; (2405697c <HAL_DMA_IRQHandler+0x6b8>)
24056906:	4293      	cmp	r3, r2
24056908:	d018      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
2405690a:	687b      	ldr	r3, [r7, #4]
2405690c:	681b      	ldr	r3, [r3, #0]
2405690e:	4a1c      	ldr	r2, [pc, #112]	; (24056980 <HAL_DMA_IRQHandler+0x6bc>)
24056910:	4293      	cmp	r3, r2
24056912:	d013      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
24056914:	687b      	ldr	r3, [r7, #4]
24056916:	681b      	ldr	r3, [r3, #0]
24056918:	4a1a      	ldr	r2, [pc, #104]	; (24056984 <HAL_DMA_IRQHandler+0x6c0>)
2405691a:	4293      	cmp	r3, r2
2405691c:	d00e      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
2405691e:	687b      	ldr	r3, [r7, #4]
24056920:	681b      	ldr	r3, [r3, #0]
24056922:	4a19      	ldr	r2, [pc, #100]	; (24056988 <HAL_DMA_IRQHandler+0x6c4>)
24056924:	4293      	cmp	r3, r2
24056926:	d009      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
24056928:	687b      	ldr	r3, [r7, #4]
2405692a:	681b      	ldr	r3, [r3, #0]
2405692c:	4a17      	ldr	r2, [pc, #92]	; (2405698c <HAL_DMA_IRQHandler+0x6c8>)
2405692e:	4293      	cmp	r3, r2
24056930:	d004      	beq.n	2405693c <HAL_DMA_IRQHandler+0x678>
24056932:	687b      	ldr	r3, [r7, #4]
24056934:	681b      	ldr	r3, [r3, #0]
24056936:	4a16      	ldr	r2, [pc, #88]	; (24056990 <HAL_DMA_IRQHandler+0x6cc>)
24056938:	4293      	cmp	r3, r2
2405693a:	d12b      	bne.n	24056994 <HAL_DMA_IRQHandler+0x6d0>
2405693c:	687b      	ldr	r3, [r7, #4]
2405693e:	681b      	ldr	r3, [r3, #0]
24056940:	681b      	ldr	r3, [r3, #0]
24056942:	f003 0310 	and.w	r3, r3, #16
24056946:	2b00      	cmp	r3, #0
24056948:	bf14      	ite	ne
2405694a:	2301      	movne	r3, #1
2405694c:	2300      	moveq	r3, #0
2405694e:	b2db      	uxtb	r3, r3
24056950:	e02a      	b.n	240569a8 <HAL_DMA_IRQHandler+0x6e4>
24056952:	bf00      	nop
24056954:	40020010 	.word	0x40020010
24056958:	40020028 	.word	0x40020028
2405695c:	40020040 	.word	0x40020040
24056960:	40020058 	.word	0x40020058
24056964:	40020070 	.word	0x40020070
24056968:	40020088 	.word	0x40020088
2405696c:	400200a0 	.word	0x400200a0
24056970:	400200b8 	.word	0x400200b8
24056974:	40020410 	.word	0x40020410
24056978:	40020428 	.word	0x40020428
2405697c:	40020440 	.word	0x40020440
24056980:	40020458 	.word	0x40020458
24056984:	40020470 	.word	0x40020470
24056988:	40020488 	.word	0x40020488
2405698c:	400204a0 	.word	0x400204a0
24056990:	400204b8 	.word	0x400204b8
24056994:	687b      	ldr	r3, [r7, #4]
24056996:	681b      	ldr	r3, [r3, #0]
24056998:	681b      	ldr	r3, [r3, #0]
2405699a:	f003 0302 	and.w	r3, r3, #2
2405699e:	2b00      	cmp	r3, #0
240569a0:	bf14      	ite	ne
240569a2:	2301      	movne	r3, #1
240569a4:	2300      	moveq	r3, #0
240569a6:	b2db      	uxtb	r3, r3
240569a8:	2b00      	cmp	r3, #0
240569aa:	f000 8087 	beq.w	24056abc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
240569ae:	687b      	ldr	r3, [r7, #4]
240569b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240569b2:	f003 031f 	and.w	r3, r3, #31
240569b6:	2220      	movs	r2, #32
240569b8:	409a      	lsls	r2, r3
240569ba:	6a3b      	ldr	r3, [r7, #32]
240569bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
240569be:	687b      	ldr	r3, [r7, #4]
240569c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240569c4:	b2db      	uxtb	r3, r3
240569c6:	2b04      	cmp	r3, #4
240569c8:	d139      	bne.n	24056a3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
240569ca:	687b      	ldr	r3, [r7, #4]
240569cc:	681b      	ldr	r3, [r3, #0]
240569ce:	681a      	ldr	r2, [r3, #0]
240569d0:	687b      	ldr	r3, [r7, #4]
240569d2:	681b      	ldr	r3, [r3, #0]
240569d4:	f022 0216 	bic.w	r2, r2, #22
240569d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240569da:	687b      	ldr	r3, [r7, #4]
240569dc:	681b      	ldr	r3, [r3, #0]
240569de:	695a      	ldr	r2, [r3, #20]
240569e0:	687b      	ldr	r3, [r7, #4]
240569e2:	681b      	ldr	r3, [r3, #0]
240569e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
240569e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
240569ea:	687b      	ldr	r3, [r7, #4]
240569ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240569ee:	2b00      	cmp	r3, #0
240569f0:	d103      	bne.n	240569fa <HAL_DMA_IRQHandler+0x736>
240569f2:	687b      	ldr	r3, [r7, #4]
240569f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240569f6:	2b00      	cmp	r3, #0
240569f8:	d007      	beq.n	24056a0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
240569fa:	687b      	ldr	r3, [r7, #4]
240569fc:	681b      	ldr	r3, [r3, #0]
240569fe:	681a      	ldr	r2, [r3, #0]
24056a00:	687b      	ldr	r3, [r7, #4]
24056a02:	681b      	ldr	r3, [r3, #0]
24056a04:	f022 0208 	bic.w	r2, r2, #8
24056a08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24056a0a:	687b      	ldr	r3, [r7, #4]
24056a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056a0e:	f003 031f 	and.w	r3, r3, #31
24056a12:	223f      	movs	r2, #63	; 0x3f
24056a14:	409a      	lsls	r2, r3
24056a16:	6a3b      	ldr	r3, [r7, #32]
24056a18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24056a1a:	687b      	ldr	r3, [r7, #4]
24056a1c:	2201      	movs	r2, #1
24056a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24056a22:	687b      	ldr	r3, [r7, #4]
24056a24:	2200      	movs	r2, #0
24056a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
24056a2a:	687b      	ldr	r3, [r7, #4]
24056a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24056a2e:	2b00      	cmp	r3, #0
24056a30:	f000 8382 	beq.w	24057138 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
24056a34:	687b      	ldr	r3, [r7, #4]
24056a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24056a38:	6878      	ldr	r0, [r7, #4]
24056a3a:	4798      	blx	r3
          }
          return;
24056a3c:	e37c      	b.n	24057138 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24056a3e:	687b      	ldr	r3, [r7, #4]
24056a40:	681b      	ldr	r3, [r3, #0]
24056a42:	681b      	ldr	r3, [r3, #0]
24056a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24056a48:	2b00      	cmp	r3, #0
24056a4a:	d018      	beq.n	24056a7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24056a4c:	687b      	ldr	r3, [r7, #4]
24056a4e:	681b      	ldr	r3, [r3, #0]
24056a50:	681b      	ldr	r3, [r3, #0]
24056a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24056a56:	2b00      	cmp	r3, #0
24056a58:	d108      	bne.n	24056a6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
24056a5a:	687b      	ldr	r3, [r7, #4]
24056a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24056a5e:	2b00      	cmp	r3, #0
24056a60:	d02c      	beq.n	24056abc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
24056a62:	687b      	ldr	r3, [r7, #4]
24056a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24056a66:	6878      	ldr	r0, [r7, #4]
24056a68:	4798      	blx	r3
24056a6a:	e027      	b.n	24056abc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
24056a6c:	687b      	ldr	r3, [r7, #4]
24056a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056a70:	2b00      	cmp	r3, #0
24056a72:	d023      	beq.n	24056abc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
24056a74:	687b      	ldr	r3, [r7, #4]
24056a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056a78:	6878      	ldr	r0, [r7, #4]
24056a7a:	4798      	blx	r3
24056a7c:	e01e      	b.n	24056abc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24056a7e:	687b      	ldr	r3, [r7, #4]
24056a80:	681b      	ldr	r3, [r3, #0]
24056a82:	681b      	ldr	r3, [r3, #0]
24056a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
24056a88:	2b00      	cmp	r3, #0
24056a8a:	d10f      	bne.n	24056aac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24056a8c:	687b      	ldr	r3, [r7, #4]
24056a8e:	681b      	ldr	r3, [r3, #0]
24056a90:	681a      	ldr	r2, [r3, #0]
24056a92:	687b      	ldr	r3, [r7, #4]
24056a94:	681b      	ldr	r3, [r3, #0]
24056a96:	f022 0210 	bic.w	r2, r2, #16
24056a9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
24056a9c:	687b      	ldr	r3, [r7, #4]
24056a9e:	2201      	movs	r2, #1
24056aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
24056aa4:	687b      	ldr	r3, [r7, #4]
24056aa6:	2200      	movs	r2, #0
24056aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
24056aac:	687b      	ldr	r3, [r7, #4]
24056aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056ab0:	2b00      	cmp	r3, #0
24056ab2:	d003      	beq.n	24056abc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
24056ab4:	687b      	ldr	r3, [r7, #4]
24056ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056ab8:	6878      	ldr	r0, [r7, #4]
24056aba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24056abc:	687b      	ldr	r3, [r7, #4]
24056abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24056ac0:	2b00      	cmp	r3, #0
24056ac2:	f000 833e 	beq.w	24057142 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24056ac6:	687b      	ldr	r3, [r7, #4]
24056ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24056aca:	f003 0301 	and.w	r3, r3, #1
24056ace:	2b00      	cmp	r3, #0
24056ad0:	f000 8088 	beq.w	24056be4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
24056ad4:	687b      	ldr	r3, [r7, #4]
24056ad6:	2204      	movs	r2, #4
24056ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
24056adc:	687b      	ldr	r3, [r7, #4]
24056ade:	681b      	ldr	r3, [r3, #0]
24056ae0:	4a89      	ldr	r2, [pc, #548]	; (24056d08 <HAL_DMA_IRQHandler+0xa44>)
24056ae2:	4293      	cmp	r3, r2
24056ae4:	d04a      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056ae6:	687b      	ldr	r3, [r7, #4]
24056ae8:	681b      	ldr	r3, [r3, #0]
24056aea:	4a88      	ldr	r2, [pc, #544]	; (24056d0c <HAL_DMA_IRQHandler+0xa48>)
24056aec:	4293      	cmp	r3, r2
24056aee:	d045      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056af0:	687b      	ldr	r3, [r7, #4]
24056af2:	681b      	ldr	r3, [r3, #0]
24056af4:	4a86      	ldr	r2, [pc, #536]	; (24056d10 <HAL_DMA_IRQHandler+0xa4c>)
24056af6:	4293      	cmp	r3, r2
24056af8:	d040      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056afa:	687b      	ldr	r3, [r7, #4]
24056afc:	681b      	ldr	r3, [r3, #0]
24056afe:	4a85      	ldr	r2, [pc, #532]	; (24056d14 <HAL_DMA_IRQHandler+0xa50>)
24056b00:	4293      	cmp	r3, r2
24056b02:	d03b      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056b04:	687b      	ldr	r3, [r7, #4]
24056b06:	681b      	ldr	r3, [r3, #0]
24056b08:	4a83      	ldr	r2, [pc, #524]	; (24056d18 <HAL_DMA_IRQHandler+0xa54>)
24056b0a:	4293      	cmp	r3, r2
24056b0c:	d036      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056b0e:	687b      	ldr	r3, [r7, #4]
24056b10:	681b      	ldr	r3, [r3, #0]
24056b12:	4a82      	ldr	r2, [pc, #520]	; (24056d1c <HAL_DMA_IRQHandler+0xa58>)
24056b14:	4293      	cmp	r3, r2
24056b16:	d031      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056b18:	687b      	ldr	r3, [r7, #4]
24056b1a:	681b      	ldr	r3, [r3, #0]
24056b1c:	4a80      	ldr	r2, [pc, #512]	; (24056d20 <HAL_DMA_IRQHandler+0xa5c>)
24056b1e:	4293      	cmp	r3, r2
24056b20:	d02c      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056b22:	687b      	ldr	r3, [r7, #4]
24056b24:	681b      	ldr	r3, [r3, #0]
24056b26:	4a7f      	ldr	r2, [pc, #508]	; (24056d24 <HAL_DMA_IRQHandler+0xa60>)
24056b28:	4293      	cmp	r3, r2
24056b2a:	d027      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056b2c:	687b      	ldr	r3, [r7, #4]
24056b2e:	681b      	ldr	r3, [r3, #0]
24056b30:	4a7d      	ldr	r2, [pc, #500]	; (24056d28 <HAL_DMA_IRQHandler+0xa64>)
24056b32:	4293      	cmp	r3, r2
24056b34:	d022      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056b36:	687b      	ldr	r3, [r7, #4]
24056b38:	681b      	ldr	r3, [r3, #0]
24056b3a:	4a7c      	ldr	r2, [pc, #496]	; (24056d2c <HAL_DMA_IRQHandler+0xa68>)
24056b3c:	4293      	cmp	r3, r2
24056b3e:	d01d      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056b40:	687b      	ldr	r3, [r7, #4]
24056b42:	681b      	ldr	r3, [r3, #0]
24056b44:	4a7a      	ldr	r2, [pc, #488]	; (24056d30 <HAL_DMA_IRQHandler+0xa6c>)
24056b46:	4293      	cmp	r3, r2
24056b48:	d018      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056b4a:	687b      	ldr	r3, [r7, #4]
24056b4c:	681b      	ldr	r3, [r3, #0]
24056b4e:	4a79      	ldr	r2, [pc, #484]	; (24056d34 <HAL_DMA_IRQHandler+0xa70>)
24056b50:	4293      	cmp	r3, r2
24056b52:	d013      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056b54:	687b      	ldr	r3, [r7, #4]
24056b56:	681b      	ldr	r3, [r3, #0]
24056b58:	4a77      	ldr	r2, [pc, #476]	; (24056d38 <HAL_DMA_IRQHandler+0xa74>)
24056b5a:	4293      	cmp	r3, r2
24056b5c:	d00e      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056b5e:	687b      	ldr	r3, [r7, #4]
24056b60:	681b      	ldr	r3, [r3, #0]
24056b62:	4a76      	ldr	r2, [pc, #472]	; (24056d3c <HAL_DMA_IRQHandler+0xa78>)
24056b64:	4293      	cmp	r3, r2
24056b66:	d009      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056b68:	687b      	ldr	r3, [r7, #4]
24056b6a:	681b      	ldr	r3, [r3, #0]
24056b6c:	4a74      	ldr	r2, [pc, #464]	; (24056d40 <HAL_DMA_IRQHandler+0xa7c>)
24056b6e:	4293      	cmp	r3, r2
24056b70:	d004      	beq.n	24056b7c <HAL_DMA_IRQHandler+0x8b8>
24056b72:	687b      	ldr	r3, [r7, #4]
24056b74:	681b      	ldr	r3, [r3, #0]
24056b76:	4a73      	ldr	r2, [pc, #460]	; (24056d44 <HAL_DMA_IRQHandler+0xa80>)
24056b78:	4293      	cmp	r3, r2
24056b7a:	d108      	bne.n	24056b8e <HAL_DMA_IRQHandler+0x8ca>
24056b7c:	687b      	ldr	r3, [r7, #4]
24056b7e:	681b      	ldr	r3, [r3, #0]
24056b80:	681a      	ldr	r2, [r3, #0]
24056b82:	687b      	ldr	r3, [r7, #4]
24056b84:	681b      	ldr	r3, [r3, #0]
24056b86:	f022 0201 	bic.w	r2, r2, #1
24056b8a:	601a      	str	r2, [r3, #0]
24056b8c:	e007      	b.n	24056b9e <HAL_DMA_IRQHandler+0x8da>
24056b8e:	687b      	ldr	r3, [r7, #4]
24056b90:	681b      	ldr	r3, [r3, #0]
24056b92:	681a      	ldr	r2, [r3, #0]
24056b94:	687b      	ldr	r3, [r7, #4]
24056b96:	681b      	ldr	r3, [r3, #0]
24056b98:	f022 0201 	bic.w	r2, r2, #1
24056b9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
24056b9e:	68fb      	ldr	r3, [r7, #12]
24056ba0:	3301      	adds	r3, #1
24056ba2:	60fb      	str	r3, [r7, #12]
24056ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24056ba6:	429a      	cmp	r2, r3
24056ba8:	d307      	bcc.n	24056bba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24056baa:	687b      	ldr	r3, [r7, #4]
24056bac:	681b      	ldr	r3, [r3, #0]
24056bae:	681b      	ldr	r3, [r3, #0]
24056bb0:	f003 0301 	and.w	r3, r3, #1
24056bb4:	2b00      	cmp	r3, #0
24056bb6:	d1f2      	bne.n	24056b9e <HAL_DMA_IRQHandler+0x8da>
24056bb8:	e000      	b.n	24056bbc <HAL_DMA_IRQHandler+0x8f8>
            break;
24056bba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24056bbc:	687b      	ldr	r3, [r7, #4]
24056bbe:	681b      	ldr	r3, [r3, #0]
24056bc0:	681b      	ldr	r3, [r3, #0]
24056bc2:	f003 0301 	and.w	r3, r3, #1
24056bc6:	2b00      	cmp	r3, #0
24056bc8:	d004      	beq.n	24056bd4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
24056bca:	687b      	ldr	r3, [r7, #4]
24056bcc:	2203      	movs	r2, #3
24056bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
24056bd2:	e003      	b.n	24056bdc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
24056bd4:	687b      	ldr	r3, [r7, #4]
24056bd6:	2201      	movs	r2, #1
24056bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24056bdc:	687b      	ldr	r3, [r7, #4]
24056bde:	2200      	movs	r2, #0
24056be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
24056be4:	687b      	ldr	r3, [r7, #4]
24056be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24056be8:	2b00      	cmp	r3, #0
24056bea:	f000 82aa 	beq.w	24057142 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24056bee:	687b      	ldr	r3, [r7, #4]
24056bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24056bf2:	6878      	ldr	r0, [r7, #4]
24056bf4:	4798      	blx	r3
24056bf6:	e2a4      	b.n	24057142 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24056bf8:	687b      	ldr	r3, [r7, #4]
24056bfa:	681b      	ldr	r3, [r3, #0]
24056bfc:	4a52      	ldr	r2, [pc, #328]	; (24056d48 <HAL_DMA_IRQHandler+0xa84>)
24056bfe:	4293      	cmp	r3, r2
24056c00:	d04a      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c02:	687b      	ldr	r3, [r7, #4]
24056c04:	681b      	ldr	r3, [r3, #0]
24056c06:	4a51      	ldr	r2, [pc, #324]	; (24056d4c <HAL_DMA_IRQHandler+0xa88>)
24056c08:	4293      	cmp	r3, r2
24056c0a:	d045      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c0c:	687b      	ldr	r3, [r7, #4]
24056c0e:	681b      	ldr	r3, [r3, #0]
24056c10:	4a4f      	ldr	r2, [pc, #316]	; (24056d50 <HAL_DMA_IRQHandler+0xa8c>)
24056c12:	4293      	cmp	r3, r2
24056c14:	d040      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c16:	687b      	ldr	r3, [r7, #4]
24056c18:	681b      	ldr	r3, [r3, #0]
24056c1a:	4a4e      	ldr	r2, [pc, #312]	; (24056d54 <HAL_DMA_IRQHandler+0xa90>)
24056c1c:	4293      	cmp	r3, r2
24056c1e:	d03b      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c20:	687b      	ldr	r3, [r7, #4]
24056c22:	681b      	ldr	r3, [r3, #0]
24056c24:	4a4c      	ldr	r2, [pc, #304]	; (24056d58 <HAL_DMA_IRQHandler+0xa94>)
24056c26:	4293      	cmp	r3, r2
24056c28:	d036      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c2a:	687b      	ldr	r3, [r7, #4]
24056c2c:	681b      	ldr	r3, [r3, #0]
24056c2e:	4a4b      	ldr	r2, [pc, #300]	; (24056d5c <HAL_DMA_IRQHandler+0xa98>)
24056c30:	4293      	cmp	r3, r2
24056c32:	d031      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c34:	687b      	ldr	r3, [r7, #4]
24056c36:	681b      	ldr	r3, [r3, #0]
24056c38:	4a49      	ldr	r2, [pc, #292]	; (24056d60 <HAL_DMA_IRQHandler+0xa9c>)
24056c3a:	4293      	cmp	r3, r2
24056c3c:	d02c      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c3e:	687b      	ldr	r3, [r7, #4]
24056c40:	681b      	ldr	r3, [r3, #0]
24056c42:	4a48      	ldr	r2, [pc, #288]	; (24056d64 <HAL_DMA_IRQHandler+0xaa0>)
24056c44:	4293      	cmp	r3, r2
24056c46:	d027      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c48:	687b      	ldr	r3, [r7, #4]
24056c4a:	681b      	ldr	r3, [r3, #0]
24056c4c:	4a46      	ldr	r2, [pc, #280]	; (24056d68 <HAL_DMA_IRQHandler+0xaa4>)
24056c4e:	4293      	cmp	r3, r2
24056c50:	d022      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c52:	687b      	ldr	r3, [r7, #4]
24056c54:	681b      	ldr	r3, [r3, #0]
24056c56:	4a45      	ldr	r2, [pc, #276]	; (24056d6c <HAL_DMA_IRQHandler+0xaa8>)
24056c58:	4293      	cmp	r3, r2
24056c5a:	d01d      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c5c:	687b      	ldr	r3, [r7, #4]
24056c5e:	681b      	ldr	r3, [r3, #0]
24056c60:	4a43      	ldr	r2, [pc, #268]	; (24056d70 <HAL_DMA_IRQHandler+0xaac>)
24056c62:	4293      	cmp	r3, r2
24056c64:	d018      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c66:	687b      	ldr	r3, [r7, #4]
24056c68:	681b      	ldr	r3, [r3, #0]
24056c6a:	4a42      	ldr	r2, [pc, #264]	; (24056d74 <HAL_DMA_IRQHandler+0xab0>)
24056c6c:	4293      	cmp	r3, r2
24056c6e:	d013      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c70:	687b      	ldr	r3, [r7, #4]
24056c72:	681b      	ldr	r3, [r3, #0]
24056c74:	4a40      	ldr	r2, [pc, #256]	; (24056d78 <HAL_DMA_IRQHandler+0xab4>)
24056c76:	4293      	cmp	r3, r2
24056c78:	d00e      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c7a:	687b      	ldr	r3, [r7, #4]
24056c7c:	681b      	ldr	r3, [r3, #0]
24056c7e:	4a3f      	ldr	r2, [pc, #252]	; (24056d7c <HAL_DMA_IRQHandler+0xab8>)
24056c80:	4293      	cmp	r3, r2
24056c82:	d009      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c84:	687b      	ldr	r3, [r7, #4]
24056c86:	681b      	ldr	r3, [r3, #0]
24056c88:	4a3d      	ldr	r2, [pc, #244]	; (24056d80 <HAL_DMA_IRQHandler+0xabc>)
24056c8a:	4293      	cmp	r3, r2
24056c8c:	d004      	beq.n	24056c98 <HAL_DMA_IRQHandler+0x9d4>
24056c8e:	687b      	ldr	r3, [r7, #4]
24056c90:	681b      	ldr	r3, [r3, #0]
24056c92:	4a3c      	ldr	r2, [pc, #240]	; (24056d84 <HAL_DMA_IRQHandler+0xac0>)
24056c94:	4293      	cmp	r3, r2
24056c96:	d101      	bne.n	24056c9c <HAL_DMA_IRQHandler+0x9d8>
24056c98:	2301      	movs	r3, #1
24056c9a:	e000      	b.n	24056c9e <HAL_DMA_IRQHandler+0x9da>
24056c9c:	2300      	movs	r3, #0
24056c9e:	2b00      	cmp	r3, #0
24056ca0:	f000 824f 	beq.w	24057142 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24056ca4:	687b      	ldr	r3, [r7, #4]
24056ca6:	681b      	ldr	r3, [r3, #0]
24056ca8:	681b      	ldr	r3, [r3, #0]
24056caa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24056cac:	687b      	ldr	r3, [r7, #4]
24056cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056cb0:	f003 031f 	and.w	r3, r3, #31
24056cb4:	2204      	movs	r2, #4
24056cb6:	409a      	lsls	r2, r3
24056cb8:	697b      	ldr	r3, [r7, #20]
24056cba:	4013      	ands	r3, r2
24056cbc:	2b00      	cmp	r3, #0
24056cbe:	f000 80dd 	beq.w	24056e7c <HAL_DMA_IRQHandler+0xbb8>
24056cc2:	693b      	ldr	r3, [r7, #16]
24056cc4:	f003 0304 	and.w	r3, r3, #4
24056cc8:	2b00      	cmp	r3, #0
24056cca:	f000 80d7 	beq.w	24056e7c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24056cce:	687b      	ldr	r3, [r7, #4]
24056cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056cd2:	f003 031f 	and.w	r3, r3, #31
24056cd6:	2204      	movs	r2, #4
24056cd8:	409a      	lsls	r2, r3
24056cda:	69fb      	ldr	r3, [r7, #28]
24056cdc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056cde:	693b      	ldr	r3, [r7, #16]
24056ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24056ce4:	2b00      	cmp	r3, #0
24056ce6:	d059      	beq.n	24056d9c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24056ce8:	693b      	ldr	r3, [r7, #16]
24056cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24056cee:	2b00      	cmp	r3, #0
24056cf0:	d14a      	bne.n	24056d88 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
24056cf2:	687b      	ldr	r3, [r7, #4]
24056cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24056cf6:	2b00      	cmp	r3, #0
24056cf8:	f000 8220 	beq.w	2405713c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
24056cfc:	687b      	ldr	r3, [r7, #4]
24056cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24056d00:	6878      	ldr	r0, [r7, #4]
24056d02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056d04:	e21a      	b.n	2405713c <HAL_DMA_IRQHandler+0xe78>
24056d06:	bf00      	nop
24056d08:	40020010 	.word	0x40020010
24056d0c:	40020028 	.word	0x40020028
24056d10:	40020040 	.word	0x40020040
24056d14:	40020058 	.word	0x40020058
24056d18:	40020070 	.word	0x40020070
24056d1c:	40020088 	.word	0x40020088
24056d20:	400200a0 	.word	0x400200a0
24056d24:	400200b8 	.word	0x400200b8
24056d28:	40020410 	.word	0x40020410
24056d2c:	40020428 	.word	0x40020428
24056d30:	40020440 	.word	0x40020440
24056d34:	40020458 	.word	0x40020458
24056d38:	40020470 	.word	0x40020470
24056d3c:	40020488 	.word	0x40020488
24056d40:	400204a0 	.word	0x400204a0
24056d44:	400204b8 	.word	0x400204b8
24056d48:	48022c08 	.word	0x48022c08
24056d4c:	48022c1c 	.word	0x48022c1c
24056d50:	48022c30 	.word	0x48022c30
24056d54:	48022c44 	.word	0x48022c44
24056d58:	48022c58 	.word	0x48022c58
24056d5c:	48022c6c 	.word	0x48022c6c
24056d60:	48022c80 	.word	0x48022c80
24056d64:	48022c94 	.word	0x48022c94
24056d68:	58025408 	.word	0x58025408
24056d6c:	5802541c 	.word	0x5802541c
24056d70:	58025430 	.word	0x58025430
24056d74:	58025444 	.word	0x58025444
24056d78:	58025458 	.word	0x58025458
24056d7c:	5802546c 	.word	0x5802546c
24056d80:	58025480 	.word	0x58025480
24056d84:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
24056d88:	687b      	ldr	r3, [r7, #4]
24056d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056d8c:	2b00      	cmp	r3, #0
24056d8e:	f000 81d5 	beq.w	2405713c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
24056d92:	687b      	ldr	r3, [r7, #4]
24056d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056d96:	6878      	ldr	r0, [r7, #4]
24056d98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056d9a:	e1cf      	b.n	2405713c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24056d9c:	693b      	ldr	r3, [r7, #16]
24056d9e:	f003 0320 	and.w	r3, r3, #32
24056da2:	2b00      	cmp	r3, #0
24056da4:	d160      	bne.n	24056e68 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24056da6:	687b      	ldr	r3, [r7, #4]
24056da8:	681b      	ldr	r3, [r3, #0]
24056daa:	4a7f      	ldr	r2, [pc, #508]	; (24056fa8 <HAL_DMA_IRQHandler+0xce4>)
24056dac:	4293      	cmp	r3, r2
24056dae:	d04a      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056db0:	687b      	ldr	r3, [r7, #4]
24056db2:	681b      	ldr	r3, [r3, #0]
24056db4:	4a7d      	ldr	r2, [pc, #500]	; (24056fac <HAL_DMA_IRQHandler+0xce8>)
24056db6:	4293      	cmp	r3, r2
24056db8:	d045      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056dba:	687b      	ldr	r3, [r7, #4]
24056dbc:	681b      	ldr	r3, [r3, #0]
24056dbe:	4a7c      	ldr	r2, [pc, #496]	; (24056fb0 <HAL_DMA_IRQHandler+0xcec>)
24056dc0:	4293      	cmp	r3, r2
24056dc2:	d040      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056dc4:	687b      	ldr	r3, [r7, #4]
24056dc6:	681b      	ldr	r3, [r3, #0]
24056dc8:	4a7a      	ldr	r2, [pc, #488]	; (24056fb4 <HAL_DMA_IRQHandler+0xcf0>)
24056dca:	4293      	cmp	r3, r2
24056dcc:	d03b      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056dce:	687b      	ldr	r3, [r7, #4]
24056dd0:	681b      	ldr	r3, [r3, #0]
24056dd2:	4a79      	ldr	r2, [pc, #484]	; (24056fb8 <HAL_DMA_IRQHandler+0xcf4>)
24056dd4:	4293      	cmp	r3, r2
24056dd6:	d036      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056dd8:	687b      	ldr	r3, [r7, #4]
24056dda:	681b      	ldr	r3, [r3, #0]
24056ddc:	4a77      	ldr	r2, [pc, #476]	; (24056fbc <HAL_DMA_IRQHandler+0xcf8>)
24056dde:	4293      	cmp	r3, r2
24056de0:	d031      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056de2:	687b      	ldr	r3, [r7, #4]
24056de4:	681b      	ldr	r3, [r3, #0]
24056de6:	4a76      	ldr	r2, [pc, #472]	; (24056fc0 <HAL_DMA_IRQHandler+0xcfc>)
24056de8:	4293      	cmp	r3, r2
24056dea:	d02c      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056dec:	687b      	ldr	r3, [r7, #4]
24056dee:	681b      	ldr	r3, [r3, #0]
24056df0:	4a74      	ldr	r2, [pc, #464]	; (24056fc4 <HAL_DMA_IRQHandler+0xd00>)
24056df2:	4293      	cmp	r3, r2
24056df4:	d027      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056df6:	687b      	ldr	r3, [r7, #4]
24056df8:	681b      	ldr	r3, [r3, #0]
24056dfa:	4a73      	ldr	r2, [pc, #460]	; (24056fc8 <HAL_DMA_IRQHandler+0xd04>)
24056dfc:	4293      	cmp	r3, r2
24056dfe:	d022      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056e00:	687b      	ldr	r3, [r7, #4]
24056e02:	681b      	ldr	r3, [r3, #0]
24056e04:	4a71      	ldr	r2, [pc, #452]	; (24056fcc <HAL_DMA_IRQHandler+0xd08>)
24056e06:	4293      	cmp	r3, r2
24056e08:	d01d      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056e0a:	687b      	ldr	r3, [r7, #4]
24056e0c:	681b      	ldr	r3, [r3, #0]
24056e0e:	4a70      	ldr	r2, [pc, #448]	; (24056fd0 <HAL_DMA_IRQHandler+0xd0c>)
24056e10:	4293      	cmp	r3, r2
24056e12:	d018      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056e14:	687b      	ldr	r3, [r7, #4]
24056e16:	681b      	ldr	r3, [r3, #0]
24056e18:	4a6e      	ldr	r2, [pc, #440]	; (24056fd4 <HAL_DMA_IRQHandler+0xd10>)
24056e1a:	4293      	cmp	r3, r2
24056e1c:	d013      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056e1e:	687b      	ldr	r3, [r7, #4]
24056e20:	681b      	ldr	r3, [r3, #0]
24056e22:	4a6d      	ldr	r2, [pc, #436]	; (24056fd8 <HAL_DMA_IRQHandler+0xd14>)
24056e24:	4293      	cmp	r3, r2
24056e26:	d00e      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056e28:	687b      	ldr	r3, [r7, #4]
24056e2a:	681b      	ldr	r3, [r3, #0]
24056e2c:	4a6b      	ldr	r2, [pc, #428]	; (24056fdc <HAL_DMA_IRQHandler+0xd18>)
24056e2e:	4293      	cmp	r3, r2
24056e30:	d009      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056e32:	687b      	ldr	r3, [r7, #4]
24056e34:	681b      	ldr	r3, [r3, #0]
24056e36:	4a6a      	ldr	r2, [pc, #424]	; (24056fe0 <HAL_DMA_IRQHandler+0xd1c>)
24056e38:	4293      	cmp	r3, r2
24056e3a:	d004      	beq.n	24056e46 <HAL_DMA_IRQHandler+0xb82>
24056e3c:	687b      	ldr	r3, [r7, #4]
24056e3e:	681b      	ldr	r3, [r3, #0]
24056e40:	4a68      	ldr	r2, [pc, #416]	; (24056fe4 <HAL_DMA_IRQHandler+0xd20>)
24056e42:	4293      	cmp	r3, r2
24056e44:	d108      	bne.n	24056e58 <HAL_DMA_IRQHandler+0xb94>
24056e46:	687b      	ldr	r3, [r7, #4]
24056e48:	681b      	ldr	r3, [r3, #0]
24056e4a:	681a      	ldr	r2, [r3, #0]
24056e4c:	687b      	ldr	r3, [r7, #4]
24056e4e:	681b      	ldr	r3, [r3, #0]
24056e50:	f022 0208 	bic.w	r2, r2, #8
24056e54:	601a      	str	r2, [r3, #0]
24056e56:	e007      	b.n	24056e68 <HAL_DMA_IRQHandler+0xba4>
24056e58:	687b      	ldr	r3, [r7, #4]
24056e5a:	681b      	ldr	r3, [r3, #0]
24056e5c:	681a      	ldr	r2, [r3, #0]
24056e5e:	687b      	ldr	r3, [r7, #4]
24056e60:	681b      	ldr	r3, [r3, #0]
24056e62:	f022 0204 	bic.w	r2, r2, #4
24056e66:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
24056e68:	687b      	ldr	r3, [r7, #4]
24056e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056e6c:	2b00      	cmp	r3, #0
24056e6e:	f000 8165 	beq.w	2405713c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
24056e72:	687b      	ldr	r3, [r7, #4]
24056e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056e76:	6878      	ldr	r0, [r7, #4]
24056e78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056e7a:	e15f      	b.n	2405713c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24056e7c:	687b      	ldr	r3, [r7, #4]
24056e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056e80:	f003 031f 	and.w	r3, r3, #31
24056e84:	2202      	movs	r2, #2
24056e86:	409a      	lsls	r2, r3
24056e88:	697b      	ldr	r3, [r7, #20]
24056e8a:	4013      	ands	r3, r2
24056e8c:	2b00      	cmp	r3, #0
24056e8e:	f000 80c5 	beq.w	2405701c <HAL_DMA_IRQHandler+0xd58>
24056e92:	693b      	ldr	r3, [r7, #16]
24056e94:	f003 0302 	and.w	r3, r3, #2
24056e98:	2b00      	cmp	r3, #0
24056e9a:	f000 80bf 	beq.w	2405701c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24056e9e:	687b      	ldr	r3, [r7, #4]
24056ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056ea2:	f003 031f 	and.w	r3, r3, #31
24056ea6:	2202      	movs	r2, #2
24056ea8:	409a      	lsls	r2, r3
24056eaa:	69fb      	ldr	r3, [r7, #28]
24056eac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056eae:	693b      	ldr	r3, [r7, #16]
24056eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24056eb4:	2b00      	cmp	r3, #0
24056eb6:	d018      	beq.n	24056eea <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24056eb8:	693b      	ldr	r3, [r7, #16]
24056eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24056ebe:	2b00      	cmp	r3, #0
24056ec0:	d109      	bne.n	24056ed6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
24056ec2:	687b      	ldr	r3, [r7, #4]
24056ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24056ec6:	2b00      	cmp	r3, #0
24056ec8:	f000 813a 	beq.w	24057140 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
24056ecc:	687b      	ldr	r3, [r7, #4]
24056ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24056ed0:	6878      	ldr	r0, [r7, #4]
24056ed2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056ed4:	e134      	b.n	24057140 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
24056ed6:	687b      	ldr	r3, [r7, #4]
24056ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056eda:	2b00      	cmp	r3, #0
24056edc:	f000 8130 	beq.w	24057140 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
24056ee0:	687b      	ldr	r3, [r7, #4]
24056ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056ee4:	6878      	ldr	r0, [r7, #4]
24056ee6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056ee8:	e12a      	b.n	24057140 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24056eea:	693b      	ldr	r3, [r7, #16]
24056eec:	f003 0320 	and.w	r3, r3, #32
24056ef0:	2b00      	cmp	r3, #0
24056ef2:	f040 8089 	bne.w	24057008 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24056ef6:	687b      	ldr	r3, [r7, #4]
24056ef8:	681b      	ldr	r3, [r3, #0]
24056efa:	4a2b      	ldr	r2, [pc, #172]	; (24056fa8 <HAL_DMA_IRQHandler+0xce4>)
24056efc:	4293      	cmp	r3, r2
24056efe:	d04a      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f00:	687b      	ldr	r3, [r7, #4]
24056f02:	681b      	ldr	r3, [r3, #0]
24056f04:	4a29      	ldr	r2, [pc, #164]	; (24056fac <HAL_DMA_IRQHandler+0xce8>)
24056f06:	4293      	cmp	r3, r2
24056f08:	d045      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f0a:	687b      	ldr	r3, [r7, #4]
24056f0c:	681b      	ldr	r3, [r3, #0]
24056f0e:	4a28      	ldr	r2, [pc, #160]	; (24056fb0 <HAL_DMA_IRQHandler+0xcec>)
24056f10:	4293      	cmp	r3, r2
24056f12:	d040      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f14:	687b      	ldr	r3, [r7, #4]
24056f16:	681b      	ldr	r3, [r3, #0]
24056f18:	4a26      	ldr	r2, [pc, #152]	; (24056fb4 <HAL_DMA_IRQHandler+0xcf0>)
24056f1a:	4293      	cmp	r3, r2
24056f1c:	d03b      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f1e:	687b      	ldr	r3, [r7, #4]
24056f20:	681b      	ldr	r3, [r3, #0]
24056f22:	4a25      	ldr	r2, [pc, #148]	; (24056fb8 <HAL_DMA_IRQHandler+0xcf4>)
24056f24:	4293      	cmp	r3, r2
24056f26:	d036      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f28:	687b      	ldr	r3, [r7, #4]
24056f2a:	681b      	ldr	r3, [r3, #0]
24056f2c:	4a23      	ldr	r2, [pc, #140]	; (24056fbc <HAL_DMA_IRQHandler+0xcf8>)
24056f2e:	4293      	cmp	r3, r2
24056f30:	d031      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f32:	687b      	ldr	r3, [r7, #4]
24056f34:	681b      	ldr	r3, [r3, #0]
24056f36:	4a22      	ldr	r2, [pc, #136]	; (24056fc0 <HAL_DMA_IRQHandler+0xcfc>)
24056f38:	4293      	cmp	r3, r2
24056f3a:	d02c      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f3c:	687b      	ldr	r3, [r7, #4]
24056f3e:	681b      	ldr	r3, [r3, #0]
24056f40:	4a20      	ldr	r2, [pc, #128]	; (24056fc4 <HAL_DMA_IRQHandler+0xd00>)
24056f42:	4293      	cmp	r3, r2
24056f44:	d027      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f46:	687b      	ldr	r3, [r7, #4]
24056f48:	681b      	ldr	r3, [r3, #0]
24056f4a:	4a1f      	ldr	r2, [pc, #124]	; (24056fc8 <HAL_DMA_IRQHandler+0xd04>)
24056f4c:	4293      	cmp	r3, r2
24056f4e:	d022      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f50:	687b      	ldr	r3, [r7, #4]
24056f52:	681b      	ldr	r3, [r3, #0]
24056f54:	4a1d      	ldr	r2, [pc, #116]	; (24056fcc <HAL_DMA_IRQHandler+0xd08>)
24056f56:	4293      	cmp	r3, r2
24056f58:	d01d      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f5a:	687b      	ldr	r3, [r7, #4]
24056f5c:	681b      	ldr	r3, [r3, #0]
24056f5e:	4a1c      	ldr	r2, [pc, #112]	; (24056fd0 <HAL_DMA_IRQHandler+0xd0c>)
24056f60:	4293      	cmp	r3, r2
24056f62:	d018      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f64:	687b      	ldr	r3, [r7, #4]
24056f66:	681b      	ldr	r3, [r3, #0]
24056f68:	4a1a      	ldr	r2, [pc, #104]	; (24056fd4 <HAL_DMA_IRQHandler+0xd10>)
24056f6a:	4293      	cmp	r3, r2
24056f6c:	d013      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f6e:	687b      	ldr	r3, [r7, #4]
24056f70:	681b      	ldr	r3, [r3, #0]
24056f72:	4a19      	ldr	r2, [pc, #100]	; (24056fd8 <HAL_DMA_IRQHandler+0xd14>)
24056f74:	4293      	cmp	r3, r2
24056f76:	d00e      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f78:	687b      	ldr	r3, [r7, #4]
24056f7a:	681b      	ldr	r3, [r3, #0]
24056f7c:	4a17      	ldr	r2, [pc, #92]	; (24056fdc <HAL_DMA_IRQHandler+0xd18>)
24056f7e:	4293      	cmp	r3, r2
24056f80:	d009      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f82:	687b      	ldr	r3, [r7, #4]
24056f84:	681b      	ldr	r3, [r3, #0]
24056f86:	4a16      	ldr	r2, [pc, #88]	; (24056fe0 <HAL_DMA_IRQHandler+0xd1c>)
24056f88:	4293      	cmp	r3, r2
24056f8a:	d004      	beq.n	24056f96 <HAL_DMA_IRQHandler+0xcd2>
24056f8c:	687b      	ldr	r3, [r7, #4]
24056f8e:	681b      	ldr	r3, [r3, #0]
24056f90:	4a14      	ldr	r2, [pc, #80]	; (24056fe4 <HAL_DMA_IRQHandler+0xd20>)
24056f92:	4293      	cmp	r3, r2
24056f94:	d128      	bne.n	24056fe8 <HAL_DMA_IRQHandler+0xd24>
24056f96:	687b      	ldr	r3, [r7, #4]
24056f98:	681b      	ldr	r3, [r3, #0]
24056f9a:	681a      	ldr	r2, [r3, #0]
24056f9c:	687b      	ldr	r3, [r7, #4]
24056f9e:	681b      	ldr	r3, [r3, #0]
24056fa0:	f022 0214 	bic.w	r2, r2, #20
24056fa4:	601a      	str	r2, [r3, #0]
24056fa6:	e027      	b.n	24056ff8 <HAL_DMA_IRQHandler+0xd34>
24056fa8:	40020010 	.word	0x40020010
24056fac:	40020028 	.word	0x40020028
24056fb0:	40020040 	.word	0x40020040
24056fb4:	40020058 	.word	0x40020058
24056fb8:	40020070 	.word	0x40020070
24056fbc:	40020088 	.word	0x40020088
24056fc0:	400200a0 	.word	0x400200a0
24056fc4:	400200b8 	.word	0x400200b8
24056fc8:	40020410 	.word	0x40020410
24056fcc:	40020428 	.word	0x40020428
24056fd0:	40020440 	.word	0x40020440
24056fd4:	40020458 	.word	0x40020458
24056fd8:	40020470 	.word	0x40020470
24056fdc:	40020488 	.word	0x40020488
24056fe0:	400204a0 	.word	0x400204a0
24056fe4:	400204b8 	.word	0x400204b8
24056fe8:	687b      	ldr	r3, [r7, #4]
24056fea:	681b      	ldr	r3, [r3, #0]
24056fec:	681a      	ldr	r2, [r3, #0]
24056fee:	687b      	ldr	r3, [r7, #4]
24056ff0:	681b      	ldr	r3, [r3, #0]
24056ff2:	f022 020a 	bic.w	r2, r2, #10
24056ff6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24056ff8:	687b      	ldr	r3, [r7, #4]
24056ffa:	2201      	movs	r2, #1
24056ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24057000:	687b      	ldr	r3, [r7, #4]
24057002:	2200      	movs	r2, #0
24057004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
24057008:	687b      	ldr	r3, [r7, #4]
2405700a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405700c:	2b00      	cmp	r3, #0
2405700e:	f000 8097 	beq.w	24057140 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
24057012:	687b      	ldr	r3, [r7, #4]
24057014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24057016:	6878      	ldr	r0, [r7, #4]
24057018:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405701a:	e091      	b.n	24057140 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
2405701c:	687b      	ldr	r3, [r7, #4]
2405701e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057020:	f003 031f 	and.w	r3, r3, #31
24057024:	2208      	movs	r2, #8
24057026:	409a      	lsls	r2, r3
24057028:	697b      	ldr	r3, [r7, #20]
2405702a:	4013      	ands	r3, r2
2405702c:	2b00      	cmp	r3, #0
2405702e:	f000 8088 	beq.w	24057142 <HAL_DMA_IRQHandler+0xe7e>
24057032:	693b      	ldr	r3, [r7, #16]
24057034:	f003 0308 	and.w	r3, r3, #8
24057038:	2b00      	cmp	r3, #0
2405703a:	f000 8082 	beq.w	24057142 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
2405703e:	687b      	ldr	r3, [r7, #4]
24057040:	681b      	ldr	r3, [r3, #0]
24057042:	4a41      	ldr	r2, [pc, #260]	; (24057148 <HAL_DMA_IRQHandler+0xe84>)
24057044:	4293      	cmp	r3, r2
24057046:	d04a      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
24057048:	687b      	ldr	r3, [r7, #4]
2405704a:	681b      	ldr	r3, [r3, #0]
2405704c:	4a3f      	ldr	r2, [pc, #252]	; (2405714c <HAL_DMA_IRQHandler+0xe88>)
2405704e:	4293      	cmp	r3, r2
24057050:	d045      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
24057052:	687b      	ldr	r3, [r7, #4]
24057054:	681b      	ldr	r3, [r3, #0]
24057056:	4a3e      	ldr	r2, [pc, #248]	; (24057150 <HAL_DMA_IRQHandler+0xe8c>)
24057058:	4293      	cmp	r3, r2
2405705a:	d040      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
2405705c:	687b      	ldr	r3, [r7, #4]
2405705e:	681b      	ldr	r3, [r3, #0]
24057060:	4a3c      	ldr	r2, [pc, #240]	; (24057154 <HAL_DMA_IRQHandler+0xe90>)
24057062:	4293      	cmp	r3, r2
24057064:	d03b      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
24057066:	687b      	ldr	r3, [r7, #4]
24057068:	681b      	ldr	r3, [r3, #0]
2405706a:	4a3b      	ldr	r2, [pc, #236]	; (24057158 <HAL_DMA_IRQHandler+0xe94>)
2405706c:	4293      	cmp	r3, r2
2405706e:	d036      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
24057070:	687b      	ldr	r3, [r7, #4]
24057072:	681b      	ldr	r3, [r3, #0]
24057074:	4a39      	ldr	r2, [pc, #228]	; (2405715c <HAL_DMA_IRQHandler+0xe98>)
24057076:	4293      	cmp	r3, r2
24057078:	d031      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
2405707a:	687b      	ldr	r3, [r7, #4]
2405707c:	681b      	ldr	r3, [r3, #0]
2405707e:	4a38      	ldr	r2, [pc, #224]	; (24057160 <HAL_DMA_IRQHandler+0xe9c>)
24057080:	4293      	cmp	r3, r2
24057082:	d02c      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
24057084:	687b      	ldr	r3, [r7, #4]
24057086:	681b      	ldr	r3, [r3, #0]
24057088:	4a36      	ldr	r2, [pc, #216]	; (24057164 <HAL_DMA_IRQHandler+0xea0>)
2405708a:	4293      	cmp	r3, r2
2405708c:	d027      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
2405708e:	687b      	ldr	r3, [r7, #4]
24057090:	681b      	ldr	r3, [r3, #0]
24057092:	4a35      	ldr	r2, [pc, #212]	; (24057168 <HAL_DMA_IRQHandler+0xea4>)
24057094:	4293      	cmp	r3, r2
24057096:	d022      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
24057098:	687b      	ldr	r3, [r7, #4]
2405709a:	681b      	ldr	r3, [r3, #0]
2405709c:	4a33      	ldr	r2, [pc, #204]	; (2405716c <HAL_DMA_IRQHandler+0xea8>)
2405709e:	4293      	cmp	r3, r2
240570a0:	d01d      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
240570a2:	687b      	ldr	r3, [r7, #4]
240570a4:	681b      	ldr	r3, [r3, #0]
240570a6:	4a32      	ldr	r2, [pc, #200]	; (24057170 <HAL_DMA_IRQHandler+0xeac>)
240570a8:	4293      	cmp	r3, r2
240570aa:	d018      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
240570ac:	687b      	ldr	r3, [r7, #4]
240570ae:	681b      	ldr	r3, [r3, #0]
240570b0:	4a30      	ldr	r2, [pc, #192]	; (24057174 <HAL_DMA_IRQHandler+0xeb0>)
240570b2:	4293      	cmp	r3, r2
240570b4:	d013      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
240570b6:	687b      	ldr	r3, [r7, #4]
240570b8:	681b      	ldr	r3, [r3, #0]
240570ba:	4a2f      	ldr	r2, [pc, #188]	; (24057178 <HAL_DMA_IRQHandler+0xeb4>)
240570bc:	4293      	cmp	r3, r2
240570be:	d00e      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
240570c0:	687b      	ldr	r3, [r7, #4]
240570c2:	681b      	ldr	r3, [r3, #0]
240570c4:	4a2d      	ldr	r2, [pc, #180]	; (2405717c <HAL_DMA_IRQHandler+0xeb8>)
240570c6:	4293      	cmp	r3, r2
240570c8:	d009      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
240570ca:	687b      	ldr	r3, [r7, #4]
240570cc:	681b      	ldr	r3, [r3, #0]
240570ce:	4a2c      	ldr	r2, [pc, #176]	; (24057180 <HAL_DMA_IRQHandler+0xebc>)
240570d0:	4293      	cmp	r3, r2
240570d2:	d004      	beq.n	240570de <HAL_DMA_IRQHandler+0xe1a>
240570d4:	687b      	ldr	r3, [r7, #4]
240570d6:	681b      	ldr	r3, [r3, #0]
240570d8:	4a2a      	ldr	r2, [pc, #168]	; (24057184 <HAL_DMA_IRQHandler+0xec0>)
240570da:	4293      	cmp	r3, r2
240570dc:	d108      	bne.n	240570f0 <HAL_DMA_IRQHandler+0xe2c>
240570de:	687b      	ldr	r3, [r7, #4]
240570e0:	681b      	ldr	r3, [r3, #0]
240570e2:	681a      	ldr	r2, [r3, #0]
240570e4:	687b      	ldr	r3, [r7, #4]
240570e6:	681b      	ldr	r3, [r3, #0]
240570e8:	f022 021c 	bic.w	r2, r2, #28
240570ec:	601a      	str	r2, [r3, #0]
240570ee:	e007      	b.n	24057100 <HAL_DMA_IRQHandler+0xe3c>
240570f0:	687b      	ldr	r3, [r7, #4]
240570f2:	681b      	ldr	r3, [r3, #0]
240570f4:	681a      	ldr	r2, [r3, #0]
240570f6:	687b      	ldr	r3, [r7, #4]
240570f8:	681b      	ldr	r3, [r3, #0]
240570fa:	f022 020e 	bic.w	r2, r2, #14
240570fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24057100:	687b      	ldr	r3, [r7, #4]
24057102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057104:	f003 031f 	and.w	r3, r3, #31
24057108:	2201      	movs	r2, #1
2405710a:	409a      	lsls	r2, r3
2405710c:	69fb      	ldr	r3, [r7, #28]
2405710e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
24057110:	687b      	ldr	r3, [r7, #4]
24057112:	2201      	movs	r2, #1
24057114:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24057116:	687b      	ldr	r3, [r7, #4]
24057118:	2201      	movs	r2, #1
2405711a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
2405711e:	687b      	ldr	r3, [r7, #4]
24057120:	2200      	movs	r2, #0
24057122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
24057126:	687b      	ldr	r3, [r7, #4]
24057128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405712a:	2b00      	cmp	r3, #0
2405712c:	d009      	beq.n	24057142 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
2405712e:	687b      	ldr	r3, [r7, #4]
24057130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24057132:	6878      	ldr	r0, [r7, #4]
24057134:	4798      	blx	r3
24057136:	e004      	b.n	24057142 <HAL_DMA_IRQHandler+0xe7e>
          return;
24057138:	bf00      	nop
2405713a:	e002      	b.n	24057142 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405713c:	bf00      	nop
2405713e:	e000      	b.n	24057142 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24057140:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
24057142:	3728      	adds	r7, #40	; 0x28
24057144:	46bd      	mov	sp, r7
24057146:	bd80      	pop	{r7, pc}
24057148:	40020010 	.word	0x40020010
2405714c:	40020028 	.word	0x40020028
24057150:	40020040 	.word	0x40020040
24057154:	40020058 	.word	0x40020058
24057158:	40020070 	.word	0x40020070
2405715c:	40020088 	.word	0x40020088
24057160:	400200a0 	.word	0x400200a0
24057164:	400200b8 	.word	0x400200b8
24057168:	40020410 	.word	0x40020410
2405716c:	40020428 	.word	0x40020428
24057170:	40020440 	.word	0x40020440
24057174:	40020458 	.word	0x40020458
24057178:	40020470 	.word	0x40020470
2405717c:	40020488 	.word	0x40020488
24057180:	400204a0 	.word	0x400204a0
24057184:	400204b8 	.word	0x400204b8

24057188 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
24057188:	b480      	push	{r7}
2405718a:	b083      	sub	sp, #12
2405718c:	af00      	add	r7, sp, #0
2405718e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
24057190:	687b      	ldr	r3, [r7, #4]
24057192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
24057194:	4618      	mov	r0, r3
24057196:	370c      	adds	r7, #12
24057198:	46bd      	mov	sp, r7
2405719a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405719e:	4770      	bx	lr

240571a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
240571a0:	b480      	push	{r7}
240571a2:	b087      	sub	sp, #28
240571a4:	af00      	add	r7, sp, #0
240571a6:	60f8      	str	r0, [r7, #12]
240571a8:	60b9      	str	r1, [r7, #8]
240571aa:	607a      	str	r2, [r7, #4]
240571ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240571ae:	68fb      	ldr	r3, [r7, #12]
240571b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240571b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240571b4:	68fb      	ldr	r3, [r7, #12]
240571b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240571b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240571ba:	68fb      	ldr	r3, [r7, #12]
240571bc:	681b      	ldr	r3, [r3, #0]
240571be:	4a7f      	ldr	r2, [pc, #508]	; (240573bc <DMA_SetConfig+0x21c>)
240571c0:	4293      	cmp	r3, r2
240571c2:	d072      	beq.n	240572aa <DMA_SetConfig+0x10a>
240571c4:	68fb      	ldr	r3, [r7, #12]
240571c6:	681b      	ldr	r3, [r3, #0]
240571c8:	4a7d      	ldr	r2, [pc, #500]	; (240573c0 <DMA_SetConfig+0x220>)
240571ca:	4293      	cmp	r3, r2
240571cc:	d06d      	beq.n	240572aa <DMA_SetConfig+0x10a>
240571ce:	68fb      	ldr	r3, [r7, #12]
240571d0:	681b      	ldr	r3, [r3, #0]
240571d2:	4a7c      	ldr	r2, [pc, #496]	; (240573c4 <DMA_SetConfig+0x224>)
240571d4:	4293      	cmp	r3, r2
240571d6:	d068      	beq.n	240572aa <DMA_SetConfig+0x10a>
240571d8:	68fb      	ldr	r3, [r7, #12]
240571da:	681b      	ldr	r3, [r3, #0]
240571dc:	4a7a      	ldr	r2, [pc, #488]	; (240573c8 <DMA_SetConfig+0x228>)
240571de:	4293      	cmp	r3, r2
240571e0:	d063      	beq.n	240572aa <DMA_SetConfig+0x10a>
240571e2:	68fb      	ldr	r3, [r7, #12]
240571e4:	681b      	ldr	r3, [r3, #0]
240571e6:	4a79      	ldr	r2, [pc, #484]	; (240573cc <DMA_SetConfig+0x22c>)
240571e8:	4293      	cmp	r3, r2
240571ea:	d05e      	beq.n	240572aa <DMA_SetConfig+0x10a>
240571ec:	68fb      	ldr	r3, [r7, #12]
240571ee:	681b      	ldr	r3, [r3, #0]
240571f0:	4a77      	ldr	r2, [pc, #476]	; (240573d0 <DMA_SetConfig+0x230>)
240571f2:	4293      	cmp	r3, r2
240571f4:	d059      	beq.n	240572aa <DMA_SetConfig+0x10a>
240571f6:	68fb      	ldr	r3, [r7, #12]
240571f8:	681b      	ldr	r3, [r3, #0]
240571fa:	4a76      	ldr	r2, [pc, #472]	; (240573d4 <DMA_SetConfig+0x234>)
240571fc:	4293      	cmp	r3, r2
240571fe:	d054      	beq.n	240572aa <DMA_SetConfig+0x10a>
24057200:	68fb      	ldr	r3, [r7, #12]
24057202:	681b      	ldr	r3, [r3, #0]
24057204:	4a74      	ldr	r2, [pc, #464]	; (240573d8 <DMA_SetConfig+0x238>)
24057206:	4293      	cmp	r3, r2
24057208:	d04f      	beq.n	240572aa <DMA_SetConfig+0x10a>
2405720a:	68fb      	ldr	r3, [r7, #12]
2405720c:	681b      	ldr	r3, [r3, #0]
2405720e:	4a73      	ldr	r2, [pc, #460]	; (240573dc <DMA_SetConfig+0x23c>)
24057210:	4293      	cmp	r3, r2
24057212:	d04a      	beq.n	240572aa <DMA_SetConfig+0x10a>
24057214:	68fb      	ldr	r3, [r7, #12]
24057216:	681b      	ldr	r3, [r3, #0]
24057218:	4a71      	ldr	r2, [pc, #452]	; (240573e0 <DMA_SetConfig+0x240>)
2405721a:	4293      	cmp	r3, r2
2405721c:	d045      	beq.n	240572aa <DMA_SetConfig+0x10a>
2405721e:	68fb      	ldr	r3, [r7, #12]
24057220:	681b      	ldr	r3, [r3, #0]
24057222:	4a70      	ldr	r2, [pc, #448]	; (240573e4 <DMA_SetConfig+0x244>)
24057224:	4293      	cmp	r3, r2
24057226:	d040      	beq.n	240572aa <DMA_SetConfig+0x10a>
24057228:	68fb      	ldr	r3, [r7, #12]
2405722a:	681b      	ldr	r3, [r3, #0]
2405722c:	4a6e      	ldr	r2, [pc, #440]	; (240573e8 <DMA_SetConfig+0x248>)
2405722e:	4293      	cmp	r3, r2
24057230:	d03b      	beq.n	240572aa <DMA_SetConfig+0x10a>
24057232:	68fb      	ldr	r3, [r7, #12]
24057234:	681b      	ldr	r3, [r3, #0]
24057236:	4a6d      	ldr	r2, [pc, #436]	; (240573ec <DMA_SetConfig+0x24c>)
24057238:	4293      	cmp	r3, r2
2405723a:	d036      	beq.n	240572aa <DMA_SetConfig+0x10a>
2405723c:	68fb      	ldr	r3, [r7, #12]
2405723e:	681b      	ldr	r3, [r3, #0]
24057240:	4a6b      	ldr	r2, [pc, #428]	; (240573f0 <DMA_SetConfig+0x250>)
24057242:	4293      	cmp	r3, r2
24057244:	d031      	beq.n	240572aa <DMA_SetConfig+0x10a>
24057246:	68fb      	ldr	r3, [r7, #12]
24057248:	681b      	ldr	r3, [r3, #0]
2405724a:	4a6a      	ldr	r2, [pc, #424]	; (240573f4 <DMA_SetConfig+0x254>)
2405724c:	4293      	cmp	r3, r2
2405724e:	d02c      	beq.n	240572aa <DMA_SetConfig+0x10a>
24057250:	68fb      	ldr	r3, [r7, #12]
24057252:	681b      	ldr	r3, [r3, #0]
24057254:	4a68      	ldr	r2, [pc, #416]	; (240573f8 <DMA_SetConfig+0x258>)
24057256:	4293      	cmp	r3, r2
24057258:	d027      	beq.n	240572aa <DMA_SetConfig+0x10a>
2405725a:	68fb      	ldr	r3, [r7, #12]
2405725c:	681b      	ldr	r3, [r3, #0]
2405725e:	4a67      	ldr	r2, [pc, #412]	; (240573fc <DMA_SetConfig+0x25c>)
24057260:	4293      	cmp	r3, r2
24057262:	d022      	beq.n	240572aa <DMA_SetConfig+0x10a>
24057264:	68fb      	ldr	r3, [r7, #12]
24057266:	681b      	ldr	r3, [r3, #0]
24057268:	4a65      	ldr	r2, [pc, #404]	; (24057400 <DMA_SetConfig+0x260>)
2405726a:	4293      	cmp	r3, r2
2405726c:	d01d      	beq.n	240572aa <DMA_SetConfig+0x10a>
2405726e:	68fb      	ldr	r3, [r7, #12]
24057270:	681b      	ldr	r3, [r3, #0]
24057272:	4a64      	ldr	r2, [pc, #400]	; (24057404 <DMA_SetConfig+0x264>)
24057274:	4293      	cmp	r3, r2
24057276:	d018      	beq.n	240572aa <DMA_SetConfig+0x10a>
24057278:	68fb      	ldr	r3, [r7, #12]
2405727a:	681b      	ldr	r3, [r3, #0]
2405727c:	4a62      	ldr	r2, [pc, #392]	; (24057408 <DMA_SetConfig+0x268>)
2405727e:	4293      	cmp	r3, r2
24057280:	d013      	beq.n	240572aa <DMA_SetConfig+0x10a>
24057282:	68fb      	ldr	r3, [r7, #12]
24057284:	681b      	ldr	r3, [r3, #0]
24057286:	4a61      	ldr	r2, [pc, #388]	; (2405740c <DMA_SetConfig+0x26c>)
24057288:	4293      	cmp	r3, r2
2405728a:	d00e      	beq.n	240572aa <DMA_SetConfig+0x10a>
2405728c:	68fb      	ldr	r3, [r7, #12]
2405728e:	681b      	ldr	r3, [r3, #0]
24057290:	4a5f      	ldr	r2, [pc, #380]	; (24057410 <DMA_SetConfig+0x270>)
24057292:	4293      	cmp	r3, r2
24057294:	d009      	beq.n	240572aa <DMA_SetConfig+0x10a>
24057296:	68fb      	ldr	r3, [r7, #12]
24057298:	681b      	ldr	r3, [r3, #0]
2405729a:	4a5e      	ldr	r2, [pc, #376]	; (24057414 <DMA_SetConfig+0x274>)
2405729c:	4293      	cmp	r3, r2
2405729e:	d004      	beq.n	240572aa <DMA_SetConfig+0x10a>
240572a0:	68fb      	ldr	r3, [r7, #12]
240572a2:	681b      	ldr	r3, [r3, #0]
240572a4:	4a5c      	ldr	r2, [pc, #368]	; (24057418 <DMA_SetConfig+0x278>)
240572a6:	4293      	cmp	r3, r2
240572a8:	d101      	bne.n	240572ae <DMA_SetConfig+0x10e>
240572aa:	2301      	movs	r3, #1
240572ac:	e000      	b.n	240572b0 <DMA_SetConfig+0x110>
240572ae:	2300      	movs	r3, #0
240572b0:	2b00      	cmp	r3, #0
240572b2:	d00d      	beq.n	240572d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240572b4:	68fb      	ldr	r3, [r7, #12]
240572b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240572b8:	68fa      	ldr	r2, [r7, #12]
240572ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
240572bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
240572be:	68fb      	ldr	r3, [r7, #12]
240572c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240572c2:	2b00      	cmp	r3, #0
240572c4:	d004      	beq.n	240572d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240572c6:	68fb      	ldr	r3, [r7, #12]
240572c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240572ca:	68fa      	ldr	r2, [r7, #12]
240572cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
240572ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240572d0:	68fb      	ldr	r3, [r7, #12]
240572d2:	681b      	ldr	r3, [r3, #0]
240572d4:	4a39      	ldr	r2, [pc, #228]	; (240573bc <DMA_SetConfig+0x21c>)
240572d6:	4293      	cmp	r3, r2
240572d8:	d04a      	beq.n	24057370 <DMA_SetConfig+0x1d0>
240572da:	68fb      	ldr	r3, [r7, #12]
240572dc:	681b      	ldr	r3, [r3, #0]
240572de:	4a38      	ldr	r2, [pc, #224]	; (240573c0 <DMA_SetConfig+0x220>)
240572e0:	4293      	cmp	r3, r2
240572e2:	d045      	beq.n	24057370 <DMA_SetConfig+0x1d0>
240572e4:	68fb      	ldr	r3, [r7, #12]
240572e6:	681b      	ldr	r3, [r3, #0]
240572e8:	4a36      	ldr	r2, [pc, #216]	; (240573c4 <DMA_SetConfig+0x224>)
240572ea:	4293      	cmp	r3, r2
240572ec:	d040      	beq.n	24057370 <DMA_SetConfig+0x1d0>
240572ee:	68fb      	ldr	r3, [r7, #12]
240572f0:	681b      	ldr	r3, [r3, #0]
240572f2:	4a35      	ldr	r2, [pc, #212]	; (240573c8 <DMA_SetConfig+0x228>)
240572f4:	4293      	cmp	r3, r2
240572f6:	d03b      	beq.n	24057370 <DMA_SetConfig+0x1d0>
240572f8:	68fb      	ldr	r3, [r7, #12]
240572fa:	681b      	ldr	r3, [r3, #0]
240572fc:	4a33      	ldr	r2, [pc, #204]	; (240573cc <DMA_SetConfig+0x22c>)
240572fe:	4293      	cmp	r3, r2
24057300:	d036      	beq.n	24057370 <DMA_SetConfig+0x1d0>
24057302:	68fb      	ldr	r3, [r7, #12]
24057304:	681b      	ldr	r3, [r3, #0]
24057306:	4a32      	ldr	r2, [pc, #200]	; (240573d0 <DMA_SetConfig+0x230>)
24057308:	4293      	cmp	r3, r2
2405730a:	d031      	beq.n	24057370 <DMA_SetConfig+0x1d0>
2405730c:	68fb      	ldr	r3, [r7, #12]
2405730e:	681b      	ldr	r3, [r3, #0]
24057310:	4a30      	ldr	r2, [pc, #192]	; (240573d4 <DMA_SetConfig+0x234>)
24057312:	4293      	cmp	r3, r2
24057314:	d02c      	beq.n	24057370 <DMA_SetConfig+0x1d0>
24057316:	68fb      	ldr	r3, [r7, #12]
24057318:	681b      	ldr	r3, [r3, #0]
2405731a:	4a2f      	ldr	r2, [pc, #188]	; (240573d8 <DMA_SetConfig+0x238>)
2405731c:	4293      	cmp	r3, r2
2405731e:	d027      	beq.n	24057370 <DMA_SetConfig+0x1d0>
24057320:	68fb      	ldr	r3, [r7, #12]
24057322:	681b      	ldr	r3, [r3, #0]
24057324:	4a2d      	ldr	r2, [pc, #180]	; (240573dc <DMA_SetConfig+0x23c>)
24057326:	4293      	cmp	r3, r2
24057328:	d022      	beq.n	24057370 <DMA_SetConfig+0x1d0>
2405732a:	68fb      	ldr	r3, [r7, #12]
2405732c:	681b      	ldr	r3, [r3, #0]
2405732e:	4a2c      	ldr	r2, [pc, #176]	; (240573e0 <DMA_SetConfig+0x240>)
24057330:	4293      	cmp	r3, r2
24057332:	d01d      	beq.n	24057370 <DMA_SetConfig+0x1d0>
24057334:	68fb      	ldr	r3, [r7, #12]
24057336:	681b      	ldr	r3, [r3, #0]
24057338:	4a2a      	ldr	r2, [pc, #168]	; (240573e4 <DMA_SetConfig+0x244>)
2405733a:	4293      	cmp	r3, r2
2405733c:	d018      	beq.n	24057370 <DMA_SetConfig+0x1d0>
2405733e:	68fb      	ldr	r3, [r7, #12]
24057340:	681b      	ldr	r3, [r3, #0]
24057342:	4a29      	ldr	r2, [pc, #164]	; (240573e8 <DMA_SetConfig+0x248>)
24057344:	4293      	cmp	r3, r2
24057346:	d013      	beq.n	24057370 <DMA_SetConfig+0x1d0>
24057348:	68fb      	ldr	r3, [r7, #12]
2405734a:	681b      	ldr	r3, [r3, #0]
2405734c:	4a27      	ldr	r2, [pc, #156]	; (240573ec <DMA_SetConfig+0x24c>)
2405734e:	4293      	cmp	r3, r2
24057350:	d00e      	beq.n	24057370 <DMA_SetConfig+0x1d0>
24057352:	68fb      	ldr	r3, [r7, #12]
24057354:	681b      	ldr	r3, [r3, #0]
24057356:	4a26      	ldr	r2, [pc, #152]	; (240573f0 <DMA_SetConfig+0x250>)
24057358:	4293      	cmp	r3, r2
2405735a:	d009      	beq.n	24057370 <DMA_SetConfig+0x1d0>
2405735c:	68fb      	ldr	r3, [r7, #12]
2405735e:	681b      	ldr	r3, [r3, #0]
24057360:	4a24      	ldr	r2, [pc, #144]	; (240573f4 <DMA_SetConfig+0x254>)
24057362:	4293      	cmp	r3, r2
24057364:	d004      	beq.n	24057370 <DMA_SetConfig+0x1d0>
24057366:	68fb      	ldr	r3, [r7, #12]
24057368:	681b      	ldr	r3, [r3, #0]
2405736a:	4a23      	ldr	r2, [pc, #140]	; (240573f8 <DMA_SetConfig+0x258>)
2405736c:	4293      	cmp	r3, r2
2405736e:	d101      	bne.n	24057374 <DMA_SetConfig+0x1d4>
24057370:	2301      	movs	r3, #1
24057372:	e000      	b.n	24057376 <DMA_SetConfig+0x1d6>
24057374:	2300      	movs	r3, #0
24057376:	2b00      	cmp	r3, #0
24057378:	d059      	beq.n	2405742e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2405737a:	68fb      	ldr	r3, [r7, #12]
2405737c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405737e:	f003 031f 	and.w	r3, r3, #31
24057382:	223f      	movs	r2, #63	; 0x3f
24057384:	409a      	lsls	r2, r3
24057386:	697b      	ldr	r3, [r7, #20]
24057388:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
2405738a:	68fb      	ldr	r3, [r7, #12]
2405738c:	681b      	ldr	r3, [r3, #0]
2405738e:	681a      	ldr	r2, [r3, #0]
24057390:	68fb      	ldr	r3, [r7, #12]
24057392:	681b      	ldr	r3, [r3, #0]
24057394:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24057398:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
2405739a:	68fb      	ldr	r3, [r7, #12]
2405739c:	681b      	ldr	r3, [r3, #0]
2405739e:	683a      	ldr	r2, [r7, #0]
240573a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
240573a2:	68fb      	ldr	r3, [r7, #12]
240573a4:	689b      	ldr	r3, [r3, #8]
240573a6:	2b40      	cmp	r3, #64	; 0x40
240573a8:	d138      	bne.n	2405741c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
240573aa:	68fb      	ldr	r3, [r7, #12]
240573ac:	681b      	ldr	r3, [r3, #0]
240573ae:	687a      	ldr	r2, [r7, #4]
240573b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
240573b2:	68fb      	ldr	r3, [r7, #12]
240573b4:	681b      	ldr	r3, [r3, #0]
240573b6:	68ba      	ldr	r2, [r7, #8]
240573b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
240573ba:	e0ae      	b.n	2405751a <DMA_SetConfig+0x37a>
240573bc:	40020010 	.word	0x40020010
240573c0:	40020028 	.word	0x40020028
240573c4:	40020040 	.word	0x40020040
240573c8:	40020058 	.word	0x40020058
240573cc:	40020070 	.word	0x40020070
240573d0:	40020088 	.word	0x40020088
240573d4:	400200a0 	.word	0x400200a0
240573d8:	400200b8 	.word	0x400200b8
240573dc:	40020410 	.word	0x40020410
240573e0:	40020428 	.word	0x40020428
240573e4:	40020440 	.word	0x40020440
240573e8:	40020458 	.word	0x40020458
240573ec:	40020470 	.word	0x40020470
240573f0:	40020488 	.word	0x40020488
240573f4:	400204a0 	.word	0x400204a0
240573f8:	400204b8 	.word	0x400204b8
240573fc:	58025408 	.word	0x58025408
24057400:	5802541c 	.word	0x5802541c
24057404:	58025430 	.word	0x58025430
24057408:	58025444 	.word	0x58025444
2405740c:	58025458 	.word	0x58025458
24057410:	5802546c 	.word	0x5802546c
24057414:	58025480 	.word	0x58025480
24057418:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
2405741c:	68fb      	ldr	r3, [r7, #12]
2405741e:	681b      	ldr	r3, [r3, #0]
24057420:	68ba      	ldr	r2, [r7, #8]
24057422:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
24057424:	68fb      	ldr	r3, [r7, #12]
24057426:	681b      	ldr	r3, [r3, #0]
24057428:	687a      	ldr	r2, [r7, #4]
2405742a:	60da      	str	r2, [r3, #12]
}
2405742c:	e075      	b.n	2405751a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2405742e:	68fb      	ldr	r3, [r7, #12]
24057430:	681b      	ldr	r3, [r3, #0]
24057432:	4a3d      	ldr	r2, [pc, #244]	; (24057528 <DMA_SetConfig+0x388>)
24057434:	4293      	cmp	r3, r2
24057436:	d04a      	beq.n	240574ce <DMA_SetConfig+0x32e>
24057438:	68fb      	ldr	r3, [r7, #12]
2405743a:	681b      	ldr	r3, [r3, #0]
2405743c:	4a3b      	ldr	r2, [pc, #236]	; (2405752c <DMA_SetConfig+0x38c>)
2405743e:	4293      	cmp	r3, r2
24057440:	d045      	beq.n	240574ce <DMA_SetConfig+0x32e>
24057442:	68fb      	ldr	r3, [r7, #12]
24057444:	681b      	ldr	r3, [r3, #0]
24057446:	4a3a      	ldr	r2, [pc, #232]	; (24057530 <DMA_SetConfig+0x390>)
24057448:	4293      	cmp	r3, r2
2405744a:	d040      	beq.n	240574ce <DMA_SetConfig+0x32e>
2405744c:	68fb      	ldr	r3, [r7, #12]
2405744e:	681b      	ldr	r3, [r3, #0]
24057450:	4a38      	ldr	r2, [pc, #224]	; (24057534 <DMA_SetConfig+0x394>)
24057452:	4293      	cmp	r3, r2
24057454:	d03b      	beq.n	240574ce <DMA_SetConfig+0x32e>
24057456:	68fb      	ldr	r3, [r7, #12]
24057458:	681b      	ldr	r3, [r3, #0]
2405745a:	4a37      	ldr	r2, [pc, #220]	; (24057538 <DMA_SetConfig+0x398>)
2405745c:	4293      	cmp	r3, r2
2405745e:	d036      	beq.n	240574ce <DMA_SetConfig+0x32e>
24057460:	68fb      	ldr	r3, [r7, #12]
24057462:	681b      	ldr	r3, [r3, #0]
24057464:	4a35      	ldr	r2, [pc, #212]	; (2405753c <DMA_SetConfig+0x39c>)
24057466:	4293      	cmp	r3, r2
24057468:	d031      	beq.n	240574ce <DMA_SetConfig+0x32e>
2405746a:	68fb      	ldr	r3, [r7, #12]
2405746c:	681b      	ldr	r3, [r3, #0]
2405746e:	4a34      	ldr	r2, [pc, #208]	; (24057540 <DMA_SetConfig+0x3a0>)
24057470:	4293      	cmp	r3, r2
24057472:	d02c      	beq.n	240574ce <DMA_SetConfig+0x32e>
24057474:	68fb      	ldr	r3, [r7, #12]
24057476:	681b      	ldr	r3, [r3, #0]
24057478:	4a32      	ldr	r2, [pc, #200]	; (24057544 <DMA_SetConfig+0x3a4>)
2405747a:	4293      	cmp	r3, r2
2405747c:	d027      	beq.n	240574ce <DMA_SetConfig+0x32e>
2405747e:	68fb      	ldr	r3, [r7, #12]
24057480:	681b      	ldr	r3, [r3, #0]
24057482:	4a31      	ldr	r2, [pc, #196]	; (24057548 <DMA_SetConfig+0x3a8>)
24057484:	4293      	cmp	r3, r2
24057486:	d022      	beq.n	240574ce <DMA_SetConfig+0x32e>
24057488:	68fb      	ldr	r3, [r7, #12]
2405748a:	681b      	ldr	r3, [r3, #0]
2405748c:	4a2f      	ldr	r2, [pc, #188]	; (2405754c <DMA_SetConfig+0x3ac>)
2405748e:	4293      	cmp	r3, r2
24057490:	d01d      	beq.n	240574ce <DMA_SetConfig+0x32e>
24057492:	68fb      	ldr	r3, [r7, #12]
24057494:	681b      	ldr	r3, [r3, #0]
24057496:	4a2e      	ldr	r2, [pc, #184]	; (24057550 <DMA_SetConfig+0x3b0>)
24057498:	4293      	cmp	r3, r2
2405749a:	d018      	beq.n	240574ce <DMA_SetConfig+0x32e>
2405749c:	68fb      	ldr	r3, [r7, #12]
2405749e:	681b      	ldr	r3, [r3, #0]
240574a0:	4a2c      	ldr	r2, [pc, #176]	; (24057554 <DMA_SetConfig+0x3b4>)
240574a2:	4293      	cmp	r3, r2
240574a4:	d013      	beq.n	240574ce <DMA_SetConfig+0x32e>
240574a6:	68fb      	ldr	r3, [r7, #12]
240574a8:	681b      	ldr	r3, [r3, #0]
240574aa:	4a2b      	ldr	r2, [pc, #172]	; (24057558 <DMA_SetConfig+0x3b8>)
240574ac:	4293      	cmp	r3, r2
240574ae:	d00e      	beq.n	240574ce <DMA_SetConfig+0x32e>
240574b0:	68fb      	ldr	r3, [r7, #12]
240574b2:	681b      	ldr	r3, [r3, #0]
240574b4:	4a29      	ldr	r2, [pc, #164]	; (2405755c <DMA_SetConfig+0x3bc>)
240574b6:	4293      	cmp	r3, r2
240574b8:	d009      	beq.n	240574ce <DMA_SetConfig+0x32e>
240574ba:	68fb      	ldr	r3, [r7, #12]
240574bc:	681b      	ldr	r3, [r3, #0]
240574be:	4a28      	ldr	r2, [pc, #160]	; (24057560 <DMA_SetConfig+0x3c0>)
240574c0:	4293      	cmp	r3, r2
240574c2:	d004      	beq.n	240574ce <DMA_SetConfig+0x32e>
240574c4:	68fb      	ldr	r3, [r7, #12]
240574c6:	681b      	ldr	r3, [r3, #0]
240574c8:	4a26      	ldr	r2, [pc, #152]	; (24057564 <DMA_SetConfig+0x3c4>)
240574ca:	4293      	cmp	r3, r2
240574cc:	d101      	bne.n	240574d2 <DMA_SetConfig+0x332>
240574ce:	2301      	movs	r3, #1
240574d0:	e000      	b.n	240574d4 <DMA_SetConfig+0x334>
240574d2:	2300      	movs	r3, #0
240574d4:	2b00      	cmp	r3, #0
240574d6:	d020      	beq.n	2405751a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240574d8:	68fb      	ldr	r3, [r7, #12]
240574da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240574dc:	f003 031f 	and.w	r3, r3, #31
240574e0:	2201      	movs	r2, #1
240574e2:	409a      	lsls	r2, r3
240574e4:	693b      	ldr	r3, [r7, #16]
240574e6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
240574e8:	68fb      	ldr	r3, [r7, #12]
240574ea:	681b      	ldr	r3, [r3, #0]
240574ec:	683a      	ldr	r2, [r7, #0]
240574ee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
240574f0:	68fb      	ldr	r3, [r7, #12]
240574f2:	689b      	ldr	r3, [r3, #8]
240574f4:	2b40      	cmp	r3, #64	; 0x40
240574f6:	d108      	bne.n	2405750a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
240574f8:	68fb      	ldr	r3, [r7, #12]
240574fa:	681b      	ldr	r3, [r3, #0]
240574fc:	687a      	ldr	r2, [r7, #4]
240574fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24057500:	68fb      	ldr	r3, [r7, #12]
24057502:	681b      	ldr	r3, [r3, #0]
24057504:	68ba      	ldr	r2, [r7, #8]
24057506:	60da      	str	r2, [r3, #12]
}
24057508:	e007      	b.n	2405751a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
2405750a:	68fb      	ldr	r3, [r7, #12]
2405750c:	681b      	ldr	r3, [r3, #0]
2405750e:	68ba      	ldr	r2, [r7, #8]
24057510:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24057512:	68fb      	ldr	r3, [r7, #12]
24057514:	681b      	ldr	r3, [r3, #0]
24057516:	687a      	ldr	r2, [r7, #4]
24057518:	60da      	str	r2, [r3, #12]
}
2405751a:	bf00      	nop
2405751c:	371c      	adds	r7, #28
2405751e:	46bd      	mov	sp, r7
24057520:	f85d 7b04 	ldr.w	r7, [sp], #4
24057524:	4770      	bx	lr
24057526:	bf00      	nop
24057528:	48022c08 	.word	0x48022c08
2405752c:	48022c1c 	.word	0x48022c1c
24057530:	48022c30 	.word	0x48022c30
24057534:	48022c44 	.word	0x48022c44
24057538:	48022c58 	.word	0x48022c58
2405753c:	48022c6c 	.word	0x48022c6c
24057540:	48022c80 	.word	0x48022c80
24057544:	48022c94 	.word	0x48022c94
24057548:	58025408 	.word	0x58025408
2405754c:	5802541c 	.word	0x5802541c
24057550:	58025430 	.word	0x58025430
24057554:	58025444 	.word	0x58025444
24057558:	58025458 	.word	0x58025458
2405755c:	5802546c 	.word	0x5802546c
24057560:	58025480 	.word	0x58025480
24057564:	58025494 	.word	0x58025494

24057568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
24057568:	b480      	push	{r7}
2405756a:	b085      	sub	sp, #20
2405756c:	af00      	add	r7, sp, #0
2405756e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24057570:	687b      	ldr	r3, [r7, #4]
24057572:	681b      	ldr	r3, [r3, #0]
24057574:	4a42      	ldr	r2, [pc, #264]	; (24057680 <DMA_CalcBaseAndBitshift+0x118>)
24057576:	4293      	cmp	r3, r2
24057578:	d04a      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
2405757a:	687b      	ldr	r3, [r7, #4]
2405757c:	681b      	ldr	r3, [r3, #0]
2405757e:	4a41      	ldr	r2, [pc, #260]	; (24057684 <DMA_CalcBaseAndBitshift+0x11c>)
24057580:	4293      	cmp	r3, r2
24057582:	d045      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
24057584:	687b      	ldr	r3, [r7, #4]
24057586:	681b      	ldr	r3, [r3, #0]
24057588:	4a3f      	ldr	r2, [pc, #252]	; (24057688 <DMA_CalcBaseAndBitshift+0x120>)
2405758a:	4293      	cmp	r3, r2
2405758c:	d040      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
2405758e:	687b      	ldr	r3, [r7, #4]
24057590:	681b      	ldr	r3, [r3, #0]
24057592:	4a3e      	ldr	r2, [pc, #248]	; (2405768c <DMA_CalcBaseAndBitshift+0x124>)
24057594:	4293      	cmp	r3, r2
24057596:	d03b      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
24057598:	687b      	ldr	r3, [r7, #4]
2405759a:	681b      	ldr	r3, [r3, #0]
2405759c:	4a3c      	ldr	r2, [pc, #240]	; (24057690 <DMA_CalcBaseAndBitshift+0x128>)
2405759e:	4293      	cmp	r3, r2
240575a0:	d036      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
240575a2:	687b      	ldr	r3, [r7, #4]
240575a4:	681b      	ldr	r3, [r3, #0]
240575a6:	4a3b      	ldr	r2, [pc, #236]	; (24057694 <DMA_CalcBaseAndBitshift+0x12c>)
240575a8:	4293      	cmp	r3, r2
240575aa:	d031      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
240575ac:	687b      	ldr	r3, [r7, #4]
240575ae:	681b      	ldr	r3, [r3, #0]
240575b0:	4a39      	ldr	r2, [pc, #228]	; (24057698 <DMA_CalcBaseAndBitshift+0x130>)
240575b2:	4293      	cmp	r3, r2
240575b4:	d02c      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
240575b6:	687b      	ldr	r3, [r7, #4]
240575b8:	681b      	ldr	r3, [r3, #0]
240575ba:	4a38      	ldr	r2, [pc, #224]	; (2405769c <DMA_CalcBaseAndBitshift+0x134>)
240575bc:	4293      	cmp	r3, r2
240575be:	d027      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
240575c0:	687b      	ldr	r3, [r7, #4]
240575c2:	681b      	ldr	r3, [r3, #0]
240575c4:	4a36      	ldr	r2, [pc, #216]	; (240576a0 <DMA_CalcBaseAndBitshift+0x138>)
240575c6:	4293      	cmp	r3, r2
240575c8:	d022      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
240575ca:	687b      	ldr	r3, [r7, #4]
240575cc:	681b      	ldr	r3, [r3, #0]
240575ce:	4a35      	ldr	r2, [pc, #212]	; (240576a4 <DMA_CalcBaseAndBitshift+0x13c>)
240575d0:	4293      	cmp	r3, r2
240575d2:	d01d      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
240575d4:	687b      	ldr	r3, [r7, #4]
240575d6:	681b      	ldr	r3, [r3, #0]
240575d8:	4a33      	ldr	r2, [pc, #204]	; (240576a8 <DMA_CalcBaseAndBitshift+0x140>)
240575da:	4293      	cmp	r3, r2
240575dc:	d018      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
240575de:	687b      	ldr	r3, [r7, #4]
240575e0:	681b      	ldr	r3, [r3, #0]
240575e2:	4a32      	ldr	r2, [pc, #200]	; (240576ac <DMA_CalcBaseAndBitshift+0x144>)
240575e4:	4293      	cmp	r3, r2
240575e6:	d013      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
240575e8:	687b      	ldr	r3, [r7, #4]
240575ea:	681b      	ldr	r3, [r3, #0]
240575ec:	4a30      	ldr	r2, [pc, #192]	; (240576b0 <DMA_CalcBaseAndBitshift+0x148>)
240575ee:	4293      	cmp	r3, r2
240575f0:	d00e      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
240575f2:	687b      	ldr	r3, [r7, #4]
240575f4:	681b      	ldr	r3, [r3, #0]
240575f6:	4a2f      	ldr	r2, [pc, #188]	; (240576b4 <DMA_CalcBaseAndBitshift+0x14c>)
240575f8:	4293      	cmp	r3, r2
240575fa:	d009      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
240575fc:	687b      	ldr	r3, [r7, #4]
240575fe:	681b      	ldr	r3, [r3, #0]
24057600:	4a2d      	ldr	r2, [pc, #180]	; (240576b8 <DMA_CalcBaseAndBitshift+0x150>)
24057602:	4293      	cmp	r3, r2
24057604:	d004      	beq.n	24057610 <DMA_CalcBaseAndBitshift+0xa8>
24057606:	687b      	ldr	r3, [r7, #4]
24057608:	681b      	ldr	r3, [r3, #0]
2405760a:	4a2c      	ldr	r2, [pc, #176]	; (240576bc <DMA_CalcBaseAndBitshift+0x154>)
2405760c:	4293      	cmp	r3, r2
2405760e:	d101      	bne.n	24057614 <DMA_CalcBaseAndBitshift+0xac>
24057610:	2301      	movs	r3, #1
24057612:	e000      	b.n	24057616 <DMA_CalcBaseAndBitshift+0xae>
24057614:	2300      	movs	r3, #0
24057616:	2b00      	cmp	r3, #0
24057618:	d024      	beq.n	24057664 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
2405761a:	687b      	ldr	r3, [r7, #4]
2405761c:	681b      	ldr	r3, [r3, #0]
2405761e:	b2db      	uxtb	r3, r3
24057620:	3b10      	subs	r3, #16
24057622:	4a27      	ldr	r2, [pc, #156]	; (240576c0 <DMA_CalcBaseAndBitshift+0x158>)
24057624:	fba2 2303 	umull	r2, r3, r2, r3
24057628:	091b      	lsrs	r3, r3, #4
2405762a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
2405762c:	68fb      	ldr	r3, [r7, #12]
2405762e:	f003 0307 	and.w	r3, r3, #7
24057632:	4a24      	ldr	r2, [pc, #144]	; (240576c4 <DMA_CalcBaseAndBitshift+0x15c>)
24057634:	5cd3      	ldrb	r3, [r2, r3]
24057636:	461a      	mov	r2, r3
24057638:	687b      	ldr	r3, [r7, #4]
2405763a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
2405763c:	68fb      	ldr	r3, [r7, #12]
2405763e:	2b03      	cmp	r3, #3
24057640:	d908      	bls.n	24057654 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24057642:	687b      	ldr	r3, [r7, #4]
24057644:	681b      	ldr	r3, [r3, #0]
24057646:	461a      	mov	r2, r3
24057648:	4b1f      	ldr	r3, [pc, #124]	; (240576c8 <DMA_CalcBaseAndBitshift+0x160>)
2405764a:	4013      	ands	r3, r2
2405764c:	1d1a      	adds	r2, r3, #4
2405764e:	687b      	ldr	r3, [r7, #4]
24057650:	659a      	str	r2, [r3, #88]	; 0x58
24057652:	e00d      	b.n	24057670 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24057654:	687b      	ldr	r3, [r7, #4]
24057656:	681b      	ldr	r3, [r3, #0]
24057658:	461a      	mov	r2, r3
2405765a:	4b1b      	ldr	r3, [pc, #108]	; (240576c8 <DMA_CalcBaseAndBitshift+0x160>)
2405765c:	4013      	ands	r3, r2
2405765e:	687a      	ldr	r2, [r7, #4]
24057660:	6593      	str	r3, [r2, #88]	; 0x58
24057662:	e005      	b.n	24057670 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24057664:	687b      	ldr	r3, [r7, #4]
24057666:	681b      	ldr	r3, [r3, #0]
24057668:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
2405766c:	687b      	ldr	r3, [r7, #4]
2405766e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
24057670:	687b      	ldr	r3, [r7, #4]
24057672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
24057674:	4618      	mov	r0, r3
24057676:	3714      	adds	r7, #20
24057678:	46bd      	mov	sp, r7
2405767a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405767e:	4770      	bx	lr
24057680:	40020010 	.word	0x40020010
24057684:	40020028 	.word	0x40020028
24057688:	40020040 	.word	0x40020040
2405768c:	40020058 	.word	0x40020058
24057690:	40020070 	.word	0x40020070
24057694:	40020088 	.word	0x40020088
24057698:	400200a0 	.word	0x400200a0
2405769c:	400200b8 	.word	0x400200b8
240576a0:	40020410 	.word	0x40020410
240576a4:	40020428 	.word	0x40020428
240576a8:	40020440 	.word	0x40020440
240576ac:	40020458 	.word	0x40020458
240576b0:	40020470 	.word	0x40020470
240576b4:	40020488 	.word	0x40020488
240576b8:	400204a0 	.word	0x400204a0
240576bc:	400204b8 	.word	0x400204b8
240576c0:	aaaaaaab 	.word	0xaaaaaaab
240576c4:	24061600 	.word	0x24061600
240576c8:	fffffc00 	.word	0xfffffc00

240576cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
240576cc:	b480      	push	{r7}
240576ce:	b085      	sub	sp, #20
240576d0:	af00      	add	r7, sp, #0
240576d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240576d4:	2300      	movs	r3, #0
240576d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
240576d8:	687b      	ldr	r3, [r7, #4]
240576da:	699b      	ldr	r3, [r3, #24]
240576dc:	2b00      	cmp	r3, #0
240576de:	d120      	bne.n	24057722 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
240576e0:	687b      	ldr	r3, [r7, #4]
240576e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240576e4:	2b03      	cmp	r3, #3
240576e6:	d858      	bhi.n	2405779a <DMA_CheckFifoParam+0xce>
240576e8:	a201      	add	r2, pc, #4	; (adr r2, 240576f0 <DMA_CheckFifoParam+0x24>)
240576ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240576ee:	bf00      	nop
240576f0:	24057701 	.word	0x24057701
240576f4:	24057713 	.word	0x24057713
240576f8:	24057701 	.word	0x24057701
240576fc:	2405779b 	.word	0x2405779b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24057700:	687b      	ldr	r3, [r7, #4]
24057702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24057704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24057708:	2b00      	cmp	r3, #0
2405770a:	d048      	beq.n	2405779e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
2405770c:	2301      	movs	r3, #1
2405770e:	73fb      	strb	r3, [r7, #15]
        }
        break;
24057710:	e045      	b.n	2405779e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24057712:	687b      	ldr	r3, [r7, #4]
24057714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24057716:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
2405771a:	d142      	bne.n	240577a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
2405771c:	2301      	movs	r3, #1
2405771e:	73fb      	strb	r3, [r7, #15]
        }
        break;
24057720:	e03f      	b.n	240577a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24057722:	687b      	ldr	r3, [r7, #4]
24057724:	699b      	ldr	r3, [r3, #24]
24057726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405772a:	d123      	bne.n	24057774 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
2405772c:	687b      	ldr	r3, [r7, #4]
2405772e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24057730:	2b03      	cmp	r3, #3
24057732:	d838      	bhi.n	240577a6 <DMA_CheckFifoParam+0xda>
24057734:	a201      	add	r2, pc, #4	; (adr r2, 2405773c <DMA_CheckFifoParam+0x70>)
24057736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405773a:	bf00      	nop
2405773c:	2405774d 	.word	0x2405774d
24057740:	24057753 	.word	0x24057753
24057744:	2405774d 	.word	0x2405774d
24057748:	24057765 	.word	0x24057765
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
2405774c:	2301      	movs	r3, #1
2405774e:	73fb      	strb	r3, [r7, #15]
        break;
24057750:	e030      	b.n	240577b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24057752:	687b      	ldr	r3, [r7, #4]
24057754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24057756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2405775a:	2b00      	cmp	r3, #0
2405775c:	d025      	beq.n	240577aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
2405775e:	2301      	movs	r3, #1
24057760:	73fb      	strb	r3, [r7, #15]
        }
        break;
24057762:	e022      	b.n	240577aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24057764:	687b      	ldr	r3, [r7, #4]
24057766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24057768:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
2405776c:	d11f      	bne.n	240577ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
2405776e:	2301      	movs	r3, #1
24057770:	73fb      	strb	r3, [r7, #15]
        }
        break;
24057772:	e01c      	b.n	240577ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
24057774:	687b      	ldr	r3, [r7, #4]
24057776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24057778:	2b02      	cmp	r3, #2
2405777a:	d902      	bls.n	24057782 <DMA_CheckFifoParam+0xb6>
2405777c:	2b03      	cmp	r3, #3
2405777e:	d003      	beq.n	24057788 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
24057780:	e018      	b.n	240577b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
24057782:	2301      	movs	r3, #1
24057784:	73fb      	strb	r3, [r7, #15]
        break;
24057786:	e015      	b.n	240577b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24057788:	687b      	ldr	r3, [r7, #4]
2405778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405778c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24057790:	2b00      	cmp	r3, #0
24057792:	d00e      	beq.n	240577b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
24057794:	2301      	movs	r3, #1
24057796:	73fb      	strb	r3, [r7, #15]
    break;
24057798:	e00b      	b.n	240577b2 <DMA_CheckFifoParam+0xe6>
        break;
2405779a:	bf00      	nop
2405779c:	e00a      	b.n	240577b4 <DMA_CheckFifoParam+0xe8>
        break;
2405779e:	bf00      	nop
240577a0:	e008      	b.n	240577b4 <DMA_CheckFifoParam+0xe8>
        break;
240577a2:	bf00      	nop
240577a4:	e006      	b.n	240577b4 <DMA_CheckFifoParam+0xe8>
        break;
240577a6:	bf00      	nop
240577a8:	e004      	b.n	240577b4 <DMA_CheckFifoParam+0xe8>
        break;
240577aa:	bf00      	nop
240577ac:	e002      	b.n	240577b4 <DMA_CheckFifoParam+0xe8>
        break;
240577ae:	bf00      	nop
240577b0:	e000      	b.n	240577b4 <DMA_CheckFifoParam+0xe8>
    break;
240577b2:	bf00      	nop
    }
  }

  return status;
240577b4:	7bfb      	ldrb	r3, [r7, #15]
}
240577b6:	4618      	mov	r0, r3
240577b8:	3714      	adds	r7, #20
240577ba:	46bd      	mov	sp, r7
240577bc:	f85d 7b04 	ldr.w	r7, [sp], #4
240577c0:	4770      	bx	lr
240577c2:	bf00      	nop

240577c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
240577c4:	b480      	push	{r7}
240577c6:	b085      	sub	sp, #20
240577c8:	af00      	add	r7, sp, #0
240577ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
240577cc:	687b      	ldr	r3, [r7, #4]
240577ce:	681b      	ldr	r3, [r3, #0]
240577d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240577d2:	687b      	ldr	r3, [r7, #4]
240577d4:	681b      	ldr	r3, [r3, #0]
240577d6:	4a38      	ldr	r2, [pc, #224]	; (240578b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
240577d8:	4293      	cmp	r3, r2
240577da:	d022      	beq.n	24057822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240577dc:	687b      	ldr	r3, [r7, #4]
240577de:	681b      	ldr	r3, [r3, #0]
240577e0:	4a36      	ldr	r2, [pc, #216]	; (240578bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
240577e2:	4293      	cmp	r3, r2
240577e4:	d01d      	beq.n	24057822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240577e6:	687b      	ldr	r3, [r7, #4]
240577e8:	681b      	ldr	r3, [r3, #0]
240577ea:	4a35      	ldr	r2, [pc, #212]	; (240578c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
240577ec:	4293      	cmp	r3, r2
240577ee:	d018      	beq.n	24057822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240577f0:	687b      	ldr	r3, [r7, #4]
240577f2:	681b      	ldr	r3, [r3, #0]
240577f4:	4a33      	ldr	r2, [pc, #204]	; (240578c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
240577f6:	4293      	cmp	r3, r2
240577f8:	d013      	beq.n	24057822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240577fa:	687b      	ldr	r3, [r7, #4]
240577fc:	681b      	ldr	r3, [r3, #0]
240577fe:	4a32      	ldr	r2, [pc, #200]	; (240578c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
24057800:	4293      	cmp	r3, r2
24057802:	d00e      	beq.n	24057822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24057804:	687b      	ldr	r3, [r7, #4]
24057806:	681b      	ldr	r3, [r3, #0]
24057808:	4a30      	ldr	r2, [pc, #192]	; (240578cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
2405780a:	4293      	cmp	r3, r2
2405780c:	d009      	beq.n	24057822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2405780e:	687b      	ldr	r3, [r7, #4]
24057810:	681b      	ldr	r3, [r3, #0]
24057812:	4a2f      	ldr	r2, [pc, #188]	; (240578d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
24057814:	4293      	cmp	r3, r2
24057816:	d004      	beq.n	24057822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24057818:	687b      	ldr	r3, [r7, #4]
2405781a:	681b      	ldr	r3, [r3, #0]
2405781c:	4a2d      	ldr	r2, [pc, #180]	; (240578d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
2405781e:	4293      	cmp	r3, r2
24057820:	d101      	bne.n	24057826 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
24057822:	2301      	movs	r3, #1
24057824:	e000      	b.n	24057828 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
24057826:	2300      	movs	r3, #0
24057828:	2b00      	cmp	r3, #0
2405782a:	d01a      	beq.n	24057862 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
2405782c:	687b      	ldr	r3, [r7, #4]
2405782e:	681b      	ldr	r3, [r3, #0]
24057830:	b2db      	uxtb	r3, r3
24057832:	3b08      	subs	r3, #8
24057834:	4a28      	ldr	r2, [pc, #160]	; (240578d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
24057836:	fba2 2303 	umull	r2, r3, r2, r3
2405783a:	091b      	lsrs	r3, r3, #4
2405783c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
2405783e:	68fa      	ldr	r2, [r7, #12]
24057840:	4b26      	ldr	r3, [pc, #152]	; (240578dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
24057842:	4413      	add	r3, r2
24057844:	009b      	lsls	r3, r3, #2
24057846:	461a      	mov	r2, r3
24057848:	687b      	ldr	r3, [r7, #4]
2405784a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
2405784c:	687b      	ldr	r3, [r7, #4]
2405784e:	4a24      	ldr	r2, [pc, #144]	; (240578e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
24057850:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24057852:	68fb      	ldr	r3, [r7, #12]
24057854:	f003 031f 	and.w	r3, r3, #31
24057858:	2201      	movs	r2, #1
2405785a:	409a      	lsls	r2, r3
2405785c:	687b      	ldr	r3, [r7, #4]
2405785e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24057860:	e024      	b.n	240578ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24057862:	687b      	ldr	r3, [r7, #4]
24057864:	681b      	ldr	r3, [r3, #0]
24057866:	b2db      	uxtb	r3, r3
24057868:	3b10      	subs	r3, #16
2405786a:	4a1e      	ldr	r2, [pc, #120]	; (240578e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
2405786c:	fba2 2303 	umull	r2, r3, r2, r3
24057870:	091b      	lsrs	r3, r3, #4
24057872:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24057874:	68bb      	ldr	r3, [r7, #8]
24057876:	4a1c      	ldr	r2, [pc, #112]	; (240578e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
24057878:	4293      	cmp	r3, r2
2405787a:	d806      	bhi.n	2405788a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
2405787c:	68bb      	ldr	r3, [r7, #8]
2405787e:	4a1b      	ldr	r2, [pc, #108]	; (240578ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
24057880:	4293      	cmp	r3, r2
24057882:	d902      	bls.n	2405788a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
24057884:	68fb      	ldr	r3, [r7, #12]
24057886:	3308      	adds	r3, #8
24057888:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
2405788a:	68fa      	ldr	r2, [r7, #12]
2405788c:	4b18      	ldr	r3, [pc, #96]	; (240578f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
2405788e:	4413      	add	r3, r2
24057890:	009b      	lsls	r3, r3, #2
24057892:	461a      	mov	r2, r3
24057894:	687b      	ldr	r3, [r7, #4]
24057896:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24057898:	687b      	ldr	r3, [r7, #4]
2405789a:	4a16      	ldr	r2, [pc, #88]	; (240578f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
2405789c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
2405789e:	68fb      	ldr	r3, [r7, #12]
240578a0:	f003 031f 	and.w	r3, r3, #31
240578a4:	2201      	movs	r2, #1
240578a6:	409a      	lsls	r2, r3
240578a8:	687b      	ldr	r3, [r7, #4]
240578aa:	669a      	str	r2, [r3, #104]	; 0x68
}
240578ac:	bf00      	nop
240578ae:	3714      	adds	r7, #20
240578b0:	46bd      	mov	sp, r7
240578b2:	f85d 7b04 	ldr.w	r7, [sp], #4
240578b6:	4770      	bx	lr
240578b8:	58025408 	.word	0x58025408
240578bc:	5802541c 	.word	0x5802541c
240578c0:	58025430 	.word	0x58025430
240578c4:	58025444 	.word	0x58025444
240578c8:	58025458 	.word	0x58025458
240578cc:	5802546c 	.word	0x5802546c
240578d0:	58025480 	.word	0x58025480
240578d4:	58025494 	.word	0x58025494
240578d8:	cccccccd 	.word	0xcccccccd
240578dc:	16009600 	.word	0x16009600
240578e0:	58025880 	.word	0x58025880
240578e4:	aaaaaaab 	.word	0xaaaaaaab
240578e8:	400204b8 	.word	0x400204b8
240578ec:	4002040f 	.word	0x4002040f
240578f0:	10008200 	.word	0x10008200
240578f4:	40020880 	.word	0x40020880

240578f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
240578f8:	b480      	push	{r7}
240578fa:	b085      	sub	sp, #20
240578fc:	af00      	add	r7, sp, #0
240578fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
24057900:	687b      	ldr	r3, [r7, #4]
24057902:	685b      	ldr	r3, [r3, #4]
24057904:	b2db      	uxtb	r3, r3
24057906:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
24057908:	68fb      	ldr	r3, [r7, #12]
2405790a:	2b00      	cmp	r3, #0
2405790c:	d04a      	beq.n	240579a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
2405790e:	68fb      	ldr	r3, [r7, #12]
24057910:	2b08      	cmp	r3, #8
24057912:	d847      	bhi.n	240579a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24057914:	687b      	ldr	r3, [r7, #4]
24057916:	681b      	ldr	r3, [r3, #0]
24057918:	4a25      	ldr	r2, [pc, #148]	; (240579b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
2405791a:	4293      	cmp	r3, r2
2405791c:	d022      	beq.n	24057964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405791e:	687b      	ldr	r3, [r7, #4]
24057920:	681b      	ldr	r3, [r3, #0]
24057922:	4a24      	ldr	r2, [pc, #144]	; (240579b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
24057924:	4293      	cmp	r3, r2
24057926:	d01d      	beq.n	24057964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24057928:	687b      	ldr	r3, [r7, #4]
2405792a:	681b      	ldr	r3, [r3, #0]
2405792c:	4a22      	ldr	r2, [pc, #136]	; (240579b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
2405792e:	4293      	cmp	r3, r2
24057930:	d018      	beq.n	24057964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24057932:	687b      	ldr	r3, [r7, #4]
24057934:	681b      	ldr	r3, [r3, #0]
24057936:	4a21      	ldr	r2, [pc, #132]	; (240579bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
24057938:	4293      	cmp	r3, r2
2405793a:	d013      	beq.n	24057964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405793c:	687b      	ldr	r3, [r7, #4]
2405793e:	681b      	ldr	r3, [r3, #0]
24057940:	4a1f      	ldr	r2, [pc, #124]	; (240579c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
24057942:	4293      	cmp	r3, r2
24057944:	d00e      	beq.n	24057964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24057946:	687b      	ldr	r3, [r7, #4]
24057948:	681b      	ldr	r3, [r3, #0]
2405794a:	4a1e      	ldr	r2, [pc, #120]	; (240579c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
2405794c:	4293      	cmp	r3, r2
2405794e:	d009      	beq.n	24057964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24057950:	687b      	ldr	r3, [r7, #4]
24057952:	681b      	ldr	r3, [r3, #0]
24057954:	4a1c      	ldr	r2, [pc, #112]	; (240579c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
24057956:	4293      	cmp	r3, r2
24057958:	d004      	beq.n	24057964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405795a:	687b      	ldr	r3, [r7, #4]
2405795c:	681b      	ldr	r3, [r3, #0]
2405795e:	4a1b      	ldr	r2, [pc, #108]	; (240579cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
24057960:	4293      	cmp	r3, r2
24057962:	d101      	bne.n	24057968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
24057964:	2301      	movs	r3, #1
24057966:	e000      	b.n	2405796a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
24057968:	2300      	movs	r3, #0
2405796a:	2b00      	cmp	r3, #0
2405796c:	d00a      	beq.n	24057984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
2405796e:	68fa      	ldr	r2, [r7, #12]
24057970:	4b17      	ldr	r3, [pc, #92]	; (240579d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
24057972:	4413      	add	r3, r2
24057974:	009b      	lsls	r3, r3, #2
24057976:	461a      	mov	r2, r3
24057978:	687b      	ldr	r3, [r7, #4]
2405797a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
2405797c:	687b      	ldr	r3, [r7, #4]
2405797e:	4a15      	ldr	r2, [pc, #84]	; (240579d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
24057980:	671a      	str	r2, [r3, #112]	; 0x70
24057982:	e009      	b.n	24057998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24057984:	68fa      	ldr	r2, [r7, #12]
24057986:	4b14      	ldr	r3, [pc, #80]	; (240579d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
24057988:	4413      	add	r3, r2
2405798a:	009b      	lsls	r3, r3, #2
2405798c:	461a      	mov	r2, r3
2405798e:	687b      	ldr	r3, [r7, #4]
24057990:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24057992:	687b      	ldr	r3, [r7, #4]
24057994:	4a11      	ldr	r2, [pc, #68]	; (240579dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
24057996:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24057998:	68fb      	ldr	r3, [r7, #12]
2405799a:	3b01      	subs	r3, #1
2405799c:	2201      	movs	r2, #1
2405799e:	409a      	lsls	r2, r3
240579a0:	687b      	ldr	r3, [r7, #4]
240579a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
240579a4:	bf00      	nop
240579a6:	3714      	adds	r7, #20
240579a8:	46bd      	mov	sp, r7
240579aa:	f85d 7b04 	ldr.w	r7, [sp], #4
240579ae:	4770      	bx	lr
240579b0:	58025408 	.word	0x58025408
240579b4:	5802541c 	.word	0x5802541c
240579b8:	58025430 	.word	0x58025430
240579bc:	58025444 	.word	0x58025444
240579c0:	58025458 	.word	0x58025458
240579c4:	5802546c 	.word	0x5802546c
240579c8:	58025480 	.word	0x58025480
240579cc:	58025494 	.word	0x58025494
240579d0:	1600963f 	.word	0x1600963f
240579d4:	58025940 	.word	0x58025940
240579d8:	1000823f 	.word	0x1000823f
240579dc:	40020940 	.word	0x40020940

240579e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
240579e0:	b580      	push	{r7, lr}
240579e2:	b082      	sub	sp, #8
240579e4:	af00      	add	r7, sp, #0
240579e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
240579e8:	687b      	ldr	r3, [r7, #4]
240579ea:	2b00      	cmp	r3, #0
240579ec:	d101      	bne.n	240579f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
240579ee:	2301      	movs	r3, #1
240579f0:	e04f      	b.n	24057a92 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
240579f2:	687b      	ldr	r3, [r7, #4]
240579f4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
240579f8:	b2db      	uxtb	r3, r3
240579fa:	2b00      	cmp	r3, #0
240579fc:	d106      	bne.n	24057a0c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
240579fe:	687b      	ldr	r3, [r7, #4]
24057a00:	2200      	movs	r2, #0
24057a02:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
24057a06:	6878      	ldr	r0, [r7, #4]
24057a08:	f7fa fb58 	bl	240520bc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
24057a0c:	687b      	ldr	r3, [r7, #4]
24057a0e:	2202      	movs	r2, #2
24057a10:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
24057a14:	687b      	ldr	r3, [r7, #4]
24057a16:	681b      	ldr	r3, [r3, #0]
24057a18:	681a      	ldr	r2, [r3, #0]
24057a1a:	4b20      	ldr	r3, [pc, #128]	; (24057a9c <HAL_DMA2D_Init+0xbc>)
24057a1c:	4013      	ands	r3, r2
24057a1e:	687a      	ldr	r2, [r7, #4]
24057a20:	6851      	ldr	r1, [r2, #4]
24057a22:	687a      	ldr	r2, [r7, #4]
24057a24:	69d2      	ldr	r2, [r2, #28]
24057a26:	4311      	orrs	r1, r2
24057a28:	687a      	ldr	r2, [r7, #4]
24057a2a:	6812      	ldr	r2, [r2, #0]
24057a2c:	430b      	orrs	r3, r1
24057a2e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
24057a30:	687b      	ldr	r3, [r7, #4]
24057a32:	681b      	ldr	r3, [r3, #0]
24057a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24057a36:	4b1a      	ldr	r3, [pc, #104]	; (24057aa0 <HAL_DMA2D_Init+0xc0>)
24057a38:	4013      	ands	r3, r2
24057a3a:	687a      	ldr	r2, [r7, #4]
24057a3c:	6891      	ldr	r1, [r2, #8]
24057a3e:	687a      	ldr	r2, [r7, #4]
24057a40:	6992      	ldr	r2, [r2, #24]
24057a42:	4311      	orrs	r1, r2
24057a44:	687a      	ldr	r2, [r7, #4]
24057a46:	6812      	ldr	r2, [r2, #0]
24057a48:	430b      	orrs	r3, r1
24057a4a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
24057a4c:	687b      	ldr	r3, [r7, #4]
24057a4e:	681b      	ldr	r3, [r3, #0]
24057a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
24057a52:	4b14      	ldr	r3, [pc, #80]	; (24057aa4 <HAL_DMA2D_Init+0xc4>)
24057a54:	4013      	ands	r3, r2
24057a56:	687a      	ldr	r2, [r7, #4]
24057a58:	68d1      	ldr	r1, [r2, #12]
24057a5a:	687a      	ldr	r2, [r7, #4]
24057a5c:	6812      	ldr	r2, [r2, #0]
24057a5e:	430b      	orrs	r3, r1
24057a60:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
24057a62:	687b      	ldr	r3, [r7, #4]
24057a64:	681b      	ldr	r3, [r3, #0]
24057a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24057a68:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
24057a6c:	687b      	ldr	r3, [r7, #4]
24057a6e:	691b      	ldr	r3, [r3, #16]
24057a70:	051a      	lsls	r2, r3, #20
24057a72:	687b      	ldr	r3, [r7, #4]
24057a74:	695b      	ldr	r3, [r3, #20]
24057a76:	055b      	lsls	r3, r3, #21
24057a78:	431a      	orrs	r2, r3
24057a7a:	687b      	ldr	r3, [r7, #4]
24057a7c:	681b      	ldr	r3, [r3, #0]
24057a7e:	430a      	orrs	r2, r1
24057a80:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
24057a82:	687b      	ldr	r3, [r7, #4]
24057a84:	2200      	movs	r2, #0
24057a86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
24057a88:	687b      	ldr	r3, [r7, #4]
24057a8a:	2201      	movs	r2, #1
24057a8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
24057a90:	2300      	movs	r3, #0
}
24057a92:	4618      	mov	r0, r3
24057a94:	3708      	adds	r7, #8
24057a96:	46bd      	mov	sp, r7
24057a98:	bd80      	pop	{r7, pc}
24057a9a:	bf00      	nop
24057a9c:	fff8ffbf 	.word	0xfff8ffbf
24057aa0:	fffffef8 	.word	0xfffffef8
24057aa4:	ffff0000 	.word	0xffff0000

24057aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
24057aa8:	b480      	push	{r7}
24057aaa:	b089      	sub	sp, #36	; 0x24
24057aac:	af00      	add	r7, sp, #0
24057aae:	6078      	str	r0, [r7, #4]
24057ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
24057ab2:	2300      	movs	r3, #0
24057ab4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
24057ab6:	4b89      	ldr	r3, [pc, #548]	; (24057cdc <HAL_GPIO_Init+0x234>)
24057ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24057aba:	e194      	b.n	24057de6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24057abc:	683b      	ldr	r3, [r7, #0]
24057abe:	681a      	ldr	r2, [r3, #0]
24057ac0:	2101      	movs	r1, #1
24057ac2:	69fb      	ldr	r3, [r7, #28]
24057ac4:	fa01 f303 	lsl.w	r3, r1, r3
24057ac8:	4013      	ands	r3, r2
24057aca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
24057acc:	693b      	ldr	r3, [r7, #16]
24057ace:	2b00      	cmp	r3, #0
24057ad0:	f000 8186 	beq.w	24057de0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24057ad4:	683b      	ldr	r3, [r7, #0]
24057ad6:	685b      	ldr	r3, [r3, #4]
24057ad8:	f003 0303 	and.w	r3, r3, #3
24057adc:	2b01      	cmp	r3, #1
24057ade:	d005      	beq.n	24057aec <HAL_GPIO_Init+0x44>
24057ae0:	683b      	ldr	r3, [r7, #0]
24057ae2:	685b      	ldr	r3, [r3, #4]
24057ae4:	f003 0303 	and.w	r3, r3, #3
24057ae8:	2b02      	cmp	r3, #2
24057aea:	d130      	bne.n	24057b4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
24057aec:	687b      	ldr	r3, [r7, #4]
24057aee:	689b      	ldr	r3, [r3, #8]
24057af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24057af2:	69fb      	ldr	r3, [r7, #28]
24057af4:	005b      	lsls	r3, r3, #1
24057af6:	2203      	movs	r2, #3
24057af8:	fa02 f303 	lsl.w	r3, r2, r3
24057afc:	43db      	mvns	r3, r3
24057afe:	69ba      	ldr	r2, [r7, #24]
24057b00:	4013      	ands	r3, r2
24057b02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
24057b04:	683b      	ldr	r3, [r7, #0]
24057b06:	68da      	ldr	r2, [r3, #12]
24057b08:	69fb      	ldr	r3, [r7, #28]
24057b0a:	005b      	lsls	r3, r3, #1
24057b0c:	fa02 f303 	lsl.w	r3, r2, r3
24057b10:	69ba      	ldr	r2, [r7, #24]
24057b12:	4313      	orrs	r3, r2
24057b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
24057b16:	687b      	ldr	r3, [r7, #4]
24057b18:	69ba      	ldr	r2, [r7, #24]
24057b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
24057b1c:	687b      	ldr	r3, [r7, #4]
24057b1e:	685b      	ldr	r3, [r3, #4]
24057b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24057b22:	2201      	movs	r2, #1
24057b24:	69fb      	ldr	r3, [r7, #28]
24057b26:	fa02 f303 	lsl.w	r3, r2, r3
24057b2a:	43db      	mvns	r3, r3
24057b2c:	69ba      	ldr	r2, [r7, #24]
24057b2e:	4013      	ands	r3, r2
24057b30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24057b32:	683b      	ldr	r3, [r7, #0]
24057b34:	685b      	ldr	r3, [r3, #4]
24057b36:	091b      	lsrs	r3, r3, #4
24057b38:	f003 0201 	and.w	r2, r3, #1
24057b3c:	69fb      	ldr	r3, [r7, #28]
24057b3e:	fa02 f303 	lsl.w	r3, r2, r3
24057b42:	69ba      	ldr	r2, [r7, #24]
24057b44:	4313      	orrs	r3, r2
24057b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
24057b48:	687b      	ldr	r3, [r7, #4]
24057b4a:	69ba      	ldr	r2, [r7, #24]
24057b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24057b4e:	683b      	ldr	r3, [r7, #0]
24057b50:	685b      	ldr	r3, [r3, #4]
24057b52:	f003 0303 	and.w	r3, r3, #3
24057b56:	2b03      	cmp	r3, #3
24057b58:	d017      	beq.n	24057b8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
24057b5a:	687b      	ldr	r3, [r7, #4]
24057b5c:	68db      	ldr	r3, [r3, #12]
24057b5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24057b60:	69fb      	ldr	r3, [r7, #28]
24057b62:	005b      	lsls	r3, r3, #1
24057b64:	2203      	movs	r2, #3
24057b66:	fa02 f303 	lsl.w	r3, r2, r3
24057b6a:	43db      	mvns	r3, r3
24057b6c:	69ba      	ldr	r2, [r7, #24]
24057b6e:	4013      	ands	r3, r2
24057b70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
24057b72:	683b      	ldr	r3, [r7, #0]
24057b74:	689a      	ldr	r2, [r3, #8]
24057b76:	69fb      	ldr	r3, [r7, #28]
24057b78:	005b      	lsls	r3, r3, #1
24057b7a:	fa02 f303 	lsl.w	r3, r2, r3
24057b7e:	69ba      	ldr	r2, [r7, #24]
24057b80:	4313      	orrs	r3, r2
24057b82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
24057b84:	687b      	ldr	r3, [r7, #4]
24057b86:	69ba      	ldr	r2, [r7, #24]
24057b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24057b8a:	683b      	ldr	r3, [r7, #0]
24057b8c:	685b      	ldr	r3, [r3, #4]
24057b8e:	f003 0303 	and.w	r3, r3, #3
24057b92:	2b02      	cmp	r3, #2
24057b94:	d123      	bne.n	24057bde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
24057b96:	69fb      	ldr	r3, [r7, #28]
24057b98:	08da      	lsrs	r2, r3, #3
24057b9a:	687b      	ldr	r3, [r7, #4]
24057b9c:	3208      	adds	r2, #8
24057b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
24057ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24057ba4:	69fb      	ldr	r3, [r7, #28]
24057ba6:	f003 0307 	and.w	r3, r3, #7
24057baa:	009b      	lsls	r3, r3, #2
24057bac:	220f      	movs	r2, #15
24057bae:	fa02 f303 	lsl.w	r3, r2, r3
24057bb2:	43db      	mvns	r3, r3
24057bb4:	69ba      	ldr	r2, [r7, #24]
24057bb6:	4013      	ands	r3, r2
24057bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
24057bba:	683b      	ldr	r3, [r7, #0]
24057bbc:	691a      	ldr	r2, [r3, #16]
24057bbe:	69fb      	ldr	r3, [r7, #28]
24057bc0:	f003 0307 	and.w	r3, r3, #7
24057bc4:	009b      	lsls	r3, r3, #2
24057bc6:	fa02 f303 	lsl.w	r3, r2, r3
24057bca:	69ba      	ldr	r2, [r7, #24]
24057bcc:	4313      	orrs	r3, r2
24057bce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
24057bd0:	69fb      	ldr	r3, [r7, #28]
24057bd2:	08da      	lsrs	r2, r3, #3
24057bd4:	687b      	ldr	r3, [r7, #4]
24057bd6:	3208      	adds	r2, #8
24057bd8:	69b9      	ldr	r1, [r7, #24]
24057bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
24057bde:	687b      	ldr	r3, [r7, #4]
24057be0:	681b      	ldr	r3, [r3, #0]
24057be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24057be4:	69fb      	ldr	r3, [r7, #28]
24057be6:	005b      	lsls	r3, r3, #1
24057be8:	2203      	movs	r2, #3
24057bea:	fa02 f303 	lsl.w	r3, r2, r3
24057bee:	43db      	mvns	r3, r3
24057bf0:	69ba      	ldr	r2, [r7, #24]
24057bf2:	4013      	ands	r3, r2
24057bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24057bf6:	683b      	ldr	r3, [r7, #0]
24057bf8:	685b      	ldr	r3, [r3, #4]
24057bfa:	f003 0203 	and.w	r2, r3, #3
24057bfe:	69fb      	ldr	r3, [r7, #28]
24057c00:	005b      	lsls	r3, r3, #1
24057c02:	fa02 f303 	lsl.w	r3, r2, r3
24057c06:	69ba      	ldr	r2, [r7, #24]
24057c08:	4313      	orrs	r3, r2
24057c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
24057c0c:	687b      	ldr	r3, [r7, #4]
24057c0e:	69ba      	ldr	r2, [r7, #24]
24057c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24057c12:	683b      	ldr	r3, [r7, #0]
24057c14:	685b      	ldr	r3, [r3, #4]
24057c16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
24057c1a:	2b00      	cmp	r3, #0
24057c1c:	f000 80e0 	beq.w	24057de0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24057c20:	4b2f      	ldr	r3, [pc, #188]	; (24057ce0 <HAL_GPIO_Init+0x238>)
24057c22:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24057c26:	4a2e      	ldr	r2, [pc, #184]	; (24057ce0 <HAL_GPIO_Init+0x238>)
24057c28:	f043 0302 	orr.w	r3, r3, #2
24057c2c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
24057c30:	4b2b      	ldr	r3, [pc, #172]	; (24057ce0 <HAL_GPIO_Init+0x238>)
24057c32:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24057c36:	f003 0302 	and.w	r3, r3, #2
24057c3a:	60fb      	str	r3, [r7, #12]
24057c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
24057c3e:	4a29      	ldr	r2, [pc, #164]	; (24057ce4 <HAL_GPIO_Init+0x23c>)
24057c40:	69fb      	ldr	r3, [r7, #28]
24057c42:	089b      	lsrs	r3, r3, #2
24057c44:	3302      	adds	r3, #2
24057c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24057c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24057c4c:	69fb      	ldr	r3, [r7, #28]
24057c4e:	f003 0303 	and.w	r3, r3, #3
24057c52:	009b      	lsls	r3, r3, #2
24057c54:	220f      	movs	r2, #15
24057c56:	fa02 f303 	lsl.w	r3, r2, r3
24057c5a:	43db      	mvns	r3, r3
24057c5c:	69ba      	ldr	r2, [r7, #24]
24057c5e:	4013      	ands	r3, r2
24057c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24057c62:	687b      	ldr	r3, [r7, #4]
24057c64:	4a20      	ldr	r2, [pc, #128]	; (24057ce8 <HAL_GPIO_Init+0x240>)
24057c66:	4293      	cmp	r3, r2
24057c68:	d052      	beq.n	24057d10 <HAL_GPIO_Init+0x268>
24057c6a:	687b      	ldr	r3, [r7, #4]
24057c6c:	4a1f      	ldr	r2, [pc, #124]	; (24057cec <HAL_GPIO_Init+0x244>)
24057c6e:	4293      	cmp	r3, r2
24057c70:	d031      	beq.n	24057cd6 <HAL_GPIO_Init+0x22e>
24057c72:	687b      	ldr	r3, [r7, #4]
24057c74:	4a1e      	ldr	r2, [pc, #120]	; (24057cf0 <HAL_GPIO_Init+0x248>)
24057c76:	4293      	cmp	r3, r2
24057c78:	d02b      	beq.n	24057cd2 <HAL_GPIO_Init+0x22a>
24057c7a:	687b      	ldr	r3, [r7, #4]
24057c7c:	4a1d      	ldr	r2, [pc, #116]	; (24057cf4 <HAL_GPIO_Init+0x24c>)
24057c7e:	4293      	cmp	r3, r2
24057c80:	d025      	beq.n	24057cce <HAL_GPIO_Init+0x226>
24057c82:	687b      	ldr	r3, [r7, #4]
24057c84:	4a1c      	ldr	r2, [pc, #112]	; (24057cf8 <HAL_GPIO_Init+0x250>)
24057c86:	4293      	cmp	r3, r2
24057c88:	d01f      	beq.n	24057cca <HAL_GPIO_Init+0x222>
24057c8a:	687b      	ldr	r3, [r7, #4]
24057c8c:	4a1b      	ldr	r2, [pc, #108]	; (24057cfc <HAL_GPIO_Init+0x254>)
24057c8e:	4293      	cmp	r3, r2
24057c90:	d019      	beq.n	24057cc6 <HAL_GPIO_Init+0x21e>
24057c92:	687b      	ldr	r3, [r7, #4]
24057c94:	4a1a      	ldr	r2, [pc, #104]	; (24057d00 <HAL_GPIO_Init+0x258>)
24057c96:	4293      	cmp	r3, r2
24057c98:	d013      	beq.n	24057cc2 <HAL_GPIO_Init+0x21a>
24057c9a:	687b      	ldr	r3, [r7, #4]
24057c9c:	4a19      	ldr	r2, [pc, #100]	; (24057d04 <HAL_GPIO_Init+0x25c>)
24057c9e:	4293      	cmp	r3, r2
24057ca0:	d00d      	beq.n	24057cbe <HAL_GPIO_Init+0x216>
24057ca2:	687b      	ldr	r3, [r7, #4]
24057ca4:	4a18      	ldr	r2, [pc, #96]	; (24057d08 <HAL_GPIO_Init+0x260>)
24057ca6:	4293      	cmp	r3, r2
24057ca8:	d007      	beq.n	24057cba <HAL_GPIO_Init+0x212>
24057caa:	687b      	ldr	r3, [r7, #4]
24057cac:	4a17      	ldr	r2, [pc, #92]	; (24057d0c <HAL_GPIO_Init+0x264>)
24057cae:	4293      	cmp	r3, r2
24057cb0:	d101      	bne.n	24057cb6 <HAL_GPIO_Init+0x20e>
24057cb2:	2309      	movs	r3, #9
24057cb4:	e02d      	b.n	24057d12 <HAL_GPIO_Init+0x26a>
24057cb6:	230a      	movs	r3, #10
24057cb8:	e02b      	b.n	24057d12 <HAL_GPIO_Init+0x26a>
24057cba:	2308      	movs	r3, #8
24057cbc:	e029      	b.n	24057d12 <HAL_GPIO_Init+0x26a>
24057cbe:	2307      	movs	r3, #7
24057cc0:	e027      	b.n	24057d12 <HAL_GPIO_Init+0x26a>
24057cc2:	2306      	movs	r3, #6
24057cc4:	e025      	b.n	24057d12 <HAL_GPIO_Init+0x26a>
24057cc6:	2305      	movs	r3, #5
24057cc8:	e023      	b.n	24057d12 <HAL_GPIO_Init+0x26a>
24057cca:	2304      	movs	r3, #4
24057ccc:	e021      	b.n	24057d12 <HAL_GPIO_Init+0x26a>
24057cce:	2303      	movs	r3, #3
24057cd0:	e01f      	b.n	24057d12 <HAL_GPIO_Init+0x26a>
24057cd2:	2302      	movs	r3, #2
24057cd4:	e01d      	b.n	24057d12 <HAL_GPIO_Init+0x26a>
24057cd6:	2301      	movs	r3, #1
24057cd8:	e01b      	b.n	24057d12 <HAL_GPIO_Init+0x26a>
24057cda:	bf00      	nop
24057cdc:	58000080 	.word	0x58000080
24057ce0:	58024400 	.word	0x58024400
24057ce4:	58000400 	.word	0x58000400
24057ce8:	58020000 	.word	0x58020000
24057cec:	58020400 	.word	0x58020400
24057cf0:	58020800 	.word	0x58020800
24057cf4:	58020c00 	.word	0x58020c00
24057cf8:	58021000 	.word	0x58021000
24057cfc:	58021400 	.word	0x58021400
24057d00:	58021800 	.word	0x58021800
24057d04:	58021c00 	.word	0x58021c00
24057d08:	58022000 	.word	0x58022000
24057d0c:	58022400 	.word	0x58022400
24057d10:	2300      	movs	r3, #0
24057d12:	69fa      	ldr	r2, [r7, #28]
24057d14:	f002 0203 	and.w	r2, r2, #3
24057d18:	0092      	lsls	r2, r2, #2
24057d1a:	4093      	lsls	r3, r2
24057d1c:	69ba      	ldr	r2, [r7, #24]
24057d1e:	4313      	orrs	r3, r2
24057d20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
24057d22:	4938      	ldr	r1, [pc, #224]	; (24057e04 <HAL_GPIO_Init+0x35c>)
24057d24:	69fb      	ldr	r3, [r7, #28]
24057d26:	089b      	lsrs	r3, r3, #2
24057d28:	3302      	adds	r3, #2
24057d2a:	69ba      	ldr	r2, [r7, #24]
24057d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24057d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24057d34:	681b      	ldr	r3, [r3, #0]
24057d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24057d38:	693b      	ldr	r3, [r7, #16]
24057d3a:	43db      	mvns	r3, r3
24057d3c:	69ba      	ldr	r2, [r7, #24]
24057d3e:	4013      	ands	r3, r2
24057d40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24057d42:	683b      	ldr	r3, [r7, #0]
24057d44:	685b      	ldr	r3, [r3, #4]
24057d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
24057d4a:	2b00      	cmp	r3, #0
24057d4c:	d003      	beq.n	24057d56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
24057d4e:	69ba      	ldr	r2, [r7, #24]
24057d50:	693b      	ldr	r3, [r7, #16]
24057d52:	4313      	orrs	r3, r2
24057d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
24057d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24057d5a:	69bb      	ldr	r3, [r7, #24]
24057d5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
24057d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24057d62:	685b      	ldr	r3, [r3, #4]
24057d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24057d66:	693b      	ldr	r3, [r7, #16]
24057d68:	43db      	mvns	r3, r3
24057d6a:	69ba      	ldr	r2, [r7, #24]
24057d6c:	4013      	ands	r3, r2
24057d6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24057d70:	683b      	ldr	r3, [r7, #0]
24057d72:	685b      	ldr	r3, [r3, #4]
24057d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24057d78:	2b00      	cmp	r3, #0
24057d7a:	d003      	beq.n	24057d84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
24057d7c:	69ba      	ldr	r2, [r7, #24]
24057d7e:	693b      	ldr	r3, [r7, #16]
24057d80:	4313      	orrs	r3, r2
24057d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
24057d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24057d88:	69bb      	ldr	r3, [r7, #24]
24057d8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
24057d8c:	697b      	ldr	r3, [r7, #20]
24057d8e:	685b      	ldr	r3, [r3, #4]
24057d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24057d92:	693b      	ldr	r3, [r7, #16]
24057d94:	43db      	mvns	r3, r3
24057d96:	69ba      	ldr	r2, [r7, #24]
24057d98:	4013      	ands	r3, r2
24057d9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24057d9c:	683b      	ldr	r3, [r7, #0]
24057d9e:	685b      	ldr	r3, [r3, #4]
24057da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24057da4:	2b00      	cmp	r3, #0
24057da6:	d003      	beq.n	24057db0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
24057da8:	69ba      	ldr	r2, [r7, #24]
24057daa:	693b      	ldr	r3, [r7, #16]
24057dac:	4313      	orrs	r3, r2
24057dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
24057db0:	697b      	ldr	r3, [r7, #20]
24057db2:	69ba      	ldr	r2, [r7, #24]
24057db4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
24057db6:	697b      	ldr	r3, [r7, #20]
24057db8:	681b      	ldr	r3, [r3, #0]
24057dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24057dbc:	693b      	ldr	r3, [r7, #16]
24057dbe:	43db      	mvns	r3, r3
24057dc0:	69ba      	ldr	r2, [r7, #24]
24057dc2:	4013      	ands	r3, r2
24057dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24057dc6:	683b      	ldr	r3, [r7, #0]
24057dc8:	685b      	ldr	r3, [r3, #4]
24057dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24057dce:	2b00      	cmp	r3, #0
24057dd0:	d003      	beq.n	24057dda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
24057dd2:	69ba      	ldr	r2, [r7, #24]
24057dd4:	693b      	ldr	r3, [r7, #16]
24057dd6:	4313      	orrs	r3, r2
24057dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
24057dda:	697b      	ldr	r3, [r7, #20]
24057ddc:	69ba      	ldr	r2, [r7, #24]
24057dde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
24057de0:	69fb      	ldr	r3, [r7, #28]
24057de2:	3301      	adds	r3, #1
24057de4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24057de6:	683b      	ldr	r3, [r7, #0]
24057de8:	681a      	ldr	r2, [r3, #0]
24057dea:	69fb      	ldr	r3, [r7, #28]
24057dec:	fa22 f303 	lsr.w	r3, r2, r3
24057df0:	2b00      	cmp	r3, #0
24057df2:	f47f ae63 	bne.w	24057abc <HAL_GPIO_Init+0x14>
  }
}
24057df6:	bf00      	nop
24057df8:	bf00      	nop
24057dfa:	3724      	adds	r7, #36	; 0x24
24057dfc:	46bd      	mov	sp, r7
24057dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
24057e02:	4770      	bx	lr
24057e04:	58000400 	.word	0x58000400

24057e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
24057e08:	b480      	push	{r7}
24057e0a:	b085      	sub	sp, #20
24057e0c:	af00      	add	r7, sp, #0
24057e0e:	6078      	str	r0, [r7, #4]
24057e10:	460b      	mov	r3, r1
24057e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
24057e14:	687b      	ldr	r3, [r7, #4]
24057e16:	691a      	ldr	r2, [r3, #16]
24057e18:	887b      	ldrh	r3, [r7, #2]
24057e1a:	4013      	ands	r3, r2
24057e1c:	2b00      	cmp	r3, #0
24057e1e:	d002      	beq.n	24057e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
24057e20:	2301      	movs	r3, #1
24057e22:	73fb      	strb	r3, [r7, #15]
24057e24:	e001      	b.n	24057e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
24057e26:	2300      	movs	r3, #0
24057e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
24057e2a:	7bfb      	ldrb	r3, [r7, #15]
}
24057e2c:	4618      	mov	r0, r3
24057e2e:	3714      	adds	r7, #20
24057e30:	46bd      	mov	sp, r7
24057e32:	f85d 7b04 	ldr.w	r7, [sp], #4
24057e36:	4770      	bx	lr

24057e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
24057e38:	b480      	push	{r7}
24057e3a:	b083      	sub	sp, #12
24057e3c:	af00      	add	r7, sp, #0
24057e3e:	6078      	str	r0, [r7, #4]
24057e40:	460b      	mov	r3, r1
24057e42:	807b      	strh	r3, [r7, #2]
24057e44:	4613      	mov	r3, r2
24057e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24057e48:	787b      	ldrb	r3, [r7, #1]
24057e4a:	2b00      	cmp	r3, #0
24057e4c:	d003      	beq.n	24057e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
24057e4e:	887a      	ldrh	r2, [r7, #2]
24057e50:	687b      	ldr	r3, [r7, #4]
24057e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
24057e54:	e003      	b.n	24057e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
24057e56:	887b      	ldrh	r3, [r7, #2]
24057e58:	041a      	lsls	r2, r3, #16
24057e5a:	687b      	ldr	r3, [r7, #4]
24057e5c:	619a      	str	r2, [r3, #24]
}
24057e5e:	bf00      	nop
24057e60:	370c      	adds	r7, #12
24057e62:	46bd      	mov	sp, r7
24057e64:	f85d 7b04 	ldr.w	r7, [sp], #4
24057e68:	4770      	bx	lr
	...

24057e6c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
24057e6c:	b580      	push	{r7, lr}
24057e6e:	b084      	sub	sp, #16
24057e70:	af00      	add	r7, sp, #0
24057e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
24057e74:	687b      	ldr	r3, [r7, #4]
24057e76:	2b00      	cmp	r3, #0
24057e78:	d101      	bne.n	24057e7e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
24057e7a:	2301      	movs	r3, #1
24057e7c:	e0bf      	b.n	24057ffe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
24057e7e:	687b      	ldr	r3, [r7, #4]
24057e80:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
24057e84:	b2db      	uxtb	r3, r3
24057e86:	2b00      	cmp	r3, #0
24057e88:	d106      	bne.n	24057e98 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
24057e8a:	687b      	ldr	r3, [r7, #4]
24057e8c:	2200      	movs	r2, #0
24057e8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
24057e92:	6878      	ldr	r0, [r7, #4]
24057e94:	f7fa f934 	bl	24052100 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
24057e98:	687b      	ldr	r3, [r7, #4]
24057e9a:	2202      	movs	r2, #2
24057e9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
24057ea0:	687b      	ldr	r3, [r7, #4]
24057ea2:	681b      	ldr	r3, [r3, #0]
24057ea4:	699a      	ldr	r2, [r3, #24]
24057ea6:	687b      	ldr	r3, [r7, #4]
24057ea8:	681b      	ldr	r3, [r3, #0]
24057eaa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
24057eae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
24057eb0:	687b      	ldr	r3, [r7, #4]
24057eb2:	681b      	ldr	r3, [r3, #0]
24057eb4:	6999      	ldr	r1, [r3, #24]
24057eb6:	687b      	ldr	r3, [r7, #4]
24057eb8:	685a      	ldr	r2, [r3, #4]
24057eba:	687b      	ldr	r3, [r7, #4]
24057ebc:	689b      	ldr	r3, [r3, #8]
24057ebe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
24057ec0:	687b      	ldr	r3, [r7, #4]
24057ec2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
24057ec4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
24057ec6:	687b      	ldr	r3, [r7, #4]
24057ec8:	691b      	ldr	r3, [r3, #16]
24057eca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
24057ecc:	687b      	ldr	r3, [r7, #4]
24057ece:	681b      	ldr	r3, [r3, #0]
24057ed0:	430a      	orrs	r2, r1
24057ed2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
24057ed4:	687b      	ldr	r3, [r7, #4]
24057ed6:	681b      	ldr	r3, [r3, #0]
24057ed8:	6899      	ldr	r1, [r3, #8]
24057eda:	687b      	ldr	r3, [r7, #4]
24057edc:	681a      	ldr	r2, [r3, #0]
24057ede:	4b4a      	ldr	r3, [pc, #296]	; (24058008 <HAL_LTDC_Init+0x19c>)
24057ee0:	400b      	ands	r3, r1
24057ee2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
24057ee4:	687b      	ldr	r3, [r7, #4]
24057ee6:	695b      	ldr	r3, [r3, #20]
24057ee8:	041b      	lsls	r3, r3, #16
24057eea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
24057eec:	687b      	ldr	r3, [r7, #4]
24057eee:	681b      	ldr	r3, [r3, #0]
24057ef0:	6899      	ldr	r1, [r3, #8]
24057ef2:	687b      	ldr	r3, [r7, #4]
24057ef4:	699a      	ldr	r2, [r3, #24]
24057ef6:	68fb      	ldr	r3, [r7, #12]
24057ef8:	431a      	orrs	r2, r3
24057efa:	687b      	ldr	r3, [r7, #4]
24057efc:	681b      	ldr	r3, [r3, #0]
24057efe:	430a      	orrs	r2, r1
24057f00:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
24057f02:	687b      	ldr	r3, [r7, #4]
24057f04:	681b      	ldr	r3, [r3, #0]
24057f06:	68d9      	ldr	r1, [r3, #12]
24057f08:	687b      	ldr	r3, [r7, #4]
24057f0a:	681a      	ldr	r2, [r3, #0]
24057f0c:	4b3e      	ldr	r3, [pc, #248]	; (24058008 <HAL_LTDC_Init+0x19c>)
24057f0e:	400b      	ands	r3, r1
24057f10:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
24057f12:	687b      	ldr	r3, [r7, #4]
24057f14:	69db      	ldr	r3, [r3, #28]
24057f16:	041b      	lsls	r3, r3, #16
24057f18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
24057f1a:	687b      	ldr	r3, [r7, #4]
24057f1c:	681b      	ldr	r3, [r3, #0]
24057f1e:	68d9      	ldr	r1, [r3, #12]
24057f20:	687b      	ldr	r3, [r7, #4]
24057f22:	6a1a      	ldr	r2, [r3, #32]
24057f24:	68fb      	ldr	r3, [r7, #12]
24057f26:	431a      	orrs	r2, r3
24057f28:	687b      	ldr	r3, [r7, #4]
24057f2a:	681b      	ldr	r3, [r3, #0]
24057f2c:	430a      	orrs	r2, r1
24057f2e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
24057f30:	687b      	ldr	r3, [r7, #4]
24057f32:	681b      	ldr	r3, [r3, #0]
24057f34:	6919      	ldr	r1, [r3, #16]
24057f36:	687b      	ldr	r3, [r7, #4]
24057f38:	681a      	ldr	r2, [r3, #0]
24057f3a:	4b33      	ldr	r3, [pc, #204]	; (24058008 <HAL_LTDC_Init+0x19c>)
24057f3c:	400b      	ands	r3, r1
24057f3e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
24057f40:	687b      	ldr	r3, [r7, #4]
24057f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24057f44:	041b      	lsls	r3, r3, #16
24057f46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
24057f48:	687b      	ldr	r3, [r7, #4]
24057f4a:	681b      	ldr	r3, [r3, #0]
24057f4c:	6919      	ldr	r1, [r3, #16]
24057f4e:	687b      	ldr	r3, [r7, #4]
24057f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24057f52:	68fb      	ldr	r3, [r7, #12]
24057f54:	431a      	orrs	r2, r3
24057f56:	687b      	ldr	r3, [r7, #4]
24057f58:	681b      	ldr	r3, [r3, #0]
24057f5a:	430a      	orrs	r2, r1
24057f5c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
24057f5e:	687b      	ldr	r3, [r7, #4]
24057f60:	681b      	ldr	r3, [r3, #0]
24057f62:	6959      	ldr	r1, [r3, #20]
24057f64:	687b      	ldr	r3, [r7, #4]
24057f66:	681a      	ldr	r2, [r3, #0]
24057f68:	4b27      	ldr	r3, [pc, #156]	; (24058008 <HAL_LTDC_Init+0x19c>)
24057f6a:	400b      	ands	r3, r1
24057f6c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
24057f6e:	687b      	ldr	r3, [r7, #4]
24057f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24057f72:	041b      	lsls	r3, r3, #16
24057f74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
24057f76:	687b      	ldr	r3, [r7, #4]
24057f78:	681b      	ldr	r3, [r3, #0]
24057f7a:	6959      	ldr	r1, [r3, #20]
24057f7c:	687b      	ldr	r3, [r7, #4]
24057f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
24057f80:	68fb      	ldr	r3, [r7, #12]
24057f82:	431a      	orrs	r2, r3
24057f84:	687b      	ldr	r3, [r7, #4]
24057f86:	681b      	ldr	r3, [r3, #0]
24057f88:	430a      	orrs	r2, r1
24057f8a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
24057f8c:	687b      	ldr	r3, [r7, #4]
24057f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24057f92:	021b      	lsls	r3, r3, #8
24057f94:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
24057f96:	687b      	ldr	r3, [r7, #4]
24057f98:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
24057f9c:	041b      	lsls	r3, r3, #16
24057f9e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
24057fa0:	687b      	ldr	r3, [r7, #4]
24057fa2:	681b      	ldr	r3, [r3, #0]
24057fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24057fa6:	687b      	ldr	r3, [r7, #4]
24057fa8:	681b      	ldr	r3, [r3, #0]
24057faa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
24057fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
24057fb0:	687b      	ldr	r3, [r7, #4]
24057fb2:	681b      	ldr	r3, [r3, #0]
24057fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
24057fb6:	68ba      	ldr	r2, [r7, #8]
24057fb8:	68fb      	ldr	r3, [r7, #12]
24057fba:	4313      	orrs	r3, r2
24057fbc:	687a      	ldr	r2, [r7, #4]
24057fbe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
24057fc2:	431a      	orrs	r2, r3
24057fc4:	687b      	ldr	r3, [r7, #4]
24057fc6:	681b      	ldr	r3, [r3, #0]
24057fc8:	430a      	orrs	r2, r1
24057fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
24057fcc:	687b      	ldr	r3, [r7, #4]
24057fce:	681b      	ldr	r3, [r3, #0]
24057fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24057fd2:	687b      	ldr	r3, [r7, #4]
24057fd4:	681b      	ldr	r3, [r3, #0]
24057fd6:	f042 0206 	orr.w	r2, r2, #6
24057fda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
24057fdc:	687b      	ldr	r3, [r7, #4]
24057fde:	681b      	ldr	r3, [r3, #0]
24057fe0:	699a      	ldr	r2, [r3, #24]
24057fe2:	687b      	ldr	r3, [r7, #4]
24057fe4:	681b      	ldr	r3, [r3, #0]
24057fe6:	f042 0201 	orr.w	r2, r2, #1
24057fea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
24057fec:	687b      	ldr	r3, [r7, #4]
24057fee:	2200      	movs	r2, #0
24057ff0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
24057ff4:	687b      	ldr	r3, [r7, #4]
24057ff6:	2201      	movs	r2, #1
24057ff8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
24057ffc:	2300      	movs	r3, #0
}
24057ffe:	4618      	mov	r0, r3
24058000:	3710      	adds	r7, #16
24058002:	46bd      	mov	sp, r7
24058004:	bd80      	pop	{r7, pc}
24058006:	bf00      	nop
24058008:	f000f800 	.word	0xf000f800

2405800c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
2405800c:	b580      	push	{r7, lr}
2405800e:	b084      	sub	sp, #16
24058010:	af00      	add	r7, sp, #0
24058012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
24058014:	687b      	ldr	r3, [r7, #4]
24058016:	681b      	ldr	r3, [r3, #0]
24058018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405801a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
2405801c:	687b      	ldr	r3, [r7, #4]
2405801e:	681b      	ldr	r3, [r3, #0]
24058020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24058022:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
24058024:	68fb      	ldr	r3, [r7, #12]
24058026:	f003 0304 	and.w	r3, r3, #4
2405802a:	2b00      	cmp	r3, #0
2405802c:	d023      	beq.n	24058076 <HAL_LTDC_IRQHandler+0x6a>
2405802e:	68bb      	ldr	r3, [r7, #8]
24058030:	f003 0304 	and.w	r3, r3, #4
24058034:	2b00      	cmp	r3, #0
24058036:	d01e      	beq.n	24058076 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
24058038:	687b      	ldr	r3, [r7, #4]
2405803a:	681b      	ldr	r3, [r3, #0]
2405803c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405803e:	687b      	ldr	r3, [r7, #4]
24058040:	681b      	ldr	r3, [r3, #0]
24058042:	f022 0204 	bic.w	r2, r2, #4
24058046:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
24058048:	687b      	ldr	r3, [r7, #4]
2405804a:	681b      	ldr	r3, [r3, #0]
2405804c:	2204      	movs	r2, #4
2405804e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
24058050:	687b      	ldr	r3, [r7, #4]
24058052:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24058056:	f043 0201 	orr.w	r2, r3, #1
2405805a:	687b      	ldr	r3, [r7, #4]
2405805c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
24058060:	687b      	ldr	r3, [r7, #4]
24058062:	2204      	movs	r2, #4
24058064:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
24058068:	687b      	ldr	r3, [r7, #4]
2405806a:	2200      	movs	r2, #0
2405806c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
24058070:	6878      	ldr	r0, [r7, #4]
24058072:	f000 f86f 	bl	24058154 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
24058076:	68fb      	ldr	r3, [r7, #12]
24058078:	f003 0302 	and.w	r3, r3, #2
2405807c:	2b00      	cmp	r3, #0
2405807e:	d023      	beq.n	240580c8 <HAL_LTDC_IRQHandler+0xbc>
24058080:	68bb      	ldr	r3, [r7, #8]
24058082:	f003 0302 	and.w	r3, r3, #2
24058086:	2b00      	cmp	r3, #0
24058088:	d01e      	beq.n	240580c8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
2405808a:	687b      	ldr	r3, [r7, #4]
2405808c:	681b      	ldr	r3, [r3, #0]
2405808e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24058090:	687b      	ldr	r3, [r7, #4]
24058092:	681b      	ldr	r3, [r3, #0]
24058094:	f022 0202 	bic.w	r2, r2, #2
24058098:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
2405809a:	687b      	ldr	r3, [r7, #4]
2405809c:	681b      	ldr	r3, [r3, #0]
2405809e:	2202      	movs	r2, #2
240580a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
240580a2:	687b      	ldr	r3, [r7, #4]
240580a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
240580a8:	f043 0202 	orr.w	r2, r3, #2
240580ac:	687b      	ldr	r3, [r7, #4]
240580ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
240580b2:	687b      	ldr	r3, [r7, #4]
240580b4:	2204      	movs	r2, #4
240580b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
240580ba:	687b      	ldr	r3, [r7, #4]
240580bc:	2200      	movs	r2, #0
240580be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
240580c2:	6878      	ldr	r0, [r7, #4]
240580c4:	f000 f846 	bl	24058154 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
240580c8:	68fb      	ldr	r3, [r7, #12]
240580ca:	f003 0301 	and.w	r3, r3, #1
240580ce:	2b00      	cmp	r3, #0
240580d0:	d01b      	beq.n	2405810a <HAL_LTDC_IRQHandler+0xfe>
240580d2:	68bb      	ldr	r3, [r7, #8]
240580d4:	f003 0301 	and.w	r3, r3, #1
240580d8:	2b00      	cmp	r3, #0
240580da:	d016      	beq.n	2405810a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
240580dc:	687b      	ldr	r3, [r7, #4]
240580de:	681b      	ldr	r3, [r3, #0]
240580e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240580e2:	687b      	ldr	r3, [r7, #4]
240580e4:	681b      	ldr	r3, [r3, #0]
240580e6:	f022 0201 	bic.w	r2, r2, #1
240580ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
240580ec:	687b      	ldr	r3, [r7, #4]
240580ee:	681b      	ldr	r3, [r3, #0]
240580f0:	2201      	movs	r2, #1
240580f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
240580f4:	687b      	ldr	r3, [r7, #4]
240580f6:	2201      	movs	r2, #1
240580f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
240580fc:	687b      	ldr	r3, [r7, #4]
240580fe:	2200      	movs	r2, #0
24058100:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
24058104:	6878      	ldr	r0, [r7, #4]
24058106:	f000 f82f 	bl	24058168 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
2405810a:	68fb      	ldr	r3, [r7, #12]
2405810c:	f003 0308 	and.w	r3, r3, #8
24058110:	2b00      	cmp	r3, #0
24058112:	d01b      	beq.n	2405814c <HAL_LTDC_IRQHandler+0x140>
24058114:	68bb      	ldr	r3, [r7, #8]
24058116:	f003 0308 	and.w	r3, r3, #8
2405811a:	2b00      	cmp	r3, #0
2405811c:	d016      	beq.n	2405814c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
2405811e:	687b      	ldr	r3, [r7, #4]
24058120:	681b      	ldr	r3, [r3, #0]
24058122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24058124:	687b      	ldr	r3, [r7, #4]
24058126:	681b      	ldr	r3, [r3, #0]
24058128:	f022 0208 	bic.w	r2, r2, #8
2405812c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
2405812e:	687b      	ldr	r3, [r7, #4]
24058130:	681b      	ldr	r3, [r3, #0]
24058132:	2208      	movs	r2, #8
24058134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
24058136:	687b      	ldr	r3, [r7, #4]
24058138:	2201      	movs	r2, #1
2405813a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
2405813e:	687b      	ldr	r3, [r7, #4]
24058140:	2200      	movs	r2, #0
24058142:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
24058146:	6878      	ldr	r0, [r7, #4]
24058148:	f7f9 f940 	bl	240513cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
2405814c:	bf00      	nop
2405814e:	3710      	adds	r7, #16
24058150:	46bd      	mov	sp, r7
24058152:	bd80      	pop	{r7, pc}

24058154 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
24058154:	b480      	push	{r7}
24058156:	b083      	sub	sp, #12
24058158:	af00      	add	r7, sp, #0
2405815a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
2405815c:	bf00      	nop
2405815e:	370c      	adds	r7, #12
24058160:	46bd      	mov	sp, r7
24058162:	f85d 7b04 	ldr.w	r7, [sp], #4
24058166:	4770      	bx	lr

24058168 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
24058168:	b480      	push	{r7}
2405816a:	b083      	sub	sp, #12
2405816c:	af00      	add	r7, sp, #0
2405816e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
24058170:	bf00      	nop
24058172:	370c      	adds	r7, #12
24058174:	46bd      	mov	sp, r7
24058176:	f85d 7b04 	ldr.w	r7, [sp], #4
2405817a:	4770      	bx	lr

2405817c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
2405817c:	b5b0      	push	{r4, r5, r7, lr}
2405817e:	b084      	sub	sp, #16
24058180:	af00      	add	r7, sp, #0
24058182:	60f8      	str	r0, [r7, #12]
24058184:	60b9      	str	r1, [r7, #8]
24058186:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
24058188:	68fb      	ldr	r3, [r7, #12]
2405818a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
2405818e:	2b01      	cmp	r3, #1
24058190:	d101      	bne.n	24058196 <HAL_LTDC_ConfigLayer+0x1a>
24058192:	2302      	movs	r3, #2
24058194:	e02c      	b.n	240581f0 <HAL_LTDC_ConfigLayer+0x74>
24058196:	68fb      	ldr	r3, [r7, #12]
24058198:	2201      	movs	r2, #1
2405819a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
2405819e:	68fb      	ldr	r3, [r7, #12]
240581a0:	2202      	movs	r2, #2
240581a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
240581a6:	68fa      	ldr	r2, [r7, #12]
240581a8:	687b      	ldr	r3, [r7, #4]
240581aa:	2134      	movs	r1, #52	; 0x34
240581ac:	fb01 f303 	mul.w	r3, r1, r3
240581b0:	4413      	add	r3, r2
240581b2:	f103 0238 	add.w	r2, r3, #56	; 0x38
240581b6:	68bb      	ldr	r3, [r7, #8]
240581b8:	4614      	mov	r4, r2
240581ba:	461d      	mov	r5, r3
240581bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
240581be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
240581c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
240581c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
240581c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
240581c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
240581c8:	682b      	ldr	r3, [r5, #0]
240581ca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
240581cc:	687a      	ldr	r2, [r7, #4]
240581ce:	68b9      	ldr	r1, [r7, #8]
240581d0:	68f8      	ldr	r0, [r7, #12]
240581d2:	f000 f877 	bl	240582c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
240581d6:	68fb      	ldr	r3, [r7, #12]
240581d8:	681b      	ldr	r3, [r3, #0]
240581da:	2201      	movs	r2, #1
240581dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
240581de:	68fb      	ldr	r3, [r7, #12]
240581e0:	2201      	movs	r2, #1
240581e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
240581e6:	68fb      	ldr	r3, [r7, #12]
240581e8:	2200      	movs	r2, #0
240581ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
240581ee:	2300      	movs	r3, #0
}
240581f0:	4618      	mov	r0, r3
240581f2:	3710      	adds	r7, #16
240581f4:	46bd      	mov	sp, r7
240581f6:	bdb0      	pop	{r4, r5, r7, pc}

240581f8 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
240581f8:	b580      	push	{r7, lr}
240581fa:	b086      	sub	sp, #24
240581fc:	af00      	add	r7, sp, #0
240581fe:	60f8      	str	r0, [r7, #12]
24058200:	60b9      	str	r1, [r7, #8]
24058202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
24058204:	68fb      	ldr	r3, [r7, #12]
24058206:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
2405820a:	2b01      	cmp	r3, #1
2405820c:	d101      	bne.n	24058212 <HAL_LTDC_SetAddress+0x1a>
2405820e:	2302      	movs	r3, #2
24058210:	e024      	b.n	2405825c <HAL_LTDC_SetAddress+0x64>
24058212:	68fb      	ldr	r3, [r7, #12]
24058214:	2201      	movs	r2, #1
24058216:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
2405821a:	68fb      	ldr	r3, [r7, #12]
2405821c:	2202      	movs	r2, #2
2405821e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
24058222:	687b      	ldr	r3, [r7, #4]
24058224:	2234      	movs	r2, #52	; 0x34
24058226:	fb02 f303 	mul.w	r3, r2, r3
2405822a:	3338      	adds	r3, #56	; 0x38
2405822c:	68fa      	ldr	r2, [r7, #12]
2405822e:	4413      	add	r3, r2
24058230:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
24058232:	697b      	ldr	r3, [r7, #20]
24058234:	68ba      	ldr	r2, [r7, #8]
24058236:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
24058238:	687a      	ldr	r2, [r7, #4]
2405823a:	6979      	ldr	r1, [r7, #20]
2405823c:	68f8      	ldr	r0, [r7, #12]
2405823e:	f000 f841 	bl	240582c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
24058242:	68fb      	ldr	r3, [r7, #12]
24058244:	681b      	ldr	r3, [r3, #0]
24058246:	2201      	movs	r2, #1
24058248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
2405824a:	68fb      	ldr	r3, [r7, #12]
2405824c:	2201      	movs	r2, #1
2405824e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
24058252:	68fb      	ldr	r3, [r7, #12]
24058254:	2200      	movs	r2, #0
24058256:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
2405825a:	2300      	movs	r3, #0
}
2405825c:	4618      	mov	r0, r3
2405825e:	3718      	adds	r7, #24
24058260:	46bd      	mov	sp, r7
24058262:	bd80      	pop	{r7, pc}

24058264 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
24058264:	b480      	push	{r7}
24058266:	b083      	sub	sp, #12
24058268:	af00      	add	r7, sp, #0
2405826a:	6078      	str	r0, [r7, #4]
2405826c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
2405826e:	687b      	ldr	r3, [r7, #4]
24058270:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
24058274:	2b01      	cmp	r3, #1
24058276:	d101      	bne.n	2405827c <HAL_LTDC_Reload+0x18>
24058278:	2302      	movs	r3, #2
2405827a:	e01c      	b.n	240582b6 <HAL_LTDC_Reload+0x52>
2405827c:	687b      	ldr	r3, [r7, #4]
2405827e:	2201      	movs	r2, #1
24058280:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
24058284:	687b      	ldr	r3, [r7, #4]
24058286:	2202      	movs	r2, #2
24058288:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
2405828c:	687b      	ldr	r3, [r7, #4]
2405828e:	681b      	ldr	r3, [r3, #0]
24058290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24058292:	687b      	ldr	r3, [r7, #4]
24058294:	681b      	ldr	r3, [r3, #0]
24058296:	f042 0208 	orr.w	r2, r2, #8
2405829a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
2405829c:	687b      	ldr	r3, [r7, #4]
2405829e:	681b      	ldr	r3, [r3, #0]
240582a0:	683a      	ldr	r2, [r7, #0]
240582a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
240582a4:	687b      	ldr	r3, [r7, #4]
240582a6:	2201      	movs	r2, #1
240582a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
240582ac:	687b      	ldr	r3, [r7, #4]
240582ae:	2200      	movs	r2, #0
240582b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
240582b4:	2300      	movs	r3, #0
}
240582b6:	4618      	mov	r0, r3
240582b8:	370c      	adds	r7, #12
240582ba:	46bd      	mov	sp, r7
240582bc:	f85d 7b04 	ldr.w	r7, [sp], #4
240582c0:	4770      	bx	lr
	...

240582c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
240582c4:	b480      	push	{r7}
240582c6:	b089      	sub	sp, #36	; 0x24
240582c8:	af00      	add	r7, sp, #0
240582ca:	60f8      	str	r0, [r7, #12]
240582cc:	60b9      	str	r1, [r7, #8]
240582ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
240582d0:	68bb      	ldr	r3, [r7, #8]
240582d2:	685a      	ldr	r2, [r3, #4]
240582d4:	68fb      	ldr	r3, [r7, #12]
240582d6:	681b      	ldr	r3, [r3, #0]
240582d8:	68db      	ldr	r3, [r3, #12]
240582da:	0c1b      	lsrs	r3, r3, #16
240582dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
240582e0:	4413      	add	r3, r2
240582e2:	041b      	lsls	r3, r3, #16
240582e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
240582e6:	68fb      	ldr	r3, [r7, #12]
240582e8:	681b      	ldr	r3, [r3, #0]
240582ea:	461a      	mov	r2, r3
240582ec:	687b      	ldr	r3, [r7, #4]
240582ee:	01db      	lsls	r3, r3, #7
240582f0:	4413      	add	r3, r2
240582f2:	3384      	adds	r3, #132	; 0x84
240582f4:	685b      	ldr	r3, [r3, #4]
240582f6:	68fa      	ldr	r2, [r7, #12]
240582f8:	6812      	ldr	r2, [r2, #0]
240582fa:	4611      	mov	r1, r2
240582fc:	687a      	ldr	r2, [r7, #4]
240582fe:	01d2      	lsls	r2, r2, #7
24058300:	440a      	add	r2, r1
24058302:	3284      	adds	r2, #132	; 0x84
24058304:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
24058308:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
2405830a:	68bb      	ldr	r3, [r7, #8]
2405830c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
2405830e:	68fb      	ldr	r3, [r7, #12]
24058310:	681b      	ldr	r3, [r3, #0]
24058312:	68db      	ldr	r3, [r3, #12]
24058314:	0c1b      	lsrs	r3, r3, #16
24058316:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
2405831a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
2405831c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
2405831e:	68fb      	ldr	r3, [r7, #12]
24058320:	681b      	ldr	r3, [r3, #0]
24058322:	4619      	mov	r1, r3
24058324:	687b      	ldr	r3, [r7, #4]
24058326:	01db      	lsls	r3, r3, #7
24058328:	440b      	add	r3, r1
2405832a:	3384      	adds	r3, #132	; 0x84
2405832c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
2405832e:	69fb      	ldr	r3, [r7, #28]
24058330:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
24058332:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
24058334:	68bb      	ldr	r3, [r7, #8]
24058336:	68da      	ldr	r2, [r3, #12]
24058338:	68fb      	ldr	r3, [r7, #12]
2405833a:	681b      	ldr	r3, [r3, #0]
2405833c:	68db      	ldr	r3, [r3, #12]
2405833e:	f3c3 030a 	ubfx	r3, r3, #0, #11
24058342:	4413      	add	r3, r2
24058344:	041b      	lsls	r3, r3, #16
24058346:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
24058348:	68fb      	ldr	r3, [r7, #12]
2405834a:	681b      	ldr	r3, [r3, #0]
2405834c:	461a      	mov	r2, r3
2405834e:	687b      	ldr	r3, [r7, #4]
24058350:	01db      	lsls	r3, r3, #7
24058352:	4413      	add	r3, r2
24058354:	3384      	adds	r3, #132	; 0x84
24058356:	689b      	ldr	r3, [r3, #8]
24058358:	68fa      	ldr	r2, [r7, #12]
2405835a:	6812      	ldr	r2, [r2, #0]
2405835c:	4611      	mov	r1, r2
2405835e:	687a      	ldr	r2, [r7, #4]
24058360:	01d2      	lsls	r2, r2, #7
24058362:	440a      	add	r2, r1
24058364:	3284      	adds	r2, #132	; 0x84
24058366:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
2405836a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
2405836c:	68bb      	ldr	r3, [r7, #8]
2405836e:	689a      	ldr	r2, [r3, #8]
24058370:	68fb      	ldr	r3, [r7, #12]
24058372:	681b      	ldr	r3, [r3, #0]
24058374:	68db      	ldr	r3, [r3, #12]
24058376:	f3c3 030a 	ubfx	r3, r3, #0, #11
2405837a:	4413      	add	r3, r2
2405837c:	1c5a      	adds	r2, r3, #1
2405837e:	68fb      	ldr	r3, [r7, #12]
24058380:	681b      	ldr	r3, [r3, #0]
24058382:	4619      	mov	r1, r3
24058384:	687b      	ldr	r3, [r7, #4]
24058386:	01db      	lsls	r3, r3, #7
24058388:	440b      	add	r3, r1
2405838a:	3384      	adds	r3, #132	; 0x84
2405838c:	4619      	mov	r1, r3
2405838e:	69fb      	ldr	r3, [r7, #28]
24058390:	4313      	orrs	r3, r2
24058392:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
24058394:	68fb      	ldr	r3, [r7, #12]
24058396:	681b      	ldr	r3, [r3, #0]
24058398:	461a      	mov	r2, r3
2405839a:	687b      	ldr	r3, [r7, #4]
2405839c:	01db      	lsls	r3, r3, #7
2405839e:	4413      	add	r3, r2
240583a0:	3384      	adds	r3, #132	; 0x84
240583a2:	691b      	ldr	r3, [r3, #16]
240583a4:	68fa      	ldr	r2, [r7, #12]
240583a6:	6812      	ldr	r2, [r2, #0]
240583a8:	4611      	mov	r1, r2
240583aa:	687a      	ldr	r2, [r7, #4]
240583ac:	01d2      	lsls	r2, r2, #7
240583ae:	440a      	add	r2, r1
240583b0:	3284      	adds	r2, #132	; 0x84
240583b2:	f023 0307 	bic.w	r3, r3, #7
240583b6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
240583b8:	68fb      	ldr	r3, [r7, #12]
240583ba:	681b      	ldr	r3, [r3, #0]
240583bc:	461a      	mov	r2, r3
240583be:	687b      	ldr	r3, [r7, #4]
240583c0:	01db      	lsls	r3, r3, #7
240583c2:	4413      	add	r3, r2
240583c4:	3384      	adds	r3, #132	; 0x84
240583c6:	461a      	mov	r2, r3
240583c8:	68bb      	ldr	r3, [r7, #8]
240583ca:	691b      	ldr	r3, [r3, #16]
240583cc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
240583ce:	68bb      	ldr	r3, [r7, #8]
240583d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
240583d4:	021b      	lsls	r3, r3, #8
240583d6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
240583d8:	68bb      	ldr	r3, [r7, #8]
240583da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
240583de:	041b      	lsls	r3, r3, #16
240583e0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
240583e2:	68bb      	ldr	r3, [r7, #8]
240583e4:	699b      	ldr	r3, [r3, #24]
240583e6:	061b      	lsls	r3, r3, #24
240583e8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
240583ea:	68fb      	ldr	r3, [r7, #12]
240583ec:	681b      	ldr	r3, [r3, #0]
240583ee:	461a      	mov	r2, r3
240583f0:	687b      	ldr	r3, [r7, #4]
240583f2:	01db      	lsls	r3, r3, #7
240583f4:	4413      	add	r3, r2
240583f6:	3384      	adds	r3, #132	; 0x84
240583f8:	699b      	ldr	r3, [r3, #24]
240583fa:	68fb      	ldr	r3, [r7, #12]
240583fc:	681b      	ldr	r3, [r3, #0]
240583fe:	461a      	mov	r2, r3
24058400:	687b      	ldr	r3, [r7, #4]
24058402:	01db      	lsls	r3, r3, #7
24058404:	4413      	add	r3, r2
24058406:	3384      	adds	r3, #132	; 0x84
24058408:	461a      	mov	r2, r3
2405840a:	2300      	movs	r3, #0
2405840c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
2405840e:	68bb      	ldr	r3, [r7, #8]
24058410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
24058414:	461a      	mov	r2, r3
24058416:	69fb      	ldr	r3, [r7, #28]
24058418:	431a      	orrs	r2, r3
2405841a:	69bb      	ldr	r3, [r7, #24]
2405841c:	431a      	orrs	r2, r3
2405841e:	68fb      	ldr	r3, [r7, #12]
24058420:	681b      	ldr	r3, [r3, #0]
24058422:	4619      	mov	r1, r3
24058424:	687b      	ldr	r3, [r7, #4]
24058426:	01db      	lsls	r3, r3, #7
24058428:	440b      	add	r3, r1
2405842a:	3384      	adds	r3, #132	; 0x84
2405842c:	4619      	mov	r1, r3
2405842e:	697b      	ldr	r3, [r7, #20]
24058430:	4313      	orrs	r3, r2
24058432:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
24058434:	68fb      	ldr	r3, [r7, #12]
24058436:	681b      	ldr	r3, [r3, #0]
24058438:	461a      	mov	r2, r3
2405843a:	687b      	ldr	r3, [r7, #4]
2405843c:	01db      	lsls	r3, r3, #7
2405843e:	4413      	add	r3, r2
24058440:	3384      	adds	r3, #132	; 0x84
24058442:	695b      	ldr	r3, [r3, #20]
24058444:	68fa      	ldr	r2, [r7, #12]
24058446:	6812      	ldr	r2, [r2, #0]
24058448:	4611      	mov	r1, r2
2405844a:	687a      	ldr	r2, [r7, #4]
2405844c:	01d2      	lsls	r2, r2, #7
2405844e:	440a      	add	r2, r1
24058450:	3284      	adds	r2, #132	; 0x84
24058452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
24058456:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
24058458:	68fb      	ldr	r3, [r7, #12]
2405845a:	681b      	ldr	r3, [r3, #0]
2405845c:	461a      	mov	r2, r3
2405845e:	687b      	ldr	r3, [r7, #4]
24058460:	01db      	lsls	r3, r3, #7
24058462:	4413      	add	r3, r2
24058464:	3384      	adds	r3, #132	; 0x84
24058466:	461a      	mov	r2, r3
24058468:	68bb      	ldr	r3, [r7, #8]
2405846a:	695b      	ldr	r3, [r3, #20]
2405846c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
2405846e:	68fb      	ldr	r3, [r7, #12]
24058470:	681b      	ldr	r3, [r3, #0]
24058472:	461a      	mov	r2, r3
24058474:	687b      	ldr	r3, [r7, #4]
24058476:	01db      	lsls	r3, r3, #7
24058478:	4413      	add	r3, r2
2405847a:	3384      	adds	r3, #132	; 0x84
2405847c:	69da      	ldr	r2, [r3, #28]
2405847e:	68fb      	ldr	r3, [r7, #12]
24058480:	681b      	ldr	r3, [r3, #0]
24058482:	4619      	mov	r1, r3
24058484:	687b      	ldr	r3, [r7, #4]
24058486:	01db      	lsls	r3, r3, #7
24058488:	440b      	add	r3, r1
2405848a:	3384      	adds	r3, #132	; 0x84
2405848c:	4619      	mov	r1, r3
2405848e:	4b58      	ldr	r3, [pc, #352]	; (240585f0 <LTDC_SetConfig+0x32c>)
24058490:	4013      	ands	r3, r2
24058492:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
24058494:	68bb      	ldr	r3, [r7, #8]
24058496:	69da      	ldr	r2, [r3, #28]
24058498:	68bb      	ldr	r3, [r7, #8]
2405849a:	6a1b      	ldr	r3, [r3, #32]
2405849c:	68f9      	ldr	r1, [r7, #12]
2405849e:	6809      	ldr	r1, [r1, #0]
240584a0:	4608      	mov	r0, r1
240584a2:	6879      	ldr	r1, [r7, #4]
240584a4:	01c9      	lsls	r1, r1, #7
240584a6:	4401      	add	r1, r0
240584a8:	3184      	adds	r1, #132	; 0x84
240584aa:	4313      	orrs	r3, r2
240584ac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
240584ae:	68fb      	ldr	r3, [r7, #12]
240584b0:	681b      	ldr	r3, [r3, #0]
240584b2:	461a      	mov	r2, r3
240584b4:	687b      	ldr	r3, [r7, #4]
240584b6:	01db      	lsls	r3, r3, #7
240584b8:	4413      	add	r3, r2
240584ba:	3384      	adds	r3, #132	; 0x84
240584bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240584be:	68fb      	ldr	r3, [r7, #12]
240584c0:	681b      	ldr	r3, [r3, #0]
240584c2:	461a      	mov	r2, r3
240584c4:	687b      	ldr	r3, [r7, #4]
240584c6:	01db      	lsls	r3, r3, #7
240584c8:	4413      	add	r3, r2
240584ca:	3384      	adds	r3, #132	; 0x84
240584cc:	461a      	mov	r2, r3
240584ce:	2300      	movs	r3, #0
240584d0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
240584d2:	68fb      	ldr	r3, [r7, #12]
240584d4:	681b      	ldr	r3, [r3, #0]
240584d6:	461a      	mov	r2, r3
240584d8:	687b      	ldr	r3, [r7, #4]
240584da:	01db      	lsls	r3, r3, #7
240584dc:	4413      	add	r3, r2
240584de:	3384      	adds	r3, #132	; 0x84
240584e0:	461a      	mov	r2, r3
240584e2:	68bb      	ldr	r3, [r7, #8]
240584e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240584e6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
240584e8:	68bb      	ldr	r3, [r7, #8]
240584ea:	691b      	ldr	r3, [r3, #16]
240584ec:	2b00      	cmp	r3, #0
240584ee:	d102      	bne.n	240584f6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
240584f0:	2304      	movs	r3, #4
240584f2:	61fb      	str	r3, [r7, #28]
240584f4:	e01b      	b.n	2405852e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
240584f6:	68bb      	ldr	r3, [r7, #8]
240584f8:	691b      	ldr	r3, [r3, #16]
240584fa:	2b01      	cmp	r3, #1
240584fc:	d102      	bne.n	24058504 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
240584fe:	2303      	movs	r3, #3
24058500:	61fb      	str	r3, [r7, #28]
24058502:	e014      	b.n	2405852e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
24058504:	68bb      	ldr	r3, [r7, #8]
24058506:	691b      	ldr	r3, [r3, #16]
24058508:	2b04      	cmp	r3, #4
2405850a:	d00b      	beq.n	24058524 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
2405850c:	68bb      	ldr	r3, [r7, #8]
2405850e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
24058510:	2b02      	cmp	r3, #2
24058512:	d007      	beq.n	24058524 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
24058514:	68bb      	ldr	r3, [r7, #8]
24058516:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
24058518:	2b03      	cmp	r3, #3
2405851a:	d003      	beq.n	24058524 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
2405851c:	68bb      	ldr	r3, [r7, #8]
2405851e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
24058520:	2b07      	cmp	r3, #7
24058522:	d102      	bne.n	2405852a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
24058524:	2302      	movs	r3, #2
24058526:	61fb      	str	r3, [r7, #28]
24058528:	e001      	b.n	2405852e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
2405852a:	2301      	movs	r3, #1
2405852c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
2405852e:	68fb      	ldr	r3, [r7, #12]
24058530:	681b      	ldr	r3, [r3, #0]
24058532:	461a      	mov	r2, r3
24058534:	687b      	ldr	r3, [r7, #4]
24058536:	01db      	lsls	r3, r3, #7
24058538:	4413      	add	r3, r2
2405853a:	3384      	adds	r3, #132	; 0x84
2405853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405853e:	68fa      	ldr	r2, [r7, #12]
24058540:	6812      	ldr	r2, [r2, #0]
24058542:	4611      	mov	r1, r2
24058544:	687a      	ldr	r2, [r7, #4]
24058546:	01d2      	lsls	r2, r2, #7
24058548:	440a      	add	r2, r1
2405854a:	3284      	adds	r2, #132	; 0x84
2405854c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
24058550:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
24058552:	68bb      	ldr	r3, [r7, #8]
24058554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24058556:	69fa      	ldr	r2, [r7, #28]
24058558:	fb02 f303 	mul.w	r3, r2, r3
2405855c:	041a      	lsls	r2, r3, #16
2405855e:	68bb      	ldr	r3, [r7, #8]
24058560:	6859      	ldr	r1, [r3, #4]
24058562:	68bb      	ldr	r3, [r7, #8]
24058564:	681b      	ldr	r3, [r3, #0]
24058566:	1acb      	subs	r3, r1, r3
24058568:	69f9      	ldr	r1, [r7, #28]
2405856a:	fb01 f303 	mul.w	r3, r1, r3
2405856e:	3307      	adds	r3, #7
24058570:	68f9      	ldr	r1, [r7, #12]
24058572:	6809      	ldr	r1, [r1, #0]
24058574:	4608      	mov	r0, r1
24058576:	6879      	ldr	r1, [r7, #4]
24058578:	01c9      	lsls	r1, r1, #7
2405857a:	4401      	add	r1, r0
2405857c:	3184      	adds	r1, #132	; 0x84
2405857e:	4313      	orrs	r3, r2
24058580:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
24058582:	68fb      	ldr	r3, [r7, #12]
24058584:	681b      	ldr	r3, [r3, #0]
24058586:	461a      	mov	r2, r3
24058588:	687b      	ldr	r3, [r7, #4]
2405858a:	01db      	lsls	r3, r3, #7
2405858c:	4413      	add	r3, r2
2405858e:	3384      	adds	r3, #132	; 0x84
24058590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
24058592:	68fb      	ldr	r3, [r7, #12]
24058594:	681b      	ldr	r3, [r3, #0]
24058596:	4619      	mov	r1, r3
24058598:	687b      	ldr	r3, [r7, #4]
2405859a:	01db      	lsls	r3, r3, #7
2405859c:	440b      	add	r3, r1
2405859e:	3384      	adds	r3, #132	; 0x84
240585a0:	4619      	mov	r1, r3
240585a2:	4b14      	ldr	r3, [pc, #80]	; (240585f4 <LTDC_SetConfig+0x330>)
240585a4:	4013      	ands	r3, r2
240585a6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
240585a8:	68fb      	ldr	r3, [r7, #12]
240585aa:	681b      	ldr	r3, [r3, #0]
240585ac:	461a      	mov	r2, r3
240585ae:	687b      	ldr	r3, [r7, #4]
240585b0:	01db      	lsls	r3, r3, #7
240585b2:	4413      	add	r3, r2
240585b4:	3384      	adds	r3, #132	; 0x84
240585b6:	461a      	mov	r2, r3
240585b8:	68bb      	ldr	r3, [r7, #8]
240585ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240585bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
240585be:	68fb      	ldr	r3, [r7, #12]
240585c0:	681b      	ldr	r3, [r3, #0]
240585c2:	461a      	mov	r2, r3
240585c4:	687b      	ldr	r3, [r7, #4]
240585c6:	01db      	lsls	r3, r3, #7
240585c8:	4413      	add	r3, r2
240585ca:	3384      	adds	r3, #132	; 0x84
240585cc:	681b      	ldr	r3, [r3, #0]
240585ce:	68fa      	ldr	r2, [r7, #12]
240585d0:	6812      	ldr	r2, [r2, #0]
240585d2:	4611      	mov	r1, r2
240585d4:	687a      	ldr	r2, [r7, #4]
240585d6:	01d2      	lsls	r2, r2, #7
240585d8:	440a      	add	r2, r1
240585da:	3284      	adds	r2, #132	; 0x84
240585dc:	f043 0301 	orr.w	r3, r3, #1
240585e0:	6013      	str	r3, [r2, #0]
}
240585e2:	bf00      	nop
240585e4:	3724      	adds	r7, #36	; 0x24
240585e6:	46bd      	mov	sp, r7
240585e8:	f85d 7b04 	ldr.w	r7, [sp], #4
240585ec:	4770      	bx	lr
240585ee:	bf00      	nop
240585f0:	fffff8f8 	.word	0xfffff8f8
240585f4:	fffff800 	.word	0xfffff800

240585f8 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
240585f8:	b480      	push	{r7}
240585fa:	b083      	sub	sp, #12
240585fc:	af00      	add	r7, sp, #0
240585fe:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24058600:	687b      	ldr	r3, [r7, #4]
24058602:	2b00      	cmp	r3, #0
24058604:	d101      	bne.n	2405860a <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
24058606:	2301      	movs	r3, #1
24058608:	e017      	b.n	2405863a <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
2405860a:	687b      	ldr	r3, [r7, #4]
2405860c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24058610:	b2db      	uxtb	r3, r3
24058612:	2b02      	cmp	r3, #2
24058614:	d004      	beq.n	24058620 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24058616:	687b      	ldr	r3, [r7, #4]
24058618:	2280      	movs	r2, #128	; 0x80
2405861a:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
2405861c:	2301      	movs	r3, #1
2405861e:	e00c      	b.n	2405863a <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
24058620:	687b      	ldr	r3, [r7, #4]
24058622:	2204      	movs	r2, #4
24058624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
24058628:	687b      	ldr	r3, [r7, #4]
2405862a:	681b      	ldr	r3, [r3, #0]
2405862c:	68da      	ldr	r2, [r3, #12]
2405862e:	687b      	ldr	r3, [r7, #4]
24058630:	681b      	ldr	r3, [r3, #0]
24058632:	f022 0201 	bic.w	r2, r2, #1
24058636:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
24058638:	2300      	movs	r3, #0
}
2405863a:	4618      	mov	r0, r3
2405863c:	370c      	adds	r7, #12
2405863e:	46bd      	mov	sp, r7
24058640:	f85d 7b04 	ldr.w	r7, [sp], #4
24058644:	4770      	bx	lr
	...

24058648 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
24058648:	b580      	push	{r7, lr}
2405864a:	b086      	sub	sp, #24
2405864c:	af02      	add	r7, sp, #8
2405864e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24058650:	2300      	movs	r3, #0
24058652:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
24058654:	f7fa fb5e 	bl	24052d14 <HAL_GetTick>
24058658:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
2405865a:	687b      	ldr	r3, [r7, #4]
2405865c:	2b00      	cmp	r3, #0
2405865e:	d102      	bne.n	24058666 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
24058660:	2301      	movs	r3, #1
24058662:	73fb      	strb	r3, [r7, #15]
24058664:	e0a5      	b.n	240587b2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
24058666:	687b      	ldr	r3, [r7, #4]
24058668:	2200      	movs	r2, #0
2405866a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
2405866c:	687b      	ldr	r3, [r7, #4]
2405866e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24058670:	2b00      	cmp	r3, #0
24058672:	f040 809e 	bne.w	240587b2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
24058676:	6878      	ldr	r0, [r7, #4]
24058678:	f7f9 fe80 	bl	2405237c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
2405867c:	f241 3188 	movw	r1, #5000	; 0x1388
24058680:	6878      	ldr	r0, [r7, #4]
24058682:	f000 fb0b 	bl	24058c9c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
24058686:	687b      	ldr	r3, [r7, #4]
24058688:	681b      	ldr	r3, [r3, #0]
2405868a:	689a      	ldr	r2, [r3, #8]
2405868c:	4b4b      	ldr	r3, [pc, #300]	; (240587bc <HAL_OSPI_Init+0x174>)
2405868e:	4013      	ands	r3, r2
24058690:	687a      	ldr	r2, [r7, #4]
24058692:	68d1      	ldr	r1, [r2, #12]
24058694:	687a      	ldr	r2, [r7, #4]
24058696:	6912      	ldr	r2, [r2, #16]
24058698:	3a01      	subs	r2, #1
2405869a:	0412      	lsls	r2, r2, #16
2405869c:	4311      	orrs	r1, r2
2405869e:	687a      	ldr	r2, [r7, #4]
240586a0:	6952      	ldr	r2, [r2, #20]
240586a2:	3a01      	subs	r2, #1
240586a4:	0212      	lsls	r2, r2, #8
240586a6:	4311      	orrs	r1, r2
240586a8:	687a      	ldr	r2, [r7, #4]
240586aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
240586ac:	4311      	orrs	r1, r2
240586ae:	687a      	ldr	r2, [r7, #4]
240586b0:	69d2      	ldr	r2, [r2, #28]
240586b2:	4311      	orrs	r1, r2
240586b4:	687a      	ldr	r2, [r7, #4]
240586b6:	6812      	ldr	r2, [r2, #0]
240586b8:	430b      	orrs	r3, r1
240586ba:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
240586bc:	687b      	ldr	r3, [r7, #4]
240586be:	681b      	ldr	r3, [r3, #0]
240586c0:	68db      	ldr	r3, [r3, #12]
240586c2:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
240586c6:	687b      	ldr	r3, [r7, #4]
240586c8:	6a1a      	ldr	r2, [r3, #32]
240586ca:	687b      	ldr	r3, [r7, #4]
240586cc:	681b      	ldr	r3, [r3, #0]
240586ce:	430a      	orrs	r2, r1
240586d0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
240586d2:	687b      	ldr	r3, [r7, #4]
240586d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240586d6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
240586d8:	687b      	ldr	r3, [r7, #4]
240586da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
240586dc:	687b      	ldr	r3, [r7, #4]
240586de:	681b      	ldr	r3, [r3, #0]
240586e0:	430a      	orrs	r2, r1
240586e2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
240586e4:	687b      	ldr	r3, [r7, #4]
240586e6:	681b      	ldr	r3, [r3, #0]
240586e8:	687a      	ldr	r2, [r7, #4]
240586ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
240586ec:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
240586ee:	687b      	ldr	r3, [r7, #4]
240586f0:	681b      	ldr	r3, [r3, #0]
240586f2:	681b      	ldr	r3, [r3, #0]
240586f4:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
240586f8:	687b      	ldr	r3, [r7, #4]
240586fa:	685b      	ldr	r3, [r3, #4]
240586fc:	3b01      	subs	r3, #1
240586fe:	021a      	lsls	r2, r3, #8
24058700:	687b      	ldr	r3, [r7, #4]
24058702:	681b      	ldr	r3, [r3, #0]
24058704:	430a      	orrs	r2, r1
24058706:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
24058708:	687b      	ldr	r3, [r7, #4]
2405870a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405870c:	9300      	str	r3, [sp, #0]
2405870e:	68bb      	ldr	r3, [r7, #8]
24058710:	2200      	movs	r2, #0
24058712:	2120      	movs	r1, #32
24058714:	6878      	ldr	r0, [r7, #4]
24058716:	f000 fff5 	bl	24059704 <OSPI_WaitFlagStateUntilTimeout>
2405871a:	4603      	mov	r3, r0
2405871c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
2405871e:	7bfb      	ldrb	r3, [r7, #15]
24058720:	2b00      	cmp	r3, #0
24058722:	d146      	bne.n	240587b2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
24058724:	687b      	ldr	r3, [r7, #4]
24058726:	681b      	ldr	r3, [r3, #0]
24058728:	68db      	ldr	r3, [r3, #12]
2405872a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
2405872e:	687b      	ldr	r3, [r7, #4]
24058730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24058732:	1e5a      	subs	r2, r3, #1
24058734:	687b      	ldr	r3, [r7, #4]
24058736:	681b      	ldr	r3, [r3, #0]
24058738:	430a      	orrs	r2, r1
2405873a:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
2405873c:	687b      	ldr	r3, [r7, #4]
2405873e:	681b      	ldr	r3, [r3, #0]
24058740:	681b      	ldr	r3, [r3, #0]
24058742:	f023 0140 	bic.w	r1, r3, #64	; 0x40
24058746:	687b      	ldr	r3, [r7, #4]
24058748:	689a      	ldr	r2, [r3, #8]
2405874a:	687b      	ldr	r3, [r7, #4]
2405874c:	681b      	ldr	r3, [r3, #0]
2405874e:	430a      	orrs	r2, r1
24058750:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
24058752:	687b      	ldr	r3, [r7, #4]
24058754:	681b      	ldr	r3, [r3, #0]
24058756:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
2405875a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
2405875e:	687b      	ldr	r3, [r7, #4]
24058760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24058762:	687b      	ldr	r3, [r7, #4]
24058764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24058766:	431a      	orrs	r2, r3
24058768:	687b      	ldr	r3, [r7, #4]
2405876a:	681b      	ldr	r3, [r3, #0]
2405876c:	430a      	orrs	r2, r1
2405876e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
24058772:	687b      	ldr	r3, [r7, #4]
24058774:	681b      	ldr	r3, [r3, #0]
24058776:	681a      	ldr	r2, [r3, #0]
24058778:	687b      	ldr	r3, [r7, #4]
2405877a:	681b      	ldr	r3, [r3, #0]
2405877c:	f042 0201 	orr.w	r2, r2, #1
24058780:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
24058782:	687b      	ldr	r3, [r7, #4]
24058784:	699b      	ldr	r3, [r3, #24]
24058786:	2b02      	cmp	r3, #2
24058788:	d107      	bne.n	2405879a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
2405878a:	687b      	ldr	r3, [r7, #4]
2405878c:	681b      	ldr	r3, [r3, #0]
2405878e:	689a      	ldr	r2, [r3, #8]
24058790:	687b      	ldr	r3, [r7, #4]
24058792:	681b      	ldr	r3, [r3, #0]
24058794:	f042 0202 	orr.w	r2, r2, #2
24058798:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
2405879a:	687b      	ldr	r3, [r7, #4]
2405879c:	68db      	ldr	r3, [r3, #12]
2405879e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240587a2:	d103      	bne.n	240587ac <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
240587a4:	687b      	ldr	r3, [r7, #4]
240587a6:	2201      	movs	r2, #1
240587a8:	651a      	str	r2, [r3, #80]	; 0x50
240587aa:	e002      	b.n	240587b2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
240587ac:	687b      	ldr	r3, [r7, #4]
240587ae:	2202      	movs	r2, #2
240587b0:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
240587b2:	7bfb      	ldrb	r3, [r7, #15]
}
240587b4:	4618      	mov	r0, r3
240587b6:	3710      	adds	r7, #16
240587b8:	46bd      	mov	sp, r7
240587ba:	bd80      	pop	{r7, pc}
240587bc:	f8e0f8f4 	.word	0xf8e0f8f4

240587c0 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
240587c0:	b580      	push	{r7, lr}
240587c2:	b086      	sub	sp, #24
240587c4:	af00      	add	r7, sp, #0
240587c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
240587c8:	687b      	ldr	r3, [r7, #4]
240587ca:	681b      	ldr	r3, [r3, #0]
240587cc:	3350      	adds	r3, #80	; 0x50
240587ce:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
240587d0:	687b      	ldr	r3, [r7, #4]
240587d2:	681b      	ldr	r3, [r3, #0]
240587d4:	6a1b      	ldr	r3, [r3, #32]
240587d6:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
240587d8:	687b      	ldr	r3, [r7, #4]
240587da:	681b      	ldr	r3, [r3, #0]
240587dc:	681b      	ldr	r3, [r3, #0]
240587de:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
240587e0:	687b      	ldr	r3, [r7, #4]
240587e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240587e4:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
240587e6:	693b      	ldr	r3, [r7, #16]
240587e8:	f003 0304 	and.w	r3, r3, #4
240587ec:	2b00      	cmp	r3, #0
240587ee:	d03a      	beq.n	24058866 <HAL_OSPI_IRQHandler+0xa6>
240587f0:	68fb      	ldr	r3, [r7, #12]
240587f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
240587f6:	2b00      	cmp	r3, #0
240587f8:	d035      	beq.n	24058866 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
240587fa:	68bb      	ldr	r3, [r7, #8]
240587fc:	2b18      	cmp	r3, #24
240587fe:	d10f      	bne.n	24058820 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
24058800:	687b      	ldr	r3, [r7, #4]
24058802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24058804:	781a      	ldrb	r2, [r3, #0]
24058806:	697b      	ldr	r3, [r7, #20]
24058808:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
2405880a:	687b      	ldr	r3, [r7, #4]
2405880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405880e:	1c5a      	adds	r2, r3, #1
24058810:	687b      	ldr	r3, [r7, #4]
24058812:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
24058814:	687b      	ldr	r3, [r7, #4]
24058816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24058818:	1e5a      	subs	r2, r3, #1
2405881a:	687b      	ldr	r3, [r7, #4]
2405881c:	649a      	str	r2, [r3, #72]	; 0x48
2405881e:	e012      	b.n	24058846 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24058820:	68bb      	ldr	r3, [r7, #8]
24058822:	2b28      	cmp	r3, #40	; 0x28
24058824:	d10f      	bne.n	24058846 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
24058826:	687b      	ldr	r3, [r7, #4]
24058828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405882a:	697a      	ldr	r2, [r7, #20]
2405882c:	7812      	ldrb	r2, [r2, #0]
2405882e:	b2d2      	uxtb	r2, r2
24058830:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
24058832:	687b      	ldr	r3, [r7, #4]
24058834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24058836:	1c5a      	adds	r2, r3, #1
24058838:	687b      	ldr	r3, [r7, #4]
2405883a:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
2405883c:	687b      	ldr	r3, [r7, #4]
2405883e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24058840:	1e5a      	subs	r2, r3, #1
24058842:	687b      	ldr	r3, [r7, #4]
24058844:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
24058846:	687b      	ldr	r3, [r7, #4]
24058848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405884a:	2b00      	cmp	r3, #0
2405884c:	d107      	bne.n	2405885e <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
2405884e:	687b      	ldr	r3, [r7, #4]
24058850:	681b      	ldr	r3, [r3, #0]
24058852:	681a      	ldr	r2, [r3, #0]
24058854:	687b      	ldr	r3, [r7, #4]
24058856:	681b      	ldr	r3, [r3, #0]
24058858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2405885c:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
2405885e:	6878      	ldr	r0, [r7, #4]
24058860:	f000 f9e0 	bl	24058c24 <HAL_OSPI_FifoThresholdCallback>
24058864:	e0e7      	b.n	24058a36 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
24058866:	693b      	ldr	r3, [r7, #16]
24058868:	f003 0302 	and.w	r3, r3, #2
2405886c:	2b00      	cmp	r3, #0
2405886e:	d067      	beq.n	24058940 <HAL_OSPI_IRQHandler+0x180>
24058870:	68fb      	ldr	r3, [r7, #12]
24058872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24058876:	2b00      	cmp	r3, #0
24058878:	d062      	beq.n	24058940 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405887a:	68bb      	ldr	r3, [r7, #8]
2405887c:	2b28      	cmp	r3, #40	; 0x28
2405887e:	d131      	bne.n	240588e4 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
24058880:	687b      	ldr	r3, [r7, #4]
24058882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24058884:	2b00      	cmp	r3, #0
24058886:	d015      	beq.n	240588b4 <HAL_OSPI_IRQHandler+0xf4>
24058888:	693b      	ldr	r3, [r7, #16]
2405888a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
2405888e:	2b00      	cmp	r3, #0
24058890:	d010      	beq.n	240588b4 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
24058892:	687b      	ldr	r3, [r7, #4]
24058894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24058896:	697a      	ldr	r2, [r7, #20]
24058898:	7812      	ldrb	r2, [r2, #0]
2405889a:	b2d2      	uxtb	r2, r2
2405889c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
2405889e:	687b      	ldr	r3, [r7, #4]
240588a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240588a2:	1c5a      	adds	r2, r3, #1
240588a4:	687b      	ldr	r3, [r7, #4]
240588a6:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
240588a8:	687b      	ldr	r3, [r7, #4]
240588aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240588ac:	1e5a      	subs	r2, r3, #1
240588ae:	687b      	ldr	r3, [r7, #4]
240588b0:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
240588b2:	e0bd      	b.n	24058a30 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
240588b4:	687b      	ldr	r3, [r7, #4]
240588b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240588b8:	2b00      	cmp	r3, #0
240588ba:	f040 80b9 	bne.w	24058a30 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
240588be:	687b      	ldr	r3, [r7, #4]
240588c0:	681b      	ldr	r3, [r3, #0]
240588c2:	2202      	movs	r2, #2
240588c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
240588c6:	687b      	ldr	r3, [r7, #4]
240588c8:	681b      	ldr	r3, [r3, #0]
240588ca:	681a      	ldr	r2, [r3, #0]
240588cc:	687b      	ldr	r3, [r7, #4]
240588ce:	681b      	ldr	r3, [r3, #0]
240588d0:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
240588d4:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
240588d6:	687b      	ldr	r3, [r7, #4]
240588d8:	2202      	movs	r2, #2
240588da:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
240588dc:	6878      	ldr	r0, [r7, #4]
240588de:	f000 f9b5 	bl	24058c4c <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
240588e2:	e0a5      	b.n	24058a30 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
240588e4:	687b      	ldr	r3, [r7, #4]
240588e6:	681b      	ldr	r3, [r3, #0]
240588e8:	2202      	movs	r2, #2
240588ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
240588ec:	687b      	ldr	r3, [r7, #4]
240588ee:	681b      	ldr	r3, [r3, #0]
240588f0:	681a      	ldr	r2, [r3, #0]
240588f2:	687b      	ldr	r3, [r7, #4]
240588f4:	681b      	ldr	r3, [r3, #0]
240588f6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
240588fa:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
240588fc:	687b      	ldr	r3, [r7, #4]
240588fe:	2202      	movs	r2, #2
24058900:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
24058902:	68bb      	ldr	r3, [r7, #8]
24058904:	2b18      	cmp	r3, #24
24058906:	d103      	bne.n	24058910 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
24058908:	6878      	ldr	r0, [r7, #4]
2405890a:	f000 f9a9 	bl	24058c60 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405890e:	e08f      	b.n	24058a30 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
24058910:	68bb      	ldr	r3, [r7, #8]
24058912:	2b08      	cmp	r3, #8
24058914:	d103      	bne.n	2405891e <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
24058916:	6878      	ldr	r0, [r7, #4]
24058918:	f000 f98e 	bl	24058c38 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405891c:	e088      	b.n	24058a30 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
2405891e:	68bb      	ldr	r3, [r7, #8]
24058920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24058924:	f040 8084 	bne.w	24058a30 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
24058928:	687b      	ldr	r3, [r7, #4]
2405892a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405892c:	2b00      	cmp	r3, #0
2405892e:	d103      	bne.n	24058938 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
24058930:	6878      	ldr	r0, [r7, #4]
24058932:	f000 f96d 	bl	24058c10 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24058936:	e07b      	b.n	24058a30 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
24058938:	6878      	ldr	r0, [r7, #4]
2405893a:	f000 f95f 	bl	24058bfc <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405893e:	e077      	b.n	24058a30 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
24058940:	693b      	ldr	r3, [r7, #16]
24058942:	f003 0308 	and.w	r3, r3, #8
24058946:	2b00      	cmp	r3, #0
24058948:	d01e      	beq.n	24058988 <HAL_OSPI_IRQHandler+0x1c8>
2405894a:	68fb      	ldr	r3, [r7, #12]
2405894c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24058950:	2b00      	cmp	r3, #0
24058952:	d019      	beq.n	24058988 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
24058954:	687b      	ldr	r3, [r7, #4]
24058956:	681b      	ldr	r3, [r3, #0]
24058958:	2208      	movs	r2, #8
2405895a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
2405895c:	687b      	ldr	r3, [r7, #4]
2405895e:	681b      	ldr	r3, [r3, #0]
24058960:	681b      	ldr	r3, [r3, #0]
24058962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24058966:	2b00      	cmp	r3, #0
24058968:	d00a      	beq.n	24058980 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
2405896a:	687b      	ldr	r3, [r7, #4]
2405896c:	681b      	ldr	r3, [r3, #0]
2405896e:	681a      	ldr	r2, [r3, #0]
24058970:	687b      	ldr	r3, [r7, #4]
24058972:	681b      	ldr	r3, [r3, #0]
24058974:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
24058978:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
2405897a:	687b      	ldr	r3, [r7, #4]
2405897c:	2202      	movs	r2, #2
2405897e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
24058980:	6878      	ldr	r0, [r7, #4]
24058982:	f000 f977 	bl	24058c74 <HAL_OSPI_StatusMatchCallback>
24058986:	e056      	b.n	24058a36 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
24058988:	693b      	ldr	r3, [r7, #16]
2405898a:	f003 0301 	and.w	r3, r3, #1
2405898e:	2b00      	cmp	r3, #0
24058990:	d03c      	beq.n	24058a0c <HAL_OSPI_IRQHandler+0x24c>
24058992:	68fb      	ldr	r3, [r7, #12]
24058994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24058998:	2b00      	cmp	r3, #0
2405899a:	d037      	beq.n	24058a0c <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
2405899c:	687b      	ldr	r3, [r7, #4]
2405899e:	681b      	ldr	r3, [r3, #0]
240589a0:	2201      	movs	r2, #1
240589a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
240589a4:	687b      	ldr	r3, [r7, #4]
240589a6:	681b      	ldr	r3, [r3, #0]
240589a8:	681a      	ldr	r2, [r3, #0]
240589aa:	687b      	ldr	r3, [r7, #4]
240589ac:	681b      	ldr	r3, [r3, #0]
240589ae:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
240589b2:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
240589b4:	687b      	ldr	r3, [r7, #4]
240589b6:	2202      	movs	r2, #2
240589b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
240589ba:	687b      	ldr	r3, [r7, #4]
240589bc:	681b      	ldr	r3, [r3, #0]
240589be:	681b      	ldr	r3, [r3, #0]
240589c0:	f003 0304 	and.w	r3, r3, #4
240589c4:	2b00      	cmp	r3, #0
240589c6:	d01a      	beq.n	240589fe <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
240589c8:	687b      	ldr	r3, [r7, #4]
240589ca:	681b      	ldr	r3, [r3, #0]
240589cc:	681a      	ldr	r2, [r3, #0]
240589ce:	687b      	ldr	r3, [r7, #4]
240589d0:	681b      	ldr	r3, [r3, #0]
240589d2:	f022 0204 	bic.w	r2, r2, #4
240589d6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
240589d8:	687b      	ldr	r3, [r7, #4]
240589da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240589dc:	4a18      	ldr	r2, [pc, #96]	; (24058a40 <HAL_OSPI_IRQHandler+0x280>)
240589de:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
240589e0:	687b      	ldr	r3, [r7, #4]
240589e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240589e4:	4618      	mov	r0, r3
240589e6:	f7ff fe07 	bl	240585f8 <HAL_MDMA_Abort_IT>
240589ea:	4603      	mov	r3, r0
240589ec:	2b00      	cmp	r3, #0
240589ee:	d021      	beq.n	24058a34 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
240589f0:	687b      	ldr	r3, [r7, #4]
240589f2:	2202      	movs	r2, #2
240589f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
240589f6:	6878      	ldr	r0, [r7, #4]
240589f8:	f000 f900 	bl	24058bfc <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
240589fc:	e01a      	b.n	24058a34 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
240589fe:	687b      	ldr	r3, [r7, #4]
24058a00:	2202      	movs	r2, #2
24058a02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
24058a04:	6878      	ldr	r0, [r7, #4]
24058a06:	f000 f8f9 	bl	24058bfc <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
24058a0a:	e013      	b.n	24058a34 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
24058a0c:	693b      	ldr	r3, [r7, #16]
24058a0e:	f003 0310 	and.w	r3, r3, #16
24058a12:	2b00      	cmp	r3, #0
24058a14:	d00f      	beq.n	24058a36 <HAL_OSPI_IRQHandler+0x276>
24058a16:	68fb      	ldr	r3, [r7, #12]
24058a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
24058a1c:	2b00      	cmp	r3, #0
24058a1e:	d00a      	beq.n	24058a36 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
24058a20:	687b      	ldr	r3, [r7, #4]
24058a22:	681b      	ldr	r3, [r3, #0]
24058a24:	2210      	movs	r2, #16
24058a26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
24058a28:	6878      	ldr	r0, [r7, #4]
24058a2a:	f000 f92d 	bl	24058c88 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
24058a2e:	e002      	b.n	24058a36 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24058a30:	bf00      	nop
24058a32:	e000      	b.n	24058a36 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
24058a34:	bf00      	nop
}
24058a36:	bf00      	nop
24058a38:	3718      	adds	r7, #24
24058a3a:	46bd      	mov	sp, r7
24058a3c:	bd80      	pop	{r7, pc}
24058a3e:	bf00      	nop
24058a40:	2405968d 	.word	0x2405968d

24058a44 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
24058a44:	b580      	push	{r7, lr}
24058a46:	b08a      	sub	sp, #40	; 0x28
24058a48:	af02      	add	r7, sp, #8
24058a4a:	60f8      	str	r0, [r7, #12]
24058a4c:	60b9      	str	r1, [r7, #8]
24058a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
24058a50:	f7fa f960 	bl	24052d14 <HAL_GetTick>
24058a54:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
24058a56:	68bb      	ldr	r3, [r7, #8]
24058a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24058a5a:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
24058a5c:	68fb      	ldr	r3, [r7, #12]
24058a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24058a60:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
24058a62:	697b      	ldr	r3, [r7, #20]
24058a64:	2b02      	cmp	r3, #2
24058a66:	d104      	bne.n	24058a72 <HAL_OSPI_Command+0x2e>
24058a68:	68fb      	ldr	r3, [r7, #12]
24058a6a:	68db      	ldr	r3, [r3, #12]
24058a6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24058a70:	d115      	bne.n	24058a9e <HAL_OSPI_Command+0x5a>
24058a72:	697b      	ldr	r3, [r7, #20]
24058a74:	2b14      	cmp	r3, #20
24058a76:	d107      	bne.n	24058a88 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
24058a78:	68bb      	ldr	r3, [r7, #8]
24058a7a:	681b      	ldr	r3, [r3, #0]
24058a7c:	2b02      	cmp	r3, #2
24058a7e:	d00e      	beq.n	24058a9e <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
24058a80:	68bb      	ldr	r3, [r7, #8]
24058a82:	681b      	ldr	r3, [r3, #0]
24058a84:	2b03      	cmp	r3, #3
24058a86:	d00a      	beq.n	24058a9e <HAL_OSPI_Command+0x5a>
24058a88:	697b      	ldr	r3, [r7, #20]
24058a8a:	2b24      	cmp	r3, #36	; 0x24
24058a8c:	d15b      	bne.n	24058b46 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
24058a8e:	68bb      	ldr	r3, [r7, #8]
24058a90:	681b      	ldr	r3, [r3, #0]
24058a92:	2b01      	cmp	r3, #1
24058a94:	d003      	beq.n	24058a9e <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
24058a96:	68bb      	ldr	r3, [r7, #8]
24058a98:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
24058a9a:	2b03      	cmp	r3, #3
24058a9c:	d153      	bne.n	24058b46 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
24058a9e:	687b      	ldr	r3, [r7, #4]
24058aa0:	9300      	str	r3, [sp, #0]
24058aa2:	69bb      	ldr	r3, [r7, #24]
24058aa4:	2200      	movs	r2, #0
24058aa6:	2120      	movs	r1, #32
24058aa8:	68f8      	ldr	r0, [r7, #12]
24058aaa:	f000 fe2b 	bl	24059704 <OSPI_WaitFlagStateUntilTimeout>
24058aae:	4603      	mov	r3, r0
24058ab0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
24058ab2:	7ffb      	ldrb	r3, [r7, #31]
24058ab4:	2b00      	cmp	r3, #0
24058ab6:	d14c      	bne.n	24058b52 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
24058ab8:	68fb      	ldr	r3, [r7, #12]
24058aba:	2200      	movs	r2, #0
24058abc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
24058abe:	68b9      	ldr	r1, [r7, #8]
24058ac0:	68f8      	ldr	r0, [r7, #12]
24058ac2:	f000 fe57 	bl	24059774 <OSPI_ConfigCmd>
24058ac6:	4603      	mov	r3, r0
24058ac8:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
24058aca:	7ffb      	ldrb	r3, [r7, #31]
24058acc:	2b00      	cmp	r3, #0
24058ace:	d140      	bne.n	24058b52 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
24058ad0:	68bb      	ldr	r3, [r7, #8]
24058ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24058ad4:	2b00      	cmp	r3, #0
24058ad6:	d10e      	bne.n	24058af6 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
24058ad8:	687b      	ldr	r3, [r7, #4]
24058ada:	9300      	str	r3, [sp, #0]
24058adc:	69bb      	ldr	r3, [r7, #24]
24058ade:	2201      	movs	r2, #1
24058ae0:	2102      	movs	r1, #2
24058ae2:	68f8      	ldr	r0, [r7, #12]
24058ae4:	f000 fe0e 	bl	24059704 <OSPI_WaitFlagStateUntilTimeout>
24058ae8:	4603      	mov	r3, r0
24058aea:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
24058aec:	68fb      	ldr	r3, [r7, #12]
24058aee:	681b      	ldr	r3, [r3, #0]
24058af0:	2202      	movs	r2, #2
24058af2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
24058af4:	e02d      	b.n	24058b52 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
24058af6:	68bb      	ldr	r3, [r7, #8]
24058af8:	681b      	ldr	r3, [r3, #0]
24058afa:	2b00      	cmp	r3, #0
24058afc:	d103      	bne.n	24058b06 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
24058afe:	68fb      	ldr	r3, [r7, #12]
24058b00:	2204      	movs	r2, #4
24058b02:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
24058b04:	e025      	b.n	24058b52 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
24058b06:	68bb      	ldr	r3, [r7, #8]
24058b08:	681b      	ldr	r3, [r3, #0]
24058b0a:	2b01      	cmp	r3, #1
24058b0c:	d10b      	bne.n	24058b26 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
24058b0e:	68fb      	ldr	r3, [r7, #12]
24058b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24058b12:	2b24      	cmp	r3, #36	; 0x24
24058b14:	d103      	bne.n	24058b1e <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
24058b16:	68fb      	ldr	r3, [r7, #12]
24058b18:	2204      	movs	r2, #4
24058b1a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
24058b1c:	e019      	b.n	24058b52 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
24058b1e:	68fb      	ldr	r3, [r7, #12]
24058b20:	2214      	movs	r2, #20
24058b22:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
24058b24:	e015      	b.n	24058b52 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
24058b26:	68bb      	ldr	r3, [r7, #8]
24058b28:	681b      	ldr	r3, [r3, #0]
24058b2a:	2b02      	cmp	r3, #2
24058b2c:	d111      	bne.n	24058b52 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
24058b2e:	68fb      	ldr	r3, [r7, #12]
24058b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24058b32:	2b14      	cmp	r3, #20
24058b34:	d103      	bne.n	24058b3e <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
24058b36:	68fb      	ldr	r3, [r7, #12]
24058b38:	2204      	movs	r2, #4
24058b3a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
24058b3c:	e009      	b.n	24058b52 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
24058b3e:	68fb      	ldr	r3, [r7, #12]
24058b40:	2224      	movs	r2, #36	; 0x24
24058b42:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
24058b44:	e005      	b.n	24058b52 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
24058b46:	2301      	movs	r3, #1
24058b48:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24058b4a:	68fb      	ldr	r3, [r7, #12]
24058b4c:	2210      	movs	r2, #16
24058b4e:	655a      	str	r2, [r3, #84]	; 0x54
24058b50:	e000      	b.n	24058b54 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
24058b52:	bf00      	nop
  }

  /* Return function status */
  return status;
24058b54:	7ffb      	ldrb	r3, [r7, #31]
}
24058b56:	4618      	mov	r0, r3
24058b58:	3720      	adds	r7, #32
24058b5a:	46bd      	mov	sp, r7
24058b5c:	bd80      	pop	{r7, pc}
	...

24058b60 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
24058b60:	b580      	push	{r7, lr}
24058b62:	b086      	sub	sp, #24
24058b64:	af02      	add	r7, sp, #8
24058b66:	6078      	str	r0, [r7, #4]
24058b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24058b6a:	f7fa f8d3 	bl	24052d14 <HAL_GetTick>
24058b6e:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
24058b70:	687b      	ldr	r3, [r7, #4]
24058b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24058b74:	2b04      	cmp	r3, #4
24058b76:	d134      	bne.n	24058be2 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
24058b78:	687b      	ldr	r3, [r7, #4]
24058b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24058b7c:	9300      	str	r3, [sp, #0]
24058b7e:	68bb      	ldr	r3, [r7, #8]
24058b80:	2200      	movs	r2, #0
24058b82:	2120      	movs	r1, #32
24058b84:	6878      	ldr	r0, [r7, #4]
24058b86:	f000 fdbd 	bl	24059704 <OSPI_WaitFlagStateUntilTimeout>
24058b8a:	4603      	mov	r3, r0
24058b8c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
24058b8e:	7bfb      	ldrb	r3, [r7, #15]
24058b90:	2b00      	cmp	r3, #0
24058b92:	d12b      	bne.n	24058bec <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
24058b94:	687b      	ldr	r3, [r7, #4]
24058b96:	2288      	movs	r2, #136	; 0x88
24058b98:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
24058b9a:	683b      	ldr	r3, [r7, #0]
24058b9c:	681b      	ldr	r3, [r3, #0]
24058b9e:	2b08      	cmp	r3, #8
24058ba0:	d111      	bne.n	24058bc6 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
24058ba2:	687b      	ldr	r3, [r7, #4]
24058ba4:	681b      	ldr	r3, [r3, #0]
24058ba6:	683a      	ldr	r2, [r7, #0]
24058ba8:	6852      	ldr	r2, [r2, #4]
24058baa:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
24058bae:	687b      	ldr	r3, [r7, #4]
24058bb0:	681b      	ldr	r3, [r3, #0]
24058bb2:	2210      	movs	r2, #16
24058bb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
24058bb6:	687b      	ldr	r3, [r7, #4]
24058bb8:	681b      	ldr	r3, [r3, #0]
24058bba:	681a      	ldr	r2, [r3, #0]
24058bbc:	687b      	ldr	r3, [r7, #4]
24058bbe:	681b      	ldr	r3, [r3, #0]
24058bc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
24058bc4:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
24058bc6:	687b      	ldr	r3, [r7, #4]
24058bc8:	681b      	ldr	r3, [r3, #0]
24058bca:	681a      	ldr	r2, [r3, #0]
24058bcc:	4b0a      	ldr	r3, [pc, #40]	; (24058bf8 <HAL_OSPI_MemoryMapped+0x98>)
24058bce:	4013      	ands	r3, r2
24058bd0:	683a      	ldr	r2, [r7, #0]
24058bd2:	6812      	ldr	r2, [r2, #0]
24058bd4:	431a      	orrs	r2, r3
24058bd6:	687b      	ldr	r3, [r7, #4]
24058bd8:	681b      	ldr	r3, [r3, #0]
24058bda:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
24058bde:	601a      	str	r2, [r3, #0]
24058be0:	e004      	b.n	24058bec <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
24058be2:	2301      	movs	r3, #1
24058be4:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24058be6:	687b      	ldr	r3, [r7, #4]
24058be8:	2210      	movs	r2, #16
24058bea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
24058bec:	7bfb      	ldrb	r3, [r7, #15]
}
24058bee:	4618      	mov	r0, r3
24058bf0:	3710      	adds	r7, #16
24058bf2:	46bd      	mov	sp, r7
24058bf4:	bd80      	pop	{r7, pc}
24058bf6:	bf00      	nop
24058bf8:	cffffff7 	.word	0xcffffff7

24058bfc <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
24058bfc:	b480      	push	{r7}
24058bfe:	b083      	sub	sp, #12
24058c00:	af00      	add	r7, sp, #0
24058c02:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
24058c04:	bf00      	nop
24058c06:	370c      	adds	r7, #12
24058c08:	46bd      	mov	sp, r7
24058c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c0e:	4770      	bx	lr

24058c10 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
24058c10:	b480      	push	{r7}
24058c12:	b083      	sub	sp, #12
24058c14:	af00      	add	r7, sp, #0
24058c16:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
24058c18:	bf00      	nop
24058c1a:	370c      	adds	r7, #12
24058c1c:	46bd      	mov	sp, r7
24058c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c22:	4770      	bx	lr

24058c24 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
24058c24:	b480      	push	{r7}
24058c26:	b083      	sub	sp, #12
24058c28:	af00      	add	r7, sp, #0
24058c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
24058c2c:	bf00      	nop
24058c2e:	370c      	adds	r7, #12
24058c30:	46bd      	mov	sp, r7
24058c32:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c36:	4770      	bx	lr

24058c38 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
24058c38:	b480      	push	{r7}
24058c3a:	b083      	sub	sp, #12
24058c3c:	af00      	add	r7, sp, #0
24058c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
24058c40:	bf00      	nop
24058c42:	370c      	adds	r7, #12
24058c44:	46bd      	mov	sp, r7
24058c46:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c4a:	4770      	bx	lr

24058c4c <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
24058c4c:	b480      	push	{r7}
24058c4e:	b083      	sub	sp, #12
24058c50:	af00      	add	r7, sp, #0
24058c52:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
24058c54:	bf00      	nop
24058c56:	370c      	adds	r7, #12
24058c58:	46bd      	mov	sp, r7
24058c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c5e:	4770      	bx	lr

24058c60 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
24058c60:	b480      	push	{r7}
24058c62:	b083      	sub	sp, #12
24058c64:	af00      	add	r7, sp, #0
24058c66:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
24058c68:	bf00      	nop
24058c6a:	370c      	adds	r7, #12
24058c6c:	46bd      	mov	sp, r7
24058c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c72:	4770      	bx	lr

24058c74 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
24058c74:	b480      	push	{r7}
24058c76:	b083      	sub	sp, #12
24058c78:	af00      	add	r7, sp, #0
24058c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
24058c7c:	bf00      	nop
24058c7e:	370c      	adds	r7, #12
24058c80:	46bd      	mov	sp, r7
24058c82:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c86:	4770      	bx	lr

24058c88 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
24058c88:	b480      	push	{r7}
24058c8a:	b083      	sub	sp, #12
24058c8c:	af00      	add	r7, sp, #0
24058c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
24058c90:	bf00      	nop
24058c92:	370c      	adds	r7, #12
24058c94:	46bd      	mov	sp, r7
24058c96:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c9a:	4770      	bx	lr

24058c9c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
24058c9c:	b480      	push	{r7}
24058c9e:	b083      	sub	sp, #12
24058ca0:	af00      	add	r7, sp, #0
24058ca2:	6078      	str	r0, [r7, #4]
24058ca4:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
24058ca6:	687b      	ldr	r3, [r7, #4]
24058ca8:	683a      	ldr	r2, [r7, #0]
24058caa:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
24058cac:	2300      	movs	r3, #0
}
24058cae:	4618      	mov	r0, r3
24058cb0:	370c      	adds	r7, #12
24058cb2:	46bd      	mov	sp, r7
24058cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
24058cb8:	4770      	bx	lr
	...

24058cbc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
24058cbc:	b580      	push	{r7, lr}
24058cbe:	b094      	sub	sp, #80	; 0x50
24058cc0:	af00      	add	r7, sp, #0
24058cc2:	60f8      	str	r0, [r7, #12]
24058cc4:	60b9      	str	r1, [r7, #8]
24058cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24058cc8:	2300      	movs	r3, #0
24058cca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
24058cce:	2300      	movs	r3, #0
24058cd0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
24058cd4:	68fb      	ldr	r3, [r7, #12]
24058cd6:	681b      	ldr	r3, [r3, #0]
24058cd8:	4a9d      	ldr	r2, [pc, #628]	; (24058f50 <HAL_OSPIM_Config+0x294>)
24058cda:	4293      	cmp	r3, r2
24058cdc:	d105      	bne.n	24058cea <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
24058cde:	2300      	movs	r3, #0
24058ce0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
24058ce2:	2301      	movs	r3, #1
24058ce4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
24058ce8:	e004      	b.n	24058cf4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
24058cea:	2301      	movs	r3, #1
24058cec:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
24058cee:	2300      	movs	r3, #0
24058cf0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
24058cf4:	2300      	movs	r3, #0
24058cf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
24058cfa:	e01d      	b.n	24058d38 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
24058cfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
24058d00:	3301      	adds	r3, #1
24058d02:	b2d8      	uxtb	r0, r3
24058d04:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
24058d08:	f107 0114 	add.w	r1, r7, #20
24058d0c:	4613      	mov	r3, r2
24058d0e:	005b      	lsls	r3, r3, #1
24058d10:	4413      	add	r3, r2
24058d12:	00db      	lsls	r3, r3, #3
24058d14:	440b      	add	r3, r1
24058d16:	4619      	mov	r1, r3
24058d18:	f000 fea6 	bl	24059a68 <OSPIM_GetConfig>
24058d1c:	4603      	mov	r3, r0
24058d1e:	2b00      	cmp	r3, #0
24058d20:	d005      	beq.n	24058d2e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
24058d22:	2301      	movs	r3, #1
24058d24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
24058d28:	68fb      	ldr	r3, [r7, #12]
24058d2a:	2208      	movs	r2, #8
24058d2c:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
24058d2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
24058d32:	3301      	adds	r3, #1
24058d34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
24058d38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
24058d3c:	2b01      	cmp	r3, #1
24058d3e:	d9dd      	bls.n	24058cfc <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
24058d40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
24058d44:	2b00      	cmp	r3, #0
24058d46:	f040 8495 	bne.w	24059674 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
24058d4a:	4b81      	ldr	r3, [pc, #516]	; (24058f50 <HAL_OSPIM_Config+0x294>)
24058d4c:	681b      	ldr	r3, [r3, #0]
24058d4e:	f003 0301 	and.w	r3, r3, #1
24058d52:	2b00      	cmp	r3, #0
24058d54:	d00b      	beq.n	24058d6e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
24058d56:	4b7e      	ldr	r3, [pc, #504]	; (24058f50 <HAL_OSPIM_Config+0x294>)
24058d58:	681b      	ldr	r3, [r3, #0]
24058d5a:	4a7d      	ldr	r2, [pc, #500]	; (24058f50 <HAL_OSPIM_Config+0x294>)
24058d5c:	f023 0301 	bic.w	r3, r3, #1
24058d60:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
24058d62:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
24058d66:	f043 0301 	orr.w	r3, r3, #1
24058d6a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
24058d6e:	4b79      	ldr	r3, [pc, #484]	; (24058f54 <HAL_OSPIM_Config+0x298>)
24058d70:	681b      	ldr	r3, [r3, #0]
24058d72:	f003 0301 	and.w	r3, r3, #1
24058d76:	2b00      	cmp	r3, #0
24058d78:	d00b      	beq.n	24058d92 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
24058d7a:	4b76      	ldr	r3, [pc, #472]	; (24058f54 <HAL_OSPIM_Config+0x298>)
24058d7c:	681b      	ldr	r3, [r3, #0]
24058d7e:	4a75      	ldr	r2, [pc, #468]	; (24058f54 <HAL_OSPIM_Config+0x298>)
24058d80:	f023 0301 	bic.w	r3, r3, #1
24058d84:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
24058d86:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
24058d8a:	f043 0302 	orr.w	r3, r3, #2
24058d8e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
24058d92:	4971      	ldr	r1, [pc, #452]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058d96:	4613      	mov	r3, r2
24058d98:	005b      	lsls	r3, r3, #1
24058d9a:	4413      	add	r3, r2
24058d9c:	00db      	lsls	r3, r3, #3
24058d9e:	3350      	adds	r3, #80	; 0x50
24058da0:	443b      	add	r3, r7
24058da2:	3b34      	subs	r3, #52	; 0x34
24058da4:	681b      	ldr	r3, [r3, #0]
24058da6:	3b01      	subs	r3, #1
24058da8:	009b      	lsls	r3, r3, #2
24058daa:	440b      	add	r3, r1
24058dac:	6859      	ldr	r1, [r3, #4]
24058dae:	486a      	ldr	r0, [pc, #424]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058db2:	4613      	mov	r3, r2
24058db4:	005b      	lsls	r3, r3, #1
24058db6:	4413      	add	r3, r2
24058db8:	00db      	lsls	r3, r3, #3
24058dba:	3350      	adds	r3, #80	; 0x50
24058dbc:	443b      	add	r3, r7
24058dbe:	3b34      	subs	r3, #52	; 0x34
24058dc0:	681b      	ldr	r3, [r3, #0]
24058dc2:	3b01      	subs	r3, #1
24058dc4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
24058dc8:	009b      	lsls	r3, r3, #2
24058dca:	4403      	add	r3, r0
24058dcc:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
24058dce:	4b62      	ldr	r3, [pc, #392]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058dd0:	681b      	ldr	r3, [r3, #0]
24058dd2:	f003 0301 	and.w	r3, r3, #1
24058dd6:	2b00      	cmp	r3, #0
24058dd8:	f000 80c0 	beq.w	24058f5c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
24058ddc:	4b5e      	ldr	r3, [pc, #376]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058dde:	681b      	ldr	r3, [r3, #0]
24058de0:	4a5d      	ldr	r2, [pc, #372]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058de2:	f023 0301 	bic.w	r3, r3, #1
24058de6:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
24058de8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
24058dec:	2b01      	cmp	r3, #1
24058dee:	f040 8162 	bne.w	240590b6 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
24058df2:	4959      	ldr	r1, [pc, #356]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058df4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058df8:	4613      	mov	r3, r2
24058dfa:	005b      	lsls	r3, r3, #1
24058dfc:	4413      	add	r3, r2
24058dfe:	00db      	lsls	r3, r3, #3
24058e00:	3350      	adds	r3, #80	; 0x50
24058e02:	443b      	add	r3, r7
24058e04:	3b3c      	subs	r3, #60	; 0x3c
24058e06:	681b      	ldr	r3, [r3, #0]
24058e08:	3b01      	subs	r3, #1
24058e0a:	009b      	lsls	r3, r3, #2
24058e0c:	440b      	add	r3, r1
24058e0e:	6859      	ldr	r1, [r3, #4]
24058e10:	4851      	ldr	r0, [pc, #324]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058e12:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058e16:	4613      	mov	r3, r2
24058e18:	005b      	lsls	r3, r3, #1
24058e1a:	4413      	add	r3, r2
24058e1c:	00db      	lsls	r3, r3, #3
24058e1e:	3350      	adds	r3, #80	; 0x50
24058e20:	443b      	add	r3, r7
24058e22:	3b3c      	subs	r3, #60	; 0x3c
24058e24:	681b      	ldr	r3, [r3, #0]
24058e26:	3b01      	subs	r3, #1
24058e28:	f041 0202 	orr.w	r2, r1, #2
24058e2c:	009b      	lsls	r3, r3, #2
24058e2e:	4403      	add	r3, r0
24058e30:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
24058e32:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058e36:	4613      	mov	r3, r2
24058e38:	005b      	lsls	r3, r3, #1
24058e3a:	4413      	add	r3, r2
24058e3c:	00db      	lsls	r3, r3, #3
24058e3e:	3350      	adds	r3, #80	; 0x50
24058e40:	443b      	add	r3, r7
24058e42:	3b38      	subs	r3, #56	; 0x38
24058e44:	681b      	ldr	r3, [r3, #0]
24058e46:	2b00      	cmp	r3, #0
24058e48:	d01f      	beq.n	24058e8a <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
24058e4a:	4943      	ldr	r1, [pc, #268]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058e4c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058e50:	4613      	mov	r3, r2
24058e52:	005b      	lsls	r3, r3, #1
24058e54:	4413      	add	r3, r2
24058e56:	00db      	lsls	r3, r3, #3
24058e58:	3350      	adds	r3, #80	; 0x50
24058e5a:	443b      	add	r3, r7
24058e5c:	3b38      	subs	r3, #56	; 0x38
24058e5e:	681b      	ldr	r3, [r3, #0]
24058e60:	3b01      	subs	r3, #1
24058e62:	009b      	lsls	r3, r3, #2
24058e64:	440b      	add	r3, r1
24058e66:	6859      	ldr	r1, [r3, #4]
24058e68:	483b      	ldr	r0, [pc, #236]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058e6a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058e6e:	4613      	mov	r3, r2
24058e70:	005b      	lsls	r3, r3, #1
24058e72:	4413      	add	r3, r2
24058e74:	00db      	lsls	r3, r3, #3
24058e76:	3350      	adds	r3, #80	; 0x50
24058e78:	443b      	add	r3, r7
24058e7a:	3b38      	subs	r3, #56	; 0x38
24058e7c:	681b      	ldr	r3, [r3, #0]
24058e7e:	3b01      	subs	r3, #1
24058e80:	f041 0220 	orr.w	r2, r1, #32
24058e84:	009b      	lsls	r3, r3, #2
24058e86:	4403      	add	r3, r0
24058e88:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
24058e8a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058e8e:	4613      	mov	r3, r2
24058e90:	005b      	lsls	r3, r3, #1
24058e92:	4413      	add	r3, r2
24058e94:	00db      	lsls	r3, r3, #3
24058e96:	3350      	adds	r3, #80	; 0x50
24058e98:	443b      	add	r3, r7
24058e9a:	3b30      	subs	r3, #48	; 0x30
24058e9c:	681b      	ldr	r3, [r3, #0]
24058e9e:	2b00      	cmp	r3, #0
24058ea0:	d023      	beq.n	24058eea <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
24058ea2:	492d      	ldr	r1, [pc, #180]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058ea4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058ea8:	4613      	mov	r3, r2
24058eaa:	005b      	lsls	r3, r3, #1
24058eac:	4413      	add	r3, r2
24058eae:	00db      	lsls	r3, r3, #3
24058eb0:	3350      	adds	r3, #80	; 0x50
24058eb2:	443b      	add	r3, r7
24058eb4:	3b30      	subs	r3, #48	; 0x30
24058eb6:	681b      	ldr	r3, [r3, #0]
24058eb8:	3b01      	subs	r3, #1
24058eba:	f003 0301 	and.w	r3, r3, #1
24058ebe:	009b      	lsls	r3, r3, #2
24058ec0:	440b      	add	r3, r1
24058ec2:	6859      	ldr	r1, [r3, #4]
24058ec4:	4824      	ldr	r0, [pc, #144]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058ec6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058eca:	4613      	mov	r3, r2
24058ecc:	005b      	lsls	r3, r3, #1
24058ece:	4413      	add	r3, r2
24058ed0:	00db      	lsls	r3, r3, #3
24058ed2:	3350      	adds	r3, #80	; 0x50
24058ed4:	443b      	add	r3, r7
24058ed6:	3b30      	subs	r3, #48	; 0x30
24058ed8:	681b      	ldr	r3, [r3, #0]
24058eda:	3b01      	subs	r3, #1
24058edc:	f003 0301 	and.w	r3, r3, #1
24058ee0:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
24058ee4:	009b      	lsls	r3, r3, #2
24058ee6:	4403      	add	r3, r0
24058ee8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
24058eea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058eee:	4613      	mov	r3, r2
24058ef0:	005b      	lsls	r3, r3, #1
24058ef2:	4413      	add	r3, r2
24058ef4:	00db      	lsls	r3, r3, #3
24058ef6:	3350      	adds	r3, #80	; 0x50
24058ef8:	443b      	add	r3, r7
24058efa:	3b2c      	subs	r3, #44	; 0x2c
24058efc:	681b      	ldr	r3, [r3, #0]
24058efe:	2b00      	cmp	r3, #0
24058f00:	f000 80d9 	beq.w	240590b6 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
24058f04:	4914      	ldr	r1, [pc, #80]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058f06:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058f0a:	4613      	mov	r3, r2
24058f0c:	005b      	lsls	r3, r3, #1
24058f0e:	4413      	add	r3, r2
24058f10:	00db      	lsls	r3, r3, #3
24058f12:	3350      	adds	r3, #80	; 0x50
24058f14:	443b      	add	r3, r7
24058f16:	3b2c      	subs	r3, #44	; 0x2c
24058f18:	681b      	ldr	r3, [r3, #0]
24058f1a:	3b01      	subs	r3, #1
24058f1c:	f003 0301 	and.w	r3, r3, #1
24058f20:	009b      	lsls	r3, r3, #2
24058f22:	440b      	add	r3, r1
24058f24:	6859      	ldr	r1, [r3, #4]
24058f26:	480c      	ldr	r0, [pc, #48]	; (24058f58 <HAL_OSPIM_Config+0x29c>)
24058f28:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058f2c:	4613      	mov	r3, r2
24058f2e:	005b      	lsls	r3, r3, #1
24058f30:	4413      	add	r3, r2
24058f32:	00db      	lsls	r3, r3, #3
24058f34:	3350      	adds	r3, #80	; 0x50
24058f36:	443b      	add	r3, r7
24058f38:	3b2c      	subs	r3, #44	; 0x2c
24058f3a:	681b      	ldr	r3, [r3, #0]
24058f3c:	3b01      	subs	r3, #1
24058f3e:	f003 0301 	and.w	r3, r3, #1
24058f42:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
24058f46:	009b      	lsls	r3, r3, #2
24058f48:	4403      	add	r3, r0
24058f4a:	605a      	str	r2, [r3, #4]
24058f4c:	e0b3      	b.n	240590b6 <HAL_OSPIM_Config+0x3fa>
24058f4e:	bf00      	nop
24058f50:	52005000 	.word	0x52005000
24058f54:	5200a000 	.word	0x5200a000
24058f58:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
24058f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058f5e:	4613      	mov	r3, r2
24058f60:	005b      	lsls	r3, r3, #1
24058f62:	4413      	add	r3, r2
24058f64:	00db      	lsls	r3, r3, #3
24058f66:	3350      	adds	r3, #80	; 0x50
24058f68:	443b      	add	r3, r7
24058f6a:	3b3c      	subs	r3, #60	; 0x3c
24058f6c:	681b      	ldr	r3, [r3, #0]
24058f6e:	2b00      	cmp	r3, #0
24058f70:	f000 80a1 	beq.w	240590b6 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
24058f74:	4993      	ldr	r1, [pc, #588]	; (240591c4 <HAL_OSPIM_Config+0x508>)
24058f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058f78:	4613      	mov	r3, r2
24058f7a:	005b      	lsls	r3, r3, #1
24058f7c:	4413      	add	r3, r2
24058f7e:	00db      	lsls	r3, r3, #3
24058f80:	3350      	adds	r3, #80	; 0x50
24058f82:	443b      	add	r3, r7
24058f84:	3b3c      	subs	r3, #60	; 0x3c
24058f86:	681b      	ldr	r3, [r3, #0]
24058f88:	3b01      	subs	r3, #1
24058f8a:	009b      	lsls	r3, r3, #2
24058f8c:	440b      	add	r3, r1
24058f8e:	6859      	ldr	r1, [r3, #4]
24058f90:	488c      	ldr	r0, [pc, #560]	; (240591c4 <HAL_OSPIM_Config+0x508>)
24058f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058f94:	4613      	mov	r3, r2
24058f96:	005b      	lsls	r3, r3, #1
24058f98:	4413      	add	r3, r2
24058f9a:	00db      	lsls	r3, r3, #3
24058f9c:	3350      	adds	r3, #80	; 0x50
24058f9e:	443b      	add	r3, r7
24058fa0:	3b3c      	subs	r3, #60	; 0x3c
24058fa2:	681b      	ldr	r3, [r3, #0]
24058fa4:	3b01      	subs	r3, #1
24058fa6:	f021 0201 	bic.w	r2, r1, #1
24058faa:	009b      	lsls	r3, r3, #2
24058fac:	4403      	add	r3, r0
24058fae:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
24058fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058fb2:	4613      	mov	r3, r2
24058fb4:	005b      	lsls	r3, r3, #1
24058fb6:	4413      	add	r3, r2
24058fb8:	00db      	lsls	r3, r3, #3
24058fba:	3350      	adds	r3, #80	; 0x50
24058fbc:	443b      	add	r3, r7
24058fbe:	3b38      	subs	r3, #56	; 0x38
24058fc0:	681b      	ldr	r3, [r3, #0]
24058fc2:	2b00      	cmp	r3, #0
24058fc4:	d01d      	beq.n	24059002 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
24058fc6:	497f      	ldr	r1, [pc, #508]	; (240591c4 <HAL_OSPIM_Config+0x508>)
24058fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058fca:	4613      	mov	r3, r2
24058fcc:	005b      	lsls	r3, r3, #1
24058fce:	4413      	add	r3, r2
24058fd0:	00db      	lsls	r3, r3, #3
24058fd2:	3350      	adds	r3, #80	; 0x50
24058fd4:	443b      	add	r3, r7
24058fd6:	3b38      	subs	r3, #56	; 0x38
24058fd8:	681b      	ldr	r3, [r3, #0]
24058fda:	3b01      	subs	r3, #1
24058fdc:	009b      	lsls	r3, r3, #2
24058fde:	440b      	add	r3, r1
24058fe0:	6859      	ldr	r1, [r3, #4]
24058fe2:	4878      	ldr	r0, [pc, #480]	; (240591c4 <HAL_OSPIM_Config+0x508>)
24058fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058fe6:	4613      	mov	r3, r2
24058fe8:	005b      	lsls	r3, r3, #1
24058fea:	4413      	add	r3, r2
24058fec:	00db      	lsls	r3, r3, #3
24058fee:	3350      	adds	r3, #80	; 0x50
24058ff0:	443b      	add	r3, r7
24058ff2:	3b38      	subs	r3, #56	; 0x38
24058ff4:	681b      	ldr	r3, [r3, #0]
24058ff6:	3b01      	subs	r3, #1
24058ff8:	f021 0210 	bic.w	r2, r1, #16
24058ffc:	009b      	lsls	r3, r3, #2
24058ffe:	4403      	add	r3, r0
24059000:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
24059002:	6cba      	ldr	r2, [r7, #72]	; 0x48
24059004:	4613      	mov	r3, r2
24059006:	005b      	lsls	r3, r3, #1
24059008:	4413      	add	r3, r2
2405900a:	00db      	lsls	r3, r3, #3
2405900c:	3350      	adds	r3, #80	; 0x50
2405900e:	443b      	add	r3, r7
24059010:	3b30      	subs	r3, #48	; 0x30
24059012:	681b      	ldr	r3, [r3, #0]
24059014:	2b00      	cmp	r3, #0
24059016:	d021      	beq.n	2405905c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
24059018:	496a      	ldr	r1, [pc, #424]	; (240591c4 <HAL_OSPIM_Config+0x508>)
2405901a:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405901c:	4613      	mov	r3, r2
2405901e:	005b      	lsls	r3, r3, #1
24059020:	4413      	add	r3, r2
24059022:	00db      	lsls	r3, r3, #3
24059024:	3350      	adds	r3, #80	; 0x50
24059026:	443b      	add	r3, r7
24059028:	3b30      	subs	r3, #48	; 0x30
2405902a:	681b      	ldr	r3, [r3, #0]
2405902c:	3b01      	subs	r3, #1
2405902e:	f003 0301 	and.w	r3, r3, #1
24059032:	009b      	lsls	r3, r3, #2
24059034:	440b      	add	r3, r1
24059036:	6859      	ldr	r1, [r3, #4]
24059038:	4862      	ldr	r0, [pc, #392]	; (240591c4 <HAL_OSPIM_Config+0x508>)
2405903a:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405903c:	4613      	mov	r3, r2
2405903e:	005b      	lsls	r3, r3, #1
24059040:	4413      	add	r3, r2
24059042:	00db      	lsls	r3, r3, #3
24059044:	3350      	adds	r3, #80	; 0x50
24059046:	443b      	add	r3, r7
24059048:	3b30      	subs	r3, #48	; 0x30
2405904a:	681b      	ldr	r3, [r3, #0]
2405904c:	3b01      	subs	r3, #1
2405904e:	f003 0301 	and.w	r3, r3, #1
24059052:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
24059056:	009b      	lsls	r3, r3, #2
24059058:	4403      	add	r3, r0
2405905a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405905c:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405905e:	4613      	mov	r3, r2
24059060:	005b      	lsls	r3, r3, #1
24059062:	4413      	add	r3, r2
24059064:	00db      	lsls	r3, r3, #3
24059066:	3350      	adds	r3, #80	; 0x50
24059068:	443b      	add	r3, r7
2405906a:	3b2c      	subs	r3, #44	; 0x2c
2405906c:	681b      	ldr	r3, [r3, #0]
2405906e:	2b00      	cmp	r3, #0
24059070:	d021      	beq.n	240590b6 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
24059072:	4954      	ldr	r1, [pc, #336]	; (240591c4 <HAL_OSPIM_Config+0x508>)
24059074:	6cba      	ldr	r2, [r7, #72]	; 0x48
24059076:	4613      	mov	r3, r2
24059078:	005b      	lsls	r3, r3, #1
2405907a:	4413      	add	r3, r2
2405907c:	00db      	lsls	r3, r3, #3
2405907e:	3350      	adds	r3, #80	; 0x50
24059080:	443b      	add	r3, r7
24059082:	3b2c      	subs	r3, #44	; 0x2c
24059084:	681b      	ldr	r3, [r3, #0]
24059086:	3b01      	subs	r3, #1
24059088:	f003 0301 	and.w	r3, r3, #1
2405908c:	009b      	lsls	r3, r3, #2
2405908e:	440b      	add	r3, r1
24059090:	6859      	ldr	r1, [r3, #4]
24059092:	484c      	ldr	r0, [pc, #304]	; (240591c4 <HAL_OSPIM_Config+0x508>)
24059094:	6cba      	ldr	r2, [r7, #72]	; 0x48
24059096:	4613      	mov	r3, r2
24059098:	005b      	lsls	r3, r3, #1
2405909a:	4413      	add	r3, r2
2405909c:	00db      	lsls	r3, r3, #3
2405909e:	3350      	adds	r3, #80	; 0x50
240590a0:	443b      	add	r3, r7
240590a2:	3b2c      	subs	r3, #44	; 0x2c
240590a4:	681b      	ldr	r3, [r3, #0]
240590a6:	3b01      	subs	r3, #1
240590a8:	f003 0301 	and.w	r3, r3, #1
240590ac:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
240590b0:	009b      	lsls	r3, r3, #2
240590b2:	4403      	add	r3, r0
240590b4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
240590b6:	68bb      	ldr	r3, [r7, #8]
240590b8:	6819      	ldr	r1, [r3, #0]
240590ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240590be:	4613      	mov	r3, r2
240590c0:	005b      	lsls	r3, r3, #1
240590c2:	4413      	add	r3, r2
240590c4:	00db      	lsls	r3, r3, #3
240590c6:	3350      	adds	r3, #80	; 0x50
240590c8:	443b      	add	r3, r7
240590ca:	3b3c      	subs	r3, #60	; 0x3c
240590cc:	681b      	ldr	r3, [r3, #0]
240590ce:	4299      	cmp	r1, r3
240590d0:	d038      	beq.n	24059144 <HAL_OSPIM_Config+0x488>
240590d2:	68bb      	ldr	r3, [r7, #8]
240590d4:	6859      	ldr	r1, [r3, #4]
240590d6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240590da:	4613      	mov	r3, r2
240590dc:	005b      	lsls	r3, r3, #1
240590de:	4413      	add	r3, r2
240590e0:	00db      	lsls	r3, r3, #3
240590e2:	3350      	adds	r3, #80	; 0x50
240590e4:	443b      	add	r3, r7
240590e6:	3b38      	subs	r3, #56	; 0x38
240590e8:	681b      	ldr	r3, [r3, #0]
240590ea:	4299      	cmp	r1, r3
240590ec:	d02a      	beq.n	24059144 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
240590ee:	68bb      	ldr	r3, [r7, #8]
240590f0:	6899      	ldr	r1, [r3, #8]
240590f2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240590f6:	4613      	mov	r3, r2
240590f8:	005b      	lsls	r3, r3, #1
240590fa:	4413      	add	r3, r2
240590fc:	00db      	lsls	r3, r3, #3
240590fe:	3350      	adds	r3, #80	; 0x50
24059100:	443b      	add	r3, r7
24059102:	3b34      	subs	r3, #52	; 0x34
24059104:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
24059106:	4299      	cmp	r1, r3
24059108:	d01c      	beq.n	24059144 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2405910a:	68bb      	ldr	r3, [r7, #8]
2405910c:	68d9      	ldr	r1, [r3, #12]
2405910e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059112:	4613      	mov	r3, r2
24059114:	005b      	lsls	r3, r3, #1
24059116:	4413      	add	r3, r2
24059118:	00db      	lsls	r3, r3, #3
2405911a:	3350      	adds	r3, #80	; 0x50
2405911c:	443b      	add	r3, r7
2405911e:	3b30      	subs	r3, #48	; 0x30
24059120:	681b      	ldr	r3, [r3, #0]
24059122:	4299      	cmp	r1, r3
24059124:	d00e      	beq.n	24059144 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
24059126:	68bb      	ldr	r3, [r7, #8]
24059128:	6919      	ldr	r1, [r3, #16]
2405912a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405912e:	4613      	mov	r3, r2
24059130:	005b      	lsls	r3, r3, #1
24059132:	4413      	add	r3, r2
24059134:	00db      	lsls	r3, r3, #3
24059136:	3350      	adds	r3, #80	; 0x50
24059138:	443b      	add	r3, r7
2405913a:	3b2c      	subs	r3, #44	; 0x2c
2405913c:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2405913e:	4299      	cmp	r1, r3
24059140:	f040 810e 	bne.w	24059360 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
24059144:	68bb      	ldr	r3, [r7, #8]
24059146:	6819      	ldr	r1, [r3, #0]
24059148:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405914c:	4613      	mov	r3, r2
2405914e:	005b      	lsls	r3, r3, #1
24059150:	4413      	add	r3, r2
24059152:	00db      	lsls	r3, r3, #3
24059154:	3350      	adds	r3, #80	; 0x50
24059156:	443b      	add	r3, r7
24059158:	3b3c      	subs	r3, #60	; 0x3c
2405915a:	681b      	ldr	r3, [r3, #0]
2405915c:	4299      	cmp	r1, r3
2405915e:	d133      	bne.n	240591c8 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
24059160:	68bb      	ldr	r3, [r7, #8]
24059162:	6859      	ldr	r1, [r3, #4]
24059164:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059168:	4613      	mov	r3, r2
2405916a:	005b      	lsls	r3, r3, #1
2405916c:	4413      	add	r3, r2
2405916e:	00db      	lsls	r3, r3, #3
24059170:	3350      	adds	r3, #80	; 0x50
24059172:	443b      	add	r3, r7
24059174:	3b38      	subs	r3, #56	; 0x38
24059176:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
24059178:	4299      	cmp	r1, r3
2405917a:	d125      	bne.n	240591c8 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
2405917c:	68bb      	ldr	r3, [r7, #8]
2405917e:	68d9      	ldr	r1, [r3, #12]
24059180:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059184:	4613      	mov	r3, r2
24059186:	005b      	lsls	r3, r3, #1
24059188:	4413      	add	r3, r2
2405918a:	00db      	lsls	r3, r3, #3
2405918c:	3350      	adds	r3, #80	; 0x50
2405918e:	443b      	add	r3, r7
24059190:	3b30      	subs	r3, #48	; 0x30
24059192:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
24059194:	4299      	cmp	r1, r3
24059196:	d117      	bne.n	240591c8 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
24059198:	68bb      	ldr	r3, [r7, #8]
2405919a:	6919      	ldr	r1, [r3, #16]
2405919c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240591a0:	4613      	mov	r3, r2
240591a2:	005b      	lsls	r3, r3, #1
240591a4:	4413      	add	r3, r2
240591a6:	00db      	lsls	r3, r3, #3
240591a8:	3350      	adds	r3, #80	; 0x50
240591aa:	443b      	add	r3, r7
240591ac:	3b2c      	subs	r3, #44	; 0x2c
240591ae:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
240591b0:	4299      	cmp	r1, r3
240591b2:	d109      	bne.n	240591c8 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
240591b4:	4b03      	ldr	r3, [pc, #12]	; (240591c4 <HAL_OSPIM_Config+0x508>)
240591b6:	681b      	ldr	r3, [r3, #0]
240591b8:	4a02      	ldr	r2, [pc, #8]	; (240591c4 <HAL_OSPIM_Config+0x508>)
240591ba:	f043 0301 	orr.w	r3, r3, #1
240591be:	6013      	str	r3, [r2, #0]
240591c0:	e0ce      	b.n	24059360 <HAL_OSPIM_Config+0x6a4>
240591c2:	bf00      	nop
240591c4:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
240591c8:	49bb      	ldr	r1, [pc, #748]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
240591ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240591ce:	4613      	mov	r3, r2
240591d0:	005b      	lsls	r3, r3, #1
240591d2:	4413      	add	r3, r2
240591d4:	00db      	lsls	r3, r3, #3
240591d6:	3350      	adds	r3, #80	; 0x50
240591d8:	443b      	add	r3, r7
240591da:	3b3c      	subs	r3, #60	; 0x3c
240591dc:	681b      	ldr	r3, [r3, #0]
240591de:	3b01      	subs	r3, #1
240591e0:	009b      	lsls	r3, r3, #2
240591e2:	440b      	add	r3, r1
240591e4:	6859      	ldr	r1, [r3, #4]
240591e6:	48b4      	ldr	r0, [pc, #720]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
240591e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240591ec:	4613      	mov	r3, r2
240591ee:	005b      	lsls	r3, r3, #1
240591f0:	4413      	add	r3, r2
240591f2:	00db      	lsls	r3, r3, #3
240591f4:	3350      	adds	r3, #80	; 0x50
240591f6:	443b      	add	r3, r7
240591f8:	3b3c      	subs	r3, #60	; 0x3c
240591fa:	681b      	ldr	r3, [r3, #0]
240591fc:	3b01      	subs	r3, #1
240591fe:	f021 0201 	bic.w	r2, r1, #1
24059202:	009b      	lsls	r3, r3, #2
24059204:	4403      	add	r3, r0
24059206:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
24059208:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405920c:	4613      	mov	r3, r2
2405920e:	005b      	lsls	r3, r3, #1
24059210:	4413      	add	r3, r2
24059212:	00db      	lsls	r3, r3, #3
24059214:	3350      	adds	r3, #80	; 0x50
24059216:	443b      	add	r3, r7
24059218:	3b38      	subs	r3, #56	; 0x38
2405921a:	681b      	ldr	r3, [r3, #0]
2405921c:	2b00      	cmp	r3, #0
2405921e:	d01f      	beq.n	24059260 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
24059220:	49a5      	ldr	r1, [pc, #660]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
24059222:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059226:	4613      	mov	r3, r2
24059228:	005b      	lsls	r3, r3, #1
2405922a:	4413      	add	r3, r2
2405922c:	00db      	lsls	r3, r3, #3
2405922e:	3350      	adds	r3, #80	; 0x50
24059230:	443b      	add	r3, r7
24059232:	3b38      	subs	r3, #56	; 0x38
24059234:	681b      	ldr	r3, [r3, #0]
24059236:	3b01      	subs	r3, #1
24059238:	009b      	lsls	r3, r3, #2
2405923a:	440b      	add	r3, r1
2405923c:	6859      	ldr	r1, [r3, #4]
2405923e:	489e      	ldr	r0, [pc, #632]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
24059240:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059244:	4613      	mov	r3, r2
24059246:	005b      	lsls	r3, r3, #1
24059248:	4413      	add	r3, r2
2405924a:	00db      	lsls	r3, r3, #3
2405924c:	3350      	adds	r3, #80	; 0x50
2405924e:	443b      	add	r3, r7
24059250:	3b38      	subs	r3, #56	; 0x38
24059252:	681b      	ldr	r3, [r3, #0]
24059254:	3b01      	subs	r3, #1
24059256:	f021 0210 	bic.w	r2, r1, #16
2405925a:	009b      	lsls	r3, r3, #2
2405925c:	4403      	add	r3, r0
2405925e:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
24059260:	4995      	ldr	r1, [pc, #596]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
24059262:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059266:	4613      	mov	r3, r2
24059268:	005b      	lsls	r3, r3, #1
2405926a:	4413      	add	r3, r2
2405926c:	00db      	lsls	r3, r3, #3
2405926e:	3350      	adds	r3, #80	; 0x50
24059270:	443b      	add	r3, r7
24059272:	3b34      	subs	r3, #52	; 0x34
24059274:	681b      	ldr	r3, [r3, #0]
24059276:	3b01      	subs	r3, #1
24059278:	009b      	lsls	r3, r3, #2
2405927a:	440b      	add	r3, r1
2405927c:	6859      	ldr	r1, [r3, #4]
2405927e:	488e      	ldr	r0, [pc, #568]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
24059280:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059284:	4613      	mov	r3, r2
24059286:	005b      	lsls	r3, r3, #1
24059288:	4413      	add	r3, r2
2405928a:	00db      	lsls	r3, r3, #3
2405928c:	3350      	adds	r3, #80	; 0x50
2405928e:	443b      	add	r3, r7
24059290:	3b34      	subs	r3, #52	; 0x34
24059292:	681b      	ldr	r3, [r3, #0]
24059294:	3b01      	subs	r3, #1
24059296:	f421 7280 	bic.w	r2, r1, #256	; 0x100
2405929a:	009b      	lsls	r3, r3, #2
2405929c:	4403      	add	r3, r0
2405929e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
240592a0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240592a4:	4613      	mov	r3, r2
240592a6:	005b      	lsls	r3, r3, #1
240592a8:	4413      	add	r3, r2
240592aa:	00db      	lsls	r3, r3, #3
240592ac:	3350      	adds	r3, #80	; 0x50
240592ae:	443b      	add	r3, r7
240592b0:	3b30      	subs	r3, #48	; 0x30
240592b2:	681b      	ldr	r3, [r3, #0]
240592b4:	2b00      	cmp	r3, #0
240592b6:	d023      	beq.n	24059300 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
240592b8:	497f      	ldr	r1, [pc, #508]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
240592ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240592be:	4613      	mov	r3, r2
240592c0:	005b      	lsls	r3, r3, #1
240592c2:	4413      	add	r3, r2
240592c4:	00db      	lsls	r3, r3, #3
240592c6:	3350      	adds	r3, #80	; 0x50
240592c8:	443b      	add	r3, r7
240592ca:	3b30      	subs	r3, #48	; 0x30
240592cc:	681b      	ldr	r3, [r3, #0]
240592ce:	3b01      	subs	r3, #1
240592d0:	f003 0301 	and.w	r3, r3, #1
240592d4:	009b      	lsls	r3, r3, #2
240592d6:	440b      	add	r3, r1
240592d8:	6859      	ldr	r1, [r3, #4]
240592da:	4877      	ldr	r0, [pc, #476]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
240592dc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240592e0:	4613      	mov	r3, r2
240592e2:	005b      	lsls	r3, r3, #1
240592e4:	4413      	add	r3, r2
240592e6:	00db      	lsls	r3, r3, #3
240592e8:	3350      	adds	r3, #80	; 0x50
240592ea:	443b      	add	r3, r7
240592ec:	3b30      	subs	r3, #48	; 0x30
240592ee:	681b      	ldr	r3, [r3, #0]
240592f0:	3b01      	subs	r3, #1
240592f2:	f003 0301 	and.w	r3, r3, #1
240592f6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
240592fa:	009b      	lsls	r3, r3, #2
240592fc:	4403      	add	r3, r0
240592fe:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
24059300:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059304:	4613      	mov	r3, r2
24059306:	005b      	lsls	r3, r3, #1
24059308:	4413      	add	r3, r2
2405930a:	00db      	lsls	r3, r3, #3
2405930c:	3350      	adds	r3, #80	; 0x50
2405930e:	443b      	add	r3, r7
24059310:	3b2c      	subs	r3, #44	; 0x2c
24059312:	681b      	ldr	r3, [r3, #0]
24059314:	2b00      	cmp	r3, #0
24059316:	d023      	beq.n	24059360 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
24059318:	4967      	ldr	r1, [pc, #412]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
2405931a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405931e:	4613      	mov	r3, r2
24059320:	005b      	lsls	r3, r3, #1
24059322:	4413      	add	r3, r2
24059324:	00db      	lsls	r3, r3, #3
24059326:	3350      	adds	r3, #80	; 0x50
24059328:	443b      	add	r3, r7
2405932a:	3b2c      	subs	r3, #44	; 0x2c
2405932c:	681b      	ldr	r3, [r3, #0]
2405932e:	3b01      	subs	r3, #1
24059330:	f003 0301 	and.w	r3, r3, #1
24059334:	009b      	lsls	r3, r3, #2
24059336:	440b      	add	r3, r1
24059338:	6859      	ldr	r1, [r3, #4]
2405933a:	485f      	ldr	r0, [pc, #380]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
2405933c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059340:	4613      	mov	r3, r2
24059342:	005b      	lsls	r3, r3, #1
24059344:	4413      	add	r3, r2
24059346:	00db      	lsls	r3, r3, #3
24059348:	3350      	adds	r3, #80	; 0x50
2405934a:	443b      	add	r3, r7
2405934c:	3b2c      	subs	r3, #44	; 0x2c
2405934e:	681b      	ldr	r3, [r3, #0]
24059350:	3b01      	subs	r3, #1
24059352:	f003 0301 	and.w	r3, r3, #1
24059356:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
2405935a:	009b      	lsls	r3, r3, #2
2405935c:	4403      	add	r3, r0
2405935e:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
24059360:	4a55      	ldr	r2, [pc, #340]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
24059362:	68bb      	ldr	r3, [r7, #8]
24059364:	689b      	ldr	r3, [r3, #8]
24059366:	3b01      	subs	r3, #1
24059368:	009b      	lsls	r3, r3, #2
2405936a:	4413      	add	r3, r2
2405936c:	685b      	ldr	r3, [r3, #4]
2405936e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
24059372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
24059374:	025b      	lsls	r3, r3, #9
24059376:	431a      	orrs	r2, r3
24059378:	494f      	ldr	r1, [pc, #316]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
2405937a:	68bb      	ldr	r3, [r7, #8]
2405937c:	689b      	ldr	r3, [r3, #8]
2405937e:	3b01      	subs	r3, #1
24059380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24059384:	009b      	lsls	r3, r3, #2
24059386:	440b      	add	r3, r1
24059388:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
2405938a:	68bb      	ldr	r3, [r7, #8]
2405938c:	695b      	ldr	r3, [r3, #20]
2405938e:	1e5a      	subs	r2, r3, #1
24059390:	4b49      	ldr	r3, [pc, #292]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
24059392:	681b      	ldr	r3, [r3, #0]
24059394:	0c1b      	lsrs	r3, r3, #16
24059396:	b2db      	uxtb	r3, r3
24059398:	429a      	cmp	r2, r3
2405939a:	d90a      	bls.n	240593b2 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
2405939c:	4b46      	ldr	r3, [pc, #280]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
2405939e:	681b      	ldr	r3, [r3, #0]
240593a0:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
240593a4:	68bb      	ldr	r3, [r7, #8]
240593a6:	695b      	ldr	r3, [r3, #20]
240593a8:	3b01      	subs	r3, #1
240593aa:	041b      	lsls	r3, r3, #16
240593ac:	4942      	ldr	r1, [pc, #264]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
240593ae:	4313      	orrs	r3, r2
240593b0:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
240593b2:	4b41      	ldr	r3, [pc, #260]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
240593b4:	681b      	ldr	r3, [r3, #0]
240593b6:	f003 0301 	and.w	r3, r3, #1
240593ba:	2b00      	cmp	r3, #0
240593bc:	f000 809a 	beq.w	240594f4 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
240593c0:	4a3d      	ldr	r2, [pc, #244]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
240593c2:	68bb      	ldr	r3, [r7, #8]
240593c4:	681b      	ldr	r3, [r3, #0]
240593c6:	3b01      	subs	r3, #1
240593c8:	009b      	lsls	r3, r3, #2
240593ca:	4413      	add	r3, r2
240593cc:	685b      	ldr	r3, [r3, #4]
240593ce:	f023 0203 	bic.w	r2, r3, #3
240593d2:	4939      	ldr	r1, [pc, #228]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
240593d4:	68bb      	ldr	r3, [r7, #8]
240593d6:	681b      	ldr	r3, [r3, #0]
240593d8:	3b01      	subs	r3, #1
240593da:	f042 0201 	orr.w	r2, r2, #1
240593de:	009b      	lsls	r3, r3, #2
240593e0:	440b      	add	r3, r1
240593e2:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
240593e4:	68bb      	ldr	r3, [r7, #8]
240593e6:	685b      	ldr	r3, [r3, #4]
240593e8:	2b00      	cmp	r3, #0
240593ea:	d011      	beq.n	24059410 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
240593ec:	4a32      	ldr	r2, [pc, #200]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
240593ee:	68bb      	ldr	r3, [r7, #8]
240593f0:	685b      	ldr	r3, [r3, #4]
240593f2:	3b01      	subs	r3, #1
240593f4:	009b      	lsls	r3, r3, #2
240593f6:	4413      	add	r3, r2
240593f8:	685b      	ldr	r3, [r3, #4]
240593fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
240593fe:	492e      	ldr	r1, [pc, #184]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
24059400:	68bb      	ldr	r3, [r7, #8]
24059402:	685b      	ldr	r3, [r3, #4]
24059404:	3b01      	subs	r3, #1
24059406:	f042 0210 	orr.w	r2, r2, #16
2405940a:	009b      	lsls	r3, r3, #2
2405940c:	440b      	add	r3, r1
2405940e:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
24059410:	68bb      	ldr	r3, [r7, #8]
24059412:	68db      	ldr	r3, [r3, #12]
24059414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24059418:	2b00      	cmp	r3, #0
2405941a:	d016      	beq.n	2405944a <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405941c:	4a26      	ldr	r2, [pc, #152]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
2405941e:	68bb      	ldr	r3, [r7, #8]
24059420:	68db      	ldr	r3, [r3, #12]
24059422:	3b01      	subs	r3, #1
24059424:	f003 0301 	and.w	r3, r3, #1
24059428:	009b      	lsls	r3, r3, #2
2405942a:	4413      	add	r3, r2
2405942c:	685b      	ldr	r3, [r3, #4]
2405942e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
24059432:	4921      	ldr	r1, [pc, #132]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
24059434:	68bb      	ldr	r3, [r7, #8]
24059436:	68db      	ldr	r3, [r3, #12]
24059438:	3b01      	subs	r3, #1
2405943a:	f003 0301 	and.w	r3, r3, #1
2405943e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24059442:	009b      	lsls	r3, r3, #2
24059444:	440b      	add	r3, r1
24059446:	605a      	str	r2, [r3, #4]
24059448:	e019      	b.n	2405947e <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405944a:	68bb      	ldr	r3, [r7, #8]
2405944c:	68db      	ldr	r3, [r3, #12]
2405944e:	2b00      	cmp	r3, #0
24059450:	d015      	beq.n	2405947e <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
24059452:	4a19      	ldr	r2, [pc, #100]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
24059454:	68bb      	ldr	r3, [r7, #8]
24059456:	68db      	ldr	r3, [r3, #12]
24059458:	3b01      	subs	r3, #1
2405945a:	f003 0301 	and.w	r3, r3, #1
2405945e:	009b      	lsls	r3, r3, #2
24059460:	4413      	add	r3, r2
24059462:	685b      	ldr	r3, [r3, #4]
24059464:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
24059468:	4913      	ldr	r1, [pc, #76]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
2405946a:	68bb      	ldr	r3, [r7, #8]
2405946c:	68db      	ldr	r3, [r3, #12]
2405946e:	3b01      	subs	r3, #1
24059470:	f003 0301 	and.w	r3, r3, #1
24059474:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
24059478:	009b      	lsls	r3, r3, #2
2405947a:	440b      	add	r3, r1
2405947c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405947e:	68bb      	ldr	r3, [r7, #8]
24059480:	691b      	ldr	r3, [r3, #16]
24059482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24059486:	2b00      	cmp	r3, #0
24059488:	d018      	beq.n	240594bc <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
2405948a:	4a0b      	ldr	r2, [pc, #44]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
2405948c:	68bb      	ldr	r3, [r7, #8]
2405948e:	691b      	ldr	r3, [r3, #16]
24059490:	3b01      	subs	r3, #1
24059492:	f003 0301 	and.w	r3, r3, #1
24059496:	009b      	lsls	r3, r3, #2
24059498:	4413      	add	r3, r2
2405949a:	685b      	ldr	r3, [r3, #4]
2405949c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
240594a0:	4905      	ldr	r1, [pc, #20]	; (240594b8 <HAL_OSPIM_Config+0x7fc>)
240594a2:	68bb      	ldr	r3, [r7, #8]
240594a4:	691b      	ldr	r3, [r3, #16]
240594a6:	3b01      	subs	r3, #1
240594a8:	f003 0301 	and.w	r3, r3, #1
240594ac:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
240594b0:	009b      	lsls	r3, r3, #2
240594b2:	440b      	add	r3, r1
240594b4:	605a      	str	r2, [r3, #4]
240594b6:	e0c5      	b.n	24059644 <HAL_OSPIM_Config+0x988>
240594b8:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
240594bc:	68bb      	ldr	r3, [r7, #8]
240594be:	691b      	ldr	r3, [r3, #16]
240594c0:	2b00      	cmp	r3, #0
240594c2:	f000 80bf 	beq.w	24059644 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
240594c6:	4a6e      	ldr	r2, [pc, #440]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
240594c8:	68bb      	ldr	r3, [r7, #8]
240594ca:	691b      	ldr	r3, [r3, #16]
240594cc:	3b01      	subs	r3, #1
240594ce:	f003 0301 	and.w	r3, r3, #1
240594d2:	009b      	lsls	r3, r3, #2
240594d4:	4413      	add	r3, r2
240594d6:	685b      	ldr	r3, [r3, #4]
240594d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
240594dc:	4968      	ldr	r1, [pc, #416]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
240594de:	68bb      	ldr	r3, [r7, #8]
240594e0:	691b      	ldr	r3, [r3, #16]
240594e2:	3b01      	subs	r3, #1
240594e4:	f003 0301 	and.w	r3, r3, #1
240594e8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
240594ec:	009b      	lsls	r3, r3, #2
240594ee:	440b      	add	r3, r1
240594f0:	605a      	str	r2, [r3, #4]
240594f2:	e0a7      	b.n	24059644 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
240594f4:	4a62      	ldr	r2, [pc, #392]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
240594f6:	68bb      	ldr	r3, [r7, #8]
240594f8:	681b      	ldr	r3, [r3, #0]
240594fa:	3b01      	subs	r3, #1
240594fc:	009b      	lsls	r3, r3, #2
240594fe:	4413      	add	r3, r2
24059500:	685b      	ldr	r3, [r3, #4]
24059502:	f023 0203 	bic.w	r2, r3, #3
24059506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
24059508:	005b      	lsls	r3, r3, #1
2405950a:	431a      	orrs	r2, r3
2405950c:	495c      	ldr	r1, [pc, #368]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
2405950e:	68bb      	ldr	r3, [r7, #8]
24059510:	681b      	ldr	r3, [r3, #0]
24059512:	3b01      	subs	r3, #1
24059514:	f042 0201 	orr.w	r2, r2, #1
24059518:	009b      	lsls	r3, r3, #2
2405951a:	440b      	add	r3, r1
2405951c:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
2405951e:	68bb      	ldr	r3, [r7, #8]
24059520:	685b      	ldr	r3, [r3, #4]
24059522:	2b00      	cmp	r3, #0
24059524:	d014      	beq.n	24059550 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
24059526:	4a56      	ldr	r2, [pc, #344]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
24059528:	68bb      	ldr	r3, [r7, #8]
2405952a:	685b      	ldr	r3, [r3, #4]
2405952c:	3b01      	subs	r3, #1
2405952e:	009b      	lsls	r3, r3, #2
24059530:	4413      	add	r3, r2
24059532:	685b      	ldr	r3, [r3, #4]
24059534:	f023 0230 	bic.w	r2, r3, #48	; 0x30
24059538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405953a:	015b      	lsls	r3, r3, #5
2405953c:	431a      	orrs	r2, r3
2405953e:	4950      	ldr	r1, [pc, #320]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
24059540:	68bb      	ldr	r3, [r7, #8]
24059542:	685b      	ldr	r3, [r3, #4]
24059544:	3b01      	subs	r3, #1
24059546:	f042 0210 	orr.w	r2, r2, #16
2405954a:	009b      	lsls	r3, r3, #2
2405954c:	440b      	add	r3, r1
2405954e:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
24059550:	68bb      	ldr	r3, [r7, #8]
24059552:	68db      	ldr	r3, [r3, #12]
24059554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24059558:	2b00      	cmp	r3, #0
2405955a:	d019      	beq.n	24059590 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405955c:	4a48      	ldr	r2, [pc, #288]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
2405955e:	68bb      	ldr	r3, [r7, #8]
24059560:	68db      	ldr	r3, [r3, #12]
24059562:	3b01      	subs	r3, #1
24059564:	f003 0301 	and.w	r3, r3, #1
24059568:	009b      	lsls	r3, r3, #2
2405956a:	4413      	add	r3, r2
2405956c:	685b      	ldr	r3, [r3, #4]
2405956e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
24059572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
24059574:	049b      	lsls	r3, r3, #18
24059576:	431a      	orrs	r2, r3
24059578:	4941      	ldr	r1, [pc, #260]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
2405957a:	68bb      	ldr	r3, [r7, #8]
2405957c:	68db      	ldr	r3, [r3, #12]
2405957e:	3b01      	subs	r3, #1
24059580:	f003 0301 	and.w	r3, r3, #1
24059584:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24059588:	009b      	lsls	r3, r3, #2
2405958a:	440b      	add	r3, r1
2405958c:	605a      	str	r2, [r3, #4]
2405958e:	e01c      	b.n	240595ca <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
24059590:	68bb      	ldr	r3, [r7, #8]
24059592:	68db      	ldr	r3, [r3, #12]
24059594:	2b00      	cmp	r3, #0
24059596:	d018      	beq.n	240595ca <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
24059598:	4a39      	ldr	r2, [pc, #228]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
2405959a:	68bb      	ldr	r3, [r7, #8]
2405959c:	68db      	ldr	r3, [r3, #12]
2405959e:	3b01      	subs	r3, #1
240595a0:	f003 0301 	and.w	r3, r3, #1
240595a4:	009b      	lsls	r3, r3, #2
240595a6:	4413      	add	r3, r2
240595a8:	685b      	ldr	r3, [r3, #4]
240595aa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
240595ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
240595b0:	069b      	lsls	r3, r3, #26
240595b2:	431a      	orrs	r2, r3
240595b4:	4932      	ldr	r1, [pc, #200]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
240595b6:	68bb      	ldr	r3, [r7, #8]
240595b8:	68db      	ldr	r3, [r3, #12]
240595ba:	3b01      	subs	r3, #1
240595bc:	f003 0301 	and.w	r3, r3, #1
240595c0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
240595c4:	009b      	lsls	r3, r3, #2
240595c6:	440b      	add	r3, r1
240595c8:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
240595ca:	68bb      	ldr	r3, [r7, #8]
240595cc:	691b      	ldr	r3, [r3, #16]
240595ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240595d2:	2b00      	cmp	r3, #0
240595d4:	d019      	beq.n	2405960a <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
240595d6:	4a2a      	ldr	r2, [pc, #168]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
240595d8:	68bb      	ldr	r3, [r7, #8]
240595da:	691b      	ldr	r3, [r3, #16]
240595dc:	3b01      	subs	r3, #1
240595de:	f003 0301 	and.w	r3, r3, #1
240595e2:	009b      	lsls	r3, r3, #2
240595e4:	4413      	add	r3, r2
240595e6:	685b      	ldr	r3, [r3, #4]
240595e8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
240595ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
240595ee:	049b      	lsls	r3, r3, #18
240595f0:	431a      	orrs	r2, r3
240595f2:	4923      	ldr	r1, [pc, #140]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
240595f4:	68bb      	ldr	r3, [r7, #8]
240595f6:	691b      	ldr	r3, [r3, #16]
240595f8:	3b01      	subs	r3, #1
240595fa:	f003 0301 	and.w	r3, r3, #1
240595fe:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
24059602:	009b      	lsls	r3, r3, #2
24059604:	440b      	add	r3, r1
24059606:	605a      	str	r2, [r3, #4]
24059608:	e01c      	b.n	24059644 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405960a:	68bb      	ldr	r3, [r7, #8]
2405960c:	691b      	ldr	r3, [r3, #16]
2405960e:	2b00      	cmp	r3, #0
24059610:	d018      	beq.n	24059644 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
24059612:	4a1b      	ldr	r2, [pc, #108]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
24059614:	68bb      	ldr	r3, [r7, #8]
24059616:	691b      	ldr	r3, [r3, #16]
24059618:	3b01      	subs	r3, #1
2405961a:	f003 0301 	and.w	r3, r3, #1
2405961e:	009b      	lsls	r3, r3, #2
24059620:	4413      	add	r3, r2
24059622:	685b      	ldr	r3, [r3, #4]
24059624:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
24059628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405962a:	069b      	lsls	r3, r3, #26
2405962c:	431a      	orrs	r2, r3
2405962e:	4914      	ldr	r1, [pc, #80]	; (24059680 <HAL_OSPIM_Config+0x9c4>)
24059630:	68bb      	ldr	r3, [r7, #8]
24059632:	691b      	ldr	r3, [r3, #16]
24059634:	3b01      	subs	r3, #1
24059636:	f003 0301 	and.w	r3, r3, #1
2405963a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
2405963e:	009b      	lsls	r3, r3, #2
24059640:	440b      	add	r3, r1
24059642:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
24059644:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
24059648:	f003 0301 	and.w	r3, r3, #1
2405964c:	2b00      	cmp	r3, #0
2405964e:	d005      	beq.n	2405965c <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
24059650:	4b0c      	ldr	r3, [pc, #48]	; (24059684 <HAL_OSPIM_Config+0x9c8>)
24059652:	681b      	ldr	r3, [r3, #0]
24059654:	4a0b      	ldr	r2, [pc, #44]	; (24059684 <HAL_OSPIM_Config+0x9c8>)
24059656:	f043 0301 	orr.w	r3, r3, #1
2405965a:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
2405965c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
24059660:	f003 0302 	and.w	r3, r3, #2
24059664:	2b00      	cmp	r3, #0
24059666:	d005      	beq.n	24059674 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
24059668:	4b07      	ldr	r3, [pc, #28]	; (24059688 <HAL_OSPIM_Config+0x9cc>)
2405966a:	681b      	ldr	r3, [r3, #0]
2405966c:	4a06      	ldr	r2, [pc, #24]	; (24059688 <HAL_OSPIM_Config+0x9cc>)
2405966e:	f043 0301 	orr.w	r3, r3, #1
24059672:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
24059674:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
24059678:	4618      	mov	r0, r3
2405967a:	3750      	adds	r7, #80	; 0x50
2405967c:	46bd      	mov	sp, r7
2405967e:	bd80      	pop	{r7, pc}
24059680:	5200b400 	.word	0x5200b400
24059684:	52005000 	.word	0x52005000
24059688:	5200a000 	.word	0x5200a000

2405968c <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
2405968c:	b580      	push	{r7, lr}
2405968e:	b084      	sub	sp, #16
24059690:	af00      	add	r7, sp, #0
24059692:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
24059694:	687b      	ldr	r3, [r7, #4]
24059696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059698:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
2405969a:	68fb      	ldr	r3, [r7, #12]
2405969c:	2200      	movs	r2, #0
2405969e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
240596a0:	68fb      	ldr	r3, [r7, #12]
240596a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240596a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240596a8:	d122      	bne.n	240596f0 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
240596aa:	68fb      	ldr	r3, [r7, #12]
240596ac:	681b      	ldr	r3, [r3, #0]
240596ae:	6a1b      	ldr	r3, [r3, #32]
240596b0:	f003 0320 	and.w	r3, r3, #32
240596b4:	2b00      	cmp	r3, #0
240596b6:	d014      	beq.n	240596e2 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
240596b8:	68fb      	ldr	r3, [r7, #12]
240596ba:	681b      	ldr	r3, [r3, #0]
240596bc:	2202      	movs	r2, #2
240596be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
240596c0:	68fb      	ldr	r3, [r7, #12]
240596c2:	681b      	ldr	r3, [r3, #0]
240596c4:	681a      	ldr	r2, [r3, #0]
240596c6:	68fb      	ldr	r3, [r7, #12]
240596c8:	681b      	ldr	r3, [r3, #0]
240596ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
240596ce:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
240596d0:	68fb      	ldr	r3, [r7, #12]
240596d2:	681b      	ldr	r3, [r3, #0]
240596d4:	681a      	ldr	r2, [r3, #0]
240596d6:	68fb      	ldr	r3, [r7, #12]
240596d8:	681b      	ldr	r3, [r3, #0]
240596da:	f042 0202 	orr.w	r2, r2, #2
240596de:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
240596e0:	e00c      	b.n	240596fc <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
240596e2:	68fb      	ldr	r3, [r7, #12]
240596e4:	2202      	movs	r2, #2
240596e6:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
240596e8:	68f8      	ldr	r0, [r7, #12]
240596ea:	f7ff fa91 	bl	24058c10 <HAL_OSPI_AbortCpltCallback>
}
240596ee:	e005      	b.n	240596fc <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
240596f0:	68fb      	ldr	r3, [r7, #12]
240596f2:	2202      	movs	r2, #2
240596f4:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
240596f6:	68f8      	ldr	r0, [r7, #12]
240596f8:	f7ff fa80 	bl	24058bfc <HAL_OSPI_ErrorCallback>
}
240596fc:	bf00      	nop
240596fe:	3710      	adds	r7, #16
24059700:	46bd      	mov	sp, r7
24059702:	bd80      	pop	{r7, pc}

24059704 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
24059704:	b580      	push	{r7, lr}
24059706:	b084      	sub	sp, #16
24059708:	af00      	add	r7, sp, #0
2405970a:	60f8      	str	r0, [r7, #12]
2405970c:	60b9      	str	r1, [r7, #8]
2405970e:	603b      	str	r3, [r7, #0]
24059710:	4613      	mov	r3, r2
24059712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
24059714:	e01a      	b.n	2405974c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
24059716:	69bb      	ldr	r3, [r7, #24]
24059718:	f1b3 3fff 	cmp.w	r3, #4294967295
2405971c:	d016      	beq.n	2405974c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2405971e:	f7f9 faf9 	bl	24052d14 <HAL_GetTick>
24059722:	4602      	mov	r2, r0
24059724:	683b      	ldr	r3, [r7, #0]
24059726:	1ad3      	subs	r3, r2, r3
24059728:	69ba      	ldr	r2, [r7, #24]
2405972a:	429a      	cmp	r2, r3
2405972c:	d302      	bcc.n	24059734 <OSPI_WaitFlagStateUntilTimeout+0x30>
2405972e:	69bb      	ldr	r3, [r7, #24]
24059730:	2b00      	cmp	r3, #0
24059732:	d10b      	bne.n	2405974c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
24059734:	68fb      	ldr	r3, [r7, #12]
24059736:	f44f 7200 	mov.w	r2, #512	; 0x200
2405973a:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
2405973c:	68fb      	ldr	r3, [r7, #12]
2405973e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24059740:	f043 0201 	orr.w	r2, r3, #1
24059744:	68fb      	ldr	r3, [r7, #12]
24059746:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
24059748:	2301      	movs	r3, #1
2405974a:	e00e      	b.n	2405976a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
2405974c:	68fb      	ldr	r3, [r7, #12]
2405974e:	681b      	ldr	r3, [r3, #0]
24059750:	6a1a      	ldr	r2, [r3, #32]
24059752:	68bb      	ldr	r3, [r7, #8]
24059754:	4013      	ands	r3, r2
24059756:	2b00      	cmp	r3, #0
24059758:	bf14      	ite	ne
2405975a:	2301      	movne	r3, #1
2405975c:	2300      	moveq	r3, #0
2405975e:	b2db      	uxtb	r3, r3
24059760:	461a      	mov	r2, r3
24059762:	79fb      	ldrb	r3, [r7, #7]
24059764:	429a      	cmp	r2, r3
24059766:	d1d6      	bne.n	24059716 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
24059768:	2300      	movs	r3, #0
}
2405976a:	4618      	mov	r0, r3
2405976c:	3710      	adds	r7, #16
2405976e:	46bd      	mov	sp, r7
24059770:	bd80      	pop	{r7, pc}
	...

24059774 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
24059774:	b480      	push	{r7}
24059776:	b089      	sub	sp, #36	; 0x24
24059778:	af00      	add	r7, sp, #0
2405977a:	6078      	str	r0, [r7, #4]
2405977c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405977e:	2300      	movs	r3, #0
24059780:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
24059782:	687b      	ldr	r3, [r7, #4]
24059784:	681b      	ldr	r3, [r3, #0]
24059786:	681a      	ldr	r2, [r3, #0]
24059788:	687b      	ldr	r3, [r7, #4]
2405978a:	681b      	ldr	r3, [r3, #0]
2405978c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
24059790:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
24059792:	687b      	ldr	r3, [r7, #4]
24059794:	689b      	ldr	r3, [r3, #8]
24059796:	2b00      	cmp	r3, #0
24059798:	d10a      	bne.n	240597b0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
2405979a:	687b      	ldr	r3, [r7, #4]
2405979c:	681b      	ldr	r3, [r3, #0]
2405979e:	681b      	ldr	r3, [r3, #0]
240597a0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
240597a4:	683b      	ldr	r3, [r7, #0]
240597a6:	685a      	ldr	r2, [r3, #4]
240597a8:	687b      	ldr	r3, [r7, #4]
240597aa:	681b      	ldr	r3, [r3, #0]
240597ac:	430a      	orrs	r2, r1
240597ae:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
240597b0:	683b      	ldr	r3, [r7, #0]
240597b2:	681b      	ldr	r3, [r3, #0]
240597b4:	2b02      	cmp	r3, #2
240597b6:	d114      	bne.n	240597e2 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
240597b8:	687b      	ldr	r3, [r7, #4]
240597ba:	681b      	ldr	r3, [r3, #0]
240597bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
240597c0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
240597c2:	687b      	ldr	r3, [r7, #4]
240597c4:	681b      	ldr	r3, [r3, #0]
240597c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
240597ca:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
240597cc:	687b      	ldr	r3, [r7, #4]
240597ce:	681b      	ldr	r3, [r3, #0]
240597d0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
240597d4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
240597d6:	687b      	ldr	r3, [r7, #4]
240597d8:	681b      	ldr	r3, [r3, #0]
240597da:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
240597de:	60fb      	str	r3, [r7, #12]
240597e0:	e02c      	b.n	2405983c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
240597e2:	683b      	ldr	r3, [r7, #0]
240597e4:	681b      	ldr	r3, [r3, #0]
240597e6:	2b03      	cmp	r3, #3
240597e8:	d114      	bne.n	24059814 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
240597ea:	687b      	ldr	r3, [r7, #4]
240597ec:	681b      	ldr	r3, [r3, #0]
240597ee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
240597f2:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
240597f4:	687b      	ldr	r3, [r7, #4]
240597f6:	681b      	ldr	r3, [r3, #0]
240597f8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
240597fc:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
240597fe:	687b      	ldr	r3, [r7, #4]
24059800:	681b      	ldr	r3, [r3, #0]
24059802:	f503 73a8 	add.w	r3, r3, #336	; 0x150
24059806:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
24059808:	687b      	ldr	r3, [r7, #4]
2405980a:	681b      	ldr	r3, [r3, #0]
2405980c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
24059810:	60fb      	str	r3, [r7, #12]
24059812:	e013      	b.n	2405983c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
24059814:	687b      	ldr	r3, [r7, #4]
24059816:	681b      	ldr	r3, [r3, #0]
24059818:	f503 7380 	add.w	r3, r3, #256	; 0x100
2405981c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
2405981e:	687b      	ldr	r3, [r7, #4]
24059820:	681b      	ldr	r3, [r3, #0]
24059822:	f503 7384 	add.w	r3, r3, #264	; 0x108
24059826:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
24059828:	687b      	ldr	r3, [r7, #4]
2405982a:	681b      	ldr	r3, [r3, #0]
2405982c:	f503 7388 	add.w	r3, r3, #272	; 0x110
24059830:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
24059832:	687b      	ldr	r3, [r7, #4]
24059834:	681b      	ldr	r3, [r3, #0]
24059836:	f503 7390 	add.w	r3, r3, #288	; 0x120
2405983a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
2405983c:	683b      	ldr	r3, [r7, #0]
2405983e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
24059840:	683b      	ldr	r3, [r7, #0]
24059842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24059844:	431a      	orrs	r2, r3
24059846:	69bb      	ldr	r3, [r7, #24]
24059848:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
2405984a:	683b      	ldr	r3, [r7, #0]
2405984c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405984e:	2b00      	cmp	r3, #0
24059850:	d012      	beq.n	24059878 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
24059852:	683b      	ldr	r3, [r7, #0]
24059854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24059856:	68fb      	ldr	r3, [r7, #12]
24059858:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
2405985a:	69bb      	ldr	r3, [r7, #24]
2405985c:	681b      	ldr	r3, [r3, #0]
2405985e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
24059862:	683b      	ldr	r3, [r7, #0]
24059864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
24059866:	683b      	ldr	r3, [r7, #0]
24059868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405986a:	4319      	orrs	r1, r3
2405986c:	683b      	ldr	r3, [r7, #0]
2405986e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24059870:	430b      	orrs	r3, r1
24059872:	431a      	orrs	r2, r3
24059874:	69bb      	ldr	r3, [r7, #24]
24059876:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
24059878:	697b      	ldr	r3, [r7, #20]
2405987a:	681b      	ldr	r3, [r3, #0]
2405987c:	f023 021f 	bic.w	r2, r3, #31
24059880:	683b      	ldr	r3, [r7, #0]
24059882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24059884:	431a      	orrs	r2, r3
24059886:	697b      	ldr	r3, [r7, #20]
24059888:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405988a:	683b      	ldr	r3, [r7, #0]
2405988c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405988e:	2b00      	cmp	r3, #0
24059890:	d009      	beq.n	240598a6 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
24059892:	683b      	ldr	r3, [r7, #0]
24059894:	681b      	ldr	r3, [r3, #0]
24059896:	2b00      	cmp	r3, #0
24059898:	d105      	bne.n	240598a6 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
2405989a:	683b      	ldr	r3, [r7, #0]
2405989c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2405989e:	687b      	ldr	r3, [r7, #4]
240598a0:	681b      	ldr	r3, [r3, #0]
240598a2:	3a01      	subs	r2, #1
240598a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
240598a6:	683b      	ldr	r3, [r7, #0]
240598a8:	68db      	ldr	r3, [r3, #12]
240598aa:	2b00      	cmp	r3, #0
240598ac:	f000 8095 	beq.w	240599da <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
240598b0:	683b      	ldr	r3, [r7, #0]
240598b2:	69db      	ldr	r3, [r3, #28]
240598b4:	2b00      	cmp	r3, #0
240598b6:	d053      	beq.n	24059960 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
240598b8:	683b      	ldr	r3, [r7, #0]
240598ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240598bc:	2b00      	cmp	r3, #0
240598be:	d01e      	beq.n	240598fe <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
240598c0:	69bb      	ldr	r3, [r7, #24]
240598c2:	681a      	ldr	r2, [r3, #0]
240598c4:	4b64      	ldr	r3, [pc, #400]	; (24059a58 <OSPI_ConfigCmd+0x2e4>)
240598c6:	4013      	ands	r3, r2
240598c8:	683a      	ldr	r2, [r7, #0]
240598ca:	68d1      	ldr	r1, [r2, #12]
240598cc:	683a      	ldr	r2, [r7, #0]
240598ce:	6952      	ldr	r2, [r2, #20]
240598d0:	4311      	orrs	r1, r2
240598d2:	683a      	ldr	r2, [r7, #0]
240598d4:	6912      	ldr	r2, [r2, #16]
240598d6:	4311      	orrs	r1, r2
240598d8:	683a      	ldr	r2, [r7, #0]
240598da:	69d2      	ldr	r2, [r2, #28]
240598dc:	4311      	orrs	r1, r2
240598de:	683a      	ldr	r2, [r7, #0]
240598e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
240598e2:	4311      	orrs	r1, r2
240598e4:	683a      	ldr	r2, [r7, #0]
240598e6:	6a12      	ldr	r2, [r2, #32]
240598e8:	4311      	orrs	r1, r2
240598ea:	683a      	ldr	r2, [r7, #0]
240598ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
240598ee:	4311      	orrs	r1, r2
240598f0:	683a      	ldr	r2, [r7, #0]
240598f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
240598f4:	430a      	orrs	r2, r1
240598f6:	431a      	orrs	r2, r3
240598f8:	69bb      	ldr	r3, [r7, #24]
240598fa:	601a      	str	r2, [r3, #0]
240598fc:	e026      	b.n	2405994c <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
240598fe:	69bb      	ldr	r3, [r7, #24]
24059900:	681a      	ldr	r2, [r3, #0]
24059902:	4b56      	ldr	r3, [pc, #344]	; (24059a5c <OSPI_ConfigCmd+0x2e8>)
24059904:	4013      	ands	r3, r2
24059906:	683a      	ldr	r2, [r7, #0]
24059908:	68d1      	ldr	r1, [r2, #12]
2405990a:	683a      	ldr	r2, [r7, #0]
2405990c:	6952      	ldr	r2, [r2, #20]
2405990e:	4311      	orrs	r1, r2
24059910:	683a      	ldr	r2, [r7, #0]
24059912:	6912      	ldr	r2, [r2, #16]
24059914:	4311      	orrs	r1, r2
24059916:	683a      	ldr	r2, [r7, #0]
24059918:	69d2      	ldr	r2, [r2, #28]
2405991a:	4311      	orrs	r1, r2
2405991c:	683a      	ldr	r2, [r7, #0]
2405991e:	6a52      	ldr	r2, [r2, #36]	; 0x24
24059920:	4311      	orrs	r1, r2
24059922:	683a      	ldr	r2, [r7, #0]
24059924:	6a12      	ldr	r2, [r2, #32]
24059926:	430a      	orrs	r2, r1
24059928:	431a      	orrs	r2, r3
2405992a:	69bb      	ldr	r3, [r7, #24]
2405992c:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405992e:	687b      	ldr	r3, [r7, #4]
24059930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24059932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24059936:	d109      	bne.n	2405994c <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
24059938:	683b      	ldr	r3, [r7, #0]
2405993a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405993c:	2b08      	cmp	r3, #8
2405993e:	d105      	bne.n	2405994c <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
24059940:	69bb      	ldr	r3, [r7, #24]
24059942:	681b      	ldr	r3, [r3, #0]
24059944:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
24059948:	69bb      	ldr	r3, [r7, #24]
2405994a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
2405994c:	683b      	ldr	r3, [r7, #0]
2405994e:	689a      	ldr	r2, [r3, #8]
24059950:	693b      	ldr	r3, [r7, #16]
24059952:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
24059954:	687b      	ldr	r3, [r7, #4]
24059956:	681b      	ldr	r3, [r3, #0]
24059958:	683a      	ldr	r2, [r7, #0]
2405995a:	6992      	ldr	r2, [r2, #24]
2405995c:	649a      	str	r2, [r3, #72]	; 0x48
2405995e:	e074      	b.n	24059a4a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
24059960:	683b      	ldr	r3, [r7, #0]
24059962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24059964:	2b00      	cmp	r3, #0
24059966:	d015      	beq.n	24059994 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
24059968:	69bb      	ldr	r3, [r7, #24]
2405996a:	681a      	ldr	r2, [r3, #0]
2405996c:	4b3c      	ldr	r3, [pc, #240]	; (24059a60 <OSPI_ConfigCmd+0x2ec>)
2405996e:	4013      	ands	r3, r2
24059970:	683a      	ldr	r2, [r7, #0]
24059972:	68d1      	ldr	r1, [r2, #12]
24059974:	683a      	ldr	r2, [r7, #0]
24059976:	6952      	ldr	r2, [r2, #20]
24059978:	4311      	orrs	r1, r2
2405997a:	683a      	ldr	r2, [r7, #0]
2405997c:	6912      	ldr	r2, [r2, #16]
2405997e:	4311      	orrs	r1, r2
24059980:	683a      	ldr	r2, [r7, #0]
24059982:	6b92      	ldr	r2, [r2, #56]	; 0x38
24059984:	4311      	orrs	r1, r2
24059986:	683a      	ldr	r2, [r7, #0]
24059988:	6c12      	ldr	r2, [r2, #64]	; 0x40
2405998a:	430a      	orrs	r2, r1
2405998c:	431a      	orrs	r2, r3
2405998e:	69bb      	ldr	r3, [r7, #24]
24059990:	601a      	str	r2, [r3, #0]
24059992:	e01d      	b.n	240599d0 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
24059994:	69bb      	ldr	r3, [r7, #24]
24059996:	681b      	ldr	r3, [r3, #0]
24059998:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
2405999c:	683b      	ldr	r3, [r7, #0]
2405999e:	68d9      	ldr	r1, [r3, #12]
240599a0:	683b      	ldr	r3, [r7, #0]
240599a2:	695b      	ldr	r3, [r3, #20]
240599a4:	4319      	orrs	r1, r3
240599a6:	683b      	ldr	r3, [r7, #0]
240599a8:	691b      	ldr	r3, [r3, #16]
240599aa:	430b      	orrs	r3, r1
240599ac:	431a      	orrs	r2, r3
240599ae:	69bb      	ldr	r3, [r7, #24]
240599b0:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
240599b2:	687b      	ldr	r3, [r7, #4]
240599b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240599b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240599ba:	d109      	bne.n	240599d0 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
240599bc:	683b      	ldr	r3, [r7, #0]
240599be:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
240599c0:	2b08      	cmp	r3, #8
240599c2:	d105      	bne.n	240599d0 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
240599c4:	69bb      	ldr	r3, [r7, #24]
240599c6:	681b      	ldr	r3, [r3, #0]
240599c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
240599cc:	69bb      	ldr	r3, [r7, #24]
240599ce:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
240599d0:	683b      	ldr	r3, [r7, #0]
240599d2:	689a      	ldr	r2, [r3, #8]
240599d4:	693b      	ldr	r3, [r7, #16]
240599d6:	601a      	str	r2, [r3, #0]
240599d8:	e037      	b.n	24059a4a <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
240599da:	683b      	ldr	r3, [r7, #0]
240599dc:	69db      	ldr	r3, [r3, #28]
240599de:	2b00      	cmp	r3, #0
240599e0:	d02e      	beq.n	24059a40 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
240599e2:	683b      	ldr	r3, [r7, #0]
240599e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240599e6:	2b00      	cmp	r3, #0
240599e8:	d015      	beq.n	24059a16 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
240599ea:	69bb      	ldr	r3, [r7, #24]
240599ec:	681a      	ldr	r2, [r3, #0]
240599ee:	4b1d      	ldr	r3, [pc, #116]	; (24059a64 <OSPI_ConfigCmd+0x2f0>)
240599f0:	4013      	ands	r3, r2
240599f2:	683a      	ldr	r2, [r7, #0]
240599f4:	69d1      	ldr	r1, [r2, #28]
240599f6:	683a      	ldr	r2, [r7, #0]
240599f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
240599fa:	4311      	orrs	r1, r2
240599fc:	683a      	ldr	r2, [r7, #0]
240599fe:	6a12      	ldr	r2, [r2, #32]
24059a00:	4311      	orrs	r1, r2
24059a02:	683a      	ldr	r2, [r7, #0]
24059a04:	6b92      	ldr	r2, [r2, #56]	; 0x38
24059a06:	4311      	orrs	r1, r2
24059a08:	683a      	ldr	r2, [r7, #0]
24059a0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
24059a0c:	430a      	orrs	r2, r1
24059a0e:	431a      	orrs	r2, r3
24059a10:	69bb      	ldr	r3, [r7, #24]
24059a12:	601a      	str	r2, [r3, #0]
24059a14:	e00e      	b.n	24059a34 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
24059a16:	69bb      	ldr	r3, [r7, #24]
24059a18:	681b      	ldr	r3, [r3, #0]
24059a1a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
24059a1e:	683b      	ldr	r3, [r7, #0]
24059a20:	69d9      	ldr	r1, [r3, #28]
24059a22:	683b      	ldr	r3, [r7, #0]
24059a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24059a26:	4319      	orrs	r1, r3
24059a28:	683b      	ldr	r3, [r7, #0]
24059a2a:	6a1b      	ldr	r3, [r3, #32]
24059a2c:	430b      	orrs	r3, r1
24059a2e:	431a      	orrs	r2, r3
24059a30:	69bb      	ldr	r3, [r7, #24]
24059a32:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
24059a34:	687b      	ldr	r3, [r7, #4]
24059a36:	681b      	ldr	r3, [r3, #0]
24059a38:	683a      	ldr	r2, [r7, #0]
24059a3a:	6992      	ldr	r2, [r2, #24]
24059a3c:	649a      	str	r2, [r3, #72]	; 0x48
24059a3e:	e004      	b.n	24059a4a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
24059a40:	2301      	movs	r3, #1
24059a42:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
24059a44:	687b      	ldr	r3, [r7, #4]
24059a46:	2208      	movs	r2, #8
24059a48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
24059a4a:	7ffb      	ldrb	r3, [r7, #31]
}
24059a4c:	4618      	mov	r0, r3
24059a4e:	3724      	adds	r7, #36	; 0x24
24059a50:	46bd      	mov	sp, r7
24059a52:	f85d 7b04 	ldr.w	r7, [sp], #4
24059a56:	4770      	bx	lr
24059a58:	f0ffc0c0 	.word	0xf0ffc0c0
24059a5c:	ffffc0c0 	.word	0xffffc0c0
24059a60:	f0ffffc0 	.word	0xf0ffffc0
24059a64:	f0ffc0ff 	.word	0xf0ffc0ff

24059a68 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
24059a68:	b480      	push	{r7}
24059a6a:	b087      	sub	sp, #28
24059a6c:	af00      	add	r7, sp, #0
24059a6e:	4603      	mov	r3, r0
24059a70:	6039      	str	r1, [r7, #0]
24059a72:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
24059a74:	2300      	movs	r3, #0
24059a76:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
24059a78:	2300      	movs	r3, #0
24059a7a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
24059a7c:	79fb      	ldrb	r3, [r7, #7]
24059a7e:	2b00      	cmp	r3, #0
24059a80:	d005      	beq.n	24059a8e <OSPIM_GetConfig+0x26>
24059a82:	79fb      	ldrb	r3, [r7, #7]
24059a84:	2b02      	cmp	r3, #2
24059a86:	d802      	bhi.n	24059a8e <OSPIM_GetConfig+0x26>
24059a88:	683b      	ldr	r3, [r7, #0]
24059a8a:	2b00      	cmp	r3, #0
24059a8c:	d102      	bne.n	24059a94 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
24059a8e:	2301      	movs	r3, #1
24059a90:	75fb      	strb	r3, [r7, #23]
24059a92:	e098      	b.n	24059bc6 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
24059a94:	683b      	ldr	r3, [r7, #0]
24059a96:	2200      	movs	r2, #0
24059a98:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
24059a9a:	683b      	ldr	r3, [r7, #0]
24059a9c:	2200      	movs	r2, #0
24059a9e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
24059aa0:	683b      	ldr	r3, [r7, #0]
24059aa2:	2200      	movs	r2, #0
24059aa4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
24059aa6:	683b      	ldr	r3, [r7, #0]
24059aa8:	2200      	movs	r2, #0
24059aaa:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
24059aac:	683b      	ldr	r3, [r7, #0]
24059aae:	2200      	movs	r2, #0
24059ab0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
24059ab2:	79fb      	ldrb	r3, [r7, #7]
24059ab4:	2b02      	cmp	r3, #2
24059ab6:	d10b      	bne.n	24059ad0 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
24059ab8:	4b46      	ldr	r3, [pc, #280]	; (24059bd4 <OSPIM_GetConfig+0x16c>)
24059aba:	681b      	ldr	r3, [r3, #0]
24059abc:	f003 0301 	and.w	r3, r3, #1
24059ac0:	2b00      	cmp	r3, #0
24059ac2:	d102      	bne.n	24059aca <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
24059ac4:	4b44      	ldr	r3, [pc, #272]	; (24059bd8 <OSPIM_GetConfig+0x170>)
24059ac6:	613b      	str	r3, [r7, #16]
24059ac8:	e002      	b.n	24059ad0 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
24059aca:	f44f 7300 	mov.w	r3, #512	; 0x200
24059ace:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
24059ad0:	2300      	movs	r3, #0
24059ad2:	60fb      	str	r3, [r7, #12]
24059ad4:	e074      	b.n	24059bc0 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
24059ad6:	4a3f      	ldr	r2, [pc, #252]	; (24059bd4 <OSPIM_GetConfig+0x16c>)
24059ad8:	68fb      	ldr	r3, [r7, #12]
24059ada:	009b      	lsls	r3, r3, #2
24059adc:	4413      	add	r3, r2
24059ade:	685b      	ldr	r3, [r3, #4]
24059ae0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
24059ae2:	68bb      	ldr	r3, [r7, #8]
24059ae4:	f003 0301 	and.w	r3, r3, #1
24059ae8:	2b00      	cmp	r3, #0
24059aea:	d00a      	beq.n	24059b02 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
24059aec:	68ba      	ldr	r2, [r7, #8]
24059aee:	693b      	ldr	r3, [r7, #16]
24059af0:	4053      	eors	r3, r2
24059af2:	f003 0302 	and.w	r3, r3, #2
24059af6:	2b00      	cmp	r3, #0
24059af8:	d103      	bne.n	24059b02 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
24059afa:	68fb      	ldr	r3, [r7, #12]
24059afc:	1c5a      	adds	r2, r3, #1
24059afe:	683b      	ldr	r3, [r7, #0]
24059b00:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
24059b02:	68bb      	ldr	r3, [r7, #8]
24059b04:	f003 0310 	and.w	r3, r3, #16
24059b08:	2b00      	cmp	r3, #0
24059b0a:	d00a      	beq.n	24059b22 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
24059b0c:	68ba      	ldr	r2, [r7, #8]
24059b0e:	693b      	ldr	r3, [r7, #16]
24059b10:	4053      	eors	r3, r2
24059b12:	f003 0320 	and.w	r3, r3, #32
24059b16:	2b00      	cmp	r3, #0
24059b18:	d103      	bne.n	24059b22 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
24059b1a:	68fb      	ldr	r3, [r7, #12]
24059b1c:	1c5a      	adds	r2, r3, #1
24059b1e:	683b      	ldr	r3, [r7, #0]
24059b20:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
24059b22:	68bb      	ldr	r3, [r7, #8]
24059b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
24059b28:	2b00      	cmp	r3, #0
24059b2a:	d00a      	beq.n	24059b42 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
24059b2c:	68ba      	ldr	r2, [r7, #8]
24059b2e:	693b      	ldr	r3, [r7, #16]
24059b30:	4053      	eors	r3, r2
24059b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
24059b36:	2b00      	cmp	r3, #0
24059b38:	d103      	bne.n	24059b42 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
24059b3a:	68fb      	ldr	r3, [r7, #12]
24059b3c:	1c5a      	adds	r2, r3, #1
24059b3e:	683b      	ldr	r3, [r7, #0]
24059b40:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
24059b42:	68bb      	ldr	r3, [r7, #8]
24059b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24059b48:	2b00      	cmp	r3, #0
24059b4a:	d018      	beq.n	24059b7e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
24059b4c:	68ba      	ldr	r2, [r7, #8]
24059b4e:	693b      	ldr	r3, [r7, #16]
24059b50:	4053      	eors	r3, r2
24059b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24059b56:	2b00      	cmp	r3, #0
24059b58:	d111      	bne.n	24059b7e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
24059b5a:	68bb      	ldr	r3, [r7, #8]
24059b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24059b60:	2b00      	cmp	r3, #0
24059b62:	d106      	bne.n	24059b72 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
24059b64:	68fb      	ldr	r3, [r7, #12]
24059b66:	3301      	adds	r3, #1
24059b68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
24059b6c:	683b      	ldr	r3, [r7, #0]
24059b6e:	60da      	str	r2, [r3, #12]
24059b70:	e005      	b.n	24059b7e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
24059b72:	68fb      	ldr	r3, [r7, #12]
24059b74:	3301      	adds	r3, #1
24059b76:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
24059b7a:	683b      	ldr	r3, [r7, #0]
24059b7c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
24059b7e:	68bb      	ldr	r3, [r7, #8]
24059b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24059b84:	2b00      	cmp	r3, #0
24059b86:	d018      	beq.n	24059bba <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
24059b88:	68ba      	ldr	r2, [r7, #8]
24059b8a:	693b      	ldr	r3, [r7, #16]
24059b8c:	4053      	eors	r3, r2
24059b8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
24059b92:	2b00      	cmp	r3, #0
24059b94:	d111      	bne.n	24059bba <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
24059b96:	68bb      	ldr	r3, [r7, #8]
24059b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24059b9c:	2b00      	cmp	r3, #0
24059b9e:	d106      	bne.n	24059bae <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
24059ba0:	68fb      	ldr	r3, [r7, #12]
24059ba2:	3301      	adds	r3, #1
24059ba4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
24059ba8:	683b      	ldr	r3, [r7, #0]
24059baa:	611a      	str	r2, [r3, #16]
24059bac:	e005      	b.n	24059bba <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
24059bae:	68fb      	ldr	r3, [r7, #12]
24059bb0:	3301      	adds	r3, #1
24059bb2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
24059bb6:	683b      	ldr	r3, [r7, #0]
24059bb8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
24059bba:	68fb      	ldr	r3, [r7, #12]
24059bbc:	3301      	adds	r3, #1
24059bbe:	60fb      	str	r3, [r7, #12]
24059bc0:	68fb      	ldr	r3, [r7, #12]
24059bc2:	2b01      	cmp	r3, #1
24059bc4:	d987      	bls.n	24059ad6 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
24059bc6:	7dfb      	ldrb	r3, [r7, #23]
}
24059bc8:	4618      	mov	r0, r3
24059bca:	371c      	adds	r7, #28
24059bcc:	46bd      	mov	sp, r7
24059bce:	f85d 7b04 	ldr.w	r7, [sp], #4
24059bd2:	4770      	bx	lr
24059bd4:	5200b400 	.word	0x5200b400
24059bd8:	04040222 	.word	0x04040222

24059bdc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
24059bdc:	b480      	push	{r7}
24059bde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
24059be0:	4b05      	ldr	r3, [pc, #20]	; (24059bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
24059be2:	681b      	ldr	r3, [r3, #0]
24059be4:	4a04      	ldr	r2, [pc, #16]	; (24059bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
24059be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24059bea:	6013      	str	r3, [r2, #0]
}
24059bec:	bf00      	nop
24059bee:	46bd      	mov	sp, r7
24059bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
24059bf4:	4770      	bx	lr
24059bf6:	bf00      	nop
24059bf8:	58024800 	.word	0x58024800

24059bfc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24059bfc:	b580      	push	{r7, lr}
24059bfe:	b084      	sub	sp, #16
24059c00:	af00      	add	r7, sp, #0
24059c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24059c04:	4b19      	ldr	r3, [pc, #100]	; (24059c6c <HAL_PWREx_ConfigSupply+0x70>)
24059c06:	68db      	ldr	r3, [r3, #12]
24059c08:	f003 0304 	and.w	r3, r3, #4
24059c0c:	2b04      	cmp	r3, #4
24059c0e:	d00a      	beq.n	24059c26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24059c10:	4b16      	ldr	r3, [pc, #88]	; (24059c6c <HAL_PWREx_ConfigSupply+0x70>)
24059c12:	68db      	ldr	r3, [r3, #12]
24059c14:	f003 0307 	and.w	r3, r3, #7
24059c18:	687a      	ldr	r2, [r7, #4]
24059c1a:	429a      	cmp	r2, r3
24059c1c:	d001      	beq.n	24059c22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
24059c1e:	2301      	movs	r3, #1
24059c20:	e01f      	b.n	24059c62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
24059c22:	2300      	movs	r3, #0
24059c24:	e01d      	b.n	24059c62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24059c26:	4b11      	ldr	r3, [pc, #68]	; (24059c6c <HAL_PWREx_ConfigSupply+0x70>)
24059c28:	68db      	ldr	r3, [r3, #12]
24059c2a:	f023 0207 	bic.w	r2, r3, #7
24059c2e:	490f      	ldr	r1, [pc, #60]	; (24059c6c <HAL_PWREx_ConfigSupply+0x70>)
24059c30:	687b      	ldr	r3, [r7, #4]
24059c32:	4313      	orrs	r3, r2
24059c34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24059c36:	f7f9 f86d 	bl	24052d14 <HAL_GetTick>
24059c3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24059c3c:	e009      	b.n	24059c52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24059c3e:	f7f9 f869 	bl	24052d14 <HAL_GetTick>
24059c42:	4602      	mov	r2, r0
24059c44:	68fb      	ldr	r3, [r7, #12]
24059c46:	1ad3      	subs	r3, r2, r3
24059c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24059c4c:	d901      	bls.n	24059c52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
24059c4e:	2301      	movs	r3, #1
24059c50:	e007      	b.n	24059c62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24059c52:	4b06      	ldr	r3, [pc, #24]	; (24059c6c <HAL_PWREx_ConfigSupply+0x70>)
24059c54:	685b      	ldr	r3, [r3, #4]
24059c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24059c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24059c5e:	d1ee      	bne.n	24059c3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
24059c60:	2300      	movs	r3, #0
}
24059c62:	4618      	mov	r0, r3
24059c64:	3710      	adds	r7, #16
24059c66:	46bd      	mov	sp, r7
24059c68:	bd80      	pop	{r7, pc}
24059c6a:	bf00      	nop
24059c6c:	58024800 	.word	0x58024800

24059c70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24059c70:	b580      	push	{r7, lr}
24059c72:	b08c      	sub	sp, #48	; 0x30
24059c74:	af00      	add	r7, sp, #0
24059c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
24059c78:	687b      	ldr	r3, [r7, #4]
24059c7a:	2b00      	cmp	r3, #0
24059c7c:	d102      	bne.n	24059c84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
24059c7e:	2301      	movs	r3, #1
24059c80:	f000 bc1f 	b.w	2405a4c2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24059c84:	687b      	ldr	r3, [r7, #4]
24059c86:	681b      	ldr	r3, [r3, #0]
24059c88:	f003 0301 	and.w	r3, r3, #1
24059c8c:	2b00      	cmp	r3, #0
24059c8e:	f000 80b3 	beq.w	24059df8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24059c92:	4b95      	ldr	r3, [pc, #596]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059c94:	691b      	ldr	r3, [r3, #16]
24059c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
24059c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24059c9c:	4b92      	ldr	r3, [pc, #584]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24059ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24059ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24059ca4:	2b10      	cmp	r3, #16
24059ca6:	d007      	beq.n	24059cb8 <HAL_RCC_OscConfig+0x48>
24059ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24059caa:	2b18      	cmp	r3, #24
24059cac:	d112      	bne.n	24059cd4 <HAL_RCC_OscConfig+0x64>
24059cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
24059cb0:	f003 0303 	and.w	r3, r3, #3
24059cb4:	2b02      	cmp	r3, #2
24059cb6:	d10d      	bne.n	24059cd4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24059cb8:	4b8b      	ldr	r3, [pc, #556]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059cba:	681b      	ldr	r3, [r3, #0]
24059cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24059cc0:	2b00      	cmp	r3, #0
24059cc2:	f000 8098 	beq.w	24059df6 <HAL_RCC_OscConfig+0x186>
24059cc6:	687b      	ldr	r3, [r7, #4]
24059cc8:	685b      	ldr	r3, [r3, #4]
24059cca:	2b00      	cmp	r3, #0
24059ccc:	f040 8093 	bne.w	24059df6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
24059cd0:	2301      	movs	r3, #1
24059cd2:	e3f6      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24059cd4:	687b      	ldr	r3, [r7, #4]
24059cd6:	685b      	ldr	r3, [r3, #4]
24059cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24059cdc:	d106      	bne.n	24059cec <HAL_RCC_OscConfig+0x7c>
24059cde:	4b82      	ldr	r3, [pc, #520]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059ce0:	681b      	ldr	r3, [r3, #0]
24059ce2:	4a81      	ldr	r2, [pc, #516]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24059ce8:	6013      	str	r3, [r2, #0]
24059cea:	e058      	b.n	24059d9e <HAL_RCC_OscConfig+0x12e>
24059cec:	687b      	ldr	r3, [r7, #4]
24059cee:	685b      	ldr	r3, [r3, #4]
24059cf0:	2b00      	cmp	r3, #0
24059cf2:	d112      	bne.n	24059d1a <HAL_RCC_OscConfig+0xaa>
24059cf4:	4b7c      	ldr	r3, [pc, #496]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059cf6:	681b      	ldr	r3, [r3, #0]
24059cf8:	4a7b      	ldr	r2, [pc, #492]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24059cfe:	6013      	str	r3, [r2, #0]
24059d00:	4b79      	ldr	r3, [pc, #484]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d02:	681b      	ldr	r3, [r3, #0]
24059d04:	4a78      	ldr	r2, [pc, #480]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
24059d0a:	6013      	str	r3, [r2, #0]
24059d0c:	4b76      	ldr	r3, [pc, #472]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d0e:	681b      	ldr	r3, [r3, #0]
24059d10:	4a75      	ldr	r2, [pc, #468]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24059d16:	6013      	str	r3, [r2, #0]
24059d18:	e041      	b.n	24059d9e <HAL_RCC_OscConfig+0x12e>
24059d1a:	687b      	ldr	r3, [r7, #4]
24059d1c:	685b      	ldr	r3, [r3, #4]
24059d1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24059d22:	d112      	bne.n	24059d4a <HAL_RCC_OscConfig+0xda>
24059d24:	4b70      	ldr	r3, [pc, #448]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d26:	681b      	ldr	r3, [r3, #0]
24059d28:	4a6f      	ldr	r2, [pc, #444]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24059d2e:	6013      	str	r3, [r2, #0]
24059d30:	4b6d      	ldr	r3, [pc, #436]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d32:	681b      	ldr	r3, [r3, #0]
24059d34:	4a6c      	ldr	r2, [pc, #432]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
24059d3a:	6013      	str	r3, [r2, #0]
24059d3c:	4b6a      	ldr	r3, [pc, #424]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d3e:	681b      	ldr	r3, [r3, #0]
24059d40:	4a69      	ldr	r2, [pc, #420]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24059d46:	6013      	str	r3, [r2, #0]
24059d48:	e029      	b.n	24059d9e <HAL_RCC_OscConfig+0x12e>
24059d4a:	687b      	ldr	r3, [r7, #4]
24059d4c:	685b      	ldr	r3, [r3, #4]
24059d4e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
24059d52:	d112      	bne.n	24059d7a <HAL_RCC_OscConfig+0x10a>
24059d54:	4b64      	ldr	r3, [pc, #400]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d56:	681b      	ldr	r3, [r3, #0]
24059d58:	4a63      	ldr	r2, [pc, #396]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24059d5e:	6013      	str	r3, [r2, #0]
24059d60:	4b61      	ldr	r3, [pc, #388]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d62:	681b      	ldr	r3, [r3, #0]
24059d64:	4a60      	ldr	r2, [pc, #384]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
24059d6a:	6013      	str	r3, [r2, #0]
24059d6c:	4b5e      	ldr	r3, [pc, #376]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d6e:	681b      	ldr	r3, [r3, #0]
24059d70:	4a5d      	ldr	r2, [pc, #372]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24059d76:	6013      	str	r3, [r2, #0]
24059d78:	e011      	b.n	24059d9e <HAL_RCC_OscConfig+0x12e>
24059d7a:	4b5b      	ldr	r3, [pc, #364]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d7c:	681b      	ldr	r3, [r3, #0]
24059d7e:	4a5a      	ldr	r2, [pc, #360]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24059d84:	6013      	str	r3, [r2, #0]
24059d86:	4b58      	ldr	r3, [pc, #352]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d88:	681b      	ldr	r3, [r3, #0]
24059d8a:	4a57      	ldr	r2, [pc, #348]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24059d90:	6013      	str	r3, [r2, #0]
24059d92:	4b55      	ldr	r3, [pc, #340]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d94:	681b      	ldr	r3, [r3, #0]
24059d96:	4a54      	ldr	r2, [pc, #336]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059d98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
24059d9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24059d9e:	687b      	ldr	r3, [r7, #4]
24059da0:	685b      	ldr	r3, [r3, #4]
24059da2:	2b00      	cmp	r3, #0
24059da4:	d013      	beq.n	24059dce <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24059da6:	f7f8 ffb5 	bl	24052d14 <HAL_GetTick>
24059daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24059dac:	e008      	b.n	24059dc0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24059dae:	f7f8 ffb1 	bl	24052d14 <HAL_GetTick>
24059db2:	4602      	mov	r2, r0
24059db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059db6:	1ad3      	subs	r3, r2, r3
24059db8:	2b64      	cmp	r3, #100	; 0x64
24059dba:	d901      	bls.n	24059dc0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
24059dbc:	2303      	movs	r3, #3
24059dbe:	e380      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24059dc0:	4b49      	ldr	r3, [pc, #292]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059dc2:	681b      	ldr	r3, [r3, #0]
24059dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24059dc8:	2b00      	cmp	r3, #0
24059dca:	d0f0      	beq.n	24059dae <HAL_RCC_OscConfig+0x13e>
24059dcc:	e014      	b.n	24059df8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24059dce:	f7f8 ffa1 	bl	24052d14 <HAL_GetTick>
24059dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24059dd4:	e008      	b.n	24059de8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24059dd6:	f7f8 ff9d 	bl	24052d14 <HAL_GetTick>
24059dda:	4602      	mov	r2, r0
24059ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059dde:	1ad3      	subs	r3, r2, r3
24059de0:	2b64      	cmp	r3, #100	; 0x64
24059de2:	d901      	bls.n	24059de8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
24059de4:	2303      	movs	r3, #3
24059de6:	e36c      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24059de8:	4b3f      	ldr	r3, [pc, #252]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059dea:	681b      	ldr	r3, [r3, #0]
24059dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24059df0:	2b00      	cmp	r3, #0
24059df2:	d1f0      	bne.n	24059dd6 <HAL_RCC_OscConfig+0x166>
24059df4:	e000      	b.n	24059df8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24059df6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24059df8:	687b      	ldr	r3, [r7, #4]
24059dfa:	681b      	ldr	r3, [r3, #0]
24059dfc:	f003 0302 	and.w	r3, r3, #2
24059e00:	2b00      	cmp	r3, #0
24059e02:	f000 808c 	beq.w	24059f1e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24059e06:	4b38      	ldr	r3, [pc, #224]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059e08:	691b      	ldr	r3, [r3, #16]
24059e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
24059e0e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24059e10:	4b35      	ldr	r3, [pc, #212]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24059e14:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24059e16:	6a3b      	ldr	r3, [r7, #32]
24059e18:	2b00      	cmp	r3, #0
24059e1a:	d007      	beq.n	24059e2c <HAL_RCC_OscConfig+0x1bc>
24059e1c:	6a3b      	ldr	r3, [r7, #32]
24059e1e:	2b18      	cmp	r3, #24
24059e20:	d137      	bne.n	24059e92 <HAL_RCC_OscConfig+0x222>
24059e22:	69fb      	ldr	r3, [r7, #28]
24059e24:	f003 0303 	and.w	r3, r3, #3
24059e28:	2b00      	cmp	r3, #0
24059e2a:	d132      	bne.n	24059e92 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24059e2c:	4b2e      	ldr	r3, [pc, #184]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059e2e:	681b      	ldr	r3, [r3, #0]
24059e30:	f003 0304 	and.w	r3, r3, #4
24059e34:	2b00      	cmp	r3, #0
24059e36:	d005      	beq.n	24059e44 <HAL_RCC_OscConfig+0x1d4>
24059e38:	687b      	ldr	r3, [r7, #4]
24059e3a:	68db      	ldr	r3, [r3, #12]
24059e3c:	2b00      	cmp	r3, #0
24059e3e:	d101      	bne.n	24059e44 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
24059e40:	2301      	movs	r3, #1
24059e42:	e33e      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24059e44:	4b28      	ldr	r3, [pc, #160]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059e46:	681b      	ldr	r3, [r3, #0]
24059e48:	f023 0219 	bic.w	r2, r3, #25
24059e4c:	687b      	ldr	r3, [r7, #4]
24059e4e:	68db      	ldr	r3, [r3, #12]
24059e50:	4925      	ldr	r1, [pc, #148]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059e52:	4313      	orrs	r3, r2
24059e54:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24059e56:	f7f8 ff5d 	bl	24052d14 <HAL_GetTick>
24059e5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24059e5c:	e008      	b.n	24059e70 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24059e5e:	f7f8 ff59 	bl	24052d14 <HAL_GetTick>
24059e62:	4602      	mov	r2, r0
24059e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059e66:	1ad3      	subs	r3, r2, r3
24059e68:	2b02      	cmp	r3, #2
24059e6a:	d901      	bls.n	24059e70 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
24059e6c:	2303      	movs	r3, #3
24059e6e:	e328      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24059e70:	4b1d      	ldr	r3, [pc, #116]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059e72:	681b      	ldr	r3, [r3, #0]
24059e74:	f003 0304 	and.w	r3, r3, #4
24059e78:	2b00      	cmp	r3, #0
24059e7a:	d0f0      	beq.n	24059e5e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24059e7c:	4b1a      	ldr	r3, [pc, #104]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059e7e:	685b      	ldr	r3, [r3, #4]
24059e80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
24059e84:	687b      	ldr	r3, [r7, #4]
24059e86:	691b      	ldr	r3, [r3, #16]
24059e88:	061b      	lsls	r3, r3, #24
24059e8a:	4917      	ldr	r1, [pc, #92]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059e8c:	4313      	orrs	r3, r2
24059e8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24059e90:	e045      	b.n	24059f1e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24059e92:	687b      	ldr	r3, [r7, #4]
24059e94:	68db      	ldr	r3, [r3, #12]
24059e96:	2b00      	cmp	r3, #0
24059e98:	d028      	beq.n	24059eec <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24059e9a:	4b13      	ldr	r3, [pc, #76]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059e9c:	681b      	ldr	r3, [r3, #0]
24059e9e:	f023 0219 	bic.w	r2, r3, #25
24059ea2:	687b      	ldr	r3, [r7, #4]
24059ea4:	68db      	ldr	r3, [r3, #12]
24059ea6:	4910      	ldr	r1, [pc, #64]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059ea8:	4313      	orrs	r3, r2
24059eaa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24059eac:	f7f8 ff32 	bl	24052d14 <HAL_GetTick>
24059eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24059eb2:	e008      	b.n	24059ec6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24059eb4:	f7f8 ff2e 	bl	24052d14 <HAL_GetTick>
24059eb8:	4602      	mov	r2, r0
24059eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059ebc:	1ad3      	subs	r3, r2, r3
24059ebe:	2b02      	cmp	r3, #2
24059ec0:	d901      	bls.n	24059ec6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
24059ec2:	2303      	movs	r3, #3
24059ec4:	e2fd      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24059ec6:	4b08      	ldr	r3, [pc, #32]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059ec8:	681b      	ldr	r3, [r3, #0]
24059eca:	f003 0304 	and.w	r3, r3, #4
24059ece:	2b00      	cmp	r3, #0
24059ed0:	d0f0      	beq.n	24059eb4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24059ed2:	4b05      	ldr	r3, [pc, #20]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059ed4:	685b      	ldr	r3, [r3, #4]
24059ed6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
24059eda:	687b      	ldr	r3, [r7, #4]
24059edc:	691b      	ldr	r3, [r3, #16]
24059ede:	061b      	lsls	r3, r3, #24
24059ee0:	4901      	ldr	r1, [pc, #4]	; (24059ee8 <HAL_RCC_OscConfig+0x278>)
24059ee2:	4313      	orrs	r3, r2
24059ee4:	604b      	str	r3, [r1, #4]
24059ee6:	e01a      	b.n	24059f1e <HAL_RCC_OscConfig+0x2ae>
24059ee8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
24059eec:	4b97      	ldr	r3, [pc, #604]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059eee:	681b      	ldr	r3, [r3, #0]
24059ef0:	4a96      	ldr	r2, [pc, #600]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059ef2:	f023 0301 	bic.w	r3, r3, #1
24059ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24059ef8:	f7f8 ff0c 	bl	24052d14 <HAL_GetTick>
24059efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24059efe:	e008      	b.n	24059f12 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24059f00:	f7f8 ff08 	bl	24052d14 <HAL_GetTick>
24059f04:	4602      	mov	r2, r0
24059f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059f08:	1ad3      	subs	r3, r2, r3
24059f0a:	2b02      	cmp	r3, #2
24059f0c:	d901      	bls.n	24059f12 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
24059f0e:	2303      	movs	r3, #3
24059f10:	e2d7      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24059f12:	4b8e      	ldr	r3, [pc, #568]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059f14:	681b      	ldr	r3, [r3, #0]
24059f16:	f003 0304 	and.w	r3, r3, #4
24059f1a:	2b00      	cmp	r3, #0
24059f1c:	d1f0      	bne.n	24059f00 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24059f1e:	687b      	ldr	r3, [r7, #4]
24059f20:	681b      	ldr	r3, [r3, #0]
24059f22:	f003 0310 	and.w	r3, r3, #16
24059f26:	2b00      	cmp	r3, #0
24059f28:	d06a      	beq.n	2405a000 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24059f2a:	4b88      	ldr	r3, [pc, #544]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059f2c:	691b      	ldr	r3, [r3, #16]
24059f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
24059f32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24059f34:	4b85      	ldr	r3, [pc, #532]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24059f38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24059f3a:	69bb      	ldr	r3, [r7, #24]
24059f3c:	2b08      	cmp	r3, #8
24059f3e:	d007      	beq.n	24059f50 <HAL_RCC_OscConfig+0x2e0>
24059f40:	69bb      	ldr	r3, [r7, #24]
24059f42:	2b18      	cmp	r3, #24
24059f44:	d11b      	bne.n	24059f7e <HAL_RCC_OscConfig+0x30e>
24059f46:	697b      	ldr	r3, [r7, #20]
24059f48:	f003 0303 	and.w	r3, r3, #3
24059f4c:	2b01      	cmp	r3, #1
24059f4e:	d116      	bne.n	24059f7e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24059f50:	4b7e      	ldr	r3, [pc, #504]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059f52:	681b      	ldr	r3, [r3, #0]
24059f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
24059f58:	2b00      	cmp	r3, #0
24059f5a:	d005      	beq.n	24059f68 <HAL_RCC_OscConfig+0x2f8>
24059f5c:	687b      	ldr	r3, [r7, #4]
24059f5e:	69db      	ldr	r3, [r3, #28]
24059f60:	2b80      	cmp	r3, #128	; 0x80
24059f62:	d001      	beq.n	24059f68 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
24059f64:	2301      	movs	r3, #1
24059f66:	e2ac      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24059f68:	4b78      	ldr	r3, [pc, #480]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059f6a:	68db      	ldr	r3, [r3, #12]
24059f6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24059f70:	687b      	ldr	r3, [r7, #4]
24059f72:	6a1b      	ldr	r3, [r3, #32]
24059f74:	061b      	lsls	r3, r3, #24
24059f76:	4975      	ldr	r1, [pc, #468]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059f78:	4313      	orrs	r3, r2
24059f7a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24059f7c:	e040      	b.n	2405a000 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24059f7e:	687b      	ldr	r3, [r7, #4]
24059f80:	69db      	ldr	r3, [r3, #28]
24059f82:	2b00      	cmp	r3, #0
24059f84:	d023      	beq.n	24059fce <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
24059f86:	4b71      	ldr	r3, [pc, #452]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059f88:	681b      	ldr	r3, [r3, #0]
24059f8a:	4a70      	ldr	r2, [pc, #448]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24059f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24059f92:	f7f8 febf 	bl	24052d14 <HAL_GetTick>
24059f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24059f98:	e008      	b.n	24059fac <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24059f9a:	f7f8 febb 	bl	24052d14 <HAL_GetTick>
24059f9e:	4602      	mov	r2, r0
24059fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059fa2:	1ad3      	subs	r3, r2, r3
24059fa4:	2b02      	cmp	r3, #2
24059fa6:	d901      	bls.n	24059fac <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
24059fa8:	2303      	movs	r3, #3
24059faa:	e28a      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24059fac:	4b67      	ldr	r3, [pc, #412]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059fae:	681b      	ldr	r3, [r3, #0]
24059fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
24059fb4:	2b00      	cmp	r3, #0
24059fb6:	d0f0      	beq.n	24059f9a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24059fb8:	4b64      	ldr	r3, [pc, #400]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059fba:	68db      	ldr	r3, [r3, #12]
24059fbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24059fc0:	687b      	ldr	r3, [r7, #4]
24059fc2:	6a1b      	ldr	r3, [r3, #32]
24059fc4:	061b      	lsls	r3, r3, #24
24059fc6:	4961      	ldr	r1, [pc, #388]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059fc8:	4313      	orrs	r3, r2
24059fca:	60cb      	str	r3, [r1, #12]
24059fcc:	e018      	b.n	2405a000 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
24059fce:	4b5f      	ldr	r3, [pc, #380]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059fd0:	681b      	ldr	r3, [r3, #0]
24059fd2:	4a5e      	ldr	r2, [pc, #376]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24059fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24059fda:	f7f8 fe9b 	bl	24052d14 <HAL_GetTick>
24059fde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24059fe0:	e008      	b.n	24059ff4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24059fe2:	f7f8 fe97 	bl	24052d14 <HAL_GetTick>
24059fe6:	4602      	mov	r2, r0
24059fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059fea:	1ad3      	subs	r3, r2, r3
24059fec:	2b02      	cmp	r3, #2
24059fee:	d901      	bls.n	24059ff4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
24059ff0:	2303      	movs	r3, #3
24059ff2:	e266      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24059ff4:	4b55      	ldr	r3, [pc, #340]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
24059ff6:	681b      	ldr	r3, [r3, #0]
24059ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
24059ffc:	2b00      	cmp	r3, #0
24059ffe:	d1f0      	bne.n	24059fe2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2405a000:	687b      	ldr	r3, [r7, #4]
2405a002:	681b      	ldr	r3, [r3, #0]
2405a004:	f003 0308 	and.w	r3, r3, #8
2405a008:	2b00      	cmp	r3, #0
2405a00a:	d036      	beq.n	2405a07a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
2405a00c:	687b      	ldr	r3, [r7, #4]
2405a00e:	695b      	ldr	r3, [r3, #20]
2405a010:	2b00      	cmp	r3, #0
2405a012:	d019      	beq.n	2405a048 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2405a014:	4b4d      	ldr	r3, [pc, #308]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405a018:	4a4c      	ldr	r2, [pc, #304]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a01a:	f043 0301 	orr.w	r3, r3, #1
2405a01e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405a020:	f7f8 fe78 	bl	24052d14 <HAL_GetTick>
2405a024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2405a026:	e008      	b.n	2405a03a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2405a028:	f7f8 fe74 	bl	24052d14 <HAL_GetTick>
2405a02c:	4602      	mov	r2, r0
2405a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a030:	1ad3      	subs	r3, r2, r3
2405a032:	2b02      	cmp	r3, #2
2405a034:	d901      	bls.n	2405a03a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
2405a036:	2303      	movs	r3, #3
2405a038:	e243      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2405a03a:	4b44      	ldr	r3, [pc, #272]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a03c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405a03e:	f003 0302 	and.w	r3, r3, #2
2405a042:	2b00      	cmp	r3, #0
2405a044:	d0f0      	beq.n	2405a028 <HAL_RCC_OscConfig+0x3b8>
2405a046:	e018      	b.n	2405a07a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2405a048:	4b40      	ldr	r3, [pc, #256]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a04a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405a04c:	4a3f      	ldr	r2, [pc, #252]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a04e:	f023 0301 	bic.w	r3, r3, #1
2405a052:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405a054:	f7f8 fe5e 	bl	24052d14 <HAL_GetTick>
2405a058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2405a05a:	e008      	b.n	2405a06e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2405a05c:	f7f8 fe5a 	bl	24052d14 <HAL_GetTick>
2405a060:	4602      	mov	r2, r0
2405a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a064:	1ad3      	subs	r3, r2, r3
2405a066:	2b02      	cmp	r3, #2
2405a068:	d901      	bls.n	2405a06e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
2405a06a:	2303      	movs	r3, #3
2405a06c:	e229      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2405a06e:	4b37      	ldr	r3, [pc, #220]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405a072:	f003 0302 	and.w	r3, r3, #2
2405a076:	2b00      	cmp	r3, #0
2405a078:	d1f0      	bne.n	2405a05c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
2405a07a:	687b      	ldr	r3, [r7, #4]
2405a07c:	681b      	ldr	r3, [r3, #0]
2405a07e:	f003 0320 	and.w	r3, r3, #32
2405a082:	2b00      	cmp	r3, #0
2405a084:	d036      	beq.n	2405a0f4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
2405a086:	687b      	ldr	r3, [r7, #4]
2405a088:	699b      	ldr	r3, [r3, #24]
2405a08a:	2b00      	cmp	r3, #0
2405a08c:	d019      	beq.n	2405a0c2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
2405a08e:	4b2f      	ldr	r3, [pc, #188]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a090:	681b      	ldr	r3, [r3, #0]
2405a092:	4a2e      	ldr	r2, [pc, #184]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a094:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2405a098:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2405a09a:	f7f8 fe3b 	bl	24052d14 <HAL_GetTick>
2405a09e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2405a0a0:	e008      	b.n	2405a0b4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
2405a0a2:	f7f8 fe37 	bl	24052d14 <HAL_GetTick>
2405a0a6:	4602      	mov	r2, r0
2405a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a0aa:	1ad3      	subs	r3, r2, r3
2405a0ac:	2b02      	cmp	r3, #2
2405a0ae:	d901      	bls.n	2405a0b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
2405a0b0:	2303      	movs	r3, #3
2405a0b2:	e206      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2405a0b4:	4b25      	ldr	r3, [pc, #148]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a0b6:	681b      	ldr	r3, [r3, #0]
2405a0b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405a0bc:	2b00      	cmp	r3, #0
2405a0be:	d0f0      	beq.n	2405a0a2 <HAL_RCC_OscConfig+0x432>
2405a0c0:	e018      	b.n	2405a0f4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
2405a0c2:	4b22      	ldr	r3, [pc, #136]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a0c4:	681b      	ldr	r3, [r3, #0]
2405a0c6:	4a21      	ldr	r2, [pc, #132]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a0c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2405a0cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2405a0ce:	f7f8 fe21 	bl	24052d14 <HAL_GetTick>
2405a0d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2405a0d4:	e008      	b.n	2405a0e8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
2405a0d6:	f7f8 fe1d 	bl	24052d14 <HAL_GetTick>
2405a0da:	4602      	mov	r2, r0
2405a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a0de:	1ad3      	subs	r3, r2, r3
2405a0e0:	2b02      	cmp	r3, #2
2405a0e2:	d901      	bls.n	2405a0e8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
2405a0e4:	2303      	movs	r3, #3
2405a0e6:	e1ec      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2405a0e8:	4b18      	ldr	r3, [pc, #96]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a0ea:	681b      	ldr	r3, [r3, #0]
2405a0ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405a0f0:	2b00      	cmp	r3, #0
2405a0f2:	d1f0      	bne.n	2405a0d6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2405a0f4:	687b      	ldr	r3, [r7, #4]
2405a0f6:	681b      	ldr	r3, [r3, #0]
2405a0f8:	f003 0304 	and.w	r3, r3, #4
2405a0fc:	2b00      	cmp	r3, #0
2405a0fe:	f000 80af 	beq.w	2405a260 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
2405a102:	4b13      	ldr	r3, [pc, #76]	; (2405a150 <HAL_RCC_OscConfig+0x4e0>)
2405a104:	681b      	ldr	r3, [r3, #0]
2405a106:	4a12      	ldr	r2, [pc, #72]	; (2405a150 <HAL_RCC_OscConfig+0x4e0>)
2405a108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405a10c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
2405a10e:	f7f8 fe01 	bl	24052d14 <HAL_GetTick>
2405a112:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405a114:	e008      	b.n	2405a128 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2405a116:	f7f8 fdfd 	bl	24052d14 <HAL_GetTick>
2405a11a:	4602      	mov	r2, r0
2405a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a11e:	1ad3      	subs	r3, r2, r3
2405a120:	2b64      	cmp	r3, #100	; 0x64
2405a122:	d901      	bls.n	2405a128 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
2405a124:	2303      	movs	r3, #3
2405a126:	e1cc      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405a128:	4b09      	ldr	r3, [pc, #36]	; (2405a150 <HAL_RCC_OscConfig+0x4e0>)
2405a12a:	681b      	ldr	r3, [r3, #0]
2405a12c:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405a130:	2b00      	cmp	r3, #0
2405a132:	d0f0      	beq.n	2405a116 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2405a134:	687b      	ldr	r3, [r7, #4]
2405a136:	689b      	ldr	r3, [r3, #8]
2405a138:	2b01      	cmp	r3, #1
2405a13a:	d10b      	bne.n	2405a154 <HAL_RCC_OscConfig+0x4e4>
2405a13c:	4b03      	ldr	r3, [pc, #12]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a140:	4a02      	ldr	r2, [pc, #8]	; (2405a14c <HAL_RCC_OscConfig+0x4dc>)
2405a142:	f043 0301 	orr.w	r3, r3, #1
2405a146:	6713      	str	r3, [r2, #112]	; 0x70
2405a148:	e05b      	b.n	2405a202 <HAL_RCC_OscConfig+0x592>
2405a14a:	bf00      	nop
2405a14c:	58024400 	.word	0x58024400
2405a150:	58024800 	.word	0x58024800
2405a154:	687b      	ldr	r3, [r7, #4]
2405a156:	689b      	ldr	r3, [r3, #8]
2405a158:	2b00      	cmp	r3, #0
2405a15a:	d112      	bne.n	2405a182 <HAL_RCC_OscConfig+0x512>
2405a15c:	4b9d      	ldr	r3, [pc, #628]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a15e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a160:	4a9c      	ldr	r2, [pc, #624]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a162:	f023 0301 	bic.w	r3, r3, #1
2405a166:	6713      	str	r3, [r2, #112]	; 0x70
2405a168:	4b9a      	ldr	r3, [pc, #616]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a16a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a16c:	4a99      	ldr	r2, [pc, #612]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a16e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405a172:	6713      	str	r3, [r2, #112]	; 0x70
2405a174:	4b97      	ldr	r3, [pc, #604]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a178:	4a96      	ldr	r2, [pc, #600]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a17a:	f023 0304 	bic.w	r3, r3, #4
2405a17e:	6713      	str	r3, [r2, #112]	; 0x70
2405a180:	e03f      	b.n	2405a202 <HAL_RCC_OscConfig+0x592>
2405a182:	687b      	ldr	r3, [r7, #4]
2405a184:	689b      	ldr	r3, [r3, #8]
2405a186:	2b05      	cmp	r3, #5
2405a188:	d112      	bne.n	2405a1b0 <HAL_RCC_OscConfig+0x540>
2405a18a:	4b92      	ldr	r3, [pc, #584]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a18e:	4a91      	ldr	r2, [pc, #580]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a190:	f043 0304 	orr.w	r3, r3, #4
2405a194:	6713      	str	r3, [r2, #112]	; 0x70
2405a196:	4b8f      	ldr	r3, [pc, #572]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a19a:	4a8e      	ldr	r2, [pc, #568]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a19c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405a1a0:	6713      	str	r3, [r2, #112]	; 0x70
2405a1a2:	4b8c      	ldr	r3, [pc, #560]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1a6:	4a8b      	ldr	r2, [pc, #556]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1a8:	f043 0301 	orr.w	r3, r3, #1
2405a1ac:	6713      	str	r3, [r2, #112]	; 0x70
2405a1ae:	e028      	b.n	2405a202 <HAL_RCC_OscConfig+0x592>
2405a1b0:	687b      	ldr	r3, [r7, #4]
2405a1b2:	689b      	ldr	r3, [r3, #8]
2405a1b4:	2b85      	cmp	r3, #133	; 0x85
2405a1b6:	d112      	bne.n	2405a1de <HAL_RCC_OscConfig+0x56e>
2405a1b8:	4b86      	ldr	r3, [pc, #536]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1bc:	4a85      	ldr	r2, [pc, #532]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1be:	f043 0304 	orr.w	r3, r3, #4
2405a1c2:	6713      	str	r3, [r2, #112]	; 0x70
2405a1c4:	4b83      	ldr	r3, [pc, #524]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1c8:	4a82      	ldr	r2, [pc, #520]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2405a1ce:	6713      	str	r3, [r2, #112]	; 0x70
2405a1d0:	4b80      	ldr	r3, [pc, #512]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1d4:	4a7f      	ldr	r2, [pc, #508]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1d6:	f043 0301 	orr.w	r3, r3, #1
2405a1da:	6713      	str	r3, [r2, #112]	; 0x70
2405a1dc:	e011      	b.n	2405a202 <HAL_RCC_OscConfig+0x592>
2405a1de:	4b7d      	ldr	r3, [pc, #500]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1e2:	4a7c      	ldr	r2, [pc, #496]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1e4:	f023 0301 	bic.w	r3, r3, #1
2405a1e8:	6713      	str	r3, [r2, #112]	; 0x70
2405a1ea:	4b7a      	ldr	r3, [pc, #488]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1ee:	4a79      	ldr	r2, [pc, #484]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1f0:	f023 0304 	bic.w	r3, r3, #4
2405a1f4:	6713      	str	r3, [r2, #112]	; 0x70
2405a1f6:	4b77      	ldr	r3, [pc, #476]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1fa:	4a76      	ldr	r2, [pc, #472]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a1fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405a200:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2405a202:	687b      	ldr	r3, [r7, #4]
2405a204:	689b      	ldr	r3, [r3, #8]
2405a206:	2b00      	cmp	r3, #0
2405a208:	d015      	beq.n	2405a236 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405a20a:	f7f8 fd83 	bl	24052d14 <HAL_GetTick>
2405a20e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405a210:	e00a      	b.n	2405a228 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405a212:	f7f8 fd7f 	bl	24052d14 <HAL_GetTick>
2405a216:	4602      	mov	r2, r0
2405a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a21a:	1ad3      	subs	r3, r2, r3
2405a21c:	f241 3288 	movw	r2, #5000	; 0x1388
2405a220:	4293      	cmp	r3, r2
2405a222:	d901      	bls.n	2405a228 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
2405a224:	2303      	movs	r3, #3
2405a226:	e14c      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405a228:	4b6a      	ldr	r3, [pc, #424]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a22a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a22c:	f003 0302 	and.w	r3, r3, #2
2405a230:	2b00      	cmp	r3, #0
2405a232:	d0ee      	beq.n	2405a212 <HAL_RCC_OscConfig+0x5a2>
2405a234:	e014      	b.n	2405a260 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405a236:	f7f8 fd6d 	bl	24052d14 <HAL_GetTick>
2405a23a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2405a23c:	e00a      	b.n	2405a254 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405a23e:	f7f8 fd69 	bl	24052d14 <HAL_GetTick>
2405a242:	4602      	mov	r2, r0
2405a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a246:	1ad3      	subs	r3, r2, r3
2405a248:	f241 3288 	movw	r2, #5000	; 0x1388
2405a24c:	4293      	cmp	r3, r2
2405a24e:	d901      	bls.n	2405a254 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
2405a250:	2303      	movs	r3, #3
2405a252:	e136      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2405a254:	4b5f      	ldr	r3, [pc, #380]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a258:	f003 0302 	and.w	r3, r3, #2
2405a25c:	2b00      	cmp	r3, #0
2405a25e:	d1ee      	bne.n	2405a23e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2405a260:	687b      	ldr	r3, [r7, #4]
2405a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405a264:	2b00      	cmp	r3, #0
2405a266:	f000 812b 	beq.w	2405a4c0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
2405a26a:	4b5a      	ldr	r3, [pc, #360]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a26c:	691b      	ldr	r3, [r3, #16]
2405a26e:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405a272:	2b18      	cmp	r3, #24
2405a274:	f000 80bb 	beq.w	2405a3ee <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2405a278:	687b      	ldr	r3, [r7, #4]
2405a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405a27c:	2b02      	cmp	r3, #2
2405a27e:	f040 8095 	bne.w	2405a3ac <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2405a282:	4b54      	ldr	r3, [pc, #336]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a284:	681b      	ldr	r3, [r3, #0]
2405a286:	4a53      	ldr	r2, [pc, #332]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a288:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2405a28c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405a28e:	f7f8 fd41 	bl	24052d14 <HAL_GetTick>
2405a292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405a294:	e008      	b.n	2405a2a8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2405a296:	f7f8 fd3d 	bl	24052d14 <HAL_GetTick>
2405a29a:	4602      	mov	r2, r0
2405a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a29e:	1ad3      	subs	r3, r2, r3
2405a2a0:	2b02      	cmp	r3, #2
2405a2a2:	d901      	bls.n	2405a2a8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
2405a2a4:	2303      	movs	r3, #3
2405a2a6:	e10c      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405a2a8:	4b4a      	ldr	r3, [pc, #296]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a2aa:	681b      	ldr	r3, [r3, #0]
2405a2ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405a2b0:	2b00      	cmp	r3, #0
2405a2b2:	d1f0      	bne.n	2405a296 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
2405a2b4:	4b47      	ldr	r3, [pc, #284]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a2b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2405a2b8:	4b47      	ldr	r3, [pc, #284]	; (2405a3d8 <HAL_RCC_OscConfig+0x768>)
2405a2ba:	4013      	ands	r3, r2
2405a2bc:	687a      	ldr	r2, [r7, #4]
2405a2be:	6a91      	ldr	r1, [r2, #40]	; 0x28
2405a2c0:	687a      	ldr	r2, [r7, #4]
2405a2c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
2405a2c4:	0112      	lsls	r2, r2, #4
2405a2c6:	430a      	orrs	r2, r1
2405a2c8:	4942      	ldr	r1, [pc, #264]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a2ca:	4313      	orrs	r3, r2
2405a2cc:	628b      	str	r3, [r1, #40]	; 0x28
2405a2ce:	687b      	ldr	r3, [r7, #4]
2405a2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405a2d2:	3b01      	subs	r3, #1
2405a2d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405a2d8:	687b      	ldr	r3, [r7, #4]
2405a2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405a2dc:	3b01      	subs	r3, #1
2405a2de:	025b      	lsls	r3, r3, #9
2405a2e0:	b29b      	uxth	r3, r3
2405a2e2:	431a      	orrs	r2, r3
2405a2e4:	687b      	ldr	r3, [r7, #4]
2405a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405a2e8:	3b01      	subs	r3, #1
2405a2ea:	041b      	lsls	r3, r3, #16
2405a2ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2405a2f0:	431a      	orrs	r2, r3
2405a2f2:	687b      	ldr	r3, [r7, #4]
2405a2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405a2f6:	3b01      	subs	r3, #1
2405a2f8:	061b      	lsls	r3, r3, #24
2405a2fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2405a2fe:	4935      	ldr	r1, [pc, #212]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a300:	4313      	orrs	r3, r2
2405a302:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
2405a304:	4b33      	ldr	r3, [pc, #204]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a308:	4a32      	ldr	r2, [pc, #200]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a30a:	f023 0301 	bic.w	r3, r3, #1
2405a30e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2405a310:	4b30      	ldr	r3, [pc, #192]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405a314:	4b31      	ldr	r3, [pc, #196]	; (2405a3dc <HAL_RCC_OscConfig+0x76c>)
2405a316:	4013      	ands	r3, r2
2405a318:	687a      	ldr	r2, [r7, #4]
2405a31a:	6c92      	ldr	r2, [r2, #72]	; 0x48
2405a31c:	00d2      	lsls	r2, r2, #3
2405a31e:	492d      	ldr	r1, [pc, #180]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a320:	4313      	orrs	r3, r2
2405a322:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
2405a324:	4b2b      	ldr	r3, [pc, #172]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a328:	f023 020c 	bic.w	r2, r3, #12
2405a32c:	687b      	ldr	r3, [r7, #4]
2405a32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a330:	4928      	ldr	r1, [pc, #160]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a332:	4313      	orrs	r3, r2
2405a334:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
2405a336:	4b27      	ldr	r3, [pc, #156]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a33a:	f023 0202 	bic.w	r2, r3, #2
2405a33e:	687b      	ldr	r3, [r7, #4]
2405a340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405a342:	4924      	ldr	r1, [pc, #144]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a344:	4313      	orrs	r3, r2
2405a346:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
2405a348:	4b22      	ldr	r3, [pc, #136]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a34c:	4a21      	ldr	r2, [pc, #132]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a34e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405a352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405a354:	4b1f      	ldr	r3, [pc, #124]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a358:	4a1e      	ldr	r2, [pc, #120]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a35a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405a35e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
2405a360:	4b1c      	ldr	r3, [pc, #112]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a364:	4a1b      	ldr	r2, [pc, #108]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2405a36a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
2405a36c:	4b19      	ldr	r3, [pc, #100]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a370:	4a18      	ldr	r2, [pc, #96]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a372:	f043 0301 	orr.w	r3, r3, #1
2405a376:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2405a378:	4b16      	ldr	r3, [pc, #88]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a37a:	681b      	ldr	r3, [r3, #0]
2405a37c:	4a15      	ldr	r2, [pc, #84]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a37e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2405a382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405a384:	f7f8 fcc6 	bl	24052d14 <HAL_GetTick>
2405a388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405a38a:	e008      	b.n	2405a39e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2405a38c:	f7f8 fcc2 	bl	24052d14 <HAL_GetTick>
2405a390:	4602      	mov	r2, r0
2405a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a394:	1ad3      	subs	r3, r2, r3
2405a396:	2b02      	cmp	r3, #2
2405a398:	d901      	bls.n	2405a39e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
2405a39a:	2303      	movs	r3, #3
2405a39c:	e091      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405a39e:	4b0d      	ldr	r3, [pc, #52]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a3a0:	681b      	ldr	r3, [r3, #0]
2405a3a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405a3a6:	2b00      	cmp	r3, #0
2405a3a8:	d0f0      	beq.n	2405a38c <HAL_RCC_OscConfig+0x71c>
2405a3aa:	e089      	b.n	2405a4c0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2405a3ac:	4b09      	ldr	r3, [pc, #36]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a3ae:	681b      	ldr	r3, [r3, #0]
2405a3b0:	4a08      	ldr	r2, [pc, #32]	; (2405a3d4 <HAL_RCC_OscConfig+0x764>)
2405a3b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2405a3b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405a3b8:	f7f8 fcac 	bl	24052d14 <HAL_GetTick>
2405a3bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405a3be:	e00f      	b.n	2405a3e0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2405a3c0:	f7f8 fca8 	bl	24052d14 <HAL_GetTick>
2405a3c4:	4602      	mov	r2, r0
2405a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a3c8:	1ad3      	subs	r3, r2, r3
2405a3ca:	2b02      	cmp	r3, #2
2405a3cc:	d908      	bls.n	2405a3e0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
2405a3ce:	2303      	movs	r3, #3
2405a3d0:	e077      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
2405a3d2:	bf00      	nop
2405a3d4:	58024400 	.word	0x58024400
2405a3d8:	fffffc0c 	.word	0xfffffc0c
2405a3dc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405a3e0:	4b3a      	ldr	r3, [pc, #232]	; (2405a4cc <HAL_RCC_OscConfig+0x85c>)
2405a3e2:	681b      	ldr	r3, [r3, #0]
2405a3e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405a3e8:	2b00      	cmp	r3, #0
2405a3ea:	d1e9      	bne.n	2405a3c0 <HAL_RCC_OscConfig+0x750>
2405a3ec:	e068      	b.n	2405a4c0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
2405a3ee:	4b37      	ldr	r3, [pc, #220]	; (2405a4cc <HAL_RCC_OscConfig+0x85c>)
2405a3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405a3f2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
2405a3f4:	4b35      	ldr	r3, [pc, #212]	; (2405a4cc <HAL_RCC_OscConfig+0x85c>)
2405a3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405a3f8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2405a3fa:	687b      	ldr	r3, [r7, #4]
2405a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405a3fe:	2b01      	cmp	r3, #1
2405a400:	d031      	beq.n	2405a466 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2405a402:	693b      	ldr	r3, [r7, #16]
2405a404:	f003 0203 	and.w	r2, r3, #3
2405a408:	687b      	ldr	r3, [r7, #4]
2405a40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2405a40c:	429a      	cmp	r2, r3
2405a40e:	d12a      	bne.n	2405a466 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2405a410:	693b      	ldr	r3, [r7, #16]
2405a412:	091b      	lsrs	r3, r3, #4
2405a414:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2405a418:	687b      	ldr	r3, [r7, #4]
2405a41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2405a41c:	429a      	cmp	r2, r3
2405a41e:	d122      	bne.n	2405a466 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2405a420:	68fb      	ldr	r3, [r7, #12]
2405a422:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405a426:	687b      	ldr	r3, [r7, #4]
2405a428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405a42a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2405a42c:	429a      	cmp	r2, r3
2405a42e:	d11a      	bne.n	2405a466 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2405a430:	68fb      	ldr	r3, [r7, #12]
2405a432:	0a5b      	lsrs	r3, r3, #9
2405a434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2405a438:	687b      	ldr	r3, [r7, #4]
2405a43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405a43c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2405a43e:	429a      	cmp	r2, r3
2405a440:	d111      	bne.n	2405a466 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2405a442:	68fb      	ldr	r3, [r7, #12]
2405a444:	0c1b      	lsrs	r3, r3, #16
2405a446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2405a44a:	687b      	ldr	r3, [r7, #4]
2405a44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405a44e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2405a450:	429a      	cmp	r2, r3
2405a452:	d108      	bne.n	2405a466 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
2405a454:	68fb      	ldr	r3, [r7, #12]
2405a456:	0e1b      	lsrs	r3, r3, #24
2405a458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2405a45c:	687b      	ldr	r3, [r7, #4]
2405a45e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405a460:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2405a462:	429a      	cmp	r2, r3
2405a464:	d001      	beq.n	2405a46a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
2405a466:	2301      	movs	r3, #1
2405a468:	e02b      	b.n	2405a4c2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
2405a46a:	4b18      	ldr	r3, [pc, #96]	; (2405a4cc <HAL_RCC_OscConfig+0x85c>)
2405a46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405a46e:	08db      	lsrs	r3, r3, #3
2405a470:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405a474:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
2405a476:	687b      	ldr	r3, [r7, #4]
2405a478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405a47a:	693a      	ldr	r2, [r7, #16]
2405a47c:	429a      	cmp	r2, r3
2405a47e:	d01f      	beq.n	2405a4c0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
2405a480:	4b12      	ldr	r3, [pc, #72]	; (2405a4cc <HAL_RCC_OscConfig+0x85c>)
2405a482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a484:	4a11      	ldr	r2, [pc, #68]	; (2405a4cc <HAL_RCC_OscConfig+0x85c>)
2405a486:	f023 0301 	bic.w	r3, r3, #1
2405a48a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
2405a48c:	f7f8 fc42 	bl	24052d14 <HAL_GetTick>
2405a490:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
2405a492:	bf00      	nop
2405a494:	f7f8 fc3e 	bl	24052d14 <HAL_GetTick>
2405a498:	4602      	mov	r2, r0
2405a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a49c:	4293      	cmp	r3, r2
2405a49e:	d0f9      	beq.n	2405a494 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2405a4a0:	4b0a      	ldr	r3, [pc, #40]	; (2405a4cc <HAL_RCC_OscConfig+0x85c>)
2405a4a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405a4a4:	4b0a      	ldr	r3, [pc, #40]	; (2405a4d0 <HAL_RCC_OscConfig+0x860>)
2405a4a6:	4013      	ands	r3, r2
2405a4a8:	687a      	ldr	r2, [r7, #4]
2405a4aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
2405a4ac:	00d2      	lsls	r2, r2, #3
2405a4ae:	4907      	ldr	r1, [pc, #28]	; (2405a4cc <HAL_RCC_OscConfig+0x85c>)
2405a4b0:	4313      	orrs	r3, r2
2405a4b2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
2405a4b4:	4b05      	ldr	r3, [pc, #20]	; (2405a4cc <HAL_RCC_OscConfig+0x85c>)
2405a4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a4b8:	4a04      	ldr	r2, [pc, #16]	; (2405a4cc <HAL_RCC_OscConfig+0x85c>)
2405a4ba:	f043 0301 	orr.w	r3, r3, #1
2405a4be:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
2405a4c0:	2300      	movs	r3, #0
}
2405a4c2:	4618      	mov	r0, r3
2405a4c4:	3730      	adds	r7, #48	; 0x30
2405a4c6:	46bd      	mov	sp, r7
2405a4c8:	bd80      	pop	{r7, pc}
2405a4ca:	bf00      	nop
2405a4cc:	58024400 	.word	0x58024400
2405a4d0:	ffff0007 	.word	0xffff0007

2405a4d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2405a4d4:	b580      	push	{r7, lr}
2405a4d6:	b086      	sub	sp, #24
2405a4d8:	af00      	add	r7, sp, #0
2405a4da:	6078      	str	r0, [r7, #4]
2405a4dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
2405a4de:	687b      	ldr	r3, [r7, #4]
2405a4e0:	2b00      	cmp	r3, #0
2405a4e2:	d101      	bne.n	2405a4e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2405a4e4:	2301      	movs	r3, #1
2405a4e6:	e19c      	b.n	2405a822 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2405a4e8:	4b8a      	ldr	r3, [pc, #552]	; (2405a714 <HAL_RCC_ClockConfig+0x240>)
2405a4ea:	681b      	ldr	r3, [r3, #0]
2405a4ec:	f003 030f 	and.w	r3, r3, #15
2405a4f0:	683a      	ldr	r2, [r7, #0]
2405a4f2:	429a      	cmp	r2, r3
2405a4f4:	d910      	bls.n	2405a518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2405a4f6:	4b87      	ldr	r3, [pc, #540]	; (2405a714 <HAL_RCC_ClockConfig+0x240>)
2405a4f8:	681b      	ldr	r3, [r3, #0]
2405a4fa:	f023 020f 	bic.w	r2, r3, #15
2405a4fe:	4985      	ldr	r1, [pc, #532]	; (2405a714 <HAL_RCC_ClockConfig+0x240>)
2405a500:	683b      	ldr	r3, [r7, #0]
2405a502:	4313      	orrs	r3, r2
2405a504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2405a506:	4b83      	ldr	r3, [pc, #524]	; (2405a714 <HAL_RCC_ClockConfig+0x240>)
2405a508:	681b      	ldr	r3, [r3, #0]
2405a50a:	f003 030f 	and.w	r3, r3, #15
2405a50e:	683a      	ldr	r2, [r7, #0]
2405a510:	429a      	cmp	r2, r3
2405a512:	d001      	beq.n	2405a518 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
2405a514:	2301      	movs	r3, #1
2405a516:	e184      	b.n	2405a822 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2405a518:	687b      	ldr	r3, [r7, #4]
2405a51a:	681b      	ldr	r3, [r3, #0]
2405a51c:	f003 0304 	and.w	r3, r3, #4
2405a520:	2b00      	cmp	r3, #0
2405a522:	d010      	beq.n	2405a546 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
2405a524:	687b      	ldr	r3, [r7, #4]
2405a526:	691a      	ldr	r2, [r3, #16]
2405a528:	4b7b      	ldr	r3, [pc, #492]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a52a:	699b      	ldr	r3, [r3, #24]
2405a52c:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405a530:	429a      	cmp	r2, r3
2405a532:	d908      	bls.n	2405a546 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
2405a534:	4b78      	ldr	r3, [pc, #480]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a536:	699b      	ldr	r3, [r3, #24]
2405a538:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405a53c:	687b      	ldr	r3, [r7, #4]
2405a53e:	691b      	ldr	r3, [r3, #16]
2405a540:	4975      	ldr	r1, [pc, #468]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a542:	4313      	orrs	r3, r2
2405a544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2405a546:	687b      	ldr	r3, [r7, #4]
2405a548:	681b      	ldr	r3, [r3, #0]
2405a54a:	f003 0308 	and.w	r3, r3, #8
2405a54e:	2b00      	cmp	r3, #0
2405a550:	d010      	beq.n	2405a574 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
2405a552:	687b      	ldr	r3, [r7, #4]
2405a554:	695a      	ldr	r2, [r3, #20]
2405a556:	4b70      	ldr	r3, [pc, #448]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a558:	69db      	ldr	r3, [r3, #28]
2405a55a:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405a55e:	429a      	cmp	r2, r3
2405a560:	d908      	bls.n	2405a574 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2405a562:	4b6d      	ldr	r3, [pc, #436]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a564:	69db      	ldr	r3, [r3, #28]
2405a566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405a56a:	687b      	ldr	r3, [r7, #4]
2405a56c:	695b      	ldr	r3, [r3, #20]
2405a56e:	496a      	ldr	r1, [pc, #424]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a570:	4313      	orrs	r3, r2
2405a572:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2405a574:	687b      	ldr	r3, [r7, #4]
2405a576:	681b      	ldr	r3, [r3, #0]
2405a578:	f003 0310 	and.w	r3, r3, #16
2405a57c:	2b00      	cmp	r3, #0
2405a57e:	d010      	beq.n	2405a5a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
2405a580:	687b      	ldr	r3, [r7, #4]
2405a582:	699a      	ldr	r2, [r3, #24]
2405a584:	4b64      	ldr	r3, [pc, #400]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a586:	69db      	ldr	r3, [r3, #28]
2405a588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
2405a58c:	429a      	cmp	r2, r3
2405a58e:	d908      	bls.n	2405a5a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2405a590:	4b61      	ldr	r3, [pc, #388]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a592:	69db      	ldr	r3, [r3, #28]
2405a594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
2405a598:	687b      	ldr	r3, [r7, #4]
2405a59a:	699b      	ldr	r3, [r3, #24]
2405a59c:	495e      	ldr	r1, [pc, #376]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a59e:	4313      	orrs	r3, r2
2405a5a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2405a5a2:	687b      	ldr	r3, [r7, #4]
2405a5a4:	681b      	ldr	r3, [r3, #0]
2405a5a6:	f003 0320 	and.w	r3, r3, #32
2405a5aa:	2b00      	cmp	r3, #0
2405a5ac:	d010      	beq.n	2405a5d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
2405a5ae:	687b      	ldr	r3, [r7, #4]
2405a5b0:	69da      	ldr	r2, [r3, #28]
2405a5b2:	4b59      	ldr	r3, [pc, #356]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a5b4:	6a1b      	ldr	r3, [r3, #32]
2405a5b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405a5ba:	429a      	cmp	r2, r3
2405a5bc:	d908      	bls.n	2405a5d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2405a5be:	4b56      	ldr	r3, [pc, #344]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a5c0:	6a1b      	ldr	r3, [r3, #32]
2405a5c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405a5c6:	687b      	ldr	r3, [r7, #4]
2405a5c8:	69db      	ldr	r3, [r3, #28]
2405a5ca:	4953      	ldr	r1, [pc, #332]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a5cc:	4313      	orrs	r3, r2
2405a5ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2405a5d0:	687b      	ldr	r3, [r7, #4]
2405a5d2:	681b      	ldr	r3, [r3, #0]
2405a5d4:	f003 0302 	and.w	r3, r3, #2
2405a5d8:	2b00      	cmp	r3, #0
2405a5da:	d010      	beq.n	2405a5fe <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
2405a5dc:	687b      	ldr	r3, [r7, #4]
2405a5de:	68da      	ldr	r2, [r3, #12]
2405a5e0:	4b4d      	ldr	r3, [pc, #308]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a5e2:	699b      	ldr	r3, [r3, #24]
2405a5e4:	f003 030f 	and.w	r3, r3, #15
2405a5e8:	429a      	cmp	r2, r3
2405a5ea:	d908      	bls.n	2405a5fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2405a5ec:	4b4a      	ldr	r3, [pc, #296]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a5ee:	699b      	ldr	r3, [r3, #24]
2405a5f0:	f023 020f 	bic.w	r2, r3, #15
2405a5f4:	687b      	ldr	r3, [r7, #4]
2405a5f6:	68db      	ldr	r3, [r3, #12]
2405a5f8:	4947      	ldr	r1, [pc, #284]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a5fa:	4313      	orrs	r3, r2
2405a5fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2405a5fe:	687b      	ldr	r3, [r7, #4]
2405a600:	681b      	ldr	r3, [r3, #0]
2405a602:	f003 0301 	and.w	r3, r3, #1
2405a606:	2b00      	cmp	r3, #0
2405a608:	d055      	beq.n	2405a6b6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
2405a60a:	4b43      	ldr	r3, [pc, #268]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a60c:	699b      	ldr	r3, [r3, #24]
2405a60e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
2405a612:	687b      	ldr	r3, [r7, #4]
2405a614:	689b      	ldr	r3, [r3, #8]
2405a616:	4940      	ldr	r1, [pc, #256]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a618:	4313      	orrs	r3, r2
2405a61a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2405a61c:	687b      	ldr	r3, [r7, #4]
2405a61e:	685b      	ldr	r3, [r3, #4]
2405a620:	2b02      	cmp	r3, #2
2405a622:	d107      	bne.n	2405a634 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2405a624:	4b3c      	ldr	r3, [pc, #240]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a626:	681b      	ldr	r3, [r3, #0]
2405a628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405a62c:	2b00      	cmp	r3, #0
2405a62e:	d121      	bne.n	2405a674 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405a630:	2301      	movs	r3, #1
2405a632:	e0f6      	b.n	2405a822 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
2405a634:	687b      	ldr	r3, [r7, #4]
2405a636:	685b      	ldr	r3, [r3, #4]
2405a638:	2b03      	cmp	r3, #3
2405a63a:	d107      	bne.n	2405a64c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405a63c:	4b36      	ldr	r3, [pc, #216]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a63e:	681b      	ldr	r3, [r3, #0]
2405a640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405a644:	2b00      	cmp	r3, #0
2405a646:	d115      	bne.n	2405a674 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405a648:	2301      	movs	r3, #1
2405a64a:	e0ea      	b.n	2405a822 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
2405a64c:	687b      	ldr	r3, [r7, #4]
2405a64e:	685b      	ldr	r3, [r3, #4]
2405a650:	2b01      	cmp	r3, #1
2405a652:	d107      	bne.n	2405a664 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2405a654:	4b30      	ldr	r3, [pc, #192]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a656:	681b      	ldr	r3, [r3, #0]
2405a658:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405a65c:	2b00      	cmp	r3, #0
2405a65e:	d109      	bne.n	2405a674 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405a660:	2301      	movs	r3, #1
2405a662:	e0de      	b.n	2405a822 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405a664:	4b2c      	ldr	r3, [pc, #176]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a666:	681b      	ldr	r3, [r3, #0]
2405a668:	f003 0304 	and.w	r3, r3, #4
2405a66c:	2b00      	cmp	r3, #0
2405a66e:	d101      	bne.n	2405a674 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405a670:	2301      	movs	r3, #1
2405a672:	e0d6      	b.n	2405a822 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
2405a674:	4b28      	ldr	r3, [pc, #160]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a676:	691b      	ldr	r3, [r3, #16]
2405a678:	f023 0207 	bic.w	r2, r3, #7
2405a67c:	687b      	ldr	r3, [r7, #4]
2405a67e:	685b      	ldr	r3, [r3, #4]
2405a680:	4925      	ldr	r1, [pc, #148]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a682:	4313      	orrs	r3, r2
2405a684:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405a686:	f7f8 fb45 	bl	24052d14 <HAL_GetTick>
2405a68a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2405a68c:	e00a      	b.n	2405a6a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2405a68e:	f7f8 fb41 	bl	24052d14 <HAL_GetTick>
2405a692:	4602      	mov	r2, r0
2405a694:	697b      	ldr	r3, [r7, #20]
2405a696:	1ad3      	subs	r3, r2, r3
2405a698:	f241 3288 	movw	r2, #5000	; 0x1388
2405a69c:	4293      	cmp	r3, r2
2405a69e:	d901      	bls.n	2405a6a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
2405a6a0:	2303      	movs	r3, #3
2405a6a2:	e0be      	b.n	2405a822 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2405a6a4:	4b1c      	ldr	r3, [pc, #112]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a6a6:	691b      	ldr	r3, [r3, #16]
2405a6a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
2405a6ac:	687b      	ldr	r3, [r7, #4]
2405a6ae:	685b      	ldr	r3, [r3, #4]
2405a6b0:	00db      	lsls	r3, r3, #3
2405a6b2:	429a      	cmp	r2, r3
2405a6b4:	d1eb      	bne.n	2405a68e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2405a6b6:	687b      	ldr	r3, [r7, #4]
2405a6b8:	681b      	ldr	r3, [r3, #0]
2405a6ba:	f003 0302 	and.w	r3, r3, #2
2405a6be:	2b00      	cmp	r3, #0
2405a6c0:	d010      	beq.n	2405a6e4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
2405a6c2:	687b      	ldr	r3, [r7, #4]
2405a6c4:	68da      	ldr	r2, [r3, #12]
2405a6c6:	4b14      	ldr	r3, [pc, #80]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a6c8:	699b      	ldr	r3, [r3, #24]
2405a6ca:	f003 030f 	and.w	r3, r3, #15
2405a6ce:	429a      	cmp	r2, r3
2405a6d0:	d208      	bcs.n	2405a6e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2405a6d2:	4b11      	ldr	r3, [pc, #68]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a6d4:	699b      	ldr	r3, [r3, #24]
2405a6d6:	f023 020f 	bic.w	r2, r3, #15
2405a6da:	687b      	ldr	r3, [r7, #4]
2405a6dc:	68db      	ldr	r3, [r3, #12]
2405a6de:	490e      	ldr	r1, [pc, #56]	; (2405a718 <HAL_RCC_ClockConfig+0x244>)
2405a6e0:	4313      	orrs	r3, r2
2405a6e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
2405a6e4:	4b0b      	ldr	r3, [pc, #44]	; (2405a714 <HAL_RCC_ClockConfig+0x240>)
2405a6e6:	681b      	ldr	r3, [r3, #0]
2405a6e8:	f003 030f 	and.w	r3, r3, #15
2405a6ec:	683a      	ldr	r2, [r7, #0]
2405a6ee:	429a      	cmp	r2, r3
2405a6f0:	d214      	bcs.n	2405a71c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2405a6f2:	4b08      	ldr	r3, [pc, #32]	; (2405a714 <HAL_RCC_ClockConfig+0x240>)
2405a6f4:	681b      	ldr	r3, [r3, #0]
2405a6f6:	f023 020f 	bic.w	r2, r3, #15
2405a6fa:	4906      	ldr	r1, [pc, #24]	; (2405a714 <HAL_RCC_ClockConfig+0x240>)
2405a6fc:	683b      	ldr	r3, [r7, #0]
2405a6fe:	4313      	orrs	r3, r2
2405a700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2405a702:	4b04      	ldr	r3, [pc, #16]	; (2405a714 <HAL_RCC_ClockConfig+0x240>)
2405a704:	681b      	ldr	r3, [r3, #0]
2405a706:	f003 030f 	and.w	r3, r3, #15
2405a70a:	683a      	ldr	r2, [r7, #0]
2405a70c:	429a      	cmp	r2, r3
2405a70e:	d005      	beq.n	2405a71c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
2405a710:	2301      	movs	r3, #1
2405a712:	e086      	b.n	2405a822 <HAL_RCC_ClockConfig+0x34e>
2405a714:	52002000 	.word	0x52002000
2405a718:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2405a71c:	687b      	ldr	r3, [r7, #4]
2405a71e:	681b      	ldr	r3, [r3, #0]
2405a720:	f003 0304 	and.w	r3, r3, #4
2405a724:	2b00      	cmp	r3, #0
2405a726:	d010      	beq.n	2405a74a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
2405a728:	687b      	ldr	r3, [r7, #4]
2405a72a:	691a      	ldr	r2, [r3, #16]
2405a72c:	4b3f      	ldr	r3, [pc, #252]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a72e:	699b      	ldr	r3, [r3, #24]
2405a730:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405a734:	429a      	cmp	r2, r3
2405a736:	d208      	bcs.n	2405a74a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
2405a738:	4b3c      	ldr	r3, [pc, #240]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a73a:	699b      	ldr	r3, [r3, #24]
2405a73c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405a740:	687b      	ldr	r3, [r7, #4]
2405a742:	691b      	ldr	r3, [r3, #16]
2405a744:	4939      	ldr	r1, [pc, #228]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a746:	4313      	orrs	r3, r2
2405a748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2405a74a:	687b      	ldr	r3, [r7, #4]
2405a74c:	681b      	ldr	r3, [r3, #0]
2405a74e:	f003 0308 	and.w	r3, r3, #8
2405a752:	2b00      	cmp	r3, #0
2405a754:	d010      	beq.n	2405a778 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
2405a756:	687b      	ldr	r3, [r7, #4]
2405a758:	695a      	ldr	r2, [r3, #20]
2405a75a:	4b34      	ldr	r3, [pc, #208]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a75c:	69db      	ldr	r3, [r3, #28]
2405a75e:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405a762:	429a      	cmp	r2, r3
2405a764:	d208      	bcs.n	2405a778 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2405a766:	4b31      	ldr	r3, [pc, #196]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a768:	69db      	ldr	r3, [r3, #28]
2405a76a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405a76e:	687b      	ldr	r3, [r7, #4]
2405a770:	695b      	ldr	r3, [r3, #20]
2405a772:	492e      	ldr	r1, [pc, #184]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a774:	4313      	orrs	r3, r2
2405a776:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2405a778:	687b      	ldr	r3, [r7, #4]
2405a77a:	681b      	ldr	r3, [r3, #0]
2405a77c:	f003 0310 	and.w	r3, r3, #16
2405a780:	2b00      	cmp	r3, #0
2405a782:	d010      	beq.n	2405a7a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
2405a784:	687b      	ldr	r3, [r7, #4]
2405a786:	699a      	ldr	r2, [r3, #24]
2405a788:	4b28      	ldr	r3, [pc, #160]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a78a:	69db      	ldr	r3, [r3, #28]
2405a78c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
2405a790:	429a      	cmp	r2, r3
2405a792:	d208      	bcs.n	2405a7a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2405a794:	4b25      	ldr	r3, [pc, #148]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a796:	69db      	ldr	r3, [r3, #28]
2405a798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
2405a79c:	687b      	ldr	r3, [r7, #4]
2405a79e:	699b      	ldr	r3, [r3, #24]
2405a7a0:	4922      	ldr	r1, [pc, #136]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a7a2:	4313      	orrs	r3, r2
2405a7a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2405a7a6:	687b      	ldr	r3, [r7, #4]
2405a7a8:	681b      	ldr	r3, [r3, #0]
2405a7aa:	f003 0320 	and.w	r3, r3, #32
2405a7ae:	2b00      	cmp	r3, #0
2405a7b0:	d010      	beq.n	2405a7d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
2405a7b2:	687b      	ldr	r3, [r7, #4]
2405a7b4:	69da      	ldr	r2, [r3, #28]
2405a7b6:	4b1d      	ldr	r3, [pc, #116]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a7b8:	6a1b      	ldr	r3, [r3, #32]
2405a7ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405a7be:	429a      	cmp	r2, r3
2405a7c0:	d208      	bcs.n	2405a7d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2405a7c2:	4b1a      	ldr	r3, [pc, #104]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a7c4:	6a1b      	ldr	r3, [r3, #32]
2405a7c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405a7ca:	687b      	ldr	r3, [r7, #4]
2405a7cc:	69db      	ldr	r3, [r3, #28]
2405a7ce:	4917      	ldr	r1, [pc, #92]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a7d0:	4313      	orrs	r3, r2
2405a7d2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
2405a7d4:	f000 f834 	bl	2405a840 <HAL_RCC_GetSysClockFreq>
2405a7d8:	4602      	mov	r2, r0
2405a7da:	4b14      	ldr	r3, [pc, #80]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a7dc:	699b      	ldr	r3, [r3, #24]
2405a7de:	0a1b      	lsrs	r3, r3, #8
2405a7e0:	f003 030f 	and.w	r3, r3, #15
2405a7e4:	4912      	ldr	r1, [pc, #72]	; (2405a830 <HAL_RCC_ClockConfig+0x35c>)
2405a7e6:	5ccb      	ldrb	r3, [r1, r3]
2405a7e8:	f003 031f 	and.w	r3, r3, #31
2405a7ec:	fa22 f303 	lsr.w	r3, r2, r3
2405a7f0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
2405a7f2:	4b0e      	ldr	r3, [pc, #56]	; (2405a82c <HAL_RCC_ClockConfig+0x358>)
2405a7f4:	699b      	ldr	r3, [r3, #24]
2405a7f6:	f003 030f 	and.w	r3, r3, #15
2405a7fa:	4a0d      	ldr	r2, [pc, #52]	; (2405a830 <HAL_RCC_ClockConfig+0x35c>)
2405a7fc:	5cd3      	ldrb	r3, [r2, r3]
2405a7fe:	f003 031f 	and.w	r3, r3, #31
2405a802:	693a      	ldr	r2, [r7, #16]
2405a804:	fa22 f303 	lsr.w	r3, r2, r3
2405a808:	4a0a      	ldr	r2, [pc, #40]	; (2405a834 <HAL_RCC_ClockConfig+0x360>)
2405a80a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2405a80c:	4a0a      	ldr	r2, [pc, #40]	; (2405a838 <HAL_RCC_ClockConfig+0x364>)
2405a80e:	693b      	ldr	r3, [r7, #16]
2405a810:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
2405a812:	4b0a      	ldr	r3, [pc, #40]	; (2405a83c <HAL_RCC_ClockConfig+0x368>)
2405a814:	681b      	ldr	r3, [r3, #0]
2405a816:	4618      	mov	r0, r3
2405a818:	f7f8 fa32 	bl	24052c80 <HAL_InitTick>
2405a81c:	4603      	mov	r3, r0
2405a81e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
2405a820:	7bfb      	ldrb	r3, [r7, #15]
}
2405a822:	4618      	mov	r0, r3
2405a824:	3718      	adds	r7, #24
2405a826:	46bd      	mov	sp, r7
2405a828:	bd80      	pop	{r7, pc}
2405a82a:	bf00      	nop
2405a82c:	58024400 	.word	0x58024400
2405a830:	240615f0 	.word	0x240615f0
2405a834:	20000034 	.word	0x20000034
2405a838:	20000030 	.word	0x20000030
2405a83c:	20000038 	.word	0x20000038

2405a840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
2405a840:	b480      	push	{r7}
2405a842:	b089      	sub	sp, #36	; 0x24
2405a844:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
2405a846:	4bb3      	ldr	r3, [pc, #716]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a848:	691b      	ldr	r3, [r3, #16]
2405a84a:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405a84e:	2b18      	cmp	r3, #24
2405a850:	f200 8155 	bhi.w	2405aafe <HAL_RCC_GetSysClockFreq+0x2be>
2405a854:	a201      	add	r2, pc, #4	; (adr r2, 2405a85c <HAL_RCC_GetSysClockFreq+0x1c>)
2405a856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405a85a:	bf00      	nop
2405a85c:	2405a8c1 	.word	0x2405a8c1
2405a860:	2405aaff 	.word	0x2405aaff
2405a864:	2405aaff 	.word	0x2405aaff
2405a868:	2405aaff 	.word	0x2405aaff
2405a86c:	2405aaff 	.word	0x2405aaff
2405a870:	2405aaff 	.word	0x2405aaff
2405a874:	2405aaff 	.word	0x2405aaff
2405a878:	2405aaff 	.word	0x2405aaff
2405a87c:	2405a8e7 	.word	0x2405a8e7
2405a880:	2405aaff 	.word	0x2405aaff
2405a884:	2405aaff 	.word	0x2405aaff
2405a888:	2405aaff 	.word	0x2405aaff
2405a88c:	2405aaff 	.word	0x2405aaff
2405a890:	2405aaff 	.word	0x2405aaff
2405a894:	2405aaff 	.word	0x2405aaff
2405a898:	2405aaff 	.word	0x2405aaff
2405a89c:	2405a8ed 	.word	0x2405a8ed
2405a8a0:	2405aaff 	.word	0x2405aaff
2405a8a4:	2405aaff 	.word	0x2405aaff
2405a8a8:	2405aaff 	.word	0x2405aaff
2405a8ac:	2405aaff 	.word	0x2405aaff
2405a8b0:	2405aaff 	.word	0x2405aaff
2405a8b4:	2405aaff 	.word	0x2405aaff
2405a8b8:	2405aaff 	.word	0x2405aaff
2405a8bc:	2405a8f3 	.word	0x2405a8f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405a8c0:	4b94      	ldr	r3, [pc, #592]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a8c2:	681b      	ldr	r3, [r3, #0]
2405a8c4:	f003 0320 	and.w	r3, r3, #32
2405a8c8:	2b00      	cmp	r3, #0
2405a8ca:	d009      	beq.n	2405a8e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405a8cc:	4b91      	ldr	r3, [pc, #580]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a8ce:	681b      	ldr	r3, [r3, #0]
2405a8d0:	08db      	lsrs	r3, r3, #3
2405a8d2:	f003 0303 	and.w	r3, r3, #3
2405a8d6:	4a90      	ldr	r2, [pc, #576]	; (2405ab18 <HAL_RCC_GetSysClockFreq+0x2d8>)
2405a8d8:	fa22 f303 	lsr.w	r3, r2, r3
2405a8dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
2405a8de:	e111      	b.n	2405ab04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
2405a8e0:	4b8d      	ldr	r3, [pc, #564]	; (2405ab18 <HAL_RCC_GetSysClockFreq+0x2d8>)
2405a8e2:	61bb      	str	r3, [r7, #24]
      break;
2405a8e4:	e10e      	b.n	2405ab04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
2405a8e6:	4b8d      	ldr	r3, [pc, #564]	; (2405ab1c <HAL_RCC_GetSysClockFreq+0x2dc>)
2405a8e8:	61bb      	str	r3, [r7, #24]
      break;
2405a8ea:	e10b      	b.n	2405ab04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
2405a8ec:	4b8c      	ldr	r3, [pc, #560]	; (2405ab20 <HAL_RCC_GetSysClockFreq+0x2e0>)
2405a8ee:	61bb      	str	r3, [r7, #24]
      break;
2405a8f0:	e108      	b.n	2405ab04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405a8f2:	4b88      	ldr	r3, [pc, #544]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405a8f6:	f003 0303 	and.w	r3, r3, #3
2405a8fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
2405a8fc:	4b85      	ldr	r3, [pc, #532]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405a900:	091b      	lsrs	r3, r3, #4
2405a902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405a906:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
2405a908:	4b82      	ldr	r3, [pc, #520]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a90c:	f003 0301 	and.w	r3, r3, #1
2405a910:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2405a912:	4b80      	ldr	r3, [pc, #512]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405a916:	08db      	lsrs	r3, r3, #3
2405a918:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405a91c:	68fa      	ldr	r2, [r7, #12]
2405a91e:	fb02 f303 	mul.w	r3, r2, r3
2405a922:	ee07 3a90 	vmov	s15, r3
2405a926:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405a92a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
2405a92e:	693b      	ldr	r3, [r7, #16]
2405a930:	2b00      	cmp	r3, #0
2405a932:	f000 80e1 	beq.w	2405aaf8 <HAL_RCC_GetSysClockFreq+0x2b8>
2405a936:	697b      	ldr	r3, [r7, #20]
2405a938:	2b02      	cmp	r3, #2
2405a93a:	f000 8083 	beq.w	2405aa44 <HAL_RCC_GetSysClockFreq+0x204>
2405a93e:	697b      	ldr	r3, [r7, #20]
2405a940:	2b02      	cmp	r3, #2
2405a942:	f200 80a1 	bhi.w	2405aa88 <HAL_RCC_GetSysClockFreq+0x248>
2405a946:	697b      	ldr	r3, [r7, #20]
2405a948:	2b00      	cmp	r3, #0
2405a94a:	d003      	beq.n	2405a954 <HAL_RCC_GetSysClockFreq+0x114>
2405a94c:	697b      	ldr	r3, [r7, #20]
2405a94e:	2b01      	cmp	r3, #1
2405a950:	d056      	beq.n	2405aa00 <HAL_RCC_GetSysClockFreq+0x1c0>
2405a952:	e099      	b.n	2405aa88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405a954:	4b6f      	ldr	r3, [pc, #444]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a956:	681b      	ldr	r3, [r3, #0]
2405a958:	f003 0320 	and.w	r3, r3, #32
2405a95c:	2b00      	cmp	r3, #0
2405a95e:	d02d      	beq.n	2405a9bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405a960:	4b6c      	ldr	r3, [pc, #432]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a962:	681b      	ldr	r3, [r3, #0]
2405a964:	08db      	lsrs	r3, r3, #3
2405a966:	f003 0303 	and.w	r3, r3, #3
2405a96a:	4a6b      	ldr	r2, [pc, #428]	; (2405ab18 <HAL_RCC_GetSysClockFreq+0x2d8>)
2405a96c:	fa22 f303 	lsr.w	r3, r2, r3
2405a970:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405a972:	687b      	ldr	r3, [r7, #4]
2405a974:	ee07 3a90 	vmov	s15, r3
2405a978:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405a97c:	693b      	ldr	r3, [r7, #16]
2405a97e:	ee07 3a90 	vmov	s15, r3
2405a982:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405a986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405a98a:	4b62      	ldr	r3, [pc, #392]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405a98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405a992:	ee07 3a90 	vmov	s15, r3
2405a996:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405a99a:	ed97 6a02 	vldr	s12, [r7, #8]
2405a99e:	eddf 5a61 	vldr	s11, [pc, #388]	; 2405ab24 <HAL_RCC_GetSysClockFreq+0x2e4>
2405a9a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405a9a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405a9aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405a9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405a9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
2405a9b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
2405a9ba:	e087      	b.n	2405aacc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405a9bc:	693b      	ldr	r3, [r7, #16]
2405a9be:	ee07 3a90 	vmov	s15, r3
2405a9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405a9c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 2405ab28 <HAL_RCC_GetSysClockFreq+0x2e8>
2405a9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405a9ce:	4b51      	ldr	r3, [pc, #324]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405a9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405a9d6:	ee07 3a90 	vmov	s15, r3
2405a9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405a9de:	ed97 6a02 	vldr	s12, [r7, #8]
2405a9e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 2405ab24 <HAL_RCC_GetSysClockFreq+0x2e4>
2405a9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405a9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405a9ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405a9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405a9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
2405a9fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405a9fe:	e065      	b.n	2405aacc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405aa00:	693b      	ldr	r3, [r7, #16]
2405aa02:	ee07 3a90 	vmov	s15, r3
2405aa06:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405aa0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 2405ab2c <HAL_RCC_GetSysClockFreq+0x2ec>
2405aa0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405aa12:	4b40      	ldr	r3, [pc, #256]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405aa14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405aa16:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405aa1a:	ee07 3a90 	vmov	s15, r3
2405aa1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405aa22:	ed97 6a02 	vldr	s12, [r7, #8]
2405aa26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2405ab24 <HAL_RCC_GetSysClockFreq+0x2e4>
2405aa2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405aa2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405aa32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405aa36:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405aa3a:	ee67 7a27 	vmul.f32	s15, s14, s15
2405aa3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405aa42:	e043      	b.n	2405aacc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405aa44:	693b      	ldr	r3, [r7, #16]
2405aa46:	ee07 3a90 	vmov	s15, r3
2405aa4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405aa4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 2405ab30 <HAL_RCC_GetSysClockFreq+0x2f0>
2405aa52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405aa56:	4b2f      	ldr	r3, [pc, #188]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405aa58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405aa5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405aa5e:	ee07 3a90 	vmov	s15, r3
2405aa62:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405aa66:	ed97 6a02 	vldr	s12, [r7, #8]
2405aa6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 2405ab24 <HAL_RCC_GetSysClockFreq+0x2e4>
2405aa6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405aa72:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405aa76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405aa7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405aa7e:	ee67 7a27 	vmul.f32	s15, s14, s15
2405aa82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405aa86:	e021      	b.n	2405aacc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405aa88:	693b      	ldr	r3, [r7, #16]
2405aa8a:	ee07 3a90 	vmov	s15, r3
2405aa8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405aa92:	eddf 6a26 	vldr	s13, [pc, #152]	; 2405ab2c <HAL_RCC_GetSysClockFreq+0x2ec>
2405aa96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405aa9a:	4b1e      	ldr	r3, [pc, #120]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405aa9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405aa9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405aaa2:	ee07 3a90 	vmov	s15, r3
2405aaa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405aaaa:	ed97 6a02 	vldr	s12, [r7, #8]
2405aaae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 2405ab24 <HAL_RCC_GetSysClockFreq+0x2e4>
2405aab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405aab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405aaba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405aabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405aac2:	ee67 7a27 	vmul.f32	s15, s14, s15
2405aac6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405aaca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
2405aacc:	4b11      	ldr	r3, [pc, #68]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405aace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405aad0:	0a5b      	lsrs	r3, r3, #9
2405aad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405aad6:	3301      	adds	r3, #1
2405aad8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
2405aada:	683b      	ldr	r3, [r7, #0]
2405aadc:	ee07 3a90 	vmov	s15, r3
2405aae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
2405aae4:	edd7 6a07 	vldr	s13, [r7, #28]
2405aae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405aaec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405aaf0:	ee17 3a90 	vmov	r3, s15
2405aaf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
2405aaf6:	e005      	b.n	2405ab04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
2405aaf8:	2300      	movs	r3, #0
2405aafa:	61bb      	str	r3, [r7, #24]
      break;
2405aafc:	e002      	b.n	2405ab04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
2405aafe:	4b07      	ldr	r3, [pc, #28]	; (2405ab1c <HAL_RCC_GetSysClockFreq+0x2dc>)
2405ab00:	61bb      	str	r3, [r7, #24]
      break;
2405ab02:	bf00      	nop
  }

  return sysclockfreq;
2405ab04:	69bb      	ldr	r3, [r7, #24]
}
2405ab06:	4618      	mov	r0, r3
2405ab08:	3724      	adds	r7, #36	; 0x24
2405ab0a:	46bd      	mov	sp, r7
2405ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
2405ab10:	4770      	bx	lr
2405ab12:	bf00      	nop
2405ab14:	58024400 	.word	0x58024400
2405ab18:	03d09000 	.word	0x03d09000
2405ab1c:	003d0900 	.word	0x003d0900
2405ab20:	016e3600 	.word	0x016e3600
2405ab24:	46000000 	.word	0x46000000
2405ab28:	4c742400 	.word	0x4c742400
2405ab2c:	4a742400 	.word	0x4a742400
2405ab30:	4bb71b00 	.word	0x4bb71b00

2405ab34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2405ab34:	b580      	push	{r7, lr}
2405ab36:	b082      	sub	sp, #8
2405ab38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
2405ab3a:	f7ff fe81 	bl	2405a840 <HAL_RCC_GetSysClockFreq>
2405ab3e:	4602      	mov	r2, r0
2405ab40:	4b10      	ldr	r3, [pc, #64]	; (2405ab84 <HAL_RCC_GetHCLKFreq+0x50>)
2405ab42:	699b      	ldr	r3, [r3, #24]
2405ab44:	0a1b      	lsrs	r3, r3, #8
2405ab46:	f003 030f 	and.w	r3, r3, #15
2405ab4a:	490f      	ldr	r1, [pc, #60]	; (2405ab88 <HAL_RCC_GetHCLKFreq+0x54>)
2405ab4c:	5ccb      	ldrb	r3, [r1, r3]
2405ab4e:	f003 031f 	and.w	r3, r3, #31
2405ab52:	fa22 f303 	lsr.w	r3, r2, r3
2405ab56:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
2405ab58:	4b0a      	ldr	r3, [pc, #40]	; (2405ab84 <HAL_RCC_GetHCLKFreq+0x50>)
2405ab5a:	699b      	ldr	r3, [r3, #24]
2405ab5c:	f003 030f 	and.w	r3, r3, #15
2405ab60:	4a09      	ldr	r2, [pc, #36]	; (2405ab88 <HAL_RCC_GetHCLKFreq+0x54>)
2405ab62:	5cd3      	ldrb	r3, [r2, r3]
2405ab64:	f003 031f 	and.w	r3, r3, #31
2405ab68:	687a      	ldr	r2, [r7, #4]
2405ab6a:	fa22 f303 	lsr.w	r3, r2, r3
2405ab6e:	4a07      	ldr	r2, [pc, #28]	; (2405ab8c <HAL_RCC_GetHCLKFreq+0x58>)
2405ab70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2405ab72:	4a07      	ldr	r2, [pc, #28]	; (2405ab90 <HAL_RCC_GetHCLKFreq+0x5c>)
2405ab74:	687b      	ldr	r3, [r7, #4]
2405ab76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
2405ab78:	4b04      	ldr	r3, [pc, #16]	; (2405ab8c <HAL_RCC_GetHCLKFreq+0x58>)
2405ab7a:	681b      	ldr	r3, [r3, #0]
}
2405ab7c:	4618      	mov	r0, r3
2405ab7e:	3708      	adds	r7, #8
2405ab80:	46bd      	mov	sp, r7
2405ab82:	bd80      	pop	{r7, pc}
2405ab84:	58024400 	.word	0x58024400
2405ab88:	240615f0 	.word	0x240615f0
2405ab8c:	20000034 	.word	0x20000034
2405ab90:	20000030 	.word	0x20000030

2405ab94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
2405ab94:	b580      	push	{r7, lr}
2405ab96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
2405ab98:	f7ff ffcc 	bl	2405ab34 <HAL_RCC_GetHCLKFreq>
2405ab9c:	4602      	mov	r2, r0
2405ab9e:	4b06      	ldr	r3, [pc, #24]	; (2405abb8 <HAL_RCC_GetPCLK1Freq+0x24>)
2405aba0:	69db      	ldr	r3, [r3, #28]
2405aba2:	091b      	lsrs	r3, r3, #4
2405aba4:	f003 0307 	and.w	r3, r3, #7
2405aba8:	4904      	ldr	r1, [pc, #16]	; (2405abbc <HAL_RCC_GetPCLK1Freq+0x28>)
2405abaa:	5ccb      	ldrb	r3, [r1, r3]
2405abac:	f003 031f 	and.w	r3, r3, #31
2405abb0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
2405abb4:	4618      	mov	r0, r3
2405abb6:	bd80      	pop	{r7, pc}
2405abb8:	58024400 	.word	0x58024400
2405abbc:	240615f0 	.word	0x240615f0

2405abc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2405abc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
2405abc4:	b0c8      	sub	sp, #288	; 0x120
2405abc6:	af00      	add	r7, sp, #0
2405abc8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
2405abcc:	2300      	movs	r3, #0
2405abce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
2405abd2:	2300      	movs	r3, #0
2405abd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2405abd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
2405abe0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
2405abe4:	2500      	movs	r5, #0
2405abe6:	ea54 0305 	orrs.w	r3, r4, r5
2405abea:	d049      	beq.n	2405ac80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
2405abec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405abf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405abf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405abf6:	d02f      	beq.n	2405ac58 <HAL_RCCEx_PeriphCLKConfig+0x98>
2405abf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405abfc:	d828      	bhi.n	2405ac50 <HAL_RCCEx_PeriphCLKConfig+0x90>
2405abfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405ac02:	d01a      	beq.n	2405ac3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
2405ac04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405ac08:	d822      	bhi.n	2405ac50 <HAL_RCCEx_PeriphCLKConfig+0x90>
2405ac0a:	2b00      	cmp	r3, #0
2405ac0c:	d003      	beq.n	2405ac16 <HAL_RCCEx_PeriphCLKConfig+0x56>
2405ac0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2405ac12:	d007      	beq.n	2405ac24 <HAL_RCCEx_PeriphCLKConfig+0x64>
2405ac14:	e01c      	b.n	2405ac50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405ac16:	4ba7      	ldr	r3, [pc, #668]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405ac18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ac1a:	4aa6      	ldr	r2, [pc, #664]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405ac1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405ac20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2405ac22:	e01a      	b.n	2405ac5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405ac24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ac28:	3308      	adds	r3, #8
2405ac2a:	2102      	movs	r1, #2
2405ac2c:	4618      	mov	r0, r3
2405ac2e:	f002 fa6d 	bl	2405d10c <RCCEx_PLL2_Config>
2405ac32:	4603      	mov	r3, r0
2405ac34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2405ac38:	e00f      	b.n	2405ac5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405ac3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ac3e:	3328      	adds	r3, #40	; 0x28
2405ac40:	2102      	movs	r1, #2
2405ac42:	4618      	mov	r0, r3
2405ac44:	f002 fb14 	bl	2405d270 <RCCEx_PLL3_Config>
2405ac48:	4603      	mov	r3, r0
2405ac4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2405ac4e:	e004      	b.n	2405ac5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405ac50:	2301      	movs	r3, #1
2405ac52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405ac56:	e000      	b.n	2405ac5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
2405ac58:	bf00      	nop
    }

    if (ret == HAL_OK)
2405ac5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ac5e:	2b00      	cmp	r3, #0
2405ac60:	d10a      	bne.n	2405ac78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2405ac62:	4b94      	ldr	r3, [pc, #592]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405ac64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405ac66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
2405ac6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ac6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405ac70:	4a90      	ldr	r2, [pc, #576]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405ac72:	430b      	orrs	r3, r1
2405ac74:	6513      	str	r3, [r2, #80]	; 0x50
2405ac76:	e003      	b.n	2405ac80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405ac78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ac7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2405ac80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ac84:	e9d3 2300 	ldrd	r2, r3, [r3]
2405ac88:	f402 7880 	and.w	r8, r2, #256	; 0x100
2405ac8c:	f04f 0900 	mov.w	r9, #0
2405ac90:	ea58 0309 	orrs.w	r3, r8, r9
2405ac94:	d047      	beq.n	2405ad26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
2405ac96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ac9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405ac9c:	2b04      	cmp	r3, #4
2405ac9e:	d82a      	bhi.n	2405acf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
2405aca0:	a201      	add	r2, pc, #4	; (adr r2, 2405aca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
2405aca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405aca6:	bf00      	nop
2405aca8:	2405acbd 	.word	0x2405acbd
2405acac:	2405accb 	.word	0x2405accb
2405acb0:	2405ace1 	.word	0x2405ace1
2405acb4:	2405acff 	.word	0x2405acff
2405acb8:	2405acff 	.word	0x2405acff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405acbc:	4b7d      	ldr	r3, [pc, #500]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405acbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405acc0:	4a7c      	ldr	r2, [pc, #496]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405acc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405acc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2405acc8:	e01a      	b.n	2405ad00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405acca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405acce:	3308      	adds	r3, #8
2405acd0:	2100      	movs	r1, #0
2405acd2:	4618      	mov	r0, r3
2405acd4:	f002 fa1a 	bl	2405d10c <RCCEx_PLL2_Config>
2405acd8:	4603      	mov	r3, r0
2405acda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2405acde:	e00f      	b.n	2405ad00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405ace0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ace4:	3328      	adds	r3, #40	; 0x28
2405ace6:	2100      	movs	r1, #0
2405ace8:	4618      	mov	r0, r3
2405acea:	f002 fac1 	bl	2405d270 <RCCEx_PLL3_Config>
2405acee:	4603      	mov	r3, r0
2405acf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2405acf4:	e004      	b.n	2405ad00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405acf6:	2301      	movs	r3, #1
2405acf8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405acfc:	e000      	b.n	2405ad00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
2405acfe:	bf00      	nop
    }

    if (ret == HAL_OK)
2405ad00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ad04:	2b00      	cmp	r3, #0
2405ad06:	d10a      	bne.n	2405ad1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2405ad08:	4b6a      	ldr	r3, [pc, #424]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405ad0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405ad0c:	f023 0107 	bic.w	r1, r3, #7
2405ad10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ad14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405ad16:	4a67      	ldr	r2, [pc, #412]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405ad18:	430b      	orrs	r3, r1
2405ad1a:	6513      	str	r3, [r2, #80]	; 0x50
2405ad1c:	e003      	b.n	2405ad26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405ad1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ad22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
2405ad26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
2405ad2e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
2405ad32:	f04f 0b00 	mov.w	fp, #0
2405ad36:	ea5a 030b 	orrs.w	r3, sl, fp
2405ad3a:	d054      	beq.n	2405ade6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
2405ad3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ad40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405ad42:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
2405ad46:	d036      	beq.n	2405adb6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
2405ad48:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
2405ad4c:	d82f      	bhi.n	2405adae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405ad4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405ad52:	d032      	beq.n	2405adba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
2405ad54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405ad58:	d829      	bhi.n	2405adae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405ad5a:	2bc0      	cmp	r3, #192	; 0xc0
2405ad5c:	d02f      	beq.n	2405adbe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
2405ad5e:	2bc0      	cmp	r3, #192	; 0xc0
2405ad60:	d825      	bhi.n	2405adae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405ad62:	2b80      	cmp	r3, #128	; 0x80
2405ad64:	d018      	beq.n	2405ad98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
2405ad66:	2b80      	cmp	r3, #128	; 0x80
2405ad68:	d821      	bhi.n	2405adae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405ad6a:	2b00      	cmp	r3, #0
2405ad6c:	d002      	beq.n	2405ad74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
2405ad6e:	2b40      	cmp	r3, #64	; 0x40
2405ad70:	d007      	beq.n	2405ad82 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
2405ad72:	e01c      	b.n	2405adae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405ad74:	4b4f      	ldr	r3, [pc, #316]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405ad76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ad78:	4a4e      	ldr	r2, [pc, #312]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405ad7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405ad7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
2405ad80:	e01e      	b.n	2405adc0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405ad82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ad86:	3308      	adds	r3, #8
2405ad88:	2100      	movs	r1, #0
2405ad8a:	4618      	mov	r0, r3
2405ad8c:	f002 f9be 	bl	2405d10c <RCCEx_PLL2_Config>
2405ad90:	4603      	mov	r3, r0
2405ad92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
2405ad96:	e013      	b.n	2405adc0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405ad98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ad9c:	3328      	adds	r3, #40	; 0x28
2405ad9e:	2100      	movs	r1, #0
2405ada0:	4618      	mov	r0, r3
2405ada2:	f002 fa65 	bl	2405d270 <RCCEx_PLL3_Config>
2405ada6:	4603      	mov	r3, r0
2405ada8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
2405adac:	e008      	b.n	2405adc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405adae:	2301      	movs	r3, #1
2405adb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405adb4:	e004      	b.n	2405adc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
2405adb6:	bf00      	nop
2405adb8:	e002      	b.n	2405adc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
2405adba:	bf00      	nop
2405adbc:	e000      	b.n	2405adc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
2405adbe:	bf00      	nop
    }

    if (ret == HAL_OK)
2405adc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405adc4:	2b00      	cmp	r3, #0
2405adc6:	d10a      	bne.n	2405adde <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
2405adc8:	4b3a      	ldr	r3, [pc, #232]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405adca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405adcc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
2405add0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405add4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405add6:	4a37      	ldr	r2, [pc, #220]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405add8:	430b      	orrs	r3, r1
2405adda:	6513      	str	r3, [r2, #80]	; 0x50
2405addc:	e003      	b.n	2405ade6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405adde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ade2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
2405ade6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405adea:	e9d3 2300 	ldrd	r2, r3, [r3]
2405adee:	f402 6380 	and.w	r3, r2, #1024	; 0x400
2405adf2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
2405adf6:	2300      	movs	r3, #0
2405adf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
2405adfc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
2405ae00:	460b      	mov	r3, r1
2405ae02:	4313      	orrs	r3, r2
2405ae04:	d05c      	beq.n	2405aec0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
2405ae06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ae0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405ae0c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
2405ae10:	d03b      	beq.n	2405ae8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
2405ae12:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
2405ae16:	d834      	bhi.n	2405ae82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405ae18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405ae1c:	d037      	beq.n	2405ae8e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
2405ae1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405ae22:	d82e      	bhi.n	2405ae82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405ae24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405ae28:	d033      	beq.n	2405ae92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
2405ae2a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405ae2e:	d828      	bhi.n	2405ae82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405ae30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405ae34:	d01a      	beq.n	2405ae6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
2405ae36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405ae3a:	d822      	bhi.n	2405ae82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405ae3c:	2b00      	cmp	r3, #0
2405ae3e:	d003      	beq.n	2405ae48 <HAL_RCCEx_PeriphCLKConfig+0x288>
2405ae40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405ae44:	d007      	beq.n	2405ae56 <HAL_RCCEx_PeriphCLKConfig+0x296>
2405ae46:	e01c      	b.n	2405ae82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405ae48:	4b1a      	ldr	r3, [pc, #104]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405ae4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ae4c:	4a19      	ldr	r2, [pc, #100]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405ae4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405ae52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
2405ae54:	e01e      	b.n	2405ae94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405ae56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ae5a:	3308      	adds	r3, #8
2405ae5c:	2100      	movs	r1, #0
2405ae5e:	4618      	mov	r0, r3
2405ae60:	f002 f954 	bl	2405d10c <RCCEx_PLL2_Config>
2405ae64:	4603      	mov	r3, r0
2405ae66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
2405ae6a:	e013      	b.n	2405ae94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405ae6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ae70:	3328      	adds	r3, #40	; 0x28
2405ae72:	2100      	movs	r1, #0
2405ae74:	4618      	mov	r0, r3
2405ae76:	f002 f9fb 	bl	2405d270 <RCCEx_PLL3_Config>
2405ae7a:	4603      	mov	r3, r0
2405ae7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
2405ae80:	e008      	b.n	2405ae94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405ae82:	2301      	movs	r3, #1
2405ae84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405ae88:	e004      	b.n	2405ae94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
2405ae8a:	bf00      	nop
2405ae8c:	e002      	b.n	2405ae94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
2405ae8e:	bf00      	nop
2405ae90:	e000      	b.n	2405ae94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
2405ae92:	bf00      	nop
    }

    if (ret == HAL_OK)
2405ae94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ae98:	2b00      	cmp	r3, #0
2405ae9a:	d10d      	bne.n	2405aeb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
2405ae9c:	4b05      	ldr	r3, [pc, #20]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405ae9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405aea0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
2405aea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405aea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405aeaa:	4a02      	ldr	r2, [pc, #8]	; (2405aeb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405aeac:	430b      	orrs	r3, r1
2405aeae:	6513      	str	r3, [r2, #80]	; 0x50
2405aeb0:	e006      	b.n	2405aec0 <HAL_RCCEx_PeriphCLKConfig+0x300>
2405aeb2:	bf00      	nop
2405aeb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405aeb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405aebc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
2405aec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
2405aec8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
2405aecc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
2405aed0:	2300      	movs	r3, #0
2405aed2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
2405aed6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
2405aeda:	460b      	mov	r3, r1
2405aedc:	4313      	orrs	r3, r2
2405aede:	d03a      	beq.n	2405af56 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
2405aee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405aee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405aee6:	2b30      	cmp	r3, #48	; 0x30
2405aee8:	d01f      	beq.n	2405af2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
2405aeea:	2b30      	cmp	r3, #48	; 0x30
2405aeec:	d819      	bhi.n	2405af22 <HAL_RCCEx_PeriphCLKConfig+0x362>
2405aeee:	2b20      	cmp	r3, #32
2405aef0:	d00c      	beq.n	2405af0c <HAL_RCCEx_PeriphCLKConfig+0x34c>
2405aef2:	2b20      	cmp	r3, #32
2405aef4:	d815      	bhi.n	2405af22 <HAL_RCCEx_PeriphCLKConfig+0x362>
2405aef6:	2b00      	cmp	r3, #0
2405aef8:	d019      	beq.n	2405af2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
2405aefa:	2b10      	cmp	r3, #16
2405aefc:	d111      	bne.n	2405af22 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405aefe:	4bae      	ldr	r3, [pc, #696]	; (2405b1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405af02:	4aad      	ldr	r2, [pc, #692]	; (2405b1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405af04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405af08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
2405af0a:	e011      	b.n	2405af30 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405af0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405af10:	3308      	adds	r3, #8
2405af12:	2102      	movs	r1, #2
2405af14:	4618      	mov	r0, r3
2405af16:	f002 f8f9 	bl	2405d10c <RCCEx_PLL2_Config>
2405af1a:	4603      	mov	r3, r0
2405af1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
2405af20:	e006      	b.n	2405af30 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
2405af22:	2301      	movs	r3, #1
2405af24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405af28:	e002      	b.n	2405af30 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
2405af2a:	bf00      	nop
2405af2c:	e000      	b.n	2405af30 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
2405af2e:	bf00      	nop
    }

    if (ret == HAL_OK)
2405af30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405af34:	2b00      	cmp	r3, #0
2405af36:	d10a      	bne.n	2405af4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
2405af38:	4b9f      	ldr	r3, [pc, #636]	; (2405b1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405af3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405af3c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
2405af40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405af44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405af46:	4a9c      	ldr	r2, [pc, #624]	; (2405b1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405af48:	430b      	orrs	r3, r1
2405af4a:	64d3      	str	r3, [r2, #76]	; 0x4c
2405af4c:	e003      	b.n	2405af56 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405af4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405af52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2405af56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
2405af5e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
2405af62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
2405af66:	2300      	movs	r3, #0
2405af68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
2405af6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
2405af70:	460b      	mov	r3, r1
2405af72:	4313      	orrs	r3, r2
2405af74:	d051      	beq.n	2405b01a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
2405af76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405af7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2405af7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405af80:	d035      	beq.n	2405afee <HAL_RCCEx_PeriphCLKConfig+0x42e>
2405af82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405af86:	d82e      	bhi.n	2405afe6 <HAL_RCCEx_PeriphCLKConfig+0x426>
2405af88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405af8c:	d031      	beq.n	2405aff2 <HAL_RCCEx_PeriphCLKConfig+0x432>
2405af8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405af92:	d828      	bhi.n	2405afe6 <HAL_RCCEx_PeriphCLKConfig+0x426>
2405af94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405af98:	d01a      	beq.n	2405afd0 <HAL_RCCEx_PeriphCLKConfig+0x410>
2405af9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405af9e:	d822      	bhi.n	2405afe6 <HAL_RCCEx_PeriphCLKConfig+0x426>
2405afa0:	2b00      	cmp	r3, #0
2405afa2:	d003      	beq.n	2405afac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
2405afa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405afa8:	d007      	beq.n	2405afba <HAL_RCCEx_PeriphCLKConfig+0x3fa>
2405afaa:	e01c      	b.n	2405afe6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405afac:	4b82      	ldr	r3, [pc, #520]	; (2405b1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405afae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405afb0:	4a81      	ldr	r2, [pc, #516]	; (2405b1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405afb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405afb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2405afb8:	e01c      	b.n	2405aff4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405afba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405afbe:	3308      	adds	r3, #8
2405afc0:	2100      	movs	r1, #0
2405afc2:	4618      	mov	r0, r3
2405afc4:	f002 f8a2 	bl	2405d10c <RCCEx_PLL2_Config>
2405afc8:	4603      	mov	r3, r0
2405afca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2405afce:	e011      	b.n	2405aff4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405afd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405afd4:	3328      	adds	r3, #40	; 0x28
2405afd6:	2100      	movs	r1, #0
2405afd8:	4618      	mov	r0, r3
2405afda:	f002 f949 	bl	2405d270 <RCCEx_PLL3_Config>
2405afde:	4603      	mov	r3, r0
2405afe0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2405afe4:	e006      	b.n	2405aff4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405afe6:	2301      	movs	r3, #1
2405afe8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405afec:	e002      	b.n	2405aff4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
2405afee:	bf00      	nop
2405aff0:	e000      	b.n	2405aff4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
2405aff2:	bf00      	nop
    }

    if (ret == HAL_OK)
2405aff4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405aff8:	2b00      	cmp	r3, #0
2405affa:	d10a      	bne.n	2405b012 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
2405affc:	4b6e      	ldr	r3, [pc, #440]	; (2405b1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405affe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405b000:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
2405b004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2405b00a:	4a6b      	ldr	r2, [pc, #428]	; (2405b1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405b00c:	430b      	orrs	r3, r1
2405b00e:	6513      	str	r3, [r2, #80]	; 0x50
2405b010:	e003      	b.n	2405b01a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b012:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b016:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2405b01a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b022:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
2405b026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
2405b02a:	2300      	movs	r3, #0
2405b02c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
2405b030:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
2405b034:	460b      	mov	r3, r1
2405b036:	4313      	orrs	r3, r2
2405b038:	d053      	beq.n	2405b0e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
2405b03a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b03e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2405b040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405b044:	d033      	beq.n	2405b0ae <HAL_RCCEx_PeriphCLKConfig+0x4ee>
2405b046:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405b04a:	d82c      	bhi.n	2405b0a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405b04c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405b050:	d02f      	beq.n	2405b0b2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
2405b052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405b056:	d826      	bhi.n	2405b0a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405b058:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405b05c:	d02b      	beq.n	2405b0b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
2405b05e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405b062:	d820      	bhi.n	2405b0a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405b064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405b068:	d012      	beq.n	2405b090 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
2405b06a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405b06e:	d81a      	bhi.n	2405b0a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405b070:	2b00      	cmp	r3, #0
2405b072:	d022      	beq.n	2405b0ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
2405b074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405b078:	d115      	bne.n	2405b0a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405b07a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b07e:	3308      	adds	r3, #8
2405b080:	2101      	movs	r1, #1
2405b082:	4618      	mov	r0, r3
2405b084:	f002 f842 	bl	2405d10c <RCCEx_PLL2_Config>
2405b088:	4603      	mov	r3, r0
2405b08a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
2405b08e:	e015      	b.n	2405b0bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405b090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b094:	3328      	adds	r3, #40	; 0x28
2405b096:	2101      	movs	r1, #1
2405b098:	4618      	mov	r0, r3
2405b09a:	f002 f8e9 	bl	2405d270 <RCCEx_PLL3_Config>
2405b09e:	4603      	mov	r3, r0
2405b0a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
2405b0a4:	e00a      	b.n	2405b0bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405b0a6:	2301      	movs	r3, #1
2405b0a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405b0ac:	e006      	b.n	2405b0bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405b0ae:	bf00      	nop
2405b0b0:	e004      	b.n	2405b0bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405b0b2:	bf00      	nop
2405b0b4:	e002      	b.n	2405b0bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405b0b6:	bf00      	nop
2405b0b8:	e000      	b.n	2405b0bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405b0ba:	bf00      	nop
    }

    if (ret == HAL_OK)
2405b0bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b0c0:	2b00      	cmp	r3, #0
2405b0c2:	d10a      	bne.n	2405b0da <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
2405b0c4:	4b3c      	ldr	r3, [pc, #240]	; (2405b1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405b0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405b0c8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
2405b0cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b0d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2405b0d2:	4a39      	ldr	r2, [pc, #228]	; (2405b1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405b0d4:	430b      	orrs	r3, r1
2405b0d6:	6513      	str	r3, [r2, #80]	; 0x50
2405b0d8:	e003      	b.n	2405b0e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b0da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b0de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
2405b0e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b0ea:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
2405b0ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
2405b0f2:	2300      	movs	r3, #0
2405b0f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
2405b0f8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
2405b0fc:	460b      	mov	r3, r1
2405b0fe:	4313      	orrs	r3, r2
2405b100:	d060      	beq.n	2405b1c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
2405b102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2405b10a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405b10e:	d039      	beq.n	2405b184 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
2405b110:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405b114:	d832      	bhi.n	2405b17c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405b116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405b11a:	d035      	beq.n	2405b188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
2405b11c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405b120:	d82c      	bhi.n	2405b17c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405b122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405b126:	d031      	beq.n	2405b18c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
2405b128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405b12c:	d826      	bhi.n	2405b17c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405b12e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405b132:	d02d      	beq.n	2405b190 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
2405b134:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405b138:	d820      	bhi.n	2405b17c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405b13a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405b13e:	d012      	beq.n	2405b166 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
2405b140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405b144:	d81a      	bhi.n	2405b17c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405b146:	2b00      	cmp	r3, #0
2405b148:	d024      	beq.n	2405b194 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
2405b14a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405b14e:	d115      	bne.n	2405b17c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405b150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b154:	3308      	adds	r3, #8
2405b156:	2101      	movs	r1, #1
2405b158:	4618      	mov	r0, r3
2405b15a:	f001 ffd7 	bl	2405d10c <RCCEx_PLL2_Config>
2405b15e:	4603      	mov	r3, r0
2405b160:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
2405b164:	e017      	b.n	2405b196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405b166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b16a:	3328      	adds	r3, #40	; 0x28
2405b16c:	2101      	movs	r1, #1
2405b16e:	4618      	mov	r0, r3
2405b170:	f002 f87e 	bl	2405d270 <RCCEx_PLL3_Config>
2405b174:	4603      	mov	r3, r0
2405b176:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
2405b17a:	e00c      	b.n	2405b196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
2405b17c:	2301      	movs	r3, #1
2405b17e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405b182:	e008      	b.n	2405b196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405b184:	bf00      	nop
2405b186:	e006      	b.n	2405b196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405b188:	bf00      	nop
2405b18a:	e004      	b.n	2405b196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405b18c:	bf00      	nop
2405b18e:	e002      	b.n	2405b196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405b190:	bf00      	nop
2405b192:	e000      	b.n	2405b196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405b194:	bf00      	nop
    }

    if (ret == HAL_OK)
2405b196:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b19a:	2b00      	cmp	r3, #0
2405b19c:	d10e      	bne.n	2405b1bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
2405b19e:	4b06      	ldr	r3, [pc, #24]	; (2405b1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405b1a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405b1a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
2405b1a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b1aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2405b1ae:	4a02      	ldr	r2, [pc, #8]	; (2405b1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405b1b0:	430b      	orrs	r3, r1
2405b1b2:	6593      	str	r3, [r2, #88]	; 0x58
2405b1b4:	e006      	b.n	2405b1c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
2405b1b6:	bf00      	nop
2405b1b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b1bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b1c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
2405b1c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b1cc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
2405b1d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
2405b1d4:	2300      	movs	r3, #0
2405b1d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
2405b1da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
2405b1de:	460b      	mov	r3, r1
2405b1e0:	4313      	orrs	r3, r2
2405b1e2:	d037      	beq.n	2405b254 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
2405b1e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b1e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2405b1ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405b1ee:	d00e      	beq.n	2405b20e <HAL_RCCEx_PeriphCLKConfig+0x64e>
2405b1f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405b1f4:	d816      	bhi.n	2405b224 <HAL_RCCEx_PeriphCLKConfig+0x664>
2405b1f6:	2b00      	cmp	r3, #0
2405b1f8:	d018      	beq.n	2405b22c <HAL_RCCEx_PeriphCLKConfig+0x66c>
2405b1fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405b1fe:	d111      	bne.n	2405b224 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405b200:	4bc4      	ldr	r3, [pc, #784]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b204:	4ac3      	ldr	r2, [pc, #780]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405b20a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
2405b20c:	e00f      	b.n	2405b22e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405b20e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b212:	3308      	adds	r3, #8
2405b214:	2101      	movs	r1, #1
2405b216:	4618      	mov	r0, r3
2405b218:	f001 ff78 	bl	2405d10c <RCCEx_PLL2_Config>
2405b21c:	4603      	mov	r3, r0
2405b21e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
2405b222:	e004      	b.n	2405b22e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405b224:	2301      	movs	r3, #1
2405b226:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405b22a:	e000      	b.n	2405b22e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
2405b22c:	bf00      	nop
    }

    if (ret == HAL_OK)
2405b22e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b232:	2b00      	cmp	r3, #0
2405b234:	d10a      	bne.n	2405b24c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
2405b236:	4bb7      	ldr	r3, [pc, #732]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405b23a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
2405b23e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2405b244:	4ab3      	ldr	r2, [pc, #716]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b246:	430b      	orrs	r3, r1
2405b248:	6513      	str	r3, [r2, #80]	; 0x50
2405b24a:	e003      	b.n	2405b254 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b24c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b250:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2405b254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b258:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b25c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
2405b260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
2405b264:	2300      	movs	r3, #0
2405b266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
2405b26a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
2405b26e:	460b      	mov	r3, r1
2405b270:	4313      	orrs	r3, r2
2405b272:	d039      	beq.n	2405b2e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
2405b274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405b27a:	2b03      	cmp	r3, #3
2405b27c:	d81c      	bhi.n	2405b2b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
2405b27e:	a201      	add	r2, pc, #4	; (adr r2, 2405b284 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
2405b280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405b284:	2405b2c1 	.word	0x2405b2c1
2405b288:	2405b295 	.word	0x2405b295
2405b28c:	2405b2a3 	.word	0x2405b2a3
2405b290:	2405b2c1 	.word	0x2405b2c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405b294:	4b9f      	ldr	r3, [pc, #636]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b298:	4a9e      	ldr	r2, [pc, #632]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b29a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405b29e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
2405b2a0:	e00f      	b.n	2405b2c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405b2a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b2a6:	3308      	adds	r3, #8
2405b2a8:	2102      	movs	r1, #2
2405b2aa:	4618      	mov	r0, r3
2405b2ac:	f001 ff2e 	bl	2405d10c <RCCEx_PLL2_Config>
2405b2b0:	4603      	mov	r3, r0
2405b2b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
2405b2b6:	e004      	b.n	2405b2c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
2405b2b8:	2301      	movs	r3, #1
2405b2ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405b2be:	e000      	b.n	2405b2c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
2405b2c0:	bf00      	nop
    }

    if (ret == HAL_OK)
2405b2c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b2c6:	2b00      	cmp	r3, #0
2405b2c8:	d10a      	bne.n	2405b2e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
2405b2ca:	4b92      	ldr	r3, [pc, #584]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b2cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405b2ce:	f023 0103 	bic.w	r1, r3, #3
2405b2d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b2d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405b2d8:	4a8e      	ldr	r2, [pc, #568]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b2da:	430b      	orrs	r3, r1
2405b2dc:	64d3      	str	r3, [r2, #76]	; 0x4c
2405b2de:	e003      	b.n	2405b2e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b2e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b2e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2405b2e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b2f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
2405b2f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
2405b2f8:	2300      	movs	r3, #0
2405b2fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
2405b2fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
2405b302:	460b      	mov	r3, r1
2405b304:	4313      	orrs	r3, r2
2405b306:	f000 8099 	beq.w	2405b43c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2405b30a:	4b83      	ldr	r3, [pc, #524]	; (2405b518 <HAL_RCCEx_PeriphCLKConfig+0x958>)
2405b30c:	681b      	ldr	r3, [r3, #0]
2405b30e:	4a82      	ldr	r2, [pc, #520]	; (2405b518 <HAL_RCCEx_PeriphCLKConfig+0x958>)
2405b310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405b314:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
2405b316:	f7f7 fcfd 	bl	24052d14 <HAL_GetTick>
2405b31a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405b31e:	e00b      	b.n	2405b338 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2405b320:	f7f7 fcf8 	bl	24052d14 <HAL_GetTick>
2405b324:	4602      	mov	r2, r0
2405b326:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
2405b32a:	1ad3      	subs	r3, r2, r3
2405b32c:	2b64      	cmp	r3, #100	; 0x64
2405b32e:	d903      	bls.n	2405b338 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
2405b330:	2303      	movs	r3, #3
2405b332:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405b336:	e005      	b.n	2405b344 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405b338:	4b77      	ldr	r3, [pc, #476]	; (2405b518 <HAL_RCCEx_PeriphCLKConfig+0x958>)
2405b33a:	681b      	ldr	r3, [r3, #0]
2405b33c:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405b340:	2b00      	cmp	r3, #0
2405b342:	d0ed      	beq.n	2405b320 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
2405b344:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b348:	2b00      	cmp	r3, #0
2405b34a:	d173      	bne.n	2405b434 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
2405b34c:	4b71      	ldr	r3, [pc, #452]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b34e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2405b350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b354:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405b358:	4053      	eors	r3, r2
2405b35a:	f403 7340 	and.w	r3, r3, #768	; 0x300
2405b35e:	2b00      	cmp	r3, #0
2405b360:	d015      	beq.n	2405b38e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2405b362:	4b6c      	ldr	r3, [pc, #432]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405b366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2405b36a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
2405b36e:	4b69      	ldr	r3, [pc, #420]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405b372:	4a68      	ldr	r2, [pc, #416]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405b378:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
2405b37a:	4b66      	ldr	r3, [pc, #408]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405b37e:	4a65      	ldr	r2, [pc, #404]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2405b384:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
2405b386:	4a63      	ldr	r2, [pc, #396]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2405b38c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
2405b38e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b392:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405b396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405b39a:	d118      	bne.n	2405b3ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b39c:	f7f7 fcba 	bl	24052d14 <HAL_GetTick>
2405b3a0:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405b3a4:	e00d      	b.n	2405b3c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405b3a6:	f7f7 fcb5 	bl	24052d14 <HAL_GetTick>
2405b3aa:	4602      	mov	r2, r0
2405b3ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
2405b3b0:	1ad2      	subs	r2, r2, r3
2405b3b2:	f241 3388 	movw	r3, #5000	; 0x1388
2405b3b6:	429a      	cmp	r2, r3
2405b3b8:	d903      	bls.n	2405b3c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
2405b3ba:	2303      	movs	r3, #3
2405b3bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
2405b3c0:	e005      	b.n	2405b3ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405b3c2:	4b54      	ldr	r3, [pc, #336]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405b3c6:	f003 0302 	and.w	r3, r3, #2
2405b3ca:	2b00      	cmp	r3, #0
2405b3cc:	d0eb      	beq.n	2405b3a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
2405b3ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b3d2:	2b00      	cmp	r3, #0
2405b3d4:	d129      	bne.n	2405b42a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2405b3d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b3da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405b3de:	f403 7340 	and.w	r3, r3, #768	; 0x300
2405b3e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2405b3e6:	d10e      	bne.n	2405b406 <HAL_RCCEx_PeriphCLKConfig+0x846>
2405b3e8:	4b4a      	ldr	r3, [pc, #296]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b3ea:	691b      	ldr	r3, [r3, #16]
2405b3ec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
2405b3f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b3f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405b3f8:	091a      	lsrs	r2, r3, #4
2405b3fa:	4b48      	ldr	r3, [pc, #288]	; (2405b51c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
2405b3fc:	4013      	ands	r3, r2
2405b3fe:	4a45      	ldr	r2, [pc, #276]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b400:	430b      	orrs	r3, r1
2405b402:	6113      	str	r3, [r2, #16]
2405b404:	e005      	b.n	2405b412 <HAL_RCCEx_PeriphCLKConfig+0x852>
2405b406:	4b43      	ldr	r3, [pc, #268]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b408:	691b      	ldr	r3, [r3, #16]
2405b40a:	4a42      	ldr	r2, [pc, #264]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b40c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
2405b410:	6113      	str	r3, [r2, #16]
2405b412:	4b40      	ldr	r3, [pc, #256]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b414:	6f19      	ldr	r1, [r3, #112]	; 0x70
2405b416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b41a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405b41e:	f3c3 030b 	ubfx	r3, r3, #0, #12
2405b422:	4a3c      	ldr	r2, [pc, #240]	; (2405b514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405b424:	430b      	orrs	r3, r1
2405b426:	6713      	str	r3, [r2, #112]	; 0x70
2405b428:	e008      	b.n	2405b43c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
2405b42a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b42e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
2405b432:	e003      	b.n	2405b43c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b434:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b438:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2405b43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b440:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b444:	f002 0301 	and.w	r3, r2, #1
2405b448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
2405b44c:	2300      	movs	r3, #0
2405b44e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
2405b452:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
2405b456:	460b      	mov	r3, r1
2405b458:	4313      	orrs	r3, r2
2405b45a:	f000 8090 	beq.w	2405b57e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
2405b45e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405b466:	2b28      	cmp	r3, #40	; 0x28
2405b468:	d870      	bhi.n	2405b54c <HAL_RCCEx_PeriphCLKConfig+0x98c>
2405b46a:	a201      	add	r2, pc, #4	; (adr r2, 2405b470 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
2405b46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405b470:	2405b555 	.word	0x2405b555
2405b474:	2405b54d 	.word	0x2405b54d
2405b478:	2405b54d 	.word	0x2405b54d
2405b47c:	2405b54d 	.word	0x2405b54d
2405b480:	2405b54d 	.word	0x2405b54d
2405b484:	2405b54d 	.word	0x2405b54d
2405b488:	2405b54d 	.word	0x2405b54d
2405b48c:	2405b54d 	.word	0x2405b54d
2405b490:	2405b521 	.word	0x2405b521
2405b494:	2405b54d 	.word	0x2405b54d
2405b498:	2405b54d 	.word	0x2405b54d
2405b49c:	2405b54d 	.word	0x2405b54d
2405b4a0:	2405b54d 	.word	0x2405b54d
2405b4a4:	2405b54d 	.word	0x2405b54d
2405b4a8:	2405b54d 	.word	0x2405b54d
2405b4ac:	2405b54d 	.word	0x2405b54d
2405b4b0:	2405b537 	.word	0x2405b537
2405b4b4:	2405b54d 	.word	0x2405b54d
2405b4b8:	2405b54d 	.word	0x2405b54d
2405b4bc:	2405b54d 	.word	0x2405b54d
2405b4c0:	2405b54d 	.word	0x2405b54d
2405b4c4:	2405b54d 	.word	0x2405b54d
2405b4c8:	2405b54d 	.word	0x2405b54d
2405b4cc:	2405b54d 	.word	0x2405b54d
2405b4d0:	2405b555 	.word	0x2405b555
2405b4d4:	2405b54d 	.word	0x2405b54d
2405b4d8:	2405b54d 	.word	0x2405b54d
2405b4dc:	2405b54d 	.word	0x2405b54d
2405b4e0:	2405b54d 	.word	0x2405b54d
2405b4e4:	2405b54d 	.word	0x2405b54d
2405b4e8:	2405b54d 	.word	0x2405b54d
2405b4ec:	2405b54d 	.word	0x2405b54d
2405b4f0:	2405b555 	.word	0x2405b555
2405b4f4:	2405b54d 	.word	0x2405b54d
2405b4f8:	2405b54d 	.word	0x2405b54d
2405b4fc:	2405b54d 	.word	0x2405b54d
2405b500:	2405b54d 	.word	0x2405b54d
2405b504:	2405b54d 	.word	0x2405b54d
2405b508:	2405b54d 	.word	0x2405b54d
2405b50c:	2405b54d 	.word	0x2405b54d
2405b510:	2405b555 	.word	0x2405b555
2405b514:	58024400 	.word	0x58024400
2405b518:	58024800 	.word	0x58024800
2405b51c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405b520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b524:	3308      	adds	r3, #8
2405b526:	2101      	movs	r1, #1
2405b528:	4618      	mov	r0, r3
2405b52a:	f001 fdef 	bl	2405d10c <RCCEx_PLL2_Config>
2405b52e:	4603      	mov	r3, r0
2405b530:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
2405b534:	e00f      	b.n	2405b556 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405b536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b53a:	3328      	adds	r3, #40	; 0x28
2405b53c:	2101      	movs	r1, #1
2405b53e:	4618      	mov	r0, r3
2405b540:	f001 fe96 	bl	2405d270 <RCCEx_PLL3_Config>
2405b544:	4603      	mov	r3, r0
2405b546:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
2405b54a:	e004      	b.n	2405b556 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405b54c:	2301      	movs	r3, #1
2405b54e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405b552:	e000      	b.n	2405b556 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
2405b554:	bf00      	nop
    }

    if (ret == HAL_OK)
2405b556:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b55a:	2b00      	cmp	r3, #0
2405b55c:	d10b      	bne.n	2405b576 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
2405b55e:	4bc0      	ldr	r3, [pc, #768]	; (2405b860 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405b560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b562:	f023 0138 	bic.w	r1, r3, #56	; 0x38
2405b566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b56a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405b56e:	4abc      	ldr	r2, [pc, #752]	; (2405b860 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405b570:	430b      	orrs	r3, r1
2405b572:	6553      	str	r3, [r2, #84]	; 0x54
2405b574:	e003      	b.n	2405b57e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b576:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b57a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
2405b57e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b582:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b586:	f002 0302 	and.w	r3, r2, #2
2405b58a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
2405b58e:	2300      	movs	r3, #0
2405b590:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
2405b594:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
2405b598:	460b      	mov	r3, r1
2405b59a:	4313      	orrs	r3, r2
2405b59c:	d043      	beq.n	2405b626 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
2405b59e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b5a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405b5a6:	2b05      	cmp	r3, #5
2405b5a8:	d824      	bhi.n	2405b5f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
2405b5aa:	a201      	add	r2, pc, #4	; (adr r2, 2405b5b0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
2405b5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405b5b0:	2405b5fd 	.word	0x2405b5fd
2405b5b4:	2405b5c9 	.word	0x2405b5c9
2405b5b8:	2405b5df 	.word	0x2405b5df
2405b5bc:	2405b5fd 	.word	0x2405b5fd
2405b5c0:	2405b5fd 	.word	0x2405b5fd
2405b5c4:	2405b5fd 	.word	0x2405b5fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405b5c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b5cc:	3308      	adds	r3, #8
2405b5ce:	2101      	movs	r1, #1
2405b5d0:	4618      	mov	r0, r3
2405b5d2:	f001 fd9b 	bl	2405d10c <RCCEx_PLL2_Config>
2405b5d6:	4603      	mov	r3, r0
2405b5d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
2405b5dc:	e00f      	b.n	2405b5fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405b5de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b5e2:	3328      	adds	r3, #40	; 0x28
2405b5e4:	2101      	movs	r1, #1
2405b5e6:	4618      	mov	r0, r3
2405b5e8:	f001 fe42 	bl	2405d270 <RCCEx_PLL3_Config>
2405b5ec:	4603      	mov	r3, r0
2405b5ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
2405b5f2:	e004      	b.n	2405b5fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405b5f4:	2301      	movs	r3, #1
2405b5f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405b5fa:	e000      	b.n	2405b5fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
2405b5fc:	bf00      	nop
    }

    if (ret == HAL_OK)
2405b5fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b602:	2b00      	cmp	r3, #0
2405b604:	d10b      	bne.n	2405b61e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
2405b606:	4b96      	ldr	r3, [pc, #600]	; (2405b860 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405b608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b60a:	f023 0107 	bic.w	r1, r3, #7
2405b60e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405b616:	4a92      	ldr	r2, [pc, #584]	; (2405b860 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405b618:	430b      	orrs	r3, r1
2405b61a:	6553      	str	r3, [r2, #84]	; 0x54
2405b61c:	e003      	b.n	2405b626 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b61e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b622:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
2405b626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b62e:	f002 0304 	and.w	r3, r2, #4
2405b632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
2405b636:	2300      	movs	r3, #0
2405b638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
2405b63c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
2405b640:	460b      	mov	r3, r1
2405b642:	4313      	orrs	r3, r2
2405b644:	d043      	beq.n	2405b6ce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
2405b646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b64a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
2405b64e:	2b05      	cmp	r3, #5
2405b650:	d824      	bhi.n	2405b69c <HAL_RCCEx_PeriphCLKConfig+0xadc>
2405b652:	a201      	add	r2, pc, #4	; (adr r2, 2405b658 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
2405b654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405b658:	2405b6a5 	.word	0x2405b6a5
2405b65c:	2405b671 	.word	0x2405b671
2405b660:	2405b687 	.word	0x2405b687
2405b664:	2405b6a5 	.word	0x2405b6a5
2405b668:	2405b6a5 	.word	0x2405b6a5
2405b66c:	2405b6a5 	.word	0x2405b6a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405b670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b674:	3308      	adds	r3, #8
2405b676:	2101      	movs	r1, #1
2405b678:	4618      	mov	r0, r3
2405b67a:	f001 fd47 	bl	2405d10c <RCCEx_PLL2_Config>
2405b67e:	4603      	mov	r3, r0
2405b680:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
2405b684:	e00f      	b.n	2405b6a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405b686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b68a:	3328      	adds	r3, #40	; 0x28
2405b68c:	2101      	movs	r1, #1
2405b68e:	4618      	mov	r0, r3
2405b690:	f001 fdee 	bl	2405d270 <RCCEx_PLL3_Config>
2405b694:	4603      	mov	r3, r0
2405b696:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
2405b69a:	e004      	b.n	2405b6a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405b69c:	2301      	movs	r3, #1
2405b69e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405b6a2:	e000      	b.n	2405b6a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
2405b6a4:	bf00      	nop
    }

    if (ret == HAL_OK)
2405b6a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b6aa:	2b00      	cmp	r3, #0
2405b6ac:	d10b      	bne.n	2405b6c6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
2405b6ae:	4b6c      	ldr	r3, [pc, #432]	; (2405b860 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405b6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405b6b2:	f023 0107 	bic.w	r1, r3, #7
2405b6b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b6ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
2405b6be:	4a68      	ldr	r2, [pc, #416]	; (2405b860 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405b6c0:	430b      	orrs	r3, r1
2405b6c2:	6593      	str	r3, [r2, #88]	; 0x58
2405b6c4:	e003      	b.n	2405b6ce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b6c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b6ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2405b6ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b6d6:	f002 0320 	and.w	r3, r2, #32
2405b6da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
2405b6de:	2300      	movs	r3, #0
2405b6e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
2405b6e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
2405b6e8:	460b      	mov	r3, r1
2405b6ea:	4313      	orrs	r3, r2
2405b6ec:	d055      	beq.n	2405b79a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
2405b6ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b6f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
2405b6f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405b6fa:	d033      	beq.n	2405b764 <HAL_RCCEx_PeriphCLKConfig+0xba4>
2405b6fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405b700:	d82c      	bhi.n	2405b75c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405b702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405b706:	d02f      	beq.n	2405b768 <HAL_RCCEx_PeriphCLKConfig+0xba8>
2405b708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405b70c:	d826      	bhi.n	2405b75c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405b70e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405b712:	d02b      	beq.n	2405b76c <HAL_RCCEx_PeriphCLKConfig+0xbac>
2405b714:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405b718:	d820      	bhi.n	2405b75c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405b71a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405b71e:	d012      	beq.n	2405b746 <HAL_RCCEx_PeriphCLKConfig+0xb86>
2405b720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405b724:	d81a      	bhi.n	2405b75c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405b726:	2b00      	cmp	r3, #0
2405b728:	d022      	beq.n	2405b770 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
2405b72a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405b72e:	d115      	bne.n	2405b75c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405b730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b734:	3308      	adds	r3, #8
2405b736:	2100      	movs	r1, #0
2405b738:	4618      	mov	r0, r3
2405b73a:	f001 fce7 	bl	2405d10c <RCCEx_PLL2_Config>
2405b73e:	4603      	mov	r3, r0
2405b740:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
2405b744:	e015      	b.n	2405b772 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405b746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b74a:	3328      	adds	r3, #40	; 0x28
2405b74c:	2102      	movs	r1, #2
2405b74e:	4618      	mov	r0, r3
2405b750:	f001 fd8e 	bl	2405d270 <RCCEx_PLL3_Config>
2405b754:	4603      	mov	r3, r0
2405b756:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
2405b75a:	e00a      	b.n	2405b772 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405b75c:	2301      	movs	r3, #1
2405b75e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405b762:	e006      	b.n	2405b772 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405b764:	bf00      	nop
2405b766:	e004      	b.n	2405b772 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405b768:	bf00      	nop
2405b76a:	e002      	b.n	2405b772 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405b76c:	bf00      	nop
2405b76e:	e000      	b.n	2405b772 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405b770:	bf00      	nop
    }

    if (ret == HAL_OK)
2405b772:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b776:	2b00      	cmp	r3, #0
2405b778:	d10b      	bne.n	2405b792 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2405b77a:	4b39      	ldr	r3, [pc, #228]	; (2405b860 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405b77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b77e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
2405b782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
2405b78a:	4a35      	ldr	r2, [pc, #212]	; (2405b860 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405b78c:	430b      	orrs	r3, r1
2405b78e:	6553      	str	r3, [r2, #84]	; 0x54
2405b790:	e003      	b.n	2405b79a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b792:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b796:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
2405b79a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b79e:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b7a2:	f002 0340 	and.w	r3, r2, #64	; 0x40
2405b7a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
2405b7aa:	2300      	movs	r3, #0
2405b7ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
2405b7b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
2405b7b4:	460b      	mov	r3, r1
2405b7b6:	4313      	orrs	r3, r2
2405b7b8:	d058      	beq.n	2405b86c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
2405b7ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b7be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
2405b7c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
2405b7c6:	d033      	beq.n	2405b830 <HAL_RCCEx_PeriphCLKConfig+0xc70>
2405b7c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
2405b7cc:	d82c      	bhi.n	2405b828 <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405b7ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405b7d2:	d02f      	beq.n	2405b834 <HAL_RCCEx_PeriphCLKConfig+0xc74>
2405b7d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405b7d8:	d826      	bhi.n	2405b828 <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405b7da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
2405b7de:	d02b      	beq.n	2405b838 <HAL_RCCEx_PeriphCLKConfig+0xc78>
2405b7e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
2405b7e4:	d820      	bhi.n	2405b828 <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405b7e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405b7ea:	d012      	beq.n	2405b812 <HAL_RCCEx_PeriphCLKConfig+0xc52>
2405b7ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405b7f0:	d81a      	bhi.n	2405b828 <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405b7f2:	2b00      	cmp	r3, #0
2405b7f4:	d022      	beq.n	2405b83c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
2405b7f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405b7fa:	d115      	bne.n	2405b828 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405b7fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b800:	3308      	adds	r3, #8
2405b802:	2100      	movs	r1, #0
2405b804:	4618      	mov	r0, r3
2405b806:	f001 fc81 	bl	2405d10c <RCCEx_PLL2_Config>
2405b80a:	4603      	mov	r3, r0
2405b80c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
2405b810:	e015      	b.n	2405b83e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405b812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b816:	3328      	adds	r3, #40	; 0x28
2405b818:	2102      	movs	r1, #2
2405b81a:	4618      	mov	r0, r3
2405b81c:	f001 fd28 	bl	2405d270 <RCCEx_PLL3_Config>
2405b820:	4603      	mov	r3, r0
2405b822:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
2405b826:	e00a      	b.n	2405b83e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405b828:	2301      	movs	r3, #1
2405b82a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405b82e:	e006      	b.n	2405b83e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405b830:	bf00      	nop
2405b832:	e004      	b.n	2405b83e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405b834:	bf00      	nop
2405b836:	e002      	b.n	2405b83e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405b838:	bf00      	nop
2405b83a:	e000      	b.n	2405b83e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405b83c:	bf00      	nop
    }

    if (ret == HAL_OK)
2405b83e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b842:	2b00      	cmp	r3, #0
2405b844:	d10e      	bne.n	2405b864 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
2405b846:	4b06      	ldr	r3, [pc, #24]	; (2405b860 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405b848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405b84a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
2405b84e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b852:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
2405b856:	4a02      	ldr	r2, [pc, #8]	; (2405b860 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405b858:	430b      	orrs	r3, r1
2405b85a:	6593      	str	r3, [r2, #88]	; 0x58
2405b85c:	e006      	b.n	2405b86c <HAL_RCCEx_PeriphCLKConfig+0xcac>
2405b85e:	bf00      	nop
2405b860:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b864:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b868:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
2405b86c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b870:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b874:	f002 0380 	and.w	r3, r2, #128	; 0x80
2405b878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
2405b87c:	2300      	movs	r3, #0
2405b87e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
2405b882:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
2405b886:	460b      	mov	r3, r1
2405b888:	4313      	orrs	r3, r2
2405b88a:	d055      	beq.n	2405b938 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
2405b88c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b890:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
2405b894:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
2405b898:	d033      	beq.n	2405b902 <HAL_RCCEx_PeriphCLKConfig+0xd42>
2405b89a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
2405b89e:	d82c      	bhi.n	2405b8fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405b8a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2405b8a4:	d02f      	beq.n	2405b906 <HAL_RCCEx_PeriphCLKConfig+0xd46>
2405b8a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2405b8aa:	d826      	bhi.n	2405b8fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405b8ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
2405b8b0:	d02b      	beq.n	2405b90a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
2405b8b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
2405b8b6:	d820      	bhi.n	2405b8fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405b8b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405b8bc:	d012      	beq.n	2405b8e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
2405b8be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405b8c2:	d81a      	bhi.n	2405b8fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405b8c4:	2b00      	cmp	r3, #0
2405b8c6:	d022      	beq.n	2405b90e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
2405b8c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405b8cc:	d115      	bne.n	2405b8fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405b8ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b8d2:	3308      	adds	r3, #8
2405b8d4:	2100      	movs	r1, #0
2405b8d6:	4618      	mov	r0, r3
2405b8d8:	f001 fc18 	bl	2405d10c <RCCEx_PLL2_Config>
2405b8dc:	4603      	mov	r3, r0
2405b8de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
2405b8e2:	e015      	b.n	2405b910 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405b8e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b8e8:	3328      	adds	r3, #40	; 0x28
2405b8ea:	2102      	movs	r1, #2
2405b8ec:	4618      	mov	r0, r3
2405b8ee:	f001 fcbf 	bl	2405d270 <RCCEx_PLL3_Config>
2405b8f2:	4603      	mov	r3, r0
2405b8f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
2405b8f8:	e00a      	b.n	2405b910 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405b8fa:	2301      	movs	r3, #1
2405b8fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405b900:	e006      	b.n	2405b910 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405b902:	bf00      	nop
2405b904:	e004      	b.n	2405b910 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405b906:	bf00      	nop
2405b908:	e002      	b.n	2405b910 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405b90a:	bf00      	nop
2405b90c:	e000      	b.n	2405b910 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405b90e:	bf00      	nop
    }

    if (ret == HAL_OK)
2405b910:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b914:	2b00      	cmp	r3, #0
2405b916:	d10b      	bne.n	2405b930 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
2405b918:	4ba1      	ldr	r3, [pc, #644]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405b91a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405b91c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
2405b920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b924:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
2405b928:	4a9d      	ldr	r2, [pc, #628]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405b92a:	430b      	orrs	r3, r1
2405b92c:	6593      	str	r3, [r2, #88]	; 0x58
2405b92e:	e003      	b.n	2405b938 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b930:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405b934:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
2405b938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b940:	f002 0308 	and.w	r3, r2, #8
2405b944:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
2405b948:	2300      	movs	r3, #0
2405b94a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
2405b94e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
2405b952:	460b      	mov	r3, r1
2405b954:	4313      	orrs	r3, r2
2405b956:	d01e      	beq.n	2405b996 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
2405b958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b95c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2405b960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405b964:	d10c      	bne.n	2405b980 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2405b966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b96a:	3328      	adds	r3, #40	; 0x28
2405b96c:	2102      	movs	r1, #2
2405b96e:	4618      	mov	r0, r3
2405b970:	f001 fc7e 	bl	2405d270 <RCCEx_PLL3_Config>
2405b974:	4603      	mov	r3, r0
2405b976:	2b00      	cmp	r3, #0
2405b978:	d002      	beq.n	2405b980 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
2405b97a:	2301      	movs	r3, #1
2405b97c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
2405b980:	4b87      	ldr	r3, [pc, #540]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405b982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b984:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
2405b988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b98c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2405b990:	4a83      	ldr	r2, [pc, #524]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405b992:	430b      	orrs	r3, r1
2405b994:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2405b996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b99e:	f002 0310 	and.w	r3, r2, #16
2405b9a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
2405b9a6:	2300      	movs	r3, #0
2405b9a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
2405b9ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
2405b9b0:	460b      	mov	r3, r1
2405b9b2:	4313      	orrs	r3, r2
2405b9b4:	d01e      	beq.n	2405b9f4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
2405b9b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b9ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
2405b9be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405b9c2:	d10c      	bne.n	2405b9de <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2405b9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b9c8:	3328      	adds	r3, #40	; 0x28
2405b9ca:	2102      	movs	r1, #2
2405b9cc:	4618      	mov	r0, r3
2405b9ce:	f001 fc4f 	bl	2405d270 <RCCEx_PLL3_Config>
2405b9d2:	4603      	mov	r3, r0
2405b9d4:	2b00      	cmp	r3, #0
2405b9d6:	d002      	beq.n	2405b9de <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
2405b9d8:	2301      	movs	r3, #1
2405b9da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
2405b9de:	4b70      	ldr	r3, [pc, #448]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405b9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405b9e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
2405b9e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b9ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
2405b9ee:	4a6c      	ldr	r2, [pc, #432]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405b9f0:	430b      	orrs	r3, r1
2405b9f2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
2405b9f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
2405b9fc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
2405ba00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
2405ba04:	2300      	movs	r3, #0
2405ba06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
2405ba0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
2405ba0e:	460b      	mov	r3, r1
2405ba10:	4313      	orrs	r3, r2
2405ba12:	d03e      	beq.n	2405ba92 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
2405ba14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ba18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
2405ba1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405ba20:	d022      	beq.n	2405ba68 <HAL_RCCEx_PeriphCLKConfig+0xea8>
2405ba22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405ba26:	d81b      	bhi.n	2405ba60 <HAL_RCCEx_PeriphCLKConfig+0xea0>
2405ba28:	2b00      	cmp	r3, #0
2405ba2a:	d003      	beq.n	2405ba34 <HAL_RCCEx_PeriphCLKConfig+0xe74>
2405ba2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405ba30:	d00b      	beq.n	2405ba4a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
2405ba32:	e015      	b.n	2405ba60 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405ba34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ba38:	3308      	adds	r3, #8
2405ba3a:	2100      	movs	r1, #0
2405ba3c:	4618      	mov	r0, r3
2405ba3e:	f001 fb65 	bl	2405d10c <RCCEx_PLL2_Config>
2405ba42:	4603      	mov	r3, r0
2405ba44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
2405ba48:	e00f      	b.n	2405ba6a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405ba4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ba4e:	3328      	adds	r3, #40	; 0x28
2405ba50:	2102      	movs	r1, #2
2405ba52:	4618      	mov	r0, r3
2405ba54:	f001 fc0c 	bl	2405d270 <RCCEx_PLL3_Config>
2405ba58:	4603      	mov	r3, r0
2405ba5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
2405ba5e:	e004      	b.n	2405ba6a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405ba60:	2301      	movs	r3, #1
2405ba62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405ba66:	e000      	b.n	2405ba6a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
2405ba68:	bf00      	nop
    }

    if (ret == HAL_OK)
2405ba6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ba6e:	2b00      	cmp	r3, #0
2405ba70:	d10b      	bne.n	2405ba8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
2405ba72:	4b4b      	ldr	r3, [pc, #300]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405ba74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405ba76:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
2405ba7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ba7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
2405ba82:	4a47      	ldr	r2, [pc, #284]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405ba84:	430b      	orrs	r3, r1
2405ba86:	6593      	str	r3, [r2, #88]	; 0x58
2405ba88:	e003      	b.n	2405ba92 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405ba8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ba8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2405ba92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
2405ba9a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
2405ba9e:	67bb      	str	r3, [r7, #120]	; 0x78
2405baa0:	2300      	movs	r3, #0
2405baa2:	67fb      	str	r3, [r7, #124]	; 0x7c
2405baa4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
2405baa8:	460b      	mov	r3, r1
2405baaa:	4313      	orrs	r3, r2
2405baac:	d03b      	beq.n	2405bb26 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
2405baae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2405bab6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405baba:	d01f      	beq.n	2405bafc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
2405babc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405bac0:	d818      	bhi.n	2405baf4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
2405bac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2405bac6:	d003      	beq.n	2405bad0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
2405bac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405bacc:	d007      	beq.n	2405bade <HAL_RCCEx_PeriphCLKConfig+0xf1e>
2405bace:	e011      	b.n	2405baf4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405bad0:	4b33      	ldr	r3, [pc, #204]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405bad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bad4:	4a32      	ldr	r2, [pc, #200]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405bad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405bada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
2405badc:	e00f      	b.n	2405bafe <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405bade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bae2:	3328      	adds	r3, #40	; 0x28
2405bae4:	2101      	movs	r1, #1
2405bae6:	4618      	mov	r0, r3
2405bae8:	f001 fbc2 	bl	2405d270 <RCCEx_PLL3_Config>
2405baec:	4603      	mov	r3, r0
2405baee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
2405baf2:	e004      	b.n	2405bafe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405baf4:	2301      	movs	r3, #1
2405baf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405bafa:	e000      	b.n	2405bafe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
2405bafc:	bf00      	nop
    }

    if (ret == HAL_OK)
2405bafe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405bb02:	2b00      	cmp	r3, #0
2405bb04:	d10b      	bne.n	2405bb1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
2405bb06:	4b26      	ldr	r3, [pc, #152]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405bb08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405bb0a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
2405bb0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bb12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2405bb16:	4a22      	ldr	r2, [pc, #136]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405bb18:	430b      	orrs	r3, r1
2405bb1a:	6553      	str	r3, [r2, #84]	; 0x54
2405bb1c:	e003      	b.n	2405bb26 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405bb1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405bb22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2405bb26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bb2e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
2405bb32:	673b      	str	r3, [r7, #112]	; 0x70
2405bb34:	2300      	movs	r3, #0
2405bb36:	677b      	str	r3, [r7, #116]	; 0x74
2405bb38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
2405bb3c:	460b      	mov	r3, r1
2405bb3e:	4313      	orrs	r3, r2
2405bb40:	d034      	beq.n	2405bbac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
2405bb42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bb46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405bb48:	2b00      	cmp	r3, #0
2405bb4a:	d003      	beq.n	2405bb54 <HAL_RCCEx_PeriphCLKConfig+0xf94>
2405bb4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405bb50:	d007      	beq.n	2405bb62 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
2405bb52:	e011      	b.n	2405bb78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405bb54:	4b12      	ldr	r3, [pc, #72]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405bb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bb58:	4a11      	ldr	r2, [pc, #68]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405bb5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405bb5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
2405bb60:	e00e      	b.n	2405bb80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405bb62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bb66:	3308      	adds	r3, #8
2405bb68:	2102      	movs	r1, #2
2405bb6a:	4618      	mov	r0, r3
2405bb6c:	f001 face 	bl	2405d10c <RCCEx_PLL2_Config>
2405bb70:	4603      	mov	r3, r0
2405bb72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
2405bb76:	e003      	b.n	2405bb80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
2405bb78:	2301      	movs	r3, #1
2405bb7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405bb7e:	bf00      	nop
    }

    if (ret == HAL_OK)
2405bb80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405bb84:	2b00      	cmp	r3, #0
2405bb86:	d10d      	bne.n	2405bba4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
2405bb88:	4b05      	ldr	r3, [pc, #20]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405bb8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405bb8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
2405bb90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bb94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405bb96:	4a02      	ldr	r2, [pc, #8]	; (2405bba0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405bb98:	430b      	orrs	r3, r1
2405bb9a:	64d3      	str	r3, [r2, #76]	; 0x4c
2405bb9c:	e006      	b.n	2405bbac <HAL_RCCEx_PeriphCLKConfig+0xfec>
2405bb9e:	bf00      	nop
2405bba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405bba4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405bba8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2405bbac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bbb4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
2405bbb8:	66bb      	str	r3, [r7, #104]	; 0x68
2405bbba:	2300      	movs	r3, #0
2405bbbc:	66fb      	str	r3, [r7, #108]	; 0x6c
2405bbbe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
2405bbc2:	460b      	mov	r3, r1
2405bbc4:	4313      	orrs	r3, r2
2405bbc6:	d00c      	beq.n	2405bbe2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2405bbc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bbcc:	3328      	adds	r3, #40	; 0x28
2405bbce:	2102      	movs	r1, #2
2405bbd0:	4618      	mov	r0, r3
2405bbd2:	f001 fb4d 	bl	2405d270 <RCCEx_PLL3_Config>
2405bbd6:	4603      	mov	r3, r0
2405bbd8:	2b00      	cmp	r3, #0
2405bbda:	d002      	beq.n	2405bbe2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
2405bbdc:	2301      	movs	r3, #1
2405bbde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
2405bbe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bbea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
2405bbee:	663b      	str	r3, [r7, #96]	; 0x60
2405bbf0:	2300      	movs	r3, #0
2405bbf2:	667b      	str	r3, [r7, #100]	; 0x64
2405bbf4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
2405bbf8:	460b      	mov	r3, r1
2405bbfa:	4313      	orrs	r3, r2
2405bbfc:	d038      	beq.n	2405bc70 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
2405bbfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bc02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405bc06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2405bc0a:	d018      	beq.n	2405bc3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
2405bc0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2405bc10:	d811      	bhi.n	2405bc36 <HAL_RCCEx_PeriphCLKConfig+0x1076>
2405bc12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405bc16:	d014      	beq.n	2405bc42 <HAL_RCCEx_PeriphCLKConfig+0x1082>
2405bc18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405bc1c:	d80b      	bhi.n	2405bc36 <HAL_RCCEx_PeriphCLKConfig+0x1076>
2405bc1e:	2b00      	cmp	r3, #0
2405bc20:	d011      	beq.n	2405bc46 <HAL_RCCEx_PeriphCLKConfig+0x1086>
2405bc22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405bc26:	d106      	bne.n	2405bc36 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405bc28:	4bc3      	ldr	r3, [pc, #780]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bc2c:	4ac2      	ldr	r2, [pc, #776]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bc2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405bc32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
2405bc34:	e008      	b.n	2405bc48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405bc36:	2301      	movs	r3, #1
2405bc38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405bc3c:	e004      	b.n	2405bc48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
2405bc3e:	bf00      	nop
2405bc40:	e002      	b.n	2405bc48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
2405bc42:	bf00      	nop
2405bc44:	e000      	b.n	2405bc48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
2405bc46:	bf00      	nop
    }

    if (ret == HAL_OK)
2405bc48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405bc4c:	2b00      	cmp	r3, #0
2405bc4e:	d10b      	bne.n	2405bc68 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
2405bc50:	4bb9      	ldr	r3, [pc, #740]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bc52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405bc54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
2405bc58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bc5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405bc60:	4ab5      	ldr	r2, [pc, #724]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bc62:	430b      	orrs	r3, r1
2405bc64:	6553      	str	r3, [r2, #84]	; 0x54
2405bc66:	e003      	b.n	2405bc70 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405bc68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405bc6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2405bc70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bc78:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
2405bc7c:	65bb      	str	r3, [r7, #88]	; 0x58
2405bc7e:	2300      	movs	r3, #0
2405bc80:	65fb      	str	r3, [r7, #92]	; 0x5c
2405bc82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
2405bc86:	460b      	mov	r3, r1
2405bc88:	4313      	orrs	r3, r2
2405bc8a:	d009      	beq.n	2405bca0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
2405bc8c:	4baa      	ldr	r3, [pc, #680]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bc8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405bc90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
2405bc94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bc98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
2405bc9a:	4aa7      	ldr	r2, [pc, #668]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bc9c:	430b      	orrs	r3, r1
2405bc9e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
2405bca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bca4:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bca8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
2405bcac:	653b      	str	r3, [r7, #80]	; 0x50
2405bcae:	2300      	movs	r3, #0
2405bcb0:	657b      	str	r3, [r7, #84]	; 0x54
2405bcb2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
2405bcb6:	460b      	mov	r3, r1
2405bcb8:	4313      	orrs	r3, r2
2405bcba:	d009      	beq.n	2405bcd0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
2405bcbc:	4b9e      	ldr	r3, [pc, #632]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bcbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405bcc0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
2405bcc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bcc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bcca:	4a9b      	ldr	r2, [pc, #620]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bccc:	430b      	orrs	r3, r1
2405bcce:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
2405bcd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bcd8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
2405bcdc:	64bb      	str	r3, [r7, #72]	; 0x48
2405bcde:	2300      	movs	r3, #0
2405bce0:	64fb      	str	r3, [r7, #76]	; 0x4c
2405bce2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
2405bce6:	460b      	mov	r3, r1
2405bce8:	4313      	orrs	r3, r2
2405bcea:	d009      	beq.n	2405bd00 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
2405bcec:	4b92      	ldr	r3, [pc, #584]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bcee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405bcf0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
2405bcf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bcf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405bcfa:	4a8f      	ldr	r2, [pc, #572]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bcfc:	430b      	orrs	r3, r1
2405bcfe:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
2405bd00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bd08:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
2405bd0c:	643b      	str	r3, [r7, #64]	; 0x40
2405bd0e:	2300      	movs	r3, #0
2405bd10:	647b      	str	r3, [r7, #68]	; 0x44
2405bd12:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
2405bd16:	460b      	mov	r3, r1
2405bd18:	4313      	orrs	r3, r2
2405bd1a:	d00e      	beq.n	2405bd3a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2405bd1c:	4b86      	ldr	r3, [pc, #536]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bd1e:	691b      	ldr	r3, [r3, #16]
2405bd20:	4a85      	ldr	r2, [pc, #532]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bd22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
2405bd26:	6113      	str	r3, [r2, #16]
2405bd28:	4b83      	ldr	r3, [pc, #524]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bd2a:	6919      	ldr	r1, [r3, #16]
2405bd2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bd30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
2405bd34:	4a80      	ldr	r2, [pc, #512]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bd36:	430b      	orrs	r3, r1
2405bd38:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
2405bd3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bd42:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
2405bd46:	63bb      	str	r3, [r7, #56]	; 0x38
2405bd48:	2300      	movs	r3, #0
2405bd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
2405bd4c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
2405bd50:	460b      	mov	r3, r1
2405bd52:	4313      	orrs	r3, r2
2405bd54:	d009      	beq.n	2405bd6a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
2405bd56:	4b78      	ldr	r3, [pc, #480]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bd58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405bd5a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
2405bd5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bd62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405bd64:	4a74      	ldr	r2, [pc, #464]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bd66:	430b      	orrs	r3, r1
2405bd68:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
2405bd6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bd72:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
2405bd76:	633b      	str	r3, [r7, #48]	; 0x30
2405bd78:	2300      	movs	r3, #0
2405bd7a:	637b      	str	r3, [r7, #52]	; 0x34
2405bd7c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
2405bd80:	460b      	mov	r3, r1
2405bd82:	4313      	orrs	r3, r2
2405bd84:	d00a      	beq.n	2405bd9c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
2405bd86:	4b6c      	ldr	r3, [pc, #432]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bd88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405bd8a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
2405bd8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bd92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405bd96:	4a68      	ldr	r2, [pc, #416]	; (2405bf38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405bd98:	430b      	orrs	r3, r1
2405bd9a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
2405bd9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bda4:	2100      	movs	r1, #0
2405bda6:	62b9      	str	r1, [r7, #40]	; 0x28
2405bda8:	f003 0301 	and.w	r3, r3, #1
2405bdac:	62fb      	str	r3, [r7, #44]	; 0x2c
2405bdae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
2405bdb2:	460b      	mov	r3, r1
2405bdb4:	4313      	orrs	r3, r2
2405bdb6:	d011      	beq.n	2405bddc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405bdb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bdbc:	3308      	adds	r3, #8
2405bdbe:	2100      	movs	r1, #0
2405bdc0:	4618      	mov	r0, r3
2405bdc2:	f001 f9a3 	bl	2405d10c <RCCEx_PLL2_Config>
2405bdc6:	4603      	mov	r3, r0
2405bdc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405bdcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405bdd0:	2b00      	cmp	r3, #0
2405bdd2:	d003      	beq.n	2405bddc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405bdd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405bdd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
2405bddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bde0:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bde4:	2100      	movs	r1, #0
2405bde6:	6239      	str	r1, [r7, #32]
2405bde8:	f003 0302 	and.w	r3, r3, #2
2405bdec:	627b      	str	r3, [r7, #36]	; 0x24
2405bdee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
2405bdf2:	460b      	mov	r3, r1
2405bdf4:	4313      	orrs	r3, r2
2405bdf6:	d011      	beq.n	2405be1c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405bdf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bdfc:	3308      	adds	r3, #8
2405bdfe:	2101      	movs	r1, #1
2405be00:	4618      	mov	r0, r3
2405be02:	f001 f983 	bl	2405d10c <RCCEx_PLL2_Config>
2405be06:	4603      	mov	r3, r0
2405be08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405be0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405be10:	2b00      	cmp	r3, #0
2405be12:	d003      	beq.n	2405be1c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405be14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405be18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2405be1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405be20:	e9d3 2300 	ldrd	r2, r3, [r3]
2405be24:	2100      	movs	r1, #0
2405be26:	61b9      	str	r1, [r7, #24]
2405be28:	f003 0304 	and.w	r3, r3, #4
2405be2c:	61fb      	str	r3, [r7, #28]
2405be2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
2405be32:	460b      	mov	r3, r1
2405be34:	4313      	orrs	r3, r2
2405be36:	d011      	beq.n	2405be5c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405be38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405be3c:	3308      	adds	r3, #8
2405be3e:	2102      	movs	r1, #2
2405be40:	4618      	mov	r0, r3
2405be42:	f001 f963 	bl	2405d10c <RCCEx_PLL2_Config>
2405be46:	4603      	mov	r3, r0
2405be48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405be4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405be50:	2b00      	cmp	r3, #0
2405be52:	d003      	beq.n	2405be5c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405be54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405be58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2405be5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405be60:	e9d3 2300 	ldrd	r2, r3, [r3]
2405be64:	2100      	movs	r1, #0
2405be66:	6139      	str	r1, [r7, #16]
2405be68:	f003 0308 	and.w	r3, r3, #8
2405be6c:	617b      	str	r3, [r7, #20]
2405be6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
2405be72:	460b      	mov	r3, r1
2405be74:	4313      	orrs	r3, r2
2405be76:	d011      	beq.n	2405be9c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405be78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405be7c:	3328      	adds	r3, #40	; 0x28
2405be7e:	2100      	movs	r1, #0
2405be80:	4618      	mov	r0, r3
2405be82:	f001 f9f5 	bl	2405d270 <RCCEx_PLL3_Config>
2405be86:	4603      	mov	r3, r0
2405be88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
2405be8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405be90:	2b00      	cmp	r3, #0
2405be92:	d003      	beq.n	2405be9c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405be94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405be98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2405be9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bea4:	2100      	movs	r1, #0
2405bea6:	60b9      	str	r1, [r7, #8]
2405bea8:	f003 0310 	and.w	r3, r3, #16
2405beac:	60fb      	str	r3, [r7, #12]
2405beae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
2405beb2:	460b      	mov	r3, r1
2405beb4:	4313      	orrs	r3, r2
2405beb6:	d011      	beq.n	2405bedc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405beb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bebc:	3328      	adds	r3, #40	; 0x28
2405bebe:	2101      	movs	r1, #1
2405bec0:	4618      	mov	r0, r3
2405bec2:	f001 f9d5 	bl	2405d270 <RCCEx_PLL3_Config>
2405bec6:	4603      	mov	r3, r0
2405bec8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405becc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405bed0:	2b00      	cmp	r3, #0
2405bed2:	d003      	beq.n	2405bedc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405bed4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405bed8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2405bedc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
2405bee4:	2100      	movs	r1, #0
2405bee6:	6039      	str	r1, [r7, #0]
2405bee8:	f003 0320 	and.w	r3, r3, #32
2405beec:	607b      	str	r3, [r7, #4]
2405beee:	e9d7 1200 	ldrd	r1, r2, [r7]
2405bef2:	460b      	mov	r3, r1
2405bef4:	4313      	orrs	r3, r2
2405bef6:	d011      	beq.n	2405bf1c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405bef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405befc:	3328      	adds	r3, #40	; 0x28
2405befe:	2102      	movs	r1, #2
2405bf00:	4618      	mov	r0, r3
2405bf02:	f001 f9b5 	bl	2405d270 <RCCEx_PLL3_Config>
2405bf06:	4603      	mov	r3, r0
2405bf08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405bf0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405bf10:	2b00      	cmp	r3, #0
2405bf12:	d003      	beq.n	2405bf1c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405bf14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405bf18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
2405bf1c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
2405bf20:	2b00      	cmp	r3, #0
2405bf22:	d101      	bne.n	2405bf28 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
2405bf24:	2300      	movs	r3, #0
2405bf26:	e000      	b.n	2405bf2a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
2405bf28:	2301      	movs	r3, #1
}
2405bf2a:	4618      	mov	r0, r3
2405bf2c:	f507 7790 	add.w	r7, r7, #288	; 0x120
2405bf30:	46bd      	mov	sp, r7
2405bf32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
2405bf36:	bf00      	nop
2405bf38:	58024400 	.word	0x58024400

2405bf3c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
2405bf3c:	b580      	push	{r7, lr}
2405bf3e:	b090      	sub	sp, #64	; 0x40
2405bf40:	af00      	add	r7, sp, #0
2405bf42:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2405bf46:	e9d7 2300 	ldrd	r2, r3, [r7]
2405bf4a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
2405bf4e:	430b      	orrs	r3, r1
2405bf50:	f040 8094 	bne.w	2405c07c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
2405bf54:	4b97      	ldr	r3, [pc, #604]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405bf56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405bf58:	f003 0307 	and.w	r3, r3, #7
2405bf5c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
2405bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bf60:	2b04      	cmp	r3, #4
2405bf62:	f200 8087 	bhi.w	2405c074 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
2405bf66:	a201      	add	r2, pc, #4	; (adr r2, 2405bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
2405bf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405bf6c:	2405bf81 	.word	0x2405bf81
2405bf70:	2405bfa9 	.word	0x2405bfa9
2405bf74:	2405bfd1 	.word	0x2405bfd1
2405bf78:	2405c06d 	.word	0x2405c06d
2405bf7c:	2405bff9 	.word	0x2405bff9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405bf80:	4b8c      	ldr	r3, [pc, #560]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405bf82:	681b      	ldr	r3, [r3, #0]
2405bf84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bf88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405bf8c:	d108      	bne.n	2405bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405bf8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405bf92:	4618      	mov	r0, r3
2405bf94:	f000 ff68 	bl	2405ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405bf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405bf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405bf9c:	f000 bc97 	b.w	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405bfa0:	2300      	movs	r3, #0
2405bfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405bfa4:	f000 bc93 	b.w	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405bfa8:	4b82      	ldr	r3, [pc, #520]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405bfaa:	681b      	ldr	r3, [r3, #0]
2405bfac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405bfb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405bfb4:	d108      	bne.n	2405bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405bfb6:	f107 0318 	add.w	r3, r7, #24
2405bfba:	4618      	mov	r0, r3
2405bfbc:	f000 fcac 	bl	2405c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405bfc0:	69bb      	ldr	r3, [r7, #24]
2405bfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405bfc4:	f000 bc83 	b.w	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405bfc8:	2300      	movs	r3, #0
2405bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405bfcc:	f000 bc7f 	b.w	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405bfd0:	4b78      	ldr	r3, [pc, #480]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405bfd2:	681b      	ldr	r3, [r3, #0]
2405bfd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405bfd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405bfdc:	d108      	bne.n	2405bff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405bfde:	f107 030c 	add.w	r3, r7, #12
2405bfe2:	4618      	mov	r0, r3
2405bfe4:	f000 fdec 	bl	2405cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405bfe8:	68fb      	ldr	r3, [r7, #12]
2405bfea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405bfec:	f000 bc6f 	b.w	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405bff0:	2300      	movs	r3, #0
2405bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405bff4:	f000 bc6b 	b.w	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405bff8:	4b6e      	ldr	r3, [pc, #440]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405bffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405bffc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405c000:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405c002:	4b6c      	ldr	r3, [pc, #432]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c004:	681b      	ldr	r3, [r3, #0]
2405c006:	f003 0304 	and.w	r3, r3, #4
2405c00a:	2b04      	cmp	r3, #4
2405c00c:	d10c      	bne.n	2405c028 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
2405c00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c010:	2b00      	cmp	r3, #0
2405c012:	d109      	bne.n	2405c028 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405c014:	4b67      	ldr	r3, [pc, #412]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c016:	681b      	ldr	r3, [r3, #0]
2405c018:	08db      	lsrs	r3, r3, #3
2405c01a:	f003 0303 	and.w	r3, r3, #3
2405c01e:	4a66      	ldr	r2, [pc, #408]	; (2405c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
2405c020:	fa22 f303 	lsr.w	r3, r2, r3
2405c024:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c026:	e01f      	b.n	2405c068 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405c028:	4b62      	ldr	r3, [pc, #392]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c02a:	681b      	ldr	r3, [r3, #0]
2405c02c:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405c030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c034:	d106      	bne.n	2405c044 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
2405c036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c038:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405c03c:	d102      	bne.n	2405c044 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405c03e:	4b5f      	ldr	r3, [pc, #380]	; (2405c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
2405c040:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c042:	e011      	b.n	2405c068 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405c044:	4b5b      	ldr	r3, [pc, #364]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c046:	681b      	ldr	r3, [r3, #0]
2405c048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405c04c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c050:	d106      	bne.n	2405c060 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
2405c052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c058:	d102      	bne.n	2405c060 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405c05a:	4b59      	ldr	r3, [pc, #356]	; (2405c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
2405c05c:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c05e:	e003      	b.n	2405c068 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405c060:	2300      	movs	r3, #0
2405c062:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2405c064:	f000 bc33 	b.w	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405c068:	f000 bc31 	b.w	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405c06c:	4b55      	ldr	r3, [pc, #340]	; (2405c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
2405c06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c070:	f000 bc2d 	b.w	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
2405c074:	2300      	movs	r3, #0
2405c076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c078:	f000 bc29 	b.w	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
2405c07c:	e9d7 2300 	ldrd	r2, r3, [r7]
2405c080:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
2405c084:	430b      	orrs	r3, r1
2405c086:	f040 809f 	bne.w	2405c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
2405c08a:	4b4a      	ldr	r3, [pc, #296]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c08c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c08e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
2405c092:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
2405c094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c09a:	d04d      	beq.n	2405c138 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
2405c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c09e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c0a2:	f200 8084 	bhi.w	2405c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
2405c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c0a8:	2bc0      	cmp	r3, #192	; 0xc0
2405c0aa:	d07d      	beq.n	2405c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
2405c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c0ae:	2bc0      	cmp	r3, #192	; 0xc0
2405c0b0:	d87d      	bhi.n	2405c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
2405c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c0b4:	2b80      	cmp	r3, #128	; 0x80
2405c0b6:	d02d      	beq.n	2405c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
2405c0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c0ba:	2b80      	cmp	r3, #128	; 0x80
2405c0bc:	d877      	bhi.n	2405c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
2405c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c0c0:	2b00      	cmp	r3, #0
2405c0c2:	d003      	beq.n	2405c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x190>
2405c0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c0c6:	2b40      	cmp	r3, #64	; 0x40
2405c0c8:	d012      	beq.n	2405c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
2405c0ca:	e070      	b.n	2405c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405c0cc:	4b39      	ldr	r3, [pc, #228]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c0ce:	681b      	ldr	r3, [r3, #0]
2405c0d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405c0d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405c0d8:	d107      	bne.n	2405c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405c0da:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405c0de:	4618      	mov	r0, r3
2405c0e0:	f000 fec2 	bl	2405ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405c0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c0e8:	e3f1      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c0ea:	2300      	movs	r3, #0
2405c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c0ee:	e3ee      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405c0f0:	4b30      	ldr	r3, [pc, #192]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c0f2:	681b      	ldr	r3, [r3, #0]
2405c0f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405c0f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405c0fc:	d107      	bne.n	2405c10e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405c0fe:	f107 0318 	add.w	r3, r7, #24
2405c102:	4618      	mov	r0, r3
2405c104:	f000 fc08 	bl	2405c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405c108:	69bb      	ldr	r3, [r7, #24]
2405c10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c10c:	e3df      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c10e:	2300      	movs	r3, #0
2405c110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c112:	e3dc      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405c114:	4b27      	ldr	r3, [pc, #156]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c116:	681b      	ldr	r3, [r3, #0]
2405c118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405c11c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c120:	d107      	bne.n	2405c132 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405c122:	f107 030c 	add.w	r3, r7, #12
2405c126:	4618      	mov	r0, r3
2405c128:	f000 fd4a 	bl	2405cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405c12c:	68fb      	ldr	r3, [r7, #12]
2405c12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c130:	e3cd      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c132:	2300      	movs	r3, #0
2405c134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c136:	e3ca      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405c138:	4b1e      	ldr	r3, [pc, #120]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c13a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405c13c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405c140:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405c142:	4b1c      	ldr	r3, [pc, #112]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c144:	681b      	ldr	r3, [r3, #0]
2405c146:	f003 0304 	and.w	r3, r3, #4
2405c14a:	2b04      	cmp	r3, #4
2405c14c:	d10c      	bne.n	2405c168 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
2405c14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c150:	2b00      	cmp	r3, #0
2405c152:	d109      	bne.n	2405c168 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405c154:	4b17      	ldr	r3, [pc, #92]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c156:	681b      	ldr	r3, [r3, #0]
2405c158:	08db      	lsrs	r3, r3, #3
2405c15a:	f003 0303 	and.w	r3, r3, #3
2405c15e:	4a16      	ldr	r2, [pc, #88]	; (2405c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
2405c160:	fa22 f303 	lsr.w	r3, r2, r3
2405c164:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c166:	e01e      	b.n	2405c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405c168:	4b12      	ldr	r3, [pc, #72]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c16a:	681b      	ldr	r3, [r3, #0]
2405c16c:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405c170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c174:	d106      	bne.n	2405c184 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
2405c176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405c17c:	d102      	bne.n	2405c184 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405c17e:	4b0f      	ldr	r3, [pc, #60]	; (2405c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
2405c180:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c182:	e010      	b.n	2405c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405c184:	4b0b      	ldr	r3, [pc, #44]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405c186:	681b      	ldr	r3, [r3, #0]
2405c188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405c18c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c190:	d106      	bne.n	2405c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
2405c192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c198:	d102      	bne.n	2405c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405c19a:	4b09      	ldr	r3, [pc, #36]	; (2405c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
2405c19c:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c19e:	e002      	b.n	2405c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405c1a0:	2300      	movs	r3, #0
2405c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2405c1a4:	e393      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405c1a6:	e392      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405c1a8:	4b06      	ldr	r3, [pc, #24]	; (2405c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
2405c1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c1ac:	e38f      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2405c1ae:	2300      	movs	r3, #0
2405c1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c1b2:	e38c      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405c1b4:	58024400 	.word	0x58024400
2405c1b8:	03d09000 	.word	0x03d09000
2405c1bc:	003d0900 	.word	0x003d0900
2405c1c0:	016e3600 	.word	0x016e3600
2405c1c4:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
2405c1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
2405c1cc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
2405c1d0:	430b      	orrs	r3, r1
2405c1d2:	f040 809c 	bne.w	2405c30e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
2405c1d6:	4b9e      	ldr	r3, [pc, #632]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c1da:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
2405c1de:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
2405c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c1e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405c1e6:	d054      	beq.n	2405c292 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
2405c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c1ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405c1ee:	f200 808b 	bhi.w	2405c308 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
2405c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c1f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405c1f8:	f000 8083 	beq.w	2405c302 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
2405c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c1fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405c202:	f200 8081 	bhi.w	2405c308 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
2405c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405c20c:	d02f      	beq.n	2405c26e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
2405c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405c214:	d878      	bhi.n	2405c308 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
2405c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c218:	2b00      	cmp	r3, #0
2405c21a:	d004      	beq.n	2405c226 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
2405c21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405c21e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405c222:	d012      	beq.n	2405c24a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
2405c224:	e070      	b.n	2405c308 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405c226:	4b8a      	ldr	r3, [pc, #552]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c228:	681b      	ldr	r3, [r3, #0]
2405c22a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405c22e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405c232:	d107      	bne.n	2405c244 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405c234:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405c238:	4618      	mov	r0, r3
2405c23a:	f000 fe15 	bl	2405ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405c23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405c240:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c242:	e344      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c244:	2300      	movs	r3, #0
2405c246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c248:	e341      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405c24a:	4b81      	ldr	r3, [pc, #516]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c24c:	681b      	ldr	r3, [r3, #0]
2405c24e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405c252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405c256:	d107      	bne.n	2405c268 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405c258:	f107 0318 	add.w	r3, r7, #24
2405c25c:	4618      	mov	r0, r3
2405c25e:	f000 fb5b 	bl	2405c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405c262:	69bb      	ldr	r3, [r7, #24]
2405c264:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c266:	e332      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c268:	2300      	movs	r3, #0
2405c26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c26c:	e32f      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405c26e:	4b78      	ldr	r3, [pc, #480]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c270:	681b      	ldr	r3, [r3, #0]
2405c272:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405c276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c27a:	d107      	bne.n	2405c28c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405c27c:	f107 030c 	add.w	r3, r7, #12
2405c280:	4618      	mov	r0, r3
2405c282:	f000 fc9d 	bl	2405cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405c286:	68fb      	ldr	r3, [r7, #12]
2405c288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c28a:	e320      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c28c:	2300      	movs	r3, #0
2405c28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c290:	e31d      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405c292:	4b6f      	ldr	r3, [pc, #444]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405c296:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405c29a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405c29c:	4b6c      	ldr	r3, [pc, #432]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c29e:	681b      	ldr	r3, [r3, #0]
2405c2a0:	f003 0304 	and.w	r3, r3, #4
2405c2a4:	2b04      	cmp	r3, #4
2405c2a6:	d10c      	bne.n	2405c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
2405c2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c2aa:	2b00      	cmp	r3, #0
2405c2ac:	d109      	bne.n	2405c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405c2ae:	4b68      	ldr	r3, [pc, #416]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c2b0:	681b      	ldr	r3, [r3, #0]
2405c2b2:	08db      	lsrs	r3, r3, #3
2405c2b4:	f003 0303 	and.w	r3, r3, #3
2405c2b8:	4a66      	ldr	r2, [pc, #408]	; (2405c454 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
2405c2ba:	fa22 f303 	lsr.w	r3, r2, r3
2405c2be:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c2c0:	e01e      	b.n	2405c300 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405c2c2:	4b63      	ldr	r3, [pc, #396]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c2c4:	681b      	ldr	r3, [r3, #0]
2405c2c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405c2ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c2ce:	d106      	bne.n	2405c2de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
2405c2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c2d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405c2d6:	d102      	bne.n	2405c2de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405c2d8:	4b5f      	ldr	r3, [pc, #380]	; (2405c458 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
2405c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c2dc:	e010      	b.n	2405c300 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405c2de:	4b5c      	ldr	r3, [pc, #368]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c2e0:	681b      	ldr	r3, [r3, #0]
2405c2e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405c2e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c2ea:	d106      	bne.n	2405c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
2405c2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c2ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c2f2:	d102      	bne.n	2405c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405c2f4:	4b59      	ldr	r3, [pc, #356]	; (2405c45c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
2405c2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c2f8:	e002      	b.n	2405c300 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405c2fa:	2300      	movs	r3, #0
2405c2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
2405c2fe:	e2e6      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405c300:	e2e5      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405c302:	4b57      	ldr	r3, [pc, #348]	; (2405c460 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
2405c304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c306:	e2e2      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2405c308:	2300      	movs	r3, #0
2405c30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c30c:	e2df      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
2405c30e:	e9d7 2300 	ldrd	r2, r3, [r7]
2405c312:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
2405c316:	430b      	orrs	r3, r1
2405c318:	f040 80a7 	bne.w	2405c46a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
2405c31c:	4b4c      	ldr	r3, [pc, #304]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c31e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c320:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
2405c324:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405c32c:	d055      	beq.n	2405c3da <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
2405c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405c334:	f200 8096 	bhi.w	2405c464 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
2405c338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c33a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405c33e:	f000 8084 	beq.w	2405c44a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
2405c342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c344:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405c348:	f200 808c 	bhi.w	2405c464 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
2405c34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c34e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405c352:	d030      	beq.n	2405c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
2405c354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405c35a:	f200 8083 	bhi.w	2405c464 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
2405c35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c360:	2b00      	cmp	r3, #0
2405c362:	d004      	beq.n	2405c36e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
2405c364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405c36a:	d012      	beq.n	2405c392 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
2405c36c:	e07a      	b.n	2405c464 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405c36e:	4b38      	ldr	r3, [pc, #224]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c370:	681b      	ldr	r3, [r3, #0]
2405c372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405c376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405c37a:	d107      	bne.n	2405c38c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405c37c:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405c380:	4618      	mov	r0, r3
2405c382:	f000 fd71 	bl	2405ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405c386:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405c388:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c38a:	e2a0      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c38c:	2300      	movs	r3, #0
2405c38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c390:	e29d      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405c392:	4b2f      	ldr	r3, [pc, #188]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c394:	681b      	ldr	r3, [r3, #0]
2405c396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405c39a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405c39e:	d107      	bne.n	2405c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405c3a0:	f107 0318 	add.w	r3, r7, #24
2405c3a4:	4618      	mov	r0, r3
2405c3a6:	f000 fab7 	bl	2405c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405c3aa:	69bb      	ldr	r3, [r7, #24]
2405c3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c3ae:	e28e      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c3b0:	2300      	movs	r3, #0
2405c3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c3b4:	e28b      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405c3b6:	4b26      	ldr	r3, [pc, #152]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c3b8:	681b      	ldr	r3, [r3, #0]
2405c3ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405c3be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c3c2:	d107      	bne.n	2405c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405c3c4:	f107 030c 	add.w	r3, r7, #12
2405c3c8:	4618      	mov	r0, r3
2405c3ca:	f000 fbf9 	bl	2405cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405c3ce:	68fb      	ldr	r3, [r7, #12]
2405c3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c3d2:	e27c      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c3d4:	2300      	movs	r3, #0
2405c3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c3d8:	e279      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405c3da:	4b1d      	ldr	r3, [pc, #116]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c3dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405c3de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405c3e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405c3e4:	4b1a      	ldr	r3, [pc, #104]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c3e6:	681b      	ldr	r3, [r3, #0]
2405c3e8:	f003 0304 	and.w	r3, r3, #4
2405c3ec:	2b04      	cmp	r3, #4
2405c3ee:	d10c      	bne.n	2405c40a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
2405c3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c3f2:	2b00      	cmp	r3, #0
2405c3f4:	d109      	bne.n	2405c40a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405c3f6:	4b16      	ldr	r3, [pc, #88]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c3f8:	681b      	ldr	r3, [r3, #0]
2405c3fa:	08db      	lsrs	r3, r3, #3
2405c3fc:	f003 0303 	and.w	r3, r3, #3
2405c400:	4a14      	ldr	r2, [pc, #80]	; (2405c454 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
2405c402:	fa22 f303 	lsr.w	r3, r2, r3
2405c406:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c408:	e01e      	b.n	2405c448 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405c40a:	4b11      	ldr	r3, [pc, #68]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c40c:	681b      	ldr	r3, [r3, #0]
2405c40e:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405c412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c416:	d106      	bne.n	2405c426 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
2405c418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c41a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405c41e:	d102      	bne.n	2405c426 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405c420:	4b0d      	ldr	r3, [pc, #52]	; (2405c458 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
2405c422:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c424:	e010      	b.n	2405c448 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405c426:	4b0a      	ldr	r3, [pc, #40]	; (2405c450 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405c428:	681b      	ldr	r3, [r3, #0]
2405c42a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405c42e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c432:	d106      	bne.n	2405c442 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
2405c434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c43a:	d102      	bne.n	2405c442 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405c43c:	4b07      	ldr	r3, [pc, #28]	; (2405c45c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
2405c43e:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c440:	e002      	b.n	2405c448 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405c442:	2300      	movs	r3, #0
2405c444:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2405c446:	e242      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405c448:	e241      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405c44a:	4b05      	ldr	r3, [pc, #20]	; (2405c460 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
2405c44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c44e:	e23e      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405c450:	58024400 	.word	0x58024400
2405c454:	03d09000 	.word	0x03d09000
2405c458:	003d0900 	.word	0x003d0900
2405c45c:	016e3600 	.word	0x016e3600
2405c460:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
2405c464:	2300      	movs	r3, #0
2405c466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c468:	e231      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
2405c46a:	e9d7 2300 	ldrd	r2, r3, [r7]
2405c46e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
2405c472:	430b      	orrs	r3, r1
2405c474:	f040 8085 	bne.w	2405c582 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
2405c478:	4b9c      	ldr	r3, [pc, #624]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c47a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c47c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
2405c480:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
2405c482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405c488:	d06b      	beq.n	2405c562 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
2405c48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c48c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405c490:	d874      	bhi.n	2405c57c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
2405c492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c494:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405c498:	d056      	beq.n	2405c548 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
2405c49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c49c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405c4a0:	d86c      	bhi.n	2405c57c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
2405c4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c4a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405c4a8:	d03b      	beq.n	2405c522 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
2405c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c4ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405c4b0:	d864      	bhi.n	2405c57c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
2405c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c4b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c4b8:	d021      	beq.n	2405c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
2405c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c4bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c4c0:	d85c      	bhi.n	2405c57c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
2405c4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c4c4:	2b00      	cmp	r3, #0
2405c4c6:	d004      	beq.n	2405c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
2405c4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c4ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405c4ce:	d004      	beq.n	2405c4da <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
2405c4d0:	e054      	b.n	2405c57c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
2405c4d2:	f7fe fb5f 	bl	2405ab94 <HAL_RCC_GetPCLK1Freq>
2405c4d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
2405c4d8:	e1f9      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405c4da:	4b84      	ldr	r3, [pc, #528]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c4dc:	681b      	ldr	r3, [r3, #0]
2405c4de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405c4e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405c4e6:	d107      	bne.n	2405c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405c4e8:	f107 0318 	add.w	r3, r7, #24
2405c4ec:	4618      	mov	r0, r3
2405c4ee:	f000 fa13 	bl	2405c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2405c4f2:	69fb      	ldr	r3, [r7, #28]
2405c4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c4f6:	e1ea      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c4f8:	2300      	movs	r3, #0
2405c4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c4fc:	e1e7      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405c4fe:	4b7b      	ldr	r3, [pc, #492]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c500:	681b      	ldr	r3, [r3, #0]
2405c502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405c506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c50a:	d107      	bne.n	2405c51c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405c50c:	f107 030c 	add.w	r3, r7, #12
2405c510:	4618      	mov	r0, r3
2405c512:	f000 fb55 	bl	2405cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
2405c516:	693b      	ldr	r3, [r7, #16]
2405c518:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c51a:	e1d8      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c51c:	2300      	movs	r3, #0
2405c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c520:	e1d5      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2405c522:	4b72      	ldr	r3, [pc, #456]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c524:	681b      	ldr	r3, [r3, #0]
2405c526:	f003 0304 	and.w	r3, r3, #4
2405c52a:	2b04      	cmp	r3, #4
2405c52c:	d109      	bne.n	2405c542 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405c52e:	4b6f      	ldr	r3, [pc, #444]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c530:	681b      	ldr	r3, [r3, #0]
2405c532:	08db      	lsrs	r3, r3, #3
2405c534:	f003 0303 	and.w	r3, r3, #3
2405c538:	4a6d      	ldr	r2, [pc, #436]	; (2405c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
2405c53a:	fa22 f303 	lsr.w	r3, r2, r3
2405c53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c540:	e1c5      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c542:	2300      	movs	r3, #0
2405c544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c546:	e1c2      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2405c548:	4b68      	ldr	r3, [pc, #416]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c54a:	681b      	ldr	r3, [r3, #0]
2405c54c:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405c550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c554:	d102      	bne.n	2405c55c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
2405c556:	4b67      	ldr	r3, [pc, #412]	; (2405c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
2405c558:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c55a:	e1b8      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c55c:	2300      	movs	r3, #0
2405c55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c560:	e1b5      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2405c562:	4b62      	ldr	r3, [pc, #392]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c564:	681b      	ldr	r3, [r3, #0]
2405c566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405c56a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c56e:	d102      	bne.n	2405c576 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
2405c570:	4b61      	ldr	r3, [pc, #388]	; (2405c6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
2405c572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c574:	e1ab      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c576:	2300      	movs	r3, #0
2405c578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c57a:	e1a8      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
2405c57c:	2300      	movs	r3, #0
2405c57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c580:	e1a5      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
2405c582:	e9d7 2300 	ldrd	r2, r3, [r7]
2405c586:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
2405c58a:	430b      	orrs	r3, r1
2405c58c:	d173      	bne.n	2405c676 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
2405c58e:	4b57      	ldr	r3, [pc, #348]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405c592:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
2405c596:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c59a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c59e:	d02f      	beq.n	2405c600 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
2405c5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c5a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c5a6:	d863      	bhi.n	2405c670 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
2405c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c5aa:	2b00      	cmp	r3, #0
2405c5ac:	d004      	beq.n	2405c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
2405c5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c5b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405c5b4:	d012      	beq.n	2405c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
2405c5b6:	e05b      	b.n	2405c670 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405c5b8:	4b4c      	ldr	r3, [pc, #304]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c5ba:	681b      	ldr	r3, [r3, #0]
2405c5bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405c5c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405c5c4:	d107      	bne.n	2405c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405c5c6:	f107 0318 	add.w	r3, r7, #24
2405c5ca:	4618      	mov	r0, r3
2405c5cc:	f000 f9a4 	bl	2405c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405c5d0:	69bb      	ldr	r3, [r7, #24]
2405c5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c5d4:	e17b      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c5d6:	2300      	movs	r3, #0
2405c5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c5da:	e178      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405c5dc:	4b43      	ldr	r3, [pc, #268]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c5de:	681b      	ldr	r3, [r3, #0]
2405c5e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405c5e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c5e8:	d107      	bne.n	2405c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405c5ea:	f107 030c 	add.w	r3, r7, #12
2405c5ee:	4618      	mov	r0, r3
2405c5f0:	f000 fae6 	bl	2405cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
2405c5f4:	697b      	ldr	r3, [r7, #20]
2405c5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c5f8:	e169      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c5fa:	2300      	movs	r3, #0
2405c5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c5fe:	e166      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405c600:	4b3a      	ldr	r3, [pc, #232]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405c604:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405c608:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405c60a:	4b38      	ldr	r3, [pc, #224]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c60c:	681b      	ldr	r3, [r3, #0]
2405c60e:	f003 0304 	and.w	r3, r3, #4
2405c612:	2b04      	cmp	r3, #4
2405c614:	d10c      	bne.n	2405c630 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
2405c616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c618:	2b00      	cmp	r3, #0
2405c61a:	d109      	bne.n	2405c630 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405c61c:	4b33      	ldr	r3, [pc, #204]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c61e:	681b      	ldr	r3, [r3, #0]
2405c620:	08db      	lsrs	r3, r3, #3
2405c622:	f003 0303 	and.w	r3, r3, #3
2405c626:	4a32      	ldr	r2, [pc, #200]	; (2405c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
2405c628:	fa22 f303 	lsr.w	r3, r2, r3
2405c62c:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c62e:	e01e      	b.n	2405c66e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405c630:	4b2e      	ldr	r3, [pc, #184]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c632:	681b      	ldr	r3, [r3, #0]
2405c634:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405c638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c63c:	d106      	bne.n	2405c64c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
2405c63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405c644:	d102      	bne.n	2405c64c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405c646:	4b2b      	ldr	r3, [pc, #172]	; (2405c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
2405c648:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c64a:	e010      	b.n	2405c66e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405c64c:	4b27      	ldr	r3, [pc, #156]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c64e:	681b      	ldr	r3, [r3, #0]
2405c650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405c654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c658:	d106      	bne.n	2405c668 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
2405c65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405c65c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c660:	d102      	bne.n	2405c668 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405c662:	4b25      	ldr	r3, [pc, #148]	; (2405c6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
2405c664:	63fb      	str	r3, [r7, #60]	; 0x3c
2405c666:	e002      	b.n	2405c66e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405c668:	2300      	movs	r3, #0
2405c66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2405c66c:	e12f      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405c66e:	e12e      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2405c670:	2300      	movs	r3, #0
2405c672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c674:	e12b      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
2405c676:	e9d7 2300 	ldrd	r2, r3, [r7]
2405c67a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
2405c67e:	430b      	orrs	r3, r1
2405c680:	d13c      	bne.n	2405c6fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
2405c682:	4b1a      	ldr	r3, [pc, #104]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405c686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405c68a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405c68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c68e:	2b00      	cmp	r3, #0
2405c690:	d004      	beq.n	2405c69c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
2405c692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405c698:	d012      	beq.n	2405c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
2405c69a:	e023      	b.n	2405c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405c69c:	4b13      	ldr	r3, [pc, #76]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c69e:	681b      	ldr	r3, [r3, #0]
2405c6a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405c6a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405c6a8:	d107      	bne.n	2405c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405c6aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405c6ae:	4618      	mov	r0, r3
2405c6b0:	f000 fbda 	bl	2405ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c6b8:	e109      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c6ba:	2300      	movs	r3, #0
2405c6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c6be:	e106      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405c6c0:	4b0a      	ldr	r3, [pc, #40]	; (2405c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405c6c2:	681b      	ldr	r3, [r3, #0]
2405c6c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405c6c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405c6cc:	d107      	bne.n	2405c6de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405c6ce:	f107 0318 	add.w	r3, r7, #24
2405c6d2:	4618      	mov	r0, r3
2405c6d4:	f000 f920 	bl	2405c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
2405c6d8:	6a3b      	ldr	r3, [r7, #32]
2405c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c6dc:	e0f7      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c6de:	2300      	movs	r3, #0
2405c6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c6e2:	e0f4      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2405c6e4:	2300      	movs	r3, #0
2405c6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c6e8:	e0f1      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405c6ea:	bf00      	nop
2405c6ec:	58024400 	.word	0x58024400
2405c6f0:	03d09000 	.word	0x03d09000
2405c6f4:	003d0900 	.word	0x003d0900
2405c6f8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
2405c6fc:	e9d7 2300 	ldrd	r2, r3, [r7]
2405c700:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
2405c704:	430b      	orrs	r3, r1
2405c706:	f040 8091 	bne.w	2405c82c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
2405c70a:	4b73      	ldr	r3, [pc, #460]	; (2405c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405c70c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405c70e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
2405c712:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405c714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c716:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405c71a:	f000 8081 	beq.w	2405c820 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
2405c71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c720:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405c724:	d87f      	bhi.n	2405c826 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405c72c:	d06b      	beq.n	2405c806 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
2405c72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405c734:	d877      	bhi.n	2405c826 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405c736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405c73c:	d056      	beq.n	2405c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
2405c73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405c744:	d86f      	bhi.n	2405c826 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405c746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c748:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405c74c:	d03b      	beq.n	2405c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
2405c74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c750:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405c754:	d867      	bhi.n	2405c826 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405c756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c75c:	d021      	beq.n	2405c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
2405c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c764:	d85f      	bhi.n	2405c826 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405c766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c768:	2b00      	cmp	r3, #0
2405c76a:	d004      	beq.n	2405c776 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
2405c76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c76e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405c772:	d004      	beq.n	2405c77e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
2405c774:	e057      	b.n	2405c826 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
2405c776:	f000 f8b9 	bl	2405c8ec <HAL_RCCEx_GetD3PCLK1Freq>
2405c77a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
2405c77c:	e0a7      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405c77e:	4b56      	ldr	r3, [pc, #344]	; (2405c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405c780:	681b      	ldr	r3, [r3, #0]
2405c782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405c786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405c78a:	d107      	bne.n	2405c79c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405c78c:	f107 0318 	add.w	r3, r7, #24
2405c790:	4618      	mov	r0, r3
2405c792:	f000 f8c1 	bl	2405c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2405c796:	69fb      	ldr	r3, [r7, #28]
2405c798:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c79a:	e098      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c79c:	2300      	movs	r3, #0
2405c79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c7a0:	e095      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405c7a2:	4b4d      	ldr	r3, [pc, #308]	; (2405c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405c7a4:	681b      	ldr	r3, [r3, #0]
2405c7a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405c7aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c7ae:	d107      	bne.n	2405c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405c7b0:	f107 030c 	add.w	r3, r7, #12
2405c7b4:	4618      	mov	r0, r3
2405c7b6:	f000 fa03 	bl	2405cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
2405c7ba:	693b      	ldr	r3, [r7, #16]
2405c7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c7be:	e086      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c7c0:	2300      	movs	r3, #0
2405c7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c7c4:	e083      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2405c7c6:	4b44      	ldr	r3, [pc, #272]	; (2405c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405c7c8:	681b      	ldr	r3, [r3, #0]
2405c7ca:	f003 0304 	and.w	r3, r3, #4
2405c7ce:	2b04      	cmp	r3, #4
2405c7d0:	d109      	bne.n	2405c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405c7d2:	4b41      	ldr	r3, [pc, #260]	; (2405c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405c7d4:	681b      	ldr	r3, [r3, #0]
2405c7d6:	08db      	lsrs	r3, r3, #3
2405c7d8:	f003 0303 	and.w	r3, r3, #3
2405c7dc:	4a3f      	ldr	r2, [pc, #252]	; (2405c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
2405c7de:	fa22 f303 	lsr.w	r3, r2, r3
2405c7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c7e4:	e073      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c7e6:	2300      	movs	r3, #0
2405c7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c7ea:	e070      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2405c7ec:	4b3a      	ldr	r3, [pc, #232]	; (2405c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405c7ee:	681b      	ldr	r3, [r3, #0]
2405c7f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405c7f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c7f8:	d102      	bne.n	2405c800 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
2405c7fa:	4b39      	ldr	r3, [pc, #228]	; (2405c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
2405c7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c7fe:	e066      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c800:	2300      	movs	r3, #0
2405c802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c804:	e063      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2405c806:	4b34      	ldr	r3, [pc, #208]	; (2405c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405c808:	681b      	ldr	r3, [r3, #0]
2405c80a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405c80e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c812:	d102      	bne.n	2405c81a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
2405c814:	4b33      	ldr	r3, [pc, #204]	; (2405c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
2405c816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c818:	e059      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c81a:	2300      	movs	r3, #0
2405c81c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c81e:	e056      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405c820:	4b31      	ldr	r3, [pc, #196]	; (2405c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
2405c822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c824:	e053      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
2405c826:	2300      	movs	r3, #0
2405c828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c82a:	e050      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
2405c82c:	e9d7 2300 	ldrd	r2, r3, [r7]
2405c830:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
2405c834:	430b      	orrs	r3, r1
2405c836:	d148      	bne.n	2405c8ca <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
2405c838:	4b27      	ldr	r3, [pc, #156]	; (2405c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405c83a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c83c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405c840:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405c842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c848:	d02a      	beq.n	2405c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
2405c84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c84c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c850:	d838      	bhi.n	2405c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
2405c852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c854:	2b00      	cmp	r3, #0
2405c856:	d004      	beq.n	2405c862 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
2405c858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c85a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405c85e:	d00d      	beq.n	2405c87c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
2405c860:	e030      	b.n	2405c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2405c862:	4b1d      	ldr	r3, [pc, #116]	; (2405c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405c864:	681b      	ldr	r3, [r3, #0]
2405c866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405c86a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c86e:	d102      	bne.n	2405c876 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
2405c870:	4b1c      	ldr	r3, [pc, #112]	; (2405c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
2405c872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c874:	e02b      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c876:	2300      	movs	r3, #0
2405c878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c87a:	e028      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405c87c:	4b16      	ldr	r3, [pc, #88]	; (2405c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405c87e:	681b      	ldr	r3, [r3, #0]
2405c880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405c884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405c888:	d107      	bne.n	2405c89a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405c88a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405c88e:	4618      	mov	r0, r3
2405c890:	f000 faea 	bl	2405ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405c896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c898:	e019      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c89a:	2300      	movs	r3, #0
2405c89c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c89e:	e016      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405c8a0:	4b0d      	ldr	r3, [pc, #52]	; (2405c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405c8a2:	681b      	ldr	r3, [r3, #0]
2405c8a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405c8a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405c8ac:	d107      	bne.n	2405c8be <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405c8ae:	f107 0318 	add.w	r3, r7, #24
2405c8b2:	4618      	mov	r0, r3
2405c8b4:	f000 f830 	bl	2405c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2405c8b8:	69fb      	ldr	r3, [r7, #28]
2405c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405c8bc:	e007      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405c8be:	2300      	movs	r3, #0
2405c8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c8c2:	e004      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
2405c8c4:	2300      	movs	r3, #0
2405c8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405c8c8:	e001      	b.n	2405c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
2405c8ca:	2300      	movs	r3, #0
2405c8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
2405c8ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
2405c8d0:	4618      	mov	r0, r3
2405c8d2:	3740      	adds	r7, #64	; 0x40
2405c8d4:	46bd      	mov	sp, r7
2405c8d6:	bd80      	pop	{r7, pc}
2405c8d8:	58024400 	.word	0x58024400
2405c8dc:	03d09000 	.word	0x03d09000
2405c8e0:	003d0900 	.word	0x003d0900
2405c8e4:	016e3600 	.word	0x016e3600
2405c8e8:	00bb8000 	.word	0x00bb8000

2405c8ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
2405c8ec:	b580      	push	{r7, lr}
2405c8ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
2405c8f0:	f7fe f920 	bl	2405ab34 <HAL_RCC_GetHCLKFreq>
2405c8f4:	4602      	mov	r2, r0
2405c8f6:	4b06      	ldr	r3, [pc, #24]	; (2405c910 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
2405c8f8:	6a1b      	ldr	r3, [r3, #32]
2405c8fa:	091b      	lsrs	r3, r3, #4
2405c8fc:	f003 0307 	and.w	r3, r3, #7
2405c900:	4904      	ldr	r1, [pc, #16]	; (2405c914 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
2405c902:	5ccb      	ldrb	r3, [r1, r3]
2405c904:	f003 031f 	and.w	r3, r3, #31
2405c908:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
2405c90c:	4618      	mov	r0, r3
2405c90e:	bd80      	pop	{r7, pc}
2405c910:	58024400 	.word	0x58024400
2405c914:	240615f0 	.word	0x240615f0

2405c918 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
2405c918:	b480      	push	{r7}
2405c91a:	b089      	sub	sp, #36	; 0x24
2405c91c:	af00      	add	r7, sp, #0
2405c91e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405c920:	4ba1      	ldr	r3, [pc, #644]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405c924:	f003 0303 	and.w	r3, r3, #3
2405c928:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
2405c92a:	4b9f      	ldr	r3, [pc, #636]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405c92e:	0b1b      	lsrs	r3, r3, #12
2405c930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405c934:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
2405c936:	4b9c      	ldr	r3, [pc, #624]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c93a:	091b      	lsrs	r3, r3, #4
2405c93c:	f003 0301 	and.w	r3, r3, #1
2405c940:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2405c942:	4b99      	ldr	r3, [pc, #612]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405c946:	08db      	lsrs	r3, r3, #3
2405c948:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405c94c:	693a      	ldr	r2, [r7, #16]
2405c94e:	fb02 f303 	mul.w	r3, r2, r3
2405c952:	ee07 3a90 	vmov	s15, r3
2405c956:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c95a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
2405c95e:	697b      	ldr	r3, [r7, #20]
2405c960:	2b00      	cmp	r3, #0
2405c962:	f000 8111 	beq.w	2405cb88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
2405c966:	69bb      	ldr	r3, [r7, #24]
2405c968:	2b02      	cmp	r3, #2
2405c96a:	f000 8083 	beq.w	2405ca74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
2405c96e:	69bb      	ldr	r3, [r7, #24]
2405c970:	2b02      	cmp	r3, #2
2405c972:	f200 80a1 	bhi.w	2405cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
2405c976:	69bb      	ldr	r3, [r7, #24]
2405c978:	2b00      	cmp	r3, #0
2405c97a:	d003      	beq.n	2405c984 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
2405c97c:	69bb      	ldr	r3, [r7, #24]
2405c97e:	2b01      	cmp	r3, #1
2405c980:	d056      	beq.n	2405ca30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
2405c982:	e099      	b.n	2405cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405c984:	4b88      	ldr	r3, [pc, #544]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c986:	681b      	ldr	r3, [r3, #0]
2405c988:	f003 0320 	and.w	r3, r3, #32
2405c98c:	2b00      	cmp	r3, #0
2405c98e:	d02d      	beq.n	2405c9ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405c990:	4b85      	ldr	r3, [pc, #532]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c992:	681b      	ldr	r3, [r3, #0]
2405c994:	08db      	lsrs	r3, r3, #3
2405c996:	f003 0303 	and.w	r3, r3, #3
2405c99a:	4a84      	ldr	r2, [pc, #528]	; (2405cbac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
2405c99c:	fa22 f303 	lsr.w	r3, r2, r3
2405c9a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405c9a2:	68bb      	ldr	r3, [r7, #8]
2405c9a4:	ee07 3a90 	vmov	s15, r3
2405c9a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c9ac:	697b      	ldr	r3, [r7, #20]
2405c9ae:	ee07 3a90 	vmov	s15, r3
2405c9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c9ba:	4b7b      	ldr	r3, [pc, #492]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405c9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c9c2:	ee07 3a90 	vmov	s15, r3
2405c9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c9ca:	ed97 6a03 	vldr	s12, [r7, #12]
2405c9ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 2405cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405c9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c9e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
2405c9ea:	e087      	b.n	2405cafc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405c9ec:	697b      	ldr	r3, [r7, #20]
2405c9ee:	ee07 3a90 	vmov	s15, r3
2405c9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c9f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 2405cbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
2405c9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c9fe:	4b6a      	ldr	r3, [pc, #424]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405ca00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405ca02:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405ca06:	ee07 3a90 	vmov	s15, r3
2405ca0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405ca0e:	ed97 6a03 	vldr	s12, [r7, #12]
2405ca12:	eddf 5a67 	vldr	s11, [pc, #412]	; 2405cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405ca16:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405ca1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405ca1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405ca22:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405ca26:	ee67 7a27 	vmul.f32	s15, s14, s15
2405ca2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405ca2e:	e065      	b.n	2405cafc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405ca30:	697b      	ldr	r3, [r7, #20]
2405ca32:	ee07 3a90 	vmov	s15, r3
2405ca36:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405ca3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 2405cbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
2405ca3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405ca42:	4b59      	ldr	r3, [pc, #356]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405ca44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405ca46:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405ca4a:	ee07 3a90 	vmov	s15, r3
2405ca4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405ca52:	ed97 6a03 	vldr	s12, [r7, #12]
2405ca56:	eddf 5a56 	vldr	s11, [pc, #344]	; 2405cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405ca5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405ca5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405ca62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405ca66:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405ca6a:	ee67 7a27 	vmul.f32	s15, s14, s15
2405ca6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405ca72:	e043      	b.n	2405cafc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405ca74:	697b      	ldr	r3, [r7, #20]
2405ca76:	ee07 3a90 	vmov	s15, r3
2405ca7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405ca7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2405cbbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
2405ca82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405ca86:	4b48      	ldr	r3, [pc, #288]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405ca88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405ca8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405ca8e:	ee07 3a90 	vmov	s15, r3
2405ca92:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405ca96:	ed97 6a03 	vldr	s12, [r7, #12]
2405ca9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 2405cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405ca9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405caa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405caa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405caaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405caae:	ee67 7a27 	vmul.f32	s15, s14, s15
2405cab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405cab6:	e021      	b.n	2405cafc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405cab8:	697b      	ldr	r3, [r7, #20]
2405caba:	ee07 3a90 	vmov	s15, r3
2405cabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cac2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2405cbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
2405cac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405caca:	4b37      	ldr	r3, [pc, #220]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405cacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405cace:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405cad2:	ee07 3a90 	vmov	s15, r3
2405cad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405cada:	ed97 6a03 	vldr	s12, [r7, #12]
2405cade:	eddf 5a34 	vldr	s11, [pc, #208]	; 2405cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405cae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405cae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405caea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405caee:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405caf2:	ee67 7a27 	vmul.f32	s15, s14, s15
2405caf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405cafa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
2405cafc:	4b2a      	ldr	r3, [pc, #168]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405cafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405cb00:	0a5b      	lsrs	r3, r3, #9
2405cb02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405cb06:	ee07 3a90 	vmov	s15, r3
2405cb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cb0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405cb12:	ee37 7a87 	vadd.f32	s14, s15, s14
2405cb16:	edd7 6a07 	vldr	s13, [r7, #28]
2405cb1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405cb1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405cb22:	ee17 2a90 	vmov	r2, s15
2405cb26:	687b      	ldr	r3, [r7, #4]
2405cb28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
2405cb2a:	4b1f      	ldr	r3, [pc, #124]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405cb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405cb2e:	0c1b      	lsrs	r3, r3, #16
2405cb30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405cb34:	ee07 3a90 	vmov	s15, r3
2405cb38:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cb3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405cb40:	ee37 7a87 	vadd.f32	s14, s15, s14
2405cb44:	edd7 6a07 	vldr	s13, [r7, #28]
2405cb48:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405cb4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405cb50:	ee17 2a90 	vmov	r2, s15
2405cb54:	687b      	ldr	r3, [r7, #4]
2405cb56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
2405cb58:	4b13      	ldr	r3, [pc, #76]	; (2405cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405cb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405cb5c:	0e1b      	lsrs	r3, r3, #24
2405cb5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405cb62:	ee07 3a90 	vmov	s15, r3
2405cb66:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cb6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405cb6e:	ee37 7a87 	vadd.f32	s14, s15, s14
2405cb72:	edd7 6a07 	vldr	s13, [r7, #28]
2405cb76:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405cb7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405cb7e:	ee17 2a90 	vmov	r2, s15
2405cb82:	687b      	ldr	r3, [r7, #4]
2405cb84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
2405cb86:	e008      	b.n	2405cb9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
2405cb88:	687b      	ldr	r3, [r7, #4]
2405cb8a:	2200      	movs	r2, #0
2405cb8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
2405cb8e:	687b      	ldr	r3, [r7, #4]
2405cb90:	2200      	movs	r2, #0
2405cb92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
2405cb94:	687b      	ldr	r3, [r7, #4]
2405cb96:	2200      	movs	r2, #0
2405cb98:	609a      	str	r2, [r3, #8]
}
2405cb9a:	bf00      	nop
2405cb9c:	3724      	adds	r7, #36	; 0x24
2405cb9e:	46bd      	mov	sp, r7
2405cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
2405cba4:	4770      	bx	lr
2405cba6:	bf00      	nop
2405cba8:	58024400 	.word	0x58024400
2405cbac:	03d09000 	.word	0x03d09000
2405cbb0:	46000000 	.word	0x46000000
2405cbb4:	4c742400 	.word	0x4c742400
2405cbb8:	4a742400 	.word	0x4a742400
2405cbbc:	4bb71b00 	.word	0x4bb71b00

2405cbc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
2405cbc0:	b480      	push	{r7}
2405cbc2:	b089      	sub	sp, #36	; 0x24
2405cbc4:	af00      	add	r7, sp, #0
2405cbc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405cbc8:	4ba1      	ldr	r3, [pc, #644]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405cbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405cbcc:	f003 0303 	and.w	r3, r3, #3
2405cbd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2405cbd2:	4b9f      	ldr	r3, [pc, #636]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405cbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405cbd6:	0d1b      	lsrs	r3, r3, #20
2405cbd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405cbdc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2405cbde:	4b9c      	ldr	r3, [pc, #624]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405cbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cbe2:	0a1b      	lsrs	r3, r3, #8
2405cbe4:	f003 0301 	and.w	r3, r3, #1
2405cbe8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2405cbea:	4b99      	ldr	r3, [pc, #612]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405cbec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405cbee:	08db      	lsrs	r3, r3, #3
2405cbf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405cbf4:	693a      	ldr	r2, [r7, #16]
2405cbf6:	fb02 f303 	mul.w	r3, r2, r3
2405cbfa:	ee07 3a90 	vmov	s15, r3
2405cbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cc02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
2405cc06:	697b      	ldr	r3, [r7, #20]
2405cc08:	2b00      	cmp	r3, #0
2405cc0a:	f000 8111 	beq.w	2405ce30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
2405cc0e:	69bb      	ldr	r3, [r7, #24]
2405cc10:	2b02      	cmp	r3, #2
2405cc12:	f000 8083 	beq.w	2405cd1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
2405cc16:	69bb      	ldr	r3, [r7, #24]
2405cc18:	2b02      	cmp	r3, #2
2405cc1a:	f200 80a1 	bhi.w	2405cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
2405cc1e:	69bb      	ldr	r3, [r7, #24]
2405cc20:	2b00      	cmp	r3, #0
2405cc22:	d003      	beq.n	2405cc2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
2405cc24:	69bb      	ldr	r3, [r7, #24]
2405cc26:	2b01      	cmp	r3, #1
2405cc28:	d056      	beq.n	2405ccd8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
2405cc2a:	e099      	b.n	2405cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405cc2c:	4b88      	ldr	r3, [pc, #544]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405cc2e:	681b      	ldr	r3, [r3, #0]
2405cc30:	f003 0320 	and.w	r3, r3, #32
2405cc34:	2b00      	cmp	r3, #0
2405cc36:	d02d      	beq.n	2405cc94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405cc38:	4b85      	ldr	r3, [pc, #532]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405cc3a:	681b      	ldr	r3, [r3, #0]
2405cc3c:	08db      	lsrs	r3, r3, #3
2405cc3e:	f003 0303 	and.w	r3, r3, #3
2405cc42:	4a84      	ldr	r2, [pc, #528]	; (2405ce54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
2405cc44:	fa22 f303 	lsr.w	r3, r2, r3
2405cc48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405cc4a:	68bb      	ldr	r3, [r7, #8]
2405cc4c:	ee07 3a90 	vmov	s15, r3
2405cc50:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405cc54:	697b      	ldr	r3, [r7, #20]
2405cc56:	ee07 3a90 	vmov	s15, r3
2405cc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cc5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405cc62:	4b7b      	ldr	r3, [pc, #492]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405cc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405cc66:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405cc6a:	ee07 3a90 	vmov	s15, r3
2405cc6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405cc72:	ed97 6a03 	vldr	s12, [r7, #12]
2405cc76:	eddf 5a78 	vldr	s11, [pc, #480]	; 2405ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405cc7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405cc7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405cc82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405cc86:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405cc8a:	ee67 7a27 	vmul.f32	s15, s14, s15
2405cc8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
2405cc92:	e087      	b.n	2405cda4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405cc94:	697b      	ldr	r3, [r7, #20]
2405cc96:	ee07 3a90 	vmov	s15, r3
2405cc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cc9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 2405ce5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
2405cca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405cca6:	4b6a      	ldr	r3, [pc, #424]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405cca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405ccaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405ccae:	ee07 3a90 	vmov	s15, r3
2405ccb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405ccb6:	ed97 6a03 	vldr	s12, [r7, #12]
2405ccba:	eddf 5a67 	vldr	s11, [pc, #412]	; 2405ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405ccbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405ccc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405ccc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405ccca:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405ccce:	ee67 7a27 	vmul.f32	s15, s14, s15
2405ccd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405ccd6:	e065      	b.n	2405cda4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405ccd8:	697b      	ldr	r3, [r7, #20]
2405ccda:	ee07 3a90 	vmov	s15, r3
2405ccde:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cce2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 2405ce60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
2405cce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405ccea:	4b59      	ldr	r3, [pc, #356]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405ccec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405ccee:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405ccf2:	ee07 3a90 	vmov	s15, r3
2405ccf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405ccfa:	ed97 6a03 	vldr	s12, [r7, #12]
2405ccfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 2405ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405cd02:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405cd06:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405cd0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405cd0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405cd12:	ee67 7a27 	vmul.f32	s15, s14, s15
2405cd16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405cd1a:	e043      	b.n	2405cda4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405cd1c:	697b      	ldr	r3, [r7, #20]
2405cd1e:	ee07 3a90 	vmov	s15, r3
2405cd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cd26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2405ce64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
2405cd2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405cd2e:	4b48      	ldr	r3, [pc, #288]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405cd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405cd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405cd36:	ee07 3a90 	vmov	s15, r3
2405cd3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405cd3e:	ed97 6a03 	vldr	s12, [r7, #12]
2405cd42:	eddf 5a45 	vldr	s11, [pc, #276]	; 2405ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405cd46:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405cd4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405cd4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405cd52:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405cd56:	ee67 7a27 	vmul.f32	s15, s14, s15
2405cd5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405cd5e:	e021      	b.n	2405cda4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405cd60:	697b      	ldr	r3, [r7, #20]
2405cd62:	ee07 3a90 	vmov	s15, r3
2405cd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cd6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2405ce60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
2405cd6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405cd72:	4b37      	ldr	r3, [pc, #220]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405cd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405cd76:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405cd7a:	ee07 3a90 	vmov	s15, r3
2405cd7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405cd82:	ed97 6a03 	vldr	s12, [r7, #12]
2405cd86:	eddf 5a34 	vldr	s11, [pc, #208]	; 2405ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405cd8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405cd8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405cd92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405cd96:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405cd9a:	ee67 7a27 	vmul.f32	s15, s14, s15
2405cd9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405cda2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
2405cda4:	4b2a      	ldr	r3, [pc, #168]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405cda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405cda8:	0a5b      	lsrs	r3, r3, #9
2405cdaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405cdae:	ee07 3a90 	vmov	s15, r3
2405cdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cdb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405cdba:	ee37 7a87 	vadd.f32	s14, s15, s14
2405cdbe:	edd7 6a07 	vldr	s13, [r7, #28]
2405cdc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405cdc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405cdca:	ee17 2a90 	vmov	r2, s15
2405cdce:	687b      	ldr	r3, [r7, #4]
2405cdd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
2405cdd2:	4b1f      	ldr	r3, [pc, #124]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405cdd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405cdd6:	0c1b      	lsrs	r3, r3, #16
2405cdd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405cddc:	ee07 3a90 	vmov	s15, r3
2405cde0:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cde4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405cde8:	ee37 7a87 	vadd.f32	s14, s15, s14
2405cdec:	edd7 6a07 	vldr	s13, [r7, #28]
2405cdf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405cdf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405cdf8:	ee17 2a90 	vmov	r2, s15
2405cdfc:	687b      	ldr	r3, [r7, #4]
2405cdfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
2405ce00:	4b13      	ldr	r3, [pc, #76]	; (2405ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405ce02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405ce04:	0e1b      	lsrs	r3, r3, #24
2405ce06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405ce0a:	ee07 3a90 	vmov	s15, r3
2405ce0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405ce12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405ce16:	ee37 7a87 	vadd.f32	s14, s15, s14
2405ce1a:	edd7 6a07 	vldr	s13, [r7, #28]
2405ce1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405ce22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405ce26:	ee17 2a90 	vmov	r2, s15
2405ce2a:	687b      	ldr	r3, [r7, #4]
2405ce2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
2405ce2e:	e008      	b.n	2405ce42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
2405ce30:	687b      	ldr	r3, [r7, #4]
2405ce32:	2200      	movs	r2, #0
2405ce34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
2405ce36:	687b      	ldr	r3, [r7, #4]
2405ce38:	2200      	movs	r2, #0
2405ce3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
2405ce3c:	687b      	ldr	r3, [r7, #4]
2405ce3e:	2200      	movs	r2, #0
2405ce40:	609a      	str	r2, [r3, #8]
}
2405ce42:	bf00      	nop
2405ce44:	3724      	adds	r7, #36	; 0x24
2405ce46:	46bd      	mov	sp, r7
2405ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
2405ce4c:	4770      	bx	lr
2405ce4e:	bf00      	nop
2405ce50:	58024400 	.word	0x58024400
2405ce54:	03d09000 	.word	0x03d09000
2405ce58:	46000000 	.word	0x46000000
2405ce5c:	4c742400 	.word	0x4c742400
2405ce60:	4a742400 	.word	0x4a742400
2405ce64:	4bb71b00 	.word	0x4bb71b00

2405ce68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
2405ce68:	b480      	push	{r7}
2405ce6a:	b089      	sub	sp, #36	; 0x24
2405ce6c:	af00      	add	r7, sp, #0
2405ce6e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405ce70:	4ba0      	ldr	r3, [pc, #640]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405ce72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405ce74:	f003 0303 	and.w	r3, r3, #3
2405ce78:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
2405ce7a:	4b9e      	ldr	r3, [pc, #632]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405ce7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405ce7e:	091b      	lsrs	r3, r3, #4
2405ce80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405ce84:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2405ce86:	4b9b      	ldr	r3, [pc, #620]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405ce88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ce8a:	f003 0301 	and.w	r3, r3, #1
2405ce8e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2405ce90:	4b98      	ldr	r3, [pc, #608]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405ce92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405ce94:	08db      	lsrs	r3, r3, #3
2405ce96:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405ce9a:	693a      	ldr	r2, [r7, #16]
2405ce9c:	fb02 f303 	mul.w	r3, r2, r3
2405cea0:	ee07 3a90 	vmov	s15, r3
2405cea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cea8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
2405ceac:	697b      	ldr	r3, [r7, #20]
2405ceae:	2b00      	cmp	r3, #0
2405ceb0:	f000 8111 	beq.w	2405d0d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
2405ceb4:	69bb      	ldr	r3, [r7, #24]
2405ceb6:	2b02      	cmp	r3, #2
2405ceb8:	f000 8083 	beq.w	2405cfc2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
2405cebc:	69bb      	ldr	r3, [r7, #24]
2405cebe:	2b02      	cmp	r3, #2
2405cec0:	f200 80a1 	bhi.w	2405d006 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
2405cec4:	69bb      	ldr	r3, [r7, #24]
2405cec6:	2b00      	cmp	r3, #0
2405cec8:	d003      	beq.n	2405ced2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
2405ceca:	69bb      	ldr	r3, [r7, #24]
2405cecc:	2b01      	cmp	r3, #1
2405cece:	d056      	beq.n	2405cf7e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
2405ced0:	e099      	b.n	2405d006 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405ced2:	4b88      	ldr	r3, [pc, #544]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405ced4:	681b      	ldr	r3, [r3, #0]
2405ced6:	f003 0320 	and.w	r3, r3, #32
2405ceda:	2b00      	cmp	r3, #0
2405cedc:	d02d      	beq.n	2405cf3a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405cede:	4b85      	ldr	r3, [pc, #532]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405cee0:	681b      	ldr	r3, [r3, #0]
2405cee2:	08db      	lsrs	r3, r3, #3
2405cee4:	f003 0303 	and.w	r3, r3, #3
2405cee8:	4a83      	ldr	r2, [pc, #524]	; (2405d0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
2405ceea:	fa22 f303 	lsr.w	r3, r2, r3
2405ceee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405cef0:	68bb      	ldr	r3, [r7, #8]
2405cef2:	ee07 3a90 	vmov	s15, r3
2405cef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405cefa:	697b      	ldr	r3, [r7, #20]
2405cefc:	ee07 3a90 	vmov	s15, r3
2405cf00:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cf04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405cf08:	4b7a      	ldr	r3, [pc, #488]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405cf0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405cf0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405cf10:	ee07 3a90 	vmov	s15, r3
2405cf14:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405cf18:	ed97 6a03 	vldr	s12, [r7, #12]
2405cf1c:	eddf 5a77 	vldr	s11, [pc, #476]	; 2405d0fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405cf20:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405cf24:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405cf28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405cf2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405cf30:	ee67 7a27 	vmul.f32	s15, s14, s15
2405cf34:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
2405cf38:	e087      	b.n	2405d04a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405cf3a:	697b      	ldr	r3, [r7, #20]
2405cf3c:	ee07 3a90 	vmov	s15, r3
2405cf40:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cf44:	eddf 6a6e 	vldr	s13, [pc, #440]	; 2405d100 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
2405cf48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405cf4c:	4b69      	ldr	r3, [pc, #420]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405cf4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405cf50:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405cf54:	ee07 3a90 	vmov	s15, r3
2405cf58:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405cf5c:	ed97 6a03 	vldr	s12, [r7, #12]
2405cf60:	eddf 5a66 	vldr	s11, [pc, #408]	; 2405d0fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405cf64:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405cf68:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405cf6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405cf70:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405cf74:	ee67 7a27 	vmul.f32	s15, s14, s15
2405cf78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405cf7c:	e065      	b.n	2405d04a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405cf7e:	697b      	ldr	r3, [r7, #20]
2405cf80:	ee07 3a90 	vmov	s15, r3
2405cf84:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cf88:	eddf 6a5e 	vldr	s13, [pc, #376]	; 2405d104 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
2405cf8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405cf90:	4b58      	ldr	r3, [pc, #352]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405cf92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405cf94:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405cf98:	ee07 3a90 	vmov	s15, r3
2405cf9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405cfa0:	ed97 6a03 	vldr	s12, [r7, #12]
2405cfa4:	eddf 5a55 	vldr	s11, [pc, #340]	; 2405d0fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405cfa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405cfac:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405cfb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405cfb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405cfb8:	ee67 7a27 	vmul.f32	s15, s14, s15
2405cfbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405cfc0:	e043      	b.n	2405d04a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405cfc2:	697b      	ldr	r3, [r7, #20]
2405cfc4:	ee07 3a90 	vmov	s15, r3
2405cfc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405cfcc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 2405d108 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
2405cfd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405cfd4:	4b47      	ldr	r3, [pc, #284]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405cfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405cfd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405cfdc:	ee07 3a90 	vmov	s15, r3
2405cfe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405cfe4:	ed97 6a03 	vldr	s12, [r7, #12]
2405cfe8:	eddf 5a44 	vldr	s11, [pc, #272]	; 2405d0fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405cfec:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405cff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405cff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405cff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405cffc:	ee67 7a27 	vmul.f32	s15, s14, s15
2405d000:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405d004:	e021      	b.n	2405d04a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405d006:	697b      	ldr	r3, [r7, #20]
2405d008:	ee07 3a90 	vmov	s15, r3
2405d00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405d010:	eddf 6a3b 	vldr	s13, [pc, #236]	; 2405d100 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
2405d014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405d018:	4b36      	ldr	r3, [pc, #216]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405d01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405d01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405d020:	ee07 3a90 	vmov	s15, r3
2405d024:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405d028:	ed97 6a03 	vldr	s12, [r7, #12]
2405d02c:	eddf 5a33 	vldr	s11, [pc, #204]	; 2405d0fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405d030:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405d034:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405d038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405d03c:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405d040:	ee67 7a27 	vmul.f32	s15, s14, s15
2405d044:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405d048:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
2405d04a:	4b2a      	ldr	r3, [pc, #168]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405d04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405d04e:	0a5b      	lsrs	r3, r3, #9
2405d050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405d054:	ee07 3a90 	vmov	s15, r3
2405d058:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405d05c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405d060:	ee37 7a87 	vadd.f32	s14, s15, s14
2405d064:	edd7 6a07 	vldr	s13, [r7, #28]
2405d068:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405d06c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405d070:	ee17 2a90 	vmov	r2, s15
2405d074:	687b      	ldr	r3, [r7, #4]
2405d076:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
2405d078:	4b1e      	ldr	r3, [pc, #120]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405d07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405d07c:	0c1b      	lsrs	r3, r3, #16
2405d07e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405d082:	ee07 3a90 	vmov	s15, r3
2405d086:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405d08a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405d08e:	ee37 7a87 	vadd.f32	s14, s15, s14
2405d092:	edd7 6a07 	vldr	s13, [r7, #28]
2405d096:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405d09a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405d09e:	ee17 2a90 	vmov	r2, s15
2405d0a2:	687b      	ldr	r3, [r7, #4]
2405d0a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
2405d0a6:	4b13      	ldr	r3, [pc, #76]	; (2405d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405d0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405d0aa:	0e1b      	lsrs	r3, r3, #24
2405d0ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405d0b0:	ee07 3a90 	vmov	s15, r3
2405d0b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405d0b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405d0bc:	ee37 7a87 	vadd.f32	s14, s15, s14
2405d0c0:	edd7 6a07 	vldr	s13, [r7, #28]
2405d0c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405d0c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405d0cc:	ee17 2a90 	vmov	r2, s15
2405d0d0:	687b      	ldr	r3, [r7, #4]
2405d0d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
2405d0d4:	e008      	b.n	2405d0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
2405d0d6:	687b      	ldr	r3, [r7, #4]
2405d0d8:	2200      	movs	r2, #0
2405d0da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
2405d0dc:	687b      	ldr	r3, [r7, #4]
2405d0de:	2200      	movs	r2, #0
2405d0e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
2405d0e2:	687b      	ldr	r3, [r7, #4]
2405d0e4:	2200      	movs	r2, #0
2405d0e6:	609a      	str	r2, [r3, #8]
}
2405d0e8:	bf00      	nop
2405d0ea:	3724      	adds	r7, #36	; 0x24
2405d0ec:	46bd      	mov	sp, r7
2405d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d0f2:	4770      	bx	lr
2405d0f4:	58024400 	.word	0x58024400
2405d0f8:	03d09000 	.word	0x03d09000
2405d0fc:	46000000 	.word	0x46000000
2405d100:	4c742400 	.word	0x4c742400
2405d104:	4a742400 	.word	0x4a742400
2405d108:	4bb71b00 	.word	0x4bb71b00

2405d10c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
2405d10c:	b580      	push	{r7, lr}
2405d10e:	b084      	sub	sp, #16
2405d110:	af00      	add	r7, sp, #0
2405d112:	6078      	str	r0, [r7, #4]
2405d114:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2405d116:	2300      	movs	r3, #0
2405d118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2405d11a:	4b53      	ldr	r3, [pc, #332]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405d11e:	f003 0303 	and.w	r3, r3, #3
2405d122:	2b03      	cmp	r3, #3
2405d124:	d101      	bne.n	2405d12a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
2405d126:	2301      	movs	r3, #1
2405d128:	e099      	b.n	2405d25e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
2405d12a:	4b4f      	ldr	r3, [pc, #316]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d12c:	681b      	ldr	r3, [r3, #0]
2405d12e:	4a4e      	ldr	r2, [pc, #312]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d130:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2405d134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405d136:	f7f5 fded 	bl	24052d14 <HAL_GetTick>
2405d13a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2405d13c:	e008      	b.n	2405d150 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2405d13e:	f7f5 fde9 	bl	24052d14 <HAL_GetTick>
2405d142:	4602      	mov	r2, r0
2405d144:	68bb      	ldr	r3, [r7, #8]
2405d146:	1ad3      	subs	r3, r2, r3
2405d148:	2b02      	cmp	r3, #2
2405d14a:	d901      	bls.n	2405d150 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
2405d14c:	2303      	movs	r3, #3
2405d14e:	e086      	b.n	2405d25e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2405d150:	4b45      	ldr	r3, [pc, #276]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d152:	681b      	ldr	r3, [r3, #0]
2405d154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405d158:	2b00      	cmp	r3, #0
2405d15a:	d1f0      	bne.n	2405d13e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
2405d15c:	4b42      	ldr	r3, [pc, #264]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405d160:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
2405d164:	687b      	ldr	r3, [r7, #4]
2405d166:	681b      	ldr	r3, [r3, #0]
2405d168:	031b      	lsls	r3, r3, #12
2405d16a:	493f      	ldr	r1, [pc, #252]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d16c:	4313      	orrs	r3, r2
2405d16e:	628b      	str	r3, [r1, #40]	; 0x28
2405d170:	687b      	ldr	r3, [r7, #4]
2405d172:	685b      	ldr	r3, [r3, #4]
2405d174:	3b01      	subs	r3, #1
2405d176:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405d17a:	687b      	ldr	r3, [r7, #4]
2405d17c:	689b      	ldr	r3, [r3, #8]
2405d17e:	3b01      	subs	r3, #1
2405d180:	025b      	lsls	r3, r3, #9
2405d182:	b29b      	uxth	r3, r3
2405d184:	431a      	orrs	r2, r3
2405d186:	687b      	ldr	r3, [r7, #4]
2405d188:	68db      	ldr	r3, [r3, #12]
2405d18a:	3b01      	subs	r3, #1
2405d18c:	041b      	lsls	r3, r3, #16
2405d18e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2405d192:	431a      	orrs	r2, r3
2405d194:	687b      	ldr	r3, [r7, #4]
2405d196:	691b      	ldr	r3, [r3, #16]
2405d198:	3b01      	subs	r3, #1
2405d19a:	061b      	lsls	r3, r3, #24
2405d19c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2405d1a0:	4931      	ldr	r1, [pc, #196]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d1a2:	4313      	orrs	r3, r2
2405d1a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
2405d1a6:	4b30      	ldr	r3, [pc, #192]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d1aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
2405d1ae:	687b      	ldr	r3, [r7, #4]
2405d1b0:	695b      	ldr	r3, [r3, #20]
2405d1b2:	492d      	ldr	r1, [pc, #180]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d1b4:	4313      	orrs	r3, r2
2405d1b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
2405d1b8:	4b2b      	ldr	r3, [pc, #172]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d1bc:	f023 0220 	bic.w	r2, r3, #32
2405d1c0:	687b      	ldr	r3, [r7, #4]
2405d1c2:	699b      	ldr	r3, [r3, #24]
2405d1c4:	4928      	ldr	r1, [pc, #160]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d1c6:	4313      	orrs	r3, r2
2405d1c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
2405d1ca:	4b27      	ldr	r3, [pc, #156]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d1ce:	4a26      	ldr	r2, [pc, #152]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d1d0:	f023 0310 	bic.w	r3, r3, #16
2405d1d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
2405d1d6:	4b24      	ldr	r3, [pc, #144]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d1d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2405d1da:	4b24      	ldr	r3, [pc, #144]	; (2405d26c <RCCEx_PLL2_Config+0x160>)
2405d1dc:	4013      	ands	r3, r2
2405d1de:	687a      	ldr	r2, [r7, #4]
2405d1e0:	69d2      	ldr	r2, [r2, #28]
2405d1e2:	00d2      	lsls	r2, r2, #3
2405d1e4:	4920      	ldr	r1, [pc, #128]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d1e6:	4313      	orrs	r3, r2
2405d1e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
2405d1ea:	4b1f      	ldr	r3, [pc, #124]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d1ee:	4a1e      	ldr	r2, [pc, #120]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d1f0:	f043 0310 	orr.w	r3, r3, #16
2405d1f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
2405d1f6:	683b      	ldr	r3, [r7, #0]
2405d1f8:	2b00      	cmp	r3, #0
2405d1fa:	d106      	bne.n	2405d20a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
2405d1fc:	4b1a      	ldr	r3, [pc, #104]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d200:	4a19      	ldr	r2, [pc, #100]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2405d206:	62d3      	str	r3, [r2, #44]	; 0x2c
2405d208:	e00f      	b.n	2405d22a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
2405d20a:	683b      	ldr	r3, [r7, #0]
2405d20c:	2b01      	cmp	r3, #1
2405d20e:	d106      	bne.n	2405d21e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
2405d210:	4b15      	ldr	r3, [pc, #84]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d214:	4a14      	ldr	r2, [pc, #80]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2405d21a:	62d3      	str	r3, [r2, #44]	; 0x2c
2405d21c:	e005      	b.n	2405d22a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
2405d21e:	4b12      	ldr	r3, [pc, #72]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d222:	4a11      	ldr	r2, [pc, #68]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
2405d228:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
2405d22a:	4b0f      	ldr	r3, [pc, #60]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d22c:	681b      	ldr	r3, [r3, #0]
2405d22e:	4a0e      	ldr	r2, [pc, #56]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d230:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
2405d234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405d236:	f7f5 fd6d 	bl	24052d14 <HAL_GetTick>
2405d23a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2405d23c:	e008      	b.n	2405d250 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2405d23e:	f7f5 fd69 	bl	24052d14 <HAL_GetTick>
2405d242:	4602      	mov	r2, r0
2405d244:	68bb      	ldr	r3, [r7, #8]
2405d246:	1ad3      	subs	r3, r2, r3
2405d248:	2b02      	cmp	r3, #2
2405d24a:	d901      	bls.n	2405d250 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
2405d24c:	2303      	movs	r3, #3
2405d24e:	e006      	b.n	2405d25e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2405d250:	4b05      	ldr	r3, [pc, #20]	; (2405d268 <RCCEx_PLL2_Config+0x15c>)
2405d252:	681b      	ldr	r3, [r3, #0]
2405d254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405d258:	2b00      	cmp	r3, #0
2405d25a:	d0f0      	beq.n	2405d23e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
2405d25c:	7bfb      	ldrb	r3, [r7, #15]
}
2405d25e:	4618      	mov	r0, r3
2405d260:	3710      	adds	r7, #16
2405d262:	46bd      	mov	sp, r7
2405d264:	bd80      	pop	{r7, pc}
2405d266:	bf00      	nop
2405d268:	58024400 	.word	0x58024400
2405d26c:	ffff0007 	.word	0xffff0007

2405d270 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
2405d270:	b580      	push	{r7, lr}
2405d272:	b084      	sub	sp, #16
2405d274:	af00      	add	r7, sp, #0
2405d276:	6078      	str	r0, [r7, #4]
2405d278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2405d27a:	2300      	movs	r3, #0
2405d27c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2405d27e:	4b53      	ldr	r3, [pc, #332]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405d282:	f003 0303 	and.w	r3, r3, #3
2405d286:	2b03      	cmp	r3, #3
2405d288:	d101      	bne.n	2405d28e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
2405d28a:	2301      	movs	r3, #1
2405d28c:	e099      	b.n	2405d3c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
2405d28e:	4b4f      	ldr	r3, [pc, #316]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d290:	681b      	ldr	r3, [r3, #0]
2405d292:	4a4e      	ldr	r2, [pc, #312]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2405d298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405d29a:	f7f5 fd3b 	bl	24052d14 <HAL_GetTick>
2405d29e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2405d2a0:	e008      	b.n	2405d2b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2405d2a2:	f7f5 fd37 	bl	24052d14 <HAL_GetTick>
2405d2a6:	4602      	mov	r2, r0
2405d2a8:	68bb      	ldr	r3, [r7, #8]
2405d2aa:	1ad3      	subs	r3, r2, r3
2405d2ac:	2b02      	cmp	r3, #2
2405d2ae:	d901      	bls.n	2405d2b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
2405d2b0:	2303      	movs	r3, #3
2405d2b2:	e086      	b.n	2405d3c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2405d2b4:	4b45      	ldr	r3, [pc, #276]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d2b6:	681b      	ldr	r3, [r3, #0]
2405d2b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405d2bc:	2b00      	cmp	r3, #0
2405d2be:	d1f0      	bne.n	2405d2a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
2405d2c0:	4b42      	ldr	r3, [pc, #264]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405d2c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
2405d2c8:	687b      	ldr	r3, [r7, #4]
2405d2ca:	681b      	ldr	r3, [r3, #0]
2405d2cc:	051b      	lsls	r3, r3, #20
2405d2ce:	493f      	ldr	r1, [pc, #252]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d2d0:	4313      	orrs	r3, r2
2405d2d2:	628b      	str	r3, [r1, #40]	; 0x28
2405d2d4:	687b      	ldr	r3, [r7, #4]
2405d2d6:	685b      	ldr	r3, [r3, #4]
2405d2d8:	3b01      	subs	r3, #1
2405d2da:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405d2de:	687b      	ldr	r3, [r7, #4]
2405d2e0:	689b      	ldr	r3, [r3, #8]
2405d2e2:	3b01      	subs	r3, #1
2405d2e4:	025b      	lsls	r3, r3, #9
2405d2e6:	b29b      	uxth	r3, r3
2405d2e8:	431a      	orrs	r2, r3
2405d2ea:	687b      	ldr	r3, [r7, #4]
2405d2ec:	68db      	ldr	r3, [r3, #12]
2405d2ee:	3b01      	subs	r3, #1
2405d2f0:	041b      	lsls	r3, r3, #16
2405d2f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2405d2f6:	431a      	orrs	r2, r3
2405d2f8:	687b      	ldr	r3, [r7, #4]
2405d2fa:	691b      	ldr	r3, [r3, #16]
2405d2fc:	3b01      	subs	r3, #1
2405d2fe:	061b      	lsls	r3, r3, #24
2405d300:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2405d304:	4931      	ldr	r1, [pc, #196]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d306:	4313      	orrs	r3, r2
2405d308:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
2405d30a:	4b30      	ldr	r3, [pc, #192]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d30e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
2405d312:	687b      	ldr	r3, [r7, #4]
2405d314:	695b      	ldr	r3, [r3, #20]
2405d316:	492d      	ldr	r1, [pc, #180]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d318:	4313      	orrs	r3, r2
2405d31a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
2405d31c:	4b2b      	ldr	r3, [pc, #172]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d320:	f423 7200 	bic.w	r2, r3, #512	; 0x200
2405d324:	687b      	ldr	r3, [r7, #4]
2405d326:	699b      	ldr	r3, [r3, #24]
2405d328:	4928      	ldr	r1, [pc, #160]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d32a:	4313      	orrs	r3, r2
2405d32c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
2405d32e:	4b27      	ldr	r3, [pc, #156]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d332:	4a26      	ldr	r2, [pc, #152]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2405d338:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
2405d33a:	4b24      	ldr	r3, [pc, #144]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d33c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2405d33e:	4b24      	ldr	r3, [pc, #144]	; (2405d3d0 <RCCEx_PLL3_Config+0x160>)
2405d340:	4013      	ands	r3, r2
2405d342:	687a      	ldr	r2, [r7, #4]
2405d344:	69d2      	ldr	r2, [r2, #28]
2405d346:	00d2      	lsls	r2, r2, #3
2405d348:	4920      	ldr	r1, [pc, #128]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d34a:	4313      	orrs	r3, r2
2405d34c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
2405d34e:	4b1f      	ldr	r3, [pc, #124]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d352:	4a1e      	ldr	r2, [pc, #120]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405d358:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
2405d35a:	683b      	ldr	r3, [r7, #0]
2405d35c:	2b00      	cmp	r3, #0
2405d35e:	d106      	bne.n	2405d36e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2405d360:	4b1a      	ldr	r3, [pc, #104]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d364:	4a19      	ldr	r2, [pc, #100]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d366:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2405d36a:	62d3      	str	r3, [r2, #44]	; 0x2c
2405d36c:	e00f      	b.n	2405d38e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
2405d36e:	683b      	ldr	r3, [r7, #0]
2405d370:	2b01      	cmp	r3, #1
2405d372:	d106      	bne.n	2405d382 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
2405d374:	4b15      	ldr	r3, [pc, #84]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d378:	4a14      	ldr	r2, [pc, #80]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d37a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
2405d37e:	62d3      	str	r3, [r2, #44]	; 0x2c
2405d380:	e005      	b.n	2405d38e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
2405d382:	4b12      	ldr	r3, [pc, #72]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d386:	4a11      	ldr	r2, [pc, #68]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2405d38c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
2405d38e:	4b0f      	ldr	r3, [pc, #60]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d390:	681b      	ldr	r3, [r3, #0]
2405d392:	4a0e      	ldr	r2, [pc, #56]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2405d398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405d39a:	f7f5 fcbb 	bl	24052d14 <HAL_GetTick>
2405d39e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2405d3a0:	e008      	b.n	2405d3b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2405d3a2:	f7f5 fcb7 	bl	24052d14 <HAL_GetTick>
2405d3a6:	4602      	mov	r2, r0
2405d3a8:	68bb      	ldr	r3, [r7, #8]
2405d3aa:	1ad3      	subs	r3, r2, r3
2405d3ac:	2b02      	cmp	r3, #2
2405d3ae:	d901      	bls.n	2405d3b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
2405d3b0:	2303      	movs	r3, #3
2405d3b2:	e006      	b.n	2405d3c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2405d3b4:	4b05      	ldr	r3, [pc, #20]	; (2405d3cc <RCCEx_PLL3_Config+0x15c>)
2405d3b6:	681b      	ldr	r3, [r3, #0]
2405d3b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405d3bc:	2b00      	cmp	r3, #0
2405d3be:	d0f0      	beq.n	2405d3a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
2405d3c0:	7bfb      	ldrb	r3, [r7, #15]
}
2405d3c2:	4618      	mov	r0, r3
2405d3c4:	3710      	adds	r7, #16
2405d3c6:	46bd      	mov	sp, r7
2405d3c8:	bd80      	pop	{r7, pc}
2405d3ca:	bf00      	nop
2405d3cc:	58024400 	.word	0x58024400
2405d3d0:	ffff0007 	.word	0xffff0007

2405d3d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
2405d3d4:	b580      	push	{r7, lr}
2405d3d6:	b084      	sub	sp, #16
2405d3d8:	af00      	add	r7, sp, #0
2405d3da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
2405d3dc:	2301      	movs	r3, #1
2405d3de:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
2405d3e0:	687b      	ldr	r3, [r7, #4]
2405d3e2:	2b00      	cmp	r3, #0
2405d3e4:	d074      	beq.n	2405d4d0 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
2405d3e6:	687b      	ldr	r3, [r7, #4]
2405d3e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
2405d3ec:	b2db      	uxtb	r3, r3
2405d3ee:	2b00      	cmp	r3, #0
2405d3f0:	d106      	bne.n	2405d400 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
2405d3f2:	687b      	ldr	r3, [r7, #4]
2405d3f4:	2200      	movs	r2, #0
2405d3f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
2405d3fa:	6878      	ldr	r0, [r7, #4]
2405d3fc:	f7f5 f8d4 	bl	240525a8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
2405d400:	687b      	ldr	r3, [r7, #4]
2405d402:	2202      	movs	r2, #2
2405d404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
2405d408:	687b      	ldr	r3, [r7, #4]
2405d40a:	681b      	ldr	r3, [r3, #0]
2405d40c:	68db      	ldr	r3, [r3, #12]
2405d40e:	f003 0310 	and.w	r3, r3, #16
2405d412:	2b10      	cmp	r3, #16
2405d414:	d053      	beq.n	2405d4be <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2405d416:	687b      	ldr	r3, [r7, #4]
2405d418:	681b      	ldr	r3, [r3, #0]
2405d41a:	22ca      	movs	r2, #202	; 0xca
2405d41c:	625a      	str	r2, [r3, #36]	; 0x24
2405d41e:	687b      	ldr	r3, [r7, #4]
2405d420:	681b      	ldr	r3, [r3, #0]
2405d422:	2253      	movs	r2, #83	; 0x53
2405d424:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
2405d426:	6878      	ldr	r0, [r7, #4]
2405d428:	f000 fa4e 	bl	2405d8c8 <RTC_EnterInitMode>
2405d42c:	4603      	mov	r3, r0
2405d42e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
2405d430:	7bfb      	ldrb	r3, [r7, #15]
2405d432:	2b00      	cmp	r3, #0
2405d434:	d124      	bne.n	2405d480 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
2405d436:	687b      	ldr	r3, [r7, #4]
2405d438:	681b      	ldr	r3, [r3, #0]
2405d43a:	6999      	ldr	r1, [r3, #24]
2405d43c:	687b      	ldr	r3, [r7, #4]
2405d43e:	681a      	ldr	r2, [r3, #0]
2405d440:	4b26      	ldr	r3, [pc, #152]	; (2405d4dc <HAL_RTC_Init+0x108>)
2405d442:	400b      	ands	r3, r1
2405d444:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
2405d446:	687b      	ldr	r3, [r7, #4]
2405d448:	681b      	ldr	r3, [r3, #0]
2405d44a:	6999      	ldr	r1, [r3, #24]
2405d44c:	687b      	ldr	r3, [r7, #4]
2405d44e:	685a      	ldr	r2, [r3, #4]
2405d450:	687b      	ldr	r3, [r7, #4]
2405d452:	691b      	ldr	r3, [r3, #16]
2405d454:	431a      	orrs	r2, r3
2405d456:	687b      	ldr	r3, [r7, #4]
2405d458:	699b      	ldr	r3, [r3, #24]
2405d45a:	431a      	orrs	r2, r3
2405d45c:	687b      	ldr	r3, [r7, #4]
2405d45e:	681b      	ldr	r3, [r3, #0]
2405d460:	430a      	orrs	r2, r1
2405d462:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
2405d464:	687b      	ldr	r3, [r7, #4]
2405d466:	689b      	ldr	r3, [r3, #8]
2405d468:	0419      	lsls	r1, r3, #16
2405d46a:	687b      	ldr	r3, [r7, #4]
2405d46c:	68da      	ldr	r2, [r3, #12]
2405d46e:	687b      	ldr	r3, [r7, #4]
2405d470:	681b      	ldr	r3, [r3, #0]
2405d472:	430a      	orrs	r2, r1
2405d474:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
2405d476:	6878      	ldr	r0, [r7, #4]
2405d478:	f000 fa5c 	bl	2405d934 <RTC_ExitInitMode>
2405d47c:	4603      	mov	r3, r0
2405d47e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
2405d480:	7bfb      	ldrb	r3, [r7, #15]
2405d482:	2b00      	cmp	r3, #0
2405d484:	d116      	bne.n	2405d4b4 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
2405d486:	687b      	ldr	r3, [r7, #4]
2405d488:	681b      	ldr	r3, [r3, #0]
2405d48a:	699a      	ldr	r2, [r3, #24]
2405d48c:	687b      	ldr	r3, [r7, #4]
2405d48e:	681b      	ldr	r3, [r3, #0]
2405d490:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
2405d494:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
2405d496:	687b      	ldr	r3, [r7, #4]
2405d498:	681b      	ldr	r3, [r3, #0]
2405d49a:	6999      	ldr	r1, [r3, #24]
2405d49c:	687b      	ldr	r3, [r7, #4]
2405d49e:	6a1a      	ldr	r2, [r3, #32]
2405d4a0:	687b      	ldr	r3, [r7, #4]
2405d4a2:	69db      	ldr	r3, [r3, #28]
2405d4a4:	431a      	orrs	r2, r3
2405d4a6:	687b      	ldr	r3, [r7, #4]
2405d4a8:	695b      	ldr	r3, [r3, #20]
2405d4aa:	431a      	orrs	r2, r3
2405d4ac:	687b      	ldr	r3, [r7, #4]
2405d4ae:	681b      	ldr	r3, [r3, #0]
2405d4b0:	430a      	orrs	r2, r1
2405d4b2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2405d4b4:	687b      	ldr	r3, [r7, #4]
2405d4b6:	681b      	ldr	r3, [r3, #0]
2405d4b8:	22ff      	movs	r2, #255	; 0xff
2405d4ba:	625a      	str	r2, [r3, #36]	; 0x24
2405d4bc:	e001      	b.n	2405d4c2 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
2405d4be:	2300      	movs	r3, #0
2405d4c0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
2405d4c2:	7bfb      	ldrb	r3, [r7, #15]
2405d4c4:	2b00      	cmp	r3, #0
2405d4c6:	d103      	bne.n	2405d4d0 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
2405d4c8:	687b      	ldr	r3, [r7, #4]
2405d4ca:	2201      	movs	r2, #1
2405d4cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
2405d4d0:	7bfb      	ldrb	r3, [r7, #15]
}
2405d4d2:	4618      	mov	r0, r3
2405d4d4:	3710      	adds	r7, #16
2405d4d6:	46bd      	mov	sp, r7
2405d4d8:	bd80      	pop	{r7, pc}
2405d4da:	bf00      	nop
2405d4dc:	fb8fffbf 	.word	0xfb8fffbf

2405d4e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
2405d4e0:	b590      	push	{r4, r7, lr}
2405d4e2:	b087      	sub	sp, #28
2405d4e4:	af00      	add	r7, sp, #0
2405d4e6:	60f8      	str	r0, [r7, #12]
2405d4e8:	60b9      	str	r1, [r7, #8]
2405d4ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
2405d4ec:	68fb      	ldr	r3, [r7, #12]
2405d4ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
2405d4f2:	2b01      	cmp	r3, #1
2405d4f4:	d101      	bne.n	2405d4fa <HAL_RTC_SetTime+0x1a>
2405d4f6:	2302      	movs	r3, #2
2405d4f8:	e089      	b.n	2405d60e <HAL_RTC_SetTime+0x12e>
2405d4fa:	68fb      	ldr	r3, [r7, #12]
2405d4fc:	2201      	movs	r2, #1
2405d4fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
2405d502:	68fb      	ldr	r3, [r7, #12]
2405d504:	2202      	movs	r2, #2
2405d506:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2405d50a:	68fb      	ldr	r3, [r7, #12]
2405d50c:	681b      	ldr	r3, [r3, #0]
2405d50e:	22ca      	movs	r2, #202	; 0xca
2405d510:	625a      	str	r2, [r3, #36]	; 0x24
2405d512:	68fb      	ldr	r3, [r7, #12]
2405d514:	681b      	ldr	r3, [r3, #0]
2405d516:	2253      	movs	r2, #83	; 0x53
2405d518:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
2405d51a:	68f8      	ldr	r0, [r7, #12]
2405d51c:	f000 f9d4 	bl	2405d8c8 <RTC_EnterInitMode>
2405d520:	4603      	mov	r3, r0
2405d522:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
2405d524:	7cfb      	ldrb	r3, [r7, #19]
2405d526:	2b00      	cmp	r3, #0
2405d528:	d161      	bne.n	2405d5ee <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
2405d52a:	687b      	ldr	r3, [r7, #4]
2405d52c:	2b00      	cmp	r3, #0
2405d52e:	d126      	bne.n	2405d57e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
2405d530:	68fb      	ldr	r3, [r7, #12]
2405d532:	681b      	ldr	r3, [r3, #0]
2405d534:	699b      	ldr	r3, [r3, #24]
2405d536:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405d53a:	2b00      	cmp	r3, #0
2405d53c:	d102      	bne.n	2405d544 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
2405d53e:	68bb      	ldr	r3, [r7, #8]
2405d540:	2200      	movs	r2, #0
2405d542:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405d544:	68bb      	ldr	r3, [r7, #8]
2405d546:	781b      	ldrb	r3, [r3, #0]
2405d548:	4618      	mov	r0, r3
2405d54a:	f000 fa31 	bl	2405d9b0 <RTC_ByteToBcd2>
2405d54e:	4603      	mov	r3, r0
2405d550:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405d552:	68bb      	ldr	r3, [r7, #8]
2405d554:	785b      	ldrb	r3, [r3, #1]
2405d556:	4618      	mov	r0, r3
2405d558:	f000 fa2a 	bl	2405d9b0 <RTC_ByteToBcd2>
2405d55c:	4603      	mov	r3, r0
2405d55e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405d560:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
2405d562:	68bb      	ldr	r3, [r7, #8]
2405d564:	789b      	ldrb	r3, [r3, #2]
2405d566:	4618      	mov	r0, r3
2405d568:	f000 fa22 	bl	2405d9b0 <RTC_ByteToBcd2>
2405d56c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405d56e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
2405d572:	68bb      	ldr	r3, [r7, #8]
2405d574:	78db      	ldrb	r3, [r3, #3]
2405d576:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405d578:	4313      	orrs	r3, r2
2405d57a:	617b      	str	r3, [r7, #20]
2405d57c:	e018      	b.n	2405d5b0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
2405d57e:	68fb      	ldr	r3, [r7, #12]
2405d580:	681b      	ldr	r3, [r3, #0]
2405d582:	699b      	ldr	r3, [r3, #24]
2405d584:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405d588:	2b00      	cmp	r3, #0
2405d58a:	d102      	bne.n	2405d592 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
2405d58c:	68bb      	ldr	r3, [r7, #8]
2405d58e:	2200      	movs	r2, #0
2405d590:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405d592:	68bb      	ldr	r3, [r7, #8]
2405d594:	781b      	ldrb	r3, [r3, #0]
2405d596:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405d598:	68bb      	ldr	r3, [r7, #8]
2405d59a:	785b      	ldrb	r3, [r3, #1]
2405d59c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405d59e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
2405d5a0:	68ba      	ldr	r2, [r7, #8]
2405d5a2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405d5a4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
2405d5a6:	68bb      	ldr	r3, [r7, #8]
2405d5a8:	78db      	ldrb	r3, [r3, #3]
2405d5aa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405d5ac:	4313      	orrs	r3, r2
2405d5ae:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
2405d5b0:	68fb      	ldr	r3, [r7, #12]
2405d5b2:	681a      	ldr	r2, [r3, #0]
2405d5b4:	6979      	ldr	r1, [r7, #20]
2405d5b6:	4b18      	ldr	r3, [pc, #96]	; (2405d618 <HAL_RTC_SetTime+0x138>)
2405d5b8:	400b      	ands	r3, r1
2405d5ba:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
2405d5bc:	68fb      	ldr	r3, [r7, #12]
2405d5be:	681b      	ldr	r3, [r3, #0]
2405d5c0:	699a      	ldr	r2, [r3, #24]
2405d5c2:	68fb      	ldr	r3, [r7, #12]
2405d5c4:	681b      	ldr	r3, [r3, #0]
2405d5c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2405d5ca:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
2405d5cc:	68fb      	ldr	r3, [r7, #12]
2405d5ce:	681b      	ldr	r3, [r3, #0]
2405d5d0:	6999      	ldr	r1, [r3, #24]
2405d5d2:	68bb      	ldr	r3, [r7, #8]
2405d5d4:	68da      	ldr	r2, [r3, #12]
2405d5d6:	68bb      	ldr	r3, [r7, #8]
2405d5d8:	691b      	ldr	r3, [r3, #16]
2405d5da:	431a      	orrs	r2, r3
2405d5dc:	68fb      	ldr	r3, [r7, #12]
2405d5de:	681b      	ldr	r3, [r3, #0]
2405d5e0:	430a      	orrs	r2, r1
2405d5e2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
2405d5e4:	68f8      	ldr	r0, [r7, #12]
2405d5e6:	f000 f9a5 	bl	2405d934 <RTC_ExitInitMode>
2405d5ea:	4603      	mov	r3, r0
2405d5ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2405d5ee:	68fb      	ldr	r3, [r7, #12]
2405d5f0:	681b      	ldr	r3, [r3, #0]
2405d5f2:	22ff      	movs	r2, #255	; 0xff
2405d5f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
2405d5f6:	7cfb      	ldrb	r3, [r7, #19]
2405d5f8:	2b00      	cmp	r3, #0
2405d5fa:	d103      	bne.n	2405d604 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
2405d5fc:	68fb      	ldr	r3, [r7, #12]
2405d5fe:	2201      	movs	r2, #1
2405d600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
2405d604:	68fb      	ldr	r3, [r7, #12]
2405d606:	2200      	movs	r2, #0
2405d608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
2405d60c:	7cfb      	ldrb	r3, [r7, #19]
}
2405d60e:	4618      	mov	r0, r3
2405d610:	371c      	adds	r7, #28
2405d612:	46bd      	mov	sp, r7
2405d614:	bd90      	pop	{r4, r7, pc}
2405d616:	bf00      	nop
2405d618:	007f7f7f 	.word	0x007f7f7f

2405d61c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
2405d61c:	b580      	push	{r7, lr}
2405d61e:	b086      	sub	sp, #24
2405d620:	af00      	add	r7, sp, #0
2405d622:	60f8      	str	r0, [r7, #12]
2405d624:	60b9      	str	r1, [r7, #8]
2405d626:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
2405d628:	68fb      	ldr	r3, [r7, #12]
2405d62a:	681b      	ldr	r3, [r3, #0]
2405d62c:	689a      	ldr	r2, [r3, #8]
2405d62e:	68bb      	ldr	r3, [r7, #8]
2405d630:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
2405d632:	68fb      	ldr	r3, [r7, #12]
2405d634:	681b      	ldr	r3, [r3, #0]
2405d636:	691b      	ldr	r3, [r3, #16]
2405d638:	f3c3 020e 	ubfx	r2, r3, #0, #15
2405d63c:	68bb      	ldr	r3, [r7, #8]
2405d63e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
2405d640:	68fb      	ldr	r3, [r7, #12]
2405d642:	681b      	ldr	r3, [r3, #0]
2405d644:	681a      	ldr	r2, [r3, #0]
2405d646:	4b22      	ldr	r3, [pc, #136]	; (2405d6d0 <HAL_RTC_GetTime+0xb4>)
2405d648:	4013      	ands	r3, r2
2405d64a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
2405d64c:	697b      	ldr	r3, [r7, #20]
2405d64e:	0c1b      	lsrs	r3, r3, #16
2405d650:	b2db      	uxtb	r3, r3
2405d652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405d656:	b2da      	uxtb	r2, r3
2405d658:	68bb      	ldr	r3, [r7, #8]
2405d65a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
2405d65c:	697b      	ldr	r3, [r7, #20]
2405d65e:	0a1b      	lsrs	r3, r3, #8
2405d660:	b2db      	uxtb	r3, r3
2405d662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405d666:	b2da      	uxtb	r2, r3
2405d668:	68bb      	ldr	r3, [r7, #8]
2405d66a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
2405d66c:	697b      	ldr	r3, [r7, #20]
2405d66e:	b2db      	uxtb	r3, r3
2405d670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405d674:	b2da      	uxtb	r2, r3
2405d676:	68bb      	ldr	r3, [r7, #8]
2405d678:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
2405d67a:	697b      	ldr	r3, [r7, #20]
2405d67c:	0d9b      	lsrs	r3, r3, #22
2405d67e:	b2db      	uxtb	r3, r3
2405d680:	f003 0301 	and.w	r3, r3, #1
2405d684:	b2da      	uxtb	r2, r3
2405d686:	68bb      	ldr	r3, [r7, #8]
2405d688:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
2405d68a:	687b      	ldr	r3, [r7, #4]
2405d68c:	2b00      	cmp	r3, #0
2405d68e:	d11a      	bne.n	2405d6c6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
2405d690:	68bb      	ldr	r3, [r7, #8]
2405d692:	781b      	ldrb	r3, [r3, #0]
2405d694:	4618      	mov	r0, r3
2405d696:	f000 f9ab 	bl	2405d9f0 <RTC_Bcd2ToByte>
2405d69a:	4603      	mov	r3, r0
2405d69c:	461a      	mov	r2, r3
2405d69e:	68bb      	ldr	r3, [r7, #8]
2405d6a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
2405d6a2:	68bb      	ldr	r3, [r7, #8]
2405d6a4:	785b      	ldrb	r3, [r3, #1]
2405d6a6:	4618      	mov	r0, r3
2405d6a8:	f000 f9a2 	bl	2405d9f0 <RTC_Bcd2ToByte>
2405d6ac:	4603      	mov	r3, r0
2405d6ae:	461a      	mov	r2, r3
2405d6b0:	68bb      	ldr	r3, [r7, #8]
2405d6b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
2405d6b4:	68bb      	ldr	r3, [r7, #8]
2405d6b6:	789b      	ldrb	r3, [r3, #2]
2405d6b8:	4618      	mov	r0, r3
2405d6ba:	f000 f999 	bl	2405d9f0 <RTC_Bcd2ToByte>
2405d6be:	4603      	mov	r3, r0
2405d6c0:	461a      	mov	r2, r3
2405d6c2:	68bb      	ldr	r3, [r7, #8]
2405d6c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
2405d6c6:	2300      	movs	r3, #0
}
2405d6c8:	4618      	mov	r0, r3
2405d6ca:	3718      	adds	r7, #24
2405d6cc:	46bd      	mov	sp, r7
2405d6ce:	bd80      	pop	{r7, pc}
2405d6d0:	007f7f7f 	.word	0x007f7f7f

2405d6d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
2405d6d4:	b590      	push	{r4, r7, lr}
2405d6d6:	b087      	sub	sp, #28
2405d6d8:	af00      	add	r7, sp, #0
2405d6da:	60f8      	str	r0, [r7, #12]
2405d6dc:	60b9      	str	r1, [r7, #8]
2405d6de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
2405d6e0:	68fb      	ldr	r3, [r7, #12]
2405d6e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
2405d6e6:	2b01      	cmp	r3, #1
2405d6e8:	d101      	bne.n	2405d6ee <HAL_RTC_SetDate+0x1a>
2405d6ea:	2302      	movs	r3, #2
2405d6ec:	e073      	b.n	2405d7d6 <HAL_RTC_SetDate+0x102>
2405d6ee:	68fb      	ldr	r3, [r7, #12]
2405d6f0:	2201      	movs	r2, #1
2405d6f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
2405d6f6:	68fb      	ldr	r3, [r7, #12]
2405d6f8:	2202      	movs	r2, #2
2405d6fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
2405d6fe:	687b      	ldr	r3, [r7, #4]
2405d700:	2b00      	cmp	r3, #0
2405d702:	d10e      	bne.n	2405d722 <HAL_RTC_SetDate+0x4e>
2405d704:	68bb      	ldr	r3, [r7, #8]
2405d706:	785b      	ldrb	r3, [r3, #1]
2405d708:	f003 0310 	and.w	r3, r3, #16
2405d70c:	2b00      	cmp	r3, #0
2405d70e:	d008      	beq.n	2405d722 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
2405d710:	68bb      	ldr	r3, [r7, #8]
2405d712:	785b      	ldrb	r3, [r3, #1]
2405d714:	f023 0310 	bic.w	r3, r3, #16
2405d718:	b2db      	uxtb	r3, r3
2405d71a:	330a      	adds	r3, #10
2405d71c:	b2da      	uxtb	r2, r3
2405d71e:	68bb      	ldr	r3, [r7, #8]
2405d720:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
2405d722:	687b      	ldr	r3, [r7, #4]
2405d724:	2b00      	cmp	r3, #0
2405d726:	d11c      	bne.n	2405d762 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
2405d728:	68bb      	ldr	r3, [r7, #8]
2405d72a:	78db      	ldrb	r3, [r3, #3]
2405d72c:	4618      	mov	r0, r3
2405d72e:	f000 f93f 	bl	2405d9b0 <RTC_ByteToBcd2>
2405d732:	4603      	mov	r3, r0
2405d734:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
2405d736:	68bb      	ldr	r3, [r7, #8]
2405d738:	785b      	ldrb	r3, [r3, #1]
2405d73a:	4618      	mov	r0, r3
2405d73c:	f000 f938 	bl	2405d9b0 <RTC_ByteToBcd2>
2405d740:	4603      	mov	r3, r0
2405d742:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
2405d744:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
2405d746:	68bb      	ldr	r3, [r7, #8]
2405d748:	789b      	ldrb	r3, [r3, #2]
2405d74a:	4618      	mov	r0, r3
2405d74c:	f000 f930 	bl	2405d9b0 <RTC_ByteToBcd2>
2405d750:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
2405d752:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
2405d756:	68bb      	ldr	r3, [r7, #8]
2405d758:	781b      	ldrb	r3, [r3, #0]
2405d75a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
2405d75c:	4313      	orrs	r3, r2
2405d75e:	617b      	str	r3, [r7, #20]
2405d760:	e00e      	b.n	2405d780 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
2405d762:	68bb      	ldr	r3, [r7, #8]
2405d764:	78db      	ldrb	r3, [r3, #3]
2405d766:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
2405d768:	68bb      	ldr	r3, [r7, #8]
2405d76a:	785b      	ldrb	r3, [r3, #1]
2405d76c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
2405d76e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
2405d770:	68ba      	ldr	r2, [r7, #8]
2405d772:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
2405d774:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
2405d776:	68bb      	ldr	r3, [r7, #8]
2405d778:	781b      	ldrb	r3, [r3, #0]
2405d77a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
2405d77c:	4313      	orrs	r3, r2
2405d77e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2405d780:	68fb      	ldr	r3, [r7, #12]
2405d782:	681b      	ldr	r3, [r3, #0]
2405d784:	22ca      	movs	r2, #202	; 0xca
2405d786:	625a      	str	r2, [r3, #36]	; 0x24
2405d788:	68fb      	ldr	r3, [r7, #12]
2405d78a:	681b      	ldr	r3, [r3, #0]
2405d78c:	2253      	movs	r2, #83	; 0x53
2405d78e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
2405d790:	68f8      	ldr	r0, [r7, #12]
2405d792:	f000 f899 	bl	2405d8c8 <RTC_EnterInitMode>
2405d796:	4603      	mov	r3, r0
2405d798:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
2405d79a:	7cfb      	ldrb	r3, [r7, #19]
2405d79c:	2b00      	cmp	r3, #0
2405d79e:	d10a      	bne.n	2405d7b6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
2405d7a0:	68fb      	ldr	r3, [r7, #12]
2405d7a2:	681a      	ldr	r2, [r3, #0]
2405d7a4:	6979      	ldr	r1, [r7, #20]
2405d7a6:	4b0e      	ldr	r3, [pc, #56]	; (2405d7e0 <HAL_RTC_SetDate+0x10c>)
2405d7a8:	400b      	ands	r3, r1
2405d7aa:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
2405d7ac:	68f8      	ldr	r0, [r7, #12]
2405d7ae:	f000 f8c1 	bl	2405d934 <RTC_ExitInitMode>
2405d7b2:	4603      	mov	r3, r0
2405d7b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2405d7b6:	68fb      	ldr	r3, [r7, #12]
2405d7b8:	681b      	ldr	r3, [r3, #0]
2405d7ba:	22ff      	movs	r2, #255	; 0xff
2405d7bc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
2405d7be:	7cfb      	ldrb	r3, [r7, #19]
2405d7c0:	2b00      	cmp	r3, #0
2405d7c2:	d103      	bne.n	2405d7cc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
2405d7c4:	68fb      	ldr	r3, [r7, #12]
2405d7c6:	2201      	movs	r2, #1
2405d7c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
2405d7cc:	68fb      	ldr	r3, [r7, #12]
2405d7ce:	2200      	movs	r2, #0
2405d7d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
2405d7d4:	7cfb      	ldrb	r3, [r7, #19]


}
2405d7d6:	4618      	mov	r0, r3
2405d7d8:	371c      	adds	r7, #28
2405d7da:	46bd      	mov	sp, r7
2405d7dc:	bd90      	pop	{r4, r7, pc}
2405d7de:	bf00      	nop
2405d7e0:	00ffff3f 	.word	0x00ffff3f

2405d7e4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
2405d7e4:	b580      	push	{r7, lr}
2405d7e6:	b086      	sub	sp, #24
2405d7e8:	af00      	add	r7, sp, #0
2405d7ea:	60f8      	str	r0, [r7, #12]
2405d7ec:	60b9      	str	r1, [r7, #8]
2405d7ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
2405d7f0:	68fb      	ldr	r3, [r7, #12]
2405d7f2:	681b      	ldr	r3, [r3, #0]
2405d7f4:	685a      	ldr	r2, [r3, #4]
2405d7f6:	4b21      	ldr	r3, [pc, #132]	; (2405d87c <HAL_RTC_GetDate+0x98>)
2405d7f8:	4013      	ands	r3, r2
2405d7fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
2405d7fc:	697b      	ldr	r3, [r7, #20]
2405d7fe:	0c1b      	lsrs	r3, r3, #16
2405d800:	b2da      	uxtb	r2, r3
2405d802:	68bb      	ldr	r3, [r7, #8]
2405d804:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
2405d806:	697b      	ldr	r3, [r7, #20]
2405d808:	0a1b      	lsrs	r3, r3, #8
2405d80a:	b2db      	uxtb	r3, r3
2405d80c:	f003 031f 	and.w	r3, r3, #31
2405d810:	b2da      	uxtb	r2, r3
2405d812:	68bb      	ldr	r3, [r7, #8]
2405d814:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
2405d816:	697b      	ldr	r3, [r7, #20]
2405d818:	b2db      	uxtb	r3, r3
2405d81a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405d81e:	b2da      	uxtb	r2, r3
2405d820:	68bb      	ldr	r3, [r7, #8]
2405d822:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
2405d824:	697b      	ldr	r3, [r7, #20]
2405d826:	0b5b      	lsrs	r3, r3, #13
2405d828:	b2db      	uxtb	r3, r3
2405d82a:	f003 0307 	and.w	r3, r3, #7
2405d82e:	b2da      	uxtb	r2, r3
2405d830:	68bb      	ldr	r3, [r7, #8]
2405d832:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
2405d834:	687b      	ldr	r3, [r7, #4]
2405d836:	2b00      	cmp	r3, #0
2405d838:	d11a      	bne.n	2405d870 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
2405d83a:	68bb      	ldr	r3, [r7, #8]
2405d83c:	78db      	ldrb	r3, [r3, #3]
2405d83e:	4618      	mov	r0, r3
2405d840:	f000 f8d6 	bl	2405d9f0 <RTC_Bcd2ToByte>
2405d844:	4603      	mov	r3, r0
2405d846:	461a      	mov	r2, r3
2405d848:	68bb      	ldr	r3, [r7, #8]
2405d84a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
2405d84c:	68bb      	ldr	r3, [r7, #8]
2405d84e:	785b      	ldrb	r3, [r3, #1]
2405d850:	4618      	mov	r0, r3
2405d852:	f000 f8cd 	bl	2405d9f0 <RTC_Bcd2ToByte>
2405d856:	4603      	mov	r3, r0
2405d858:	461a      	mov	r2, r3
2405d85a:	68bb      	ldr	r3, [r7, #8]
2405d85c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
2405d85e:	68bb      	ldr	r3, [r7, #8]
2405d860:	789b      	ldrb	r3, [r3, #2]
2405d862:	4618      	mov	r0, r3
2405d864:	f000 f8c4 	bl	2405d9f0 <RTC_Bcd2ToByte>
2405d868:	4603      	mov	r3, r0
2405d86a:	461a      	mov	r2, r3
2405d86c:	68bb      	ldr	r3, [r7, #8]
2405d86e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
2405d870:	2300      	movs	r3, #0
}
2405d872:	4618      	mov	r0, r3
2405d874:	3718      	adds	r7, #24
2405d876:	46bd      	mov	sp, r7
2405d878:	bd80      	pop	{r7, pc}
2405d87a:	bf00      	nop
2405d87c:	00ffff3f 	.word	0x00ffff3f

2405d880 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
2405d880:	b580      	push	{r7, lr}
2405d882:	b084      	sub	sp, #16
2405d884:	af00      	add	r7, sp, #0
2405d886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
2405d888:	687b      	ldr	r3, [r7, #4]
2405d88a:	681b      	ldr	r3, [r3, #0]
2405d88c:	4a0d      	ldr	r2, [pc, #52]	; (2405d8c4 <HAL_RTC_WaitForSynchro+0x44>)
2405d88e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
2405d890:	f7f5 fa40 	bl	24052d14 <HAL_GetTick>
2405d894:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
2405d896:	e009      	b.n	2405d8ac <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
2405d898:	f7f5 fa3c 	bl	24052d14 <HAL_GetTick>
2405d89c:	4602      	mov	r2, r0
2405d89e:	68fb      	ldr	r3, [r7, #12]
2405d8a0:	1ad3      	subs	r3, r2, r3
2405d8a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405d8a6:	d901      	bls.n	2405d8ac <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
2405d8a8:	2303      	movs	r3, #3
2405d8aa:	e007      	b.n	2405d8bc <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
2405d8ac:	687b      	ldr	r3, [r7, #4]
2405d8ae:	681b      	ldr	r3, [r3, #0]
2405d8b0:	68db      	ldr	r3, [r3, #12]
2405d8b2:	f003 0320 	and.w	r3, r3, #32
2405d8b6:	2b00      	cmp	r3, #0
2405d8b8:	d0ee      	beq.n	2405d898 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
2405d8ba:	2300      	movs	r3, #0
}
2405d8bc:	4618      	mov	r0, r3
2405d8be:	3710      	adds	r7, #16
2405d8c0:	46bd      	mov	sp, r7
2405d8c2:	bd80      	pop	{r7, pc}
2405d8c4:	0001005f 	.word	0x0001005f

2405d8c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
2405d8c8:	b580      	push	{r7, lr}
2405d8ca:	b084      	sub	sp, #16
2405d8cc:	af00      	add	r7, sp, #0
2405d8ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2405d8d0:	2300      	movs	r3, #0
2405d8d2:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
2405d8d4:	687b      	ldr	r3, [r7, #4]
2405d8d6:	681b      	ldr	r3, [r3, #0]
2405d8d8:	68db      	ldr	r3, [r3, #12]
2405d8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405d8de:	2b00      	cmp	r3, #0
2405d8e0:	d123      	bne.n	2405d92a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
2405d8e2:	687b      	ldr	r3, [r7, #4]
2405d8e4:	681b      	ldr	r3, [r3, #0]
2405d8e6:	68da      	ldr	r2, [r3, #12]
2405d8e8:	687b      	ldr	r3, [r7, #4]
2405d8ea:	681b      	ldr	r3, [r3, #0]
2405d8ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2405d8f0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
2405d8f2:	f7f5 fa0f 	bl	24052d14 <HAL_GetTick>
2405d8f6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
2405d8f8:	e00d      	b.n	2405d916 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
2405d8fa:	f7f5 fa0b 	bl	24052d14 <HAL_GetTick>
2405d8fe:	4602      	mov	r2, r0
2405d900:	68bb      	ldr	r3, [r7, #8]
2405d902:	1ad3      	subs	r3, r2, r3
2405d904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405d908:	d905      	bls.n	2405d916 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
2405d90a:	2303      	movs	r3, #3
2405d90c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
2405d90e:	687b      	ldr	r3, [r7, #4]
2405d910:	2203      	movs	r2, #3
2405d912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
2405d916:	687b      	ldr	r3, [r7, #4]
2405d918:	681b      	ldr	r3, [r3, #0]
2405d91a:	68db      	ldr	r3, [r3, #12]
2405d91c:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405d920:	2b00      	cmp	r3, #0
2405d922:	d102      	bne.n	2405d92a <RTC_EnterInitMode+0x62>
2405d924:	7bfb      	ldrb	r3, [r7, #15]
2405d926:	2b03      	cmp	r3, #3
2405d928:	d1e7      	bne.n	2405d8fa <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
2405d92a:	7bfb      	ldrb	r3, [r7, #15]
}
2405d92c:	4618      	mov	r0, r3
2405d92e:	3710      	adds	r7, #16
2405d930:	46bd      	mov	sp, r7
2405d932:	bd80      	pop	{r7, pc}

2405d934 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
2405d934:	b580      	push	{r7, lr}
2405d936:	b084      	sub	sp, #16
2405d938:	af00      	add	r7, sp, #0
2405d93a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405d93c:	2300      	movs	r3, #0
2405d93e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
2405d940:	4b1a      	ldr	r3, [pc, #104]	; (2405d9ac <RTC_ExitInitMode+0x78>)
2405d942:	68db      	ldr	r3, [r3, #12]
2405d944:	4a19      	ldr	r2, [pc, #100]	; (2405d9ac <RTC_ExitInitMode+0x78>)
2405d946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405d94a:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
2405d94c:	4b17      	ldr	r3, [pc, #92]	; (2405d9ac <RTC_ExitInitMode+0x78>)
2405d94e:	699b      	ldr	r3, [r3, #24]
2405d950:	f003 0320 	and.w	r3, r3, #32
2405d954:	2b00      	cmp	r3, #0
2405d956:	d10c      	bne.n	2405d972 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
2405d958:	6878      	ldr	r0, [r7, #4]
2405d95a:	f7ff ff91 	bl	2405d880 <HAL_RTC_WaitForSynchro>
2405d95e:	4603      	mov	r3, r0
2405d960:	2b00      	cmp	r3, #0
2405d962:	d01e      	beq.n	2405d9a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
2405d964:	687b      	ldr	r3, [r7, #4]
2405d966:	2203      	movs	r2, #3
2405d968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
2405d96c:	2303      	movs	r3, #3
2405d96e:	73fb      	strb	r3, [r7, #15]
2405d970:	e017      	b.n	2405d9a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
2405d972:	4b0e      	ldr	r3, [pc, #56]	; (2405d9ac <RTC_ExitInitMode+0x78>)
2405d974:	699b      	ldr	r3, [r3, #24]
2405d976:	4a0d      	ldr	r2, [pc, #52]	; (2405d9ac <RTC_ExitInitMode+0x78>)
2405d978:	f023 0320 	bic.w	r3, r3, #32
2405d97c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
2405d97e:	6878      	ldr	r0, [r7, #4]
2405d980:	f7ff ff7e 	bl	2405d880 <HAL_RTC_WaitForSynchro>
2405d984:	4603      	mov	r3, r0
2405d986:	2b00      	cmp	r3, #0
2405d988:	d005      	beq.n	2405d996 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
2405d98a:	687b      	ldr	r3, [r7, #4]
2405d98c:	2203      	movs	r2, #3
2405d98e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
2405d992:	2303      	movs	r3, #3
2405d994:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
2405d996:	4b05      	ldr	r3, [pc, #20]	; (2405d9ac <RTC_ExitInitMode+0x78>)
2405d998:	699b      	ldr	r3, [r3, #24]
2405d99a:	4a04      	ldr	r2, [pc, #16]	; (2405d9ac <RTC_ExitInitMode+0x78>)
2405d99c:	f043 0320 	orr.w	r3, r3, #32
2405d9a0:	6193      	str	r3, [r2, #24]
  }

  return status;
2405d9a2:	7bfb      	ldrb	r3, [r7, #15]
}
2405d9a4:	4618      	mov	r0, r3
2405d9a6:	3710      	adds	r7, #16
2405d9a8:	46bd      	mov	sp, r7
2405d9aa:	bd80      	pop	{r7, pc}
2405d9ac:	58004000 	.word	0x58004000

2405d9b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
2405d9b0:	b480      	push	{r7}
2405d9b2:	b085      	sub	sp, #20
2405d9b4:	af00      	add	r7, sp, #0
2405d9b6:	4603      	mov	r3, r0
2405d9b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
2405d9ba:	2300      	movs	r3, #0
2405d9bc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
2405d9be:	79fb      	ldrb	r3, [r7, #7]
2405d9c0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
2405d9c2:	e005      	b.n	2405d9d0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
2405d9c4:	68fb      	ldr	r3, [r7, #12]
2405d9c6:	3301      	adds	r3, #1
2405d9c8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
2405d9ca:	7afb      	ldrb	r3, [r7, #11]
2405d9cc:	3b0a      	subs	r3, #10
2405d9ce:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
2405d9d0:	7afb      	ldrb	r3, [r7, #11]
2405d9d2:	2b09      	cmp	r3, #9
2405d9d4:	d8f6      	bhi.n	2405d9c4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
2405d9d6:	68fb      	ldr	r3, [r7, #12]
2405d9d8:	b2db      	uxtb	r3, r3
2405d9da:	011b      	lsls	r3, r3, #4
2405d9dc:	b2da      	uxtb	r2, r3
2405d9de:	7afb      	ldrb	r3, [r7, #11]
2405d9e0:	4313      	orrs	r3, r2
2405d9e2:	b2db      	uxtb	r3, r3
}
2405d9e4:	4618      	mov	r0, r3
2405d9e6:	3714      	adds	r7, #20
2405d9e8:	46bd      	mov	sp, r7
2405d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d9ee:	4770      	bx	lr

2405d9f0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
2405d9f0:	b480      	push	{r7}
2405d9f2:	b085      	sub	sp, #20
2405d9f4:	af00      	add	r7, sp, #0
2405d9f6:	4603      	mov	r3, r0
2405d9f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
2405d9fa:	79fb      	ldrb	r3, [r7, #7]
2405d9fc:	091b      	lsrs	r3, r3, #4
2405d9fe:	b2db      	uxtb	r3, r3
2405da00:	461a      	mov	r2, r3
2405da02:	0092      	lsls	r2, r2, #2
2405da04:	4413      	add	r3, r2
2405da06:	005b      	lsls	r3, r3, #1
2405da08:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
2405da0a:	79fb      	ldrb	r3, [r7, #7]
2405da0c:	f003 030f 	and.w	r3, r3, #15
2405da10:	b2da      	uxtb	r2, r3
2405da12:	7bfb      	ldrb	r3, [r7, #15]
2405da14:	4413      	add	r3, r2
2405da16:	b2db      	uxtb	r3, r3
}
2405da18:	4618      	mov	r0, r3
2405da1a:	3714      	adds	r7, #20
2405da1c:	46bd      	mov	sp, r7
2405da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
2405da22:	4770      	bx	lr

2405da24 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
2405da24:	b580      	push	{r7, lr}
2405da26:	b086      	sub	sp, #24
2405da28:	af00      	add	r7, sp, #0
2405da2a:	60f8      	str	r0, [r7, #12]
2405da2c:	60b9      	str	r1, [r7, #8]
2405da2e:	607a      	str	r2, [r7, #4]
2405da30:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
2405da32:	68bb      	ldr	r3, [r7, #8]
2405da34:	2b02      	cmp	r3, #2
2405da36:	d904      	bls.n	2405da42 <HAL_SAI_InitProtocol+0x1e>
2405da38:	68bb      	ldr	r3, [r7, #8]
2405da3a:	3b03      	subs	r3, #3
2405da3c:	2b01      	cmp	r3, #1
2405da3e:	d812      	bhi.n	2405da66 <HAL_SAI_InitProtocol+0x42>
2405da40:	e008      	b.n	2405da54 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
2405da42:	683b      	ldr	r3, [r7, #0]
2405da44:	687a      	ldr	r2, [r7, #4]
2405da46:	68b9      	ldr	r1, [r7, #8]
2405da48:	68f8      	ldr	r0, [r7, #12]
2405da4a:	f000 fd41 	bl	2405e4d0 <SAI_InitI2S>
2405da4e:	4603      	mov	r3, r0
2405da50:	75fb      	strb	r3, [r7, #23]
      break;
2405da52:	e00b      	b.n	2405da6c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
2405da54:	683b      	ldr	r3, [r7, #0]
2405da56:	687a      	ldr	r2, [r7, #4]
2405da58:	68b9      	ldr	r1, [r7, #8]
2405da5a:	68f8      	ldr	r0, [r7, #12]
2405da5c:	f000 fdea 	bl	2405e634 <SAI_InitPCM>
2405da60:	4603      	mov	r3, r0
2405da62:	75fb      	strb	r3, [r7, #23]
      break;
2405da64:	e002      	b.n	2405da6c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
2405da66:	2301      	movs	r3, #1
2405da68:	75fb      	strb	r3, [r7, #23]
      break;
2405da6a:	bf00      	nop
  }

  if (status == HAL_OK)
2405da6c:	7dfb      	ldrb	r3, [r7, #23]
2405da6e:	2b00      	cmp	r3, #0
2405da70:	d104      	bne.n	2405da7c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
2405da72:	68f8      	ldr	r0, [r7, #12]
2405da74:	f000 f808 	bl	2405da88 <HAL_SAI_Init>
2405da78:	4603      	mov	r3, r0
2405da7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
2405da7c:	7dfb      	ldrb	r3, [r7, #23]
}
2405da7e:	4618      	mov	r0, r3
2405da80:	3718      	adds	r7, #24
2405da82:	46bd      	mov	sp, r7
2405da84:	bd80      	pop	{r7, pc}
	...

2405da88 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
2405da88:	b580      	push	{r7, lr}
2405da8a:	b08a      	sub	sp, #40	; 0x28
2405da8c:	af00      	add	r7, sp, #0
2405da8e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
2405da90:	687b      	ldr	r3, [r7, #4]
2405da92:	2b00      	cmp	r3, #0
2405da94:	d101      	bne.n	2405da9a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
2405da96:	2301      	movs	r3, #1
2405da98:	e1f2      	b.n	2405de80 <HAL_SAI_Init+0x3f8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
2405da9a:	687b      	ldr	r3, [r7, #4]
2405da9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2405daa0:	2b01      	cmp	r3, #1
2405daa2:	d10e      	bne.n	2405dac2 <HAL_SAI_Init+0x3a>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
    {
      return HAL_ERROR;
    }
#else
    if ((hsai->Instance != SAI1_Block_A) ||
2405daa4:	687b      	ldr	r3, [r7, #4]
2405daa6:	681b      	ldr	r3, [r3, #0]
2405daa8:	4a94      	ldr	r2, [pc, #592]	; (2405dcfc <HAL_SAI_Init+0x274>)
2405daaa:	4293      	cmp	r3, r2
2405daac:	d107      	bne.n	2405dabe <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2405daae:	687b      	ldr	r3, [r7, #4]
2405dab0:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
2405dab2:	2b01      	cmp	r3, #1
2405dab4:	d103      	bne.n	2405dabe <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
2405dab6:	687b      	ldr	r3, [r7, #4]
2405dab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2405daba:	2b00      	cmp	r3, #0
2405dabc:	d001      	beq.n	2405dac2 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
2405dabe:	2301      	movs	r3, #1
2405dac0:	e1de      	b.n	2405de80 <HAL_SAI_Init+0x3f8>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2405dac2:	687b      	ldr	r3, [r7, #4]
2405dac4:	681b      	ldr	r3, [r3, #0]
2405dac6:	4a8d      	ldr	r2, [pc, #564]	; (2405dcfc <HAL_SAI_Init+0x274>)
2405dac8:	4293      	cmp	r3, r2
2405daca:	d004      	beq.n	2405dad6 <HAL_SAI_Init+0x4e>
2405dacc:	687b      	ldr	r3, [r7, #4]
2405dace:	681b      	ldr	r3, [r3, #0]
2405dad0:	4a8b      	ldr	r2, [pc, #556]	; (2405dd00 <HAL_SAI_Init+0x278>)
2405dad2:	4293      	cmp	r3, r2
2405dad4:	d102      	bne.n	2405dadc <HAL_SAI_Init+0x54>
  {
    SaiBaseAddress = SAI1;
2405dad6:	4b8b      	ldr	r3, [pc, #556]	; (2405dd04 <HAL_SAI_Init+0x27c>)
2405dad8:	61bb      	str	r3, [r7, #24]
2405dada:	e00e      	b.n	2405dafa <HAL_SAI_Init+0x72>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2405dadc:	687b      	ldr	r3, [r7, #4]
2405dade:	681b      	ldr	r3, [r3, #0]
2405dae0:	4a89      	ldr	r2, [pc, #548]	; (2405dd08 <HAL_SAI_Init+0x280>)
2405dae2:	4293      	cmp	r3, r2
2405dae4:	d004      	beq.n	2405daf0 <HAL_SAI_Init+0x68>
2405dae6:	687b      	ldr	r3, [r7, #4]
2405dae8:	681b      	ldr	r3, [r3, #0]
2405daea:	4a88      	ldr	r2, [pc, #544]	; (2405dd0c <HAL_SAI_Init+0x284>)
2405daec:	4293      	cmp	r3, r2
2405daee:	d102      	bne.n	2405daf6 <HAL_SAI_Init+0x6e>
  {
    SaiBaseAddress = SAI2;
2405daf0:	4b87      	ldr	r3, [pc, #540]	; (2405dd10 <HAL_SAI_Init+0x288>)
2405daf2:	61bb      	str	r3, [r7, #24]
2405daf4:	e001      	b.n	2405dafa <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
2405daf6:	2301      	movs	r3, #1
2405daf8:	e1c2      	b.n	2405de80 <HAL_SAI_Init+0x3f8>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
2405dafa:	687b      	ldr	r3, [r7, #4]
2405dafc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405db00:	b2db      	uxtb	r3, r3
2405db02:	2b00      	cmp	r3, #0
2405db04:	d106      	bne.n	2405db14 <HAL_SAI_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
2405db06:	687b      	ldr	r3, [r7, #4]
2405db08:	2200      	movs	r2, #0
2405db0a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
2405db0e:	6878      	ldr	r0, [r7, #4]
2405db10:	f7f4 fde6 	bl	240526e0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
2405db14:	6878      	ldr	r0, [r7, #4]
2405db16:	f000 fe47 	bl	2405e7a8 <SAI_Disable>
2405db1a:	4603      	mov	r3, r0
2405db1c:	2b00      	cmp	r3, #0
2405db1e:	d001      	beq.n	2405db24 <HAL_SAI_Init+0x9c>
  {
    return HAL_ERROR;
2405db20:	2301      	movs	r3, #1
2405db22:	e1ad      	b.n	2405de80 <HAL_SAI_Init+0x3f8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
2405db24:	687b      	ldr	r3, [r7, #4]
2405db26:	2202      	movs	r2, #2
2405db28:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
2405db2c:	687b      	ldr	r3, [r7, #4]
2405db2e:	68db      	ldr	r3, [r3, #12]
2405db30:	2b02      	cmp	r3, #2
2405db32:	d00c      	beq.n	2405db4e <HAL_SAI_Init+0xc6>
2405db34:	2b02      	cmp	r3, #2
2405db36:	d80d      	bhi.n	2405db54 <HAL_SAI_Init+0xcc>
2405db38:	2b00      	cmp	r3, #0
2405db3a:	d002      	beq.n	2405db42 <HAL_SAI_Init+0xba>
2405db3c:	2b01      	cmp	r3, #1
2405db3e:	d003      	beq.n	2405db48 <HAL_SAI_Init+0xc0>
2405db40:	e008      	b.n	2405db54 <HAL_SAI_Init+0xcc>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
2405db42:	2300      	movs	r3, #0
2405db44:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405db46:	e008      	b.n	2405db5a <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
2405db48:	2310      	movs	r3, #16
2405db4a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405db4c:	e005      	b.n	2405db5a <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
2405db4e:	2320      	movs	r3, #32
2405db50:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405db52:	e002      	b.n	2405db5a <HAL_SAI_Init+0xd2>
    default:
      tmpregisterGCR = 0;
2405db54:	2300      	movs	r3, #0
2405db56:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405db58:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
2405db5a:	687b      	ldr	r3, [r7, #4]
2405db5c:	689b      	ldr	r3, [r3, #8]
2405db5e:	2b03      	cmp	r3, #3
2405db60:	d81d      	bhi.n	2405db9e <HAL_SAI_Init+0x116>
2405db62:	a201      	add	r2, pc, #4	; (adr r2, 2405db68 <HAL_SAI_Init+0xe0>)
2405db64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405db68:	2405db79 	.word	0x2405db79
2405db6c:	2405db7f 	.word	0x2405db7f
2405db70:	2405db87 	.word	0x2405db87
2405db74:	2405db8f 	.word	0x2405db8f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
2405db78:	2300      	movs	r3, #0
2405db7a:	61fb      	str	r3, [r7, #28]
      break;
2405db7c:	e012      	b.n	2405dba4 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
2405db7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
2405db82:	61fb      	str	r3, [r7, #28]
      break;
2405db84:	e00e      	b.n	2405dba4 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
2405db86:	f44f 6300 	mov.w	r3, #2048	; 0x800
2405db8a:	61fb      	str	r3, [r7, #28]
      break;
2405db8c:	e00a      	b.n	2405dba4 <HAL_SAI_Init+0x11c>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
2405db8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
2405db92:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
2405db94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405db96:	f043 0301 	orr.w	r3, r3, #1
2405db9a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405db9c:	e002      	b.n	2405dba4 <HAL_SAI_Init+0x11c>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
      break;
#endif /* SAI4 */
    default:
      syncen_bits = 0;
2405db9e:	2300      	movs	r3, #0
2405dba0:	61fb      	str	r3, [r7, #28]
      break;
2405dba2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
2405dba4:	69bb      	ldr	r3, [r7, #24]
2405dba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2405dba8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
2405dbaa:	687b      	ldr	r3, [r7, #4]
2405dbac:	6a1b      	ldr	r3, [r3, #32]
2405dbae:	2b00      	cmp	r3, #0
2405dbb0:	f000 808a 	beq.w	2405dcc8 <HAL_SAI_Init+0x240>
  {
    uint32_t freq = 0;
2405dbb4:	2300      	movs	r3, #0
2405dbb6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2405dbb8:	687b      	ldr	r3, [r7, #4]
2405dbba:	681b      	ldr	r3, [r3, #0]
2405dbbc:	4a4f      	ldr	r2, [pc, #316]	; (2405dcfc <HAL_SAI_Init+0x274>)
2405dbbe:	4293      	cmp	r3, r2
2405dbc0:	d004      	beq.n	2405dbcc <HAL_SAI_Init+0x144>
2405dbc2:	687b      	ldr	r3, [r7, #4]
2405dbc4:	681b      	ldr	r3, [r3, #0]
2405dbc6:	4a4e      	ldr	r2, [pc, #312]	; (2405dd00 <HAL_SAI_Init+0x278>)
2405dbc8:	4293      	cmp	r3, r2
2405dbca:	d106      	bne.n	2405dbda <HAL_SAI_Init+0x152>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
2405dbcc:	f44f 7080 	mov.w	r0, #256	; 0x100
2405dbd0:	f04f 0100 	mov.w	r1, #0
2405dbd4:	f7fe f9b2 	bl	2405bf3c <HAL_RCCEx_GetPeriphCLKFreq>
2405dbd8:	6178      	str	r0, [r7, #20]
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }
#else
    if (hsai->Instance == SAI2_Block_A)
2405dbda:	687b      	ldr	r3, [r7, #4]
2405dbdc:	681b      	ldr	r3, [r3, #0]
2405dbde:	4a4a      	ldr	r2, [pc, #296]	; (2405dd08 <HAL_SAI_Init+0x280>)
2405dbe0:	4293      	cmp	r3, r2
2405dbe2:	d106      	bne.n	2405dbf2 <HAL_SAI_Init+0x16a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2A);
2405dbe4:	f44f 7000 	mov.w	r0, #512	; 0x200
2405dbe8:	f04f 0100 	mov.w	r1, #0
2405dbec:	f7fe f9a6 	bl	2405bf3c <HAL_RCCEx_GetPeriphCLKFreq>
2405dbf0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI2_Block_B)
2405dbf2:	687b      	ldr	r3, [r7, #4]
2405dbf4:	681b      	ldr	r3, [r3, #0]
2405dbf6:	4a45      	ldr	r2, [pc, #276]	; (2405dd0c <HAL_SAI_Init+0x284>)
2405dbf8:	4293      	cmp	r3, r2
2405dbfa:	d106      	bne.n	2405dc0a <HAL_SAI_Init+0x182>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2B);
2405dbfc:	f44f 6080 	mov.w	r0, #1024	; 0x400
2405dc00:	f04f 0100 	mov.w	r1, #0
2405dc04:	f7fe f99a 	bl	2405bf3c <HAL_RCCEx_GetPeriphCLKFreq>
2405dc08:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
2405dc0a:	687b      	ldr	r3, [r7, #4]
2405dc0c:	699b      	ldr	r3, [r3, #24]
2405dc0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
2405dc12:	d120      	bne.n	2405dc56 <HAL_SAI_Init+0x1ce>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2405dc14:	687b      	ldr	r3, [r7, #4]
2405dc16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405dc18:	2b04      	cmp	r3, #4
2405dc1a:	d102      	bne.n	2405dc22 <HAL_SAI_Init+0x19a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
2405dc1c:	2340      	movs	r3, #64	; 0x40
2405dc1e:	60fb      	str	r3, [r7, #12]
2405dc20:	e00a      	b.n	2405dc38 <HAL_SAI_Init+0x1b0>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
2405dc22:	687b      	ldr	r3, [r7, #4]
2405dc24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405dc26:	2b08      	cmp	r3, #8
2405dc28:	d103      	bne.n	2405dc32 <HAL_SAI_Init+0x1aa>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
2405dc2a:	f44f 7380 	mov.w	r3, #256	; 0x100
2405dc2e:	60fb      	str	r3, [r7, #12]
2405dc30:	e002      	b.n	2405dc38 <HAL_SAI_Init+0x1b0>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
2405dc32:	687b      	ldr	r3, [r7, #4]
2405dc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405dc36:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
2405dc38:	697a      	ldr	r2, [r7, #20]
2405dc3a:	4613      	mov	r3, r2
2405dc3c:	009b      	lsls	r3, r3, #2
2405dc3e:	4413      	add	r3, r2
2405dc40:	005b      	lsls	r3, r3, #1
2405dc42:	4619      	mov	r1, r3
2405dc44:	687b      	ldr	r3, [r7, #4]
2405dc46:	6a1b      	ldr	r3, [r3, #32]
2405dc48:	68fa      	ldr	r2, [r7, #12]
2405dc4a:	fb02 f303 	mul.w	r3, r2, r3
2405dc4e:	fbb1 f3f3 	udiv	r3, r1, r3
2405dc52:	613b      	str	r3, [r7, #16]
2405dc54:	e017      	b.n	2405dc86 <HAL_SAI_Init+0x1fe>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2405dc56:	687b      	ldr	r3, [r7, #4]
2405dc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405dc5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2405dc5e:	d101      	bne.n	2405dc64 <HAL_SAI_Init+0x1dc>
2405dc60:	2302      	movs	r3, #2
2405dc62:	e000      	b.n	2405dc66 <HAL_SAI_Init+0x1de>
2405dc64:	2301      	movs	r3, #1
2405dc66:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2405dc68:	697a      	ldr	r2, [r7, #20]
2405dc6a:	4613      	mov	r3, r2
2405dc6c:	009b      	lsls	r3, r3, #2
2405dc6e:	4413      	add	r3, r2
2405dc70:	005b      	lsls	r3, r3, #1
2405dc72:	4619      	mov	r1, r3
2405dc74:	687b      	ldr	r3, [r7, #4]
2405dc76:	6a1b      	ldr	r3, [r3, #32]
2405dc78:	68ba      	ldr	r2, [r7, #8]
2405dc7a:	fb02 f303 	mul.w	r3, r2, r3
2405dc7e:	021b      	lsls	r3, r3, #8
2405dc80:	fbb1 f3f3 	udiv	r3, r1, r3
2405dc84:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
2405dc86:	693b      	ldr	r3, [r7, #16]
2405dc88:	4a22      	ldr	r2, [pc, #136]	; (2405dd14 <HAL_SAI_Init+0x28c>)
2405dc8a:	fba2 2303 	umull	r2, r3, r2, r3
2405dc8e:	08da      	lsrs	r2, r3, #3
2405dc90:	687b      	ldr	r3, [r7, #4]
2405dc92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
2405dc94:	6939      	ldr	r1, [r7, #16]
2405dc96:	4b1f      	ldr	r3, [pc, #124]	; (2405dd14 <HAL_SAI_Init+0x28c>)
2405dc98:	fba3 2301 	umull	r2, r3, r3, r1
2405dc9c:	08da      	lsrs	r2, r3, #3
2405dc9e:	4613      	mov	r3, r2
2405dca0:	009b      	lsls	r3, r3, #2
2405dca2:	4413      	add	r3, r2
2405dca4:	005b      	lsls	r3, r3, #1
2405dca6:	1aca      	subs	r2, r1, r3
2405dca8:	2a08      	cmp	r2, #8
2405dcaa:	d904      	bls.n	2405dcb6 <HAL_SAI_Init+0x22e>
    {
      hsai->Init.Mckdiv += 1U;
2405dcac:	687b      	ldr	r3, [r7, #4]
2405dcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405dcb0:	1c5a      	adds	r2, r3, #1
2405dcb2:	687b      	ldr	r3, [r7, #4]
2405dcb4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2405dcb6:	687b      	ldr	r3, [r7, #4]
2405dcb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405dcba:	2b04      	cmp	r3, #4
2405dcbc:	d104      	bne.n	2405dcc8 <HAL_SAI_Init+0x240>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
2405dcbe:	687b      	ldr	r3, [r7, #4]
2405dcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405dcc2:	085a      	lsrs	r2, r3, #1
2405dcc4:	687b      	ldr	r3, [r7, #4]
2405dcc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405dcc8:	687b      	ldr	r3, [r7, #4]
2405dcca:	685b      	ldr	r3, [r3, #4]
2405dccc:	2b00      	cmp	r3, #0
2405dcce:	d003      	beq.n	2405dcd8 <HAL_SAI_Init+0x250>
2405dcd0:	687b      	ldr	r3, [r7, #4]
2405dcd2:	685b      	ldr	r3, [r3, #4]
2405dcd4:	2b02      	cmp	r3, #2
2405dcd6:	d109      	bne.n	2405dcec <HAL_SAI_Init+0x264>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2405dcd8:	687b      	ldr	r3, [r7, #4]
2405dcda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405dcdc:	2b01      	cmp	r3, #1
2405dcde:	d101      	bne.n	2405dce4 <HAL_SAI_Init+0x25c>
2405dce0:	2300      	movs	r3, #0
2405dce2:	e001      	b.n	2405dce8 <HAL_SAI_Init+0x260>
2405dce4:	f44f 7300 	mov.w	r3, #512	; 0x200
2405dce8:	623b      	str	r3, [r7, #32]
2405dcea:	e017      	b.n	2405dd1c <HAL_SAI_Init+0x294>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
2405dcec:	687b      	ldr	r3, [r7, #4]
2405dcee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405dcf0:	2b01      	cmp	r3, #1
2405dcf2:	d111      	bne.n	2405dd18 <HAL_SAI_Init+0x290>
2405dcf4:	f44f 7300 	mov.w	r3, #512	; 0x200
2405dcf8:	e00f      	b.n	2405dd1a <HAL_SAI_Init+0x292>
2405dcfa:	bf00      	nop
2405dcfc:	40015804 	.word	0x40015804
2405dd00:	40015824 	.word	0x40015824
2405dd04:	40015800 	.word	0x40015800
2405dd08:	40015c04 	.word	0x40015c04
2405dd0c:	40015c24 	.word	0x40015c24
2405dd10:	40015c00 	.word	0x40015c00
2405dd14:	cccccccd 	.word	0xcccccccd
2405dd18:	2300      	movs	r3, #0
2405dd1a:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2405dd1c:	687b      	ldr	r3, [r7, #4]
2405dd1e:	681b      	ldr	r3, [r3, #0]
2405dd20:	6819      	ldr	r1, [r3, #0]
2405dd22:	687b      	ldr	r3, [r7, #4]
2405dd24:	681a      	ldr	r2, [r3, #0]
2405dd26:	4b58      	ldr	r3, [pc, #352]	; (2405de88 <HAL_SAI_Init+0x400>)
2405dd28:	400b      	ands	r3, r1
2405dd2a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2405dd2c:	687b      	ldr	r3, [r7, #4]
2405dd2e:	681b      	ldr	r3, [r3, #0]
2405dd30:	6819      	ldr	r1, [r3, #0]
2405dd32:	687b      	ldr	r3, [r7, #4]
2405dd34:	685a      	ldr	r2, [r3, #4]
2405dd36:	687b      	ldr	r3, [r7, #4]
2405dd38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405dd3a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
2405dd3c:	687b      	ldr	r3, [r7, #4]
2405dd3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2405dd40:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
2405dd42:	687b      	ldr	r3, [r7, #4]
2405dd44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405dd46:	431a      	orrs	r2, r3
2405dd48:	6a3b      	ldr	r3, [r7, #32]
2405dd4a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
2405dd4c:	69fb      	ldr	r3, [r7, #28]
2405dd4e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2405dd50:	687b      	ldr	r3, [r7, #4]
2405dd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
2405dd54:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2405dd56:	687b      	ldr	r3, [r7, #4]
2405dd58:	695b      	ldr	r3, [r3, #20]
2405dd5a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2405dd5c:	687b      	ldr	r3, [r7, #4]
2405dd5e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2405dd60:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2405dd62:	687b      	ldr	r3, [r7, #4]
2405dd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405dd66:	051b      	lsls	r3, r3, #20
2405dd68:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
2405dd6a:	687b      	ldr	r3, [r7, #4]
2405dd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2405dd6e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
2405dd70:	687b      	ldr	r3, [r7, #4]
2405dd72:	691b      	ldr	r3, [r3, #16]
2405dd74:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2405dd76:	687b      	ldr	r3, [r7, #4]
2405dd78:	681b      	ldr	r3, [r3, #0]
2405dd7a:	430a      	orrs	r2, r1
2405dd7c:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
2405dd7e:	687b      	ldr	r3, [r7, #4]
2405dd80:	681b      	ldr	r3, [r3, #0]
2405dd82:	6859      	ldr	r1, [r3, #4]
2405dd84:	687b      	ldr	r3, [r7, #4]
2405dd86:	681a      	ldr	r2, [r3, #0]
2405dd88:	4b40      	ldr	r3, [pc, #256]	; (2405de8c <HAL_SAI_Init+0x404>)
2405dd8a:	400b      	ands	r3, r1
2405dd8c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
2405dd8e:	687b      	ldr	r3, [r7, #4]
2405dd90:	681b      	ldr	r3, [r3, #0]
2405dd92:	6859      	ldr	r1, [r3, #4]
2405dd94:	687b      	ldr	r3, [r7, #4]
2405dd96:	69da      	ldr	r2, [r3, #28]
2405dd98:	687b      	ldr	r3, [r7, #4]
2405dd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405dd9c:	431a      	orrs	r2, r3
2405dd9e:	687b      	ldr	r3, [r7, #4]
2405dda0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405dda2:	431a      	orrs	r2, r3
2405dda4:	687b      	ldr	r3, [r7, #4]
2405dda6:	681b      	ldr	r3, [r3, #0]
2405dda8:	430a      	orrs	r2, r1
2405ddaa:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
2405ddac:	687b      	ldr	r3, [r7, #4]
2405ddae:	681b      	ldr	r3, [r3, #0]
2405ddb0:	6899      	ldr	r1, [r3, #8]
2405ddb2:	687b      	ldr	r3, [r7, #4]
2405ddb4:	681a      	ldr	r2, [r3, #0]
2405ddb6:	4b36      	ldr	r3, [pc, #216]	; (2405de90 <HAL_SAI_Init+0x408>)
2405ddb8:	400b      	ands	r3, r1
2405ddba:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2405ddbc:	687b      	ldr	r3, [r7, #4]
2405ddbe:	681b      	ldr	r3, [r3, #0]
2405ddc0:	6899      	ldr	r1, [r3, #8]
2405ddc2:	687b      	ldr	r3, [r7, #4]
2405ddc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405ddc6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
2405ddc8:	687b      	ldr	r3, [r7, #4]
2405ddca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2405ddcc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
2405ddce:	687b      	ldr	r3, [r7, #4]
2405ddd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
2405ddd2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
2405ddd4:	687b      	ldr	r3, [r7, #4]
2405ddd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
2405ddd8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
2405ddda:	687b      	ldr	r3, [r7, #4]
2405dddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405ddde:	3b01      	subs	r3, #1
2405dde0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
2405dde2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2405dde4:	687b      	ldr	r3, [r7, #4]
2405dde6:	681b      	ldr	r3, [r3, #0]
2405dde8:	430a      	orrs	r2, r1
2405ddea:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2405ddec:	687b      	ldr	r3, [r7, #4]
2405ddee:	681b      	ldr	r3, [r3, #0]
2405ddf0:	68d9      	ldr	r1, [r3, #12]
2405ddf2:	687b      	ldr	r3, [r7, #4]
2405ddf4:	681a      	ldr	r2, [r3, #0]
2405ddf6:	f24f 0320 	movw	r3, #61472	; 0xf020
2405ddfa:	400b      	ands	r3, r1
2405ddfc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2405ddfe:	687b      	ldr	r3, [r7, #4]
2405de00:	681b      	ldr	r3, [r3, #0]
2405de02:	68d9      	ldr	r1, [r3, #12]
2405de04:	687b      	ldr	r3, [r7, #4]
2405de06:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2405de08:	687b      	ldr	r3, [r7, #4]
2405de0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405de0c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2405de0e:	687b      	ldr	r3, [r7, #4]
2405de10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405de12:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2405de14:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2405de16:	687b      	ldr	r3, [r7, #4]
2405de18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405de1a:	3b01      	subs	r3, #1
2405de1c:	021b      	lsls	r3, r3, #8
2405de1e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2405de20:	687b      	ldr	r3, [r7, #4]
2405de22:	681b      	ldr	r3, [r3, #0]
2405de24:	430a      	orrs	r2, r1
2405de26:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
#else
  if (hsai->Instance == SAI1_Block_A)
2405de28:	687b      	ldr	r3, [r7, #4]
2405de2a:	681b      	ldr	r3, [r3, #0]
2405de2c:	4a19      	ldr	r2, [pc, #100]	; (2405de94 <HAL_SAI_Init+0x40c>)
2405de2e:	4293      	cmp	r3, r2
2405de30:	d119      	bne.n	2405de66 <HAL_SAI_Init+0x3de>
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
2405de32:	69bb      	ldr	r3, [r7, #24]
2405de34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405de36:	f023 0201 	bic.w	r2, r3, #1
2405de3a:	69bb      	ldr	r3, [r7, #24]
2405de3c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
2405de3e:	687b      	ldr	r3, [r7, #4]
2405de40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2405de44:	2b01      	cmp	r3, #1
2405de46:	d10e      	bne.n	2405de66 <HAL_SAI_Init+0x3de>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2405de48:	687b      	ldr	r3, [r7, #4]
2405de4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
2405de4c:	687b      	ldr	r3, [r7, #4]
2405de4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405de50:	3b01      	subs	r3, #1
2405de52:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2405de54:	431a      	orrs	r2, r3
2405de56:	69bb      	ldr	r3, [r7, #24]
2405de58:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
2405de5a:	69bb      	ldr	r3, [r7, #24]
2405de5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405de5e:	f043 0201 	orr.w	r2, r3, #1
2405de62:	69bb      	ldr	r3, [r7, #24]
2405de64:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2405de66:	687b      	ldr	r3, [r7, #4]
2405de68:	2200      	movs	r2, #0
2405de6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
2405de6e:	687b      	ldr	r3, [r7, #4]
2405de70:	2201      	movs	r2, #1
2405de72:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
2405de76:	687b      	ldr	r3, [r7, #4]
2405de78:	2200      	movs	r2, #0
2405de7a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
2405de7e:	2300      	movs	r3, #0
}
2405de80:	4618      	mov	r0, r3
2405de82:	3728      	adds	r7, #40	; 0x28
2405de84:	46bd      	mov	sp, r7
2405de86:	bd80      	pop	{r7, pc}
2405de88:	f005c010 	.word	0xf005c010
2405de8c:	ffff1ff0 	.word	0xffff1ff0
2405de90:	fff88000 	.word	0xfff88000
2405de94:	40015804 	.word	0x40015804

2405de98 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
2405de98:	b580      	push	{r7, lr}
2405de9a:	b084      	sub	sp, #16
2405de9c:	af00      	add	r7, sp, #0
2405de9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405dea0:	2300      	movs	r3, #0
2405dea2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
2405dea4:	687b      	ldr	r3, [r7, #4]
2405dea6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
2405deaa:	2b01      	cmp	r3, #1
2405deac:	d101      	bne.n	2405deb2 <HAL_SAI_Abort+0x1a>
2405deae:	2302      	movs	r3, #2
2405deb0:	e07d      	b.n	2405dfae <HAL_SAI_Abort+0x116>
2405deb2:	687b      	ldr	r3, [r7, #4]
2405deb4:	2201      	movs	r2, #1
2405deb6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405deba:	687b      	ldr	r3, [r7, #4]
2405debc:	681b      	ldr	r3, [r3, #0]
2405debe:	681b      	ldr	r3, [r3, #0]
2405dec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405dec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405dec8:	d14f      	bne.n	2405df6a <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2405deca:	687b      	ldr	r3, [r7, #4]
2405decc:	681b      	ldr	r3, [r3, #0]
2405dece:	681a      	ldr	r2, [r3, #0]
2405ded0:	687b      	ldr	r3, [r7, #4]
2405ded2:	681b      	ldr	r3, [r3, #0]
2405ded4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2405ded8:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
2405deda:	687b      	ldr	r3, [r7, #4]
2405dedc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405dee0:	b2db      	uxtb	r3, r3
2405dee2:	2b12      	cmp	r3, #18
2405dee4:	d11d      	bne.n	2405df22 <HAL_SAI_Abort+0x8a>
2405dee6:	687b      	ldr	r3, [r7, #4]
2405dee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405deec:	2b00      	cmp	r3, #0
2405deee:	d018      	beq.n	2405df22 <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
2405def0:	687b      	ldr	r3, [r7, #4]
2405def2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405def6:	4618      	mov	r0, r3
2405def8:	f7f7 fc80 	bl	240557fc <HAL_DMA_Abort>
2405defc:	4603      	mov	r3, r0
2405defe:	2b00      	cmp	r3, #0
2405df00:	d00f      	beq.n	2405df22 <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2405df02:	687b      	ldr	r3, [r7, #4]
2405df04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405df08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405df0a:	2b80      	cmp	r3, #128	; 0x80
2405df0c:	d009      	beq.n	2405df22 <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
2405df0e:	2301      	movs	r3, #1
2405df10:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405df12:	687b      	ldr	r3, [r7, #4]
2405df14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405df18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405df1c:	687b      	ldr	r3, [r7, #4]
2405df1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
2405df22:	687b      	ldr	r3, [r7, #4]
2405df24:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405df28:	b2db      	uxtb	r3, r3
2405df2a:	2b22      	cmp	r3, #34	; 0x22
2405df2c:	d11d      	bne.n	2405df6a <HAL_SAI_Abort+0xd2>
2405df2e:	687b      	ldr	r3, [r7, #4]
2405df30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405df34:	2b00      	cmp	r3, #0
2405df36:	d018      	beq.n	2405df6a <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
2405df38:	687b      	ldr	r3, [r7, #4]
2405df3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405df3e:	4618      	mov	r0, r3
2405df40:	f7f7 fc5c 	bl	240557fc <HAL_DMA_Abort>
2405df44:	4603      	mov	r3, r0
2405df46:	2b00      	cmp	r3, #0
2405df48:	d00f      	beq.n	2405df6a <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2405df4a:	687b      	ldr	r3, [r7, #4]
2405df4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405df50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405df52:	2b80      	cmp	r3, #128	; 0x80
2405df54:	d009      	beq.n	2405df6a <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
2405df56:	2301      	movs	r3, #1
2405df58:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405df5a:	687b      	ldr	r3, [r7, #4]
2405df5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405df60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405df64:	687b      	ldr	r3, [r7, #4]
2405df66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
2405df6a:	687b      	ldr	r3, [r7, #4]
2405df6c:	681b      	ldr	r3, [r3, #0]
2405df6e:	2200      	movs	r2, #0
2405df70:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2405df72:	687b      	ldr	r3, [r7, #4]
2405df74:	681b      	ldr	r3, [r3, #0]
2405df76:	f04f 32ff 	mov.w	r2, #4294967295
2405df7a:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
2405df7c:	6878      	ldr	r0, [r7, #4]
2405df7e:	f000 fc13 	bl	2405e7a8 <SAI_Disable>
2405df82:	4603      	mov	r3, r0
2405df84:	2b00      	cmp	r3, #0
2405df86:	d001      	beq.n	2405df8c <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
2405df88:	2301      	movs	r3, #1
2405df8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2405df8c:	687b      	ldr	r3, [r7, #4]
2405df8e:	681b      	ldr	r3, [r3, #0]
2405df90:	685a      	ldr	r2, [r3, #4]
2405df92:	687b      	ldr	r3, [r7, #4]
2405df94:	681b      	ldr	r3, [r3, #0]
2405df96:	f042 0208 	orr.w	r2, r2, #8
2405df9a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
2405df9c:	687b      	ldr	r3, [r7, #4]
2405df9e:	2201      	movs	r2, #1
2405dfa0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
2405dfa4:	687b      	ldr	r3, [r7, #4]
2405dfa6:	2200      	movs	r2, #0
2405dfa8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
2405dfac:	7bfb      	ldrb	r3, [r7, #15]
}
2405dfae:	4618      	mov	r0, r3
2405dfb0:	3710      	adds	r7, #16
2405dfb2:	46bd      	mov	sp, r7
2405dfb4:	bd80      	pop	{r7, pc}
	...

2405dfb8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
2405dfb8:	b580      	push	{r7, lr}
2405dfba:	b086      	sub	sp, #24
2405dfbc:	af00      	add	r7, sp, #0
2405dfbe:	60f8      	str	r0, [r7, #12]
2405dfc0:	60b9      	str	r1, [r7, #8]
2405dfc2:	4613      	mov	r3, r2
2405dfc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
2405dfc6:	f7f4 fea5 	bl	24052d14 <HAL_GetTick>
2405dfca:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
2405dfcc:	68bb      	ldr	r3, [r7, #8]
2405dfce:	2b00      	cmp	r3, #0
2405dfd0:	d002      	beq.n	2405dfd8 <HAL_SAI_Transmit_DMA+0x20>
2405dfd2:	88fb      	ldrh	r3, [r7, #6]
2405dfd4:	2b00      	cmp	r3, #0
2405dfd6:	d101      	bne.n	2405dfdc <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
2405dfd8:	2301      	movs	r3, #1
2405dfda:	e098      	b.n	2405e10e <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
2405dfdc:	68fb      	ldr	r3, [r7, #12]
2405dfde:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405dfe2:	b2db      	uxtb	r3, r3
2405dfe4:	2b01      	cmp	r3, #1
2405dfe6:	f040 8091 	bne.w	2405e10c <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
2405dfea:	68fb      	ldr	r3, [r7, #12]
2405dfec:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
2405dff0:	2b01      	cmp	r3, #1
2405dff2:	d101      	bne.n	2405dff8 <HAL_SAI_Transmit_DMA+0x40>
2405dff4:	2302      	movs	r3, #2
2405dff6:	e08a      	b.n	2405e10e <HAL_SAI_Transmit_DMA+0x156>
2405dff8:	68fb      	ldr	r3, [r7, #12]
2405dffa:	2201      	movs	r2, #1
2405dffc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
2405e000:	68fb      	ldr	r3, [r7, #12]
2405e002:	68ba      	ldr	r2, [r7, #8]
2405e004:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
2405e006:	68fb      	ldr	r3, [r7, #12]
2405e008:	88fa      	ldrh	r2, [r7, #6]
2405e00a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
2405e00e:	68fb      	ldr	r3, [r7, #12]
2405e010:	88fa      	ldrh	r2, [r7, #6]
2405e012:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2405e016:	68fb      	ldr	r3, [r7, #12]
2405e018:	2200      	movs	r2, #0
2405e01a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
2405e01e:	68fb      	ldr	r3, [r7, #12]
2405e020:	2212      	movs	r2, #18
2405e022:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2405e026:	68fb      	ldr	r3, [r7, #12]
2405e028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e02c:	4a3a      	ldr	r2, [pc, #232]	; (2405e118 <HAL_SAI_Transmit_DMA+0x160>)
2405e02e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
2405e030:	68fb      	ldr	r3, [r7, #12]
2405e032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e036:	4a39      	ldr	r2, [pc, #228]	; (2405e11c <HAL_SAI_Transmit_DMA+0x164>)
2405e038:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
2405e03a:	68fb      	ldr	r3, [r7, #12]
2405e03c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e040:	4a37      	ldr	r2, [pc, #220]	; (2405e120 <HAL_SAI_Transmit_DMA+0x168>)
2405e042:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
2405e044:	68fb      	ldr	r3, [r7, #12]
2405e046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e04a:	2200      	movs	r2, #0
2405e04c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2405e04e:	68fb      	ldr	r3, [r7, #12]
2405e050:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
2405e054:	68fb      	ldr	r3, [r7, #12]
2405e056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2405e058:	4619      	mov	r1, r3
2405e05a:	68fb      	ldr	r3, [r7, #12]
2405e05c:	681b      	ldr	r3, [r3, #0]
2405e05e:	331c      	adds	r3, #28
2405e060:	461a      	mov	r2, r3
2405e062:	68fb      	ldr	r3, [r7, #12]
2405e064:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
2405e068:	f7f7 f95e 	bl	24055328 <HAL_DMA_Start_IT>
2405e06c:	4603      	mov	r3, r0
2405e06e:	2b00      	cmp	r3, #0
2405e070:	d005      	beq.n	2405e07e <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
2405e072:	68fb      	ldr	r3, [r7, #12]
2405e074:	2200      	movs	r2, #0
2405e076:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
2405e07a:	2301      	movs	r3, #1
2405e07c:	e047      	b.n	2405e10e <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2405e07e:	2100      	movs	r1, #0
2405e080:	68f8      	ldr	r0, [r7, #12]
2405e082:	f000 fb59 	bl	2405e738 <SAI_InterruptFlag>
2405e086:	4601      	mov	r1, r0
2405e088:	68fb      	ldr	r3, [r7, #12]
2405e08a:	681b      	ldr	r3, [r3, #0]
2405e08c:	691a      	ldr	r2, [r3, #16]
2405e08e:	68fb      	ldr	r3, [r7, #12]
2405e090:	681b      	ldr	r3, [r3, #0]
2405e092:	430a      	orrs	r2, r1
2405e094:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2405e096:	68fb      	ldr	r3, [r7, #12]
2405e098:	681b      	ldr	r3, [r3, #0]
2405e09a:	681a      	ldr	r2, [r3, #0]
2405e09c:	68fb      	ldr	r3, [r7, #12]
2405e09e:	681b      	ldr	r3, [r3, #0]
2405e0a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2405e0a4:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2405e0a6:	e015      	b.n	2405e0d4 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
2405e0a8:	f7f4 fe34 	bl	24052d14 <HAL_GetTick>
2405e0ac:	4602      	mov	r2, r0
2405e0ae:	697b      	ldr	r3, [r7, #20]
2405e0b0:	1ad3      	subs	r3, r2, r3
2405e0b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405e0b6:	d90d      	bls.n	2405e0d4 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2405e0b8:	68fb      	ldr	r3, [r7, #12]
2405e0ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e0be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2405e0c2:	68fb      	ldr	r3, [r7, #12]
2405e0c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
2405e0c8:	68fb      	ldr	r3, [r7, #12]
2405e0ca:	2200      	movs	r2, #0
2405e0cc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
2405e0d0:	2303      	movs	r3, #3
2405e0d2:	e01c      	b.n	2405e10e <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2405e0d4:	68fb      	ldr	r3, [r7, #12]
2405e0d6:	681b      	ldr	r3, [r3, #0]
2405e0d8:	695b      	ldr	r3, [r3, #20]
2405e0da:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
2405e0de:	2b00      	cmp	r3, #0
2405e0e0:	d0e2      	beq.n	2405e0a8 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2405e0e2:	68fb      	ldr	r3, [r7, #12]
2405e0e4:	681b      	ldr	r3, [r3, #0]
2405e0e6:	681b      	ldr	r3, [r3, #0]
2405e0e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405e0ec:	2b00      	cmp	r3, #0
2405e0ee:	d107      	bne.n	2405e100 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
2405e0f0:	68fb      	ldr	r3, [r7, #12]
2405e0f2:	681b      	ldr	r3, [r3, #0]
2405e0f4:	681a      	ldr	r2, [r3, #0]
2405e0f6:	68fb      	ldr	r3, [r7, #12]
2405e0f8:	681b      	ldr	r3, [r3, #0]
2405e0fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2405e0fe:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
2405e100:	68fb      	ldr	r3, [r7, #12]
2405e102:	2200      	movs	r2, #0
2405e104:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
2405e108:	2300      	movs	r3, #0
2405e10a:	e000      	b.n	2405e10e <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
2405e10c:	2302      	movs	r3, #2
  }
}
2405e10e:	4618      	mov	r0, r3
2405e110:	3718      	adds	r7, #24
2405e112:	46bd      	mov	sp, r7
2405e114:	bd80      	pop	{r7, pc}
2405e116:	bf00      	nop
2405e118:	2405e87d 	.word	0x2405e87d
2405e11c:	2405e81d 	.word	0x2405e81d
2405e120:	2405e899 	.word	0x2405e899

2405e124 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
2405e124:	b580      	push	{r7, lr}
2405e126:	b086      	sub	sp, #24
2405e128:	af00      	add	r7, sp, #0
2405e12a:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
2405e12c:	687b      	ldr	r3, [r7, #4]
2405e12e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405e132:	b2db      	uxtb	r3, r3
2405e134:	2b00      	cmp	r3, #0
2405e136:	f000 81a7 	beq.w	2405e488 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
2405e13a:	687b      	ldr	r3, [r7, #4]
2405e13c:	681b      	ldr	r3, [r3, #0]
2405e13e:	695b      	ldr	r3, [r3, #20]
2405e140:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
2405e142:	687b      	ldr	r3, [r7, #4]
2405e144:	681b      	ldr	r3, [r3, #0]
2405e146:	691b      	ldr	r3, [r3, #16]
2405e148:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
2405e14a:	687b      	ldr	r3, [r7, #4]
2405e14c:	681b      	ldr	r3, [r3, #0]
2405e14e:	681b      	ldr	r3, [r3, #0]
2405e150:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
2405e152:	697b      	ldr	r3, [r7, #20]
2405e154:	f003 0308 	and.w	r3, r3, #8
2405e158:	2b00      	cmp	r3, #0
2405e15a:	d00a      	beq.n	2405e172 <HAL_SAI_IRQHandler+0x4e>
2405e15c:	693b      	ldr	r3, [r7, #16]
2405e15e:	f003 0308 	and.w	r3, r3, #8
2405e162:	2b00      	cmp	r3, #0
2405e164:	d005      	beq.n	2405e172 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
2405e166:	687b      	ldr	r3, [r7, #4]
2405e168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2405e16c:	6878      	ldr	r0, [r7, #4]
2405e16e:	4798      	blx	r3
2405e170:	e18a      	b.n	2405e488 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
2405e172:	697b      	ldr	r3, [r7, #20]
2405e174:	f003 0301 	and.w	r3, r3, #1
2405e178:	2b00      	cmp	r3, #0
2405e17a:	d01e      	beq.n	2405e1ba <HAL_SAI_IRQHandler+0x96>
2405e17c:	693b      	ldr	r3, [r7, #16]
2405e17e:	f003 0301 	and.w	r3, r3, #1
2405e182:	2b00      	cmp	r3, #0
2405e184:	d019      	beq.n	2405e1ba <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
2405e186:	687b      	ldr	r3, [r7, #4]
2405e188:	681b      	ldr	r3, [r3, #0]
2405e18a:	2201      	movs	r2, #1
2405e18c:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
2405e18e:	687b      	ldr	r3, [r7, #4]
2405e190:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405e194:	b2db      	uxtb	r3, r3
2405e196:	2b22      	cmp	r3, #34	; 0x22
2405e198:	d101      	bne.n	2405e19e <HAL_SAI_IRQHandler+0x7a>
2405e19a:	2301      	movs	r3, #1
2405e19c:	e000      	b.n	2405e1a0 <HAL_SAI_IRQHandler+0x7c>
2405e19e:	2302      	movs	r3, #2
2405e1a0:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
2405e1a2:	687b      	ldr	r3, [r7, #4]
2405e1a4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
2405e1a8:	68bb      	ldr	r3, [r7, #8]
2405e1aa:	431a      	orrs	r2, r3
2405e1ac:	687b      	ldr	r3, [r7, #4]
2405e1ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
2405e1b2:	6878      	ldr	r0, [r7, #4]
2405e1b4:	f000 f982 	bl	2405e4bc <HAL_SAI_ErrorCallback>
2405e1b8:	e166      	b.n	2405e488 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
2405e1ba:	697b      	ldr	r3, [r7, #20]
2405e1bc:	f003 0302 	and.w	r3, r3, #2
2405e1c0:	2b00      	cmp	r3, #0
2405e1c2:	d013      	beq.n	2405e1ec <HAL_SAI_IRQHandler+0xc8>
2405e1c4:	693b      	ldr	r3, [r7, #16]
2405e1c6:	f003 0302 	and.w	r3, r3, #2
2405e1ca:	2b00      	cmp	r3, #0
2405e1cc:	d00e      	beq.n	2405e1ec <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
2405e1ce:	687b      	ldr	r3, [r7, #4]
2405e1d0:	681b      	ldr	r3, [r3, #0]
2405e1d2:	2202      	movs	r2, #2
2405e1d4:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
2405e1d6:	687b      	ldr	r3, [r7, #4]
2405e1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405e1dc:	2b00      	cmp	r3, #0
2405e1de:	f000 8153 	beq.w	2405e488 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
2405e1e2:	687b      	ldr	r3, [r7, #4]
2405e1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405e1e8:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
2405e1ea:	e14d      	b.n	2405e488 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
2405e1ec:	697b      	ldr	r3, [r7, #20]
2405e1ee:	f003 0320 	and.w	r3, r3, #32
2405e1f2:	2b00      	cmp	r3, #0
2405e1f4:	d05b      	beq.n	2405e2ae <HAL_SAI_IRQHandler+0x18a>
2405e1f6:	693b      	ldr	r3, [r7, #16]
2405e1f8:	f003 0320 	and.w	r3, r3, #32
2405e1fc:	2b00      	cmp	r3, #0
2405e1fe:	d056      	beq.n	2405e2ae <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
2405e200:	687b      	ldr	r3, [r7, #4]
2405e202:	681b      	ldr	r3, [r3, #0]
2405e204:	2220      	movs	r2, #32
2405e206:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
2405e208:	687b      	ldr	r3, [r7, #4]
2405e20a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e20e:	f043 0204 	orr.w	r2, r3, #4
2405e212:	687b      	ldr	r3, [r7, #4]
2405e214:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405e218:	68fb      	ldr	r3, [r7, #12]
2405e21a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405e21e:	2b00      	cmp	r3, #0
2405e220:	d03e      	beq.n	2405e2a0 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
2405e222:	687b      	ldr	r3, [r7, #4]
2405e224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e228:	2b00      	cmp	r3, #0
2405e22a:	d018      	beq.n	2405e25e <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2405e22c:	687b      	ldr	r3, [r7, #4]
2405e22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e232:	4a97      	ldr	r2, [pc, #604]	; (2405e490 <HAL_SAI_IRQHandler+0x36c>)
2405e234:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2405e236:	687b      	ldr	r3, [r7, #4]
2405e238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e23c:	4618      	mov	r0, r3
2405e23e:	f7f7 fdfb 	bl	24055e38 <HAL_DMA_Abort_IT>
2405e242:	4603      	mov	r3, r0
2405e244:	2b00      	cmp	r3, #0
2405e246:	d00a      	beq.n	2405e25e <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405e248:	687b      	ldr	r3, [r7, #4]
2405e24a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e24e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405e252:	687b      	ldr	r3, [r7, #4]
2405e254:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405e258:	6878      	ldr	r0, [r7, #4]
2405e25a:	f000 f92f 	bl	2405e4bc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2405e25e:	687b      	ldr	r3, [r7, #4]
2405e260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e264:	2b00      	cmp	r3, #0
2405e266:	f000 810a 	beq.w	2405e47e <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2405e26a:	687b      	ldr	r3, [r7, #4]
2405e26c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e270:	4a87      	ldr	r2, [pc, #540]	; (2405e490 <HAL_SAI_IRQHandler+0x36c>)
2405e272:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2405e274:	687b      	ldr	r3, [r7, #4]
2405e276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e27a:	4618      	mov	r0, r3
2405e27c:	f7f7 fddc 	bl	24055e38 <HAL_DMA_Abort_IT>
2405e280:	4603      	mov	r3, r0
2405e282:	2b00      	cmp	r3, #0
2405e284:	f000 80fb 	beq.w	2405e47e <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405e288:	687b      	ldr	r3, [r7, #4]
2405e28a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e28e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405e292:	687b      	ldr	r3, [r7, #4]
2405e294:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405e298:	6878      	ldr	r0, [r7, #4]
2405e29a:	f000 f90f 	bl	2405e4bc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405e29e:	e0ee      	b.n	2405e47e <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
2405e2a0:	6878      	ldr	r0, [r7, #4]
2405e2a2:	f7ff fdf9 	bl	2405de98 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
2405e2a6:	6878      	ldr	r0, [r7, #4]
2405e2a8:	f000 f908 	bl	2405e4bc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405e2ac:	e0e7      	b.n	2405e47e <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
2405e2ae:	697b      	ldr	r3, [r7, #20]
2405e2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405e2b4:	2b00      	cmp	r3, #0
2405e2b6:	d05b      	beq.n	2405e370 <HAL_SAI_IRQHandler+0x24c>
2405e2b8:	693b      	ldr	r3, [r7, #16]
2405e2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405e2be:	2b00      	cmp	r3, #0
2405e2c0:	d056      	beq.n	2405e370 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
2405e2c2:	687b      	ldr	r3, [r7, #4]
2405e2c4:	681b      	ldr	r3, [r3, #0]
2405e2c6:	2240      	movs	r2, #64	; 0x40
2405e2c8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
2405e2ca:	687b      	ldr	r3, [r7, #4]
2405e2cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e2d0:	f043 0208 	orr.w	r2, r3, #8
2405e2d4:	687b      	ldr	r3, [r7, #4]
2405e2d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405e2da:	68fb      	ldr	r3, [r7, #12]
2405e2dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405e2e0:	2b00      	cmp	r3, #0
2405e2e2:	d03e      	beq.n	2405e362 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
2405e2e4:	687b      	ldr	r3, [r7, #4]
2405e2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e2ea:	2b00      	cmp	r3, #0
2405e2ec:	d018      	beq.n	2405e320 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2405e2ee:	687b      	ldr	r3, [r7, #4]
2405e2f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e2f4:	4a66      	ldr	r2, [pc, #408]	; (2405e490 <HAL_SAI_IRQHandler+0x36c>)
2405e2f6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2405e2f8:	687b      	ldr	r3, [r7, #4]
2405e2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e2fe:	4618      	mov	r0, r3
2405e300:	f7f7 fd9a 	bl	24055e38 <HAL_DMA_Abort_IT>
2405e304:	4603      	mov	r3, r0
2405e306:	2b00      	cmp	r3, #0
2405e308:	d00a      	beq.n	2405e320 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405e30a:	687b      	ldr	r3, [r7, #4]
2405e30c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e310:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405e314:	687b      	ldr	r3, [r7, #4]
2405e316:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405e31a:	6878      	ldr	r0, [r7, #4]
2405e31c:	f000 f8ce 	bl	2405e4bc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2405e320:	687b      	ldr	r3, [r7, #4]
2405e322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e326:	2b00      	cmp	r3, #0
2405e328:	f000 80ab 	beq.w	2405e482 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2405e32c:	687b      	ldr	r3, [r7, #4]
2405e32e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e332:	4a57      	ldr	r2, [pc, #348]	; (2405e490 <HAL_SAI_IRQHandler+0x36c>)
2405e334:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2405e336:	687b      	ldr	r3, [r7, #4]
2405e338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e33c:	4618      	mov	r0, r3
2405e33e:	f7f7 fd7b 	bl	24055e38 <HAL_DMA_Abort_IT>
2405e342:	4603      	mov	r3, r0
2405e344:	2b00      	cmp	r3, #0
2405e346:	f000 809c 	beq.w	2405e482 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405e34a:	687b      	ldr	r3, [r7, #4]
2405e34c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e350:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405e354:	687b      	ldr	r3, [r7, #4]
2405e356:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405e35a:	6878      	ldr	r0, [r7, #4]
2405e35c:	f000 f8ae 	bl	2405e4bc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405e360:	e08f      	b.n	2405e482 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
2405e362:	6878      	ldr	r0, [r7, #4]
2405e364:	f7ff fd98 	bl	2405de98 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
2405e368:	6878      	ldr	r0, [r7, #4]
2405e36a:	f000 f8a7 	bl	2405e4bc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405e36e:	e088      	b.n	2405e482 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
2405e370:	697b      	ldr	r3, [r7, #20]
2405e372:	f003 0304 	and.w	r3, r3, #4
2405e376:	2b00      	cmp	r3, #0
2405e378:	d067      	beq.n	2405e44a <HAL_SAI_IRQHandler+0x326>
2405e37a:	693b      	ldr	r3, [r7, #16]
2405e37c:	f003 0304 	and.w	r3, r3, #4
2405e380:	2b00      	cmp	r3, #0
2405e382:	d062      	beq.n	2405e44a <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
2405e384:	687b      	ldr	r3, [r7, #4]
2405e386:	681b      	ldr	r3, [r3, #0]
2405e388:	2204      	movs	r2, #4
2405e38a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
2405e38c:	687b      	ldr	r3, [r7, #4]
2405e38e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e392:	f043 0220 	orr.w	r2, r3, #32
2405e396:	687b      	ldr	r3, [r7, #4]
2405e398:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405e39c:	68fb      	ldr	r3, [r7, #12]
2405e39e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405e3a2:	2b00      	cmp	r3, #0
2405e3a4:	d03c      	beq.n	2405e420 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
2405e3a6:	687b      	ldr	r3, [r7, #4]
2405e3a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e3ac:	2b00      	cmp	r3, #0
2405e3ae:	d018      	beq.n	2405e3e2 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2405e3b0:	687b      	ldr	r3, [r7, #4]
2405e3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e3b6:	4a36      	ldr	r2, [pc, #216]	; (2405e490 <HAL_SAI_IRQHandler+0x36c>)
2405e3b8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2405e3ba:	687b      	ldr	r3, [r7, #4]
2405e3bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405e3c0:	4618      	mov	r0, r3
2405e3c2:	f7f7 fd39 	bl	24055e38 <HAL_DMA_Abort_IT>
2405e3c6:	4603      	mov	r3, r0
2405e3c8:	2b00      	cmp	r3, #0
2405e3ca:	d00a      	beq.n	2405e3e2 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405e3cc:	687b      	ldr	r3, [r7, #4]
2405e3ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e3d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405e3d6:	687b      	ldr	r3, [r7, #4]
2405e3d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405e3dc:	6878      	ldr	r0, [r7, #4]
2405e3de:	f000 f86d 	bl	2405e4bc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2405e3e2:	687b      	ldr	r3, [r7, #4]
2405e3e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e3e8:	2b00      	cmp	r3, #0
2405e3ea:	d04c      	beq.n	2405e486 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2405e3ec:	687b      	ldr	r3, [r7, #4]
2405e3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e3f2:	4a27      	ldr	r2, [pc, #156]	; (2405e490 <HAL_SAI_IRQHandler+0x36c>)
2405e3f4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2405e3f6:	687b      	ldr	r3, [r7, #4]
2405e3f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e3fc:	4618      	mov	r0, r3
2405e3fe:	f7f7 fd1b 	bl	24055e38 <HAL_DMA_Abort_IT>
2405e402:	4603      	mov	r3, r0
2405e404:	2b00      	cmp	r3, #0
2405e406:	d03e      	beq.n	2405e486 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405e408:	687b      	ldr	r3, [r7, #4]
2405e40a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e40e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405e412:	687b      	ldr	r3, [r7, #4]
2405e414:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405e418:	6878      	ldr	r0, [r7, #4]
2405e41a:	f000 f84f 	bl	2405e4bc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405e41e:	e032      	b.n	2405e486 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
2405e420:	687b      	ldr	r3, [r7, #4]
2405e422:	681b      	ldr	r3, [r3, #0]
2405e424:	2200      	movs	r2, #0
2405e426:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
2405e428:	687b      	ldr	r3, [r7, #4]
2405e42a:	681b      	ldr	r3, [r3, #0]
2405e42c:	f04f 32ff 	mov.w	r2, #4294967295
2405e430:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
2405e432:	687b      	ldr	r3, [r7, #4]
2405e434:	2201      	movs	r2, #1
2405e436:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
2405e43a:	687b      	ldr	r3, [r7, #4]
2405e43c:	2200      	movs	r2, #0
2405e43e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
2405e442:	6878      	ldr	r0, [r7, #4]
2405e444:	f000 f83a 	bl	2405e4bc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405e448:	e01d      	b.n	2405e486 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
2405e44a:	697b      	ldr	r3, [r7, #20]
2405e44c:	f003 0310 	and.w	r3, r3, #16
2405e450:	2b00      	cmp	r3, #0
2405e452:	d019      	beq.n	2405e488 <HAL_SAI_IRQHandler+0x364>
2405e454:	693b      	ldr	r3, [r7, #16]
2405e456:	f003 0310 	and.w	r3, r3, #16
2405e45a:	2b00      	cmp	r3, #0
2405e45c:	d014      	beq.n	2405e488 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
2405e45e:	687b      	ldr	r3, [r7, #4]
2405e460:	681b      	ldr	r3, [r3, #0]
2405e462:	2210      	movs	r2, #16
2405e464:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
2405e466:	687b      	ldr	r3, [r7, #4]
2405e468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e46c:	f043 0210 	orr.w	r2, r3, #16
2405e470:	687b      	ldr	r3, [r7, #4]
2405e472:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
2405e476:	6878      	ldr	r0, [r7, #4]
2405e478:	f000 f820 	bl	2405e4bc <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
2405e47c:	e004      	b.n	2405e488 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405e47e:	bf00      	nop
2405e480:	e002      	b.n	2405e488 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405e482:	bf00      	nop
2405e484:	e000      	b.n	2405e488 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405e486:	bf00      	nop
}
2405e488:	bf00      	nop
2405e48a:	3718      	adds	r7, #24
2405e48c:	46bd      	mov	sp, r7
2405e48e:	bd80      	pop	{r7, pc}
2405e490:	2405e8f7 	.word	0x2405e8f7

2405e494 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
2405e494:	b480      	push	{r7}
2405e496:	b083      	sub	sp, #12
2405e498:	af00      	add	r7, sp, #0
2405e49a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
2405e49c:	bf00      	nop
2405e49e:	370c      	adds	r7, #12
2405e4a0:	46bd      	mov	sp, r7
2405e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e4a6:	4770      	bx	lr

2405e4a8 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
2405e4a8:	b480      	push	{r7}
2405e4aa:	b083      	sub	sp, #12
2405e4ac:	af00      	add	r7, sp, #0
2405e4ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
2405e4b0:	bf00      	nop
2405e4b2:	370c      	adds	r7, #12
2405e4b4:	46bd      	mov	sp, r7
2405e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e4ba:	4770      	bx	lr

2405e4bc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
2405e4bc:	b480      	push	{r7}
2405e4be:	b083      	sub	sp, #12
2405e4c0:	af00      	add	r7, sp, #0
2405e4c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
2405e4c4:	bf00      	nop
2405e4c6:	370c      	adds	r7, #12
2405e4c8:	46bd      	mov	sp, r7
2405e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e4ce:	4770      	bx	lr

2405e4d0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
2405e4d0:	b480      	push	{r7}
2405e4d2:	b087      	sub	sp, #28
2405e4d4:	af00      	add	r7, sp, #0
2405e4d6:	60f8      	str	r0, [r7, #12]
2405e4d8:	60b9      	str	r1, [r7, #8]
2405e4da:	607a      	str	r2, [r7, #4]
2405e4dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405e4de:	2300      	movs	r3, #0
2405e4e0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2405e4e2:	68fb      	ldr	r3, [r7, #12]
2405e4e4:	2200      	movs	r2, #0
2405e4e6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2405e4e8:	68fb      	ldr	r3, [r7, #12]
2405e4ea:	2200      	movs	r2, #0
2405e4ec:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405e4ee:	68fb      	ldr	r3, [r7, #12]
2405e4f0:	685b      	ldr	r3, [r3, #4]
2405e4f2:	2b00      	cmp	r3, #0
2405e4f4:	d003      	beq.n	2405e4fe <SAI_InitI2S+0x2e>
2405e4f6:	68fb      	ldr	r3, [r7, #12]
2405e4f8:	685b      	ldr	r3, [r3, #4]
2405e4fa:	2b02      	cmp	r3, #2
2405e4fc:	d103      	bne.n	2405e506 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
2405e4fe:	68fb      	ldr	r3, [r7, #12]
2405e500:	2200      	movs	r2, #0
2405e502:	651a      	str	r2, [r3, #80]	; 0x50
2405e504:	e002      	b.n	2405e50c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
2405e506:	68fb      	ldr	r3, [r7, #12]
2405e508:	2201      	movs	r2, #1
2405e50a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
2405e50c:	68fb      	ldr	r3, [r7, #12]
2405e50e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2405e512:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2405e514:	68fb      	ldr	r3, [r7, #12]
2405e516:	f64f 72ff 	movw	r2, #65535	; 0xffff
2405e51a:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
2405e51c:	68fb      	ldr	r3, [r7, #12]
2405e51e:	2200      	movs	r2, #0
2405e520:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
2405e522:	68fb      	ldr	r3, [r7, #12]
2405e524:	683a      	ldr	r2, [r7, #0]
2405e526:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
2405e528:	683b      	ldr	r3, [r7, #0]
2405e52a:	f003 0301 	and.w	r3, r3, #1
2405e52e:	2b00      	cmp	r3, #0
2405e530:	d001      	beq.n	2405e536 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
2405e532:	2301      	movs	r3, #1
2405e534:	e077      	b.n	2405e626 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
2405e536:	68bb      	ldr	r3, [r7, #8]
2405e538:	2b00      	cmp	r3, #0
2405e53a:	d107      	bne.n	2405e54c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
2405e53c:	68fb      	ldr	r3, [r7, #12]
2405e53e:	2200      	movs	r2, #0
2405e540:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
2405e542:	68fb      	ldr	r3, [r7, #12]
2405e544:	f44f 2280 	mov.w	r2, #262144	; 0x40000
2405e548:	665a      	str	r2, [r3, #100]	; 0x64
2405e54a:	e006      	b.n	2405e55a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
2405e54c:	68fb      	ldr	r3, [r7, #12]
2405e54e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
2405e552:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
2405e554:	68fb      	ldr	r3, [r7, #12]
2405e556:	2200      	movs	r2, #0
2405e558:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
2405e55a:	687b      	ldr	r3, [r7, #4]
2405e55c:	2b03      	cmp	r3, #3
2405e55e:	d84f      	bhi.n	2405e600 <SAI_InitI2S+0x130>
2405e560:	a201      	add	r2, pc, #4	; (adr r2, 2405e568 <SAI_InitI2S+0x98>)
2405e562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405e566:	bf00      	nop
2405e568:	2405e579 	.word	0x2405e579
2405e56c:	2405e59b 	.word	0x2405e59b
2405e570:	2405e5bd 	.word	0x2405e5bd
2405e574:	2405e5df 	.word	0x2405e5df
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405e578:	68fb      	ldr	r3, [r7, #12]
2405e57a:	2280      	movs	r2, #128	; 0x80
2405e57c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2405e57e:	683b      	ldr	r3, [r7, #0]
2405e580:	085b      	lsrs	r3, r3, #1
2405e582:	015a      	lsls	r2, r3, #5
2405e584:	68fb      	ldr	r3, [r7, #12]
2405e586:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2405e588:	683b      	ldr	r3, [r7, #0]
2405e58a:	085b      	lsrs	r3, r3, #1
2405e58c:	011a      	lsls	r2, r3, #4
2405e58e:	68fb      	ldr	r3, [r7, #12]
2405e590:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2405e592:	68fb      	ldr	r3, [r7, #12]
2405e594:	2240      	movs	r2, #64	; 0x40
2405e596:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405e598:	e035      	b.n	2405e606 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405e59a:	68fb      	ldr	r3, [r7, #12]
2405e59c:	2280      	movs	r2, #128	; 0x80
2405e59e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2405e5a0:	683b      	ldr	r3, [r7, #0]
2405e5a2:	085b      	lsrs	r3, r3, #1
2405e5a4:	019a      	lsls	r2, r3, #6
2405e5a6:	68fb      	ldr	r3, [r7, #12]
2405e5a8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2405e5aa:	683b      	ldr	r3, [r7, #0]
2405e5ac:	085b      	lsrs	r3, r3, #1
2405e5ae:	015a      	lsls	r2, r3, #5
2405e5b0:	68fb      	ldr	r3, [r7, #12]
2405e5b2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405e5b4:	68fb      	ldr	r3, [r7, #12]
2405e5b6:	2280      	movs	r2, #128	; 0x80
2405e5b8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405e5ba:	e024      	b.n	2405e606 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
2405e5bc:	68fb      	ldr	r3, [r7, #12]
2405e5be:	22c0      	movs	r2, #192	; 0xc0
2405e5c0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2405e5c2:	683b      	ldr	r3, [r7, #0]
2405e5c4:	085b      	lsrs	r3, r3, #1
2405e5c6:	019a      	lsls	r2, r3, #6
2405e5c8:	68fb      	ldr	r3, [r7, #12]
2405e5ca:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2405e5cc:	683b      	ldr	r3, [r7, #0]
2405e5ce:	085b      	lsrs	r3, r3, #1
2405e5d0:	015a      	lsls	r2, r3, #5
2405e5d2:	68fb      	ldr	r3, [r7, #12]
2405e5d4:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405e5d6:	68fb      	ldr	r3, [r7, #12]
2405e5d8:	2280      	movs	r2, #128	; 0x80
2405e5da:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405e5dc:	e013      	b.n	2405e606 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
2405e5de:	68fb      	ldr	r3, [r7, #12]
2405e5e0:	22e0      	movs	r2, #224	; 0xe0
2405e5e2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2405e5e4:	683b      	ldr	r3, [r7, #0]
2405e5e6:	085b      	lsrs	r3, r3, #1
2405e5e8:	019a      	lsls	r2, r3, #6
2405e5ea:	68fb      	ldr	r3, [r7, #12]
2405e5ec:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2405e5ee:	683b      	ldr	r3, [r7, #0]
2405e5f0:	085b      	lsrs	r3, r3, #1
2405e5f2:	015a      	lsls	r2, r3, #5
2405e5f4:	68fb      	ldr	r3, [r7, #12]
2405e5f6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405e5f8:	68fb      	ldr	r3, [r7, #12]
2405e5fa:	2280      	movs	r2, #128	; 0x80
2405e5fc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405e5fe:	e002      	b.n	2405e606 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
2405e600:	2301      	movs	r3, #1
2405e602:	75fb      	strb	r3, [r7, #23]
      break;
2405e604:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2405e606:	68bb      	ldr	r3, [r7, #8]
2405e608:	2b02      	cmp	r3, #2
2405e60a:	d10b      	bne.n	2405e624 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
2405e60c:	687b      	ldr	r3, [r7, #4]
2405e60e:	2b01      	cmp	r3, #1
2405e610:	d102      	bne.n	2405e618 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
2405e612:	68fb      	ldr	r3, [r7, #12]
2405e614:	2210      	movs	r2, #16
2405e616:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
2405e618:	687b      	ldr	r3, [r7, #4]
2405e61a:	2b02      	cmp	r3, #2
2405e61c:	d102      	bne.n	2405e624 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
2405e61e:	68fb      	ldr	r3, [r7, #12]
2405e620:	2208      	movs	r2, #8
2405e622:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
2405e624:	7dfb      	ldrb	r3, [r7, #23]
}
2405e626:	4618      	mov	r0, r3
2405e628:	371c      	adds	r7, #28
2405e62a:	46bd      	mov	sp, r7
2405e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e630:	4770      	bx	lr
2405e632:	bf00      	nop

2405e634 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
2405e634:	b480      	push	{r7}
2405e636:	b087      	sub	sp, #28
2405e638:	af00      	add	r7, sp, #0
2405e63a:	60f8      	str	r0, [r7, #12]
2405e63c:	60b9      	str	r1, [r7, #8]
2405e63e:	607a      	str	r2, [r7, #4]
2405e640:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405e642:	2300      	movs	r3, #0
2405e644:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2405e646:	68fb      	ldr	r3, [r7, #12]
2405e648:	2200      	movs	r2, #0
2405e64a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2405e64c:	68fb      	ldr	r3, [r7, #12]
2405e64e:	2200      	movs	r2, #0
2405e650:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405e652:	68fb      	ldr	r3, [r7, #12]
2405e654:	685b      	ldr	r3, [r3, #4]
2405e656:	2b00      	cmp	r3, #0
2405e658:	d003      	beq.n	2405e662 <SAI_InitPCM+0x2e>
2405e65a:	68fb      	ldr	r3, [r7, #12]
2405e65c:	685b      	ldr	r3, [r3, #4]
2405e65e:	2b02      	cmp	r3, #2
2405e660:	d103      	bne.n	2405e66a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
2405e662:	68fb      	ldr	r3, [r7, #12]
2405e664:	2201      	movs	r2, #1
2405e666:	651a      	str	r2, [r3, #80]	; 0x50
2405e668:	e002      	b.n	2405e670 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
2405e66a:	68fb      	ldr	r3, [r7, #12]
2405e66c:	2200      	movs	r2, #0
2405e66e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
2405e670:	68fb      	ldr	r3, [r7, #12]
2405e672:	2200      	movs	r2, #0
2405e674:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2405e676:	68fb      	ldr	r3, [r7, #12]
2405e678:	f44f 3200 	mov.w	r2, #131072	; 0x20000
2405e67c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
2405e67e:	68fb      	ldr	r3, [r7, #12]
2405e680:	f44f 2280 	mov.w	r2, #262144	; 0x40000
2405e684:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
2405e686:	68fb      	ldr	r3, [r7, #12]
2405e688:	2200      	movs	r2, #0
2405e68a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
2405e68c:	68fb      	ldr	r3, [r7, #12]
2405e68e:	683a      	ldr	r2, [r7, #0]
2405e690:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2405e692:	68fb      	ldr	r3, [r7, #12]
2405e694:	f64f 72ff 	movw	r2, #65535	; 0xffff
2405e698:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
2405e69a:	68bb      	ldr	r3, [r7, #8]
2405e69c:	2b04      	cmp	r3, #4
2405e69e:	d103      	bne.n	2405e6a8 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
2405e6a0:	68fb      	ldr	r3, [r7, #12]
2405e6a2:	2201      	movs	r2, #1
2405e6a4:	659a      	str	r2, [r3, #88]	; 0x58
2405e6a6:	e002      	b.n	2405e6ae <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
2405e6a8:	68fb      	ldr	r3, [r7, #12]
2405e6aa:	220d      	movs	r2, #13
2405e6ac:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
2405e6ae:	687b      	ldr	r3, [r7, #4]
2405e6b0:	2b03      	cmp	r3, #3
2405e6b2:	d837      	bhi.n	2405e724 <SAI_InitPCM+0xf0>
2405e6b4:	a201      	add	r2, pc, #4	; (adr r2, 2405e6bc <SAI_InitPCM+0x88>)
2405e6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405e6ba:	bf00      	nop
2405e6bc:	2405e6cd 	.word	0x2405e6cd
2405e6c0:	2405e6e3 	.word	0x2405e6e3
2405e6c4:	2405e6f9 	.word	0x2405e6f9
2405e6c8:	2405e70f 	.word	0x2405e70f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405e6cc:	68fb      	ldr	r3, [r7, #12]
2405e6ce:	2280      	movs	r2, #128	; 0x80
2405e6d0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
2405e6d2:	683b      	ldr	r3, [r7, #0]
2405e6d4:	011a      	lsls	r2, r3, #4
2405e6d6:	68fb      	ldr	r3, [r7, #12]
2405e6d8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2405e6da:	68fb      	ldr	r3, [r7, #12]
2405e6dc:	2240      	movs	r2, #64	; 0x40
2405e6de:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405e6e0:	e023      	b.n	2405e72a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405e6e2:	68fb      	ldr	r3, [r7, #12]
2405e6e4:	2280      	movs	r2, #128	; 0x80
2405e6e6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2405e6e8:	683b      	ldr	r3, [r7, #0]
2405e6ea:	015a      	lsls	r2, r3, #5
2405e6ec:	68fb      	ldr	r3, [r7, #12]
2405e6ee:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405e6f0:	68fb      	ldr	r3, [r7, #12]
2405e6f2:	2280      	movs	r2, #128	; 0x80
2405e6f4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405e6f6:	e018      	b.n	2405e72a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
2405e6f8:	68fb      	ldr	r3, [r7, #12]
2405e6fa:	22c0      	movs	r2, #192	; 0xc0
2405e6fc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2405e6fe:	683b      	ldr	r3, [r7, #0]
2405e700:	015a      	lsls	r2, r3, #5
2405e702:	68fb      	ldr	r3, [r7, #12]
2405e704:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405e706:	68fb      	ldr	r3, [r7, #12]
2405e708:	2280      	movs	r2, #128	; 0x80
2405e70a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405e70c:	e00d      	b.n	2405e72a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
2405e70e:	68fb      	ldr	r3, [r7, #12]
2405e710:	22e0      	movs	r2, #224	; 0xe0
2405e712:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2405e714:	683b      	ldr	r3, [r7, #0]
2405e716:	015a      	lsls	r2, r3, #5
2405e718:	68fb      	ldr	r3, [r7, #12]
2405e71a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405e71c:	68fb      	ldr	r3, [r7, #12]
2405e71e:	2280      	movs	r2, #128	; 0x80
2405e720:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405e722:	e002      	b.n	2405e72a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
2405e724:	2301      	movs	r3, #1
2405e726:	75fb      	strb	r3, [r7, #23]
      break;
2405e728:	bf00      	nop
  }

  return status;
2405e72a:	7dfb      	ldrb	r3, [r7, #23]
}
2405e72c:	4618      	mov	r0, r3
2405e72e:	371c      	adds	r7, #28
2405e730:	46bd      	mov	sp, r7
2405e732:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e736:	4770      	bx	lr

2405e738 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
2405e738:	b480      	push	{r7}
2405e73a:	b085      	sub	sp, #20
2405e73c:	af00      	add	r7, sp, #0
2405e73e:	6078      	str	r0, [r7, #4]
2405e740:	460b      	mov	r3, r1
2405e742:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
2405e744:	2301      	movs	r3, #1
2405e746:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
2405e748:	78fb      	ldrb	r3, [r7, #3]
2405e74a:	2b01      	cmp	r3, #1
2405e74c:	d103      	bne.n	2405e756 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
2405e74e:	68fb      	ldr	r3, [r7, #12]
2405e750:	f043 0308 	orr.w	r3, r3, #8
2405e754:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2405e756:	687b      	ldr	r3, [r7, #4]
2405e758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405e75a:	2b08      	cmp	r3, #8
2405e75c:	d10b      	bne.n	2405e776 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2405e75e:	687b      	ldr	r3, [r7, #4]
2405e760:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2405e762:	2b03      	cmp	r3, #3
2405e764:	d003      	beq.n	2405e76e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2405e766:	687b      	ldr	r3, [r7, #4]
2405e768:	685b      	ldr	r3, [r3, #4]
2405e76a:	2b01      	cmp	r3, #1
2405e76c:	d103      	bne.n	2405e776 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
2405e76e:	68fb      	ldr	r3, [r7, #12]
2405e770:	f043 0310 	orr.w	r3, r3, #16
2405e774:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405e776:	687b      	ldr	r3, [r7, #4]
2405e778:	685b      	ldr	r3, [r3, #4]
2405e77a:	2b03      	cmp	r3, #3
2405e77c:	d003      	beq.n	2405e786 <SAI_InterruptFlag+0x4e>
2405e77e:	687b      	ldr	r3, [r7, #4]
2405e780:	685b      	ldr	r3, [r3, #4]
2405e782:	2b02      	cmp	r3, #2
2405e784:	d104      	bne.n	2405e790 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2405e786:	68fb      	ldr	r3, [r7, #12]
2405e788:	f043 0360 	orr.w	r3, r3, #96	; 0x60
2405e78c:	60fb      	str	r3, [r7, #12]
2405e78e:	e003      	b.n	2405e798 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
2405e790:	68fb      	ldr	r3, [r7, #12]
2405e792:	f043 0304 	orr.w	r3, r3, #4
2405e796:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
2405e798:	68fb      	ldr	r3, [r7, #12]
}
2405e79a:	4618      	mov	r0, r3
2405e79c:	3714      	adds	r7, #20
2405e79e:	46bd      	mov	sp, r7
2405e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e7a4:	4770      	bx	lr
	...

2405e7a8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
2405e7a8:	b480      	push	{r7}
2405e7aa:	b085      	sub	sp, #20
2405e7ac:	af00      	add	r7, sp, #0
2405e7ae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2405e7b0:	4b18      	ldr	r3, [pc, #96]	; (2405e814 <SAI_Disable+0x6c>)
2405e7b2:	681b      	ldr	r3, [r3, #0]
2405e7b4:	4a18      	ldr	r2, [pc, #96]	; (2405e818 <SAI_Disable+0x70>)
2405e7b6:	fba2 2303 	umull	r2, r3, r2, r3
2405e7ba:	0b1b      	lsrs	r3, r3, #12
2405e7bc:	009b      	lsls	r3, r3, #2
2405e7be:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
2405e7c0:	2300      	movs	r3, #0
2405e7c2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
2405e7c4:	687b      	ldr	r3, [r7, #4]
2405e7c6:	681b      	ldr	r3, [r3, #0]
2405e7c8:	681a      	ldr	r2, [r3, #0]
2405e7ca:	687b      	ldr	r3, [r7, #4]
2405e7cc:	681b      	ldr	r3, [r3, #0]
2405e7ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
2405e7d2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
2405e7d4:	68fb      	ldr	r3, [r7, #12]
2405e7d6:	2b00      	cmp	r3, #0
2405e7d8:	d10a      	bne.n	2405e7f0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2405e7da:	687b      	ldr	r3, [r7, #4]
2405e7dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e7e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2405e7e4:	687b      	ldr	r3, [r7, #4]
2405e7e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
2405e7ea:	2303      	movs	r3, #3
2405e7ec:	72fb      	strb	r3, [r7, #11]
      break;
2405e7ee:	e009      	b.n	2405e804 <SAI_Disable+0x5c>
    }
    count--;
2405e7f0:	68fb      	ldr	r3, [r7, #12]
2405e7f2:	3b01      	subs	r3, #1
2405e7f4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2405e7f6:	687b      	ldr	r3, [r7, #4]
2405e7f8:	681b      	ldr	r3, [r3, #0]
2405e7fa:	681b      	ldr	r3, [r3, #0]
2405e7fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405e800:	2b00      	cmp	r3, #0
2405e802:	d1e7      	bne.n	2405e7d4 <SAI_Disable+0x2c>

  return status;
2405e804:	7afb      	ldrb	r3, [r7, #11]
}
2405e806:	4618      	mov	r0, r3
2405e808:	3714      	adds	r7, #20
2405e80a:	46bd      	mov	sp, r7
2405e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e810:	4770      	bx	lr
2405e812:	bf00      	nop
2405e814:	20000030 	.word	0x20000030
2405e818:	95cbec1b 	.word	0x95cbec1b

2405e81c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
2405e81c:	b580      	push	{r7, lr}
2405e81e:	b084      	sub	sp, #16
2405e820:	af00      	add	r7, sp, #0
2405e822:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2405e824:	687b      	ldr	r3, [r7, #4]
2405e826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e828:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
2405e82a:	687b      	ldr	r3, [r7, #4]
2405e82c:	69db      	ldr	r3, [r3, #28]
2405e82e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405e832:	d01c      	beq.n	2405e86e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
2405e834:	68fb      	ldr	r3, [r7, #12]
2405e836:	2200      	movs	r2, #0
2405e838:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2405e83c:	68fb      	ldr	r3, [r7, #12]
2405e83e:	681b      	ldr	r3, [r3, #0]
2405e840:	681a      	ldr	r2, [r3, #0]
2405e842:	68fb      	ldr	r3, [r7, #12]
2405e844:	681b      	ldr	r3, [r3, #0]
2405e846:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2405e84a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2405e84c:	2100      	movs	r1, #0
2405e84e:	68f8      	ldr	r0, [r7, #12]
2405e850:	f7ff ff72 	bl	2405e738 <SAI_InterruptFlag>
2405e854:	4603      	mov	r3, r0
2405e856:	43d9      	mvns	r1, r3
2405e858:	68fb      	ldr	r3, [r7, #12]
2405e85a:	681b      	ldr	r3, [r3, #0]
2405e85c:	691a      	ldr	r2, [r3, #16]
2405e85e:	68fb      	ldr	r3, [r7, #12]
2405e860:	681b      	ldr	r3, [r3, #0]
2405e862:	400a      	ands	r2, r1
2405e864:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
2405e866:	68fb      	ldr	r3, [r7, #12]
2405e868:	2201      	movs	r2, #1
2405e86a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
2405e86e:	68f8      	ldr	r0, [r7, #12]
2405e870:	f7ff fe10 	bl	2405e494 <HAL_SAI_TxCpltCallback>
#endif
}
2405e874:	bf00      	nop
2405e876:	3710      	adds	r7, #16
2405e878:	46bd      	mov	sp, r7
2405e87a:	bd80      	pop	{r7, pc}

2405e87c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
2405e87c:	b580      	push	{r7, lr}
2405e87e:	b084      	sub	sp, #16
2405e880:	af00      	add	r7, sp, #0
2405e882:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2405e884:	687b      	ldr	r3, [r7, #4]
2405e886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e888:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
2405e88a:	68f8      	ldr	r0, [r7, #12]
2405e88c:	f7ff fe0c 	bl	2405e4a8 <HAL_SAI_TxHalfCpltCallback>
#endif
}
2405e890:	bf00      	nop
2405e892:	3710      	adds	r7, #16
2405e894:	46bd      	mov	sp, r7
2405e896:	bd80      	pop	{r7, pc}

2405e898 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
2405e898:	b580      	push	{r7, lr}
2405e89a:	b084      	sub	sp, #16
2405e89c:	af00      	add	r7, sp, #0
2405e89e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2405e8a0:	687b      	ldr	r3, [r7, #4]
2405e8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e8a4:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2405e8a6:	6878      	ldr	r0, [r7, #4]
2405e8a8:	f7f8 fc6e 	bl	24057188 <HAL_DMA_GetError>
2405e8ac:	4603      	mov	r3, r0
2405e8ae:	2b02      	cmp	r3, #2
2405e8b0:	d01d      	beq.n	2405e8ee <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405e8b2:	68fb      	ldr	r3, [r7, #12]
2405e8b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e8b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405e8bc:	68fb      	ldr	r3, [r7, #12]
2405e8be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2405e8c2:	68fb      	ldr	r3, [r7, #12]
2405e8c4:	681b      	ldr	r3, [r3, #0]
2405e8c6:	681a      	ldr	r2, [r3, #0]
2405e8c8:	68fb      	ldr	r3, [r7, #12]
2405e8ca:	681b      	ldr	r3, [r3, #0]
2405e8cc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2405e8d0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
2405e8d2:	68f8      	ldr	r0, [r7, #12]
2405e8d4:	f7ff ff68 	bl	2405e7a8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
2405e8d8:	68fb      	ldr	r3, [r7, #12]
2405e8da:	2201      	movs	r2, #1
2405e8dc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
2405e8e0:	68fb      	ldr	r3, [r7, #12]
2405e8e2:	2200      	movs	r2, #0
2405e8e4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
2405e8e8:	68f8      	ldr	r0, [r7, #12]
2405e8ea:	f7ff fde7 	bl	2405e4bc <HAL_SAI_ErrorCallback>
#endif
  }
}
2405e8ee:	bf00      	nop
2405e8f0:	3710      	adds	r7, #16
2405e8f2:	46bd      	mov	sp, r7
2405e8f4:	bd80      	pop	{r7, pc}

2405e8f6 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
2405e8f6:	b580      	push	{r7, lr}
2405e8f8:	b084      	sub	sp, #16
2405e8fa:	af00      	add	r7, sp, #0
2405e8fc:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2405e8fe:	687b      	ldr	r3, [r7, #4]
2405e900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e902:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2405e904:	68fb      	ldr	r3, [r7, #12]
2405e906:	681b      	ldr	r3, [r3, #0]
2405e908:	681a      	ldr	r2, [r3, #0]
2405e90a:	68fb      	ldr	r3, [r7, #12]
2405e90c:	681b      	ldr	r3, [r3, #0]
2405e90e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2405e912:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
2405e914:	68fb      	ldr	r3, [r7, #12]
2405e916:	681b      	ldr	r3, [r3, #0]
2405e918:	2200      	movs	r2, #0
2405e91a:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2405e91c:	68fb      	ldr	r3, [r7, #12]
2405e91e:	681b      	ldr	r3, [r3, #0]
2405e920:	f04f 32ff 	mov.w	r2, #4294967295
2405e924:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
2405e926:	68fb      	ldr	r3, [r7, #12]
2405e928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e92c:	2b20      	cmp	r3, #32
2405e92e:	d00a      	beq.n	2405e946 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
2405e930:	68f8      	ldr	r0, [r7, #12]
2405e932:	f7ff ff39 	bl	2405e7a8 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2405e936:	68fb      	ldr	r3, [r7, #12]
2405e938:	681b      	ldr	r3, [r3, #0]
2405e93a:	685a      	ldr	r2, [r3, #4]
2405e93c:	68fb      	ldr	r3, [r7, #12]
2405e93e:	681b      	ldr	r3, [r3, #0]
2405e940:	f042 0208 	orr.w	r2, r2, #8
2405e944:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
2405e946:	68fb      	ldr	r3, [r7, #12]
2405e948:	2201      	movs	r2, #1
2405e94a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
2405e94e:	68fb      	ldr	r3, [r7, #12]
2405e950:	2200      	movs	r2, #0
2405e952:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
2405e956:	68f8      	ldr	r0, [r7, #12]
2405e958:	f7ff fdb0 	bl	2405e4bc <HAL_SAI_ErrorCallback>
#endif
}
2405e95c:	bf00      	nop
2405e95e:	3710      	adds	r7, #16
2405e960:	46bd      	mov	sp, r7
2405e962:	bd80      	pop	{r7, pc}

2405e964 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
2405e964:	b580      	push	{r7, lr}
2405e966:	b084      	sub	sp, #16
2405e968:	af00      	add	r7, sp, #0
2405e96a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
2405e96c:	687b      	ldr	r3, [r7, #4]
2405e96e:	2b00      	cmp	r3, #0
2405e970:	d101      	bne.n	2405e976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
2405e972:	2301      	movs	r3, #1
2405e974:	e10f      	b.n	2405eb96 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2405e976:	687b      	ldr	r3, [r7, #4]
2405e978:	2200      	movs	r2, #0
2405e97a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2405e97c:	687b      	ldr	r3, [r7, #4]
2405e97e:	681b      	ldr	r3, [r3, #0]
2405e980:	4a87      	ldr	r2, [pc, #540]	; (2405eba0 <HAL_SPI_Init+0x23c>)
2405e982:	4293      	cmp	r3, r2
2405e984:	d00f      	beq.n	2405e9a6 <HAL_SPI_Init+0x42>
2405e986:	687b      	ldr	r3, [r7, #4]
2405e988:	681b      	ldr	r3, [r3, #0]
2405e98a:	4a86      	ldr	r2, [pc, #536]	; (2405eba4 <HAL_SPI_Init+0x240>)
2405e98c:	4293      	cmp	r3, r2
2405e98e:	d00a      	beq.n	2405e9a6 <HAL_SPI_Init+0x42>
2405e990:	687b      	ldr	r3, [r7, #4]
2405e992:	681b      	ldr	r3, [r3, #0]
2405e994:	4a84      	ldr	r2, [pc, #528]	; (2405eba8 <HAL_SPI_Init+0x244>)
2405e996:	4293      	cmp	r3, r2
2405e998:	d005      	beq.n	2405e9a6 <HAL_SPI_Init+0x42>
2405e99a:	687b      	ldr	r3, [r7, #4]
2405e99c:	68db      	ldr	r3, [r3, #12]
2405e99e:	2b0f      	cmp	r3, #15
2405e9a0:	d901      	bls.n	2405e9a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
2405e9a2:	2301      	movs	r3, #1
2405e9a4:	e0f7      	b.n	2405eb96 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
2405e9a6:	6878      	ldr	r0, [r7, #4]
2405e9a8:	f000 fbca 	bl	2405f140 <SPI_GetPacketSize>
2405e9ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2405e9ae:	687b      	ldr	r3, [r7, #4]
2405e9b0:	681b      	ldr	r3, [r3, #0]
2405e9b2:	4a7b      	ldr	r2, [pc, #492]	; (2405eba0 <HAL_SPI_Init+0x23c>)
2405e9b4:	4293      	cmp	r3, r2
2405e9b6:	d00c      	beq.n	2405e9d2 <HAL_SPI_Init+0x6e>
2405e9b8:	687b      	ldr	r3, [r7, #4]
2405e9ba:	681b      	ldr	r3, [r3, #0]
2405e9bc:	4a79      	ldr	r2, [pc, #484]	; (2405eba4 <HAL_SPI_Init+0x240>)
2405e9be:	4293      	cmp	r3, r2
2405e9c0:	d007      	beq.n	2405e9d2 <HAL_SPI_Init+0x6e>
2405e9c2:	687b      	ldr	r3, [r7, #4]
2405e9c4:	681b      	ldr	r3, [r3, #0]
2405e9c6:	4a78      	ldr	r2, [pc, #480]	; (2405eba8 <HAL_SPI_Init+0x244>)
2405e9c8:	4293      	cmp	r3, r2
2405e9ca:	d002      	beq.n	2405e9d2 <HAL_SPI_Init+0x6e>
2405e9cc:	68fb      	ldr	r3, [r7, #12]
2405e9ce:	2b08      	cmp	r3, #8
2405e9d0:	d811      	bhi.n	2405e9f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2405e9d2:	687b      	ldr	r3, [r7, #4]
2405e9d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2405e9d6:	4a72      	ldr	r2, [pc, #456]	; (2405eba0 <HAL_SPI_Init+0x23c>)
2405e9d8:	4293      	cmp	r3, r2
2405e9da:	d009      	beq.n	2405e9f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2405e9dc:	687b      	ldr	r3, [r7, #4]
2405e9de:	681b      	ldr	r3, [r3, #0]
2405e9e0:	4a70      	ldr	r2, [pc, #448]	; (2405eba4 <HAL_SPI_Init+0x240>)
2405e9e2:	4293      	cmp	r3, r2
2405e9e4:	d004      	beq.n	2405e9f0 <HAL_SPI_Init+0x8c>
2405e9e6:	687b      	ldr	r3, [r7, #4]
2405e9e8:	681b      	ldr	r3, [r3, #0]
2405e9ea:	4a6f      	ldr	r2, [pc, #444]	; (2405eba8 <HAL_SPI_Init+0x244>)
2405e9ec:	4293      	cmp	r3, r2
2405e9ee:	d104      	bne.n	2405e9fa <HAL_SPI_Init+0x96>
2405e9f0:	68fb      	ldr	r3, [r7, #12]
2405e9f2:	2b10      	cmp	r3, #16
2405e9f4:	d901      	bls.n	2405e9fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
2405e9f6:	2301      	movs	r3, #1
2405e9f8:	e0cd      	b.n	2405eb96 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
2405e9fa:	687b      	ldr	r3, [r7, #4]
2405e9fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
2405ea00:	b2db      	uxtb	r3, r3
2405ea02:	2b00      	cmp	r3, #0
2405ea04:	d106      	bne.n	2405ea14 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
2405ea06:	687b      	ldr	r3, [r7, #4]
2405ea08:	2200      	movs	r2, #0
2405ea0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
2405ea0e:	6878      	ldr	r0, [r7, #4]
2405ea10:	f7f3 fdfc 	bl	2405260c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
2405ea14:	687b      	ldr	r3, [r7, #4]
2405ea16:	2202      	movs	r2, #2
2405ea18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2405ea1c:	687b      	ldr	r3, [r7, #4]
2405ea1e:	681b      	ldr	r3, [r3, #0]
2405ea20:	681a      	ldr	r2, [r3, #0]
2405ea22:	687b      	ldr	r3, [r7, #4]
2405ea24:	681b      	ldr	r3, [r3, #0]
2405ea26:	f022 0201 	bic.w	r2, r2, #1
2405ea2a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2405ea2c:	687b      	ldr	r3, [r7, #4]
2405ea2e:	681b      	ldr	r3, [r3, #0]
2405ea30:	689b      	ldr	r3, [r3, #8]
2405ea32:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
2405ea36:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2405ea38:	687b      	ldr	r3, [r7, #4]
2405ea3a:	699b      	ldr	r3, [r3, #24]
2405ea3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2405ea40:	d119      	bne.n	2405ea76 <HAL_SPI_Init+0x112>
2405ea42:	687b      	ldr	r3, [r7, #4]
2405ea44:	685b      	ldr	r3, [r3, #4]
2405ea46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2405ea4a:	d103      	bne.n	2405ea54 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2405ea4c:	687b      	ldr	r3, [r7, #4]
2405ea4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2405ea50:	2b00      	cmp	r3, #0
2405ea52:	d008      	beq.n	2405ea66 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2405ea54:	687b      	ldr	r3, [r7, #4]
2405ea56:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2405ea58:	2b00      	cmp	r3, #0
2405ea5a:	d10c      	bne.n	2405ea76 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
2405ea5c:	687b      	ldr	r3, [r7, #4]
2405ea5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2405ea60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405ea64:	d107      	bne.n	2405ea76 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2405ea66:	687b      	ldr	r3, [r7, #4]
2405ea68:	681b      	ldr	r3, [r3, #0]
2405ea6a:	681a      	ldr	r2, [r3, #0]
2405ea6c:	687b      	ldr	r3, [r7, #4]
2405ea6e:	681b      	ldr	r3, [r3, #0]
2405ea70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2405ea74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2405ea76:	687b      	ldr	r3, [r7, #4]
2405ea78:	685b      	ldr	r3, [r3, #4]
2405ea7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2405ea7e:	2b00      	cmp	r3, #0
2405ea80:	d00f      	beq.n	2405eaa2 <HAL_SPI_Init+0x13e>
2405ea82:	687b      	ldr	r3, [r7, #4]
2405ea84:	68db      	ldr	r3, [r3, #12]
2405ea86:	2b06      	cmp	r3, #6
2405ea88:	d90b      	bls.n	2405eaa2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2405ea8a:	687b      	ldr	r3, [r7, #4]
2405ea8c:	681b      	ldr	r3, [r3, #0]
2405ea8e:	681b      	ldr	r3, [r3, #0]
2405ea90:	f423 7180 	bic.w	r1, r3, #256	; 0x100
2405ea94:	687b      	ldr	r3, [r7, #4]
2405ea96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2405ea98:	687b      	ldr	r3, [r7, #4]
2405ea9a:	681b      	ldr	r3, [r3, #0]
2405ea9c:	430a      	orrs	r2, r1
2405ea9e:	601a      	str	r2, [r3, #0]
2405eaa0:	e007      	b.n	2405eab2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2405eaa2:	687b      	ldr	r3, [r7, #4]
2405eaa4:	681b      	ldr	r3, [r3, #0]
2405eaa6:	681a      	ldr	r2, [r3, #0]
2405eaa8:	687b      	ldr	r3, [r7, #4]
2405eaaa:	681b      	ldr	r3, [r3, #0]
2405eaac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2405eab0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2405eab2:	687b      	ldr	r3, [r7, #4]
2405eab4:	69da      	ldr	r2, [r3, #28]
2405eab6:	687b      	ldr	r3, [r7, #4]
2405eab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405eaba:	431a      	orrs	r2, r3
2405eabc:	68bb      	ldr	r3, [r7, #8]
2405eabe:	431a      	orrs	r2, r3
2405eac0:	687b      	ldr	r3, [r7, #4]
2405eac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405eac4:	ea42 0103 	orr.w	r1, r2, r3
2405eac8:	687b      	ldr	r3, [r7, #4]
2405eaca:	68da      	ldr	r2, [r3, #12]
2405eacc:	687b      	ldr	r3, [r7, #4]
2405eace:	681b      	ldr	r3, [r3, #0]
2405ead0:	430a      	orrs	r2, r1
2405ead2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2405ead4:	687b      	ldr	r3, [r7, #4]
2405ead6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405ead8:	687b      	ldr	r3, [r7, #4]
2405eada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405eadc:	431a      	orrs	r2, r3
2405eade:	687b      	ldr	r3, [r7, #4]
2405eae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405eae2:	431a      	orrs	r2, r3
2405eae4:	687b      	ldr	r3, [r7, #4]
2405eae6:	699b      	ldr	r3, [r3, #24]
2405eae8:	431a      	orrs	r2, r3
2405eaea:	687b      	ldr	r3, [r7, #4]
2405eaec:	691b      	ldr	r3, [r3, #16]
2405eaee:	431a      	orrs	r2, r3
2405eaf0:	687b      	ldr	r3, [r7, #4]
2405eaf2:	695b      	ldr	r3, [r3, #20]
2405eaf4:	431a      	orrs	r2, r3
2405eaf6:	687b      	ldr	r3, [r7, #4]
2405eaf8:	6a1b      	ldr	r3, [r3, #32]
2405eafa:	431a      	orrs	r2, r3
2405eafc:	687b      	ldr	r3, [r7, #4]
2405eafe:	685b      	ldr	r3, [r3, #4]
2405eb00:	431a      	orrs	r2, r3
2405eb02:	687b      	ldr	r3, [r7, #4]
2405eb04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405eb06:	431a      	orrs	r2, r3
2405eb08:	687b      	ldr	r3, [r7, #4]
2405eb0a:	689b      	ldr	r3, [r3, #8]
2405eb0c:	431a      	orrs	r2, r3
2405eb0e:	687b      	ldr	r3, [r7, #4]
2405eb10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405eb12:	ea42 0103 	orr.w	r1, r2, r3
2405eb16:	687b      	ldr	r3, [r7, #4]
2405eb18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
2405eb1a:	687b      	ldr	r3, [r7, #4]
2405eb1c:	681b      	ldr	r3, [r3, #0]
2405eb1e:	430a      	orrs	r2, r1
2405eb20:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2405eb22:	687b      	ldr	r3, [r7, #4]
2405eb24:	685b      	ldr	r3, [r3, #4]
2405eb26:	2b00      	cmp	r3, #0
2405eb28:	d113      	bne.n	2405eb52 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2405eb2a:	687b      	ldr	r3, [r7, #4]
2405eb2c:	681b      	ldr	r3, [r3, #0]
2405eb2e:	689b      	ldr	r3, [r3, #8]
2405eb30:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
2405eb34:	687b      	ldr	r3, [r7, #4]
2405eb36:	681b      	ldr	r3, [r3, #0]
2405eb38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
2405eb3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2405eb3e:	687b      	ldr	r3, [r7, #4]
2405eb40:	681b      	ldr	r3, [r3, #0]
2405eb42:	689b      	ldr	r3, [r3, #8]
2405eb44:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
2405eb48:	687b      	ldr	r3, [r7, #4]
2405eb4a:	681b      	ldr	r3, [r3, #0]
2405eb4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2405eb50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2405eb52:	687b      	ldr	r3, [r7, #4]
2405eb54:	681b      	ldr	r3, [r3, #0]
2405eb56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2405eb58:	687b      	ldr	r3, [r7, #4]
2405eb5a:	681b      	ldr	r3, [r3, #0]
2405eb5c:	f022 0201 	bic.w	r2, r2, #1
2405eb60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2405eb62:	687b      	ldr	r3, [r7, #4]
2405eb64:	685b      	ldr	r3, [r3, #4]
2405eb66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2405eb6a:	2b00      	cmp	r3, #0
2405eb6c:	d00a      	beq.n	2405eb84 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2405eb6e:	687b      	ldr	r3, [r7, #4]
2405eb70:	681b      	ldr	r3, [r3, #0]
2405eb72:	68db      	ldr	r3, [r3, #12]
2405eb74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
2405eb78:	687b      	ldr	r3, [r7, #4]
2405eb7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
2405eb7c:	687b      	ldr	r3, [r7, #4]
2405eb7e:	681b      	ldr	r3, [r3, #0]
2405eb80:	430a      	orrs	r2, r1
2405eb82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2405eb84:	687b      	ldr	r3, [r7, #4]
2405eb86:	2200      	movs	r2, #0
2405eb88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2405eb8c:	687b      	ldr	r3, [r7, #4]
2405eb8e:	2201      	movs	r2, #1
2405eb90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
2405eb94:	2300      	movs	r3, #0
}
2405eb96:	4618      	mov	r0, r3
2405eb98:	3710      	adds	r7, #16
2405eb9a:	46bd      	mov	sp, r7
2405eb9c:	bd80      	pop	{r7, pc}
2405eb9e:	bf00      	nop
2405eba0:	40013000 	.word	0x40013000
2405eba4:	40003800 	.word	0x40003800
2405eba8:	40003c00 	.word	0x40003c00

2405ebac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2405ebac:	b580      	push	{r7, lr}
2405ebae:	b08a      	sub	sp, #40	; 0x28
2405ebb0:	af02      	add	r7, sp, #8
2405ebb2:	60f8      	str	r0, [r7, #12]
2405ebb4:	60b9      	str	r1, [r7, #8]
2405ebb6:	603b      	str	r3, [r7, #0]
2405ebb8:	4613      	mov	r3, r2
2405ebba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
2405ebbc:	68fb      	ldr	r3, [r7, #12]
2405ebbe:	681b      	ldr	r3, [r3, #0]
2405ebc0:	3320      	adds	r3, #32
2405ebc2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
2405ebc4:	2300      	movs	r3, #0
2405ebc6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
2405ebc8:	68fb      	ldr	r3, [r7, #12]
2405ebca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2405ebce:	2b01      	cmp	r3, #1
2405ebd0:	d101      	bne.n	2405ebd6 <HAL_SPI_Transmit+0x2a>
2405ebd2:	2302      	movs	r3, #2
2405ebd4:	e1e1      	b.n	2405ef9a <HAL_SPI_Transmit+0x3ee>
2405ebd6:	68fb      	ldr	r3, [r7, #12]
2405ebd8:	2201      	movs	r2, #1
2405ebda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2405ebde:	f7f4 f899 	bl	24052d14 <HAL_GetTick>
2405ebe2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
2405ebe4:	68fb      	ldr	r3, [r7, #12]
2405ebe6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
2405ebea:	b2db      	uxtb	r3, r3
2405ebec:	2b01      	cmp	r3, #1
2405ebee:	d007      	beq.n	2405ec00 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
2405ebf0:	2302      	movs	r3, #2
2405ebf2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
2405ebf4:	68fb      	ldr	r3, [r7, #12]
2405ebf6:	2200      	movs	r2, #0
2405ebf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
2405ebfc:	7efb      	ldrb	r3, [r7, #27]
2405ebfe:	e1cc      	b.n	2405ef9a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
2405ec00:	68bb      	ldr	r3, [r7, #8]
2405ec02:	2b00      	cmp	r3, #0
2405ec04:	d002      	beq.n	2405ec0c <HAL_SPI_Transmit+0x60>
2405ec06:	88fb      	ldrh	r3, [r7, #6]
2405ec08:	2b00      	cmp	r3, #0
2405ec0a:	d107      	bne.n	2405ec1c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
2405ec0c:	2301      	movs	r3, #1
2405ec0e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
2405ec10:	68fb      	ldr	r3, [r7, #12]
2405ec12:	2200      	movs	r2, #0
2405ec14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
2405ec18:	7efb      	ldrb	r3, [r7, #27]
2405ec1a:	e1be      	b.n	2405ef9a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
2405ec1c:	68fb      	ldr	r3, [r7, #12]
2405ec1e:	2203      	movs	r2, #3
2405ec20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2405ec24:	68fb      	ldr	r3, [r7, #12]
2405ec26:	2200      	movs	r2, #0
2405ec28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
2405ec2c:	68fb      	ldr	r3, [r7, #12]
2405ec2e:	68ba      	ldr	r2, [r7, #8]
2405ec30:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
2405ec32:	68fb      	ldr	r3, [r7, #12]
2405ec34:	88fa      	ldrh	r2, [r7, #6]
2405ec36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
2405ec3a:	68fb      	ldr	r3, [r7, #12]
2405ec3c:	88fa      	ldrh	r2, [r7, #6]
2405ec3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
2405ec42:	68fb      	ldr	r3, [r7, #12]
2405ec44:	2200      	movs	r2, #0
2405ec46:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
2405ec48:	68fb      	ldr	r3, [r7, #12]
2405ec4a:	2200      	movs	r2, #0
2405ec4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
2405ec50:	68fb      	ldr	r3, [r7, #12]
2405ec52:	2200      	movs	r2, #0
2405ec54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
2405ec58:	68fb      	ldr	r3, [r7, #12]
2405ec5a:	2200      	movs	r2, #0
2405ec5c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
2405ec5e:	68fb      	ldr	r3, [r7, #12]
2405ec60:	2200      	movs	r2, #0
2405ec62:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2405ec64:	68fb      	ldr	r3, [r7, #12]
2405ec66:	689b      	ldr	r3, [r3, #8]
2405ec68:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
2405ec6c:	d108      	bne.n	2405ec80 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
2405ec6e:	68fb      	ldr	r3, [r7, #12]
2405ec70:	681b      	ldr	r3, [r3, #0]
2405ec72:	681a      	ldr	r2, [r3, #0]
2405ec74:	68fb      	ldr	r3, [r7, #12]
2405ec76:	681b      	ldr	r3, [r3, #0]
2405ec78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
2405ec7c:	601a      	str	r2, [r3, #0]
2405ec7e:	e009      	b.n	2405ec94 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
2405ec80:	68fb      	ldr	r3, [r7, #12]
2405ec82:	681b      	ldr	r3, [r3, #0]
2405ec84:	68db      	ldr	r3, [r3, #12]
2405ec86:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
2405ec8a:	68fb      	ldr	r3, [r7, #12]
2405ec8c:	681b      	ldr	r3, [r3, #0]
2405ec8e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2405ec92:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2405ec94:	68fb      	ldr	r3, [r7, #12]
2405ec96:	681b      	ldr	r3, [r3, #0]
2405ec98:	685a      	ldr	r2, [r3, #4]
2405ec9a:	4b96      	ldr	r3, [pc, #600]	; (2405eef4 <HAL_SPI_Transmit+0x348>)
2405ec9c:	4013      	ands	r3, r2
2405ec9e:	88f9      	ldrh	r1, [r7, #6]
2405eca0:	68fa      	ldr	r2, [r7, #12]
2405eca2:	6812      	ldr	r2, [r2, #0]
2405eca4:	430b      	orrs	r3, r1
2405eca6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
2405eca8:	68fb      	ldr	r3, [r7, #12]
2405ecaa:	681b      	ldr	r3, [r3, #0]
2405ecac:	681a      	ldr	r2, [r3, #0]
2405ecae:	68fb      	ldr	r3, [r7, #12]
2405ecb0:	681b      	ldr	r3, [r3, #0]
2405ecb2:	f042 0201 	orr.w	r2, r2, #1
2405ecb6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
2405ecb8:	68fb      	ldr	r3, [r7, #12]
2405ecba:	685b      	ldr	r3, [r3, #4]
2405ecbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2405ecc0:	d107      	bne.n	2405ecd2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2405ecc2:	68fb      	ldr	r3, [r7, #12]
2405ecc4:	681b      	ldr	r3, [r3, #0]
2405ecc6:	681a      	ldr	r2, [r3, #0]
2405ecc8:	68fb      	ldr	r3, [r7, #12]
2405ecca:	681b      	ldr	r3, [r3, #0]
2405eccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2405ecd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2405ecd2:	68fb      	ldr	r3, [r7, #12]
2405ecd4:	68db      	ldr	r3, [r3, #12]
2405ecd6:	2b0f      	cmp	r3, #15
2405ecd8:	d947      	bls.n	2405ed6a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
2405ecda:	e03f      	b.n	2405ed5c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
2405ecdc:	68fb      	ldr	r3, [r7, #12]
2405ecde:	681b      	ldr	r3, [r3, #0]
2405ece0:	695b      	ldr	r3, [r3, #20]
2405ece2:	f003 0302 	and.w	r3, r3, #2
2405ece6:	2b02      	cmp	r3, #2
2405ece8:	d114      	bne.n	2405ed14 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
2405ecea:	68fb      	ldr	r3, [r7, #12]
2405ecec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2405ecee:	68fb      	ldr	r3, [r7, #12]
2405ecf0:	681b      	ldr	r3, [r3, #0]
2405ecf2:	6812      	ldr	r2, [r2, #0]
2405ecf4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
2405ecf6:	68fb      	ldr	r3, [r7, #12]
2405ecf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405ecfa:	1d1a      	adds	r2, r3, #4
2405ecfc:	68fb      	ldr	r3, [r7, #12]
2405ecfe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
2405ed00:	68fb      	ldr	r3, [r7, #12]
2405ed02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405ed06:	b29b      	uxth	r3, r3
2405ed08:	3b01      	subs	r3, #1
2405ed0a:	b29a      	uxth	r2, r3
2405ed0c:	68fb      	ldr	r3, [r7, #12]
2405ed0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2405ed12:	e023      	b.n	2405ed5c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2405ed14:	f7f3 fffe 	bl	24052d14 <HAL_GetTick>
2405ed18:	4602      	mov	r2, r0
2405ed1a:	697b      	ldr	r3, [r7, #20]
2405ed1c:	1ad3      	subs	r3, r2, r3
2405ed1e:	683a      	ldr	r2, [r7, #0]
2405ed20:	429a      	cmp	r2, r3
2405ed22:	d803      	bhi.n	2405ed2c <HAL_SPI_Transmit+0x180>
2405ed24:	683b      	ldr	r3, [r7, #0]
2405ed26:	f1b3 3fff 	cmp.w	r3, #4294967295
2405ed2a:	d102      	bne.n	2405ed32 <HAL_SPI_Transmit+0x186>
2405ed2c:	683b      	ldr	r3, [r7, #0]
2405ed2e:	2b00      	cmp	r3, #0
2405ed30:	d114      	bne.n	2405ed5c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
2405ed32:	68f8      	ldr	r0, [r7, #12]
2405ed34:	f000 f936 	bl	2405efa4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
2405ed38:	68fb      	ldr	r3, [r7, #12]
2405ed3a:	2200      	movs	r2, #0
2405ed3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
2405ed40:	68fb      	ldr	r3, [r7, #12]
2405ed42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405ed46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
2405ed4a:	68fb      	ldr	r3, [r7, #12]
2405ed4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
2405ed50:	68fb      	ldr	r3, [r7, #12]
2405ed52:	2201      	movs	r2, #1
2405ed54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
2405ed58:	2303      	movs	r3, #3
2405ed5a:	e11e      	b.n	2405ef9a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
2405ed5c:	68fb      	ldr	r3, [r7, #12]
2405ed5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405ed62:	b29b      	uxth	r3, r3
2405ed64:	2b00      	cmp	r3, #0
2405ed66:	d1b9      	bne.n	2405ecdc <HAL_SPI_Transmit+0x130>
2405ed68:	e0f1      	b.n	2405ef4e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2405ed6a:	68fb      	ldr	r3, [r7, #12]
2405ed6c:	68db      	ldr	r3, [r3, #12]
2405ed6e:	2b07      	cmp	r3, #7
2405ed70:	f240 80e6 	bls.w	2405ef40 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
2405ed74:	e05d      	b.n	2405ee32 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
2405ed76:	68fb      	ldr	r3, [r7, #12]
2405ed78:	681b      	ldr	r3, [r3, #0]
2405ed7a:	695b      	ldr	r3, [r3, #20]
2405ed7c:	f003 0302 	and.w	r3, r3, #2
2405ed80:	2b02      	cmp	r3, #2
2405ed82:	d132      	bne.n	2405edea <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
2405ed84:	68fb      	ldr	r3, [r7, #12]
2405ed86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405ed8a:	b29b      	uxth	r3, r3
2405ed8c:	2b01      	cmp	r3, #1
2405ed8e:	d918      	bls.n	2405edc2 <HAL_SPI_Transmit+0x216>
2405ed90:	68fb      	ldr	r3, [r7, #12]
2405ed92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405ed94:	2b00      	cmp	r3, #0
2405ed96:	d014      	beq.n	2405edc2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
2405ed98:	68fb      	ldr	r3, [r7, #12]
2405ed9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2405ed9c:	68fb      	ldr	r3, [r7, #12]
2405ed9e:	681b      	ldr	r3, [r3, #0]
2405eda0:	6812      	ldr	r2, [r2, #0]
2405eda2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
2405eda4:	68fb      	ldr	r3, [r7, #12]
2405eda6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405eda8:	1d1a      	adds	r2, r3, #4
2405edaa:	68fb      	ldr	r3, [r7, #12]
2405edac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
2405edae:	68fb      	ldr	r3, [r7, #12]
2405edb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405edb4:	b29b      	uxth	r3, r3
2405edb6:	3b02      	subs	r3, #2
2405edb8:	b29a      	uxth	r2, r3
2405edba:	68fb      	ldr	r3, [r7, #12]
2405edbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2405edc0:	e037      	b.n	2405ee32 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
2405edc2:	68fb      	ldr	r3, [r7, #12]
2405edc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405edc6:	881a      	ldrh	r2, [r3, #0]
2405edc8:	69fb      	ldr	r3, [r7, #28]
2405edca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
2405edcc:	68fb      	ldr	r3, [r7, #12]
2405edce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405edd0:	1c9a      	adds	r2, r3, #2
2405edd2:	68fb      	ldr	r3, [r7, #12]
2405edd4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
2405edd6:	68fb      	ldr	r3, [r7, #12]
2405edd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405eddc:	b29b      	uxth	r3, r3
2405edde:	3b01      	subs	r3, #1
2405ede0:	b29a      	uxth	r2, r3
2405ede2:	68fb      	ldr	r3, [r7, #12]
2405ede4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2405ede8:	e023      	b.n	2405ee32 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2405edea:	f7f3 ff93 	bl	24052d14 <HAL_GetTick>
2405edee:	4602      	mov	r2, r0
2405edf0:	697b      	ldr	r3, [r7, #20]
2405edf2:	1ad3      	subs	r3, r2, r3
2405edf4:	683a      	ldr	r2, [r7, #0]
2405edf6:	429a      	cmp	r2, r3
2405edf8:	d803      	bhi.n	2405ee02 <HAL_SPI_Transmit+0x256>
2405edfa:	683b      	ldr	r3, [r7, #0]
2405edfc:	f1b3 3fff 	cmp.w	r3, #4294967295
2405ee00:	d102      	bne.n	2405ee08 <HAL_SPI_Transmit+0x25c>
2405ee02:	683b      	ldr	r3, [r7, #0]
2405ee04:	2b00      	cmp	r3, #0
2405ee06:	d114      	bne.n	2405ee32 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
2405ee08:	68f8      	ldr	r0, [r7, #12]
2405ee0a:	f000 f8cb 	bl	2405efa4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
2405ee0e:	68fb      	ldr	r3, [r7, #12]
2405ee10:	2200      	movs	r2, #0
2405ee12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
2405ee16:	68fb      	ldr	r3, [r7, #12]
2405ee18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405ee1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
2405ee20:	68fb      	ldr	r3, [r7, #12]
2405ee22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
2405ee26:	68fb      	ldr	r3, [r7, #12]
2405ee28:	2201      	movs	r2, #1
2405ee2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
2405ee2e:	2303      	movs	r3, #3
2405ee30:	e0b3      	b.n	2405ef9a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
2405ee32:	68fb      	ldr	r3, [r7, #12]
2405ee34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405ee38:	b29b      	uxth	r3, r3
2405ee3a:	2b00      	cmp	r3, #0
2405ee3c:	d19b      	bne.n	2405ed76 <HAL_SPI_Transmit+0x1ca>
2405ee3e:	e086      	b.n	2405ef4e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
2405ee40:	68fb      	ldr	r3, [r7, #12]
2405ee42:	681b      	ldr	r3, [r3, #0]
2405ee44:	695b      	ldr	r3, [r3, #20]
2405ee46:	f003 0302 	and.w	r3, r3, #2
2405ee4a:	2b02      	cmp	r3, #2
2405ee4c:	d154      	bne.n	2405eef8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
2405ee4e:	68fb      	ldr	r3, [r7, #12]
2405ee50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405ee54:	b29b      	uxth	r3, r3
2405ee56:	2b03      	cmp	r3, #3
2405ee58:	d918      	bls.n	2405ee8c <HAL_SPI_Transmit+0x2e0>
2405ee5a:	68fb      	ldr	r3, [r7, #12]
2405ee5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405ee5e:	2b40      	cmp	r3, #64	; 0x40
2405ee60:	d914      	bls.n	2405ee8c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
2405ee62:	68fb      	ldr	r3, [r7, #12]
2405ee64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2405ee66:	68fb      	ldr	r3, [r7, #12]
2405ee68:	681b      	ldr	r3, [r3, #0]
2405ee6a:	6812      	ldr	r2, [r2, #0]
2405ee6c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
2405ee6e:	68fb      	ldr	r3, [r7, #12]
2405ee70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405ee72:	1d1a      	adds	r2, r3, #4
2405ee74:	68fb      	ldr	r3, [r7, #12]
2405ee76:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
2405ee78:	68fb      	ldr	r3, [r7, #12]
2405ee7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405ee7e:	b29b      	uxth	r3, r3
2405ee80:	3b04      	subs	r3, #4
2405ee82:	b29a      	uxth	r2, r3
2405ee84:	68fb      	ldr	r3, [r7, #12]
2405ee86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2405ee8a:	e059      	b.n	2405ef40 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
2405ee8c:	68fb      	ldr	r3, [r7, #12]
2405ee8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405ee92:	b29b      	uxth	r3, r3
2405ee94:	2b01      	cmp	r3, #1
2405ee96:	d917      	bls.n	2405eec8 <HAL_SPI_Transmit+0x31c>
2405ee98:	68fb      	ldr	r3, [r7, #12]
2405ee9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405ee9c:	2b00      	cmp	r3, #0
2405ee9e:	d013      	beq.n	2405eec8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
2405eea0:	68fb      	ldr	r3, [r7, #12]
2405eea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405eea4:	881a      	ldrh	r2, [r3, #0]
2405eea6:	69fb      	ldr	r3, [r7, #28]
2405eea8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
2405eeaa:	68fb      	ldr	r3, [r7, #12]
2405eeac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405eeae:	1c9a      	adds	r2, r3, #2
2405eeb0:	68fb      	ldr	r3, [r7, #12]
2405eeb2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
2405eeb4:	68fb      	ldr	r3, [r7, #12]
2405eeb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405eeba:	b29b      	uxth	r3, r3
2405eebc:	3b02      	subs	r3, #2
2405eebe:	b29a      	uxth	r2, r3
2405eec0:	68fb      	ldr	r3, [r7, #12]
2405eec2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2405eec6:	e03b      	b.n	2405ef40 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
2405eec8:	68fb      	ldr	r3, [r7, #12]
2405eeca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2405eecc:	68fb      	ldr	r3, [r7, #12]
2405eece:	681b      	ldr	r3, [r3, #0]
2405eed0:	3320      	adds	r3, #32
2405eed2:	7812      	ldrb	r2, [r2, #0]
2405eed4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
2405eed6:	68fb      	ldr	r3, [r7, #12]
2405eed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405eeda:	1c5a      	adds	r2, r3, #1
2405eedc:	68fb      	ldr	r3, [r7, #12]
2405eede:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
2405eee0:	68fb      	ldr	r3, [r7, #12]
2405eee2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405eee6:	b29b      	uxth	r3, r3
2405eee8:	3b01      	subs	r3, #1
2405eeea:	b29a      	uxth	r2, r3
2405eeec:	68fb      	ldr	r3, [r7, #12]
2405eeee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2405eef2:	e025      	b.n	2405ef40 <HAL_SPI_Transmit+0x394>
2405eef4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2405eef8:	f7f3 ff0c 	bl	24052d14 <HAL_GetTick>
2405eefc:	4602      	mov	r2, r0
2405eefe:	697b      	ldr	r3, [r7, #20]
2405ef00:	1ad3      	subs	r3, r2, r3
2405ef02:	683a      	ldr	r2, [r7, #0]
2405ef04:	429a      	cmp	r2, r3
2405ef06:	d803      	bhi.n	2405ef10 <HAL_SPI_Transmit+0x364>
2405ef08:	683b      	ldr	r3, [r7, #0]
2405ef0a:	f1b3 3fff 	cmp.w	r3, #4294967295
2405ef0e:	d102      	bne.n	2405ef16 <HAL_SPI_Transmit+0x36a>
2405ef10:	683b      	ldr	r3, [r7, #0]
2405ef12:	2b00      	cmp	r3, #0
2405ef14:	d114      	bne.n	2405ef40 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
2405ef16:	68f8      	ldr	r0, [r7, #12]
2405ef18:	f000 f844 	bl	2405efa4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
2405ef1c:	68fb      	ldr	r3, [r7, #12]
2405ef1e:	2200      	movs	r2, #0
2405ef20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
2405ef24:	68fb      	ldr	r3, [r7, #12]
2405ef26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405ef2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
2405ef2e:	68fb      	ldr	r3, [r7, #12]
2405ef30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
2405ef34:	68fb      	ldr	r3, [r7, #12]
2405ef36:	2201      	movs	r2, #1
2405ef38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
2405ef3c:	2303      	movs	r3, #3
2405ef3e:	e02c      	b.n	2405ef9a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
2405ef40:	68fb      	ldr	r3, [r7, #12]
2405ef42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405ef46:	b29b      	uxth	r3, r3
2405ef48:	2b00      	cmp	r3, #0
2405ef4a:	f47f af79 	bne.w	2405ee40 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
2405ef4e:	697b      	ldr	r3, [r7, #20]
2405ef50:	9300      	str	r3, [sp, #0]
2405ef52:	683b      	ldr	r3, [r7, #0]
2405ef54:	2200      	movs	r2, #0
2405ef56:	2108      	movs	r1, #8
2405ef58:	68f8      	ldr	r0, [r7, #12]
2405ef5a:	f000 f8c3 	bl	2405f0e4 <SPI_WaitOnFlagUntilTimeout>
2405ef5e:	4603      	mov	r3, r0
2405ef60:	2b00      	cmp	r3, #0
2405ef62:	d007      	beq.n	2405ef74 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2405ef64:	68fb      	ldr	r3, [r7, #12]
2405ef66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405ef6a:	f043 0220 	orr.w	r2, r3, #32
2405ef6e:	68fb      	ldr	r3, [r7, #12]
2405ef70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
2405ef74:	68f8      	ldr	r0, [r7, #12]
2405ef76:	f000 f815 	bl	2405efa4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
2405ef7a:	68fb      	ldr	r3, [r7, #12]
2405ef7c:	2200      	movs	r2, #0
2405ef7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
2405ef82:	68fb      	ldr	r3, [r7, #12]
2405ef84:	2201      	movs	r2, #1
2405ef86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2405ef8a:	68fb      	ldr	r3, [r7, #12]
2405ef8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405ef90:	2b00      	cmp	r3, #0
2405ef92:	d001      	beq.n	2405ef98 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
2405ef94:	2301      	movs	r3, #1
2405ef96:	e000      	b.n	2405ef9a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
2405ef98:	7efb      	ldrb	r3, [r7, #27]
}
2405ef9a:	4618      	mov	r0, r3
2405ef9c:	3720      	adds	r7, #32
2405ef9e:	46bd      	mov	sp, r7
2405efa0:	bd80      	pop	{r7, pc}
2405efa2:	bf00      	nop

2405efa4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
2405efa4:	b480      	push	{r7}
2405efa6:	b085      	sub	sp, #20
2405efa8:	af00      	add	r7, sp, #0
2405efaa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
2405efac:	687b      	ldr	r3, [r7, #4]
2405efae:	681b      	ldr	r3, [r3, #0]
2405efb0:	695b      	ldr	r3, [r3, #20]
2405efb2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2405efb4:	687b      	ldr	r3, [r7, #4]
2405efb6:	681b      	ldr	r3, [r3, #0]
2405efb8:	699a      	ldr	r2, [r3, #24]
2405efba:	687b      	ldr	r3, [r7, #4]
2405efbc:	681b      	ldr	r3, [r3, #0]
2405efbe:	f042 0208 	orr.w	r2, r2, #8
2405efc2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2405efc4:	687b      	ldr	r3, [r7, #4]
2405efc6:	681b      	ldr	r3, [r3, #0]
2405efc8:	699a      	ldr	r2, [r3, #24]
2405efca:	687b      	ldr	r3, [r7, #4]
2405efcc:	681b      	ldr	r3, [r3, #0]
2405efce:	f042 0210 	orr.w	r2, r2, #16
2405efd2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2405efd4:	687b      	ldr	r3, [r7, #4]
2405efd6:	681b      	ldr	r3, [r3, #0]
2405efd8:	681a      	ldr	r2, [r3, #0]
2405efda:	687b      	ldr	r3, [r7, #4]
2405efdc:	681b      	ldr	r3, [r3, #0]
2405efde:	f022 0201 	bic.w	r2, r2, #1
2405efe2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2405efe4:	687b      	ldr	r3, [r7, #4]
2405efe6:	681b      	ldr	r3, [r3, #0]
2405efe8:	6919      	ldr	r1, [r3, #16]
2405efea:	687b      	ldr	r3, [r7, #4]
2405efec:	681a      	ldr	r2, [r3, #0]
2405efee:	4b3c      	ldr	r3, [pc, #240]	; (2405f0e0 <SPI_CloseTransfer+0x13c>)
2405eff0:	400b      	ands	r3, r1
2405eff2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2405eff4:	687b      	ldr	r3, [r7, #4]
2405eff6:	681b      	ldr	r3, [r3, #0]
2405eff8:	689a      	ldr	r2, [r3, #8]
2405effa:	687b      	ldr	r3, [r7, #4]
2405effc:	681b      	ldr	r3, [r3, #0]
2405effe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2405f002:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2405f004:	687b      	ldr	r3, [r7, #4]
2405f006:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
2405f00a:	b2db      	uxtb	r3, r3
2405f00c:	2b04      	cmp	r3, #4
2405f00e:	d014      	beq.n	2405f03a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2405f010:	68fb      	ldr	r3, [r7, #12]
2405f012:	f003 0320 	and.w	r3, r3, #32
2405f016:	2b00      	cmp	r3, #0
2405f018:	d00f      	beq.n	2405f03a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2405f01a:	687b      	ldr	r3, [r7, #4]
2405f01c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405f020:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405f024:	687b      	ldr	r3, [r7, #4]
2405f026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2405f02a:	687b      	ldr	r3, [r7, #4]
2405f02c:	681b      	ldr	r3, [r3, #0]
2405f02e:	699a      	ldr	r2, [r3, #24]
2405f030:	687b      	ldr	r3, [r7, #4]
2405f032:	681b      	ldr	r3, [r3, #0]
2405f034:	f042 0220 	orr.w	r2, r2, #32
2405f038:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2405f03a:	687b      	ldr	r3, [r7, #4]
2405f03c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
2405f040:	b2db      	uxtb	r3, r3
2405f042:	2b03      	cmp	r3, #3
2405f044:	d014      	beq.n	2405f070 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2405f046:	68fb      	ldr	r3, [r7, #12]
2405f048:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405f04c:	2b00      	cmp	r3, #0
2405f04e:	d00f      	beq.n	2405f070 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2405f050:	687b      	ldr	r3, [r7, #4]
2405f052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405f056:	f043 0204 	orr.w	r2, r3, #4
2405f05a:	687b      	ldr	r3, [r7, #4]
2405f05c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2405f060:	687b      	ldr	r3, [r7, #4]
2405f062:	681b      	ldr	r3, [r3, #0]
2405f064:	699a      	ldr	r2, [r3, #24]
2405f066:	687b      	ldr	r3, [r7, #4]
2405f068:	681b      	ldr	r3, [r3, #0]
2405f06a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2405f06e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2405f070:	68fb      	ldr	r3, [r7, #12]
2405f072:	f403 7300 	and.w	r3, r3, #512	; 0x200
2405f076:	2b00      	cmp	r3, #0
2405f078:	d00f      	beq.n	2405f09a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2405f07a:	687b      	ldr	r3, [r7, #4]
2405f07c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405f080:	f043 0201 	orr.w	r2, r3, #1
2405f084:	687b      	ldr	r3, [r7, #4]
2405f086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2405f08a:	687b      	ldr	r3, [r7, #4]
2405f08c:	681b      	ldr	r3, [r3, #0]
2405f08e:	699a      	ldr	r2, [r3, #24]
2405f090:	687b      	ldr	r3, [r7, #4]
2405f092:	681b      	ldr	r3, [r3, #0]
2405f094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2405f098:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2405f09a:	68fb      	ldr	r3, [r7, #12]
2405f09c:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405f0a0:	2b00      	cmp	r3, #0
2405f0a2:	d00f      	beq.n	2405f0c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2405f0a4:	687b      	ldr	r3, [r7, #4]
2405f0a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405f0aa:	f043 0208 	orr.w	r2, r3, #8
2405f0ae:	687b      	ldr	r3, [r7, #4]
2405f0b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2405f0b4:	687b      	ldr	r3, [r7, #4]
2405f0b6:	681b      	ldr	r3, [r3, #0]
2405f0b8:	699a      	ldr	r2, [r3, #24]
2405f0ba:	687b      	ldr	r3, [r7, #4]
2405f0bc:	681b      	ldr	r3, [r3, #0]
2405f0be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2405f0c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2405f0c4:	687b      	ldr	r3, [r7, #4]
2405f0c6:	2200      	movs	r2, #0
2405f0c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2405f0cc:	687b      	ldr	r3, [r7, #4]
2405f0ce:	2200      	movs	r2, #0
2405f0d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
2405f0d4:	bf00      	nop
2405f0d6:	3714      	adds	r7, #20
2405f0d8:	46bd      	mov	sp, r7
2405f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
2405f0de:	4770      	bx	lr
2405f0e0:	fffffc90 	.word	0xfffffc90

2405f0e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
2405f0e4:	b580      	push	{r7, lr}
2405f0e6:	b084      	sub	sp, #16
2405f0e8:	af00      	add	r7, sp, #0
2405f0ea:	60f8      	str	r0, [r7, #12]
2405f0ec:	60b9      	str	r1, [r7, #8]
2405f0ee:	603b      	str	r3, [r7, #0]
2405f0f0:	4613      	mov	r3, r2
2405f0f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
2405f0f4:	e010      	b.n	2405f118 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2405f0f6:	f7f3 fe0d 	bl	24052d14 <HAL_GetTick>
2405f0fa:	4602      	mov	r2, r0
2405f0fc:	69bb      	ldr	r3, [r7, #24]
2405f0fe:	1ad3      	subs	r3, r2, r3
2405f100:	683a      	ldr	r2, [r7, #0]
2405f102:	429a      	cmp	r2, r3
2405f104:	d803      	bhi.n	2405f10e <SPI_WaitOnFlagUntilTimeout+0x2a>
2405f106:	683b      	ldr	r3, [r7, #0]
2405f108:	f1b3 3fff 	cmp.w	r3, #4294967295
2405f10c:	d102      	bne.n	2405f114 <SPI_WaitOnFlagUntilTimeout+0x30>
2405f10e:	683b      	ldr	r3, [r7, #0]
2405f110:	2b00      	cmp	r3, #0
2405f112:	d101      	bne.n	2405f118 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
2405f114:	2303      	movs	r3, #3
2405f116:	e00f      	b.n	2405f138 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
2405f118:	68fb      	ldr	r3, [r7, #12]
2405f11a:	681b      	ldr	r3, [r3, #0]
2405f11c:	695a      	ldr	r2, [r3, #20]
2405f11e:	68bb      	ldr	r3, [r7, #8]
2405f120:	4013      	ands	r3, r2
2405f122:	68ba      	ldr	r2, [r7, #8]
2405f124:	429a      	cmp	r2, r3
2405f126:	bf0c      	ite	eq
2405f128:	2301      	moveq	r3, #1
2405f12a:	2300      	movne	r3, #0
2405f12c:	b2db      	uxtb	r3, r3
2405f12e:	461a      	mov	r2, r3
2405f130:	79fb      	ldrb	r3, [r7, #7]
2405f132:	429a      	cmp	r2, r3
2405f134:	d0df      	beq.n	2405f0f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
2405f136:	2300      	movs	r3, #0
}
2405f138:	4618      	mov	r0, r3
2405f13a:	3710      	adds	r7, #16
2405f13c:	46bd      	mov	sp, r7
2405f13e:	bd80      	pop	{r7, pc}

2405f140 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
2405f140:	b480      	push	{r7}
2405f142:	b085      	sub	sp, #20
2405f144:	af00      	add	r7, sp, #0
2405f146:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2405f148:	687b      	ldr	r3, [r7, #4]
2405f14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405f14c:	095b      	lsrs	r3, r3, #5
2405f14e:	3301      	adds	r3, #1
2405f150:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
2405f152:	687b      	ldr	r3, [r7, #4]
2405f154:	68db      	ldr	r3, [r3, #12]
2405f156:	3301      	adds	r3, #1
2405f158:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2405f15a:	68bb      	ldr	r3, [r7, #8]
2405f15c:	3307      	adds	r3, #7
2405f15e:	08db      	lsrs	r3, r3, #3
2405f160:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
2405f162:	68bb      	ldr	r3, [r7, #8]
2405f164:	68fa      	ldr	r2, [r7, #12]
2405f166:	fb02 f303 	mul.w	r3, r2, r3
}
2405f16a:	4618      	mov	r0, r3
2405f16c:	3714      	adds	r7, #20
2405f16e:	46bd      	mov	sp, r7
2405f170:	f85d 7b04 	ldr.w	r7, [sp], #4
2405f174:	4770      	bx	lr
	...

2405f178 <srand>:
2405f178:	b538      	push	{r3, r4, r5, lr}
2405f17a:	4b10      	ldr	r3, [pc, #64]	; (2405f1bc <srand+0x44>)
2405f17c:	681d      	ldr	r5, [r3, #0]
2405f17e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
2405f180:	4604      	mov	r4, r0
2405f182:	b9b3      	cbnz	r3, 2405f1b2 <srand+0x3a>
2405f184:	2018      	movs	r0, #24
2405f186:	f000 fa7d 	bl	2405f684 <malloc>
2405f18a:	4602      	mov	r2, r0
2405f18c:	6328      	str	r0, [r5, #48]	; 0x30
2405f18e:	b920      	cbnz	r0, 2405f19a <srand+0x22>
2405f190:	4b0b      	ldr	r3, [pc, #44]	; (2405f1c0 <srand+0x48>)
2405f192:	480c      	ldr	r0, [pc, #48]	; (2405f1c4 <srand+0x4c>)
2405f194:	2146      	movs	r1, #70	; 0x46
2405f196:	f000 fa0b 	bl	2405f5b0 <__assert_func>
2405f19a:	490b      	ldr	r1, [pc, #44]	; (2405f1c8 <srand+0x50>)
2405f19c:	4b0b      	ldr	r3, [pc, #44]	; (2405f1cc <srand+0x54>)
2405f19e:	e9c0 1300 	strd	r1, r3, [r0]
2405f1a2:	4b0b      	ldr	r3, [pc, #44]	; (2405f1d0 <srand+0x58>)
2405f1a4:	6083      	str	r3, [r0, #8]
2405f1a6:	230b      	movs	r3, #11
2405f1a8:	8183      	strh	r3, [r0, #12]
2405f1aa:	2100      	movs	r1, #0
2405f1ac:	2001      	movs	r0, #1
2405f1ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
2405f1b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
2405f1b4:	2200      	movs	r2, #0
2405f1b6:	611c      	str	r4, [r3, #16]
2405f1b8:	615a      	str	r2, [r3, #20]
2405f1ba:	bd38      	pop	{r3, r4, r5, pc}
2405f1bc:	20000098 	.word	0x20000098
2405f1c0:	24061608 	.word	0x24061608
2405f1c4:	2406161f 	.word	0x2406161f
2405f1c8:	abcd330e 	.word	0xabcd330e
2405f1cc:	e66d1234 	.word	0xe66d1234
2405f1d0:	0005deec 	.word	0x0005deec

2405f1d4 <rand>:
2405f1d4:	4b16      	ldr	r3, [pc, #88]	; (2405f230 <rand+0x5c>)
2405f1d6:	b510      	push	{r4, lr}
2405f1d8:	681c      	ldr	r4, [r3, #0]
2405f1da:	6b23      	ldr	r3, [r4, #48]	; 0x30
2405f1dc:	b9b3      	cbnz	r3, 2405f20c <rand+0x38>
2405f1de:	2018      	movs	r0, #24
2405f1e0:	f000 fa50 	bl	2405f684 <malloc>
2405f1e4:	4602      	mov	r2, r0
2405f1e6:	6320      	str	r0, [r4, #48]	; 0x30
2405f1e8:	b920      	cbnz	r0, 2405f1f4 <rand+0x20>
2405f1ea:	4b12      	ldr	r3, [pc, #72]	; (2405f234 <rand+0x60>)
2405f1ec:	4812      	ldr	r0, [pc, #72]	; (2405f238 <rand+0x64>)
2405f1ee:	2152      	movs	r1, #82	; 0x52
2405f1f0:	f000 f9de 	bl	2405f5b0 <__assert_func>
2405f1f4:	4911      	ldr	r1, [pc, #68]	; (2405f23c <rand+0x68>)
2405f1f6:	4b12      	ldr	r3, [pc, #72]	; (2405f240 <rand+0x6c>)
2405f1f8:	e9c0 1300 	strd	r1, r3, [r0]
2405f1fc:	4b11      	ldr	r3, [pc, #68]	; (2405f244 <rand+0x70>)
2405f1fe:	6083      	str	r3, [r0, #8]
2405f200:	230b      	movs	r3, #11
2405f202:	8183      	strh	r3, [r0, #12]
2405f204:	2100      	movs	r1, #0
2405f206:	2001      	movs	r0, #1
2405f208:	e9c2 0104 	strd	r0, r1, [r2, #16]
2405f20c:	6b21      	ldr	r1, [r4, #48]	; 0x30
2405f20e:	480e      	ldr	r0, [pc, #56]	; (2405f248 <rand+0x74>)
2405f210:	690b      	ldr	r3, [r1, #16]
2405f212:	694c      	ldr	r4, [r1, #20]
2405f214:	4a0d      	ldr	r2, [pc, #52]	; (2405f24c <rand+0x78>)
2405f216:	4358      	muls	r0, r3
2405f218:	fb02 0004 	mla	r0, r2, r4, r0
2405f21c:	fba3 3202 	umull	r3, r2, r3, r2
2405f220:	3301      	adds	r3, #1
2405f222:	eb40 0002 	adc.w	r0, r0, r2
2405f226:	e9c1 3004 	strd	r3, r0, [r1, #16]
2405f22a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
2405f22e:	bd10      	pop	{r4, pc}
2405f230:	20000098 	.word	0x20000098
2405f234:	24061608 	.word	0x24061608
2405f238:	2406161f 	.word	0x2406161f
2405f23c:	abcd330e 	.word	0xabcd330e
2405f240:	e66d1234 	.word	0xe66d1234
2405f244:	0005deec 	.word	0x0005deec
2405f248:	5851f42d 	.word	0x5851f42d
2405f24c:	4c957f2d 	.word	0x4c957f2d

2405f250 <std>:
2405f250:	2300      	movs	r3, #0
2405f252:	b510      	push	{r4, lr}
2405f254:	4604      	mov	r4, r0
2405f256:	e9c0 3300 	strd	r3, r3, [r0]
2405f25a:	e9c0 3304 	strd	r3, r3, [r0, #16]
2405f25e:	6083      	str	r3, [r0, #8]
2405f260:	8181      	strh	r1, [r0, #12]
2405f262:	6643      	str	r3, [r0, #100]	; 0x64
2405f264:	81c2      	strh	r2, [r0, #14]
2405f266:	6183      	str	r3, [r0, #24]
2405f268:	4619      	mov	r1, r3
2405f26a:	2208      	movs	r2, #8
2405f26c:	305c      	adds	r0, #92	; 0x5c
2405f26e:	f000 f914 	bl	2405f49a <memset>
2405f272:	4b0d      	ldr	r3, [pc, #52]	; (2405f2a8 <std+0x58>)
2405f274:	6263      	str	r3, [r4, #36]	; 0x24
2405f276:	4b0d      	ldr	r3, [pc, #52]	; (2405f2ac <std+0x5c>)
2405f278:	62a3      	str	r3, [r4, #40]	; 0x28
2405f27a:	4b0d      	ldr	r3, [pc, #52]	; (2405f2b0 <std+0x60>)
2405f27c:	62e3      	str	r3, [r4, #44]	; 0x2c
2405f27e:	4b0d      	ldr	r3, [pc, #52]	; (2405f2b4 <std+0x64>)
2405f280:	6323      	str	r3, [r4, #48]	; 0x30
2405f282:	4b0d      	ldr	r3, [pc, #52]	; (2405f2b8 <std+0x68>)
2405f284:	6224      	str	r4, [r4, #32]
2405f286:	429c      	cmp	r4, r3
2405f288:	d006      	beq.n	2405f298 <std+0x48>
2405f28a:	f103 0268 	add.w	r2, r3, #104	; 0x68
2405f28e:	4294      	cmp	r4, r2
2405f290:	d002      	beq.n	2405f298 <std+0x48>
2405f292:	33d0      	adds	r3, #208	; 0xd0
2405f294:	429c      	cmp	r4, r3
2405f296:	d105      	bne.n	2405f2a4 <std+0x54>
2405f298:	f104 0058 	add.w	r0, r4, #88	; 0x58
2405f29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2405f2a0:	f000 b974 	b.w	2405f58c <__retarget_lock_init_recursive>
2405f2a4:	bd10      	pop	{r4, pc}
2405f2a6:	bf00      	nop
2405f2a8:	2405f415 	.word	0x2405f415
2405f2ac:	2405f437 	.word	0x2405f437
2405f2b0:	2405f46f 	.word	0x2405f46f
2405f2b4:	2405f493 	.word	0x2405f493
2405f2b8:	200005cc 	.word	0x200005cc

2405f2bc <stdio_exit_handler>:
2405f2bc:	4a02      	ldr	r2, [pc, #8]	; (2405f2c8 <stdio_exit_handler+0xc>)
2405f2be:	4903      	ldr	r1, [pc, #12]	; (2405f2cc <stdio_exit_handler+0x10>)
2405f2c0:	4803      	ldr	r0, [pc, #12]	; (2405f2d0 <stdio_exit_handler+0x14>)
2405f2c2:	f000 b869 	b.w	2405f398 <_fwalk_sglue>
2405f2c6:	bf00      	nop
2405f2c8:	20000040 	.word	0x20000040
2405f2cc:	2405fec9 	.word	0x2405fec9
2405f2d0:	2000004c 	.word	0x2000004c

2405f2d4 <cleanup_stdio>:
2405f2d4:	6841      	ldr	r1, [r0, #4]
2405f2d6:	4b0c      	ldr	r3, [pc, #48]	; (2405f308 <cleanup_stdio+0x34>)
2405f2d8:	4299      	cmp	r1, r3
2405f2da:	b510      	push	{r4, lr}
2405f2dc:	4604      	mov	r4, r0
2405f2de:	d001      	beq.n	2405f2e4 <cleanup_stdio+0x10>
2405f2e0:	f000 fdf2 	bl	2405fec8 <_fflush_r>
2405f2e4:	68a1      	ldr	r1, [r4, #8]
2405f2e6:	4b09      	ldr	r3, [pc, #36]	; (2405f30c <cleanup_stdio+0x38>)
2405f2e8:	4299      	cmp	r1, r3
2405f2ea:	d002      	beq.n	2405f2f2 <cleanup_stdio+0x1e>
2405f2ec:	4620      	mov	r0, r4
2405f2ee:	f000 fdeb 	bl	2405fec8 <_fflush_r>
2405f2f2:	68e1      	ldr	r1, [r4, #12]
2405f2f4:	4b06      	ldr	r3, [pc, #24]	; (2405f310 <cleanup_stdio+0x3c>)
2405f2f6:	4299      	cmp	r1, r3
2405f2f8:	d004      	beq.n	2405f304 <cleanup_stdio+0x30>
2405f2fa:	4620      	mov	r0, r4
2405f2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2405f300:	f000 bde2 	b.w	2405fec8 <_fflush_r>
2405f304:	bd10      	pop	{r4, pc}
2405f306:	bf00      	nop
2405f308:	200005cc 	.word	0x200005cc
2405f30c:	20000634 	.word	0x20000634
2405f310:	2000069c 	.word	0x2000069c

2405f314 <global_stdio_init.part.0>:
2405f314:	b510      	push	{r4, lr}
2405f316:	4b0b      	ldr	r3, [pc, #44]	; (2405f344 <global_stdio_init.part.0+0x30>)
2405f318:	4c0b      	ldr	r4, [pc, #44]	; (2405f348 <global_stdio_init.part.0+0x34>)
2405f31a:	4a0c      	ldr	r2, [pc, #48]	; (2405f34c <global_stdio_init.part.0+0x38>)
2405f31c:	601a      	str	r2, [r3, #0]
2405f31e:	4620      	mov	r0, r4
2405f320:	2200      	movs	r2, #0
2405f322:	2104      	movs	r1, #4
2405f324:	f7ff ff94 	bl	2405f250 <std>
2405f328:	f104 0068 	add.w	r0, r4, #104	; 0x68
2405f32c:	2201      	movs	r2, #1
2405f32e:	2109      	movs	r1, #9
2405f330:	f7ff ff8e 	bl	2405f250 <std>
2405f334:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
2405f338:	2202      	movs	r2, #2
2405f33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2405f33e:	2112      	movs	r1, #18
2405f340:	f7ff bf86 	b.w	2405f250 <std>
2405f344:	20000704 	.word	0x20000704
2405f348:	200005cc 	.word	0x200005cc
2405f34c:	2405f2bd 	.word	0x2405f2bd

2405f350 <__sfp_lock_acquire>:
2405f350:	4801      	ldr	r0, [pc, #4]	; (2405f358 <__sfp_lock_acquire+0x8>)
2405f352:	f000 b91c 	b.w	2405f58e <__retarget_lock_acquire_recursive>
2405f356:	bf00      	nop
2405f358:	2000070d 	.word	0x2000070d

2405f35c <__sfp_lock_release>:
2405f35c:	4801      	ldr	r0, [pc, #4]	; (2405f364 <__sfp_lock_release+0x8>)
2405f35e:	f000 b917 	b.w	2405f590 <__retarget_lock_release_recursive>
2405f362:	bf00      	nop
2405f364:	2000070d 	.word	0x2000070d

2405f368 <__sinit>:
2405f368:	b510      	push	{r4, lr}
2405f36a:	4604      	mov	r4, r0
2405f36c:	f7ff fff0 	bl	2405f350 <__sfp_lock_acquire>
2405f370:	6a23      	ldr	r3, [r4, #32]
2405f372:	b11b      	cbz	r3, 2405f37c <__sinit+0x14>
2405f374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2405f378:	f7ff bff0 	b.w	2405f35c <__sfp_lock_release>
2405f37c:	4b04      	ldr	r3, [pc, #16]	; (2405f390 <__sinit+0x28>)
2405f37e:	6223      	str	r3, [r4, #32]
2405f380:	4b04      	ldr	r3, [pc, #16]	; (2405f394 <__sinit+0x2c>)
2405f382:	681b      	ldr	r3, [r3, #0]
2405f384:	2b00      	cmp	r3, #0
2405f386:	d1f5      	bne.n	2405f374 <__sinit+0xc>
2405f388:	f7ff ffc4 	bl	2405f314 <global_stdio_init.part.0>
2405f38c:	e7f2      	b.n	2405f374 <__sinit+0xc>
2405f38e:	bf00      	nop
2405f390:	2405f2d5 	.word	0x2405f2d5
2405f394:	20000704 	.word	0x20000704

2405f398 <_fwalk_sglue>:
2405f398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2405f39c:	4607      	mov	r7, r0
2405f39e:	4688      	mov	r8, r1
2405f3a0:	4614      	mov	r4, r2
2405f3a2:	2600      	movs	r6, #0
2405f3a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
2405f3a8:	f1b9 0901 	subs.w	r9, r9, #1
2405f3ac:	d505      	bpl.n	2405f3ba <_fwalk_sglue+0x22>
2405f3ae:	6824      	ldr	r4, [r4, #0]
2405f3b0:	2c00      	cmp	r4, #0
2405f3b2:	d1f7      	bne.n	2405f3a4 <_fwalk_sglue+0xc>
2405f3b4:	4630      	mov	r0, r6
2405f3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2405f3ba:	89ab      	ldrh	r3, [r5, #12]
2405f3bc:	2b01      	cmp	r3, #1
2405f3be:	d907      	bls.n	2405f3d0 <_fwalk_sglue+0x38>
2405f3c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
2405f3c4:	3301      	adds	r3, #1
2405f3c6:	d003      	beq.n	2405f3d0 <_fwalk_sglue+0x38>
2405f3c8:	4629      	mov	r1, r5
2405f3ca:	4638      	mov	r0, r7
2405f3cc:	47c0      	blx	r8
2405f3ce:	4306      	orrs	r6, r0
2405f3d0:	3568      	adds	r5, #104	; 0x68
2405f3d2:	e7e9      	b.n	2405f3a8 <_fwalk_sglue+0x10>

2405f3d4 <siprintf>:
2405f3d4:	b40e      	push	{r1, r2, r3}
2405f3d6:	b500      	push	{lr}
2405f3d8:	b09c      	sub	sp, #112	; 0x70
2405f3da:	ab1d      	add	r3, sp, #116	; 0x74
2405f3dc:	9002      	str	r0, [sp, #8]
2405f3de:	9006      	str	r0, [sp, #24]
2405f3e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
2405f3e4:	4809      	ldr	r0, [pc, #36]	; (2405f40c <siprintf+0x38>)
2405f3e6:	9107      	str	r1, [sp, #28]
2405f3e8:	9104      	str	r1, [sp, #16]
2405f3ea:	4909      	ldr	r1, [pc, #36]	; (2405f410 <siprintf+0x3c>)
2405f3ec:	f853 2b04 	ldr.w	r2, [r3], #4
2405f3f0:	9105      	str	r1, [sp, #20]
2405f3f2:	6800      	ldr	r0, [r0, #0]
2405f3f4:	9301      	str	r3, [sp, #4]
2405f3f6:	a902      	add	r1, sp, #8
2405f3f8:	f000 fa52 	bl	2405f8a0 <_svfiprintf_r>
2405f3fc:	9b02      	ldr	r3, [sp, #8]
2405f3fe:	2200      	movs	r2, #0
2405f400:	701a      	strb	r2, [r3, #0]
2405f402:	b01c      	add	sp, #112	; 0x70
2405f404:	f85d eb04 	ldr.w	lr, [sp], #4
2405f408:	b003      	add	sp, #12
2405f40a:	4770      	bx	lr
2405f40c:	20000098 	.word	0x20000098
2405f410:	ffff0208 	.word	0xffff0208

2405f414 <__sread>:
2405f414:	b510      	push	{r4, lr}
2405f416:	460c      	mov	r4, r1
2405f418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2405f41c:	f000 f868 	bl	2405f4f0 <_read_r>
2405f420:	2800      	cmp	r0, #0
2405f422:	bfab      	itete	ge
2405f424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
2405f426:	89a3      	ldrhlt	r3, [r4, #12]
2405f428:	181b      	addge	r3, r3, r0
2405f42a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
2405f42e:	bfac      	ite	ge
2405f430:	6563      	strge	r3, [r4, #84]	; 0x54
2405f432:	81a3      	strhlt	r3, [r4, #12]
2405f434:	bd10      	pop	{r4, pc}

2405f436 <__swrite>:
2405f436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2405f43a:	461f      	mov	r7, r3
2405f43c:	898b      	ldrh	r3, [r1, #12]
2405f43e:	05db      	lsls	r3, r3, #23
2405f440:	4605      	mov	r5, r0
2405f442:	460c      	mov	r4, r1
2405f444:	4616      	mov	r6, r2
2405f446:	d505      	bpl.n	2405f454 <__swrite+0x1e>
2405f448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2405f44c:	2302      	movs	r3, #2
2405f44e:	2200      	movs	r2, #0
2405f450:	f000 f83c 	bl	2405f4cc <_lseek_r>
2405f454:	89a3      	ldrh	r3, [r4, #12]
2405f456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
2405f45a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2405f45e:	81a3      	strh	r3, [r4, #12]
2405f460:	4632      	mov	r2, r6
2405f462:	463b      	mov	r3, r7
2405f464:	4628      	mov	r0, r5
2405f466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
2405f46a:	f000 b853 	b.w	2405f514 <_write_r>

2405f46e <__sseek>:
2405f46e:	b510      	push	{r4, lr}
2405f470:	460c      	mov	r4, r1
2405f472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2405f476:	f000 f829 	bl	2405f4cc <_lseek_r>
2405f47a:	1c43      	adds	r3, r0, #1
2405f47c:	89a3      	ldrh	r3, [r4, #12]
2405f47e:	bf15      	itete	ne
2405f480:	6560      	strne	r0, [r4, #84]	; 0x54
2405f482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
2405f486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
2405f48a:	81a3      	strheq	r3, [r4, #12]
2405f48c:	bf18      	it	ne
2405f48e:	81a3      	strhne	r3, [r4, #12]
2405f490:	bd10      	pop	{r4, pc}

2405f492 <__sclose>:
2405f492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2405f496:	f000 b809 	b.w	2405f4ac <_close_r>

2405f49a <memset>:
2405f49a:	4402      	add	r2, r0
2405f49c:	4603      	mov	r3, r0
2405f49e:	4293      	cmp	r3, r2
2405f4a0:	d100      	bne.n	2405f4a4 <memset+0xa>
2405f4a2:	4770      	bx	lr
2405f4a4:	f803 1b01 	strb.w	r1, [r3], #1
2405f4a8:	e7f9      	b.n	2405f49e <memset+0x4>
	...

2405f4ac <_close_r>:
2405f4ac:	b538      	push	{r3, r4, r5, lr}
2405f4ae:	4d06      	ldr	r5, [pc, #24]	; (2405f4c8 <_close_r+0x1c>)
2405f4b0:	2300      	movs	r3, #0
2405f4b2:	4604      	mov	r4, r0
2405f4b4:	4608      	mov	r0, r1
2405f4b6:	602b      	str	r3, [r5, #0]
2405f4b8:	f7f3 fa95 	bl	240529e6 <_close>
2405f4bc:	1c43      	adds	r3, r0, #1
2405f4be:	d102      	bne.n	2405f4c6 <_close_r+0x1a>
2405f4c0:	682b      	ldr	r3, [r5, #0]
2405f4c2:	b103      	cbz	r3, 2405f4c6 <_close_r+0x1a>
2405f4c4:	6023      	str	r3, [r4, #0]
2405f4c6:	bd38      	pop	{r3, r4, r5, pc}
2405f4c8:	20000708 	.word	0x20000708

2405f4cc <_lseek_r>:
2405f4cc:	b538      	push	{r3, r4, r5, lr}
2405f4ce:	4d07      	ldr	r5, [pc, #28]	; (2405f4ec <_lseek_r+0x20>)
2405f4d0:	4604      	mov	r4, r0
2405f4d2:	4608      	mov	r0, r1
2405f4d4:	4611      	mov	r1, r2
2405f4d6:	2200      	movs	r2, #0
2405f4d8:	602a      	str	r2, [r5, #0]
2405f4da:	461a      	mov	r2, r3
2405f4dc:	f7f3 faaa 	bl	24052a34 <_lseek>
2405f4e0:	1c43      	adds	r3, r0, #1
2405f4e2:	d102      	bne.n	2405f4ea <_lseek_r+0x1e>
2405f4e4:	682b      	ldr	r3, [r5, #0]
2405f4e6:	b103      	cbz	r3, 2405f4ea <_lseek_r+0x1e>
2405f4e8:	6023      	str	r3, [r4, #0]
2405f4ea:	bd38      	pop	{r3, r4, r5, pc}
2405f4ec:	20000708 	.word	0x20000708

2405f4f0 <_read_r>:
2405f4f0:	b538      	push	{r3, r4, r5, lr}
2405f4f2:	4d07      	ldr	r5, [pc, #28]	; (2405f510 <_read_r+0x20>)
2405f4f4:	4604      	mov	r4, r0
2405f4f6:	4608      	mov	r0, r1
2405f4f8:	4611      	mov	r1, r2
2405f4fa:	2200      	movs	r2, #0
2405f4fc:	602a      	str	r2, [r5, #0]
2405f4fe:	461a      	mov	r2, r3
2405f500:	f7f3 fa38 	bl	24052974 <_read>
2405f504:	1c43      	adds	r3, r0, #1
2405f506:	d102      	bne.n	2405f50e <_read_r+0x1e>
2405f508:	682b      	ldr	r3, [r5, #0]
2405f50a:	b103      	cbz	r3, 2405f50e <_read_r+0x1e>
2405f50c:	6023      	str	r3, [r4, #0]
2405f50e:	bd38      	pop	{r3, r4, r5, pc}
2405f510:	20000708 	.word	0x20000708

2405f514 <_write_r>:
2405f514:	b538      	push	{r3, r4, r5, lr}
2405f516:	4d07      	ldr	r5, [pc, #28]	; (2405f534 <_write_r+0x20>)
2405f518:	4604      	mov	r4, r0
2405f51a:	4608      	mov	r0, r1
2405f51c:	4611      	mov	r1, r2
2405f51e:	2200      	movs	r2, #0
2405f520:	602a      	str	r2, [r5, #0]
2405f522:	461a      	mov	r2, r3
2405f524:	f7f3 fa43 	bl	240529ae <_write>
2405f528:	1c43      	adds	r3, r0, #1
2405f52a:	d102      	bne.n	2405f532 <_write_r+0x1e>
2405f52c:	682b      	ldr	r3, [r5, #0]
2405f52e:	b103      	cbz	r3, 2405f532 <_write_r+0x1e>
2405f530:	6023      	str	r3, [r4, #0]
2405f532:	bd38      	pop	{r3, r4, r5, pc}
2405f534:	20000708 	.word	0x20000708

2405f538 <__errno>:
2405f538:	4b01      	ldr	r3, [pc, #4]	; (2405f540 <__errno+0x8>)
2405f53a:	6818      	ldr	r0, [r3, #0]
2405f53c:	4770      	bx	lr
2405f53e:	bf00      	nop
2405f540:	20000098 	.word	0x20000098

2405f544 <__libc_init_array>:
2405f544:	b570      	push	{r4, r5, r6, lr}
2405f546:	4d0d      	ldr	r5, [pc, #52]	; (2405f57c <__libc_init_array+0x38>)
2405f548:	4c0d      	ldr	r4, [pc, #52]	; (2405f580 <__libc_init_array+0x3c>)
2405f54a:	1b64      	subs	r4, r4, r5
2405f54c:	10a4      	asrs	r4, r4, #2
2405f54e:	2600      	movs	r6, #0
2405f550:	42a6      	cmp	r6, r4
2405f552:	d109      	bne.n	2405f568 <__libc_init_array+0x24>
2405f554:	4d0b      	ldr	r5, [pc, #44]	; (2405f584 <__libc_init_array+0x40>)
2405f556:	4c0c      	ldr	r4, [pc, #48]	; (2405f588 <__libc_init_array+0x44>)
2405f558:	f000 fffa 	bl	24060550 <_init>
2405f55c:	1b64      	subs	r4, r4, r5
2405f55e:	10a4      	asrs	r4, r4, #2
2405f560:	2600      	movs	r6, #0
2405f562:	42a6      	cmp	r6, r4
2405f564:	d105      	bne.n	2405f572 <__libc_init_array+0x2e>
2405f566:	bd70      	pop	{r4, r5, r6, pc}
2405f568:	f855 3b04 	ldr.w	r3, [r5], #4
2405f56c:	4798      	blx	r3
2405f56e:	3601      	adds	r6, #1
2405f570:	e7ee      	b.n	2405f550 <__libc_init_array+0xc>
2405f572:	f855 3b04 	ldr.w	r3, [r5], #4
2405f576:	4798      	blx	r3
2405f578:	3601      	adds	r6, #1
2405f57a:	e7f2      	b.n	2405f562 <__libc_init_array+0x1e>
2405f57c:	240616e8 	.word	0x240616e8
2405f580:	240616e8 	.word	0x240616e8
2405f584:	240616e8 	.word	0x240616e8
2405f588:	240616ec 	.word	0x240616ec

2405f58c <__retarget_lock_init_recursive>:
2405f58c:	4770      	bx	lr

2405f58e <__retarget_lock_acquire_recursive>:
2405f58e:	4770      	bx	lr

2405f590 <__retarget_lock_release_recursive>:
2405f590:	4770      	bx	lr

2405f592 <memcpy>:
2405f592:	440a      	add	r2, r1
2405f594:	4291      	cmp	r1, r2
2405f596:	f100 33ff 	add.w	r3, r0, #4294967295
2405f59a:	d100      	bne.n	2405f59e <memcpy+0xc>
2405f59c:	4770      	bx	lr
2405f59e:	b510      	push	{r4, lr}
2405f5a0:	f811 4b01 	ldrb.w	r4, [r1], #1
2405f5a4:	f803 4f01 	strb.w	r4, [r3, #1]!
2405f5a8:	4291      	cmp	r1, r2
2405f5aa:	d1f9      	bne.n	2405f5a0 <memcpy+0xe>
2405f5ac:	bd10      	pop	{r4, pc}
	...

2405f5b0 <__assert_func>:
2405f5b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
2405f5b2:	4614      	mov	r4, r2
2405f5b4:	461a      	mov	r2, r3
2405f5b6:	4b09      	ldr	r3, [pc, #36]	; (2405f5dc <__assert_func+0x2c>)
2405f5b8:	681b      	ldr	r3, [r3, #0]
2405f5ba:	4605      	mov	r5, r0
2405f5bc:	68d8      	ldr	r0, [r3, #12]
2405f5be:	b14c      	cbz	r4, 2405f5d4 <__assert_func+0x24>
2405f5c0:	4b07      	ldr	r3, [pc, #28]	; (2405f5e0 <__assert_func+0x30>)
2405f5c2:	9100      	str	r1, [sp, #0]
2405f5c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
2405f5c8:	4906      	ldr	r1, [pc, #24]	; (2405f5e4 <__assert_func+0x34>)
2405f5ca:	462b      	mov	r3, r5
2405f5cc:	f000 fca4 	bl	2405ff18 <fiprintf>
2405f5d0:	f000 fcde 	bl	2405ff90 <abort>
2405f5d4:	4b04      	ldr	r3, [pc, #16]	; (2405f5e8 <__assert_func+0x38>)
2405f5d6:	461c      	mov	r4, r3
2405f5d8:	e7f3      	b.n	2405f5c2 <__assert_func+0x12>
2405f5da:	bf00      	nop
2405f5dc:	20000098 	.word	0x20000098
2405f5e0:	24061677 	.word	0x24061677
2405f5e4:	24061684 	.word	0x24061684
2405f5e8:	240616b2 	.word	0x240616b2

2405f5ec <_free_r>:
2405f5ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
2405f5ee:	2900      	cmp	r1, #0
2405f5f0:	d044      	beq.n	2405f67c <_free_r+0x90>
2405f5f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
2405f5f6:	9001      	str	r0, [sp, #4]
2405f5f8:	2b00      	cmp	r3, #0
2405f5fa:	f1a1 0404 	sub.w	r4, r1, #4
2405f5fe:	bfb8      	it	lt
2405f600:	18e4      	addlt	r4, r4, r3
2405f602:	f000 f8e7 	bl	2405f7d4 <__malloc_lock>
2405f606:	4a1e      	ldr	r2, [pc, #120]	; (2405f680 <_free_r+0x94>)
2405f608:	9801      	ldr	r0, [sp, #4]
2405f60a:	6813      	ldr	r3, [r2, #0]
2405f60c:	b933      	cbnz	r3, 2405f61c <_free_r+0x30>
2405f60e:	6063      	str	r3, [r4, #4]
2405f610:	6014      	str	r4, [r2, #0]
2405f612:	b003      	add	sp, #12
2405f614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2405f618:	f000 b8e2 	b.w	2405f7e0 <__malloc_unlock>
2405f61c:	42a3      	cmp	r3, r4
2405f61e:	d908      	bls.n	2405f632 <_free_r+0x46>
2405f620:	6825      	ldr	r5, [r4, #0]
2405f622:	1961      	adds	r1, r4, r5
2405f624:	428b      	cmp	r3, r1
2405f626:	bf01      	itttt	eq
2405f628:	6819      	ldreq	r1, [r3, #0]
2405f62a:	685b      	ldreq	r3, [r3, #4]
2405f62c:	1949      	addeq	r1, r1, r5
2405f62e:	6021      	streq	r1, [r4, #0]
2405f630:	e7ed      	b.n	2405f60e <_free_r+0x22>
2405f632:	461a      	mov	r2, r3
2405f634:	685b      	ldr	r3, [r3, #4]
2405f636:	b10b      	cbz	r3, 2405f63c <_free_r+0x50>
2405f638:	42a3      	cmp	r3, r4
2405f63a:	d9fa      	bls.n	2405f632 <_free_r+0x46>
2405f63c:	6811      	ldr	r1, [r2, #0]
2405f63e:	1855      	adds	r5, r2, r1
2405f640:	42a5      	cmp	r5, r4
2405f642:	d10b      	bne.n	2405f65c <_free_r+0x70>
2405f644:	6824      	ldr	r4, [r4, #0]
2405f646:	4421      	add	r1, r4
2405f648:	1854      	adds	r4, r2, r1
2405f64a:	42a3      	cmp	r3, r4
2405f64c:	6011      	str	r1, [r2, #0]
2405f64e:	d1e0      	bne.n	2405f612 <_free_r+0x26>
2405f650:	681c      	ldr	r4, [r3, #0]
2405f652:	685b      	ldr	r3, [r3, #4]
2405f654:	6053      	str	r3, [r2, #4]
2405f656:	440c      	add	r4, r1
2405f658:	6014      	str	r4, [r2, #0]
2405f65a:	e7da      	b.n	2405f612 <_free_r+0x26>
2405f65c:	d902      	bls.n	2405f664 <_free_r+0x78>
2405f65e:	230c      	movs	r3, #12
2405f660:	6003      	str	r3, [r0, #0]
2405f662:	e7d6      	b.n	2405f612 <_free_r+0x26>
2405f664:	6825      	ldr	r5, [r4, #0]
2405f666:	1961      	adds	r1, r4, r5
2405f668:	428b      	cmp	r3, r1
2405f66a:	bf04      	itt	eq
2405f66c:	6819      	ldreq	r1, [r3, #0]
2405f66e:	685b      	ldreq	r3, [r3, #4]
2405f670:	6063      	str	r3, [r4, #4]
2405f672:	bf04      	itt	eq
2405f674:	1949      	addeq	r1, r1, r5
2405f676:	6021      	streq	r1, [r4, #0]
2405f678:	6054      	str	r4, [r2, #4]
2405f67a:	e7ca      	b.n	2405f612 <_free_r+0x26>
2405f67c:	b003      	add	sp, #12
2405f67e:	bd30      	pop	{r4, r5, pc}
2405f680:	20000710 	.word	0x20000710

2405f684 <malloc>:
2405f684:	4b02      	ldr	r3, [pc, #8]	; (2405f690 <malloc+0xc>)
2405f686:	4601      	mov	r1, r0
2405f688:	6818      	ldr	r0, [r3, #0]
2405f68a:	f000 b823 	b.w	2405f6d4 <_malloc_r>
2405f68e:	bf00      	nop
2405f690:	20000098 	.word	0x20000098

2405f694 <sbrk_aligned>:
2405f694:	b570      	push	{r4, r5, r6, lr}
2405f696:	4e0e      	ldr	r6, [pc, #56]	; (2405f6d0 <sbrk_aligned+0x3c>)
2405f698:	460c      	mov	r4, r1
2405f69a:	6831      	ldr	r1, [r6, #0]
2405f69c:	4605      	mov	r5, r0
2405f69e:	b911      	cbnz	r1, 2405f6a6 <sbrk_aligned+0x12>
2405f6a0:	f000 fc66 	bl	2405ff70 <_sbrk_r>
2405f6a4:	6030      	str	r0, [r6, #0]
2405f6a6:	4621      	mov	r1, r4
2405f6a8:	4628      	mov	r0, r5
2405f6aa:	f000 fc61 	bl	2405ff70 <_sbrk_r>
2405f6ae:	1c43      	adds	r3, r0, #1
2405f6b0:	d00a      	beq.n	2405f6c8 <sbrk_aligned+0x34>
2405f6b2:	1cc4      	adds	r4, r0, #3
2405f6b4:	f024 0403 	bic.w	r4, r4, #3
2405f6b8:	42a0      	cmp	r0, r4
2405f6ba:	d007      	beq.n	2405f6cc <sbrk_aligned+0x38>
2405f6bc:	1a21      	subs	r1, r4, r0
2405f6be:	4628      	mov	r0, r5
2405f6c0:	f000 fc56 	bl	2405ff70 <_sbrk_r>
2405f6c4:	3001      	adds	r0, #1
2405f6c6:	d101      	bne.n	2405f6cc <sbrk_aligned+0x38>
2405f6c8:	f04f 34ff 	mov.w	r4, #4294967295
2405f6cc:	4620      	mov	r0, r4
2405f6ce:	bd70      	pop	{r4, r5, r6, pc}
2405f6d0:	20000714 	.word	0x20000714

2405f6d4 <_malloc_r>:
2405f6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2405f6d8:	1ccd      	adds	r5, r1, #3
2405f6da:	f025 0503 	bic.w	r5, r5, #3
2405f6de:	3508      	adds	r5, #8
2405f6e0:	2d0c      	cmp	r5, #12
2405f6e2:	bf38      	it	cc
2405f6e4:	250c      	movcc	r5, #12
2405f6e6:	2d00      	cmp	r5, #0
2405f6e8:	4607      	mov	r7, r0
2405f6ea:	db01      	blt.n	2405f6f0 <_malloc_r+0x1c>
2405f6ec:	42a9      	cmp	r1, r5
2405f6ee:	d905      	bls.n	2405f6fc <_malloc_r+0x28>
2405f6f0:	230c      	movs	r3, #12
2405f6f2:	603b      	str	r3, [r7, #0]
2405f6f4:	2600      	movs	r6, #0
2405f6f6:	4630      	mov	r0, r6
2405f6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2405f6fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 2405f7d0 <_malloc_r+0xfc>
2405f700:	f000 f868 	bl	2405f7d4 <__malloc_lock>
2405f704:	f8d8 3000 	ldr.w	r3, [r8]
2405f708:	461c      	mov	r4, r3
2405f70a:	bb5c      	cbnz	r4, 2405f764 <_malloc_r+0x90>
2405f70c:	4629      	mov	r1, r5
2405f70e:	4638      	mov	r0, r7
2405f710:	f7ff ffc0 	bl	2405f694 <sbrk_aligned>
2405f714:	1c43      	adds	r3, r0, #1
2405f716:	4604      	mov	r4, r0
2405f718:	d155      	bne.n	2405f7c6 <_malloc_r+0xf2>
2405f71a:	f8d8 4000 	ldr.w	r4, [r8]
2405f71e:	4626      	mov	r6, r4
2405f720:	2e00      	cmp	r6, #0
2405f722:	d145      	bne.n	2405f7b0 <_malloc_r+0xdc>
2405f724:	2c00      	cmp	r4, #0
2405f726:	d048      	beq.n	2405f7ba <_malloc_r+0xe6>
2405f728:	6823      	ldr	r3, [r4, #0]
2405f72a:	4631      	mov	r1, r6
2405f72c:	4638      	mov	r0, r7
2405f72e:	eb04 0903 	add.w	r9, r4, r3
2405f732:	f000 fc1d 	bl	2405ff70 <_sbrk_r>
2405f736:	4581      	cmp	r9, r0
2405f738:	d13f      	bne.n	2405f7ba <_malloc_r+0xe6>
2405f73a:	6821      	ldr	r1, [r4, #0]
2405f73c:	1a6d      	subs	r5, r5, r1
2405f73e:	4629      	mov	r1, r5
2405f740:	4638      	mov	r0, r7
2405f742:	f7ff ffa7 	bl	2405f694 <sbrk_aligned>
2405f746:	3001      	adds	r0, #1
2405f748:	d037      	beq.n	2405f7ba <_malloc_r+0xe6>
2405f74a:	6823      	ldr	r3, [r4, #0]
2405f74c:	442b      	add	r3, r5
2405f74e:	6023      	str	r3, [r4, #0]
2405f750:	f8d8 3000 	ldr.w	r3, [r8]
2405f754:	2b00      	cmp	r3, #0
2405f756:	d038      	beq.n	2405f7ca <_malloc_r+0xf6>
2405f758:	685a      	ldr	r2, [r3, #4]
2405f75a:	42a2      	cmp	r2, r4
2405f75c:	d12b      	bne.n	2405f7b6 <_malloc_r+0xe2>
2405f75e:	2200      	movs	r2, #0
2405f760:	605a      	str	r2, [r3, #4]
2405f762:	e00f      	b.n	2405f784 <_malloc_r+0xb0>
2405f764:	6822      	ldr	r2, [r4, #0]
2405f766:	1b52      	subs	r2, r2, r5
2405f768:	d41f      	bmi.n	2405f7aa <_malloc_r+0xd6>
2405f76a:	2a0b      	cmp	r2, #11
2405f76c:	d917      	bls.n	2405f79e <_malloc_r+0xca>
2405f76e:	1961      	adds	r1, r4, r5
2405f770:	42a3      	cmp	r3, r4
2405f772:	6025      	str	r5, [r4, #0]
2405f774:	bf18      	it	ne
2405f776:	6059      	strne	r1, [r3, #4]
2405f778:	6863      	ldr	r3, [r4, #4]
2405f77a:	bf08      	it	eq
2405f77c:	f8c8 1000 	streq.w	r1, [r8]
2405f780:	5162      	str	r2, [r4, r5]
2405f782:	604b      	str	r3, [r1, #4]
2405f784:	4638      	mov	r0, r7
2405f786:	f104 060b 	add.w	r6, r4, #11
2405f78a:	f000 f829 	bl	2405f7e0 <__malloc_unlock>
2405f78e:	f026 0607 	bic.w	r6, r6, #7
2405f792:	1d23      	adds	r3, r4, #4
2405f794:	1af2      	subs	r2, r6, r3
2405f796:	d0ae      	beq.n	2405f6f6 <_malloc_r+0x22>
2405f798:	1b9b      	subs	r3, r3, r6
2405f79a:	50a3      	str	r3, [r4, r2]
2405f79c:	e7ab      	b.n	2405f6f6 <_malloc_r+0x22>
2405f79e:	42a3      	cmp	r3, r4
2405f7a0:	6862      	ldr	r2, [r4, #4]
2405f7a2:	d1dd      	bne.n	2405f760 <_malloc_r+0x8c>
2405f7a4:	f8c8 2000 	str.w	r2, [r8]
2405f7a8:	e7ec      	b.n	2405f784 <_malloc_r+0xb0>
2405f7aa:	4623      	mov	r3, r4
2405f7ac:	6864      	ldr	r4, [r4, #4]
2405f7ae:	e7ac      	b.n	2405f70a <_malloc_r+0x36>
2405f7b0:	4634      	mov	r4, r6
2405f7b2:	6876      	ldr	r6, [r6, #4]
2405f7b4:	e7b4      	b.n	2405f720 <_malloc_r+0x4c>
2405f7b6:	4613      	mov	r3, r2
2405f7b8:	e7cc      	b.n	2405f754 <_malloc_r+0x80>
2405f7ba:	230c      	movs	r3, #12
2405f7bc:	603b      	str	r3, [r7, #0]
2405f7be:	4638      	mov	r0, r7
2405f7c0:	f000 f80e 	bl	2405f7e0 <__malloc_unlock>
2405f7c4:	e797      	b.n	2405f6f6 <_malloc_r+0x22>
2405f7c6:	6025      	str	r5, [r4, #0]
2405f7c8:	e7dc      	b.n	2405f784 <_malloc_r+0xb0>
2405f7ca:	605b      	str	r3, [r3, #4]
2405f7cc:	deff      	udf	#255	; 0xff
2405f7ce:	bf00      	nop
2405f7d0:	20000710 	.word	0x20000710

2405f7d4 <__malloc_lock>:
2405f7d4:	4801      	ldr	r0, [pc, #4]	; (2405f7dc <__malloc_lock+0x8>)
2405f7d6:	f7ff beda 	b.w	2405f58e <__retarget_lock_acquire_recursive>
2405f7da:	bf00      	nop
2405f7dc:	2000070c 	.word	0x2000070c

2405f7e0 <__malloc_unlock>:
2405f7e0:	4801      	ldr	r0, [pc, #4]	; (2405f7e8 <__malloc_unlock+0x8>)
2405f7e2:	f7ff bed5 	b.w	2405f590 <__retarget_lock_release_recursive>
2405f7e6:	bf00      	nop
2405f7e8:	2000070c 	.word	0x2000070c

2405f7ec <__ssputs_r>:
2405f7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2405f7f0:	688e      	ldr	r6, [r1, #8]
2405f7f2:	461f      	mov	r7, r3
2405f7f4:	42be      	cmp	r6, r7
2405f7f6:	680b      	ldr	r3, [r1, #0]
2405f7f8:	4682      	mov	sl, r0
2405f7fa:	460c      	mov	r4, r1
2405f7fc:	4690      	mov	r8, r2
2405f7fe:	d82c      	bhi.n	2405f85a <__ssputs_r+0x6e>
2405f800:	898a      	ldrh	r2, [r1, #12]
2405f802:	f412 6f90 	tst.w	r2, #1152	; 0x480
2405f806:	d026      	beq.n	2405f856 <__ssputs_r+0x6a>
2405f808:	6965      	ldr	r5, [r4, #20]
2405f80a:	6909      	ldr	r1, [r1, #16]
2405f80c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
2405f810:	eba3 0901 	sub.w	r9, r3, r1
2405f814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
2405f818:	1c7b      	adds	r3, r7, #1
2405f81a:	444b      	add	r3, r9
2405f81c:	106d      	asrs	r5, r5, #1
2405f81e:	429d      	cmp	r5, r3
2405f820:	bf38      	it	cc
2405f822:	461d      	movcc	r5, r3
2405f824:	0553      	lsls	r3, r2, #21
2405f826:	d527      	bpl.n	2405f878 <__ssputs_r+0x8c>
2405f828:	4629      	mov	r1, r5
2405f82a:	f7ff ff53 	bl	2405f6d4 <_malloc_r>
2405f82e:	4606      	mov	r6, r0
2405f830:	b360      	cbz	r0, 2405f88c <__ssputs_r+0xa0>
2405f832:	6921      	ldr	r1, [r4, #16]
2405f834:	464a      	mov	r2, r9
2405f836:	f7ff feac 	bl	2405f592 <memcpy>
2405f83a:	89a3      	ldrh	r3, [r4, #12]
2405f83c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
2405f840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2405f844:	81a3      	strh	r3, [r4, #12]
2405f846:	6126      	str	r6, [r4, #16]
2405f848:	6165      	str	r5, [r4, #20]
2405f84a:	444e      	add	r6, r9
2405f84c:	eba5 0509 	sub.w	r5, r5, r9
2405f850:	6026      	str	r6, [r4, #0]
2405f852:	60a5      	str	r5, [r4, #8]
2405f854:	463e      	mov	r6, r7
2405f856:	42be      	cmp	r6, r7
2405f858:	d900      	bls.n	2405f85c <__ssputs_r+0x70>
2405f85a:	463e      	mov	r6, r7
2405f85c:	6820      	ldr	r0, [r4, #0]
2405f85e:	4632      	mov	r2, r6
2405f860:	4641      	mov	r1, r8
2405f862:	f000 fb6b 	bl	2405ff3c <memmove>
2405f866:	68a3      	ldr	r3, [r4, #8]
2405f868:	1b9b      	subs	r3, r3, r6
2405f86a:	60a3      	str	r3, [r4, #8]
2405f86c:	6823      	ldr	r3, [r4, #0]
2405f86e:	4433      	add	r3, r6
2405f870:	6023      	str	r3, [r4, #0]
2405f872:	2000      	movs	r0, #0
2405f874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2405f878:	462a      	mov	r2, r5
2405f87a:	f000 fb90 	bl	2405ff9e <_realloc_r>
2405f87e:	4606      	mov	r6, r0
2405f880:	2800      	cmp	r0, #0
2405f882:	d1e0      	bne.n	2405f846 <__ssputs_r+0x5a>
2405f884:	6921      	ldr	r1, [r4, #16]
2405f886:	4650      	mov	r0, sl
2405f888:	f7ff feb0 	bl	2405f5ec <_free_r>
2405f88c:	230c      	movs	r3, #12
2405f88e:	f8ca 3000 	str.w	r3, [sl]
2405f892:	89a3      	ldrh	r3, [r4, #12]
2405f894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2405f898:	81a3      	strh	r3, [r4, #12]
2405f89a:	f04f 30ff 	mov.w	r0, #4294967295
2405f89e:	e7e9      	b.n	2405f874 <__ssputs_r+0x88>

2405f8a0 <_svfiprintf_r>:
2405f8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2405f8a4:	4698      	mov	r8, r3
2405f8a6:	898b      	ldrh	r3, [r1, #12]
2405f8a8:	061b      	lsls	r3, r3, #24
2405f8aa:	b09d      	sub	sp, #116	; 0x74
2405f8ac:	4607      	mov	r7, r0
2405f8ae:	460d      	mov	r5, r1
2405f8b0:	4614      	mov	r4, r2
2405f8b2:	d50e      	bpl.n	2405f8d2 <_svfiprintf_r+0x32>
2405f8b4:	690b      	ldr	r3, [r1, #16]
2405f8b6:	b963      	cbnz	r3, 2405f8d2 <_svfiprintf_r+0x32>
2405f8b8:	2140      	movs	r1, #64	; 0x40
2405f8ba:	f7ff ff0b 	bl	2405f6d4 <_malloc_r>
2405f8be:	6028      	str	r0, [r5, #0]
2405f8c0:	6128      	str	r0, [r5, #16]
2405f8c2:	b920      	cbnz	r0, 2405f8ce <_svfiprintf_r+0x2e>
2405f8c4:	230c      	movs	r3, #12
2405f8c6:	603b      	str	r3, [r7, #0]
2405f8c8:	f04f 30ff 	mov.w	r0, #4294967295
2405f8cc:	e0d0      	b.n	2405fa70 <_svfiprintf_r+0x1d0>
2405f8ce:	2340      	movs	r3, #64	; 0x40
2405f8d0:	616b      	str	r3, [r5, #20]
2405f8d2:	2300      	movs	r3, #0
2405f8d4:	9309      	str	r3, [sp, #36]	; 0x24
2405f8d6:	2320      	movs	r3, #32
2405f8d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
2405f8dc:	f8cd 800c 	str.w	r8, [sp, #12]
2405f8e0:	2330      	movs	r3, #48	; 0x30
2405f8e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 2405fa88 <_svfiprintf_r+0x1e8>
2405f8e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
2405f8ea:	f04f 0901 	mov.w	r9, #1
2405f8ee:	4623      	mov	r3, r4
2405f8f0:	469a      	mov	sl, r3
2405f8f2:	f813 2b01 	ldrb.w	r2, [r3], #1
2405f8f6:	b10a      	cbz	r2, 2405f8fc <_svfiprintf_r+0x5c>
2405f8f8:	2a25      	cmp	r2, #37	; 0x25
2405f8fa:	d1f9      	bne.n	2405f8f0 <_svfiprintf_r+0x50>
2405f8fc:	ebba 0b04 	subs.w	fp, sl, r4
2405f900:	d00b      	beq.n	2405f91a <_svfiprintf_r+0x7a>
2405f902:	465b      	mov	r3, fp
2405f904:	4622      	mov	r2, r4
2405f906:	4629      	mov	r1, r5
2405f908:	4638      	mov	r0, r7
2405f90a:	f7ff ff6f 	bl	2405f7ec <__ssputs_r>
2405f90e:	3001      	adds	r0, #1
2405f910:	f000 80a9 	beq.w	2405fa66 <_svfiprintf_r+0x1c6>
2405f914:	9a09      	ldr	r2, [sp, #36]	; 0x24
2405f916:	445a      	add	r2, fp
2405f918:	9209      	str	r2, [sp, #36]	; 0x24
2405f91a:	f89a 3000 	ldrb.w	r3, [sl]
2405f91e:	2b00      	cmp	r3, #0
2405f920:	f000 80a1 	beq.w	2405fa66 <_svfiprintf_r+0x1c6>
2405f924:	2300      	movs	r3, #0
2405f926:	f04f 32ff 	mov.w	r2, #4294967295
2405f92a:	e9cd 2305 	strd	r2, r3, [sp, #20]
2405f92e:	f10a 0a01 	add.w	sl, sl, #1
2405f932:	9304      	str	r3, [sp, #16]
2405f934:	9307      	str	r3, [sp, #28]
2405f936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
2405f93a:	931a      	str	r3, [sp, #104]	; 0x68
2405f93c:	4654      	mov	r4, sl
2405f93e:	2205      	movs	r2, #5
2405f940:	f814 1b01 	ldrb.w	r1, [r4], #1
2405f944:	4850      	ldr	r0, [pc, #320]	; (2405fa88 <_svfiprintf_r+0x1e8>)
2405f946:	f7f0 fb7b 	bl	24050040 <memchr>
2405f94a:	9a04      	ldr	r2, [sp, #16]
2405f94c:	b9d8      	cbnz	r0, 2405f986 <_svfiprintf_r+0xe6>
2405f94e:	06d0      	lsls	r0, r2, #27
2405f950:	bf44      	itt	mi
2405f952:	2320      	movmi	r3, #32
2405f954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2405f958:	0711      	lsls	r1, r2, #28
2405f95a:	bf44      	itt	mi
2405f95c:	232b      	movmi	r3, #43	; 0x2b
2405f95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2405f962:	f89a 3000 	ldrb.w	r3, [sl]
2405f966:	2b2a      	cmp	r3, #42	; 0x2a
2405f968:	d015      	beq.n	2405f996 <_svfiprintf_r+0xf6>
2405f96a:	9a07      	ldr	r2, [sp, #28]
2405f96c:	4654      	mov	r4, sl
2405f96e:	2000      	movs	r0, #0
2405f970:	f04f 0c0a 	mov.w	ip, #10
2405f974:	4621      	mov	r1, r4
2405f976:	f811 3b01 	ldrb.w	r3, [r1], #1
2405f97a:	3b30      	subs	r3, #48	; 0x30
2405f97c:	2b09      	cmp	r3, #9
2405f97e:	d94d      	bls.n	2405fa1c <_svfiprintf_r+0x17c>
2405f980:	b1b0      	cbz	r0, 2405f9b0 <_svfiprintf_r+0x110>
2405f982:	9207      	str	r2, [sp, #28]
2405f984:	e014      	b.n	2405f9b0 <_svfiprintf_r+0x110>
2405f986:	eba0 0308 	sub.w	r3, r0, r8
2405f98a:	fa09 f303 	lsl.w	r3, r9, r3
2405f98e:	4313      	orrs	r3, r2
2405f990:	9304      	str	r3, [sp, #16]
2405f992:	46a2      	mov	sl, r4
2405f994:	e7d2      	b.n	2405f93c <_svfiprintf_r+0x9c>
2405f996:	9b03      	ldr	r3, [sp, #12]
2405f998:	1d19      	adds	r1, r3, #4
2405f99a:	681b      	ldr	r3, [r3, #0]
2405f99c:	9103      	str	r1, [sp, #12]
2405f99e:	2b00      	cmp	r3, #0
2405f9a0:	bfbb      	ittet	lt
2405f9a2:	425b      	neglt	r3, r3
2405f9a4:	f042 0202 	orrlt.w	r2, r2, #2
2405f9a8:	9307      	strge	r3, [sp, #28]
2405f9aa:	9307      	strlt	r3, [sp, #28]
2405f9ac:	bfb8      	it	lt
2405f9ae:	9204      	strlt	r2, [sp, #16]
2405f9b0:	7823      	ldrb	r3, [r4, #0]
2405f9b2:	2b2e      	cmp	r3, #46	; 0x2e
2405f9b4:	d10c      	bne.n	2405f9d0 <_svfiprintf_r+0x130>
2405f9b6:	7863      	ldrb	r3, [r4, #1]
2405f9b8:	2b2a      	cmp	r3, #42	; 0x2a
2405f9ba:	d134      	bne.n	2405fa26 <_svfiprintf_r+0x186>
2405f9bc:	9b03      	ldr	r3, [sp, #12]
2405f9be:	1d1a      	adds	r2, r3, #4
2405f9c0:	681b      	ldr	r3, [r3, #0]
2405f9c2:	9203      	str	r2, [sp, #12]
2405f9c4:	2b00      	cmp	r3, #0
2405f9c6:	bfb8      	it	lt
2405f9c8:	f04f 33ff 	movlt.w	r3, #4294967295
2405f9cc:	3402      	adds	r4, #2
2405f9ce:	9305      	str	r3, [sp, #20]
2405f9d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 2405fa98 <_svfiprintf_r+0x1f8>
2405f9d4:	7821      	ldrb	r1, [r4, #0]
2405f9d6:	2203      	movs	r2, #3
2405f9d8:	4650      	mov	r0, sl
2405f9da:	f7f0 fb31 	bl	24050040 <memchr>
2405f9de:	b138      	cbz	r0, 2405f9f0 <_svfiprintf_r+0x150>
2405f9e0:	9b04      	ldr	r3, [sp, #16]
2405f9e2:	eba0 000a 	sub.w	r0, r0, sl
2405f9e6:	2240      	movs	r2, #64	; 0x40
2405f9e8:	4082      	lsls	r2, r0
2405f9ea:	4313      	orrs	r3, r2
2405f9ec:	3401      	adds	r4, #1
2405f9ee:	9304      	str	r3, [sp, #16]
2405f9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
2405f9f4:	4825      	ldr	r0, [pc, #148]	; (2405fa8c <_svfiprintf_r+0x1ec>)
2405f9f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
2405f9fa:	2206      	movs	r2, #6
2405f9fc:	f7f0 fb20 	bl	24050040 <memchr>
2405fa00:	2800      	cmp	r0, #0
2405fa02:	d038      	beq.n	2405fa76 <_svfiprintf_r+0x1d6>
2405fa04:	4b22      	ldr	r3, [pc, #136]	; (2405fa90 <_svfiprintf_r+0x1f0>)
2405fa06:	bb1b      	cbnz	r3, 2405fa50 <_svfiprintf_r+0x1b0>
2405fa08:	9b03      	ldr	r3, [sp, #12]
2405fa0a:	3307      	adds	r3, #7
2405fa0c:	f023 0307 	bic.w	r3, r3, #7
2405fa10:	3308      	adds	r3, #8
2405fa12:	9303      	str	r3, [sp, #12]
2405fa14:	9b09      	ldr	r3, [sp, #36]	; 0x24
2405fa16:	4433      	add	r3, r6
2405fa18:	9309      	str	r3, [sp, #36]	; 0x24
2405fa1a:	e768      	b.n	2405f8ee <_svfiprintf_r+0x4e>
2405fa1c:	fb0c 3202 	mla	r2, ip, r2, r3
2405fa20:	460c      	mov	r4, r1
2405fa22:	2001      	movs	r0, #1
2405fa24:	e7a6      	b.n	2405f974 <_svfiprintf_r+0xd4>
2405fa26:	2300      	movs	r3, #0
2405fa28:	3401      	adds	r4, #1
2405fa2a:	9305      	str	r3, [sp, #20]
2405fa2c:	4619      	mov	r1, r3
2405fa2e:	f04f 0c0a 	mov.w	ip, #10
2405fa32:	4620      	mov	r0, r4
2405fa34:	f810 2b01 	ldrb.w	r2, [r0], #1
2405fa38:	3a30      	subs	r2, #48	; 0x30
2405fa3a:	2a09      	cmp	r2, #9
2405fa3c:	d903      	bls.n	2405fa46 <_svfiprintf_r+0x1a6>
2405fa3e:	2b00      	cmp	r3, #0
2405fa40:	d0c6      	beq.n	2405f9d0 <_svfiprintf_r+0x130>
2405fa42:	9105      	str	r1, [sp, #20]
2405fa44:	e7c4      	b.n	2405f9d0 <_svfiprintf_r+0x130>
2405fa46:	fb0c 2101 	mla	r1, ip, r1, r2
2405fa4a:	4604      	mov	r4, r0
2405fa4c:	2301      	movs	r3, #1
2405fa4e:	e7f0      	b.n	2405fa32 <_svfiprintf_r+0x192>
2405fa50:	ab03      	add	r3, sp, #12
2405fa52:	9300      	str	r3, [sp, #0]
2405fa54:	462a      	mov	r2, r5
2405fa56:	4b0f      	ldr	r3, [pc, #60]	; (2405fa94 <_svfiprintf_r+0x1f4>)
2405fa58:	a904      	add	r1, sp, #16
2405fa5a:	4638      	mov	r0, r7
2405fa5c:	f3af 8000 	nop.w
2405fa60:	1c42      	adds	r2, r0, #1
2405fa62:	4606      	mov	r6, r0
2405fa64:	d1d6      	bne.n	2405fa14 <_svfiprintf_r+0x174>
2405fa66:	89ab      	ldrh	r3, [r5, #12]
2405fa68:	065b      	lsls	r3, r3, #25
2405fa6a:	f53f af2d 	bmi.w	2405f8c8 <_svfiprintf_r+0x28>
2405fa6e:	9809      	ldr	r0, [sp, #36]	; 0x24
2405fa70:	b01d      	add	sp, #116	; 0x74
2405fa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2405fa76:	ab03      	add	r3, sp, #12
2405fa78:	9300      	str	r3, [sp, #0]
2405fa7a:	462a      	mov	r2, r5
2405fa7c:	4b05      	ldr	r3, [pc, #20]	; (2405fa94 <_svfiprintf_r+0x1f4>)
2405fa7e:	a904      	add	r1, sp, #16
2405fa80:	4638      	mov	r0, r7
2405fa82:	f000 f879 	bl	2405fb78 <_printf_i>
2405fa86:	e7eb      	b.n	2405fa60 <_svfiprintf_r+0x1c0>
2405fa88:	240616b3 	.word	0x240616b3
2405fa8c:	240616bd 	.word	0x240616bd
2405fa90:	00000000 	.word	0x00000000
2405fa94:	2405f7ed 	.word	0x2405f7ed
2405fa98:	240616b9 	.word	0x240616b9

2405fa9c <_printf_common>:
2405fa9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2405faa0:	4616      	mov	r6, r2
2405faa2:	4699      	mov	r9, r3
2405faa4:	688a      	ldr	r2, [r1, #8]
2405faa6:	690b      	ldr	r3, [r1, #16]
2405faa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
2405faac:	4293      	cmp	r3, r2
2405faae:	bfb8      	it	lt
2405fab0:	4613      	movlt	r3, r2
2405fab2:	6033      	str	r3, [r6, #0]
2405fab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
2405fab8:	4607      	mov	r7, r0
2405faba:	460c      	mov	r4, r1
2405fabc:	b10a      	cbz	r2, 2405fac2 <_printf_common+0x26>
2405fabe:	3301      	adds	r3, #1
2405fac0:	6033      	str	r3, [r6, #0]
2405fac2:	6823      	ldr	r3, [r4, #0]
2405fac4:	0699      	lsls	r1, r3, #26
2405fac6:	bf42      	ittt	mi
2405fac8:	6833      	ldrmi	r3, [r6, #0]
2405faca:	3302      	addmi	r3, #2
2405facc:	6033      	strmi	r3, [r6, #0]
2405face:	6825      	ldr	r5, [r4, #0]
2405fad0:	f015 0506 	ands.w	r5, r5, #6
2405fad4:	d106      	bne.n	2405fae4 <_printf_common+0x48>
2405fad6:	f104 0a19 	add.w	sl, r4, #25
2405fada:	68e3      	ldr	r3, [r4, #12]
2405fadc:	6832      	ldr	r2, [r6, #0]
2405fade:	1a9b      	subs	r3, r3, r2
2405fae0:	42ab      	cmp	r3, r5
2405fae2:	dc26      	bgt.n	2405fb32 <_printf_common+0x96>
2405fae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
2405fae8:	1e13      	subs	r3, r2, #0
2405faea:	6822      	ldr	r2, [r4, #0]
2405faec:	bf18      	it	ne
2405faee:	2301      	movne	r3, #1
2405faf0:	0692      	lsls	r2, r2, #26
2405faf2:	d42b      	bmi.n	2405fb4c <_printf_common+0xb0>
2405faf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
2405faf8:	4649      	mov	r1, r9
2405fafa:	4638      	mov	r0, r7
2405fafc:	47c0      	blx	r8
2405fafe:	3001      	adds	r0, #1
2405fb00:	d01e      	beq.n	2405fb40 <_printf_common+0xa4>
2405fb02:	6823      	ldr	r3, [r4, #0]
2405fb04:	6922      	ldr	r2, [r4, #16]
2405fb06:	f003 0306 	and.w	r3, r3, #6
2405fb0a:	2b04      	cmp	r3, #4
2405fb0c:	bf02      	ittt	eq
2405fb0e:	68e5      	ldreq	r5, [r4, #12]
2405fb10:	6833      	ldreq	r3, [r6, #0]
2405fb12:	1aed      	subeq	r5, r5, r3
2405fb14:	68a3      	ldr	r3, [r4, #8]
2405fb16:	bf0c      	ite	eq
2405fb18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
2405fb1c:	2500      	movne	r5, #0
2405fb1e:	4293      	cmp	r3, r2
2405fb20:	bfc4      	itt	gt
2405fb22:	1a9b      	subgt	r3, r3, r2
2405fb24:	18ed      	addgt	r5, r5, r3
2405fb26:	2600      	movs	r6, #0
2405fb28:	341a      	adds	r4, #26
2405fb2a:	42b5      	cmp	r5, r6
2405fb2c:	d11a      	bne.n	2405fb64 <_printf_common+0xc8>
2405fb2e:	2000      	movs	r0, #0
2405fb30:	e008      	b.n	2405fb44 <_printf_common+0xa8>
2405fb32:	2301      	movs	r3, #1
2405fb34:	4652      	mov	r2, sl
2405fb36:	4649      	mov	r1, r9
2405fb38:	4638      	mov	r0, r7
2405fb3a:	47c0      	blx	r8
2405fb3c:	3001      	adds	r0, #1
2405fb3e:	d103      	bne.n	2405fb48 <_printf_common+0xac>
2405fb40:	f04f 30ff 	mov.w	r0, #4294967295
2405fb44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2405fb48:	3501      	adds	r5, #1
2405fb4a:	e7c6      	b.n	2405fada <_printf_common+0x3e>
2405fb4c:	18e1      	adds	r1, r4, r3
2405fb4e:	1c5a      	adds	r2, r3, #1
2405fb50:	2030      	movs	r0, #48	; 0x30
2405fb52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
2405fb56:	4422      	add	r2, r4
2405fb58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
2405fb5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
2405fb60:	3302      	adds	r3, #2
2405fb62:	e7c7      	b.n	2405faf4 <_printf_common+0x58>
2405fb64:	2301      	movs	r3, #1
2405fb66:	4622      	mov	r2, r4
2405fb68:	4649      	mov	r1, r9
2405fb6a:	4638      	mov	r0, r7
2405fb6c:	47c0      	blx	r8
2405fb6e:	3001      	adds	r0, #1
2405fb70:	d0e6      	beq.n	2405fb40 <_printf_common+0xa4>
2405fb72:	3601      	adds	r6, #1
2405fb74:	e7d9      	b.n	2405fb2a <_printf_common+0x8e>
	...

2405fb78 <_printf_i>:
2405fb78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
2405fb7c:	7e0f      	ldrb	r7, [r1, #24]
2405fb7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
2405fb80:	2f78      	cmp	r7, #120	; 0x78
2405fb82:	4691      	mov	r9, r2
2405fb84:	4680      	mov	r8, r0
2405fb86:	460c      	mov	r4, r1
2405fb88:	469a      	mov	sl, r3
2405fb8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
2405fb8e:	d807      	bhi.n	2405fba0 <_printf_i+0x28>
2405fb90:	2f62      	cmp	r7, #98	; 0x62
2405fb92:	d80a      	bhi.n	2405fbaa <_printf_i+0x32>
2405fb94:	2f00      	cmp	r7, #0
2405fb96:	f000 80d4 	beq.w	2405fd42 <_printf_i+0x1ca>
2405fb9a:	2f58      	cmp	r7, #88	; 0x58
2405fb9c:	f000 80c0 	beq.w	2405fd20 <_printf_i+0x1a8>
2405fba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
2405fba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
2405fba8:	e03a      	b.n	2405fc20 <_printf_i+0xa8>
2405fbaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
2405fbae:	2b15      	cmp	r3, #21
2405fbb0:	d8f6      	bhi.n	2405fba0 <_printf_i+0x28>
2405fbb2:	a101      	add	r1, pc, #4	; (adr r1, 2405fbb8 <_printf_i+0x40>)
2405fbb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
2405fbb8:	2405fc11 	.word	0x2405fc11
2405fbbc:	2405fc25 	.word	0x2405fc25
2405fbc0:	2405fba1 	.word	0x2405fba1
2405fbc4:	2405fba1 	.word	0x2405fba1
2405fbc8:	2405fba1 	.word	0x2405fba1
2405fbcc:	2405fba1 	.word	0x2405fba1
2405fbd0:	2405fc25 	.word	0x2405fc25
2405fbd4:	2405fba1 	.word	0x2405fba1
2405fbd8:	2405fba1 	.word	0x2405fba1
2405fbdc:	2405fba1 	.word	0x2405fba1
2405fbe0:	2405fba1 	.word	0x2405fba1
2405fbe4:	2405fd29 	.word	0x2405fd29
2405fbe8:	2405fc51 	.word	0x2405fc51
2405fbec:	2405fce3 	.word	0x2405fce3
2405fbf0:	2405fba1 	.word	0x2405fba1
2405fbf4:	2405fba1 	.word	0x2405fba1
2405fbf8:	2405fd4b 	.word	0x2405fd4b
2405fbfc:	2405fba1 	.word	0x2405fba1
2405fc00:	2405fc51 	.word	0x2405fc51
2405fc04:	2405fba1 	.word	0x2405fba1
2405fc08:	2405fba1 	.word	0x2405fba1
2405fc0c:	2405fceb 	.word	0x2405fceb
2405fc10:	682b      	ldr	r3, [r5, #0]
2405fc12:	1d1a      	adds	r2, r3, #4
2405fc14:	681b      	ldr	r3, [r3, #0]
2405fc16:	602a      	str	r2, [r5, #0]
2405fc18:	f104 0542 	add.w	r5, r4, #66	; 0x42
2405fc1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2405fc20:	2301      	movs	r3, #1
2405fc22:	e09f      	b.n	2405fd64 <_printf_i+0x1ec>
2405fc24:	6820      	ldr	r0, [r4, #0]
2405fc26:	682b      	ldr	r3, [r5, #0]
2405fc28:	0607      	lsls	r7, r0, #24
2405fc2a:	f103 0104 	add.w	r1, r3, #4
2405fc2e:	6029      	str	r1, [r5, #0]
2405fc30:	d501      	bpl.n	2405fc36 <_printf_i+0xbe>
2405fc32:	681e      	ldr	r6, [r3, #0]
2405fc34:	e003      	b.n	2405fc3e <_printf_i+0xc6>
2405fc36:	0646      	lsls	r6, r0, #25
2405fc38:	d5fb      	bpl.n	2405fc32 <_printf_i+0xba>
2405fc3a:	f9b3 6000 	ldrsh.w	r6, [r3]
2405fc3e:	2e00      	cmp	r6, #0
2405fc40:	da03      	bge.n	2405fc4a <_printf_i+0xd2>
2405fc42:	232d      	movs	r3, #45	; 0x2d
2405fc44:	4276      	negs	r6, r6
2405fc46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2405fc4a:	485a      	ldr	r0, [pc, #360]	; (2405fdb4 <_printf_i+0x23c>)
2405fc4c:	230a      	movs	r3, #10
2405fc4e:	e012      	b.n	2405fc76 <_printf_i+0xfe>
2405fc50:	682b      	ldr	r3, [r5, #0]
2405fc52:	6820      	ldr	r0, [r4, #0]
2405fc54:	1d19      	adds	r1, r3, #4
2405fc56:	6029      	str	r1, [r5, #0]
2405fc58:	0605      	lsls	r5, r0, #24
2405fc5a:	d501      	bpl.n	2405fc60 <_printf_i+0xe8>
2405fc5c:	681e      	ldr	r6, [r3, #0]
2405fc5e:	e002      	b.n	2405fc66 <_printf_i+0xee>
2405fc60:	0641      	lsls	r1, r0, #25
2405fc62:	d5fb      	bpl.n	2405fc5c <_printf_i+0xe4>
2405fc64:	881e      	ldrh	r6, [r3, #0]
2405fc66:	4853      	ldr	r0, [pc, #332]	; (2405fdb4 <_printf_i+0x23c>)
2405fc68:	2f6f      	cmp	r7, #111	; 0x6f
2405fc6a:	bf0c      	ite	eq
2405fc6c:	2308      	moveq	r3, #8
2405fc6e:	230a      	movne	r3, #10
2405fc70:	2100      	movs	r1, #0
2405fc72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
2405fc76:	6865      	ldr	r5, [r4, #4]
2405fc78:	60a5      	str	r5, [r4, #8]
2405fc7a:	2d00      	cmp	r5, #0
2405fc7c:	bfa2      	ittt	ge
2405fc7e:	6821      	ldrge	r1, [r4, #0]
2405fc80:	f021 0104 	bicge.w	r1, r1, #4
2405fc84:	6021      	strge	r1, [r4, #0]
2405fc86:	b90e      	cbnz	r6, 2405fc8c <_printf_i+0x114>
2405fc88:	2d00      	cmp	r5, #0
2405fc8a:	d04b      	beq.n	2405fd24 <_printf_i+0x1ac>
2405fc8c:	4615      	mov	r5, r2
2405fc8e:	fbb6 f1f3 	udiv	r1, r6, r3
2405fc92:	fb03 6711 	mls	r7, r3, r1, r6
2405fc96:	5dc7      	ldrb	r7, [r0, r7]
2405fc98:	f805 7d01 	strb.w	r7, [r5, #-1]!
2405fc9c:	4637      	mov	r7, r6
2405fc9e:	42bb      	cmp	r3, r7
2405fca0:	460e      	mov	r6, r1
2405fca2:	d9f4      	bls.n	2405fc8e <_printf_i+0x116>
2405fca4:	2b08      	cmp	r3, #8
2405fca6:	d10b      	bne.n	2405fcc0 <_printf_i+0x148>
2405fca8:	6823      	ldr	r3, [r4, #0]
2405fcaa:	07de      	lsls	r6, r3, #31
2405fcac:	d508      	bpl.n	2405fcc0 <_printf_i+0x148>
2405fcae:	6923      	ldr	r3, [r4, #16]
2405fcb0:	6861      	ldr	r1, [r4, #4]
2405fcb2:	4299      	cmp	r1, r3
2405fcb4:	bfde      	ittt	le
2405fcb6:	2330      	movle	r3, #48	; 0x30
2405fcb8:	f805 3c01 	strble.w	r3, [r5, #-1]
2405fcbc:	f105 35ff 	addle.w	r5, r5, #4294967295
2405fcc0:	1b52      	subs	r2, r2, r5
2405fcc2:	6122      	str	r2, [r4, #16]
2405fcc4:	f8cd a000 	str.w	sl, [sp]
2405fcc8:	464b      	mov	r3, r9
2405fcca:	aa03      	add	r2, sp, #12
2405fccc:	4621      	mov	r1, r4
2405fcce:	4640      	mov	r0, r8
2405fcd0:	f7ff fee4 	bl	2405fa9c <_printf_common>
2405fcd4:	3001      	adds	r0, #1
2405fcd6:	d14a      	bne.n	2405fd6e <_printf_i+0x1f6>
2405fcd8:	f04f 30ff 	mov.w	r0, #4294967295
2405fcdc:	b004      	add	sp, #16
2405fcde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2405fce2:	6823      	ldr	r3, [r4, #0]
2405fce4:	f043 0320 	orr.w	r3, r3, #32
2405fce8:	6023      	str	r3, [r4, #0]
2405fcea:	4833      	ldr	r0, [pc, #204]	; (2405fdb8 <_printf_i+0x240>)
2405fcec:	2778      	movs	r7, #120	; 0x78
2405fcee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
2405fcf2:	6823      	ldr	r3, [r4, #0]
2405fcf4:	6829      	ldr	r1, [r5, #0]
2405fcf6:	061f      	lsls	r7, r3, #24
2405fcf8:	f851 6b04 	ldr.w	r6, [r1], #4
2405fcfc:	d402      	bmi.n	2405fd04 <_printf_i+0x18c>
2405fcfe:	065f      	lsls	r7, r3, #25
2405fd00:	bf48      	it	mi
2405fd02:	b2b6      	uxthmi	r6, r6
2405fd04:	07df      	lsls	r7, r3, #31
2405fd06:	bf48      	it	mi
2405fd08:	f043 0320 	orrmi.w	r3, r3, #32
2405fd0c:	6029      	str	r1, [r5, #0]
2405fd0e:	bf48      	it	mi
2405fd10:	6023      	strmi	r3, [r4, #0]
2405fd12:	b91e      	cbnz	r6, 2405fd1c <_printf_i+0x1a4>
2405fd14:	6823      	ldr	r3, [r4, #0]
2405fd16:	f023 0320 	bic.w	r3, r3, #32
2405fd1a:	6023      	str	r3, [r4, #0]
2405fd1c:	2310      	movs	r3, #16
2405fd1e:	e7a7      	b.n	2405fc70 <_printf_i+0xf8>
2405fd20:	4824      	ldr	r0, [pc, #144]	; (2405fdb4 <_printf_i+0x23c>)
2405fd22:	e7e4      	b.n	2405fcee <_printf_i+0x176>
2405fd24:	4615      	mov	r5, r2
2405fd26:	e7bd      	b.n	2405fca4 <_printf_i+0x12c>
2405fd28:	682b      	ldr	r3, [r5, #0]
2405fd2a:	6826      	ldr	r6, [r4, #0]
2405fd2c:	6961      	ldr	r1, [r4, #20]
2405fd2e:	1d18      	adds	r0, r3, #4
2405fd30:	6028      	str	r0, [r5, #0]
2405fd32:	0635      	lsls	r5, r6, #24
2405fd34:	681b      	ldr	r3, [r3, #0]
2405fd36:	d501      	bpl.n	2405fd3c <_printf_i+0x1c4>
2405fd38:	6019      	str	r1, [r3, #0]
2405fd3a:	e002      	b.n	2405fd42 <_printf_i+0x1ca>
2405fd3c:	0670      	lsls	r0, r6, #25
2405fd3e:	d5fb      	bpl.n	2405fd38 <_printf_i+0x1c0>
2405fd40:	8019      	strh	r1, [r3, #0]
2405fd42:	2300      	movs	r3, #0
2405fd44:	6123      	str	r3, [r4, #16]
2405fd46:	4615      	mov	r5, r2
2405fd48:	e7bc      	b.n	2405fcc4 <_printf_i+0x14c>
2405fd4a:	682b      	ldr	r3, [r5, #0]
2405fd4c:	1d1a      	adds	r2, r3, #4
2405fd4e:	602a      	str	r2, [r5, #0]
2405fd50:	681d      	ldr	r5, [r3, #0]
2405fd52:	6862      	ldr	r2, [r4, #4]
2405fd54:	2100      	movs	r1, #0
2405fd56:	4628      	mov	r0, r5
2405fd58:	f7f0 f972 	bl	24050040 <memchr>
2405fd5c:	b108      	cbz	r0, 2405fd62 <_printf_i+0x1ea>
2405fd5e:	1b40      	subs	r0, r0, r5
2405fd60:	6060      	str	r0, [r4, #4]
2405fd62:	6863      	ldr	r3, [r4, #4]
2405fd64:	6123      	str	r3, [r4, #16]
2405fd66:	2300      	movs	r3, #0
2405fd68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2405fd6c:	e7aa      	b.n	2405fcc4 <_printf_i+0x14c>
2405fd6e:	6923      	ldr	r3, [r4, #16]
2405fd70:	462a      	mov	r2, r5
2405fd72:	4649      	mov	r1, r9
2405fd74:	4640      	mov	r0, r8
2405fd76:	47d0      	blx	sl
2405fd78:	3001      	adds	r0, #1
2405fd7a:	d0ad      	beq.n	2405fcd8 <_printf_i+0x160>
2405fd7c:	6823      	ldr	r3, [r4, #0]
2405fd7e:	079b      	lsls	r3, r3, #30
2405fd80:	d413      	bmi.n	2405fdaa <_printf_i+0x232>
2405fd82:	68e0      	ldr	r0, [r4, #12]
2405fd84:	9b03      	ldr	r3, [sp, #12]
2405fd86:	4298      	cmp	r0, r3
2405fd88:	bfb8      	it	lt
2405fd8a:	4618      	movlt	r0, r3
2405fd8c:	e7a6      	b.n	2405fcdc <_printf_i+0x164>
2405fd8e:	2301      	movs	r3, #1
2405fd90:	4632      	mov	r2, r6
2405fd92:	4649      	mov	r1, r9
2405fd94:	4640      	mov	r0, r8
2405fd96:	47d0      	blx	sl
2405fd98:	3001      	adds	r0, #1
2405fd9a:	d09d      	beq.n	2405fcd8 <_printf_i+0x160>
2405fd9c:	3501      	adds	r5, #1
2405fd9e:	68e3      	ldr	r3, [r4, #12]
2405fda0:	9903      	ldr	r1, [sp, #12]
2405fda2:	1a5b      	subs	r3, r3, r1
2405fda4:	42ab      	cmp	r3, r5
2405fda6:	dcf2      	bgt.n	2405fd8e <_printf_i+0x216>
2405fda8:	e7eb      	b.n	2405fd82 <_printf_i+0x20a>
2405fdaa:	2500      	movs	r5, #0
2405fdac:	f104 0619 	add.w	r6, r4, #25
2405fdb0:	e7f5      	b.n	2405fd9e <_printf_i+0x226>
2405fdb2:	bf00      	nop
2405fdb4:	240616c4 	.word	0x240616c4
2405fdb8:	240616d5 	.word	0x240616d5

2405fdbc <__sflush_r>:
2405fdbc:	898a      	ldrh	r2, [r1, #12]
2405fdbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2405fdc2:	4605      	mov	r5, r0
2405fdc4:	0710      	lsls	r0, r2, #28
2405fdc6:	460c      	mov	r4, r1
2405fdc8:	d458      	bmi.n	2405fe7c <__sflush_r+0xc0>
2405fdca:	684b      	ldr	r3, [r1, #4]
2405fdcc:	2b00      	cmp	r3, #0
2405fdce:	dc05      	bgt.n	2405fddc <__sflush_r+0x20>
2405fdd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
2405fdd2:	2b00      	cmp	r3, #0
2405fdd4:	dc02      	bgt.n	2405fddc <__sflush_r+0x20>
2405fdd6:	2000      	movs	r0, #0
2405fdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2405fddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
2405fdde:	2e00      	cmp	r6, #0
2405fde0:	d0f9      	beq.n	2405fdd6 <__sflush_r+0x1a>
2405fde2:	2300      	movs	r3, #0
2405fde4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
2405fde8:	682f      	ldr	r7, [r5, #0]
2405fdea:	6a21      	ldr	r1, [r4, #32]
2405fdec:	602b      	str	r3, [r5, #0]
2405fdee:	d032      	beq.n	2405fe56 <__sflush_r+0x9a>
2405fdf0:	6d60      	ldr	r0, [r4, #84]	; 0x54
2405fdf2:	89a3      	ldrh	r3, [r4, #12]
2405fdf4:	075a      	lsls	r2, r3, #29
2405fdf6:	d505      	bpl.n	2405fe04 <__sflush_r+0x48>
2405fdf8:	6863      	ldr	r3, [r4, #4]
2405fdfa:	1ac0      	subs	r0, r0, r3
2405fdfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
2405fdfe:	b10b      	cbz	r3, 2405fe04 <__sflush_r+0x48>
2405fe00:	6c23      	ldr	r3, [r4, #64]	; 0x40
2405fe02:	1ac0      	subs	r0, r0, r3
2405fe04:	2300      	movs	r3, #0
2405fe06:	4602      	mov	r2, r0
2405fe08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
2405fe0a:	6a21      	ldr	r1, [r4, #32]
2405fe0c:	4628      	mov	r0, r5
2405fe0e:	47b0      	blx	r6
2405fe10:	1c43      	adds	r3, r0, #1
2405fe12:	89a3      	ldrh	r3, [r4, #12]
2405fe14:	d106      	bne.n	2405fe24 <__sflush_r+0x68>
2405fe16:	6829      	ldr	r1, [r5, #0]
2405fe18:	291d      	cmp	r1, #29
2405fe1a:	d82b      	bhi.n	2405fe74 <__sflush_r+0xb8>
2405fe1c:	4a29      	ldr	r2, [pc, #164]	; (2405fec4 <__sflush_r+0x108>)
2405fe1e:	410a      	asrs	r2, r1
2405fe20:	07d6      	lsls	r6, r2, #31
2405fe22:	d427      	bmi.n	2405fe74 <__sflush_r+0xb8>
2405fe24:	2200      	movs	r2, #0
2405fe26:	6062      	str	r2, [r4, #4]
2405fe28:	04d9      	lsls	r1, r3, #19
2405fe2a:	6922      	ldr	r2, [r4, #16]
2405fe2c:	6022      	str	r2, [r4, #0]
2405fe2e:	d504      	bpl.n	2405fe3a <__sflush_r+0x7e>
2405fe30:	1c42      	adds	r2, r0, #1
2405fe32:	d101      	bne.n	2405fe38 <__sflush_r+0x7c>
2405fe34:	682b      	ldr	r3, [r5, #0]
2405fe36:	b903      	cbnz	r3, 2405fe3a <__sflush_r+0x7e>
2405fe38:	6560      	str	r0, [r4, #84]	; 0x54
2405fe3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
2405fe3c:	602f      	str	r7, [r5, #0]
2405fe3e:	2900      	cmp	r1, #0
2405fe40:	d0c9      	beq.n	2405fdd6 <__sflush_r+0x1a>
2405fe42:	f104 0344 	add.w	r3, r4, #68	; 0x44
2405fe46:	4299      	cmp	r1, r3
2405fe48:	d002      	beq.n	2405fe50 <__sflush_r+0x94>
2405fe4a:	4628      	mov	r0, r5
2405fe4c:	f7ff fbce 	bl	2405f5ec <_free_r>
2405fe50:	2000      	movs	r0, #0
2405fe52:	6360      	str	r0, [r4, #52]	; 0x34
2405fe54:	e7c0      	b.n	2405fdd8 <__sflush_r+0x1c>
2405fe56:	2301      	movs	r3, #1
2405fe58:	4628      	mov	r0, r5
2405fe5a:	47b0      	blx	r6
2405fe5c:	1c41      	adds	r1, r0, #1
2405fe5e:	d1c8      	bne.n	2405fdf2 <__sflush_r+0x36>
2405fe60:	682b      	ldr	r3, [r5, #0]
2405fe62:	2b00      	cmp	r3, #0
2405fe64:	d0c5      	beq.n	2405fdf2 <__sflush_r+0x36>
2405fe66:	2b1d      	cmp	r3, #29
2405fe68:	d001      	beq.n	2405fe6e <__sflush_r+0xb2>
2405fe6a:	2b16      	cmp	r3, #22
2405fe6c:	d101      	bne.n	2405fe72 <__sflush_r+0xb6>
2405fe6e:	602f      	str	r7, [r5, #0]
2405fe70:	e7b1      	b.n	2405fdd6 <__sflush_r+0x1a>
2405fe72:	89a3      	ldrh	r3, [r4, #12]
2405fe74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2405fe78:	81a3      	strh	r3, [r4, #12]
2405fe7a:	e7ad      	b.n	2405fdd8 <__sflush_r+0x1c>
2405fe7c:	690f      	ldr	r7, [r1, #16]
2405fe7e:	2f00      	cmp	r7, #0
2405fe80:	d0a9      	beq.n	2405fdd6 <__sflush_r+0x1a>
2405fe82:	0793      	lsls	r3, r2, #30
2405fe84:	680e      	ldr	r6, [r1, #0]
2405fe86:	bf08      	it	eq
2405fe88:	694b      	ldreq	r3, [r1, #20]
2405fe8a:	600f      	str	r7, [r1, #0]
2405fe8c:	bf18      	it	ne
2405fe8e:	2300      	movne	r3, #0
2405fe90:	eba6 0807 	sub.w	r8, r6, r7
2405fe94:	608b      	str	r3, [r1, #8]
2405fe96:	f1b8 0f00 	cmp.w	r8, #0
2405fe9a:	dd9c      	ble.n	2405fdd6 <__sflush_r+0x1a>
2405fe9c:	6a21      	ldr	r1, [r4, #32]
2405fe9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
2405fea0:	4643      	mov	r3, r8
2405fea2:	463a      	mov	r2, r7
2405fea4:	4628      	mov	r0, r5
2405fea6:	47b0      	blx	r6
2405fea8:	2800      	cmp	r0, #0
2405feaa:	dc06      	bgt.n	2405feba <__sflush_r+0xfe>
2405feac:	89a3      	ldrh	r3, [r4, #12]
2405feae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2405feb2:	81a3      	strh	r3, [r4, #12]
2405feb4:	f04f 30ff 	mov.w	r0, #4294967295
2405feb8:	e78e      	b.n	2405fdd8 <__sflush_r+0x1c>
2405feba:	4407      	add	r7, r0
2405febc:	eba8 0800 	sub.w	r8, r8, r0
2405fec0:	e7e9      	b.n	2405fe96 <__sflush_r+0xda>
2405fec2:	bf00      	nop
2405fec4:	dfbffffe 	.word	0xdfbffffe

2405fec8 <_fflush_r>:
2405fec8:	b538      	push	{r3, r4, r5, lr}
2405feca:	690b      	ldr	r3, [r1, #16]
2405fecc:	4605      	mov	r5, r0
2405fece:	460c      	mov	r4, r1
2405fed0:	b913      	cbnz	r3, 2405fed8 <_fflush_r+0x10>
2405fed2:	2500      	movs	r5, #0
2405fed4:	4628      	mov	r0, r5
2405fed6:	bd38      	pop	{r3, r4, r5, pc}
2405fed8:	b118      	cbz	r0, 2405fee2 <_fflush_r+0x1a>
2405feda:	6a03      	ldr	r3, [r0, #32]
2405fedc:	b90b      	cbnz	r3, 2405fee2 <_fflush_r+0x1a>
2405fede:	f7ff fa43 	bl	2405f368 <__sinit>
2405fee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2405fee6:	2b00      	cmp	r3, #0
2405fee8:	d0f3      	beq.n	2405fed2 <_fflush_r+0xa>
2405feea:	6e62      	ldr	r2, [r4, #100]	; 0x64
2405feec:	07d0      	lsls	r0, r2, #31
2405feee:	d404      	bmi.n	2405fefa <_fflush_r+0x32>
2405fef0:	0599      	lsls	r1, r3, #22
2405fef2:	d402      	bmi.n	2405fefa <_fflush_r+0x32>
2405fef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
2405fef6:	f7ff fb4a 	bl	2405f58e <__retarget_lock_acquire_recursive>
2405fefa:	4628      	mov	r0, r5
2405fefc:	4621      	mov	r1, r4
2405fefe:	f7ff ff5d 	bl	2405fdbc <__sflush_r>
2405ff02:	6e63      	ldr	r3, [r4, #100]	; 0x64
2405ff04:	07da      	lsls	r2, r3, #31
2405ff06:	4605      	mov	r5, r0
2405ff08:	d4e4      	bmi.n	2405fed4 <_fflush_r+0xc>
2405ff0a:	89a3      	ldrh	r3, [r4, #12]
2405ff0c:	059b      	lsls	r3, r3, #22
2405ff0e:	d4e1      	bmi.n	2405fed4 <_fflush_r+0xc>
2405ff10:	6da0      	ldr	r0, [r4, #88]	; 0x58
2405ff12:	f7ff fb3d 	bl	2405f590 <__retarget_lock_release_recursive>
2405ff16:	e7dd      	b.n	2405fed4 <_fflush_r+0xc>

2405ff18 <fiprintf>:
2405ff18:	b40e      	push	{r1, r2, r3}
2405ff1a:	b503      	push	{r0, r1, lr}
2405ff1c:	4601      	mov	r1, r0
2405ff1e:	ab03      	add	r3, sp, #12
2405ff20:	4805      	ldr	r0, [pc, #20]	; (2405ff38 <fiprintf+0x20>)
2405ff22:	f853 2b04 	ldr.w	r2, [r3], #4
2405ff26:	6800      	ldr	r0, [r0, #0]
2405ff28:	9301      	str	r3, [sp, #4]
2405ff2a:	f000 f891 	bl	24060050 <_vfiprintf_r>
2405ff2e:	b002      	add	sp, #8
2405ff30:	f85d eb04 	ldr.w	lr, [sp], #4
2405ff34:	b003      	add	sp, #12
2405ff36:	4770      	bx	lr
2405ff38:	20000098 	.word	0x20000098

2405ff3c <memmove>:
2405ff3c:	4288      	cmp	r0, r1
2405ff3e:	b510      	push	{r4, lr}
2405ff40:	eb01 0402 	add.w	r4, r1, r2
2405ff44:	d902      	bls.n	2405ff4c <memmove+0x10>
2405ff46:	4284      	cmp	r4, r0
2405ff48:	4623      	mov	r3, r4
2405ff4a:	d807      	bhi.n	2405ff5c <memmove+0x20>
2405ff4c:	1e43      	subs	r3, r0, #1
2405ff4e:	42a1      	cmp	r1, r4
2405ff50:	d008      	beq.n	2405ff64 <memmove+0x28>
2405ff52:	f811 2b01 	ldrb.w	r2, [r1], #1
2405ff56:	f803 2f01 	strb.w	r2, [r3, #1]!
2405ff5a:	e7f8      	b.n	2405ff4e <memmove+0x12>
2405ff5c:	4402      	add	r2, r0
2405ff5e:	4601      	mov	r1, r0
2405ff60:	428a      	cmp	r2, r1
2405ff62:	d100      	bne.n	2405ff66 <memmove+0x2a>
2405ff64:	bd10      	pop	{r4, pc}
2405ff66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
2405ff6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
2405ff6e:	e7f7      	b.n	2405ff60 <memmove+0x24>

2405ff70 <_sbrk_r>:
2405ff70:	b538      	push	{r3, r4, r5, lr}
2405ff72:	4d06      	ldr	r5, [pc, #24]	; (2405ff8c <_sbrk_r+0x1c>)
2405ff74:	2300      	movs	r3, #0
2405ff76:	4604      	mov	r4, r0
2405ff78:	4608      	mov	r0, r1
2405ff7a:	602b      	str	r3, [r5, #0]
2405ff7c:	f7f2 fd68 	bl	24052a50 <_sbrk>
2405ff80:	1c43      	adds	r3, r0, #1
2405ff82:	d102      	bne.n	2405ff8a <_sbrk_r+0x1a>
2405ff84:	682b      	ldr	r3, [r5, #0]
2405ff86:	b103      	cbz	r3, 2405ff8a <_sbrk_r+0x1a>
2405ff88:	6023      	str	r3, [r4, #0]
2405ff8a:	bd38      	pop	{r3, r4, r5, pc}
2405ff8c:	20000708 	.word	0x20000708

2405ff90 <abort>:
2405ff90:	b508      	push	{r3, lr}
2405ff92:	2006      	movs	r0, #6
2405ff94:	f000 fa34 	bl	24060400 <raise>
2405ff98:	2001      	movs	r0, #1
2405ff9a:	f7f2 fce1 	bl	24052960 <_exit>

2405ff9e <_realloc_r>:
2405ff9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2405ffa2:	4680      	mov	r8, r0
2405ffa4:	4614      	mov	r4, r2
2405ffa6:	460e      	mov	r6, r1
2405ffa8:	b921      	cbnz	r1, 2405ffb4 <_realloc_r+0x16>
2405ffaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
2405ffae:	4611      	mov	r1, r2
2405ffb0:	f7ff bb90 	b.w	2405f6d4 <_malloc_r>
2405ffb4:	b92a      	cbnz	r2, 2405ffc2 <_realloc_r+0x24>
2405ffb6:	f7ff fb19 	bl	2405f5ec <_free_r>
2405ffba:	4625      	mov	r5, r4
2405ffbc:	4628      	mov	r0, r5
2405ffbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2405ffc2:	f000 fa39 	bl	24060438 <_malloc_usable_size_r>
2405ffc6:	4284      	cmp	r4, r0
2405ffc8:	4607      	mov	r7, r0
2405ffca:	d802      	bhi.n	2405ffd2 <_realloc_r+0x34>
2405ffcc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
2405ffd0:	d812      	bhi.n	2405fff8 <_realloc_r+0x5a>
2405ffd2:	4621      	mov	r1, r4
2405ffd4:	4640      	mov	r0, r8
2405ffd6:	f7ff fb7d 	bl	2405f6d4 <_malloc_r>
2405ffda:	4605      	mov	r5, r0
2405ffdc:	2800      	cmp	r0, #0
2405ffde:	d0ed      	beq.n	2405ffbc <_realloc_r+0x1e>
2405ffe0:	42bc      	cmp	r4, r7
2405ffe2:	4622      	mov	r2, r4
2405ffe4:	4631      	mov	r1, r6
2405ffe6:	bf28      	it	cs
2405ffe8:	463a      	movcs	r2, r7
2405ffea:	f7ff fad2 	bl	2405f592 <memcpy>
2405ffee:	4631      	mov	r1, r6
2405fff0:	4640      	mov	r0, r8
2405fff2:	f7ff fafb 	bl	2405f5ec <_free_r>
2405fff6:	e7e1      	b.n	2405ffbc <_realloc_r+0x1e>
2405fff8:	4635      	mov	r5, r6
2405fffa:	e7df      	b.n	2405ffbc <_realloc_r+0x1e>

2405fffc <__sfputc_r>:
2405fffc:	6893      	ldr	r3, [r2, #8]
2405fffe:	3b01      	subs	r3, #1
24060000:	2b00      	cmp	r3, #0
24060002:	b410      	push	{r4}
24060004:	6093      	str	r3, [r2, #8]
24060006:	da08      	bge.n	2406001a <__sfputc_r+0x1e>
24060008:	6994      	ldr	r4, [r2, #24]
2406000a:	42a3      	cmp	r3, r4
2406000c:	db01      	blt.n	24060012 <__sfputc_r+0x16>
2406000e:	290a      	cmp	r1, #10
24060010:	d103      	bne.n	2406001a <__sfputc_r+0x1e>
24060012:	f85d 4b04 	ldr.w	r4, [sp], #4
24060016:	f000 b935 	b.w	24060284 <__swbuf_r>
2406001a:	6813      	ldr	r3, [r2, #0]
2406001c:	1c58      	adds	r0, r3, #1
2406001e:	6010      	str	r0, [r2, #0]
24060020:	7019      	strb	r1, [r3, #0]
24060022:	4608      	mov	r0, r1
24060024:	f85d 4b04 	ldr.w	r4, [sp], #4
24060028:	4770      	bx	lr

2406002a <__sfputs_r>:
2406002a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2406002c:	4606      	mov	r6, r0
2406002e:	460f      	mov	r7, r1
24060030:	4614      	mov	r4, r2
24060032:	18d5      	adds	r5, r2, r3
24060034:	42ac      	cmp	r4, r5
24060036:	d101      	bne.n	2406003c <__sfputs_r+0x12>
24060038:	2000      	movs	r0, #0
2406003a:	e007      	b.n	2406004c <__sfputs_r+0x22>
2406003c:	f814 1b01 	ldrb.w	r1, [r4], #1
24060040:	463a      	mov	r2, r7
24060042:	4630      	mov	r0, r6
24060044:	f7ff ffda 	bl	2405fffc <__sfputc_r>
24060048:	1c43      	adds	r3, r0, #1
2406004a:	d1f3      	bne.n	24060034 <__sfputs_r+0xa>
2406004c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

24060050 <_vfiprintf_r>:
24060050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24060054:	460d      	mov	r5, r1
24060056:	b09d      	sub	sp, #116	; 0x74
24060058:	4614      	mov	r4, r2
2406005a:	4698      	mov	r8, r3
2406005c:	4606      	mov	r6, r0
2406005e:	b118      	cbz	r0, 24060068 <_vfiprintf_r+0x18>
24060060:	6a03      	ldr	r3, [r0, #32]
24060062:	b90b      	cbnz	r3, 24060068 <_vfiprintf_r+0x18>
24060064:	f7ff f980 	bl	2405f368 <__sinit>
24060068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
2406006a:	07d9      	lsls	r1, r3, #31
2406006c:	d405      	bmi.n	2406007a <_vfiprintf_r+0x2a>
2406006e:	89ab      	ldrh	r3, [r5, #12]
24060070:	059a      	lsls	r2, r3, #22
24060072:	d402      	bmi.n	2406007a <_vfiprintf_r+0x2a>
24060074:	6da8      	ldr	r0, [r5, #88]	; 0x58
24060076:	f7ff fa8a 	bl	2405f58e <__retarget_lock_acquire_recursive>
2406007a:	89ab      	ldrh	r3, [r5, #12]
2406007c:	071b      	lsls	r3, r3, #28
2406007e:	d501      	bpl.n	24060084 <_vfiprintf_r+0x34>
24060080:	692b      	ldr	r3, [r5, #16]
24060082:	b99b      	cbnz	r3, 240600ac <_vfiprintf_r+0x5c>
24060084:	4629      	mov	r1, r5
24060086:	4630      	mov	r0, r6
24060088:	f000 f93a 	bl	24060300 <__swsetup_r>
2406008c:	b170      	cbz	r0, 240600ac <_vfiprintf_r+0x5c>
2406008e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
24060090:	07dc      	lsls	r4, r3, #31
24060092:	d504      	bpl.n	2406009e <_vfiprintf_r+0x4e>
24060094:	f04f 30ff 	mov.w	r0, #4294967295
24060098:	b01d      	add	sp, #116	; 0x74
2406009a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2406009e:	89ab      	ldrh	r3, [r5, #12]
240600a0:	0598      	lsls	r0, r3, #22
240600a2:	d4f7      	bmi.n	24060094 <_vfiprintf_r+0x44>
240600a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
240600a6:	f7ff fa73 	bl	2405f590 <__retarget_lock_release_recursive>
240600aa:	e7f3      	b.n	24060094 <_vfiprintf_r+0x44>
240600ac:	2300      	movs	r3, #0
240600ae:	9309      	str	r3, [sp, #36]	; 0x24
240600b0:	2320      	movs	r3, #32
240600b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
240600b6:	f8cd 800c 	str.w	r8, [sp, #12]
240600ba:	2330      	movs	r3, #48	; 0x30
240600bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 24060270 <_vfiprintf_r+0x220>
240600c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
240600c4:	f04f 0901 	mov.w	r9, #1
240600c8:	4623      	mov	r3, r4
240600ca:	469a      	mov	sl, r3
240600cc:	f813 2b01 	ldrb.w	r2, [r3], #1
240600d0:	b10a      	cbz	r2, 240600d6 <_vfiprintf_r+0x86>
240600d2:	2a25      	cmp	r2, #37	; 0x25
240600d4:	d1f9      	bne.n	240600ca <_vfiprintf_r+0x7a>
240600d6:	ebba 0b04 	subs.w	fp, sl, r4
240600da:	d00b      	beq.n	240600f4 <_vfiprintf_r+0xa4>
240600dc:	465b      	mov	r3, fp
240600de:	4622      	mov	r2, r4
240600e0:	4629      	mov	r1, r5
240600e2:	4630      	mov	r0, r6
240600e4:	f7ff ffa1 	bl	2406002a <__sfputs_r>
240600e8:	3001      	adds	r0, #1
240600ea:	f000 80a9 	beq.w	24060240 <_vfiprintf_r+0x1f0>
240600ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
240600f0:	445a      	add	r2, fp
240600f2:	9209      	str	r2, [sp, #36]	; 0x24
240600f4:	f89a 3000 	ldrb.w	r3, [sl]
240600f8:	2b00      	cmp	r3, #0
240600fa:	f000 80a1 	beq.w	24060240 <_vfiprintf_r+0x1f0>
240600fe:	2300      	movs	r3, #0
24060100:	f04f 32ff 	mov.w	r2, #4294967295
24060104:	e9cd 2305 	strd	r2, r3, [sp, #20]
24060108:	f10a 0a01 	add.w	sl, sl, #1
2406010c:	9304      	str	r3, [sp, #16]
2406010e:	9307      	str	r3, [sp, #28]
24060110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
24060114:	931a      	str	r3, [sp, #104]	; 0x68
24060116:	4654      	mov	r4, sl
24060118:	2205      	movs	r2, #5
2406011a:	f814 1b01 	ldrb.w	r1, [r4], #1
2406011e:	4854      	ldr	r0, [pc, #336]	; (24060270 <_vfiprintf_r+0x220>)
24060120:	f7ef ff8e 	bl	24050040 <memchr>
24060124:	9a04      	ldr	r2, [sp, #16]
24060126:	b9d8      	cbnz	r0, 24060160 <_vfiprintf_r+0x110>
24060128:	06d1      	lsls	r1, r2, #27
2406012a:	bf44      	itt	mi
2406012c:	2320      	movmi	r3, #32
2406012e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
24060132:	0713      	lsls	r3, r2, #28
24060134:	bf44      	itt	mi
24060136:	232b      	movmi	r3, #43	; 0x2b
24060138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2406013c:	f89a 3000 	ldrb.w	r3, [sl]
24060140:	2b2a      	cmp	r3, #42	; 0x2a
24060142:	d015      	beq.n	24060170 <_vfiprintf_r+0x120>
24060144:	9a07      	ldr	r2, [sp, #28]
24060146:	4654      	mov	r4, sl
24060148:	2000      	movs	r0, #0
2406014a:	f04f 0c0a 	mov.w	ip, #10
2406014e:	4621      	mov	r1, r4
24060150:	f811 3b01 	ldrb.w	r3, [r1], #1
24060154:	3b30      	subs	r3, #48	; 0x30
24060156:	2b09      	cmp	r3, #9
24060158:	d94d      	bls.n	240601f6 <_vfiprintf_r+0x1a6>
2406015a:	b1b0      	cbz	r0, 2406018a <_vfiprintf_r+0x13a>
2406015c:	9207      	str	r2, [sp, #28]
2406015e:	e014      	b.n	2406018a <_vfiprintf_r+0x13a>
24060160:	eba0 0308 	sub.w	r3, r0, r8
24060164:	fa09 f303 	lsl.w	r3, r9, r3
24060168:	4313      	orrs	r3, r2
2406016a:	9304      	str	r3, [sp, #16]
2406016c:	46a2      	mov	sl, r4
2406016e:	e7d2      	b.n	24060116 <_vfiprintf_r+0xc6>
24060170:	9b03      	ldr	r3, [sp, #12]
24060172:	1d19      	adds	r1, r3, #4
24060174:	681b      	ldr	r3, [r3, #0]
24060176:	9103      	str	r1, [sp, #12]
24060178:	2b00      	cmp	r3, #0
2406017a:	bfbb      	ittet	lt
2406017c:	425b      	neglt	r3, r3
2406017e:	f042 0202 	orrlt.w	r2, r2, #2
24060182:	9307      	strge	r3, [sp, #28]
24060184:	9307      	strlt	r3, [sp, #28]
24060186:	bfb8      	it	lt
24060188:	9204      	strlt	r2, [sp, #16]
2406018a:	7823      	ldrb	r3, [r4, #0]
2406018c:	2b2e      	cmp	r3, #46	; 0x2e
2406018e:	d10c      	bne.n	240601aa <_vfiprintf_r+0x15a>
24060190:	7863      	ldrb	r3, [r4, #1]
24060192:	2b2a      	cmp	r3, #42	; 0x2a
24060194:	d134      	bne.n	24060200 <_vfiprintf_r+0x1b0>
24060196:	9b03      	ldr	r3, [sp, #12]
24060198:	1d1a      	adds	r2, r3, #4
2406019a:	681b      	ldr	r3, [r3, #0]
2406019c:	9203      	str	r2, [sp, #12]
2406019e:	2b00      	cmp	r3, #0
240601a0:	bfb8      	it	lt
240601a2:	f04f 33ff 	movlt.w	r3, #4294967295
240601a6:	3402      	adds	r4, #2
240601a8:	9305      	str	r3, [sp, #20]
240601aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 24060280 <_vfiprintf_r+0x230>
240601ae:	7821      	ldrb	r1, [r4, #0]
240601b0:	2203      	movs	r2, #3
240601b2:	4650      	mov	r0, sl
240601b4:	f7ef ff44 	bl	24050040 <memchr>
240601b8:	b138      	cbz	r0, 240601ca <_vfiprintf_r+0x17a>
240601ba:	9b04      	ldr	r3, [sp, #16]
240601bc:	eba0 000a 	sub.w	r0, r0, sl
240601c0:	2240      	movs	r2, #64	; 0x40
240601c2:	4082      	lsls	r2, r0
240601c4:	4313      	orrs	r3, r2
240601c6:	3401      	adds	r4, #1
240601c8:	9304      	str	r3, [sp, #16]
240601ca:	f814 1b01 	ldrb.w	r1, [r4], #1
240601ce:	4829      	ldr	r0, [pc, #164]	; (24060274 <_vfiprintf_r+0x224>)
240601d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
240601d4:	2206      	movs	r2, #6
240601d6:	f7ef ff33 	bl	24050040 <memchr>
240601da:	2800      	cmp	r0, #0
240601dc:	d03f      	beq.n	2406025e <_vfiprintf_r+0x20e>
240601de:	4b26      	ldr	r3, [pc, #152]	; (24060278 <_vfiprintf_r+0x228>)
240601e0:	bb1b      	cbnz	r3, 2406022a <_vfiprintf_r+0x1da>
240601e2:	9b03      	ldr	r3, [sp, #12]
240601e4:	3307      	adds	r3, #7
240601e6:	f023 0307 	bic.w	r3, r3, #7
240601ea:	3308      	adds	r3, #8
240601ec:	9303      	str	r3, [sp, #12]
240601ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
240601f0:	443b      	add	r3, r7
240601f2:	9309      	str	r3, [sp, #36]	; 0x24
240601f4:	e768      	b.n	240600c8 <_vfiprintf_r+0x78>
240601f6:	fb0c 3202 	mla	r2, ip, r2, r3
240601fa:	460c      	mov	r4, r1
240601fc:	2001      	movs	r0, #1
240601fe:	e7a6      	b.n	2406014e <_vfiprintf_r+0xfe>
24060200:	2300      	movs	r3, #0
24060202:	3401      	adds	r4, #1
24060204:	9305      	str	r3, [sp, #20]
24060206:	4619      	mov	r1, r3
24060208:	f04f 0c0a 	mov.w	ip, #10
2406020c:	4620      	mov	r0, r4
2406020e:	f810 2b01 	ldrb.w	r2, [r0], #1
24060212:	3a30      	subs	r2, #48	; 0x30
24060214:	2a09      	cmp	r2, #9
24060216:	d903      	bls.n	24060220 <_vfiprintf_r+0x1d0>
24060218:	2b00      	cmp	r3, #0
2406021a:	d0c6      	beq.n	240601aa <_vfiprintf_r+0x15a>
2406021c:	9105      	str	r1, [sp, #20]
2406021e:	e7c4      	b.n	240601aa <_vfiprintf_r+0x15a>
24060220:	fb0c 2101 	mla	r1, ip, r1, r2
24060224:	4604      	mov	r4, r0
24060226:	2301      	movs	r3, #1
24060228:	e7f0      	b.n	2406020c <_vfiprintf_r+0x1bc>
2406022a:	ab03      	add	r3, sp, #12
2406022c:	9300      	str	r3, [sp, #0]
2406022e:	462a      	mov	r2, r5
24060230:	4b12      	ldr	r3, [pc, #72]	; (2406027c <_vfiprintf_r+0x22c>)
24060232:	a904      	add	r1, sp, #16
24060234:	4630      	mov	r0, r6
24060236:	f3af 8000 	nop.w
2406023a:	4607      	mov	r7, r0
2406023c:	1c78      	adds	r0, r7, #1
2406023e:	d1d6      	bne.n	240601ee <_vfiprintf_r+0x19e>
24060240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
24060242:	07d9      	lsls	r1, r3, #31
24060244:	d405      	bmi.n	24060252 <_vfiprintf_r+0x202>
24060246:	89ab      	ldrh	r3, [r5, #12]
24060248:	059a      	lsls	r2, r3, #22
2406024a:	d402      	bmi.n	24060252 <_vfiprintf_r+0x202>
2406024c:	6da8      	ldr	r0, [r5, #88]	; 0x58
2406024e:	f7ff f99f 	bl	2405f590 <__retarget_lock_release_recursive>
24060252:	89ab      	ldrh	r3, [r5, #12]
24060254:	065b      	lsls	r3, r3, #25
24060256:	f53f af1d 	bmi.w	24060094 <_vfiprintf_r+0x44>
2406025a:	9809      	ldr	r0, [sp, #36]	; 0x24
2406025c:	e71c      	b.n	24060098 <_vfiprintf_r+0x48>
2406025e:	ab03      	add	r3, sp, #12
24060260:	9300      	str	r3, [sp, #0]
24060262:	462a      	mov	r2, r5
24060264:	4b05      	ldr	r3, [pc, #20]	; (2406027c <_vfiprintf_r+0x22c>)
24060266:	a904      	add	r1, sp, #16
24060268:	4630      	mov	r0, r6
2406026a:	f7ff fc85 	bl	2405fb78 <_printf_i>
2406026e:	e7e4      	b.n	2406023a <_vfiprintf_r+0x1ea>
24060270:	240616b3 	.word	0x240616b3
24060274:	240616bd 	.word	0x240616bd
24060278:	00000000 	.word	0x00000000
2406027c:	2406002b 	.word	0x2406002b
24060280:	240616b9 	.word	0x240616b9

24060284 <__swbuf_r>:
24060284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24060286:	460e      	mov	r6, r1
24060288:	4614      	mov	r4, r2
2406028a:	4605      	mov	r5, r0
2406028c:	b118      	cbz	r0, 24060296 <__swbuf_r+0x12>
2406028e:	6a03      	ldr	r3, [r0, #32]
24060290:	b90b      	cbnz	r3, 24060296 <__swbuf_r+0x12>
24060292:	f7ff f869 	bl	2405f368 <__sinit>
24060296:	69a3      	ldr	r3, [r4, #24]
24060298:	60a3      	str	r3, [r4, #8]
2406029a:	89a3      	ldrh	r3, [r4, #12]
2406029c:	071a      	lsls	r2, r3, #28
2406029e:	d525      	bpl.n	240602ec <__swbuf_r+0x68>
240602a0:	6923      	ldr	r3, [r4, #16]
240602a2:	b31b      	cbz	r3, 240602ec <__swbuf_r+0x68>
240602a4:	6823      	ldr	r3, [r4, #0]
240602a6:	6922      	ldr	r2, [r4, #16]
240602a8:	1a98      	subs	r0, r3, r2
240602aa:	6963      	ldr	r3, [r4, #20]
240602ac:	b2f6      	uxtb	r6, r6
240602ae:	4283      	cmp	r3, r0
240602b0:	4637      	mov	r7, r6
240602b2:	dc04      	bgt.n	240602be <__swbuf_r+0x3a>
240602b4:	4621      	mov	r1, r4
240602b6:	4628      	mov	r0, r5
240602b8:	f7ff fe06 	bl	2405fec8 <_fflush_r>
240602bc:	b9e0      	cbnz	r0, 240602f8 <__swbuf_r+0x74>
240602be:	68a3      	ldr	r3, [r4, #8]
240602c0:	3b01      	subs	r3, #1
240602c2:	60a3      	str	r3, [r4, #8]
240602c4:	6823      	ldr	r3, [r4, #0]
240602c6:	1c5a      	adds	r2, r3, #1
240602c8:	6022      	str	r2, [r4, #0]
240602ca:	701e      	strb	r6, [r3, #0]
240602cc:	6962      	ldr	r2, [r4, #20]
240602ce:	1c43      	adds	r3, r0, #1
240602d0:	429a      	cmp	r2, r3
240602d2:	d004      	beq.n	240602de <__swbuf_r+0x5a>
240602d4:	89a3      	ldrh	r3, [r4, #12]
240602d6:	07db      	lsls	r3, r3, #31
240602d8:	d506      	bpl.n	240602e8 <__swbuf_r+0x64>
240602da:	2e0a      	cmp	r6, #10
240602dc:	d104      	bne.n	240602e8 <__swbuf_r+0x64>
240602de:	4621      	mov	r1, r4
240602e0:	4628      	mov	r0, r5
240602e2:	f7ff fdf1 	bl	2405fec8 <_fflush_r>
240602e6:	b938      	cbnz	r0, 240602f8 <__swbuf_r+0x74>
240602e8:	4638      	mov	r0, r7
240602ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240602ec:	4621      	mov	r1, r4
240602ee:	4628      	mov	r0, r5
240602f0:	f000 f806 	bl	24060300 <__swsetup_r>
240602f4:	2800      	cmp	r0, #0
240602f6:	d0d5      	beq.n	240602a4 <__swbuf_r+0x20>
240602f8:	f04f 37ff 	mov.w	r7, #4294967295
240602fc:	e7f4      	b.n	240602e8 <__swbuf_r+0x64>
	...

24060300 <__swsetup_r>:
24060300:	b538      	push	{r3, r4, r5, lr}
24060302:	4b2a      	ldr	r3, [pc, #168]	; (240603ac <__swsetup_r+0xac>)
24060304:	4605      	mov	r5, r0
24060306:	6818      	ldr	r0, [r3, #0]
24060308:	460c      	mov	r4, r1
2406030a:	b118      	cbz	r0, 24060314 <__swsetup_r+0x14>
2406030c:	6a03      	ldr	r3, [r0, #32]
2406030e:	b90b      	cbnz	r3, 24060314 <__swsetup_r+0x14>
24060310:	f7ff f82a 	bl	2405f368 <__sinit>
24060314:	89a3      	ldrh	r3, [r4, #12]
24060316:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
2406031a:	0718      	lsls	r0, r3, #28
2406031c:	d422      	bmi.n	24060364 <__swsetup_r+0x64>
2406031e:	06d9      	lsls	r1, r3, #27
24060320:	d407      	bmi.n	24060332 <__swsetup_r+0x32>
24060322:	2309      	movs	r3, #9
24060324:	602b      	str	r3, [r5, #0]
24060326:	f042 0340 	orr.w	r3, r2, #64	; 0x40
2406032a:	81a3      	strh	r3, [r4, #12]
2406032c:	f04f 30ff 	mov.w	r0, #4294967295
24060330:	e034      	b.n	2406039c <__swsetup_r+0x9c>
24060332:	0758      	lsls	r0, r3, #29
24060334:	d512      	bpl.n	2406035c <__swsetup_r+0x5c>
24060336:	6b61      	ldr	r1, [r4, #52]	; 0x34
24060338:	b141      	cbz	r1, 2406034c <__swsetup_r+0x4c>
2406033a:	f104 0344 	add.w	r3, r4, #68	; 0x44
2406033e:	4299      	cmp	r1, r3
24060340:	d002      	beq.n	24060348 <__swsetup_r+0x48>
24060342:	4628      	mov	r0, r5
24060344:	f7ff f952 	bl	2405f5ec <_free_r>
24060348:	2300      	movs	r3, #0
2406034a:	6363      	str	r3, [r4, #52]	; 0x34
2406034c:	89a3      	ldrh	r3, [r4, #12]
2406034e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
24060352:	81a3      	strh	r3, [r4, #12]
24060354:	2300      	movs	r3, #0
24060356:	6063      	str	r3, [r4, #4]
24060358:	6923      	ldr	r3, [r4, #16]
2406035a:	6023      	str	r3, [r4, #0]
2406035c:	89a3      	ldrh	r3, [r4, #12]
2406035e:	f043 0308 	orr.w	r3, r3, #8
24060362:	81a3      	strh	r3, [r4, #12]
24060364:	6923      	ldr	r3, [r4, #16]
24060366:	b94b      	cbnz	r3, 2406037c <__swsetup_r+0x7c>
24060368:	89a3      	ldrh	r3, [r4, #12]
2406036a:	f403 7320 	and.w	r3, r3, #640	; 0x280
2406036e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24060372:	d003      	beq.n	2406037c <__swsetup_r+0x7c>
24060374:	4621      	mov	r1, r4
24060376:	4628      	mov	r0, r5
24060378:	f000 f88c 	bl	24060494 <__smakebuf_r>
2406037c:	89a0      	ldrh	r0, [r4, #12]
2406037e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
24060382:	f010 0301 	ands.w	r3, r0, #1
24060386:	d00a      	beq.n	2406039e <__swsetup_r+0x9e>
24060388:	2300      	movs	r3, #0
2406038a:	60a3      	str	r3, [r4, #8]
2406038c:	6963      	ldr	r3, [r4, #20]
2406038e:	425b      	negs	r3, r3
24060390:	61a3      	str	r3, [r4, #24]
24060392:	6923      	ldr	r3, [r4, #16]
24060394:	b943      	cbnz	r3, 240603a8 <__swsetup_r+0xa8>
24060396:	f010 0080 	ands.w	r0, r0, #128	; 0x80
2406039a:	d1c4      	bne.n	24060326 <__swsetup_r+0x26>
2406039c:	bd38      	pop	{r3, r4, r5, pc}
2406039e:	0781      	lsls	r1, r0, #30
240603a0:	bf58      	it	pl
240603a2:	6963      	ldrpl	r3, [r4, #20]
240603a4:	60a3      	str	r3, [r4, #8]
240603a6:	e7f4      	b.n	24060392 <__swsetup_r+0x92>
240603a8:	2000      	movs	r0, #0
240603aa:	e7f7      	b.n	2406039c <__swsetup_r+0x9c>
240603ac:	20000098 	.word	0x20000098

240603b0 <_raise_r>:
240603b0:	291f      	cmp	r1, #31
240603b2:	b538      	push	{r3, r4, r5, lr}
240603b4:	4604      	mov	r4, r0
240603b6:	460d      	mov	r5, r1
240603b8:	d904      	bls.n	240603c4 <_raise_r+0x14>
240603ba:	2316      	movs	r3, #22
240603bc:	6003      	str	r3, [r0, #0]
240603be:	f04f 30ff 	mov.w	r0, #4294967295
240603c2:	bd38      	pop	{r3, r4, r5, pc}
240603c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
240603c6:	b112      	cbz	r2, 240603ce <_raise_r+0x1e>
240603c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
240603cc:	b94b      	cbnz	r3, 240603e2 <_raise_r+0x32>
240603ce:	4620      	mov	r0, r4
240603d0:	f000 f830 	bl	24060434 <_getpid_r>
240603d4:	462a      	mov	r2, r5
240603d6:	4601      	mov	r1, r0
240603d8:	4620      	mov	r0, r4
240603da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
240603de:	f000 b817 	b.w	24060410 <_kill_r>
240603e2:	2b01      	cmp	r3, #1
240603e4:	d00a      	beq.n	240603fc <_raise_r+0x4c>
240603e6:	1c59      	adds	r1, r3, #1
240603e8:	d103      	bne.n	240603f2 <_raise_r+0x42>
240603ea:	2316      	movs	r3, #22
240603ec:	6003      	str	r3, [r0, #0]
240603ee:	2001      	movs	r0, #1
240603f0:	e7e7      	b.n	240603c2 <_raise_r+0x12>
240603f2:	2400      	movs	r4, #0
240603f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
240603f8:	4628      	mov	r0, r5
240603fa:	4798      	blx	r3
240603fc:	2000      	movs	r0, #0
240603fe:	e7e0      	b.n	240603c2 <_raise_r+0x12>

24060400 <raise>:
24060400:	4b02      	ldr	r3, [pc, #8]	; (2406040c <raise+0xc>)
24060402:	4601      	mov	r1, r0
24060404:	6818      	ldr	r0, [r3, #0]
24060406:	f7ff bfd3 	b.w	240603b0 <_raise_r>
2406040a:	bf00      	nop
2406040c:	20000098 	.word	0x20000098

24060410 <_kill_r>:
24060410:	b538      	push	{r3, r4, r5, lr}
24060412:	4d07      	ldr	r5, [pc, #28]	; (24060430 <_kill_r+0x20>)
24060414:	2300      	movs	r3, #0
24060416:	4604      	mov	r4, r0
24060418:	4608      	mov	r0, r1
2406041a:	4611      	mov	r1, r2
2406041c:	602b      	str	r3, [r5, #0]
2406041e:	f7f2 fa8f 	bl	24052940 <_kill>
24060422:	1c43      	adds	r3, r0, #1
24060424:	d102      	bne.n	2406042c <_kill_r+0x1c>
24060426:	682b      	ldr	r3, [r5, #0]
24060428:	b103      	cbz	r3, 2406042c <_kill_r+0x1c>
2406042a:	6023      	str	r3, [r4, #0]
2406042c:	bd38      	pop	{r3, r4, r5, pc}
2406042e:	bf00      	nop
24060430:	20000708 	.word	0x20000708

24060434 <_getpid_r>:
24060434:	f7f2 ba7c 	b.w	24052930 <_getpid>

24060438 <_malloc_usable_size_r>:
24060438:	f851 3c04 	ldr.w	r3, [r1, #-4]
2406043c:	1f18      	subs	r0, r3, #4
2406043e:	2b00      	cmp	r3, #0
24060440:	bfbc      	itt	lt
24060442:	580b      	ldrlt	r3, [r1, r0]
24060444:	18c0      	addlt	r0, r0, r3
24060446:	4770      	bx	lr

24060448 <__swhatbuf_r>:
24060448:	b570      	push	{r4, r5, r6, lr}
2406044a:	460c      	mov	r4, r1
2406044c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
24060450:	2900      	cmp	r1, #0
24060452:	b096      	sub	sp, #88	; 0x58
24060454:	4615      	mov	r5, r2
24060456:	461e      	mov	r6, r3
24060458:	da0d      	bge.n	24060476 <__swhatbuf_r+0x2e>
2406045a:	89a3      	ldrh	r3, [r4, #12]
2406045c:	f013 0f80 	tst.w	r3, #128	; 0x80
24060460:	f04f 0100 	mov.w	r1, #0
24060464:	bf0c      	ite	eq
24060466:	f44f 6380 	moveq.w	r3, #1024	; 0x400
2406046a:	2340      	movne	r3, #64	; 0x40
2406046c:	2000      	movs	r0, #0
2406046e:	6031      	str	r1, [r6, #0]
24060470:	602b      	str	r3, [r5, #0]
24060472:	b016      	add	sp, #88	; 0x58
24060474:	bd70      	pop	{r4, r5, r6, pc}
24060476:	466a      	mov	r2, sp
24060478:	f000 f848 	bl	2406050c <_fstat_r>
2406047c:	2800      	cmp	r0, #0
2406047e:	dbec      	blt.n	2406045a <__swhatbuf_r+0x12>
24060480:	9901      	ldr	r1, [sp, #4]
24060482:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
24060486:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
2406048a:	4259      	negs	r1, r3
2406048c:	4159      	adcs	r1, r3
2406048e:	f44f 6380 	mov.w	r3, #1024	; 0x400
24060492:	e7eb      	b.n	2406046c <__swhatbuf_r+0x24>

24060494 <__smakebuf_r>:
24060494:	898b      	ldrh	r3, [r1, #12]
24060496:	b573      	push	{r0, r1, r4, r5, r6, lr}
24060498:	079d      	lsls	r5, r3, #30
2406049a:	4606      	mov	r6, r0
2406049c:	460c      	mov	r4, r1
2406049e:	d507      	bpl.n	240604b0 <__smakebuf_r+0x1c>
240604a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
240604a4:	6023      	str	r3, [r4, #0]
240604a6:	6123      	str	r3, [r4, #16]
240604a8:	2301      	movs	r3, #1
240604aa:	6163      	str	r3, [r4, #20]
240604ac:	b002      	add	sp, #8
240604ae:	bd70      	pop	{r4, r5, r6, pc}
240604b0:	ab01      	add	r3, sp, #4
240604b2:	466a      	mov	r2, sp
240604b4:	f7ff ffc8 	bl	24060448 <__swhatbuf_r>
240604b8:	9900      	ldr	r1, [sp, #0]
240604ba:	4605      	mov	r5, r0
240604bc:	4630      	mov	r0, r6
240604be:	f7ff f909 	bl	2405f6d4 <_malloc_r>
240604c2:	b948      	cbnz	r0, 240604d8 <__smakebuf_r+0x44>
240604c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
240604c8:	059a      	lsls	r2, r3, #22
240604ca:	d4ef      	bmi.n	240604ac <__smakebuf_r+0x18>
240604cc:	f023 0303 	bic.w	r3, r3, #3
240604d0:	f043 0302 	orr.w	r3, r3, #2
240604d4:	81a3      	strh	r3, [r4, #12]
240604d6:	e7e3      	b.n	240604a0 <__smakebuf_r+0xc>
240604d8:	89a3      	ldrh	r3, [r4, #12]
240604da:	6020      	str	r0, [r4, #0]
240604dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240604e0:	81a3      	strh	r3, [r4, #12]
240604e2:	9b00      	ldr	r3, [sp, #0]
240604e4:	6163      	str	r3, [r4, #20]
240604e6:	9b01      	ldr	r3, [sp, #4]
240604e8:	6120      	str	r0, [r4, #16]
240604ea:	b15b      	cbz	r3, 24060504 <__smakebuf_r+0x70>
240604ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
240604f0:	4630      	mov	r0, r6
240604f2:	f000 f81d 	bl	24060530 <_isatty_r>
240604f6:	b128      	cbz	r0, 24060504 <__smakebuf_r+0x70>
240604f8:	89a3      	ldrh	r3, [r4, #12]
240604fa:	f023 0303 	bic.w	r3, r3, #3
240604fe:	f043 0301 	orr.w	r3, r3, #1
24060502:	81a3      	strh	r3, [r4, #12]
24060504:	89a3      	ldrh	r3, [r4, #12]
24060506:	431d      	orrs	r5, r3
24060508:	81a5      	strh	r5, [r4, #12]
2406050a:	e7cf      	b.n	240604ac <__smakebuf_r+0x18>

2406050c <_fstat_r>:
2406050c:	b538      	push	{r3, r4, r5, lr}
2406050e:	4d07      	ldr	r5, [pc, #28]	; (2406052c <_fstat_r+0x20>)
24060510:	2300      	movs	r3, #0
24060512:	4604      	mov	r4, r0
24060514:	4608      	mov	r0, r1
24060516:	4611      	mov	r1, r2
24060518:	602b      	str	r3, [r5, #0]
2406051a:	f7f2 fa70 	bl	240529fe <_fstat>
2406051e:	1c43      	adds	r3, r0, #1
24060520:	d102      	bne.n	24060528 <_fstat_r+0x1c>
24060522:	682b      	ldr	r3, [r5, #0]
24060524:	b103      	cbz	r3, 24060528 <_fstat_r+0x1c>
24060526:	6023      	str	r3, [r4, #0]
24060528:	bd38      	pop	{r3, r4, r5, pc}
2406052a:	bf00      	nop
2406052c:	20000708 	.word	0x20000708

24060530 <_isatty_r>:
24060530:	b538      	push	{r3, r4, r5, lr}
24060532:	4d06      	ldr	r5, [pc, #24]	; (2406054c <_isatty_r+0x1c>)
24060534:	2300      	movs	r3, #0
24060536:	4604      	mov	r4, r0
24060538:	4608      	mov	r0, r1
2406053a:	602b      	str	r3, [r5, #0]
2406053c:	f7f2 fa6f 	bl	24052a1e <_isatty>
24060540:	1c43      	adds	r3, r0, #1
24060542:	d102      	bne.n	2406054a <_isatty_r+0x1a>
24060544:	682b      	ldr	r3, [r5, #0]
24060546:	b103      	cbz	r3, 2406054a <_isatty_r+0x1a>
24060548:	6023      	str	r3, [r4, #0]
2406054a:	bd38      	pop	{r3, r4, r5, pc}
2406054c:	20000708 	.word	0x20000708

24060550 <_init>:
24060550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24060552:	bf00      	nop
24060554:	bcf8      	pop	{r3, r4, r5, r6, r7}
24060556:	bc08      	pop	{r3}
24060558:	469e      	mov	lr, r3
2406055a:	4770      	bx	lr

2406055c <_fini>:
2406055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2406055e:	bf00      	nop
24060560:	bcf8      	pop	{r3, r4, r5, r6, r7}
24060562:	bc08      	pop	{r3}
24060564:	469e      	mov	lr, r3
24060566:	4770      	bx	lr
